//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.UOMWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UOMWCF.IUOMWCF")]
    public interface IUOMWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/DoWork", ReplyAction="http://tempuri.org/IUOMWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/DoWork", ReplyAction="http://tempuri.org/IUOMWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/SearchUOMCodeOnly", ReplyAction="http://tempuri.org/IUOMWCF/SearchUOMCodeOnlyResponse")]
        string SearchUOMCodeOnly(string ActiveStatus, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/SearchUOMCodeOnly", ReplyAction="http://tempuri.org/IUOMWCF/SearchUOMCodeOnlyResponse")]
        System.Threading.Tasks.Task<string> SearchUOMCodeOnlyAsync(string ActiveStatus, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/SelectAll", ReplyAction="http://tempuri.org/IUOMWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/SelectAll", ReplyAction="http://tempuri.org/IUOMWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/SelectAllList", ReplyAction="http://tempuri.org/IUOMWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/SelectAllList", ReplyAction="http://tempuri.org/IUOMWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/Delete", ReplyAction="http://tempuri.org/IUOMWCF/DeleteResponse")]
        string Delete(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/Delete", ReplyAction="http://tempuri.org/IUOMWCF/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/InsertToUOMNew", ReplyAction="http://tempuri.org/IUOMWCF/InsertToUOMNewResponse")]
        string InsertToUOMNew(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/InsertToUOMNew", ReplyAction="http://tempuri.org/IUOMWCF/InsertToUOMNewResponse")]
        System.Threading.Tasks.Task<string> InsertToUOMNewAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/UpdateUOM", ReplyAction="http://tempuri.org/IUOMWCF/UpdateUOMResponse")]
        string UpdateUOM(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUOMWCF/UpdateUOM", ReplyAction="http://tempuri.org/IUOMWCF/UpdateUOMResponse")]
        System.Threading.Tasks.Task<string> UpdateUOMAsync(string vmwcf, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUOMWCFChannel : VATDesktop.Repo.UOMWCF.IUOMWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UOMWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.UOMWCF.IUOMWCF>, VATDesktop.Repo.UOMWCF.IUOMWCF {
        
        public UOMWCFClient() {
        }
        
        public UOMWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UOMWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UOMWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UOMWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SearchUOMCodeOnly(string ActiveStatus, string connVMwcf) {
            return base.Channel.SearchUOMCodeOnly(ActiveStatus, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchUOMCodeOnlyAsync(string ActiveStatus, string connVMwcf) {
            return base.Channel.SearchUOMCodeOnlyAsync(ActiveStatus, connVMwcf);
        }
        
        public string SelectAll(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionField, conditionValue, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionField, conditionValue, Dt, connVMwcf);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string Delete(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.Delete(vmwcf, idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.DeleteAsync(vmwcf, idswcf, connVMwcf);
        }
        
        public string InsertToUOMNew(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToUOMNew(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToUOMNewAsync(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToUOMNewAsync(vmwcf, connVMwcf);
        }
        
        public string UpdateUOM(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateUOM(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUOMAsync(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateUOMAsync(vmwcf, connVMwcf);
        }
    }
}
