using Excel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using VATServer.Interface;
using VATServer.Ordinary;
using VATViewModel.DTOs;


namespace VATServer.Library
{
    public class ReceiveDAL : IReceive
    {
        #region Declarations

        private const string FieldDelimeter = DBConstant.FieldDelimeter;
        private DBSQLConnection _dbsqlConnection = new DBSQLConnection();
        ProductDAL _ProductDAL = new ProductDAL();

        CommonDAL commonDal = new CommonDAL();

        int IssuePlaceQty = 8;
        int IssuePlaceAmt = 8;
        string issueAutoPostValue = "N";
        bool IsAutoFrom4_3 = false;
        string[] retResults = new string[4];
        IssueDAL issDal = new IssueDAL();
        private string sqlText;
        private int transResult;


        #endregion

        #region Navigation

        public NavigationVM Receive_Navigation(NavigationVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Check Point

                if (vm.FiscalYear == 0)
                {
                    DateTime now = DateTime.Now;
                    string startDate = new DateTime(now.Year, now.Month, 1).ToString("yyyy-MMM-dd");
                    FiscalYearVM varFiscalYearVM = new FiscalYearDAL().SelectAll(0, new[] { "PeriodStart" }, new[] { startDate }, currConn, transaction).FirstOrDefault();
                    if (string.IsNullOrWhiteSpace(varFiscalYearVM.PeriodID))
                    {
                        throw new ArgumentNullException("Fiscal Year Not Available for Date: " + now);
                    }

                    vm.FiscalYear = Convert.ToInt32(varFiscalYearVM.CurrentYear);

                }


                #endregion

                #region SQL Statement

                #region SQL Text

                sqlText = "";
                sqlText = @"
------declare @Id as int = 14393;
------declare @FiscalYear as int = 2021;
------declare @TransactionType as varchar(50) = 'Other';
------declare @BranchId as int = 1;

";
                if (vm.ButtonName == "Current")
                {
                    #region Current Item

                    sqlText = sqlText + @"
--------------------------------------------------Current--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.ReceiveNo InvoiceNo from ReceiveHeaders inv
where 1=1 
and inv.ReceiveNo=@InvoiceNo

";
                    #endregion
                }
                else if (vm.Id == 0 || vm.ButtonName == "First")
                {

                    #region First Item

                    sqlText = sqlText + @"
--------------------------------------------------First--------------------------------------------------
---------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.ReceiveNo InvoiceNo from ReceiveHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
order by Id asc

";
                    #endregion

                }
                else if (vm.ButtonName == "Last")
                {

                    #region Last Item

                    sqlText = sqlText + @"
--------------------------------------------------Last--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.ReceiveNo InvoiceNo from ReceiveHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
order by Id desc


";
                    #endregion

                }
                else if (vm.ButtonName == "Next")
                {

                    #region Next Item

                    sqlText = sqlText + @"
--------------------------------------------------Next--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.ReceiveNo InvoiceNo from ReceiveHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
and Id > @Id
order by Id asc

";
                    #endregion

                }
                else if (vm.ButtonName == "Previous")
                {
                    #region Previous Item

                    sqlText = sqlText + @"
--------------------------------------------------Previous--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.ReceiveNo InvoiceNo from ReceiveHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
and Id < @Id
order by Id desc

";
                    #endregion
                }


                #endregion

                #region SQL Execution
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                if (vm.ButtonName == "Current")
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", vm.InvoiceNo);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@FiscalYear", vm.FiscalYear);
                    cmd.Parameters.AddWithValue("@TransactionType", vm.TransactionType);
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);

                    if (vm.Id > 0)
                    {
                        cmd.Parameters.AddWithValue("@Id", vm.Id);
                    }
                }



                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                if (dt != null && dt.Rows.Count > 0)
                {
                    vm.Id = Convert.ToInt32(dt.Rows[0]["Id"]);
                    vm.InvoiceNo = dt.Rows[0]["InvoiceNo"].ToString();
                }
                else
                {
                    if (vm.ButtonName == "Previous" || vm.ButtonName == "Current")
                    {
                        vm.ButtonName = "First";
                        vm = Receive_Navigation(vm, currConn, transaction);

                    }
                    else if (vm.ButtonName == "Next")
                    {
                        vm.ButtonName = "Last";
                        vm = Receive_Navigation(vm, currConn, transaction);

                    }
                }


                #endregion

                #endregion

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "Receive_Navigation", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return vm;

        }

        public DataTable SelectAll_Specific(ReceiveMasterVM vm, string[] conditionFields = null, string[] conditionValues = null, string[] specificColumns = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";

            DataTable dt = new DataTable();

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                dt = SelectAll(0, conditionFields, conditionValues, currConn, transaction, vm, true, null);

                DataView view = new DataView(dt);
                dt = view.ToTable("Receive", false, specificColumns);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #endregion

            #region catch
            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "SelectAll_Specific", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dt;

        }

        #endregion

        #region MISC Methods

        public DataTable SearchReceiveHeaderDTNew(string ReceiveNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            string sqlText = "";

            DataTable dataTable = new DataTable("ReceiveHeader");

            #endregion

            #region Try
            try
            {
                string[] cValues = { ReceiveNo, "1900-01-01", "2900-12-31", "0" };
                string[] cFields = { "rh.ReceiveNo like", "rh.ReceiveDateTime>", "rh.ReceiveDateTime<", "rh.vCustomerID like" };
                dataTable = SelectAll(0, cFields, cValues, null, null, null, true);
                //dataTable = SearchReceiveHeaderDTNew(ReceiveNo, "1900-01-01", "2900-12-31", "", "All", "", "0");
                //dataTable = SearchReceiveHeaderDTNew(ReceiveNo, "1900-01-01", "2900-12-31", "", "All", "", "0");

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ReceiveDAL", "SearchReceiveHeaderDTNew", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "SearchReceiveHeaderDTNew", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {

            }

            #endregion

            return dataTable;
        }

        public DataTable SearchReceiveDetailNew(string ReceiveNo, string databaseName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            DataTable dataTable = new DataTable("SearchReceiveDetail");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
SELECT    
rd.ReceiveNo,
rd.ReceiveLineNo,
rd.ItemNo,
isnull(rd.Quantity,0)Quantity,
isnull(rd.CostPrice,0)CostPrice ,
isnull(rd.NBRPrice,0)NBRPrice,
isnull(rd.UOM,'N/A')UOM ,
isnull(rd.VATRate,0)VATRate ,
isnull(rd.VATAmount,0)VATAmount,
isnull(rd.SubTotal,0)SubTotal ,
isnull(rd.Comments,'N/A')Comments ,
isnull(Products.ProductName,'N/A')ProductName,
isnull(isnull(Products.OpeningBalance,0)+isnull(Products.QuantityInHand,0),0) as Stock,
isnull(rd.SD,0)SD ,
isnull(nullif(rd.BOMId,''),0)BOMId ,
isnull(nullif(rd.VATName,''),'NA')VATName ,
isnull(rd.SDAmount,0)SDAmount ,
isnull(Products.ProductCode,'N/A')ProductCode,
isnull(rd.UOMQty,isnull(rd.Quantity,0))	UOMQty,
isnull(rd.UOMPrice,isnull(rd.CostPrice,0))	UOMPrice,
isnull(rd.UOMc,1)		UOMc,
isnull(rd.UOMn,isnull(rd.UOM,'N/A'))		UOMn,
ReturnTransactionType,TransactionType,
isnull(rd.Weight,'0')		Weight

FROM         ReceiveDetails rd 
LEFT OUTER JOIN Products ON rd.ItemNo = Products.ItemNo 
            
WHERE 1=1
AND (rd.ReceiveNo = @ReceiveNo )
";

                #endregion

                #region SQL Command

                SqlCommand objCommReceiveDetail = new SqlCommand();
                objCommReceiveDetail.Connection = currConn;

                objCommReceiveDetail.CommandText = sqlText;
                objCommReceiveDetail.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommReceiveDetail.Parameters.Contains("@ReceiveNo"))
                { objCommReceiveDetail.Parameters.AddWithValue("@ReceiveNo", ReceiveNo); }
                else { objCommReceiveDetail.Parameters["@ReceiveNo"].Value = ReceiveNo; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommReceiveDetail);
                dataAdapter.Fill(dataTable);
            }
            #endregion

            #region Catch & Finally
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ReceiveDAL", "SearchReceiveDetailNew", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "SearchReceiveDetailNew", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;
        }

        public string[] ImportData(DataTable dtReceiveM, DataTable dtReceiveD, int branchId = 0, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, Action callBack = null, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region variable

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            ReceiveMasterVM receiveMasterVM;
            List<ReceiveDetailVM> receiveDetailVMs = new List<ReceiveDetailVM>();
            CommonDAL commonDal = new CommonDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable
            #region try
            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Add Item No to Detail Table
                bool ItemAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "ReceiveProduct") == "Y" ? true : false);
                CommonImportDAL cImport = new CommonImportDAL();
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                foreach (DataRow row in dtReceiveD.Rows)
                {
                    string itemNo = cImport.FindItemId(row["Item_Name"].ToString().Trim(), row["Item_Code"].ToString().Trim(), currConn, transaction, ItemAutoSave, row["UOM"].ToString().Trim(), 1, 0, 0, null, row["Product_Group"].ToString().Trim()).ToString();
                    row["item_No"] = itemNo.Trim();
                }
                #endregion

                #region Settings Value
                CommonDAL commondal = new CommonDAL();
                string vPriceDeclaration =
                    commondal.settings("Receive", "PriceDeclarationForImport", currConn, transaction);
                bool isPriceDeclaration = vPriceDeclaration == "Y" ? true : false;

                //string issueFromBom = commondal.settings("IssueFromBOM", "IssueFromBOM", currConn, transaction);

                #endregion
                #region RowCount

                int MRowCount = 0;
                int MRow = dtReceiveM.Rows.Count;



                for (int i = 0; i < dtReceiveM.Rows.Count; i++)
                {
                    if (!string.IsNullOrEmpty(dtReceiveM.Rows[i]["ID"].ToString()))
                    {
                        MRowCount++;
                    }

                }
                if (MRow != MRowCount)
                {
                    throw new ArgumentNullException("you have select " + MRow.ToString() +
                                                    " data for import, but you have " + MRowCount + " id.");
                }

                #endregion RowCount

                #region ID in Master or Detail table

                for (int i = 0; i < MRowCount; i++)
                {
                    string importID = dtReceiveM.Rows[i]["ID"].ToString();

                    if (!string.IsNullOrEmpty(importID))
                    {
                        DataRow[] DetailRaws = dtReceiveD.Select("ID='" + importID + "'");
                        if (DetailRaws.Length == 0)
                        {
                            throw new ArgumentNullException("The ID " + importID + " is not available in detail table");
                        }

                    }

                }

                #endregion

                #region Double ID in Master

                for (int i = 0; i < MRowCount; i++)
                {
                    string id = dtReceiveM.Rows[i]["ID"].ToString();
                    DataRow[] tt = dtReceiveM.Select("ID='" + id + "'");
                    if (tt.Length > 1)
                    {
                        throw new ArgumentNullException("you have duplicate master id " + id + " in import file.");
                    }

                }

                #endregion Double ID in Master

                #region Find Column in details
                /// CP has no NBR_Price
                bool isColNBRPrice = false;
                for (int i = 0; i < dtReceiveD.Columns.Count; i++)
                {
                    if (dtReceiveD.Columns[i].ColumnName.ToString() == "NBR_Price")
                    {
                        isColNBRPrice = true;
                    }

                }
                #endregion

                #region Process model

                #region checking from database is exist the information(NULL Check)

                #region Master

                for (int j = 0; j < MRowCount; j++)
                {
                    #region Checking Date is null or different formate

                    bool IsReceiveDate;
                    IsReceiveDate = cImport.CheckDate(dtReceiveM.Rows[j]["Receive_DateTime"].ToString().Trim());
                    if (IsReceiveDate != true)
                    {
                        throw new ArgumentNullException(
                            "Please insert correct date format 'DD/MMM/YY' such as 31/Jan/13 in Receive_Date field.");
                    }

                    #endregion Checking Date is null or different formate

                    #region Checking Y/N value

                    bool post;
                    post = cImport.CheckYN(dtReceiveM.Rows[j]["Post"].ToString().Trim());
                    if (post != true)
                    {
                        throw new ArgumentNullException("Please insert Y/N in Post field.");
                    }

                    #endregion Checking Y/N value

                    #region Check Return receive id

                    string ReturnId = string.Empty;
                    ReturnId = cImport.CheckReceiveReturnID(dtReceiveM.Rows[j]["Return_Id"].ToString().Trim(), currConn, transaction);


                    #endregion Check Return receive id
                }

                #endregion Master

                #region Details

                #region Row count for details table

                int DRowCount = 0;
                for (int i = 0; i < dtReceiveD.Rows.Count; i++)
                {
                    if (!string.IsNullOrEmpty(dtReceiveD.Rows[i]["ID"].ToString()))
                    {
                        DRowCount++;
                    }

                }

                #endregion Row count for details table

                for (int i = 0; i < DRowCount; i++)
                {
                    if (i > 3000)
                    {
                        var tt = "";
                    }
                    var vid = dtReceiveD.Rows[i]["Id"].ToString().Trim();
                    string ItemNo = string.Empty;
                    string UOMn = string.Empty;

                    #region FindItemId
                    if (string.IsNullOrEmpty(dtReceiveD.Rows[i]["Item_Code"].ToString().Trim()))
                    {
                        throw new ArgumentNullException("Please insert value in 'Item_Code' field.");
                    }
                    //bool ItemAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "ReceiveProduct") == "Y" ? true : false);
                    ItemNo = cImport.FindItemId(dtReceiveD.Rows[i]["Item_Name"].ToString().Trim()
                                                , dtReceiveD.Rows[i]["Item_Code"].ToString().Trim(), currConn, transaction, ItemAutoSave);

                    #endregion FindItemId

                    #region FindUOMn

                    UOMn = cImport.FindUOMn(ItemNo, currConn, transaction);

                    #endregion FindUOMn

                    #region FindUOMn
                    if (DatabaseInfoVM.DatabaseName.ToString() != "Sanofi_DB")
                    {
                        cImport.FindUOMc(UOMn.Trim(), dtReceiveD.Rows[i]["UOM"].ToString().Trim(), currConn, transaction);
                    }
                    #endregion FindUOMn

                    #region VATName

                    cImport.FindVatName(dtReceiveD.Rows[i]["VAT_Name"].ToString().Trim());

                    #endregion VATName

                    #region FindLastNBRPrice

                    DataRow[] vmaster; //= new DataRow[];//
                    string nbrPrice = string.Empty;

                    var transactionDate = "";

                    vmaster = dtReceiveM.Select("ID='" + dtReceiveD.Rows[i]["ID"].ToString().Trim() + "'");

                    foreach (DataRow row in vmaster)
                    {
                        var tt =
                            Convert.ToDateTime(row["Receive_DateTime"].ToString().Trim()).ToString("yyyy-MM-dd HH:mm:ss");
                        transactionDate = tt;

                    }
                    if (isPriceDeclaration == true)
                    {
                        nbrPrice = cImport.FindLastNBRPrice(ItemNo, dtReceiveD.Rows[i]["VAT_Name"].ToString().Trim(),
                                        transactionDate, currConn, transaction);
                    }


                    #endregion FindLastNBRPrice

                    #region Numeric value check

                    bool IsQuantity = cImport.CheckNumericBool(dtReceiveD.Rows[i]["Quantity"].ToString().Trim());
                    if (IsQuantity != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in Quantity field.");
                    }

                    if (isColNBRPrice == true)
                    {


                        bool IsNbrPrice = false;
                        if (DatabaseInfoVM.DatabaseName.ToString() == "Sanofi_DB")
                        {
                            IsNbrPrice = cImport.CheckNumericBool(dtReceiveD.Rows[i]["Total_Price"].ToString().Trim());
                        }
                        else
                        {
                            IsNbrPrice = cImport.CheckNumericBool(dtReceiveD.Rows[i]["NBR_Price"].ToString().Trim());
                        }
                        if (IsNbrPrice != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in NBR_Price/Total_Price field.");
                        }
                    }

                    #endregion Numeric value check
                }

                #endregion Details

                #endregion checking from database is exist the information(NULL Check)

                //if (currConn.State == ConnectionState.Open)
                //{
                //    currConn.Close();
                //    currConn.Open();
                //    transaction = currConn.BeginTransaction("Import Data.");
                //}

                ProductDAL productDal = new ProductDAL();

                FileLogger.Log("ReceiveDAL", "ImportData", "Save Receive data Start DateTime: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:mm") + "  Total Row : " + MRowCount.ToString());


                var temp = branchId;
                for (int i = 0; i < MRowCount; i++)
                {
                    #region Master Receive
                    if (i > 1000)
                    {
                        var tt = "";
                    }
                    string importID = dtReceiveM.Rows[i]["ID"].ToString().Trim();
                    string receiveDateTime = dtReceiveM.Rows[i]["Receive_DateTime"].ToString().Trim();

                    #region CheckNull

                    string customerCode = dtReceiveM.Rows[i]["CustomerCode"].ToString().Trim();
                    string customerID = dtReceiveM.Rows[i]["CustomerID"].ToString().Trim();

                    //if (string.IsNullOrEmpty(customerCode))
                    //{
                    //    throw new ArgumentNullException("Customer Code Not Found For Id" + importID);
                    //}

                    var customerIdInDb = "";

                    if (string.IsNullOrEmpty(customerID) && (customerCode != "NA" && customerCode != "N/A"))
                    {
                        customerIdInDb = cImport.FindCustomerId(customerCode, customerCode, currConn, transaction);

                        if (string.IsNullOrEmpty(customerIdInDb))
                        {
                            throw new ArgumentNullException("Customer Id Not Found For Customer Code" + customerCode);
                        }
                    }
                    else
                    {
                        customerIdInDb = customerID;
                    }


                    string code = commonDal.settingValue("CompanyCode", "Code");
                    string referenceNo = "";
                    string serialNo = "";

                    if (code.ToLower() == "JAPFA".ToLower())
                    {
                        referenceNo = cImport.ChecKNullValue(dtReceiveM.Rows[i]["Reference_No"].ToString().Trim());
                    }
                    else
                    {
                        serialNo = cImport.ChecKNullValue(dtReceiveM.Rows[i]["Reference_No"].ToString().Trim());
                    }

                    //string serialNo = cImport.ChecKNullValue(dtReceiveM.Rows[i]["Reference_No"].ToString().Trim());
                    string comments = cImport.ChecKNullValue(dtReceiveM.Rows[i]["Comments"].ToString().Trim());
                    string CustomerID = customerIdInDb; // cImport.ChecKNullValue(dtReceiveM.Rows[i]["CustomerID"].ToString().Trim());

                    #endregion CheckNull

                    string post = dtReceiveM.Rows[i]["Post"].ToString().Trim();

                    #region Check Return receive id

                    string ReturnId = cImport.CheckReceiveReturnID(dtReceiveM.Rows[i]["Return_Id"].ToString().Trim(),
                                                                   currConn, transaction);

                    #endregion Check Return receive id

                    
                    string createdBy = dtReceiveM.Rows[i]["Created_By"].ToString().Trim();
                    //string createdBy = dtReceiveM.Rows[i]["CreatedBy"].ToString().Trim();
                    string lastModifiedBy = dtReceiveM.Rows[i]["LastModified_By"].ToString().Trim();
                    string transactionType = dtReceiveM.Rows[i]["Transection_Type"].ToString().Trim();
                    string fromBOM = dtReceiveM.Rows[i]["From_BOM"].ToString().Trim();
                    string ShiftId = dtReceiveM.Rows[i]["ShiftId"].ToString().Trim();
                    string totalVATAmount = dtReceiveM.Rows[i]["Total_VAT_Amount"].ToString().Trim();
                    string totalAmount = dtReceiveM.Rows[i]["Total_Amount"].ToString().Trim();
                    string branchCode = dtReceiveM.Rows[i]["BranchCode"].ToString().Trim();
                    string branch_Id = dtReceiveM.Rows[i]["BranchId"].ToString().Trim();
                    // string serialNo = dtReceiveM.Rows[i]["Batch_no"].ToString().Trim();

                    if (string.IsNullOrEmpty(branch_Id))
                    {
                        if (!string.IsNullOrEmpty(branchCode))
                        {
                            var table = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { branchCode }, currConn, transaction, true);

                            branchId = table.Rows.Count > 0 ? Convert.ToInt32(table.Rows[0]["BranchID"]) : temp;
                        }
                    }
                    else
                    {
                        branchId = Convert.ToInt32(branch_Id.ToString());
                    }



                    receiveMasterVM = new ReceiveMasterVM();
                    receiveMasterVM.ReceiveDateTime = Convert.ToDateTime(receiveDateTime).ToString("yyyy-MM-dd HH:mm:ss");
                    //receiveMasterVM.VatName = "NA";
                    //receiveMasterVM.VatName = vatName;
                    receiveMasterVM.Post = post;
                    receiveMasterVM.ReturnId = ReturnId;
                    receiveMasterVM.SerialNo = serialNo.Replace(" ", "");
                    receiveMasterVM.Comments = comments;
                    receiveMasterVM.CreatedBy = createdBy;
                    receiveMasterVM.CreatedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    receiveMasterVM.LastModifiedBy = lastModifiedBy;
                    receiveMasterVM.LastModifiedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    receiveMasterVM.transactionType = transactionType;
                    receiveMasterVM.FromBOM = fromBOM;
                    receiveMasterVM.TotalVATAmount = Convert.ToDecimal(totalVATAmount);
                    receiveMasterVM.TotalAmount = Convert.ToDecimal(totalAmount);
                    receiveMasterVM.CustomerID = CustomerID;
                    receiveMasterVM.WithToll = dtReceiveM.Rows[i]["With_Toll"].ToString().Trim();
                    receiveMasterVM.ImportId = importID;

                    receiveMasterVM.IssueFromBOM = fromBOM;
                    receiveMasterVM.ShiftId = ShiftId;

                    receiveMasterVM.BranchId = branchId;
                    receiveMasterVM.ReferenceNo = referenceNo.Replace(" ", "");

                    DataRow[] RDRaws; //= new DataRow[];//

                    #region fitemno

                    if (!string.IsNullOrEmpty(importID))
                    {
                        RDRaws =
                            dtReceiveD.Select("ID='" + importID + "'");
                    }
                    else
                    {
                        RDRaws = null;
                    }

                    #endregion fitemno

                    #endregion Master Receive

                    #region Details Receive

                    int counter = 1;
                    receiveDetailVMs = new List<ReceiveDetailVM>();


                    DataTable dtDistinctItem = RDRaws.CopyToDataTable().DefaultView.ToTable(true, "Item_Code", "Item_Name", "itemNo", "BomId");

                    DataTable dtReceiveDetail = RDRaws.CopyToDataTable();
                    foreach (DataRow item in dtDistinctItem.Rows)
                    {
                        string itemCode = item["Item_Code"].ToString().Trim();
                        string itemName = item["Item_Name"].ToString().Trim();
                        string itemNo = "";

                        if (string.IsNullOrEmpty(item["itemNo"].ToString()))
                        {
                            bool ItemAuto_Save = Convert.ToBoolean(commonDal.settingValue("AutoSave", "ReceiveProduct") == "Y" ? true : false);

                            //cImport.FindItemId(itemName, itemCode, currConn, transaction, ItemAuto_Save);

                            itemNo = cImport.FindItemId(itemName, itemCode, currConn, transaction, ItemAuto_Save);
                        }
                        else
                        {
                            itemNo = item["itemNo"].ToString();
                        }



                        //string quantity = item["Quantity"].ToString().Trim();
                        decimal quantity = 0;
                        string uOM = "";
                        string uOMn = "";
                        string uOMc = "";
                        string vATName = "";
                        string vWeight = "";
                        decimal nbrPrice = 0;
                        decimal LastNBRPrice = 0;
                        decimal totalPrice = 0;
                        DataTable dtRepeatedItems = new DataTable();
                        dtRepeatedItems = dtReceiveDetail.Select("itemNo ='" + itemNo + "' or item_No = '" + itemNo + "'").CopyToDataTable();
                        //DataTable dtRepeatedItems = dtReceiveDetail.Select("[Item_Code] ='" + itemCode + "'").CopyToDataTable();
                        foreach (DataRow row in dtRepeatedItems.Rows)
                        {
                            //itemName = row["Item_Name"].ToString().Trim();
                            vATName = row["VAT_Name"].ToString().Trim();
                            quantity = quantity + Convert.ToDecimal(row["Quantity"].ToString().Trim());
                            vWeight = row["Weight"].ToString().Trim();

                            if (DatabaseInfoVM.DatabaseName.ToString() == "Sanofi_DB")
                            {
                                uOMn = cImport.FindUOMn(itemNo, currConn, transaction);
                                uOM = uOMn;
                                uOMc = "1";


                                totalPrice = totalPrice + Convert.ToDecimal(row["Total_Price"].ToString().Trim());
                                nbrPrice = totalPrice / quantity;
                                LastNBRPrice = nbrPrice;
                                receiveMasterVM.FromBOM = "N";

                            }
                            else
                            {
                                uOM = row["UOM"].ToString().Trim();
                                uOMn = cImport.FindUOMn(itemNo, currConn, transaction);
                                uOMc = cImport.FindUOMc(uOMn.Trim(), uOM.Trim(), currConn, transaction);

                                string lastPrice = cImport.FindLastNBRPrice(itemNo, vATName, Convert.ToDateTime(receiveDateTime).ToString("yyyy-MM-dd"), currConn, transaction);
                                LastNBRPrice = Convert.ToDecimal(lastPrice);

                                if (isColNBRPrice == true)
                                {
                                    nbrPrice = nbrPrice + Convert.ToDecimal(row["NBR_Price"].ToString().Trim());

                                }
                                if (isPriceDeclaration == false)
                                {
                                    LastNBRPrice = nbrPrice;
                                    receiveMasterVM.FromBOM = "N";
                                }
                            }
                        }


                        ProductVM vm = productDal.SelectAll(itemNo, null, null, currConn, transaction).FirstOrDefault();


                        #region Product Type Validation

                        if (transactionType.ToLower() == "wip" && vm.IsRaw.ToLower() != "wip")
                        {
                            throw new Exception(
                                "Import Type is " + transactionType + " but product type is " + vm.IsRaw +
                                " Product: " + vm.ProductName + "(" + vm.ProductCode + ")");
                        }

                        if (transactionType.ToLower() == "other" && (vm.IsRaw.ToLower() != "finish" && vm.IsRaw.ToLower() != "export"))
                        {
                            throw new Exception(
                                "Import Type is " + transactionType + " but product type is " + vm.IsRaw +
                                " Product: " + vm.ProductName + "(" + vm.ProductCode + ")");
                        }

                        #endregion

                        ReceiveDetailVM receiveDetailVM = new ReceiveDetailVM();
                        receiveDetailVM.ReceiveLineNo = counter.ToString();
                        receiveDetailVM.ItemNo = itemNo.ToString();
                        receiveDetailVM.Quantity = Convert.ToDecimal(quantity);
                        receiveDetailVM.UOM = uOM;
                        receiveDetailVM.Post = post;
                        receiveDetailVM.UOMn = uOMn.ToString();
                        receiveDetailVM.UOMc = Convert.ToDecimal(uOMc);
                        receiveDetailVM.VATRate = Convert.ToDecimal(0);
                        receiveDetailVM.VATAmount = Convert.ToDecimal(0);
                        receiveDetailVM.SD = Convert.ToDecimal(0);
                        receiveDetailVM.SDAmount = Convert.ToDecimal(0);
                        receiveDetailVM.BOMId = 0;
                        receiveDetailVM.CommentsD = "NA";
                        receiveDetailVM.VatName = vATName;
                        receiveDetailVM.CostPrice = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc);
                        receiveDetailVM.NBRPrice = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc);
                        receiveDetailVM.SubTotal = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc) *
                                                   Convert.ToDecimal(quantity);
                        receiveDetailVM.UOMPrice = Convert.ToDecimal(LastNBRPrice);
                        receiveDetailVM.UOMQty = Convert.ToDecimal(uOMc) *
                                                 Convert.ToDecimal(quantity);
                        receiveDetailVM.BranchId = branchId;
                        receiveDetailVM.ItemCode = itemCode;
                        receiveDetailVM.BOMId = !string.IsNullOrEmpty(item["BomId"].ToString())
                            ? Convert.ToInt32(item["BomId"].ToString())
                            : 0;

                        receiveDetailVM.Weight = vWeight;

                        receiveDetailVMs.Add(receiveDetailVM);

                        counter++;

                    }
                    #endregion Details Receive

                    #region OLD
                    //foreach (DataRow row in RDRaws)
                    //{
                    //    string itemCode = row["Item_Code"].ToString().Trim();
                    //    string itemName = row["Item_Name"].ToString().Trim();
                    //    string itemNo = cImport.FindItemId(itemName, itemCode, currConn, transaction);
                    //    string quantity = row["Quantity"].ToString().Trim();
                    //    string uOM = "";
                    //    string uOMn = "";
                    //    string uOMc = "";
                    //    string vATName = row["VAT_Name"].ToString().Trim();
                    //    string nbrPrice = "0";
                    //    string LastNBRPrice = "0";
                    //    if (DatabaseInfoVM.DatabaseName.ToString() == "Sanofi_DB")
                    //    {
                    //        uOMn = cImport.FindUOMn(itemNo, currConn, transaction);
                    //        uOM = uOMn;
                    //        uOMc = "1";


                    //        string totalPrice = row["Total_Price"].ToString().Trim();
                    //        nbrPrice = (Convert.ToDecimal(totalPrice) / Convert.ToDecimal(quantity)).ToString();
                    //        LastNBRPrice = nbrPrice;
                    //        receiveMasterVM.FromBOM = "N";
                    //    }
                    //    else
                    //    {
                    //        uOM = row["UOM"].ToString().Trim();
                    //        uOMn = cImport.FindUOMn(itemNo, currConn, transaction);
                    //        uOMc = cImport.FindUOMc(uOMn, uOM, currConn, transaction);

                    //        nbrPrice = row["NBR_Price"].ToString().Trim();
                    //        LastNBRPrice = cImport.FindLastNBRPrice(itemNo, vATName, Convert.ToDateTime(receiveDateTime).ToString("yyyy-MM-dd"), currConn, transaction);

                    //        if (isPriceDeclaration == false && nbrPrice != "0")
                    //        {
                    //            LastNBRPrice = nbrPrice;
                    //            receiveMasterVM.FromBOM = "N";
                    //        }
                    //    }


                    //    ReceiveDetailVM receiveDetailVM = new ReceiveDetailVM();
                    //    receiveDetailVM.ReceiveLineNo = counter.ToString();
                    //    receiveDetailVM.ItemNo = itemNo.ToString();
                    //    receiveDetailVM.Quantity = Convert.ToDecimal(quantity);
                    //    receiveDetailVM.UOM = uOM;
                    //    receiveDetailVM.UOMn = uOMn.ToString();
                    //    receiveDetailVM.UOMc = Convert.ToDecimal(uOMc);
                    //    receiveDetailVM.VATRate = Convert.ToDecimal(0);
                    //    receiveDetailVM.VATAmount = Convert.ToDecimal(0);
                    //    receiveDetailVM.SD = Convert.ToDecimal(0);
                    //    receiveDetailVM.SDAmount = Convert.ToDecimal(0);
                    //    receiveDetailVM.BOMId = "0";
                    //    receiveDetailVM.CommentsD = "NA";
                    //    receiveDetailVM.VatName = vATName;
                    //    receiveDetailVM.CostPrice = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc);
                    //    receiveDetailVM.NBRPrice = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc);
                    //    receiveDetailVM.SubTotal = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc) *
                    //                               Convert.ToDecimal(quantity);
                    //    receiveDetailVM.UOMPrice = Convert.ToDecimal(LastNBRPrice);
                    //    receiveDetailVM.UOMQty = Convert.ToDecimal(uOMc) *
                    //                             Convert.ToDecimal(quantity);
                    //    receiveDetailVMs.Add(receiveDetailVM);

                    //    counter++;

                    //} // detail
                    #endregion OLD

                    string[] sqlResults = ReceiveInsert(receiveMasterVM, receiveDetailVMs, null, transaction, currConn, branchId, connVM, UserId);
                    retResults[0] = sqlResults[0];
                    if (callBack != null)
                    {
                        callBack();

                    }
                }

                FileLogger.Log("ReceiveDAL", "ImportData", "Save Receive data End DateTime: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:mm"));


                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit


                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + "1";
                retResults[3] = "" + "N";
                #endregion SuccessResult


                #endregion Process model
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {

                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }
                FileLogger.Log("ReceiveDAL", "ImportData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            return retResults;
        }

        public string[] GetUSDCurrency(decimal subTotal, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            string[] retResults = new string[2];
            retResults[0] = "0";
            retResults[1] = "0";

            #endregion

            #region try

            try
            {
                CurrencyConversionDAL currencyConversionDal = new CurrencyConversionDAL();

                string[] cValues = new string[] { "USD", "BDT", "Y", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") };
                string[] cFields = new string[] { "c.CurrencyCode like", "b.CurrencyCode like", "cc.ActiveStatus like", "cc.ConversionDate<" };
                CurrencyConversionVM vm = new CurrencyConversionVM();
                vm.CurrencyCodeF = "USD";
                vm.CurrencyCodeT = "BDT";
                vm.ActiveStatus = "Y";
                vm.ConvertionDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                DataTable CurrencyConversionResult = currencyConversionDal.ConvRate(vm, null, null);

                if (CurrencyConversionResult != null)
                {

                    decimal currencyRate = Convert.ToDecimal(CurrencyConversionResult.Rows[0]["CurrencyRate"].ToString());

                    decimal bDTValue = subTotal;
                    decimal dollerValue = subTotal / currencyRate;
                    retResults[0] = bDTValue.ToString();
                    retResults[1] = dollerValue.ToString();
                }
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "GetUSDCurrency", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (ArgumentNullException aeg)
            {
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + aeg.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "GetUSDCurrency", aeg.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", aeg.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "GetUSDCurrency", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion



            return retResults;
        }

        public decimal FormatingNumeric(decimal value, int DecPlace, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            object outPutValue = 0;
            string decPointLen = "";

            #endregion

            #region try

            try
            {

                for (int i = 0; i < DecPlace; i++)
                {
                    decPointLen = decPointLen + "0";
                }
                if (value < 1000)
                {
                    var a = "0." + decPointLen + "";
                    outPutValue = value.ToString(a);
                }
                else
                {
                    var a = "0,0." + decPointLen + "";
                    outPutValue = value.ToString(a);

                }


            }
            #endregion

            #region Catch

            #region Comments

            //catch (IndexOutOfRangeException ex)
            //{
            //    FileLogger.Log("Program", "FormatTextBoxQty4", ex.Message + Environment.NewLine + ex.StackTrace);
            //    MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //}
            //catch (NullReferenceException ex)
            //{
            //    FileLogger.Log("Program", "FormatTextBoxQty4", ex.Message + Environment.NewLine + ex.StackTrace);
            //    MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //}
            //catch (FormatException ex)
            //{

            //    FileLogger.Log("Program", "FormatTextBoxQty4", ex.Message + Environment.NewLine + ex.StackTrace);
            //    MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //}

            //catch (SoapHeaderException ex)
            //{
            //    string exMessage = ex.Message;
            //    if (ex.InnerException != null)
            //    {
            //        exMessage = exMessage + Environment.NewLine + ex.InnerException.Message + Environment.NewLine +
            //                    ex.StackTrace;

            //    }

            //    FileLogger.Log("Program", "FormatTextBoxQty4", exMessage);
            //    MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //}
            //catch (SoapException ex)
            //{
            //    string exMessage = ex.Message;
            //    if (ex.InnerException != null)
            //    {
            //        exMessage = exMessage + Environment.NewLine + ex.InnerException.Message + Environment.NewLine +
            //                    ex.StackTrace;

            //    }
            //    MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    FileLogger.Log("Program", "FormatTextBoxQty4", exMessage);
            //}
            //catch (EndpointNotFoundException ex)
            //{
            //    MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    FileLogger.Log("Program", "FormatTextBoxQty4", ex.Message + Environment.NewLine + ex.StackTrace);
            //}
            //catch (WebException ex)
            //{
            //    MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    FileLogger.Log("Program", "FormatTextBoxQty4", ex.Message + Environment.NewLine + ex.StackTrace);
            //}
            #endregion

            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "FormatingNumeric", ex.ToString() + "\n" + sqlText);

                //string exMessage = ex.Message;
                //if (ex.InnerException != null)
                //{
                //    exMessage = exMessage + Environment.NewLine + ex.InnerException.Message + Environment.NewLine +
                //                ex.StackTrace;

                //}
                //MessageBox.Show(ex.Message, "Program", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //FileLogger.Log("Program", "FormatTextBoxQty4", exMessage);
            }
            #endregion Catch

            return Convert.ToDecimal(outPutValue);
        }

        public string[] ImportData_Sanofi(DataTable dtReceiveM, DataTable dtReceiveD, SysDBInfoVMTemp connVM = null)
        {
            #region variable

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            ReceiveMasterVM receiveMasterVM;
            List<ReceiveDetailVM> receiveDetailVMs = new List<ReceiveDetailVM>();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable
            #region try
            try
            {
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                }

                #region Settings Value
                CommonDAL commondal = new CommonDAL();
                string vPriceDeclaration = commondal.settings("Receive", "PriceDeclarationForImport");
                bool isPriceDeclaration = vPriceDeclaration == "Y" ? true : false;
                #endregion
                #region RowCount

                int MRowCount = 0;
                int MRow = dtReceiveM.Rows.Count;



                for (int i = 0; i < dtReceiveM.Rows.Count; i++)
                {
                    if (!string.IsNullOrEmpty(dtReceiveM.Rows[i]["ID"].ToString()))
                    {
                        MRowCount++;
                    }

                }
                if (MRow != MRowCount)
                {
                    throw new ArgumentNullException("you have select " + MRow.ToString() +
                                                    " data for import, but you have " + MRowCount + " id.");
                }

                #endregion RowCount

                #region ID in Master or Detail table

                for (int i = 0; i < MRowCount; i++)
                {
                    string importID = dtReceiveM.Rows[i]["ID"].ToString();

                    if (!string.IsNullOrEmpty(importID))
                    {
                        DataRow[] DetailRaws = dtReceiveD.Select("ID='" + importID + "'");
                        if (DetailRaws.Length == 0)
                        {
                            throw new ArgumentNullException("The ID " + importID + " is not available in detail table");
                        }

                    }

                }

                #endregion

                #region Double ID in Master

                for (int i = 0; i < MRowCount; i++)
                {
                    string id = dtReceiveM.Rows[i]["ID"].ToString();
                    DataRow[] tt = dtReceiveM.Select("ID='" + id + "'");
                    if (tt.Length > 1)
                    {
                        throw new ArgumentNullException("you have duplicate master id " + id + " in import file.");
                    }

                }

                #endregion Double ID in Master


                #region Process model

                CommonImportDAL cImport = new CommonImportDAL();

                #region checking from database is exist the information(NULL Check)

                #region Master

                for (int j = 0; j < MRowCount; j++)
                {
                    #region Checking Date is null or different formate

                    bool IsReceiveDate;
                    IsReceiveDate = cImport.CheckDate(dtReceiveM.Rows[j]["Receive_DateTime"].ToString().Trim());
                    if (IsReceiveDate != true)
                    {
                        throw new ArgumentNullException(
                            "Please insert correct date format 'DD/MMM/YY' such as 31/Jan/13 in Receive_Date field.");
                    }

                    #endregion Checking Date is null or different formate

                    #region Checking Y/N value

                    bool post;
                    post = cImport.CheckYN(dtReceiveM.Rows[j]["Post"].ToString().Trim());
                    if (post != true)
                    {
                        throw new ArgumentNullException("Please insert Y/N in Post field.");
                    }

                    #endregion Checking Y/N value

                    #region Check Return receive id

                    string ReturnId = string.Empty;
                    ReturnId = cImport.CheckReceiveReturnID(dtReceiveM.Rows[j]["Return_Id"].ToString().Trim(), currConn, transaction);


                    #endregion Check Return receive id
                }

                #endregion Master

                #region Details

                #region Row count for details table

                int DRowCount = 0;
                for (int i = 0; i < dtReceiveD.Rows.Count; i++)
                {
                    if (!string.IsNullOrEmpty(dtReceiveD.Rows[i]["ID"].ToString()))
                    {
                        DRowCount++;
                    }

                }

                #endregion Row count for details table

                for (int i = 0; i < DRowCount; i++)
                {
                    string ItemNo = string.Empty;
                    string UOMn = string.Empty;

                    #region FindItemId

                    ItemNo = cImport.FindItemId(dtReceiveD.Rows[i]["Item_Name"].ToString().Trim()
                                                , dtReceiveD.Rows[i]["Item_Code"].ToString().Trim(), currConn, transaction);

                    #endregion FindItemId

                    #region FindUOMn
                    UOMn = cImport.FindUOMn(ItemNo, currConn, transaction);
                    #endregion FindUOMn

                    #region VATName

                    cImport.FindVatName(dtReceiveD.Rows[i]["VAT_Name"].ToString().Trim());

                    #endregion VATName

                    #region FindLastNBRPrice
                    //DataRow[] vmaster; //= new DataRow[];//
                    //string nbrPrice = string.Empty;

                    //var transactionDate = "";

                    //vmaster = dtReceiveM.Select("ID='" + dtReceiveD.Rows[i]["ID"].ToString().Trim() + "'");

                    //foreach (DataRow row in vmaster)
                    //{
                    //    var tt =
                    //        Convert.ToDateTime(row["Receive_DateTime"].ToString().Trim()).ToString("yyyy-MM-dd HH:mm:ss");
                    //    transactionDate = tt;

                    //}
                    //if (isPriceDeclaration == true)
                    //{
                    //    nbrPrice = cImport.FindLastNBRPrice(ItemNo, dtReceiveD.Rows[i]["VAT_Name"].ToString().Trim(),
                    //                    transactionDate, currConn, transaction);
                    //}


                    #endregion FindLastNBRPrice

                    #region Numeric value check

                    bool IsQuantity = cImport.CheckNumericBool(dtReceiveD.Rows[i]["Quantity"].ToString().Trim());
                    if (IsQuantity != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in Quantity field.");
                    }

                    bool IsNbrPrice = false;
                    IsNbrPrice = cImport.CheckNumericBool(dtReceiveD.Rows[i]["Total_Price"].ToString().Trim());
                    if (IsNbrPrice != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in NBR_Price/Total_Price field.");
                    }


                    #endregion Numeric value check
                }

                #endregion Details

                #endregion checking from database is exist the information(NULL Check)

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                    currConn.Open();
                    transaction = currConn.BeginTransaction("Import Data.");
                }

                for (int i = 0; i < MRowCount; i++)
                {
                    #region Master Receive

                    string importID = dtReceiveM.Rows[i]["ID"].ToString().Trim();
                    string receiveDateTime = dtReceiveM.Rows[i]["Receive_DateTime"].ToString().Trim();

                    #region CheckNull

                    string serialNo = cImport.ChecKNullValue(dtReceiveM.Rows[i]["Reference_No"].ToString().Trim());
                    string comments = cImport.ChecKNullValue(dtReceiveM.Rows[i]["Comments"].ToString().Trim());

                    #endregion CheckNull

                    string post = dtReceiveM.Rows[i]["Post"].ToString().Trim();

                    #region Check Return receive id

                    string ReturnId = cImport.CheckReceiveReturnID(dtReceiveM.Rows[i]["Return_Id"].ToString().Trim(),
                                                                   currConn, transaction);

                    #endregion Check Return receive id
                    string createdBy = dtReceiveM.Rows[i]["Created_By"].ToString().Trim();
                    string lastModifiedBy = dtReceiveM.Rows[i]["LastModified_By"].ToString().Trim();
                    string transactionType = dtReceiveM.Rows[i]["Transection_Type"].ToString().Trim();
                    string fromBOM = dtReceiveM.Rows[i]["From_BOM"].ToString().Trim();
                    string totalVATAmount = dtReceiveM.Rows[i]["Total_VAT_Amount"].ToString().Trim();
                    string totalAmount = dtReceiveM.Rows[i]["Total_Amount"].ToString().Trim();

                    receiveMasterVM = new ReceiveMasterVM();
                    receiveMasterVM.ReceiveDateTime = Convert.ToDateTime(receiveDateTime).ToString("yyyy-MM-dd HH:mm:ss");
                    //DateTime.Now.ToString(" HH:mm:ss");
                    receiveMasterVM.Post = post;
                    receiveMasterVM.ReturnId = ReturnId;
                    receiveMasterVM.SerialNo = serialNo.Replace(" ", "");
                    receiveMasterVM.Comments = comments;
                    receiveMasterVM.CreatedBy = createdBy;
                    receiveMasterVM.CreatedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    receiveMasterVM.LastModifiedBy = lastModifiedBy;
                    receiveMasterVM.LastModifiedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    receiveMasterVM.transactionType = transactionType;
                    receiveMasterVM.FromBOM = fromBOM;
                    receiveMasterVM.TotalVATAmount = Convert.ToDecimal(totalVATAmount);
                    receiveMasterVM.TotalAmount = Convert.ToDecimal(totalAmount);
                    receiveMasterVM.ImportId = importID;
                    receiveMasterVM.FromBOM = "N";

                    DataRow[] RDRaws; //= new DataRow[];//

                    #region fitemno

                    if (!string.IsNullOrEmpty(importID))
                    {
                        RDRaws =
                            dtReceiveD.Select("ID='" + importID + "'");
                    }
                    else
                    {
                        RDRaws = null;
                    }

                    #endregion fitemno

                    #endregion Master Receive

                    #region Details Receive

                    int counter = 1;
                    receiveDetailVMs = new List<ReceiveDetailVM>();
                    DataTable dtDistinctItem = RDRaws.CopyToDataTable().DefaultView.ToTable(true, "Item_Code");

                    DataTable dtReceiveDetail = RDRaws.CopyToDataTable();
                    foreach (DataRow item in dtDistinctItem.Rows)
                    {
                        string itemCode = item["Item_Code"].ToString().Trim();

                        DataTable dtRepeatedItems = dtReceiveDetail.Select("[Item_Code] ='" + item["Item_Code"].ToString() + "'").CopyToDataTable();

                        decimal nbrPrice = 0;
                        decimal LastNBRPrice = 0;
                        decimal quantity = 0;
                        decimal totalPrice = 0;

                        string vATName = "";
                        string itemNo = "";
                        foreach (DataRow row in dtRepeatedItems.Rows)
                        {
                            string itemName = row["Item_Name"].ToString().Trim();
                            itemNo = cImport.FindItemId(itemName, itemCode, currConn, transaction);

                            quantity = quantity + Convert.ToDecimal(row["Quantity"].ToString().Trim());
                            totalPrice = totalPrice + Convert.ToDecimal(row["Total_Price"].ToString().Trim());
                            nbrPrice = (totalPrice) / (quantity);
                            LastNBRPrice = nbrPrice;

                            vATName = row["VAT_Name"].ToString().Trim();
                        }
                        string uOMn = cImport.FindUOMn(itemNo, currConn, transaction);
                        string uOM = uOMn;
                        string uOMc = "1";


                        ReceiveDetailVM receiveDetailVM = new ReceiveDetailVM();
                        receiveDetailVM.ReceiveLineNo = counter.ToString();
                        receiveDetailVM.ItemNo = itemNo.ToString();
                        receiveDetailVM.Quantity = Convert.ToDecimal(quantity);
                        receiveDetailVM.UOM = uOM;
                        receiveDetailVM.UOMn = uOMn.ToString();
                        receiveDetailVM.UOMc = Convert.ToDecimal(uOMc);
                        receiveDetailVM.VATRate = Convert.ToDecimal(0);
                        receiveDetailVM.VATAmount = Convert.ToDecimal(0);
                        receiveDetailVM.SD = Convert.ToDecimal(0);
                        receiveDetailVM.SDAmount = Convert.ToDecimal(0);
                        receiveDetailVM.BOMId = 0;
                        receiveDetailVM.CommentsD = "NA";
                        receiveDetailVM.VatName = vATName;
                        receiveDetailVM.CostPrice = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc);
                        receiveDetailVM.NBRPrice = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc);
                        receiveDetailVM.SubTotal = Convert.ToDecimal(LastNBRPrice) * Convert.ToDecimal(uOMc) *
                                                   Convert.ToDecimal(quantity);
                        receiveDetailVM.UOMPrice = Convert.ToDecimal(LastNBRPrice);
                        receiveDetailVM.UOMQty = Convert.ToDecimal(uOMc) *
                                                 Convert.ToDecimal(quantity);
                        receiveDetailVMs.Add(receiveDetailVM);

                        counter++;

                    }
                    #endregion Details Receive

                    string[] sqlResults = ReceiveInsert(receiveMasterVM, receiveDetailVMs, null, transaction, currConn);
                    retResults[0] = sqlResults[0];
                }

                if (retResults[0] == "Success")
                {
                    transaction.Commit();
                    #region SuccessResult

                    retResults[0] = "Success";
                    retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                    retResults[2] = "" + "1";
                    retResults[3] = "" + "N";
                    #endregion SuccessResult
                }



                #endregion Process model
            }
            #endregion try
            #region catch & final
            catch (SqlException sqlex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "ImportData_Sanofi", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (ArgumentNullException aeg)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + aeg.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "ImportData_Sanofi", aeg.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", aeg.Message.ToString());

            }
            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "ImportData_Sanofi", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion catch & final

            return retResults;
        }

        public DataTable SearchByReferenceNo(string ReferenceNo, string ItemNo = ""
            , SysDBInfoVMTemp connVM = null, string transactionType = "", string ShiftId = "0")
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataTable dataTable = new DataTable("ReceiveHeader");
            DataSet ds = new DataSet();

            #endregion

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                sqlText = "";
                if (!string.IsNullOrEmpty(transactionType))
                {
                    #region Production Wise Sale
                    if (transactionType == "Other" || transactionType == "Export")
                    {
                        sqlText += @"  select * from(
  select Products.ItemNo,(Products.ProductName + '~'+Products.ProductCode)ProductName,Products.ProductCode,ReceiveDetails.Quantity,ReceiveDetails.CostPrice
,ReceiveDetails.UOM,ReceiveDetails.BOMId,ReceiveDetails.VATRate,ReceiveDetails.VATAmount,ReceiveDetails.SD,ReceiveDetails.SDAmount,ReceiveDetails.UOMc,ReceiveHeaders.IsTripComplete from ReceiveDetails
left outer join ReceiveHeaders on ReceiveHeaders.ReceiveNo=ReceiveDetails.ReceiveNo
left outer join Products on Products.ItemNo=ReceiveDetails.ItemNo
where 1=1 
";
                        if (!string.IsNullOrEmpty(ItemNo))
                        {
                            sqlText += @"   and ReceiveDetails.ItemNo=@ItemNo ";

                        }
                        if (!string.IsNullOrEmpty(ReferenceNo))
                        {
                            sqlText += @"   and ReceiveHeaders.ReferenceNo=@ReferenceNo ";
                        }
                        if (!string.IsNullOrEmpty(ShiftId))
                        {
                            sqlText += @"   and ReceiveHeaders.ShiftId=@ShiftId ";
                        }


                        sqlText += @"  union all 
   
select p.ItemNo,(p.ProductName+ '~'+p.ProductCode)ProductName,p.ProductCode, '1' Quantity,'1'CostPrice, p.UOM,'' BOMId,'1' VATRate,'1' VATAmount,'1' SD ,'1' SDAmount,'1' UOMc,'' IsTripComplete from Products p 
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID 
where  pc.IsRaw='service(nonstock)' and p.IsTransport='y') as a ";

                        sqlText += @"  order by ProductName";

                        #region SQL Command

                        SqlCommand objCommReceiveHeader = new SqlCommand();
                        objCommReceiveHeader.Connection = currConn;

                        objCommReceiveHeader.CommandText = sqlText;
                        objCommReceiveHeader.CommandType = CommandType.Text;

                        #endregion

                        #region Parameter
                        if (!string.IsNullOrEmpty(ItemNo))
                        {
                            if (!objCommReceiveHeader.Parameters.Contains("@ItemNo"))
                            { objCommReceiveHeader.Parameters.AddWithValue("@ItemNo", ItemNo); }
                            else { objCommReceiveHeader.Parameters["@ItemNo"].Value = ItemNo; }
                        }
                        if (!string.IsNullOrEmpty(ReferenceNo))
                        {
                            if (!objCommReceiveHeader.Parameters.Contains("@ReferenceNo"))
                            { objCommReceiveHeader.Parameters.AddWithValue("@ReferenceNo", ReferenceNo); }
                            else { objCommReceiveHeader.Parameters["@ReferenceNo"].Value = ReferenceNo; }
                        }
                        if (!string.IsNullOrEmpty(ShiftId))
                        {
                            if (!objCommReceiveHeader.Parameters.Contains("@ShiftId"))
                            { objCommReceiveHeader.Parameters.AddWithValue("@ShiftId", ShiftId); }
                            else { objCommReceiveHeader.Parameters["@ShiftId"].Value = ShiftId; }
                        }


                        #endregion Parameter

                        SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommReceiveHeader);
                        dataAdapter.Fill(dataTable);

                    }

                    #endregion

                    #region Purchase wise Sale
                    else if (transactionType == "TollSale")
                    {
                        sqlText += @"  select * from(
  select Products.ItemNo,(Products.ProductName + '~'+Products.ProductCode)ProductName,Products.ProductCode,PurchaseInvoiceDetails.Quantity,PurchaseInvoiceDetails.CostPrice,PurchaseInvoiceDetails.UOM,PurchaseInvoiceDetails.BOMId,PurchaseInvoiceDetails.VATRate,PurchaseInvoiceDetails.VATAmount,PurchaseInvoiceDetails.SD,PurchaseInvoiceDetails.SDAmount,PurchaseInvoiceDetails.UOMc,PurchaseInvoiceHeaders.IsTripComplete from PurchaseInvoiceDetails
left outer join PurchaseInvoiceHeaders on PurchaseInvoiceHeaders.PurchaseInvoiceNo=PurchaseInvoiceDetails.PurchaseInvoiceNo
left outer join Products on Products.ItemNo=PurchaseInvoiceDetails.ItemNo
where 1=1 
";
                        if (!string.IsNullOrEmpty(ItemNo))
                        {
                            sqlText += @"   and PurchaseInvoiceDetails.ItemNo=@ItemNo ";

                        }
                        if (!string.IsNullOrEmpty(ReferenceNo))
                        {
                            sqlText += @"   and PurchaseInvoiceHeaders.SerialNo=@ReferenceNo ";

                        }



                        sqlText += @"  union all 
   
select p.ItemNo,(p.ProductName+ '~'+p.ProductCode)ProductName,p.ProductCode, '1' Quantity,'1'CostPrice, p.UOM,'' BOMId,'1' VATRate,'1' VATAmount,'1' SD ,'1' SDAmount,'1' UOMc,'' IsTripComplete from Products p 
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID 
where  pc.IsRaw='service(nonstock)' and p.IsTransport='y') as a ";

                        sqlText += @"  order by ProductName";


                        #region SQL Command

                        SqlCommand objCommReceiveHeader = new SqlCommand();
                        objCommReceiveHeader.Connection = currConn;

                        objCommReceiveHeader.CommandText = sqlText;
                        objCommReceiveHeader.CommandType = CommandType.Text;

                        #endregion

                        #region Parameter
                        if (!string.IsNullOrEmpty(ItemNo))
                        {
                            if (!objCommReceiveHeader.Parameters.Contains("@ItemNo"))
                            { objCommReceiveHeader.Parameters.AddWithValue("@ItemNo", ItemNo); }
                            else { objCommReceiveHeader.Parameters["@ItemNo"].Value = ItemNo; }
                        }
                        if (!string.IsNullOrEmpty(ReferenceNo))
                        {
                            if (!objCommReceiveHeader.Parameters.Contains("@ReferenceNo"))
                            { objCommReceiveHeader.Parameters.AddWithValue("@ReferenceNo", ReferenceNo); }
                            else { objCommReceiveHeader.Parameters["@ReferenceNo"].Value = ReferenceNo; }
                        }



                        #endregion Parameter

                        SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommReceiveHeader);
                        dataAdapter.Fill(dataTable);

                    }
                    #endregion


                }
                #endregion




            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ReceiveDAL", "SearchByReferenceNo", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "SearchByReferenceNo", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;
        }

        public DataTable GetExcelData(List<string> invoiceList, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDAl = new CommonDAL();

                string companyCode = commonDAl.settings("CompanyCode", "Code", currConn, transaction);

                sqlText = @"SELECT 
	  rh.[ReceiveNo] ID
	  ,bp.BranchCode ";

                if (companyCode != "BATA")
                {
                    sqlText +=
                        ",convert(varchar(100),rh.[ReceiveDateTime],111) + ' '+convert(varchar(100),rh.[ReceiveDateTime],108) Receive_DateTime";
                }
                else
                {
                    sqlText += @" 
      ,convert(varchar(100),rh.[ReceiveDateTime],111)Receive_Date
      ,convert(varchar(100),rh.[ReceiveDateTime],108)Receive_Time";

                }

                sqlText += @",rh.serialNo Reference_No
      ,rh.[Comments]

      ,rh.[Post]
      ,rh.[ReceiveReturnId] Return_Id
,rh.WithToll With_Toll
	  , pd.ProductCode Item_Code 
	  ,pd.ProductName Item_Name 
	  ,rd.Quantity
	  ,rd.CostPrice NBR_Price
	  , rd.UOM
	  , rd.VatName VAT_Name
      ,case when len(isnull(c.CustomerCode,'')) <= 0 then 'NA' else c.CustomerCode end as CustomerCode
,pdc.CategoryName Product_Group
      ,SUBSTRING(rh.ImportIDExcel, 1, CHARINDEX('~', rh.ImportIDExcel + '~')-1 ) AS ImportID 

  FROM  [ReceiveHeaders] rh left outer join ReceiveDetails rd
  on rh.ReceiveNo = rd.ReceiveNo left outer join BranchProfiles bp
  on rh.BranchId = bp.BranchID left outer join Products pd 
  on rd.ItemNo = pd.ItemNo left outer join Customers c
  on rh.CustomerID = c.CustomerID
left outer join ProductCategories pdc on pdc.CategoryID = pd.CategoryID 

  where rh.ReceiveNo in ( ";

                var len = invoiceList.Count;

                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + invoiceList[i] + "'";

                    if (i != (len - 1))
                    {
                        sqlText += ",";
                    }
                }

                if (len == 0)
                {
                    sqlText += "''";
                }

                sqlText += ")";

                var cmd = new SqlCommand(sqlText, currConn, transaction);

                var table = new DataTable();
                var adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("ReceiveDAL", "GetExcelData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
        }

        public DataTable GetExcelDataWeb(List<string> invoiceList, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDAl = new CommonDAL();

                string companyCode = commonDAl.settings("CompanyCode", "Code", currConn, transaction, connVM);

                sqlText = @"SELECT 
	  rh.[ReceiveNo] ID
	  ,bp.BranchCode ";

                if (companyCode != "BATA")
                {
                    sqlText +=
                        ",convert(varchar(100),rh.[ReceiveDateTime],111) + ' '+convert(varchar(100),rh.[ReceiveDateTime],108) Receive_DateTime";
                }
                else
                {
                    sqlText += @" 
      ,convert(varchar(100),rh.[ReceiveDateTime],111)Receive_Date
      ,convert(varchar(100),rh.[ReceiveDateTime],108)Receive_Time";

                }

                sqlText += @",rh.serialNo Reference_No
      ,rh.[Comments]

      ,rh.[Post]
      ,rh.[ReceiveReturnId] Return_Id
,rh.WithToll With_Toll
	  , pd.ProductCode Item_Code 
	  ,pd.ProductName Item_Name 
	  ,rd.Quantity
	  ,rd.CostPrice NBR_Price
	  , rd.UOM
	  , rd.VatName VAT_Name
      ,case when len(isnull(c.CustomerCode,'')) <= 0 then 'NA' else c.CustomerCode end as CustomerCode
,pdc.CategoryName Product_Group
,SUBSTRING(rh.ImportIDExcel, 1, CHARINDEX('~', rh.ImportIDExcel + '~')-1 ) AS ImportID
  FROM  [ReceiveHeaders] rh left outer join ReceiveDetails rd
  on rh.ReceiveNo = rd.ReceiveNo left outer join BranchProfiles bp
  on rh.BranchId = bp.BranchID left outer join Products pd 
  on rd.ItemNo = pd.ItemNo left outer join Customers c
  on rh.CustomerID = c.CustomerID
left outer join ProductCategories pdc on pdc.CategoryID = pd.CategoryID 

  where rh.Id in ( ";

                var len = invoiceList.Count;

                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + invoiceList[i] + "'";

                    if (i != (len - 1))
                    {
                        sqlText += ",";
                    }
                }

                if (len == 0)
                {
                    sqlText += "''";
                }

                sqlText += ")";

                var cmd = new SqlCommand(sqlText, currConn, transaction);

                var table = new DataTable();
                var adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("ReceiveDAL", "GetExcelDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
        }

        public string[] SaveTempReceive(DataTable dtTableResult, string transactionType, string CurrentUser, int branchId, Action callBack, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null, string BranchCode = "")
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                sqlText = @"delete from TempReceiveData";

                CommonDAL commonDal = new CommonDAL();
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.ExecuteNonQuery();

                string CompanyCode = commonDal.settings("CompanyCode", "Code", currConn, transaction);

                if (CompanyCode.ToLower() == "smc")
                {
                    sqlText = @"delete from ProductMapingTemp";
                    cmd = new SqlCommand(sqlText, currConn, transaction);
                    cmd.ExecuteNonQuery();

                    sqlText = @"
insert into ProductMapingTemp (product_code,code,eSales_Name,DSS_Name)
select product_code,code,eSales_Name,DSS_Name from [172.16.200.6].[smc_uat].[dbo].VAT_eSales_DSS_Product_Map
";
                    cmd = new SqlCommand(sqlText, currConn, transaction);
                    cmd.ExecuteNonQuery();

                    sqlText = @"

update ProductMapingTemp set ItemNo = Products.ItemNo from Products where Products.ProductCode = ProductMapingTemp.product_code  
and (ProductMapingTemp.ItemNo = '0' or ProductMapingTemp.ItemNo is null) and ProductMapingTemp.product_code !='-' 
and ProductMapingTemp.product_code !='0';

update ProductMapingTemp set ItemNo = Products.ItemNo from Products where Products.ProductCode = ProductMapingTemp.code  
and (ProductMapingTemp.ItemNo = '0' or ProductMapingTemp.ItemNo is null) and ProductMapingTemp.code !='-' 
and ProductMapingTemp.code !='0';

";
                    cmd = new SqlCommand(sqlText, currConn, transaction);
                    cmd.ExecuteNonQuery();

                }

                commonDal.BulkInsert("TempReceiveData", dtTableResult, currConn, transaction);

                string itemUpdate = @"
update TempReceiveData set ItemNo = Products.ItemNo from Products where Products.ProductCode = TempReceiveData.Item_Code and Products.IsArchive = 0 
and (TempReceiveData.ItemNo = '0' or TempReceiveData.ItemNo is null) and TempReceiveData.Item_Code !='-' and TempReceiveData.Item_Code !='0';


update TempReceiveData set ItemNo = ProductMapingTemp.ItemNo from ProductMapingTemp where ProductMapingTemp.product_code = TempReceiveData.Item_Code  
and (TempReceiveData.ItemNo = '0' or TempReceiveData.ItemNo is null) and TempReceiveData.Item_Code !='-' and TempReceiveData.Item_Code !='0';

update TempReceiveData set ItemNo = ProductMapingTemp.ItemNo from ProductMapingTemp where ProductMapingTemp.code = TempReceiveData.Item_Code  
and (TempReceiveData.ItemNo = '0' or TempReceiveData.ItemNo is null) and TempReceiveData.Item_Code !='-' and TempReceiveData.Item_Code !='0';


update TempReceiveData set ItemNo = Products.ItemNo from Products where Products.ProductName = TempReceiveData.Item_Name and Products.IsArchive = 0 
and (TempReceiveData.ItemNo = '0' or TempReceiveData.ItemNo is null) and TempReceiveData.Item_Name !='-' and TempReceiveData.Item_Name !='';";

                string branchCode =
                    @"
update TempReceiveData set BranchId = BranchProfiles.BranchID from BranchProfiles 
where BranchProfiles.BranchCode = TempReceiveData.BranchCode or BranchProfiles.IntegrationCode = TempReceiveData.BranchCode

update TempReceiveData set BranchId = BranchMapDetails.BranchID from BranchMapDetails 
where   BranchMapDetails.IntegrationCode = TempReceiveData.BranchCode and (TempReceiveData.BranchId  is null or 

TempReceiveData.BranchId ='0' or TempReceiveData.BranchId = ''

)
";

                string customerCode = @"update TempReceiveData set CustomerID = Customers.CustomerID 
from Customers where Customers.CustomerID  = TempReceiveData.CustomerCode;";
                // @Receive_DateTime

                /*
                 * cast(@Receive_DateTime as datetime)
                 *
                 */
                string bom = @"
DECLARE @Counter INT 
DECLARE @BomId INT 
DECLARE @FinishItemNo varchar(100)
DECLARE @VAT_Name varchar(100)
DECLARE @Receive_DateTime varchar(100)
DECLARE @len INT 

SET @Counter=(Select min(SL) from TempReceiveData)
SET @len=(Select max(SL) from TempReceiveData)


WHILE ( @Counter <= @len)
BEGIN
	select @FinishItemNo= ItemNo,@VAT_Name= VAT_Name,@Receive_DateTime=Receive_DateTime from TempReceiveData
	where TempReceiveData.SL=@Counter
	select   top 1  @BomId= BOMId  from BOMs
	where  boms.FinishItemNo =@FinishItemNo and boms.VATName = @VAT_Name
    and boms.EffectDate <=dateadd(d,1,cast(@Receive_DateTime as datetime)) and boms.Post = 'Y' 
   order by boms.EffectDate desc

	update TempReceiveData set BomId=@BomId where  TempReceiveData.SL=@Counter

    SET @Counter  = @Counter  + 1

END
 ";
                string updateUOM = @"
update TempReceiveData set UOM = Products.UOM 
from Products where Products.ItemNo = TempReceiveData.ItemNo and TempReceiveData.UOM = '-'";

                string updatePrice = @"
update TempReceiveData set NBR_Price = Products.NBRPrice 
from Products where Products.ItemNo = TempReceiveData.ItemNo";


                string updateShifts = @"
update TempReceiveData set ShiftId = (select top 1 Shifts.Id 
from Shifts where cast(TempReceiveData.Receive_DateTime as time) between Shifts.ShiftStart and Shifts.ShiftEnd);";

                //                var bom = @"update TempReceiveData set TempReceiveData.BOMId = boms.BOMId from boms where 
                //boms.FinishItemNo = TempReceiveData.ItemNo and boms.VATName = TempReceiveData.VAT_Name 
                //and boms.EffectDate <=   dateadd(d,1,cast(TempReceiveData.Receive_DateTime as datetime)) and boms.Post = 'Y' ";

                string UpdateUpper = @"UPDATE TempReceiveData SET  ID = UPPER(ID),Reference_No=UPPER(Reference_No)
update TempReceiveData set ID=LTRIM(RTRIM(ID)),Reference_No=LTRIM(RTRIM(Reference_No))
";

                string getAll = @"select * from TempReceiveData";

                string autoUOM = commonDal.settingValue("Receive", "AutoUOM", null, currConn, transaction);

                string autoPrice = commonDal.settingValue("Receive", "AutoPrice", null, currConn, transaction);

                cmd.CommandText = itemUpdate + " " + branchCode + " " + customerCode + " " + updateShifts;

                if (autoUOM == "Y")
                {
                    cmd.CommandText += " " + updateUOM;
                }

                if (autoPrice == "Y")
                {
                    cmd.CommandText += " " + updatePrice;
                }

                cmd.ExecuteNonQuery();

                #region Delete Duplicate

                string duplicate = commonDal.settings("Import", "ReceiveDuplicateInsert", currConn, transaction);

                string deleteDuplicate = @"
delete TempReceiveData from 
TempReceiveData 
join ReceiveHeaders on TempReceiveData.ID = ReceiveHeaders.ImportIDExcel";

                string selectDuplicate = @"select distinct TempReceiveData.ID,ReceiveHeaders.ImportIDExcel from 
TempReceiveData join ReceiveHeaders on TempReceiveData.ID = ReceiveHeaders.ImportIDExcel";

                if (CompanyCode.ToLower() == "smc" || CompanyCode.ToLower() == "smcholding"
                    || CompanyCode.ToLower() == "eon" || CompanyCode.ToLower() == "purofood" || CompanyCode.ToLower() == "eahpl" || CompanyCode.ToLower() == "eail"
                    || CompanyCode.ToLower() == "eeufl" || CompanyCode.ToLower() == "exfl" || CompanyCode.ToLower() == "BERGER".ToLower()
                    || CompanyCode.ToLower() == "SMC".ToLower() || CompanyCode.ToLower() == "SMCHOLDING".ToLower()
                    || CompanyCode.ToLower() == "JAPFA".ToLower() || OrdinaryVATDesktop.IsNourishCompany(CompanyCode))//CompanyCode == "CP" ||
                {
                    if (duplicate.ToLower() == "n")
                    {
                        cmd.CommandText = selectDuplicate;
                        SqlDataAdapter ddataAdapter = new SqlDataAdapter(cmd);
                        DataTable duplicates = new DataTable();
                        ddataAdapter.Fill(duplicates);

                        string duplicateIds = string.Join(", ", duplicates.Rows.OfType<DataRow>().Select(r => r[0].ToString()));

                        if (duplicates.Rows.Count > 0)
                        {
                            throw new Exception("These Invoices are already in system-" + duplicateIds);
                        }
                    }
                    else if (duplicate.ToLower() == "y")
                    {
                        cmd.CommandText = deleteDuplicate;

                        int deletedData = cmd.ExecuteNonQuery();
                    }
                }


                #endregion

                if (CompanyCode == "CP" && CurrentUser == "API")
                {
                    string updateDatetime = @" update TempReceiveData set Receive_DateTime = cast(TempReceiveData.Receive_DateTime as date) ";

                    cmd.CommandText = updateDatetime;

                    cmd.ExecuteNonQuery();

                }

                ////if (!dtTableResult.Columns.Contains("Receive_DateTime"))
                ////{
                ////    string updateDatetime = "";

                ////    cmd.CommandText = updateDatetime;

                ////    cmd.ExecuteNonQuery();
                ////}

                cmd.CommandText = bom;
                cmd.ExecuteNonQuery();

                cmd.CommandText = UpdateUpper;
                cmd.ExecuteNonQuery();

                cmd.CommandText = getAll;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                DataTable tempData = new DataTable();

                adapter.Fill(tempData);

                string IssueFromBOM = new CommonDAL().settings("IssueFromBOM", "IssueFromBOM");

                if (IssueFromBOM == "N" && CompanyCode.ToLower() == "berger".ToLower() && transactionType.ToLower() == "Other".ToLower())
                {
                    retResults = SaveAndProcessReceiveData(transactionType, CurrentUser, branchId, currConn, transaction, callBack, null, BranchCode);
                }
                else
                {
                    retResults = SaveReceive(tempData, transactionType, CurrentUser, branchId, currConn, transaction, callBack, null, BranchCode);

                }
                //////if (IssueFromBOM == "N")
                //////{
                //////    retResults = SaveAndProcessReceiveData(transactionType, CurrentUser, branchId, currConn, transaction, callBack, null, BranchCode);
                //////}
                //////else
                //////{
                //////    retResults = SaveReceive(tempData, transactionType, CurrentUser, branchId, currConn, transaction, callBack, null, BranchCode);
                //////}

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (Vtransaction == null && transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ReceiveDAL", "SaveTempReceive", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            #region Results
            return retResults;
            #endregion

        }

        private string[] SaveReceive(DataTable dtTableResult, string transactionType, string CurrentUser, int branchId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, Action callBack = null, SysDBInfoVMTemp connVM = null, string BranchCode = "")
        {
            #region variables

            DataTable dtReceiveM = new DataTable();
            DataTable dtReceiveD = new DataTable();
            CommonImportDAL cImport = new CommonImportDAL();
            int txtTotalAmount = 0;

            #endregion

            #region try

            try
            {
                #region Excel and Db

                dtReceiveM = new System.Data.DataTable();
                if (!dtTableResult.Columns.Contains("BranchCode"))
                {
                    var branchCode = new DataColumn("BranchCode") { DefaultValue = BranchCode };
                    dtTableResult.Columns.Add(branchCode);
                }
                dtTableResult.CaseSensitive = false;
                DataView view = new DataView(dtTableResult);
                try
                {
                    dtReceiveM = view.ToTable(true, "ID", "Receive_DateTime", "Reference_No", "Comments", "Return_Id",
                        "Post", "CustomerCode", "BranchCode", "BranchId", "CustomerID", "With_Toll", "ShiftId");
                    dtReceiveD = view.ToTable(false, "ID", "Item_Code", "Item_Name", "Quantity", "UOM", "NBR_Price",
                        "VAT_Name", "ItemNo", "BomId", "Product_Group", "Weight");
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                string IssueFromBOM = new CommonDAL().settings("IssueFromBOM", "IssueFromBOM");
                dtReceiveM = OrdinaryVATDesktop.DtColumnAdd(dtReceiveM, "Transection_Type", transactionType, "string");
                dtReceiveM = OrdinaryVATDesktop.DtColumnAdd(dtReceiveM, "Created_By", CurrentUser, "string");
                dtReceiveM = OrdinaryVATDesktop.DtColumnAdd(dtReceiveM, "LastModified_By", CurrentUser, "string");
                dtReceiveM = OrdinaryVATDesktop.DtColumnAdd(dtReceiveM, "From_BOM", IssueFromBOM, "string");
                dtReceiveM = OrdinaryVATDesktop.DtColumnAdd(dtReceiveM, "Total_VAT_Amount", "0", "string");
                dtReceiveM =
                    OrdinaryVATDesktop.DtColumnAdd(dtReceiveM, "Total_Amount", txtTotalAmount.ToString(), "string");


                dtReceiveD.Columns.Add("item_No");
                //foreach (DataRow row in dtReceiveD.Rows)
                //{
                //    string itemNo = cImport.FindItemId(row["Item_Name"].ToString(), row["Item_Code"].ToString().Trim(), null, null).ToString();
                //    row["item_No"] = itemNo.Trim();
                //}
                #endregion

                #region Text

                #endregion


                dtReceiveM = OrdinaryVATDesktop.DtDateCheck(dtReceiveM, new string[] { "Receive_DateTime" });
                return ImportData(dtReceiveM, dtReceiveD, branchId, VcurrConn, Vtransaction, callBack);
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "SaveReceive", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #endregion


        }

        public decimal ReturnReceiveQty(string receiveReturnId, string itemNo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            decimal retResults = 0;
            int countId = 0;
            string sqlText = "";
            SqlConnection currConn = null;
            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }

                #endregion open connection and transaction

                #region Return Qty

                sqlText = "  ";

                sqlText = "select Sum(isnull(ReceiveDetails.Quantity,0)) from ReceiveDetails ";
                sqlText += "where ItemNo =@itemNo and ReceiveReturnId =@receiveReturnId ";
                sqlText += " group by ItemNo";

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.Parameters.AddWithValue("@itemNo", itemNo);
                cmd.Parameters.AddWithValue("@receiveReturnId", receiveReturnId);
                if (cmd.ExecuteScalar() == null)
                {
                    retResults = 0;
                }
                else
                {
                    retResults = (decimal)cmd.ExecuteScalar();
                }

                #endregion Return Qty

            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ReceiveDAL", "ReturnReceiveQty", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReturnReceiveQty", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn == null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public ResultVM UpdateAdjustmentValue(string invoiceNo = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try Statement

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction(DateTime.Now.ToString("ddMMyyyHH:mm:ss"));
                }

                #endregion open connection and transaction

                #region Update

                string sqlText = "";

                #region Update Adjustment Value

                sqlText = @"

create table #tempBOMs(
FinishItemNo varchar(50)
,VATName varchar(50)
,EffectDate datetime
,BOMId varchar(50)
)

insert into #tempBOMs(FinishItemNo,VATName,EffectDate)
select FinishItemNo,VATName, max(EffectDate)EffectDate from BOMs 
where Post = 'Y'
group by FinishItemNo, VATName

update #tempBOMs set BOMId =  BOMs.BOMId
from BOMs 
where 
BOMs.FinishItemNo = #tempBOMs.FinishItemNo 
and BOMs.EffectDate = #tempBOMs.EffectDate
and BOMS.VATName = #tempBOMs.VATName


update ReceiveDetails set BOMId = #tempBOMs.BOMId 
from #tempBOMs 
where #tempBOMs.FinishItemNo = ReceiveDetails.ItemNo 
and #tempBOMs.VATName = ReceiveDetails.VATName 
and #tempBOMs.EffectDate <= ReceiveDetails.ReceiveDateTime
and ReceiveDetails.AdjustmentValue is null
and (ReceiveDetails.BOMId is  null or ReceiveDetails.BOMId = 0)
@condition

update ReceiveDetails 
set AdjustmentValue=(BOMs.NBRPrice*ReceiveDetails.Quantity)-ReceiveDetails.SubTotal from
BOMs 
where BOMs.BOMId = ReceiveDetails.BOMId 
and (ReceiveDetails.BOMId is not null or ReceiveDetails.BOMId != 0)
and ReceiveDetails.AdjustmentValue is null
@condition

update ReceiveDetails 
set AdjustmentValue=(Products.NBRPrice*ReceiveDetails.Quantity)-ReceiveDetails.SubTotal from
Products 
where Products.ItemNo = ReceiveDetails.ItemNo 
and (ReceiveDetails.BOMId is  null or ReceiveDetails.BOMId = 0)
and ReceiveDetails.AdjustmentValue is null
@condition

drop table #tempBOMs




";

                #endregion

                sqlText = !string.IsNullOrEmpty(invoiceNo)
                    ? sqlText.Replace("@condition", "and ReceiveDetails.ReceiveNo = '" + invoiceNo + "'")
                    : sqlText.Replace("@condition", "");


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 500;

                cmd.CommandText = sqlText;
                cmd.ExecuteNonQuery();

                rVM.Status = "Success";
                rVM.Message = "Adjustment Values Updated Successfully!";

                #endregion

                #region Transaction Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                rVM = new ResultVM();
                rVM.Message = ex.Message;

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("IssueDAL", "MultipleUpdate", ex.ToString());
                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return rVM;
        }

        #endregion

        #region Web Methods

        //==================SelectAll=================

        public List<ReceiveMasterVM> SelectAllList(int Id = 0, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, ReceiveMasterVM paramVM = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            //SqlConnection currConn = null;
            //SqlTransaction transaction = null;
            string sqlText = "";
            List<ReceiveMasterVM> VMs = new List<ReceiveMasterVM>();
            ReceiveMasterVM vm;
            #endregion

            #region try

            try
            {
                #region sql statement

                #region SqlExecution

                DataTable dt = SelectAll(Id, conditionFields, conditionValues, VcurrConn, Vtransaction, null, false, connVM);

                foreach (DataRow dr in dt.Rows)
                {
                    try
                    {
                        vm = new ReceiveMasterVM();
                        vm.Id = dr["Id"].ToString();
                        vm.ReceiveNo = dr["ReceiveNo"].ToString();
                        vm.IssueFromBOM = dr["IssueFromBOM"].ToString();
                        vm.FromBOM = dr["IssueFromBOM"].ToString();
                        vm.ReceiveDateTime = OrdinaryVATDesktop.DateTimeToDate(dr["ReceiveDateTime"].ToString());
                        vm.TotalAmount = Convert.ToDecimal(dr["TotalAmount"].ToString());
                        vm.TotalVATAmount = Convert.ToDecimal(dr["TotalVATAmount"].ToString());
                        vm.SerialNo = dr["SerialNo"].ToString();
                        vm.Comments = dr["Comments"].ToString();
                        vm.CreatedBy = dr["CreatedBy"].ToString();
                        vm.CreatedOn = dr["CreatedOn"].ToString();
                        vm.LastModifiedBy = dr["LastModifiedBy"].ToString();
                        vm.LastModifiedOn = dr["LastModifiedOn"].ToString();
                        vm.transactionType = dr["TransactionType"].ToString();
                        vm.Post = dr["Post"].ToString();
                        vm.ReferenceNo = dr["ReferenceNo"].ToString();
                        vm.CustomerID = dr["CustomerID"].ToString();
                        vm.CustomerName = dr["CustomerName"].ToString();
                        vm.WithToll = dr["WithToll"].ToString();
                        vm.ShiftId = dr["ShiftId"].ToString();
                        vm.ReturnId = dr["ReturnId"].ToString();
                        ////reading newly added fields
                        vm.ImportId = dr["ImportIDExcel"].ToString();
                        if (vm.ImportId != null && !string.IsNullOrWhiteSpace(vm.ImportId))
                        {
                            vm.ImportId = dr["ImportIDExcel"].ToString().Split('~')[0];
                        }
                        vm.BranchId = Convert.ToInt32(dr["BranchId"]);

                        VMs.Add(vm);
                    }
                    catch (Exception e)
                    {

                    }

                }


                #endregion SqlExecution

                //if (Vtransaction == null && transaction != null)
                //{
                //    transaction.Commit();
                //}
                #endregion
            }
            #endregion

            #region catch
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "SelectAllList", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "SelectAllList", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion
            #region finally
            //finally
            //{
            //    if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
            //    {
            //        currConn.Close();
            //    }
            //}
            #endregion
            return VMs;
        }

        public DataTable SelectAll(int Id = 0, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, ReceiveMasterVM paramVM = null, bool Dt = false, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            string sqlTextParameter = "";
            string sqlTextOrderBy = "";
            string sqlTextCount = "";
            DataTable dt = new DataTable();
            DataSet ds = new DataSet();
            string count = "100";

            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Select Top

                int index = -1;
                if (conditionFields != null && conditionValues != null)
                {
                    index = Array.IndexOf(conditionFields, "SelectTop");
                    if (index >= 0)
                    {
                        count = conditionValues[index].ToString();

                        var field = conditionFields.ToList();
                        var Values = conditionValues.ToList();
                        field.RemoveAt(index);
                        Values.RemoveAt(index);
                        conditionFields = field.ToArray();
                        conditionValues = Values.ToArray();
                    }
                }

                #endregion

                #region sql statement

                #region Sql Text

                #region Sql Text

                if (count.ToLower() == "All".ToLower())
                {
                    sqlText = @"SELECT";
                }
                else
                {
                    sqlText = @"SELECT top " + count + " ";
                }

                sqlText += @"

 
rh.ReceiveNo
,isnull(rh.IssueFromBOM,'N') IssueFromBOM
,rh.ReceiveDateTime
,isnull(rh.TotalAmount,0) TotalAmount
,isnull(rh.TotalVATAmount,0) TotalVATAmount
,rh.SerialNo
,rh.Comments
,rh.CreatedBy
,rh.CreatedOn
,rh.LastModifiedBy
,rh.LastModifiedOn
,rh.TransactionType
,rh.Post
,rh.ImportIDExcel
,rh.ReferenceNo
,rh.CustomerID
,rh.WithToll
,c.CustomerName
,rh.ReceiveReturnId ReturnId
,ISNULL(rh.ShiftId,0) ShiftId
,ISNULL(rh.BranchId,0) BranchId
,rh.Id
,ISNULL(rh.FiscalYear,0) FiscalYear

FROM ReceiveHeaders rh left outer join Customers c
on rh.CustomerID=c.CustomerID
WHERE  1=1
";
                #endregion

                sqlTextCount += @" 
SELECT COUNT(rh.ReceiveNo)RecordCount
FROM ReceiveHeaders rh 
LEFT OUTER JOIN Customers c ON rh.CustomerID=c.CustomerID
WHERE  1=1
";
                if (Id > 0)
                {
                    sqlTextParameter += @" AND rh.Id=@Id";
                }

                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }


                if (paramVM != null)
                {
                    if (paramVM.ReceiveOnly == true)
                    {
                        sqlTextParameter += @" AND rh.TransactionType IN 
(
'Other'
,'TollFinishReceive'
,'TollFinishReceiveWithoutBOM'
,'WIP'
,'ReceiveReturn'
,'Tender'
,'PackageProduction'
)";

                    }
                }


                #endregion

                #region SqlExecution

                sqlText = sqlText + " " + sqlTextParameter;
                sqlTextCount = sqlTextCount + " " + sqlTextParameter;
                sqlText = sqlText + " " + sqlTextCount;

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }
                //if (likeVM != null)
                //{
                //    if (!string.IsNullOrEmpty(likeVM.ReceiveNo))
                //    {
                //        da.SelectCommand.Parameters.AddWithValue("@ReceiveNo", "%" + likeVM.ReceiveNo + "%");
                //    }
                //}
                if (Id > 0)
                {
                    da.SelectCommand.Parameters.AddWithValueAndNullHandle("@Id", Id);
                }
                da.Fill(ds);

                #endregion SqlExecution

                #region Commit


                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                #region DataSet to DataTable

                dt = ds.Tables[0].Copy();
                if (index >= 0)
                {
                    dt.Rows.Add(ds.Tables[1].Rows[0][0]);
                }

                #endregion

                #endregion
            }
            #endregion

            #region catch
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "SelectAll", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "SelectAll", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        //==================SelectAll=================
        public List<ReceiveDetailVM> SelectReceiveDetail(string ReceiveNo, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            List<ReceiveDetailVM> VMs = new List<ReceiveDetailVM>();
            ReceiveDetailVM vm;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region sql statement
                #region SqlText

                sqlText = @"
SELECT
 rd.Id
,rd.ReceiveNo
,rd.ReceiveLineNo
,rd.ItemNo
,isnull(rd.Quantity ,0) Quantity
,isnull(rd.CostPrice ,0) CostPrice
,isnull(rd.NBRPrice ,0) NBRPrice
,rd.UOM
,isnull(rd.VATRate ,0) VATRate
,isnull(rd.VATAmount ,0) VATAmount
,isnull(rd.SubTotal ,0) SubTotal
,rd.Comments
,rd.CreatedBy
,rd.CreatedOn
,rd.LastModifiedBy
,rd.LastModifiedOn
,isnull(rd.SD ,0) SD
,isnull(rd.SDAmount ,0) SDAmount
,rd.TransactionType
,rd.ReceiveDateTime
,rd.Post
,rd.VATName
,rd.ReceiveReturnId
,isnull(rd.DiscountAmount ,0) DiscountAmount
,isnull(rd.DiscountedNBRPrice ,0) DiscountedNBRPrice
,ISNULL(NULLIF(rd.BOMId,''),0) BOMId
,ISNULL(rd.BOMId1,0) BOMId1
,isnull(rd.UOMQty ,0) UOMQty
,isnull(rd.UOMPrice ,0) UOMPrice
,isnull(rd.UOMc ,0) UOMc
,rd.UOMn
,isnull(rd.CurrencyValue ,0) CurrencyValue
,isnull(rd.DollerValue ,0) DollerValue
,rd.ReturnTransactionType
,isnull(rd.Weight ,'0') Weight

,p.ProductCode
,p.ProductName
,rd.BranchId

FROM ReceiveDetails  rd left outer join Products p on rd.ItemNo=p.ItemNo
WHERE  1=1

";

                if (ReceiveNo != null)
                {
                    sqlText += "AND rd.ReceiveNo=@ReceiveNo";
                }
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]))
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        sqlText += " AND " + conditionFields[i] + "=@" + cField;
                    }
                }
                #endregion SqlText
                #region SqlExecution

                SqlCommand objComm = new SqlCommand(sqlText, currConn, transaction);

                if (ReceiveNo != null)
                {
                    objComm.Parameters.AddWithValueAndNullHandle("@ReceiveNo", ReceiveNo);
                }
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]))
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        objComm.Parameters.AddWithValueAndNullHandle("@" + cField, conditionValues[j]);
                    }
                }
                SqlDataReader dr;
                dr = objComm.ExecuteReader();
                while (dr.Read())
                {
                    vm = new ReceiveDetailVM();
                    vm.Id = dr["Id"].ToString();
                    vm.ReceiveNo = dr["ReceiveNo"].ToString();
                    vm.ReceiveLineNo = dr["ReceiveLineNo"].ToString();
                    vm.ItemNo = dr["ItemNo"].ToString();
                    vm.Quantity = Convert.ToDecimal(dr["Quantity"].ToString());
                    vm.CostPrice = Convert.ToDecimal(dr["CostPrice"].ToString());
                    vm.NBRPrice = Convert.ToDecimal(dr["NBRPrice"].ToString());
                    vm.UOM = dr["UOM"].ToString();
                    vm.VATRate = Convert.ToDecimal(dr["VATRate"].ToString());
                    vm.VATAmount = Convert.ToDecimal(dr["VATAmount"].ToString());
                    vm.SubTotal = Convert.ToDecimal(dr["SubTotal"].ToString());
                    vm.SD = Convert.ToDecimal(dr["SD"].ToString());
                    vm.SDAmount = Convert.ToDecimal(dr["SDAmount"].ToString());
                    vm.Post = dr["Post"].ToString();
                    vm.VatName = dr["VATName"].ToString();
                    vm.BOMId = Convert.ToInt32(dr["BOMId"]);
                    vm.UOMQty = Convert.ToDecimal(dr["UOMQty"].ToString());
                    vm.UOMPrice = Convert.ToDecimal(dr["UOMPrice"].ToString());
                    vm.UOMc = Convert.ToDecimal(dr["UOMc"].ToString());
                    vm.UOMn = dr["UOMn"].ToString();
                    vm.ReturnTransactionType = dr["ReturnTransactionType"].ToString();
                    vm.Weight = dr["Weight"].ToString();
                    vm.ItemName = dr["ProductName"].ToString();
                    vm.ItemCode = dr["ProductCode"].ToString();
                    vm.CreatedBy = dr["CreatedBy"].ToString();
                    vm.CreatedOn = dr["CreatedOn"].ToString();
                    vm.LastModifiedBy = dr["LastModifiedBy"].ToString();
                    vm.LastModifiedOn = dr["LastModifiedOn"].ToString();
                    vm.CommentsD = dr["Comments"].ToString();
                    vm.transactionType = dr["transactionType"].ToString();
                    vm.ReceiveDateTime = dr["ReceiveDateTime"].ToString();
                    vm.ReturnId = dr["ReceiveReturnId"].ToString();
                    vm.DiscountAmount = Convert.ToDecimal(dr["DiscountAmount"].ToString());
                    vm.DiscountedNBRPrice = Convert.ToDecimal(dr["DiscountedNBRPrice"].ToString());
                    vm.CurrencyValue = Convert.ToDecimal(dr["CurrencyValue"].ToString());
                    vm.DollerValue = Convert.ToDecimal(dr["DollerValue"].ToString());
                    vm.BranchId = Convert.ToInt32(dr["BranchId"].ToString());


                    VMs.Add(vm);
                }
                dr.Close();

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #endregion

            #region catch
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "SelectReceiveDetail", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "SelectReceiveDetail", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return VMs;
        }

        public string[] ImportExcelFile(ReceiveMasterVM paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "ImportExcelFile"; //Method Name
            #endregion

            #region try
            try
            {
                DataSet ds = new DataSet();
                //DataTable dt = new DataTable();
                #region Excel Reader

                string FileName = paramVM.File.FileName;
                //string Fullpath = AppDomain.CurrentDomain.BaseDirectory + "Files\\Export\\" + FileName;
                //System.IO.File.Delete(Fullpath);
                //if (paramVM.File != null && paramVM.File.ContentLength > 0)
                //{
                //    paramVM.File.SaveAs(Fullpath);
                //}


                //FileStream stream = File.Open(Fullpath, FileMode.Open, FileAccess.Read);
                IExcelDataReader reader = null;
                if (FileName.EndsWith(".xls"))
                {
                    reader = ExcelReaderFactory.CreateBinaryReader(paramVM.File.InputStream);
                }
                else if (FileName.EndsWith(".xlsx"))
                {
                    reader = ExcelReaderFactory.CreateOpenXmlReader(paramVM.File.InputStream);
                }
                reader.IsFirstRowAsColumnNames = true;
                ds = reader.AsDataSet();


                //dt = ds.Tables[0];
                reader.Close();
                //System.IO.File.Delete(Fullpath);
                #endregion

                DataTable dtReceiveM = new DataTable();
                dtReceiveM = ds.Tables["ReceiveM"];

                //DataTable dtReceiveD = new DataTable();
                //dtReceiveD = ds.Tables["ReceiveD"];


                //dtReceiveM.Columns.Add("Transection_Type");
                //dtReceiveM.Columns.Add("Created_By");
                //dtReceiveM.Columns.Add("LastModified_By");
                //dtReceiveM.Columns.Add("From_BOM");
                //dtReceiveM.Columns.Add("Total_VAT_Amount");
                //dtReceiveM.Columns.Add("Total_Amount");

                CommonImportDAL cImport = new CommonImportDAL();
                //foreach (DataRow row in dtReceiveM.Rows)
                //{
                //    row["Transection_Type"] = paramVM.transactionType;
                //    row["Created_By"] = paramVM.CreatedBy;
                //    row["LastModified_By"] = paramVM.LastModifiedBy;
                //    row["From_BOM"] = "N";////hardcoding no here by robin
                //    row["Total_VAT_Amount"] = "0";
                //    row["Total_Amount"] = "0";////hardcoding no here by robin
                //}

                //dtReceiveD.Columns.Add("item_No");
                //foreach (DataRow row in dtReceiveD.Rows)
                //{
                //    string itemNo = cImport.FindItemId("", row["Item_Code"].ToString().Trim(), null, null).ToString();
                //    row["item_No"] = itemNo.Trim();


                //}
                var dtTableResult = OrdinaryVATDesktop.DtDateFormat(dtReceiveM, new string[] { "Receive_DateTime" });
                dtTableResult.Columns.Remove("ImportID");
                #region Data Insert
                //retResults = SaveTempReceive(dtTableResult, paramVM.transactionType, paramVM.CurrentUser, paramVM.BranchId, () => { });

                retResults = SaveTempReceive(dtTableResult, paramVM.transactionType, paramVM.CreatedBy, paramVM.BranchId, () => { });


                if (retResults[0] == "Fail")
                {
                    throw new ArgumentNullException("", retResults[1]);
                }
                #endregion

                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Save Successfully.";
                //retResults[2] = vm.Id.ToString();
                #endregion SuccessResult
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ReceiveDAL", "ImportExcelFile", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        #endregion

        #region Plain Methods

        public string[] ReceiveInsertToMaster(ReceiveMasterVM Master, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[5];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime VDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue; //start
            string BomId = string.Empty;

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Entry Date Check

                string firstDate = "01-July-2019";
                if (Convert.ToDateTime(Master.ReceiveDateTime) < Convert.ToDateTime(firstDate))
                {
                    retResults[1] = "No Entry Allowed Before " + firstDate + "!";
                    throw new ArgumentNullException(MessageVM.saleMsgMethodNameInsert, retResults[1]);
                }

                #endregion

                #region Insert


                sqlText = "";
                sqlText += " insert into ReceiveHeaders";
                sqlText += " (";

                sqlText += " ReceiveNo,";
                sqlText += " IssueFromBOM,";

                sqlText += " ShiftId,";
                sqlText += " ReceiveDateTime,";
                sqlText += " WithToll,";
                sqlText += " TotalAmount,";
                sqlText += " TotalVATAmount,";
                sqlText += " SerialNo,";
                sqlText += " Comments,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " transactionType,";
                sqlText += " ReceiveReturnId,";
                sqlText += " ImportIDExcel,";
                sqlText += " ReferenceNo,";
                sqlText += " CustomerID,";
                sqlText += " BranchId,";
                sqlText += " Post,";

                sqlText += " FiscalYear,";
                sqlText += " AppVersion,";
                sqlText += " ReceiveNumber";
                sqlText += " )";

                sqlText += " values";
                sqlText += " (";
                sqlText += "@Master_ReceiveNo,";
                sqlText += "@IssueFromBOM,";

                sqlText += "@Master_ShiftId,";
                sqlText += "@Master_ReceiveDateTime,";
                sqlText += "@Master_WithToll,";
                sqlText += "@Master_TotalAmount,";
                sqlText += "@Master_TotalVATAmount,";
                sqlText += "@Master_SerialNo,";
                sqlText += "@Master_Comments,";
                sqlText += "@Master_CreatedBy,";
                sqlText += "@Master_CreatedOn,";
                sqlText += "@Master_LastModifiedBy,";
                sqlText += "@Master_LastModifiedOn,";
                sqlText += "@Master_transactionType,";
                sqlText += "@Master_ReturnId,";
                sqlText += "@Master_ImportId,";
                sqlText += "@Master_ReferenceNo,";
                sqlText += "@Master_CustomerID,";
                sqlText += "@Master_BranchId,";
                sqlText += "@Master_Post,";
                sqlText += "@FiscalYear,";
                sqlText += "@AppVersion,";
                sqlText += "@ReceiveNumber";
                sqlText += ")  SELECT SCOPE_IDENTITY()";


                SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                cmdInsert.Transaction = transaction;
                cmdInsert.Parameters.AddWithValueAndNullHandle("@IssueFromBOM", Master.IssueFromBOM);

                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ReceiveNo", Master.ReceiveNo);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ShiftId", Master.ShiftId);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ReceiveDateTime", Master.ReceiveDateTime);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_WithToll", Master.WithToll);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TotalAmount", Master.TotalAmount);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TotalVATAmount", Master.TotalVATAmount);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_SerialNo", Master.SerialNo);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_Comments", Master.Comments);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_CreatedBy", Master.CreatedBy);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_CreatedOn", OrdinaryVATDesktop.DateToDate(Master.CreatedOn));
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_LastModifiedBy", Master.LastModifiedBy);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_LastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_transactionType", Master.transactionType);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ReturnId", Master.ReturnId);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ImportId", Master.ImportId);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ReferenceNo", Master.ReferenceNo);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_CustomerID", Master.CustomerID);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_BranchId", Master.BranchId);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_Post", Master.Post);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@ReceiveNumber", Master.ReceiveNumber);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@FiscalYear", Master.FiscalYear);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@AppVersion", Master.AppVersion);

                transResult = Convert.ToInt32(cmdInsert.ExecuteScalar());
                retResults[4] = transResult.ToString();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }

                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSaveSuccessfully;
                retResults[2] = "" + Master.ReceiveNo;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReceiveInsertToMaster", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ReceiveInsertToDetail(ReceiveDetailVM Detail, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime VDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue; //start
            string BomId = string.Empty;

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Insert Detail Table

                #region USD calculate
                string[] usdResults = GetUSDCurrency(Detail.SubTotal);
                #endregion USD calculate

                #region Insert only DetailTable

                sqlText = "";
                sqlText += " insert into ReceiveDetails(";

                sqlText += " BOMId,";
                sqlText += " ReceiveNo,";
                sqlText += " ReceiveLineNo,";
                sqlText += " ItemNo,";
                sqlText += " Quantity,";
                sqlText += " CostPrice,";
                sqlText += " NBRPrice,";
                sqlText += " UOM,";
                sqlText += " VATRate,";
                sqlText += " VATAmount,";
                sqlText += " SubTotal,";
                sqlText += " Comments,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " SD,";
                sqlText += " SDAmount,";
                sqlText += " ReceiveDateTime,";
                sqlText += " transactionType,";
                sqlText += " ReceiveReturnId,";
                sqlText += " DiscountAmount,";
                sqlText += " DiscountedNBRPrice,";

                sqlText += " UOMPrice,";
                sqlText += " UOMQty,";
                sqlText += " UOMn,";
                sqlText += " UOMc,";
                sqlText += " VATName,";
                sqlText += " CurrencyValue,";
                sqlText += " DollerValue,";
                if (Detail.transactionType == "ReceiveReturn")
                {
                    sqlText += " ReturnTransactionType,";
                }
                sqlText += " BranchId,";
                sqlText += " Weight,";
                sqlText += " Post";
                sqlText += " )";
                sqlText += " values(	";

                sqlText += "@BOMId,";
                sqlText += "@Detail_ReceiveNo,";
                sqlText += "@Detail_ReceiveLineNo,";
                sqlText += "@Detail_ItemNo,";
                sqlText += "@Detail_Quantity,";
                sqlText += "@Detail_CostPrice,";
                sqlText += "@Detail_NBRPrice,";
                sqlText += "@Detail_UOM,";
                sqlText += "@Detail_VATRate,";
                sqlText += "@Detail_VATAmount,";
                sqlText += "@Detail_SubTotal,";
                sqlText += "@Detail_CommentsD,";
                sqlText += "@Detail_CreatedBy,";
                sqlText += "@Detail_CreatedOn,";
                sqlText += "@Detail_LastModifiedBy,";
                sqlText += "@Detail_LastModifiedOn,";
                sqlText += "@Detail_SD,";
                sqlText += "@Detail_SDAmount,";
                sqlText += "@Detail_ReceiveDateTime,";
                sqlText += "@Detail_transactionType,";
                sqlText += "@Detail_ReturnId,";
                sqlText += "@Detail_DiscountAmount,";
                sqlText += "@Detail_DiscountedNBRPrice,";
                sqlText += "@Detail_UOMPrice,";
                sqlText += "@Detail_UOMQty,";
                sqlText += "@Detail_UOMn,";
                sqlText += "@Detail_UOMc,";
                sqlText += "@Detail_VatName,";
                sqlText += "'" + usdResults[0] + "',";
                sqlText += "'" + usdResults[1] + "',";
                if (Detail.transactionType == "ReceiveReturn")
                {
                    sqlText += "@Detail_ReturnTransactionType,";
                }
                sqlText += "@Detail_BranchId,";
                sqlText += "@Detail_Weight,";
                sqlText += "@Detail_Post";
                sqlText += ")	";


                SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                cmdInsDetail.Transaction = transaction;

                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@BOMId", Detail.BOMId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReceiveNo", Detail.ReceiveNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReceiveLineNo", Detail.ReceiveLineNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ItemNo", Detail.ItemNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_Quantity", Detail.Quantity);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CostPrice", Detail.CostPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_NBRPrice", Detail.NBRPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOM", Detail.UOM);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_VATRate", Detail.VATRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_VATAmount", Detail.VATAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_SubTotal", Detail.SubTotal);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CommentsD", Detail.CommentsD);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CreatedBy", Detail.CreatedBy);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CreatedOn", OrdinaryVATDesktop.DateToDate(Detail.CreatedOn));
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_LastModifiedBy", Detail.LastModifiedBy);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_LastModifiedOn", OrdinaryVATDesktop.DateToDate(Detail.LastModifiedOn));
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_SD", Detail.SD);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_SDAmount", Detail.SDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReceiveDateTime", Detail.ReceiveDateTime);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_transactionType", Detail.transactionType);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReturnId", Detail.ReturnId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMPrice", Detail.UOMPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_DiscountAmount", Detail.DiscountAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_DiscountedNBRPrice", Detail.DiscountedNBRPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMQty", Detail.UOMQty);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMn", Detail.UOMn);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMc", Detail.UOMc);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_VatName", Detail.VatName);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReturnTransactionType", Detail.ReturnTransactionType);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_BranchId", Detail.BranchId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_Weight", Detail.Weight ?? Convert.DBNull);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_Post", Detail.Post);

                transResult = cmdInsDetail.ExecuteNonQuery();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                    MessageVM.receiveMsgSaveNotSuccessfully);
                }

                #endregion Insert only DetailTable  //done

                #endregion Insert Detail Table

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }

                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSaveSuccessfully;
                retResults[2] = "" + Detail.ReceiveNo;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReceiveInsertToDetail", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ReceiveUpdateToMaster(ReceiveMasterVM Master, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Entry Date Check

                string firstDate = "01-July-2019";
                if (Convert.ToDateTime(Master.ReceiveDateTime) < Convert.ToDateTime(firstDate))
                {
                    retResults[1] = "No Entry Allowed Before " + firstDate + "!";
                    throw new ArgumentNullException(MessageVM.saleMsgMethodNameInsert, retResults[1]);
                }

                #endregion

                #region Update

                sqlText = "";
                sqlText += " update ReceiveHeaders set  ";

                sqlText += "   ReceiveNo       =@ReceiveNo";
                sqlText += "  ,IssueFromBOM    =@IssueFromBOM";
                sqlText += "  ,ReceiveDateTime =@ReceiveDateTime";
                sqlText += "  ,TotalAmount     =@TotalAmount";
                sqlText += "  ,TotalVATAmount  =@TotalVATAmount";
                sqlText += "  ,SerialNo        =@SerialNo";
                sqlText += "  ,Comments        =@Comments";
                sqlText += "  ,LastModifiedBy  =@LastModifiedBy";
                sqlText += "  ,LastModifiedOn  =@LastModifiedOn";
                sqlText += "  ,TransactionType =@TransactionType";
                sqlText += "  ,Post            =@Post";
                sqlText += "  ,ReceiveReturnId =@ReceiveReturnId";
                //sqlText += "  ,ImportIDExcel   =@ImportIDExcel";
                sqlText += "  ,ReferenceNo     =@ReferenceNo";
                sqlText += "  ,CustomerID      =@CustomerID";
                sqlText += "  ,WithToll        =@WithToll";
                sqlText += "  ,ShiftId         =@ShiftId";
                sqlText += "  ,BranchId         =@BranchId";
                sqlText += "  where Id         =@Id";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;

                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IssueFromBOM", Master.IssueFromBOM);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveNo", Master.ReceiveNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveDateTime", OrdinaryVATDesktop.DateToDate(Master.ReceiveDateTime));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TotalAmount", Master.TotalAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TotalVATAmount", Master.TotalVATAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SerialNo", Master.SerialNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", Master.Comments);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Master.LastModifiedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TransactionType", Master.transactionType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Post", "N");
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveReturnId", Master.ReturnId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReferenceNo", Master.ReferenceNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerID", Master.CustomerID);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@WithToll", Master.WithToll);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ShiftId", Master.ShiftId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@BranchId", Master.BranchId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Id", Master.Id);


                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header

                #region Commit


                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Master.Id;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReceiveUpdateToMaster", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ReceiveUpdateToDetail(ReceiveDetailVM Detail, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Update

                sqlText = "";
                sqlText += " update ReceiveDetails set  ";

                sqlText += "  ReceiveNo            =@ReceiveNo";
                sqlText += " ,ReceiveLineNo        =@ReceiveLineNo";
                sqlText += " ,ItemNo               =@ItemNo";
                sqlText += " ,Quantity             =@Quantity";
                sqlText += " ,CostPrice            =@CostPrice";
                sqlText += " ,NBRPrice             =@NBRPrice";
                sqlText += " ,UOM                  =@UOM";
                sqlText += " ,VATRate              =@VATRate";
                sqlText += " ,VATAmount            =@VATAmount";
                sqlText += " ,SubTotal             =@SubTotal";
                sqlText += " ,Comments             =@Comments";
                sqlText += " ,CreatedBy            =@CreatedBy";
                sqlText += " ,CreatedOn            =@CreatedOn";
                sqlText += " ,LastModifiedBy       =@LastModifiedBy";
                sqlText += " ,LastModifiedOn       =@LastModifiedOn";
                sqlText += " ,SD                   =@SD";
                sqlText += " ,SDAmount             =@SDAmount";
                sqlText += " ,TransactionType      =@TransactionType";
                sqlText += " ,ReceiveDateTime      =@ReceiveDateTime";
                sqlText += " ,Post                 =@Post";
                sqlText += " ,VATName              =@VATName";
                sqlText += " ,ReceiveReturnId      =@ReceiveReturnId";
                sqlText += " ,DiscountAmount       =@DiscountAmount";
                sqlText += " ,DiscountedNBRPrice   =@DiscountedNBRPrice";
                sqlText += " ,BOMId                =@BOMId";
                sqlText += " ,UOMQty               =@UOMQty";
                sqlText += " ,UOMPrice             =@UOMPrice";
                sqlText += " ,UOMc                 =@UOMc";
                sqlText += " ,UOMn                 =@UOMn";
                sqlText += " ,CurrencyValue        =@CurrencyValue";
                sqlText += " ,DollerValue          =@DollerValue";
                sqlText += " ,BranchId          =@BranchId";
                sqlText += " ,ReturnTransactionType=@ReturnTransactionType";
                sqlText += " ,Weight=@Weight";
                sqlText += " where Id              =@Id";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;

                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveNo", Detail.ReceiveNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveLineNo", Detail.ReceiveLineNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNo", Detail.ItemNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Quantity", Detail.Quantity);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CostPrice", Detail.CostPrice);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@NBRPrice", Detail.NBRPrice);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOM", Detail.UOM);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRate", Detail.VATRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATAmount", Detail.VATAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SubTotal", Detail.SubTotal);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", Detail.CommentsD);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", Detail.CreatedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", OrdinaryVATDesktop.DateToDate(Detail.CreatedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Detail.LastModifiedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", OrdinaryVATDesktop.DateToDate(Detail.LastModifiedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SD", Detail.SD);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SDAmount", Detail.SDAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TransactionType", Detail.transactionType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveDateTime", Detail.ReceiveDateTime);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Post", "N");
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATName", Detail.VatName);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveReturnId", Detail.ReturnId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@BOMId", Detail.BOMId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@DiscountedNBRPrice", Detail.DiscountedNBRPrice);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@DiscountAmount", Detail.DiscountAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMQty", Detail.UOMQty);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMPrice", Detail.UOMPrice);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMc", Detail.UOMc);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMn", Detail.UOMn);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@DollerValue", Detail.DollerValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CurrencyValue", Detail.CurrencyValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@BranchId", Detail.BranchId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReturnTransactionType", Detail.ReturnTransactionType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Weight", Detail.Weight);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Id", Detail.Id);

                transResult = (int)cmdUpdate.ExecuteNonQuery();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header

                #region Commit


                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Detail.Id;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReceiveUpdateToDetail", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ReceiveAllPost(PostVM Master, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Update Master

                sqlText = "";
                sqlText += " update ReceiveHeaders set  ";
                sqlText += " LastModifiedBy             = @MasterLastModifiedBy,";
                sqlText += " LastModifiedOn             = @MasterLastModifiedOn,";
                sqlText += " Post                       = @MasterPost";
                sqlText += " where  ReceiveNo   = @MasterPurchaseInvoiceNo ";

                sqlText += " update ReceiveDetails set ";
                sqlText += " LastModifiedBy= @MasterLastModifiedBy,";
                sqlText += " LastModifiedOn= @MasterLastModifiedOn,";
                sqlText += " Post=@MasterPost ";
                sqlText += " where  ReceiveNo =@MasterPurchaseInvoiceNo ";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterPurchaseInvoiceNo", Master.Code);

                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion


                #region Commit


                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "";
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReceiveDAL", "ReceiveAllPost", ex.ToString() + "\n" + sqlText);

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        #endregion

        #region Basic Methods

        //currConn to VcurrConn 25-Aug-2020
        public string[] ReceiveInsert(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, List<TrackingVM> Trackings, SqlTransaction Vtransaction, SqlConnection VcurrConn, int BranchId = 0, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            var Id = "";
            PurchaseDAL purDal = new PurchaseDAL();
            IssueDAL issDal = new IssueDAL();
            SaleDAL salDal = new SaleDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;


            int transResult = 0;
            string sqlText = "";
            string newIDCreate = "";

            int IDExist = 0;
            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime VDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue; //start
            bool issueAutoPost = false;

            #endregion Initializ

            #region Try
            try
            {

                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Please Check Invoice Data and Time");

                }

                string realTimeEntry = commonDal.settings("Purchase", "EntryRealTime", currConn, transaction);
                if (realTimeEntry == "N")
                {
                    Master.ReceiveDateTime = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd 00:00:00");

                }

                #endregion Validation for Header

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                CommonDAL commonDAl = new CommonDAL();

                string companyCode = commonDAl.settings("CompanyCode", "Code", currConn, transaction);

                #region Find Month Lock

                string PeriodName = Convert.ToDateTime(Master.ReceiveDateTime).ToString("MMMM-yyyy");
                string[] vValues = { PeriodName };
                string[] vFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, vFields, vValues).FirstOrDefault();

                if (varFiscalYearVM == null)
                {
                    throw new Exception(PeriodName + ": This Fiscal Period is not Exist!");

                }

                if (varFiscalYearVM.VATReturnPost == "Y")
                {
                    throw new Exception(PeriodName + ": VAT Return (9.1) already submitted for this month!");

                }

                #endregion Find Month Lock

                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 1");




                #region Fiscal Year Check

                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                #region Find Transaction Exist

                sqlText = "";
                sqlText = sqlText + @"
select COUNT(ReceiveNo) from ReceiveHeaders
WHERE ReceiveNo=@MasterReceiveNo ";
                SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                cmdExistTran.Transaction = transaction;
                cmdExistTran.Parameters.AddWithValueAndNullHandle("@MasterReceiveNo", Master.ReceiveNo);

                IDExist = (int)cmdExistTran.ExecuteScalar();

                if (IDExist > 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgFindExistID);
                }

                #endregion Find Transaction Exist

                #region Purchase ID Create
                if (string.IsNullOrEmpty(Master.transactionType)) // start
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgTransactionNotDeclared);
                }

                var fiscalYear = "";
                var latestId = "";

                #region Purchase ID Create For Other

                //CommonDAL commonDal = new CommonDAL();

                if (Master.transactionType == "Other" || Master.transactionType == "Tender")
                {
                    newIDCreate = commonDal.TransactionCode("Receive", "Other", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var resultCode = commonDal.GetCurrentCode("Receive", "Other", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];

                }
                else if (Master.transactionType == "WIP")
                {
                    newIDCreate = commonDal.TransactionCode("Receive", "WIP", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var resultCode = commonDal.GetCurrentCode("Receive", "WIP", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }
                else if (Master.transactionType == "TollFinishReceive")
                {
                    newIDCreate = commonDal.TransactionCode("TollFinishReceive", "TollFinishReceive", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var resultCode = commonDal.GetCurrentCode("TollFinishReceive", "TollFinishReceive", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }
                else if (Master.transactionType == "TollFinishReceiveWithoutBOM")
                {
                    newIDCreate = commonDal.TransactionCode("TollFGReceiveWithoutBOM", "TollFGReceiveWithoutBOM", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var resultCode = commonDal.GetCurrentCode("TollFGReceiveWithoutBOM", "TollFGReceiveWithoutBOM", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }
                else if (Master.transactionType == "PackageProduction")
                {
                    newIDCreate = commonDal.TransactionCode("Receive", "Package", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var resultCode = commonDal.GetCurrentCode("Receive", "Package", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }
                else if (Master.transactionType == "ReceiveReturn")
                {
                    newIDCreate = commonDal.TransactionCode("Receive", "ReceiveReturn", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);


                    var resultCode = commonDal.GetCurrentCode("Receive", "ReceiveReturn", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction, connVM);

                    var newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];


                    #region Find Receive Return Date
                    //OrdinaryVATDesktop.IsACIFGReturnFromSales(companyCode, Master.transactionType) &&
                    if (string.IsNullOrEmpty(Master.ReturnId) || Master.ReturnId == "0")
                    {
                        previousReceiveDate = Convert.ToDateTime(Master.ReceiveDateTime);
                    }
                    else
                    {

                        sqlText = "";
                        sqlText = sqlText + "select ReceiveDateTime from ReceiveHeaders" +
                                  " WHERE ReceiveNo=@MasterReturnId ";
                        SqlCommand cmdFindPDate = new SqlCommand(sqlText, currConn);
                        cmdFindPDate.Transaction = transaction;
                        cmdFindPDate.Parameters.AddWithValue("@MasterReturnId", Master.ReturnId);
                        if (cmdFindPDate.ExecuteScalar() == null)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgFindExistID);
                        }
                        else
                        {
                            previousReceiveDate = (DateTime)cmdFindPDate.ExecuteScalar();
                        }
                    }


                    #endregion  Find Receive Return Date
                }


                #region checkId and FiscalYear

                sqlText = @"select count(ReceiveNumber) 
from ReceiveHeaders 
where ReceiveNumber = @ReceiveNumber and FiscalYear = @FiscalYear and TransactionType = @transactionType and BranchId =@BranchId";

                var sqlCmd = new SqlCommand(sqlText, currConn, transaction);

                sqlCmd.Parameters.AddWithValue("@ReceiveNumber", latestId);
                sqlCmd.Parameters.AddWithValue("@FiscalYear", fiscalYear);
                sqlCmd.Parameters.AddWithValue("@transactionType", Master.transactionType);
                sqlCmd.Parameters.AddWithValue("@BranchId", Master.BranchId);

                var count1 = (int)sqlCmd.ExecuteScalar();

                if (count1 > 0)
                {
                    FileLogger.Log("SaleDAL", "Insert", "ReceiveNumber " + newIDCreate + " Already Exists");
                    throw new Exception("Sales Id " + newIDCreate + " Already Exists");
                }

                #endregion


                #region Check Existing Id

                sqlText = @"select COUNT(ReceiveNo) from ReceiveHeaders 
                 WHERE ReceiveNo=@ReceiveNo";

                var cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.AddWithValue("@ReceiveNo", newIDCreate);

                var count = (int)cmd.ExecuteScalar();

                if (count > 0)
                {
                    FileLogger.Log("ReceiveDAL", "Insert", "Receive Id " + newIDCreate + " Already Exists");
                    throw new Exception("Receive Id " + newIDCreate + " Already Exists");
                }

                #endregion
                #endregion Purchase ID Create For Other


                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 2");

                //Adding Receive Date 00.00.00
                Master.ReceiveDateTime = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd 00:00:00");

                #endregion Purchase ID Create Not Complete

                #region ID generated completed,Insert new Information in Header
                ReceiveMasterVM rmVM = new ReceiveMasterVM();
                Master.ReceiveNo = newIDCreate;
                rmVM.IssueFromBOM = Master.IssueFromBOM;
                rmVM.ReceiveNo = Master.ReceiveNo;
                rmVM.ShiftId = Master.ShiftId;
                rmVM.ReceiveDateTime = Master.ReceiveDateTime;
                rmVM.WithToll = Master.WithToll;
                rmVM.TotalAmount = Master.TotalAmount;
                rmVM.TotalVATAmount = Master.TotalVATAmount;
                rmVM.SerialNo = Master.SerialNo;
                rmVM.Comments = Master.Comments;
                rmVM.CreatedBy = Master.CreatedBy;
                rmVM.CreatedOn = Master.CreatedOn;
                rmVM.LastModifiedBy = Master.LastModifiedBy;
                rmVM.LastModifiedOn = Master.LastModifiedOn;
                rmVM.transactionType = Master.transactionType;
                rmVM.ReturnId = Master.ReturnId;
                rmVM.ImportId = Master.ImportId;
                rmVM.ReferenceNo = Master.ReferenceNo;
                rmVM.CustomerID = Master.CustomerID;
                rmVM.Post = Master.Post;
                rmVM.ReceiveNumber = latestId;
                rmVM.FiscalYear = fiscalYear;
                rmVM.AppVersion = Master.AppVersion;

                rmVM.BranchId = Master.BranchId;
                retResults = ReceiveInsertToMaster(rmVM, currConn, transaction, connVM);

                Id = retResults[4];

                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                }

                #endregion ID generated completed,Insert new Information in Header


                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 3");



                #region Insert into Details(Insert complete in Header)

                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }
                retResults = ReceiveInsert2(Master, Details, Trackings, transaction, currConn, connVM, UserId);


                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 4");


                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                }
                #endregion Validation for Detail

                #endregion Insert into Details(Insert complete in Header)

                #region Update PeriodId

                sqlText = "";
                sqlText += @"

update  ReceiveHeaders                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDateTime)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDateTime)),6)
WHERE ReceiveNo = @ReceiveNo

update  ReceiveDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDateTime)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDateTime)),6)
where ReceiveNo = @ReceiveNo



UPDATE IssueHeaders 
SET PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(IssueDateTime)) +  CONVERT(VARCHAR(4),YEAR(IssueDateTime)),6)
WHERE IssueNo = @ReceiveNo


update  IssueDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(IssueDateTime)) +  CONVERT(VARCHAR(4),YEAR(IssueDateTime)),6)
WHERE IssueNo = @ReceiveNo

";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn, transaction);
                cmdUpdate.Parameters.AddWithValue("@ReceiveNo", Master.ReceiveNo);

                transResult = cmdUpdate.ExecuteNonQuery();
                #endregion

                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 5");


                #region Tracking
                if (Trackings != null && Trackings.Count > 0)
                {
                    for (int i = 0; i < Trackings.Count; i++)
                    {
                        if (Master.transactionType == "ReceiveReturn")
                        {
                            if (Trackings[i].ReturnReceive == "Y")
                            {
                                Trackings[i].ReturnReceiveID = Master.ReceiveNo;
                                Trackings[i].ReturnType = Master.transactionType;
                            }

                        }
                        else if (Trackings[i].IsReceive == "Y")
                        {
                            Trackings[i].ReceiveNo = Master.ReceiveNo;
                            Trackings[i].ReceiveDate = Master.ReceiveDateTime;
                            //Trackings[i].Post = Master.Post;
                        }
                    }
                    string trackingUpdate = string.Empty;
                    TrackingDAL trackingDal = new TrackingDAL();
                    trackingUpdate = trackingDal.TrackingUpdate(Trackings, transaction, currConn);

                    if (trackingUpdate == "Fail")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Tracking Information not added.");
                    }
                }
                #endregion

                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 6");



                #region Adjustment Update

                //ResultVM resultVm = UpdateAdjustmentValue(Master.ReceiveNo, currConn, transaction);

                #endregion

                #region Master Setting Update

                commonDal.UpdateProcessFlag(Master.ReceiveNo, Master.ReceiveDateTime, currConn, transaction);

                #endregion


                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                #region SuccessResult
                retResults = new string[5];
                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSaveSuccessfully;
                retResults[2] = "" + Master.ReceiveNo;
                retResults[3] = "N";
                retResults[4] = Id;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("ReceiveDAL", "ReceiveInsert", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] ReceiveInsert2(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, List<TrackingVM> Trackings, SqlTransaction Vtransaction, SqlConnection VcurrConn, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            var Id = "";
            PurchaseDAL purDal = new PurchaseDAL();
            IssueDAL issDal = new IssueDAL();
            SaleDAL salDal = new SaleDAL();

            //SqlConnection currConn = null;
            //SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime VDate = DateTime.MinValue;
            string receiveDate = "";
            DateTime BOMDate = DateTime.MinValue; //start
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";
            string IssueFromBOM = "N";
            bool NegStockAllow = false;


            bool IsAutoFrom4_3 = false;

            #endregion Initializ

            #region Try
            try
            {

                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Please Check Invoice Data and Time");

                }

                #endregion Validation for Header

                #region Settings Value

                CommonDAL commonDal = new CommonDAL();
                int IssuePlaceQty = 8;
                int IssuePlaceAmt = 8;

                string vIssueAutoPost = "";
                vIssueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost", VcurrConn, Vtransaction, connVM);
                IssueFromBOM = commonDal.settings("IssueFromBOM", "IssueFromBOM", VcurrConn, Vtransaction, connVM);

                string WIPBOMIssue = "";
                WIPBOMIssue = commonDal.settings("Receive", "WIPBOMIssue", VcurrConn, Vtransaction, connVM);

                if (string.IsNullOrEmpty(vIssueAutoPost))
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                }

                issueAutoPost = Convert.ToBoolean(vIssueAutoPost == "Y" ? true : false);

                if (issueAutoPost)
                {

                    issueAutoPostValue = "Y";
                }




                #endregion

                #region Fiscal Year Check

                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");

                #endregion Fiscal Year CHECK

                #region Check Point

                if (string.IsNullOrEmpty(Master.transactionType))
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgTransactionNotDeclared);
                }

                #endregion

                #region if Transection not Other Insert Issue /Receive
                #region Auto Issue Check
                var bomId = string.Join(",", Details.ToList().Select(x => x.BOMId));
                List<string> ids = bomId.Split(',').ToList();

                var BOMS = new BOMDAL().SelectBOMList(ids, null, null, VcurrConn, Vtransaction);
                #endregion
                BOMNBRVM vm = new BOMNBRVM();

                #region Receive For BOM
                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 3.5");

                if (BOMS.Any(x => x.AutoIssue == "Y") && IssueFromBOM == "Y")
                {

                    string vNegStockAllow = string.Empty;
                    vNegStockAllow = commonDal.settings("Issue", "NegStockAllow", VcurrConn, Vtransaction);
                    NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                    if (string.IsNullOrEmpty(vNegStockAllow))
                    {
                        throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                    }


                    if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn"
                        || Master.transactionType == "WIP" || Master.transactionType == "Tender"
                        || Master.transactionType == "TollFinishReceive")
                    {
                        #region Insert to Issue Header
                        IssueMasterVM issumVM = new IssueMasterVM();
                        issumVM.IssueNo = Master.ReceiveNo;
                        issumVM.ShiftId = Master.ShiftId;
                        issumVM.IssueDateTime = Master.ReceiveDateTime;
                        issumVM.TotalVATAmount = 0;
                        issumVM.TotalAmount = 0;
                        issumVM.SerialNo = Master.SerialNo;
                        issumVM.Comments = Master.Comments;
                        issumVM.CreatedBy = Master.CreatedBy;
                        issumVM.CreatedOn = Master.CreatedOn;
                        issumVM.LastModifiedBy = Master.LastModifiedBy;
                        issumVM.LastModifiedOn = Master.LastModifiedOn;
                        issumVM.ReceiveNo = Master.ReceiveNo;
                        issumVM.transactionType = Master.transactionType;
                        issumVM.ReturnId = Master.ReturnId;
                        issumVM.Post = issueAutoPostValue;
                        issumVM.BranchId = Master.BranchId;

                        if (IsAutoFrom4_3 == false)
                        {
                            retResults = issDal.IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);
                        }
                        else
                        {
                            retResults = new IssueBOMDAL().IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);

                        }


                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                        }

                        #endregion Insert to Issue Header

                    }
                    else if (Master.transactionType == "PackageProduction")// insert into sale header
                    {
                        #region Insert to Issue Header

                        IssueMasterVM issumVM = new IssueMasterVM();
                        issumVM.IssueNo = Master.ReceiveNo;
                        issumVM.ShiftId = Master.ShiftId;
                        issumVM.IssueDateTime = Master.ReceiveDateTime;
                        issumVM.TotalVATAmount = 0;
                        issumVM.TotalAmount = 0;
                        issumVM.SerialNo = Master.SerialNo;
                        issumVM.Comments = Master.Comments;
                        issumVM.CreatedBy = Master.CreatedBy;
                        issumVM.CreatedOn = Master.CreatedOn;
                        issumVM.LastModifiedBy = Master.LastModifiedBy;
                        issumVM.LastModifiedOn = Master.LastModifiedOn;
                        issumVM.ReceiveNo = Master.ReceiveNo;
                        issumVM.transactionType = Master.transactionType;
                        issumVM.ReturnId = Master.ReturnId;
                        issumVM.Post = issueAutoPostValue;
                        issumVM.BranchId = Master.BranchId;

                        if (IsAutoFrom4_3 == false)
                        {

                            retResults = issDal.IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);
                        }
                        else
                        {
                            retResults = new IssueBOMDAL().IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);
                        }

                        if (retResults[0] != "Success")
                        {

                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                        }

                        #endregion Insert to Issue Header

                        #region Insert to SalesInvoiceHeaders Header
                        SaleMasterVM smVM = new SaleMasterVM();
                        smVM.SalesInvoiceNo = Master.ReceiveNo;
                        smVM.ShiftId = Master.ShiftId;
                        smVM.CustomerID = "0";
                        smVM.DeliveryAddress1 = "NA";
                        smVM.DeliveryAddress2 = "NA";
                        smVM.DeliveryAddress3 = "NA";
                        smVM.VehicleID = "NA";
                        smVM.InvoiceDateTime = Master.ReceiveDateTime;
                        smVM.TotalAmount = Master.TotalAmount;
                        smVM.TotalVATAmount = Master.TotalVATAmount;
                        smVM.SerialNo = Master.SerialNo;
                        smVM.Comments = Master.Comments;
                        smVM.CreatedBy = Master.CreatedBy;
                        smVM.CreatedOn = Master.CreatedOn;
                        smVM.LastModifiedBy = Master.LastModifiedBy;
                        smVM.LastModifiedOn = Master.LastModifiedOn;
                        smVM.SaleType = "New";
                        smVM.PreviousSalesInvoiceNo = Master.ReturnId;
                        smVM.Trading = "N";
                        smVM.IsPrint = "N";
                        smVM.TenderId = "0";
                        smVM.TransactionType = Master.transactionType;
                        smVM.DeliveryDate = Master.ReceiveDateTime;
                        smVM.ReturnId = Master.ReturnId;
                        smVM.CurrencyID = "260";
                        smVM.CurrencyRateFromBDT = 0;
                        smVM.Post = Master.Post;
                        smVM.BranchId = Master.BranchId;
                        retResults = salDal.SalesInsertToMaster(smVM, VcurrConn, Vtransaction);

                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                        }


                        #endregion Insert to SalesInvoiceHeaders Header
                    }

                }

                #endregion Receive For BOM //////IssueBOM
                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 3.6");

                #endregion if Transection not Other Insert Issue /Receive

                #region Insert into Details(Insert complete in Header)

                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }


                #endregion Validation for Detail



                CurrencyConversionDAL currencyConversionDal = new CurrencyConversionDAL();


                CurrencyConversionVM currencyVM = new CurrencyConversionVM();
                currencyVM.CurrencyCodeF = "USD";
                currencyVM.CurrencyCodeT = "BDT";
                currencyVM.ActiveStatus = "Y";
                currencyVM.ConvertionDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                DataTable CurrencyConversionResult = currencyConversionDal.ConvRate(currencyVM, null, null);


                #region Insert Detail Table

                foreach (var Item in Details.ToList())
                {

                    #region USD calculate

                    //string[] usdResults = GetUSDCurrency(Item.SubTotal);

                    #endregion USD calculate

                    #region Insert only DetailTable

                    ReceiveDetailVM rdVM = new ReceiveDetailVM();
                    rdVM.ReceiveNo = Master.ReceiveNo;
                    rdVM.ReceiveLineNo = Item.ReceiveLineNo;
                    rdVM.ItemNo = Item.ItemNo;
                    rdVM.Quantity = Item.Quantity;
                    rdVM.CostPrice = Item.CostPrice;
                    rdVM.NBRPrice = Item.NBRPrice;
                    rdVM.UOM = Item.UOM;
                    rdVM.VATRate = Item.VATRate;
                    rdVM.VATAmount = Item.VATAmount;
                    rdVM.SubTotal = Item.SubTotal;
                    rdVM.CommentsD = Item.CommentsD;
                    rdVM.CreatedBy = Master.CreatedBy;
                    rdVM.CreatedOn = Master.CreatedOn;
                    rdVM.LastModifiedBy = Master.LastModifiedBy;
                    rdVM.LastModifiedOn = Master.LastModifiedOn;
                    rdVM.SD = Item.SD;
                    rdVM.SDAmount = Item.SDAmount;
                    rdVM.ReceiveDateTime = Master.ReceiveDateTime;
                    rdVM.transactionType = Master.transactionType;
                    rdVM.ReturnId = Master.ReturnId;
                    rdVM.BOMId = Item.BOMId;
                    rdVM.VatName = Item.VatName;
                    rdVM.UOMPrice = Item.UOMPrice;
                    rdVM.UOMQty = Item.UOMQty;
                    rdVM.UOMn = Item.UOMn;
                    rdVM.UOMc = Item.UOMc;
                    rdVM.Weight = Item.Weight;

                    if (CurrencyConversionResult != null)
                    {
                        decimal currencyRate = Convert.ToDecimal(CurrencyConversionResult.Rows[0]["CurrencyRate"].ToString());
                        decimal dollerValue = Item.SubTotal / currencyRate;
                        retResults[1] = dollerValue.ToString();
                        rdVM.DollerValue = dollerValue;
                    }

                    rdVM.CurrencyValue = Item.SubTotal;

                    if (Master.transactionType == "ReceiveReturn")
                    {
                        rdVM.ReturnTransactionType = Item.ReturnTransactionType;
                    }

                    rdVM.Post = Master.Post;
                    rdVM.BranchId = Master.BranchId;

                    retResults = ReceiveInsertToDetail(rdVM, VcurrConn, Vtransaction, connVM);

                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                    }
                    #endregion Insert only DetailTable  //done

                    if (Master.transactionType == "ReceiveReturn")
                    {
                        receiveDate = previousReceiveDate.Date.ToString("yyyy/MM/dd");
                    }
                    else
                    {
                        receiveDate = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd HH:mm:ss");
                    }

                    if (Master.transactionType == "ReceiveReturn" && Item.ReturnTransactionType == "TollReceive")
                    {
                        #region TollReceive

                        ProductDAL productDal = new ProductDAL();
                        DataTable TollItemInfo = productDal.SearchRawItemNo(Master.ReturnId);

                        string TollItem;
                        decimal TollUnitCost = 0;

                        TollItem = TollItemInfo.Rows[0]["ItemNo"].ToString();
                        TollUnitCost = Convert.ToDecimal(TollItemInfo.Rows[0]["CostPrice"].ToString());

                        #region Insert to Issue 16 out
                        IssueDetailVM isdVM = new IssueDetailVM();

                        isdVM.VATName = Item.VatName;
                        isdVM.BOMId = Item.BOMId;

                        isdVM.IssueNo = Master.ReceiveNo;
                        isdVM.IssueLineNo = "10";
                        isdVM.ItemNo = TollItem;
                        isdVM.Quantity = Item.Quantity;
                        isdVM.NBRPrice = 0;
                        isdVM.CostPrice = TollUnitCost;
                        isdVM.UOM = Item.UOM;
                        isdVM.VATRate = 0;
                        isdVM.VATAmount = 0;
                        isdVM.SubTotal = TollUnitCost;
                        isdVM.CreatedBy = Master.CreatedBy;
                        isdVM.CreatedOn = Master.CreatedOn;
                        isdVM.LastModifiedBy = Master.LastModifiedBy;
                        isdVM.LastModifiedOn = Master.LastModifiedOn;
                        isdVM.ReceiveNo = Master.ReceiveNo;
                        isdVM.IssueDateTime = Master.ReceiveDateTime;
                        isdVM.SD = 0;
                        isdVM.SDAmount = 0;
                        isdVM.Wastage = 0;
                        isdVM.BOMDate = "1900/01/01";
                        isdVM.FinishItemNo = "0";
                        isdVM.transactionType = "TollReceiveReturn";
                        isdVM.IssueReturnId = Master.ReturnId;
                        isdVM.UOMQty = Item.UOMQty;
                        isdVM.UOMPrice = Item.UOMPrice;
                        isdVM.UOMc = Item.UOMc;
                        isdVM.UOMn = Item.UOMn;
                        isdVM.UOMWastage = 0;
                        isdVM.Post = Master.Post;
                        isdVM.BranchId = Master.BranchId;
                        retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }




                        #endregion Insert to Issue

                        #endregion TollReceive
                    }


                    var model = BOMS.FirstOrDefault(x => x.BOMId == Item.BOMId.ToString());

                    #region From BOM

                    if (model != null && model.AutoIssue == "Y" && IssueFromBOM == "Y")
                    {

                        #region BOM Date

                        BOMDate = DateTime.MinValue;

                        if (Item.BOMId > 0)
                        {
                            BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                            vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                            BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);
                        }

                        #endregion

                        if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" || Master.transactionType == "WIP")
                        {
                            #region Find Raw Item From BOM  and update Stock

                            #region Get Data

                            sqlText = "";
                            sqlText += @" 
SELECT  b.RawItemNo
,b.UseQuantity
,convert (date,b.EffectDate,120)EffectDate
,b.UOMn 
,b.WastageQuantity
,b.UOM
,b.UOMUQty
,b.UOMWQty
,b.TransactionType 
,ISNULL(b.WIPBOMId,0) WIPBOMId
,ISNULL(b.BOMId,0) BOMId
,0 WIPQuantity
FROM BOMRaws b  
WHERE 1=1
AND BOMId=@BOMId
and isnull(IssueOnProduction,'Y')='Y'
and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='wip' or rawitemtype='finish' or rawitemtype='export') 
";


                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                            //var Name = Item.ItemName;
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            #endregion

                            #region Detail Insert

                            ResultVM rVM = new ResultVM();

                            rVM = BOM_DetailInsert(dataTable, Master, Details, Item, VcurrConn, Vtransaction, true, UserId);

                            #endregion

                            if (WIPBOMIssue == "Y")
                            {
                                #region WIP Issue

                                #region Get Data

                                #region Get WIP Items

                                sqlText = "";
                                sqlText = @"

select RawItemNo WIPItemNo 
from BOMRaws
where 1=1 and BOMId=@BOMId and RawItemType='WIP'
";
                                SqlCommand cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);
                                cmd.Parameters.AddWithValue("@BOMId", Item.BOMId);

                                SqlDataAdapter da = new SqlDataAdapter(cmd);
                                DataTable dtWIPItem = new DataTable();

                                da.Fill(dtWIPItem);

                                #endregion

                                #region GET WIP Detail Data

                                string BOMIds = "";

                                if (dtWIPItem != null && dtWIPItem.Rows.Count > 0)
                                {
                                    #region FIND WIP Latest BOMId

                                    sqlText = "";

                                    sqlText = @"
----declare @WIPItemNo as varchar(100)='490'

select top 1 BOMId from BOMRaws
where 1=1 and FinishItemNo=@WIPItemNo
and EffectDate<=@EffectDate
and post='Y'
order by EffectDate desc
";


                                    foreach (DataRow dr in dtWIPItem.Rows)
                                    {

                                        cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);
                                        cmd.Parameters.AddWithValue("@WIPItemNo", dr["WIPItemNo"].ToString());
                                        cmd.Parameters.AddWithValue("@EffectDate", Master.ReceiveDateTime);

                                        da = new SqlDataAdapter(cmd);

                                        DataTable dt = new DataTable();
                                        da.Fill(dt);

                                        if (dt != null && dt.Rows.Count > 0)
                                        {
                                            BOMIds = BOMIds + dt.Rows[0]["BOMId"].ToString() + ",";
                                        }
                                    }

                                    BOMIds = BOMIds.Trim(',');

                                    #endregion
                                }
                                else
                                {
                                    continue;
                                }

                                DataTable dtWIPDetailItem = new DataTable();

                                if (!string.IsNullOrWhiteSpace(BOMIds))
                                {
                                    sqlText = "";
                                    sqlText = @"

SELECT  
 bmr.RawItemNo
,bmr.UseQuantity
,convert (date,bmr.EffectDate,120)EffectDate
,bmr.UOMn 
,bmr.WastageQuantity
,bmr.UOM
,bmr.UOMUQty
,bmr.UOMWQty
,bmr.TransactionType 
,ISNULL(bmr.WIPBOMId,0) WIPBOMId
,bmr.BOMId
,ISNULL(refBOM.WIPQuantity,0) WIPQuantity
FROM BOMRaws bmr  
LEFT OUTER JOIN 
(
SELECT WIPBOMId, TotalQuantity WIPQuantity FROM BOMRaws
WHERE BOMId=@BOMId
) as refBOM on bmr.BOMId=refBOM.WIPBOMId
WHERE 1=1 
AND BOMId IN(" + BOMIds + @")
and isnull(IssueOnProduction,'Y')='Y' 
and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='wip' or rawitemtype='finish' or rawitemtype='export') 

";
                                    cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);
                                    da = new SqlDataAdapter(cmd);
                                    cmd.Parameters.AddWithValue("@BOMId", Item.BOMId);
                                    dtWIPDetailItem = new DataTable();
                                    da.Fill(dtWIPDetailItem);
                                }
                                else
                                {
                                    continue;
                                }

                                #endregion

                                #endregion

                                #region Insert WIP Detail Data

                                if (dtWIPDetailItem != null && dtWIPDetailItem.Rows.Count > 0)
                                {
                                    rVM = BOM_DetailInsert(dtWIPDetailItem, Master, Details, Item, VcurrConn, Vtransaction, true, UserId);
                                }

                                #endregion

                                #endregion
                            }

                            #region Comments Nov-19-2020

                            if (false)
                            {

                                #region Detail Insert

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                   "There is no Item for Auto Consumption for the Item Name (" + Item.ItemName + ") and Item NO (" + Item.ItemNo + ") in price declaration.");
                                }
                                else
                                {
                                    decimal vQuantity = 0;
                                    decimal vWastage = 0;
                                    string rwUom = "";
                                    decimal vConvertionRate = 0;
                                    decimal AvgRate = 0;

                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {

                                        #region Debug

                                        if (BRItem["RawItemNo"].ToString() == "490")
                                        {

                                        }

                                        #endregion

                                        #region Declare

                                        decimal v1Quantity = 0;
                                        string v1RawItemNo = "";
                                        decimal v1CostPrice = 0;
                                        string v1UOM = "";
                                        decimal v1SubTotal = 0;
                                        decimal v1Wastage = 0;
                                        DateTime v1BOMDate = DateTime.Now.Date;
                                        string v1FinishItemNo = "";

                                        decimal v1UOMQty = 0;
                                        decimal v1UOMPrice = 0;
                                        decimal v1UOMc = 0;
                                        string v1UOMn = "";
                                        decimal v1UOMWastage = 0;
                                        string vTransactionType = "";

                                        #endregion Declare

                                        #region Update Item Qty

                                        #region Find Quantity From Products

                                        DataTable priceData = _ProductDAL.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false, true, true, true, connVM, UserId);


                                        decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                        decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                        if (quantity > 0)
                                        {
                                            AvgRate = amount / quantity;
                                        }
                                        else
                                        {
                                            AvgRate = 0;
                                        }


                                        vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                        vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                        #region Issue Settings

                                        AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                        vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                        vWastage = FormatingNumeric(vWastage, IssuePlaceQty);

                                        #endregion

                                        rwUom = BRItem["Uom"].ToString();

                                        string rwMajorUom = BRItem["Uomn"].ToString();

                                        if (string.IsNullOrEmpty(rwUom))
                                        {
                                            throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                        }

                                        UOMDAL uomdal = new UOMDAL();

                                        vConvertionRate = uomdal.GetConvertionRate(rwMajorUom, rwUom, "Y", VcurrConn, Vtransaction); //uomc

                                        #region valueAssign

                                        v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                        v1Wastage = (vWastage) * Item.UOMQty;
                                        //////v1BOMId = BomId;
                                        v1RawItemNo = BRItem["RawItemNo"].ToString();
                                        v1UOM = BRItem["UOM"].ToString();
                                        v1CostPrice = AvgRate * vConvertionRate;
                                        v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                        v1UOMPrice = AvgRate;
                                        v1UOMn = BRItem["UOMn"].ToString();
                                        v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                        v1FinishItemNo = Item.ItemNo;
                                        v1UOMc = vConvertionRate;
                                        v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                        v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                        vTransactionType = BRItem["TransactionType"].ToString();
                                        #endregion valueAssign

                                        #endregion

                                        #region Find Quantity From Transaction

                                        IssueDetailVM isdVM = new IssueDetailVM();
                                        isdVM.IssueNo = Master.ReceiveNo;
                                        isdVM.IssueLineNo = Item.ReceiveLineNo;
                                        isdVM.ItemNo = v1RawItemNo;
                                        isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                        isdVM.NBRPrice = AvgRate;
                                        isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                        isdVM.UOM = v1UOM;
                                        isdVM.VATRate = 0;
                                        isdVM.VATAmount = 0;
                                        isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                        isdVM.CommentsD = Item.CommentsD;
                                        isdVM.CreatedBy = Master.CreatedBy;
                                        isdVM.CreatedOn = Master.CreatedOn;
                                        isdVM.LastModifiedBy = Master.LastModifiedBy;
                                        isdVM.LastModifiedOn = Master.LastModifiedOn;
                                        isdVM.ReceiveNo = Master.ReceiveNo;
                                        isdVM.IssueDateTime = Master.ReceiveDateTime;
                                        isdVM.SD = 0;
                                        isdVM.SDAmount = 0;
                                        isdVM.Wastage = v1Wastage;
                                        isdVM.BOMDate = Convert.ToDateTime(v1BOMDate).ToString("MM/dd/yyyy");
                                        isdVM.FinishItemNo = v1FinishItemNo;

                                        #region Conditional Values

                                        if (vTransactionType.Trim() == "TollReceiveRaw")
                                        {
                                            isdVM.transactionType = vTransactionType.Trim();
                                        }
                                        else
                                        {
                                            isdVM.transactionType = Master.transactionType;
                                        }

                                        #endregion


                                        isdVM.IssueReturnId = Master.ReturnId;
                                        isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                        isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                        isdVM.UOMc = v1UOMc;
                                        isdVM.UOMn = v1UOMn;
                                        isdVM.UOMWastage = v1UOMWastage;
                                        isdVM.BOMId = Item.BOMId;
                                        isdVM.VATName = Item.VatName;
                                        isdVM.Post = issueAutoPostValue;
                                        isdVM.BranchId = Master.BranchId;



                                        if (IsAutoFrom4_3 == false)
                                        {
                                            var WithToll = Master.WithToll;
                                            var Ptype = _ProductDAL.ProductDTByItemNo(v1RawItemNo, "", VcurrConn, Vtransaction).Rows[0]["TollProduct"];
                                            if (WithToll.ToString().ToLower() == "y")
                                            {
                                                if (Ptype.ToString().ToLower() == "y")
                                                {
                                                    isdVM.transactionType = Master.transactionType + "Toll";

                                                }
                                                retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                            }
                                            else
                                            {

                                                if (Ptype.ToString().ToLower() != "y")
                                                {
                                                    retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                                }
                                            }

                                        }
                                        else
                                        {
                                            retResults = new IssueBOMDAL().IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);

                                        }

                                        if (retResults[0] != "Success")
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                        }


                                        #region Update Issue

                                        if (IsAutoFrom4_3 == false)
                                        {

                                            sqlText = "";
                                            sqlText += " update IssueHeaders set ";
                                            sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                            sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                            sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";
                                        }
                                        else
                                        {
                                            sqlText = "";
                                            sqlText += " update IssueHeaderBOMs set ";
                                            sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs ";
                                            sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                            sqlText += " where (IssueHeaderBOMs.IssueNo= '" + Master.ReceiveNo + "')";
                                        }
                                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                        cmdUpdateIssue.Transaction = Vtransaction;
                                        transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                        if (transResult <= 0)
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                            MessageVM.receiveMsgUnableToSaveIssue);
                                        }

                                        #endregion Update Issue

                                        #endregion Qty  check and Update

                                        #endregion
                                    }
                                }

                                #endregion

                            }

                            #endregion

                            #endregion

                        }
                        else if (Master.transactionType == "Tender")
                        {
                            #region Declare

                            decimal v1Quantity = 0;
                            string v1RawItemNo = "";
                            decimal v1CostPrice = 0;
                            string v1UOM = "";
                            decimal v1SubTotal = 0;
                            decimal v1Wastage = 0;
                            DateTime v1BOMDate = DateTime.Now.Date;
                            string v1FinishItemNo = "";

                            decimal v1UOMQty = 0;
                            decimal v1UOMPrice = 0;
                            decimal v1UOMc = 0;
                            string v1UOMn = "";
                            //////string v1BOMId = "";
                            decimal v1UOMWastage = 0;

                            #endregion Declare

                            #region Find Raw Item From BOM  and update Stock
                            #region Insert into Issue

                            sqlText = "";


                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ," +
                                "b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finish') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);


                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = _ProductDAL.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false, true, true, true, connVM, UserId);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    #region Issue Settings
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);
                                    #endregion Issue Settings



                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = Item.BOMId.ToString();
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;

                                        var stock = _ProductDAL.AvgPriceNew(v1RawItemNo,
                                                                              Master.ReceiveDateTime,
                                                            VcurrConn, Vtransaction, false, true, true, true, connVM, UserId).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = _ProductDAL.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                _ProductDAL.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock



                                    #region Find Quantity From Transaction

                                    IssueDetailVM isdVM = new IssueDetailVM();
                                    isdVM.IssueNo = Master.ReceiveNo;
                                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                                    isdVM.ItemNo = v1RawItemNo;
                                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    isdVM.NBRPrice = AvgRate;
                                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    isdVM.UOM = v1UOM;
                                    isdVM.VATRate = 0;
                                    isdVM.VATAmount = 0;
                                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    isdVM.CommentsD = Item.CommentsD;
                                    isdVM.CreatedBy = Master.CreatedBy;
                                    isdVM.CreatedOn = Master.CreatedOn;
                                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                                    isdVM.ReceiveNo = Master.ReceiveNo;
                                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                                    isdVM.SD = 0;
                                    isdVM.SDAmount = 0;
                                    isdVM.Wastage = v1Wastage;
                                    isdVM.BOMDate = v1BOMDate.ToString();
                                    isdVM.FinishItemNo = v1FinishItemNo;
                                    isdVM.transactionType = Master.transactionType;
                                    isdVM.IssueReturnId = Master.ReturnId;
                                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    isdVM.UOMc = v1UOMc;
                                    isdVM.UOMn = v1UOMn;
                                    isdVM.UOMWastage = v1UOMWastage;
                                    isdVM.BOMId = Item.BOMId;
                                    isdVM.VATName = Item.VatName;

                                    //// Convert.ToInt32(v1BOMId);
                                    isdVM.Post = issueAutoPostValue;
                                    isdVM.BranchId = Master.BranchId;


                                    if (IsAutoFrom4_3 == false)
                                    {
                                        retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                    }
                                    else
                                    {
                                        retResults = new IssueBOMDAL().IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);

                                    }

                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue
                                    if (IsAutoFrom4_3 == false)
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";
                                    }
                                    else
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaderBOMs set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs";
                                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                        sqlText += " where (IssueHeaderBOMs.IssueNo= '" + Master.ReceiveNo + "')";
                                    }

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }
                            #endregion Insert into Issue

                            #endregion Find Raw Item From BOM and update Stock
                        }
                        else if (Master.transactionType == "TollFinishReceive")
                        {
                            #region TollFinishReceive


                            //////BomId = string.Empty; //BOMId
                            BOMDate = DateTime.MinValue;

                            if (Item.BOMId > 0)
                            {
                                BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                                BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                            }


                            #region Find Raw Item From BOM  and update Stock

                            sqlText = "";

                            //NeedChange

                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn,UnitCost Cost ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty  from BOMRaws b  ";
                            sqlText += " where 1=1";
                            sqlText += " and BOMId=@BOMId";////'" + Item.BOMId + "'";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finish') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);




                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                #region Declare

                                decimal v1Quantity = 0;
                                string v1RawItemNo = "";
                                decimal v1CostPrice = 0;
                                string v1UOM = "";
                                decimal v1SubTotal = 0;
                                decimal v1Wastage = 0;
                                DateTime v1BOMDate = DateTime.Now.Date;
                                string v1FinishItemNo = "";

                                decimal v1UOMQty = 0;
                                decimal v1UOMPrice = 0;
                                decimal v1UOMc = 0;
                                string v1UOMn = "";
                                ////string v1BOMId = "";
                                decimal v1UOMWastage = 0;

                                #endregion Declare

                                decimal vQuantity = 0;
                                decimal vWastage = 0;

                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;


                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = _ProductDAL.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false, true, true, true, connVM, UserId);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    //AvgRate = Convert.ToDecimal(BRItem["Cost"].ToString());

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    #region Issue Settings
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);
                                    #endregion Issue Settings

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);

                                    #endregion Find Quantity From Products

                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;


                                        var dtTollStock = _ProductDAL.GetTollStock(new ParameterVM()
                                        {
                                            ItemNo = v1RawItemNo,
                                            //BranchId = Master.BranchId
                                        }, VcurrConn, Vtransaction);


                                        //var stock = _ProductDAL.AvgPriceNew(v1RawItemNo,
                                        //                                      Master.ReceiveDateTime,
                                        //                    VcurrConn, Vtransaction, false, true, true, true, connVM, UserId).Rows[0]["Quantity"].ToString();


                                        vStock = Convert.ToDecimal(dtTollStock.Rows[0][0]);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = _ProductDAL.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                _ProductDAL.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock

                                    #region Find Quantity From Transaction

                                    IssueDetailVM isdVM = new IssueDetailVM();
                                    isdVM.IssueNo = Master.ReceiveNo;
                                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                                    isdVM.ItemNo = v1RawItemNo;
                                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    isdVM.NBRPrice = AvgRate;
                                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    isdVM.UOM = v1UOM;
                                    isdVM.VATRate = 0;
                                    isdVM.VATAmount = 0;
                                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    isdVM.CommentsD = Item.CommentsD;
                                    isdVM.CreatedBy = Master.CreatedBy;
                                    isdVM.CreatedOn = Master.CreatedOn;
                                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                                    isdVM.ReceiveNo = Master.ReceiveNo;
                                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                                    isdVM.SD = 0;
                                    isdVM.SDAmount = 0;
                                    isdVM.Wastage = v1Wastage;
                                    isdVM.BOMDate = v1BOMDate.ToString();
                                    isdVM.FinishItemNo = v1FinishItemNo;
                                    isdVM.transactionType = Master.transactionType;
                                    if (AvgRate == 0)
                                    {
                                        isdVM.transactionType = Master.transactionType;
                                    }

                                    isdVM.transactionType = Master.transactionType;
                                    isdVM.IssueReturnId = Master.ReturnId;
                                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    isdVM.UOMc = v1UOMc;
                                    isdVM.UOMn = v1UOMn;
                                    isdVM.UOMWastage = v1UOMWastage;
                                    isdVM.BOMId = Item.BOMId;
                                    isdVM.VATName = Item.VatName;

                                    //// Convert.ToInt32(v1BOMId);
                                    isdVM.Post = issueAutoPostValue;
                                    isdVM.BranchId = Master.BranchId;


                                    retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update IssueHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                    sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                    sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock

                            #endregion TollFinishReceive

                        }
                        else if (Master.transactionType == "PackageProduction")
                        {
                            #region PackageProduction

                            ////BomId = string.Empty; //BOMId
                            BOMDate = DateTime.MinValue;
                            #region 12-Sep-2019

                            #endregion

                            if (Item.BOMId > 0)
                            {
                                BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                                BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                            }

                            #region Find Raw Item From BOM  and update Stock
                            #region Finish

                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty  from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='finish') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);


                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                #region Declare

                                decimal v1Quantity = 0;
                                string v1RawItemNo = "";
                                decimal v1CostPrice = 0;
                                string v1UOM = "";
                                decimal v1SubTotal = 0;
                                decimal v1UOMQty = 0;
                                decimal v1UOMPrice = 0;
                                decimal v1UOMc = 0;
                                string v1UOMn = "";
                                #endregion Declare

                                decimal vQuantity = 0;
                                decimal vWastage = 0;

                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = _ProductDAL.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false, true, true, true, connVM, UserId);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    decimal nbrPriceFromBom = _ProductDAL.GetLastNBRPriceFromBOM_VatName(BRItem["RawItemNo"].ToString(),
                                                                  "VAT 1", Master.ReceiveDateTime,
                                                                  null, null);

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());



                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);

                                    #endregion Find Quantity From Products

                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        var stock = _ProductDAL.AvgPriceNew(v1RawItemNo,
                                                         Master.ReceiveDateTime,
                                       VcurrConn, Vtransaction, false, true, true, true, connVM, UserId).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = _ProductDAL.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                _ProductDAL.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock

                                    #region Find Quantity From Transaction
                                    SaleDetailVm sdVM = new SaleDetailVm();
                                    sdVM.SalesInvoiceNo = Master.ReceiveNo;
                                    sdVM.InvoiceLineNo = Item.ReceiveLineNo;
                                    sdVM.ItemNo = v1RawItemNo;
                                    sdVM.Quantity = v1Quantity;
                                    sdVM.PromotionalQuantity = 0;
                                    sdVM.SalesPrice = nbrPriceFromBom;
                                    sdVM.NBRPrice = nbrPriceFromBom;
                                    sdVM.AvgRate = AvgRate;
                                    sdVM.UOM = v1UOM;
                                    sdVM.VATRate = 0;
                                    sdVM.VATAmount = 0;
                                    sdVM.SubTotal = v1SubTotal;
                                    sdVM.CommentsD = Item.CommentsD;
                                    sdVM.CreatedBy = Master.CreatedBy;
                                    sdVM.CreatedOn = Master.CreatedOn;
                                    sdVM.LastModifiedBy = Master.LastModifiedBy;
                                    sdVM.LastModifiedOn = Master.LastModifiedOn;
                                    sdVM.SD = 0;
                                    sdVM.SDAmount = 0;
                                    sdVM.SaleTypeD = "New";
                                    sdVM.PreviousSalesInvoiceNoD = Master.ReturnId;
                                    sdVM.TradingD = "N";
                                    sdVM.NonStockD = "N";
                                    sdVM.TradingMarkUp = 0;
                                    sdVM.InvoiceDateTime = Master.ReceiveDateTime;
                                    sdVM.Type = "VAT";
                                    sdVM.TransactionType = Master.transactionType;
                                    sdVM.ReturnId = Master.ReturnId;
                                    sdVM.Post = Master.Post;
                                    sdVM.UOMQty = v1UOMQty;
                                    sdVM.UOMn = v1UOMn;
                                    sdVM.UOMc = v1UOMc;
                                    sdVM.DiscountAmount = 0;
                                    sdVM.DiscountedNBRPrice = nbrPriceFromBom;
                                    sdVM.DollerValue = 0;
                                    sdVM.CurrencyValue = nbrPriceFromBom;
                                    sdVM.FinishItemNo = Item.ItemNo;
                                    sdVM.UOMPrice = v1UOMPrice;
                                    sdVM.BranchId = Master.BranchId;

                                    retResults = salDal.SalesInsertToDetail(sdVM, VcurrConn, Vtransaction);
                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update SalesInvoiceHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*NBRPrice) from SalesInvoiceDetails";
                                    sqlText += "  where SalesInvoiceDetails.SalesInvoiceNo =SalesInvoiceHeaders.SalesInvoiceNo)";
                                    sqlText += " where (SalesInvoiceHeaders.SalesInvoiceNo= '" + Master.ReceiveNo + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }
                            #endregion Finish

                            #region Insert into Issue

                            sqlText = "";

                            //NeedChange

                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty  from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='Trading' ) ";

                            DataTable dataTableR = new DataTable("RIFB");
                            SqlCommand cmdRIF = new SqlCommand(sqlText, VcurrConn);
                            cmdRIF.Transaction = Vtransaction;
                            cmdRIF.Parameters.AddWithValue("@BOMId", Item.BOMId);


                            #region Comments


                            #endregion


                            SqlDataAdapter reportDataAdapt1 = new SqlDataAdapter(cmdRIF);
                            reportDataAdapt1.Fill(dataTableR);

                            if (dataTableR == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTableR.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTableR.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = _ProductDAL.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false, true, true, true, connVM, UserId);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    #region Issue Settings
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);
                                    #endregion Issue Settings

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign
                                    #region Declare

                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    ////string v1BOMId = "";
                                    decimal v1UOMWastage = 0;

                                    #endregion Declare

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = Convert.ToString(Item.BOMId);
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;

                                        var stock = _ProductDAL.AvgPriceNew(v1RawItemNo,
                                                                              Master.ReceiveDateTime,
                                                            VcurrConn, Vtransaction, false, true, true, true, connVM, UserId).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = _ProductDAL.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                _ProductDAL.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock
                                    #region Find Quantity From Transaction

                                    IssueDetailVM isdVM = new IssueDetailVM();
                                    isdVM.IssueNo = Master.ReceiveNo;
                                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                                    isdVM.ItemNo = v1RawItemNo;
                                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    isdVM.NBRPrice = AvgRate;
                                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    isdVM.UOM = v1UOM;
                                    isdVM.VATRate = 0;
                                    isdVM.VATAmount = 0;
                                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    isdVM.CommentsD = Item.CommentsD;
                                    isdVM.CreatedBy = Master.CreatedBy;
                                    isdVM.CreatedOn = Master.CreatedOn;
                                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                                    isdVM.ReceiveNo = Master.ReceiveNo;
                                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                                    isdVM.SD = 0;
                                    isdVM.SDAmount = 0;
                                    isdVM.Wastage = v1Wastage;
                                    isdVM.BOMDate = v1BOMDate.ToString();
                                    isdVM.FinishItemNo = v1FinishItemNo;
                                    isdVM.transactionType = Master.transactionType;
                                    isdVM.IssueReturnId = Master.ReturnId;
                                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    isdVM.UOMc = v1UOMc;
                                    isdVM.UOMn = v1UOMn;
                                    isdVM.UOMWastage = v1UOMWastage;
                                    isdVM.BOMId = Item.BOMId;
                                    isdVM.VATName = Item.VatName;

                                    //// Convert.ToInt32(v1BOMId);
                                    isdVM.Post = issueAutoPostValue;
                                    isdVM.BranchId = Master.BranchId;
                                    retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update IssueHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                    sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                    sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }
                            #endregion Insert into Issue

                            #endregion Find Raw Item From BOM and update Stock

                            #endregion PackageProduction

                        }

                    }

                    #endregion



                }

                FileLogger.Log("ReceiveDAL", "ReceiveInsert", DateTime.Now.ToString("dd HH:mm:ss") + " - 3.7");

                #endregion Insert Detail Table

                #endregion Insert into Details(Insert complete in Header)

                #region SuccessResult
                retResults = new string[5];
                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSaveSuccessfully;
                retResults[2] = "" + Master.ReceiveNo;
                retResults[3] = "N";
                retResults[4] = Id;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            //catch (SqlException sqlex)
            //{
            //    if (vcurrConn == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                FileLogger.Log("ReceiveDAL", "ReceiveInsert2", ex.ToString() + "\n" + sqlText);

                throw ex; //ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            finally
            {


            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }


        public ResultVM BOM_DetailInsert(DataTable dataTable, ReceiveMasterVM Master, List<ReceiveDetailVM> Details, ReceiveDetailVM Item, SqlConnection VcurrConn, SqlTransaction Vtransaction, bool IsWIP = false, string UserId = "", SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            try
            {
                #region Detail Insert

                #region Settings

                string AnnexureBOMIssue = "";
                AnnexureBOMIssue = commonDal.settings("Receive", "AnnexureBOMIssue", VcurrConn, Vtransaction);


                #endregion


                #region Check Point

                if (dataTable == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                    MessageVM.receiveMsgNoDataToPost);
                }
                else if (dataTable.Rows.Count <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                   "There is no Item for Auto Consumption for the Item Name (" + Item.ItemName + ") and Item NO (" + Item.ItemCode + ") in price declaration.");
                }

                #endregion

                #region Declarations

                decimal vQuantity = 0;
                decimal vWastage = 0;
                string rwUom = "";
                decimal vConversionRate = 0;
                decimal AvgRate = 0;

                #endregion

                #region For Loop

                foreach (DataRow BRItem in dataTable.Rows)
                {

                    #region Debug

                    if (BRItem["RawItemNo"].ToString() == "1192")
                    {

                    }

                    #endregion

                    #region Declarations

                    decimal v1Quantity = 0;
                    string v1RawItemNo = "";
                    decimal v1CostPrice = 0;
                    string v1UOM = "";
                    decimal v1SubTotal = 0;
                    decimal v1Wastage = 0;
                    DateTime v1BOMDate = DateTime.Now.Date;
                    string v1FinishItemNo = "";

                    decimal v1UOMQty = 0;
                    decimal v1UOMPrice = 0;
                    decimal v1UOMc = 0;
                    string v1UOMn = "";
                    decimal v1UOMWastage = 0;
                    string vTransactionType = "";

                    #endregion Declare

                    #region Update Item Qty

                    #region Find Quantity From Products

                    DataTable priceData = _ProductDAL.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false, true, true, true, null, UserId);

                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());
                    decimal avgRate = Convert.ToDecimal(priceData.Rows[0]["AvgRate"].ToString());

                    if (avgRate >= 0)
                    {
                        AvgRate = avgRate;
                    }
                    else
                    {
                        AvgRate = 0;
                    }


                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                    #region Issue Settings

                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);

                    #endregion

                    rwUom = BRItem["Uom"].ToString();

                    string rwMajorUom = BRItem["Uomn"].ToString();

                    if (string.IsNullOrEmpty(rwUom))
                    {
                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                    }

                    UOMDAL uomdal = new UOMDAL();

                    vConversionRate = uomdal.GetConvertionRate(rwMajorUom, rwUom, "Y", VcurrConn, Vtransaction); //uomc

                    #region valueAssign

                    decimal WIPQuantity = Convert.ToDecimal(BRItem["WIPQuantity"]);

                    decimal ItemUOMQty = 0;
                    ItemUOMQty = Item.UOMQty;

                    //// If AnnexureBOMIssue == N, then multiply the UOMQty with WIPQuantity else Don't Multply with WIPQuantity
                    if (AnnexureBOMIssue == "N" && WIPQuantity > 0)
                    {
                        ItemUOMQty = ItemUOMQty * WIPQuantity;
                    }

                    v1Quantity = (vQuantity + vWastage) * ItemUOMQty;

                    v1Wastage = (vWastage) * ItemUOMQty;
                    //////v1BOMId = BomId;
                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                    v1UOM = BRItem["UOM"].ToString();
                    v1CostPrice = AvgRate * vConversionRate;
                    v1SubTotal = (vQuantity + vWastage) * ItemUOMQty * (AvgRate * vConversionRate);

                    v1UOMPrice = AvgRate;
                    v1UOMn = BRItem["UOMn"].ToString();
                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                    v1FinishItemNo = Item.ItemNo;
                    v1UOMc = vConversionRate;
                    v1UOMQty = (vQuantity + vWastage) * ItemUOMQty * vConversionRate;
                    v1UOMWastage = (vWastage) * ItemUOMQty * vConversionRate;
                    vTransactionType = BRItem["TransactionType"].ToString();

                    #endregion

                    #endregion

                    #region Find Quantity From Transaction

                    IssueDetailVM isdVM = new IssueDetailVM();
                    isdVM.IssueNo = Master.ReceiveNo;
                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                    isdVM.ItemNo = v1RawItemNo;
                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                    isdVM.NBRPrice = AvgRate;
                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                    isdVM.UOM = v1UOM;
                    isdVM.VATRate = 0;
                    isdVM.VATAmount = 0;
                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                    isdVM.CommentsD = Item.CommentsD;
                    isdVM.CreatedBy = Master.CreatedBy;
                    isdVM.CreatedOn = Master.CreatedOn;
                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                    isdVM.ReceiveNo = Master.ReceiveNo;
                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                    isdVM.SD = 0;
                    isdVM.SDAmount = 0;
                    isdVM.Wastage = v1Wastage;
                    isdVM.BOMDate = Convert.ToDateTime(v1BOMDate).ToString("MM/dd/yyyy");
                    isdVM.FinishItemNo = v1FinishItemNo;
                    isdVM.WIPBOMId = Convert.ToInt32(BRItem["WIPBOMId"]);

                    if (IsWIP)
                    {
                        isdVM.WIPBOMId = Convert.ToInt32(BRItem["BOMId"]);
                    }


                    #region Conditional Values

                    if (vTransactionType.Trim() == "TollReceiveRaw")
                    {
                        isdVM.transactionType = vTransactionType.Trim();
                    }
                    else
                    {
                        isdVM.transactionType = Master.transactionType;
                    }

                    #endregion


                    isdVM.IssueReturnId = Master.ReturnId;
                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                    isdVM.UOMc = v1UOMc;
                    isdVM.UOMn = v1UOMn;
                    isdVM.UOMWastage = v1UOMWastage;
                    isdVM.BOMId = Item.BOMId;
                    isdVM.VATName = Item.VatName;
                    isdVM.Post = issueAutoPostValue;
                    isdVM.BranchId = Master.BranchId;



                    if (IsAutoFrom4_3 == false)
                    {
                        string WithToll = Master.WithToll;
                        string Ptype = _ProductDAL.ProductDTByItemNo(v1RawItemNo, "", VcurrConn, Vtransaction).Rows[0]["TollProduct"].ToString();

                        if (WithToll.ToString().ToLower() == "y")
                        {
                            if (Ptype.ToString().ToLower() == "y")
                            {
                                isdVM.transactionType = Master.transactionType + "Toll";

                            }
                            retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                        }
                        else
                        {

                            if (Ptype.ToString().ToLower() != "y")
                            {
                                retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                            }
                        }

                    }
                    else
                    {
                        retResults = new IssueBOMDAL().IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);

                    }

                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                    }


                    #region Update Issue

                    if (IsAutoFrom4_3 == false)
                    {

                        sqlText = "";
                        sqlText += " update IssueHeaders set ";
                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                        sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";
                    }
                    else
                    {
                        sqlText = "";
                        sqlText += " update IssueHeaderBOMs set ";
                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs ";
                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                        sqlText += " where (IssueHeaderBOMs.IssueNo= '" + Master.ReceiveNo + "')";
                    }
                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                    cmdUpdateIssue.Transaction = Vtransaction;
                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                        MessageVM.receiveMsgUnableToSaveIssue);
                    }

                    #endregion Update Issue

                    #endregion Qty  check and Update

                    #endregion

                    #region Success Result

                    rVM.Status = "Success";
                    rVM.Message = "Data Saved Successfully!";

                    #endregion
                }

                #endregion

                #endregion
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "BOM_DetailInsert", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            finally { }

            return rVM;

        }

        public string[] ReceiveUpdate(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, List<TrackingVM> Trackings, SysDBInfoVMTemp connVM = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, string UserId = "")
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            IssueDAL issDal = new IssueDAL();
            PurchaseDAL purDal = new PurchaseDAL();
            SaleDAL salDal = new SaleDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";
            bool NegStockAllow = false;
            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime receiveDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue;

            bool issueAutoPost = false;
            bool issueFromBOM = false;

            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgNoDataToUpdate);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, "Please Check Invoice Data and Time");

                }

                #endregion Validation for Header

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Current Status

                #region Post Status

                string currentPostStatus = "N";

                sqlText = "";
                sqlText = @"
----------declare @InvoiceNo as varchar(100)='REC-001/0706/1220'

select ReceiveNo, Post from ReceiveHeaders
where 1=1 
and ReceiveNo=@InvoiceNo

";
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@InvoiceNo", Master.ReceiveNo);

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                if (dt != null && dt.Rows.Count > 0)
                {
                    currentPostStatus = dt.Rows[0]["Post"].ToString();
                }

                #endregion

                #region Current Receive Items

                DataTable dtCurrentReceiveItems = new DataTable();

                if (currentPostStatus == "Y")
                {

                    sqlText = "";
                    sqlText = @"
----------declare @InvoiceNo as varchar(100)='REC-001/0706/1220'

select ItemNo, ReceiveNo from ReceiveDetails
where 1=1 
and ReceiveNo=@InvoiceNo

";
                    cmd = new SqlCommand(sqlText, currConn, transaction);
                    cmd.Parameters.AddWithValue("@InvoiceNo", Master.ReceiveNo);

                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtCurrentReceiveItems);

                }

                #endregion

                #region Current Issue Items

                DataTable dtcurrentIssueItems = new DataTable();

                if (currentPostStatus == "Y")
                {

                    sqlText = "";
                    sqlText = @"
----------declare @InvoiceNo as varchar(100)='REC-001/0706/1220'

select ItemNo, IssueNo from IssueDetails
where 1=1 
and IssueNo=@InvoiceNo

";
                    cmd = new SqlCommand(sqlText, currConn, transaction);
                    cmd.Parameters.AddWithValue("@InvoiceNo", Master.ReceiveNo);

                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtcurrentIssueItems);

                }

                #endregion

                #endregion

                #region Find Month Lock

                string PeriodName = Convert.ToDateTime(Master.ReceiveDateTime).ToString("MMMM-yyyy");
                string[] vValues = { PeriodName };
                string[] vFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, vFields, vValues).FirstOrDefault();

                if (varFiscalYearVM.VATReturnPost == "Y")
                {
                    throw new Exception(PeriodName + ": VAT Return (9.1) already submitted for this month!");

                }
                else if (varFiscalYearVM == null)
                {
                    throw new Exception(PeriodName + ": This Fiscal Period is not Exist!");

                }

                #endregion Find Month Lock

                List<ReceiveDetailVM> previousDetailVMs = SelectReceiveDetail(Master.ReceiveNo, null, null, currConn, transaction);
                List<IssueDetailVM> previousIssueDetailVMs = new IssueDAL().SelectIssueDetail(Master.ReceiveNo, null, null, currConn, transaction);

                #region Master

                #region Check Point

                #region Settings Value

                string vIssueFromBOM, vIssueAutoPost, vNegStockAllow = string.Empty;

                vIssueFromBOM = commonDal.settings("IssueFromBOM", "IssueFromBOM", currConn, transaction, connVM);

                vIssueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost", currConn, transaction, connVM);
                vNegStockAllow = commonDal.settings("Issue", "NegStockAllow", currConn, transaction, connVM);

                if (string.IsNullOrEmpty(vIssueAutoPost) || string.IsNullOrEmpty(vNegStockAllow))
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                }

                issueFromBOM = Convert.ToBoolean(vIssueFromBOM == "Y" ? true : false);
                issueAutoPost = Convert.ToBoolean(vIssueAutoPost == "Y" ? true : false);
                NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                #endregion

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDateTime;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders WHERE ReceiveNo=@MasterReceiveNo ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUnableFindExistID);
                }

                #endregion Find ID for Update

                if (Master.transactionType == "ReceiveReturn")
                {
                    #region Find Receive Return Date

                    ////sqlText = "";
                    ////sqlText = sqlText + "select ReceiveDateTime from ReceiveHeaders" +
                    ////          " WHERE ReceiveNo=@MasterReturnId ";
                    ////SqlCommand cmdFindPDate = new SqlCommand(sqlText, currConn);
                    ////cmdFindPDate.Transaction = transaction;
                    ////cmdFindPDate.Parameters.AddWithValue("@MasterReturnId", Master.ReturnId);
                    ////previousReceiveDate = (DateTime)cmdFindPDate.ExecuteScalar();

                    ////if (previousReceiveDate == null)
                    ////{
                    ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                    ////                                    MessageVM.receiveMsgFindExistID);
                    ////}

                    #endregion  Find Receive Return Date
                }

                #endregion

                #region Update Header

                string realTimeEntry = commonDal.settings("Purchase", "EntryRealTime", currConn, transaction, connVM);
                if (realTimeEntry == "N")
                {
                    Master.ReceiveDateTime = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd 00:00:00");

                }



                #region Select Data

                string[] cFields = new string[] { "rh.ReceiveNo" };
                string[] cVals = new string[] { Master.ReceiveNo };
                ReceiveMasterVM rmVm = SelectAllList(0, cFields, cVals, currConn, transaction, null).FirstOrDefault();
                string prevReceiveDate = Convert.ToDateTime(rmVm.ReceiveDateTime) <= Convert.ToDateTime(Master.ReceiveDateTime)
                    ? rmVm.ReceiveDateTime
                    : Master.ReceiveDateTime;


                #region Master Setting Update

                commonDal.UpdateProcessFlag(Master.ReceiveNo, prevReceiveDate, currConn, transaction);

                #endregion

                string settingValue = commonDal.settingValue("EntryProcess", "UpdateOnPost", connVM);

                if (settingValue != "Y")
                {
                    if (rmVm.Post == "Y")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.ThisTransactionWasPosted);
                    }

                }

                #endregion

                #region Assign Data

                //Adding Receive Date 00.00.00
                Master.ReceiveDateTime = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd 00:00:00");

                rmVm.ShiftId = Master.ShiftId;
                rmVm.ReceiveDateTime = Master.ReceiveDateTime;
                rmVm.WithToll = Master.WithToll;
                rmVm.TotalAmount = Master.TotalAmount;
                rmVm.SerialNo = Master.SerialNo;
                rmVm.Comments = Master.Comments;
                rmVm.LastModifiedBy = Master.LastModifiedBy;
                rmVm.LastModifiedOn = Master.LastModifiedOn;
                rmVm.transactionType = Master.transactionType;
                rmVm.ReturnId = Master.ReturnId;
                rmVm.ReferenceNo = Master.ReferenceNo;
                rmVm.CustomerID = Master.CustomerID;
                rmVm.Post = Master.Post;
                rmVm.BranchId = Master.BranchId;


                if (rmVm.FromBOM == "N")
                {
                    rmVm.FromBOM = vIssueFromBOM;
                    Master.FromBOM = vIssueFromBOM;
                }

                #endregion

                #region Update Data

                retResults = ReceiveUpdateToMaster(rmVm, currConn, transaction, connVM);


                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, retResults[1]);
                }

                #endregion

                #endregion update Header

                #endregion Master

                #region Update into Details(Update complete in Header)

                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgNoDataToUpdate);
                }


                #endregion Validation for Detail

                #region Delete Existing Detail Data

                #region Purchase/Receive/Issue Data

                sqlText = "";
                sqlText += @" delete FROM PurchaseInvoiceDetails WHERE PurchaseInvoiceNo=@MasterReceiveNo ";
                sqlText += @" delete FROM PurchaseInvoiceDuties WHERE PurchaseInvoiceNo=@MasterReceiveNo ";
                sqlText += @" delete FROM PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterReceiveNo ";

                sqlText += @" delete FROM ReceiveDetails WHERE ReceiveNo=@MasterReceiveNo ";

                sqlText += @" delete FROM IssueDetails WHERE IssueNo=@MasterReceiveNo ";
                sqlText += @" delete FROM IssueDetailBOMs WHERE IssueNo=@MasterReceiveNo ";
                sqlText += @" delete FROM IssueHeaderBOMs WHERE IssueNo=@MasterReceiveNo ";
                sqlText += @" delete FROM IssueHeaders WHERE IssueNo=@MasterReceiveNo ";
                sqlText += @" delete FROM SalesInvoiceDetails WHERE SalesInvoiceNo=@MasterReceiveNo ";
                sqlText += @" delete FROM SalesInvoiceHeaders WHERE SalesInvoiceNo=@MasterReceiveNo ";


                SqlCommand cmdDeleteDetail = new SqlCommand(sqlText, currConn);
                cmdDeleteDetail.Transaction = transaction;
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterReceiveNo", Master.ReceiveNo);

                transResult = cmdDeleteDetail.ExecuteNonQuery();


                #endregion

                #endregion

                #endregion  Update into Details(Update complete in Header)

                #region Receive Insert2

                retResults = ReceiveInsert2(Master, Details, Trackings, transaction, currConn, connVM, UserId);

                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, retResults[1]);
                }

                #endregion

                #region Tracking
                if (Trackings != null && Trackings.Count > 0)
                {

                    for (int i = 0; i < Trackings.Count; i++)
                    {
                        if (Master.transactionType == "ReceiveReturn")
                        {
                            if (Trackings[i].ReturnReceive == "Y")
                            {
                                Trackings[i].ReturnReceiveID = Master.ReceiveNo;
                                Trackings[i].ReturnType = Master.transactionType;
                            }

                        }
                        else if (Trackings[i].IsReceive == "Y")
                        {
                            Trackings[i].ReceiveNo = Master.ReceiveNo;
                            Trackings[i].ReceiveDate = Master.ReceiveDateTime;
                            //Trackings[i].Post = Master.Post;
                        }
                        else
                        {
                            Trackings[i].ReceiveNo = "";

                        }
                    }
                    string trackingUpdate = string.Empty;
                    TrackingDAL trackingDal = new TrackingDAL();
                    trackingUpdate = trackingDal.TrackingUpdate(Trackings, transaction, currConn);

                    if (trackingUpdate == "Fail")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Tracking Information not added.");
                    }
                }
                #endregion

                #region Update PeriodId

                sqlText = "";
                sqlText += @"

update  ReceiveHeaders                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDateTime)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDateTime)),6)
WHERE ReceiveNo = @ReceiveNo

update  ReceiveDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDateTime)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDateTime)),6)
where ReceiveNo = @ReceiveNo



UPDATE IssueHeaders 
SET PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(IssueDateTime)) +  CONVERT(VARCHAR(4),YEAR(IssueDateTime)),6)
WHERE IssueNo = @ReceiveNo


update  IssueDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(IssueDateTime)) +  CONVERT(VARCHAR(4),YEAR(IssueDateTime)),6)
WHERE IssueNo = @ReceiveNo

";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn, transaction);
                cmdUpdate.Parameters.AddWithValue("@ReceiveNo", Master.ReceiveNo);

                transResult = cmdUpdate.ExecuteNonQuery();

                #endregion

                #region Update Product Stock

                if (currentPostStatus == "Y")
                {
                    ProductDAL productDal = new ProductDAL();
                    List<string> transactionTypes = new List<string>() { "other", "wip" };

                    ResultVM rVM = new ResultVM();
                    ParameterVM paramVM = new ParameterVM();
                    paramVM.BranchId = Master.BranchId;
                    paramVM.InvoiceNo = Master.ReceiveNo;


                    if (transactionTypes.Contains(Master.transactionType.ToLower()))
                    {
                        DataTable dtItemNo = previousDetailVMs.Select(x => new { x.ItemNo, Quantity = x.UOMQty * -1 })
                            .ToList().ToDataTable();
                        productDal.Product_IN_OUT(new ParameterVM() { dt = dtItemNo, BranchId = Master.BranchId });

                        dtItemNo = previousIssueDetailVMs.Select(x => new { x.ItemNo, Quantity = x.UOMQty })
                            .ToList().ToDataTable();
                        productDal.Product_IN_OUT(new ParameterVM() { dt = dtItemNo, BranchId = Master.BranchId });
                    }
                    else
                    {
                        if (dtCurrentReceiveItems != null && dtCurrentReceiveItems.Rows.Count > 0)
                        {
                            paramVM.dt = dtCurrentReceiveItems;
                            paramVM.IDs = new List<string>();

                            foreach (DataRow dr in paramVM.dt.Rows)
                            {
                                paramVM.IDs.Add(dr["ItemNo"].ToString());
                            }

                            if (paramVM.IDs.Count > 0)
                            {
                                rVM = _ProductDAL.Product_Stock_Update(paramVM, currConn, transaction, connVM, UserId);
                            }

                        }


                        #region Issue_Product_Stock_Update

                        if (dtcurrentIssueItems != null && dtcurrentIssueItems.Rows.Count > 0)
                        {

                            paramVM.dt = dtcurrentIssueItems;
                            paramVM.IDs = new List<string>();

                            foreach (DataRow dr in paramVM.dt.Rows)
                            {
                                paramVM.IDs.Add(dr["ItemNo"].ToString());
                            }

                            if (paramVM.IDs.Count > 0)
                            {
                                rVM = _ProductDAL.Product_Stock_Update(paramVM, currConn, transaction, connVM, UserId);
                            }
                        }
                        #endregion
                    }


                }

                #endregion

                #region Adjustment Update

                //ResultVM resultVm = UpdateAdjustmentValue(Master.ReceiveNo, currConn, transaction);

                #endregion


                #region Master Setting Update

                commonDal.UpdateProcessFlag(Master.ReceiveNo, prevReceiveDate, currConn, transaction);

                #endregion

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgUpdateSuccessfully;
                retResults[2] = Master.ReceiveNo;
                retResults[3] = "N";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReceiveDAL", "ReceiveUpdate", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion Catch and Finall

            return retResults;

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] ReceivePost(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, List<TrackingVM> Trackings, SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";

            string PostStatus = "";
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";
            DateTime receiveDate = DateTime.MinValue;
            string receiveDateFormat = "";
            DateTime BOMDate = DateTime.MinValue;
            IssueDAL issDal = new IssueDAL();
            SaleDAL saleDal = new SaleDAL();

            #endregion Initializ

            #region Try
            try
            {
                #region Settings

                string vNegStockAllow, vIssueAutoPost, vIssueFromBOM = string.Empty;
                CommonDAL commonDal = new CommonDAL();
                vNegStockAllow = commonDal.settings("Issue", "NegStockAllow", null, null, connVM);
                vIssueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost", null, null, connVM);
                vIssueFromBOM = commonDal.settings("IssueFromBOM", "IssueFromBOM", null, null, connVM);

                if (string.IsNullOrEmpty(vNegStockAllow)
                    || string.IsNullOrEmpty(vIssueAutoPost)
                    )
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Sale");
                }
                bool NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);
                issueAutoPost = Convert.ToBoolean(vIssueAutoPost == "Y" ? true : false);
                if (issueAutoPost)
                {
                    issueAutoPostValue = "Y";
                }

                bool IssueFromBOM = Convert.ToBoolean(vIssueFromBOM == "Y" ? true : false);


                #endregion

                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgNoDataToPost);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                    MessageVM.receiveMsgCheckDatePost);

                }



                #endregion Validation for Header

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Find Month Lock

                string PeriodName = Convert.ToDateTime(Master.ReceiveDateTime).ToString("MMMM-yyyy");
                string[] vValues = { PeriodName };
                string[] vFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, vFields, vValues).FirstOrDefault();

                if (varFiscalYearVM == null)
                {
                    throw new Exception(PeriodName + ": This Fiscal Period is not Exist!");

                }

                if (varFiscalYearVM.VATReturnPost == "Y")
                {
                    throw new Exception(PeriodName + ": VAT Return (9.1) already submitted for this month!");

                }

                #endregion Find Month Lock

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDateTime;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders WHERE ReceiveNo=@MasterReceiveNo ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                    MessageVM.receiveMsgUnableFindExistIDPost);
                }

                #endregion Find ID for Update

                #region Stock Check

                if (NegStockAllow == false)
                {
                    if (IssueFromBOM == true)
                    {

                        decimal StockQuantity = 0;

                        DataTable dtAvgPrice = new DataTable();

                        List<IssueDetailVM> dVMs = new List<IssueDetailVM>();

                        dVMs = new IssueDAL().SelectIssueDetail(Master.ReceiveNo, null, null, currConn, transaction);

                        foreach (var Item in dVMs)
                        {
                            StockQuantity = 0;

                            dtAvgPrice = new ProductDAL().AvgPriceNew(Item.ItemNo.Trim(), Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MMM-dd") +
                                            DateTime.Now.ToString(" HH:mm:00"), currConn, transaction, true, true, true, false, null, UserId);

                            StockQuantity = Convert.ToDecimal(dtAvgPrice.Rows[0]["Quantity"].ToString());

                            if (Item.UOMQty > StockQuantity)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, "(" + Item.ProductCode + ") " + Item.ItemName + " " + MessageVM.saleMsgStockNotAvailablePost + " " + "In " + Master.ReceiveDateTime
                                    + " " + " Stock: " + StockQuantity + " Required: " + Item.UOMQty);

                                ////////throw new ArgumentNullException(MessageVM.saleMsgMethodNamePost, "(" + Item.ProductCode + ") " + Item.ItemName + Environment.NewLine + MessageVM.saleMsgStockNotAvailablePost + Environment.NewLine + "In " + Master.ReceiveDateTime
                                ////////    + Environment.NewLine + "Stock: " + StockQuantity + " Required: " + Item.UOMQty);

                            }
                        }
                    }
                }
                #endregion

                #region Post

                sqlText = "";
                sqlText += @" Update  ReceiveDetails             set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE ReceiveNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  ReceiveHeaders             set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE ReceiveNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueDetails               set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueHeaders               set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueDetailBOMs            set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueHeaderBOMs            set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  PurchaseInvoiceDuties      set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  PurchaseInvoiceDetails     set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  PurchaseInvoiceHeaders     set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  PurchaseTDSs               set  Post ='Y'    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                ////// sqlText += @" Update  PurchaseSaleTrackings      set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                ////// sqlText += @" Update  SalesInvoiceHeadersExport  set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  SalesInvoiceHeaders        set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  SalesInvoiceDetails        set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";

                //////sqlText += @" Update  ReceiveDetails             set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE ReceiveNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  ReceiveHeaders             set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE ReceiveNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  IssueDetails               set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE IssueNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  IssueHeaders               set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE IssueNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  IssueDetailBOMs            set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE IssueNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  IssueHeaderBOMs            set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE IssueNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  PurchaseInvoiceDuties      set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  PurchaseInvoiceDetails     set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  PurchaseInvoiceHeaders     set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy   WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  PurchaseTDSs               set  Post ='Y'    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                //////////// sqlText += @" Update  PurchaseSaleTrackings      set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                //////////// sqlText += @" Update  SalesInvoiceHeadersExport  set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  SalesInvoiceHeaders        set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";
                //////sqlText += @" Update  SalesInvoiceDetails        set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";



                SqlCommand cmdDeleteDetail = new SqlCommand(sqlText, currConn);
                cmdDeleteDetail.Transaction = transaction;
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterSalesInvoiceNo", Master.ReceiveNo);
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);

                transResult = cmdDeleteDetail.ExecuteNonQuery();


                #endregion

                #region Receive_Product_IN_OUT

                ResultVM rVM = new ResultVM();

                ParameterVM paramVM = new ParameterVM();
                paramVM.InvoiceNo = Master.ReceiveNo;

                rVM = Receive_Product_IN_OUT(paramVM, currConn, transaction);

                #region Issue_Product_IN_OUT

                #region Invoice Status

                sqlText = "";
                sqlText = @"
----------declare @InvoiceNo as varchar(100)='REC-001/0706/1220'

select IssueNo, BranchId, Post from IssueHeaders
where 1=1 
and IssueNo=@InvoiceNo

";
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.InvoiceNo);

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                #endregion

                if (dt != null && dt.Rows.Count > 0)
                {
                    rVM = new IssueDAL().Issue_Product_IN_OUT(paramVM, currConn, transaction);
                }

                #endregion

                #endregion

                #region Tracking
                if (Trackings != null && Trackings.Count > 0)
                {
                    for (int i = 0; i < Trackings.Count; i++)
                    {
                        if (Trackings[i].ReceiveNo == Master.ReceiveNo)
                        {
                            sqlText = "";

                            sqlText += " update Trackings set  ";
                            sqlText += " LastModifiedBy= @MasterLastModifiedBy, ";
                            sqlText += " LastModifiedOn= @MasterLastModifiedOn, ";

                            sqlText += " ReceivePost=@MasterPost  ";
                            sqlText += " where  ReceiveNo=@MasterReceiveNo ";
                            sqlText += " and  Heading1=@Heading1";// '" + Trackings[i].Heading1 + "' ";

                            SqlCommand cmdUpdateTracking = new SqlCommand(sqlText, currConn);
                            cmdUpdateTracking.Transaction = transaction;
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedOn", Master.LastModifiedOn);
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterPost", Master.Post);
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                            cmdUpdateTracking.Parameters.AddWithValue("@Heading1", Trackings[i].Heading1);

                            transResult = (int)cmdUpdateTracking.ExecuteNonQuery();
                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                            }

                        }
                        else
                        {
                            if (Trackings[i].transactionType == "Receive_Return")
                            {
                                if (Trackings[i].ReturnReceive == "Y")
                                {
                                    sqlText = "";

                                    sqlText += " update Trackings set  ";
                                    sqlText += " LastModifiedBy= @MasterLastModifiedBy, ";
                                    sqlText += " LastModifiedOn= @MasterLastModifiedOn, ";
                                    sqlText += " ReturnReceiveDate=@MasterReceiveDateTime ";

                                    sqlText += " where Heading1=@Heading1";// '" + Trackings[i].Heading1 + "' ";


                                    SqlCommand cmdUpdateTracking = new SqlCommand(sqlText, currConn);
                                    cmdUpdateTracking.Transaction = transaction;

                                    cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedBy", Master.LastModifiedBy);
                                    cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedOn", Master.LastModifiedOn);
                                    cmdUpdateTracking.Parameters.AddWithValue("@MasterReceiveDateTime", Master.ReceiveDateTime);
                                    cmdUpdateTracking.Parameters.AddWithValue("@Heading1", Trackings[i].Heading1);

                                    transResult = (int)cmdUpdateTracking.ExecuteNonQuery();
                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                        MessageVM.PurchasemsgUpdateNotSuccessfully);
                                    }
                                }
                            }
                        }

                    }
                }


                #endregion

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSuccessfullyPost;
                retResults[2] = Master.ReceiveNo;
                retResults[3] = "Y";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReceivePost", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public ResultVM Receive_Product_IN_OUT(ParameterVM paramVM, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try Statement

            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Invoice Status

                sqlText = "";
                sqlText = @"
----------declare @InvoiceNo as varchar(100)='REC-001/0706/1220'

select ReceiveNo, BranchId, Post from ReceiveHeaders
where 1=1 
and ReceiveNo=@InvoiceNo

";
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.InvoiceNo);

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                if (dt != null && dt.Rows.Count > 0)
                {
                    paramVM.BranchId = Convert.ToInt32(dt.Rows[0]["BranchId"]);
                }

                #endregion

                #region Update Product Stock

                #region SQL Text

                sqlText = "";
                sqlText = @"
----------declare @InvoiceNo as varchar(100)='REC-001/0706/1220'
declare @MultiplicationFactor as int=1


select 
@MultiplicationFactor = case 
when TransactionType in
(
'WIP'
,'Other','Tender','PackageProduction'  
,'Wastage','SaleWastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
,'TradingImport'
,'TollReceive'
) then  1 
when TransactionType in
(
'ReceiveReturn'

) then  -1 
end

from ReceiveDetails
where 1=1 
and ReceiveNo=@InvoiceNo


select ItemNo, ReceiveNo, TransactionType, UOMQty * (@MultiplicationFactor) as Quantity, Post from ReceiveDetails
where 1=1 
and ReceiveNo=@InvoiceNo

";
                #endregion


                cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.InvoiceNo);

                da = new SqlDataAdapter(cmd);
                dt = new DataTable();
                da.Fill(dt);

                paramVM.dt = dt;

                rVM = _ProductDAL.Product_IN_OUT(paramVM, currConn, transaction);

                #endregion

                #region Success Result

                rVM.Status = "Success";
                rVM.Message = "Product Stock Updated Successfully!";

                #endregion

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "Receive_Product_IN_OUT", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return rVM;
        }


        public ResultVM MultipleUpdate(ReceiveMasterVM paramVM, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try Statement

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Update

                if (paramVM != null && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    for (var index = 0; index < paramVM.IDs.Count; index++)
                    {
                        string ID = paramVM.IDs[index];
                        ReceiveMasterVM MasterVM = new ReceiveMasterVM();
                        List<ReceiveDetailVM> DetailVMs = new List<ReceiveDetailVM>();

                        MasterVM = SelectAllList(0, new[] { "rh.ReceiveNo" }, new[] { ID }, currConn, transaction)
                            .FirstOrDefault();
                        DetailVMs = SelectReceiveDetail(ID, null, null, currConn, transaction);

                        string[] result = new string[] { };

                        result = ReceiveUpdate(MasterVM, DetailVMs, null, null, null, null, paramVM.CurrentUserID);

                        rVM.Status = result[0];
                        rVM.Message = result[1];
                    }
                }


                #endregion

                #region Transaction Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                rVM = new ResultVM();
                rVM.Message = ex.Message;

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("ReceiveDAL", "MultipleUpdate", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return rVM;
        }


        public string[] MultiplePost(string[] Ids, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction(MessageVM.PurchasemsgMethodNameUpdate);
                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);

                #endregion open connection and transaction

                for (int i = 0; i < Ids.Length; i++)
                {
                    if (string.IsNullOrEmpty(Ids[i]) || string.IsNullOrWhiteSpace(Ids[i])) continue;

                    ReceiveMasterVM master = SelectAllList(Convert.ToInt32(Ids[i]), null, null, currConn, transaction, null, connVM).FirstOrDefault();
                    master.Post = "Y";
                    retResults = ReceivePost(master, null, null, transaction, currConn, connVM, UserId);

                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException("", retResults[1]);
                    }
                }
                #region Commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion

            }
            #endregion

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                FileLogger.Log("ReceiveDAL", "MultiplePost", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #region Result
            return retResults;
            #endregion Result
        }

        public ResultVM MultiplePost(ReceiveMasterVM paramVM, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Declarations

            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                if (paramVM != null && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    foreach (string ID in paramVM.IDs)
                    {
                        ReceiveMasterVM MasterVM = new ReceiveMasterVM();
                        MasterVM = SelectAllList(0, new[] { "rh.ReceiveNo" }, new[] { ID }, currConn, transaction, null, connVM).FirstOrDefault();

                        MasterVM.Post = "Y";
                        string[] result = new string[] { };

                        result = ReceivePost(MasterVM, null, null, transaction, currConn, connVM, UserId);

                        rVM.Status = result[0];
                        rVM.Message = result[1];
                    }
                }


                #region Transaction Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }
            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                rVM = new ResultVM();
                rVM.Message = ex.Message;

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReceiveDAL", "MultiplePost", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return rVM;
        }

        #endregion

        #region Backup Methods

        #region Backup Methods / Jul-2020

        //currConn to VcurrConn 25-Aug-2020
        public string[] ReceiveInsertX(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, List<TrackingVM> Trackings, SqlTransaction Vtransaction, SqlConnection VcurrConn, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            var Id = "";
            PurchaseDAL purDal = new PurchaseDAL();
            IssueDAL issDal = new IssueDAL();
            SaleDAL salDal = new SaleDAL();

            //SqlConnection currConn = null;
            //SqlTransaction transaction = null;
            SqlConnection vcurrConn = VcurrConn;
            if (vcurrConn == null)
            {
                VcurrConn = null;
                Vtransaction = null;
            }
            int transResult = 0;
            string sqlText = "";
            string newID = "";
            string PostStatus = "";

            int IDExist = 0;
            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime VDate = DateTime.MinValue;
            string receiveDate = "";
            DateTime BOMDate = DateTime.MinValue; //start
            bool withoutBOM = false;
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";
            bool NegStockAllow = false;


            bool IsAutoFrom4_3 = false;

            #endregion Initializ

            #region Try
            try
            {


                #region Validation for Header


                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Please Check Invoice Data and Time");

                }




                #endregion Validation for Header
                #region open connection and transaction
                if (vcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }
                    Vtransaction = VcurrConn.BeginTransaction(MessageVM.receiveMsgMethodNameInsert);
                }

                CommonDAL commonDal = new CommonDAL();
                int IssuePlaceQty = 8;// Convert.ToInt32(commonDal.settings("Issue", "Quantity"));
                int IssuePlaceAmt = 8;//Convert.ToInt32(commonDal.settings("Issue", "Amount"));
                int ReceivePlaceAmt = 8;//Convert.ToInt32(commonDal.settings("Receive", "Amount"));


                string vIssueAutoPost = string.Empty;
                vIssueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost");
                if (string.IsNullOrEmpty(vIssueAutoPost))
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                }
                issueAutoPost = Convert.ToBoolean(vIssueAutoPost == "Y" ? true : false);
                if (issueAutoPost)
                    issueAutoPostValue = "Y";




                #endregion open connection and transaction
                #region Fiscal Year Check

                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, VcurrConn);
                    cmdIdExist.Transaction = Vtransaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, VcurrConn);
                    cmdYearNotExist.Transaction = Vtransaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK
                #region Find Transaction Exist

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders" +
                          " WHERE ReceiveNo=@MasterReceiveNo ";
                SqlCommand cmdExistTran = new SqlCommand(sqlText, VcurrConn);
                cmdExistTran.Transaction = Vtransaction;
                cmdExistTran.Parameters.AddWithValueAndNullHandle("@MasterReceiveNo", Master.ReceiveNo);

                IDExist = (int)cmdExistTran.ExecuteScalar();

                if (IDExist > 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgFindExistID);
                }

                #endregion Find Transaction Exist

                #region Purchase ID Create
                if (string.IsNullOrEmpty(Master.transactionType)) // start
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgTransactionNotDeclared);
                }
                #region Purchase ID Create For Other

                //CommonDAL commonDal = new CommonDAL();

                if (Master.transactionType == "Other" || Master.transactionType == "Tender")
                {
                    newID = commonDal.TransactionCode("Receive", "Other", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.transactionType == "WIP")
                {
                    newID = commonDal.TransactionCode("Receive", "WIP", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.transactionType == "TollFinishReceive")
                {
                    newID = commonDal.TransactionCode("TollFinishReceive", "TollFinishReceive", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.transactionType == "PackageProduction")
                {
                    newID = commonDal.TransactionCode("Receive", "Package", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.transactionType == "ReceiveReturn")
                {
                    newID = commonDal.TransactionCode("Receive", "ReceiveReturn", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                    #region Find Receive Return Date

                    sqlText = "";
                    sqlText = sqlText + "select ReceiveDateTime from ReceiveHeaders" +
                              " WHERE ReceiveNo=@MasterReturnId ";
                    SqlCommand cmdFindPDate = new SqlCommand(sqlText, VcurrConn);
                    cmdFindPDate.Transaction = Vtransaction;
                    cmdFindPDate.Parameters.AddWithValue("@MasterReturnId", Master.ReturnId);
                    if (cmdFindPDate.ExecuteScalar() == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgFindExistID);
                    }
                    else
                    {
                        previousReceiveDate = (DateTime)cmdFindPDate.ExecuteScalar();
                    }


                    #endregion  Find Receive Return Date
                }


                #endregion Purchase ID Create For Other


                #endregion Purchase ID Create Not Complete

                #region ID generated completed,Insert new Information in Header
                ReceiveMasterVM rmVM = new ReceiveMasterVM();
                rmVM.ReceiveNo = newID;
                rmVM.ShiftId = Master.ShiftId;
                rmVM.ReceiveDateTime = Master.ReceiveDateTime;
                rmVM.WithToll = Master.WithToll;
                rmVM.TotalAmount = Master.TotalAmount;
                rmVM.TotalVATAmount = Master.TotalVATAmount;
                rmVM.SerialNo = Master.SerialNo;
                rmVM.Comments = Master.Comments;
                rmVM.CreatedBy = Master.CreatedBy;
                rmVM.CreatedOn = Master.CreatedOn;
                rmVM.LastModifiedBy = Master.LastModifiedBy;
                rmVM.LastModifiedOn = Master.LastModifiedOn;
                rmVM.transactionType = Master.transactionType;
                rmVM.ReturnId = Master.ReturnId;
                rmVM.ImportId = Master.ImportId;
                rmVM.ReferenceNo = Master.ReferenceNo;
                rmVM.CustomerID = Master.CustomerID;
                rmVM.Post = Master.Post;

                rmVM.BranchId = Master.BranchId;
                retResults = ReceiveInsertToMaster(rmVM, VcurrConn, Vtransaction);

                Id = retResults[4];

                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                }


                //sqlText = "";
                //sqlText += " insert into ReceiveHeaders"; //Database Table name change
                //sqlText += " (";

                //sqlText += " ReceiveNo                                ,";
                //sqlText += " ShiftId                                ,";
                //sqlText += " ReceiveDateTime                                ,";
                //sqlText += " WithToll                                ,";
                //sqlText += " TotalAmount                                ,";
                //sqlText += " TotalVATAmount                                ,";
                //sqlText += " SerialNo                                ,";
                //sqlText += " Comments                                ,";
                //sqlText += " CreatedBy                                ,";
                //sqlText += " CreatedOn                                ,";
                //sqlText += " LastModifiedBy                                ,";
                //sqlText += " LastModifiedOn                                ,";
                //sqlText += " transactionType                                ,";
                //sqlText += " ReceiveReturnId                                ,";
                //sqlText += " ImportIDExcel                                ,";
                //sqlText += " ReferenceNo                                ,";
                //sqlText += " CustomerID                                ,";
                //sqlText += " Post                   ";
                //sqlText += " )";

                //sqlText += " values";
                //sqlText += " (";
                //sqlText += "'" + newID                                 + "',";
                //sqlText += "'" + Master.ShiftId                                 + "',";
                //sqlText += "'" + Master.ReceiveDateTime                                 + "',";
                //sqlText += "'" + Master.WithToll                                 + "',";
                //sqlText += "'" + Master.TotalAmount                                 + "',";
                //sqlText += "'" + Master.TotalVATAmount                                 + "',";
                //sqlText += "'" + Master.SerialNo                                 + "',";
                //sqlText += "'" + Master.Comments                                 + "',";
                //sqlText += "'" + Master.CreatedBy                                 + "',";
                //sqlText += "'" + Master.CreatedOn                                 + "',";
                //sqlText += "'" + Master.LastModifiedBy                                 + "',";
                //sqlText += "'" + Master.LastModifiedOn                                 + "',";
                //sqlText += "'" + Master.transactionType                                 + "',";
                //sqlText += "'" + Master.ReturnId                                 + "',";
                //sqlText += "'" + Master.ImportId                                 + "',";
                //sqlText += "'" + Master.ReferenceNo                                 + "',";
                //sqlText += "'" + Master.CustomerID                                 + "',";
                //sqlText += "'" + Master.Post                                 + "'";
                //sqlText += ")";


                //SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                //cmdInsert.Transaction = transaction;
                //transResult = (int)cmdInsert.ExecuteNonQuery();
                //if (transResult <= 0)
                //{
                //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgSaveNotSuccessfully);
                //}


                #endregion ID generated completed,Insert new Information in Header


                #region if Transection not Other Insert Issue /Receive

                #region Receive For BOM
                if (Master.FromBOM == "Y")
                {

                    string vNegStockAllow = string.Empty;
                    vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                    NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                    if (string.IsNullOrEmpty(vNegStockAllow))
                    {
                        throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                    }


                    if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn"
                        || Master.transactionType == "WIP" || Master.transactionType == "Tender"
                        || Master.transactionType == "TollFinishReceive")
                    {
                        #region Insert to Issue Header
                        IssueMasterVM issumVM = new IssueMasterVM();
                        issumVM.IssueNo = newID;
                        issumVM.ShiftId = Master.ShiftId;
                        issumVM.IssueDateTime = Master.ReceiveDateTime;
                        issumVM.TotalVATAmount = 0;
                        issumVM.TotalAmount = 0;
                        issumVM.SerialNo = Master.SerialNo;
                        issumVM.Comments = Master.Comments;
                        issumVM.CreatedBy = Master.CreatedBy;
                        issumVM.CreatedOn = Master.CreatedOn;
                        issumVM.LastModifiedBy = Master.LastModifiedBy;
                        issumVM.LastModifiedOn = Master.LastModifiedOn;
                        issumVM.ReceiveNo = Master.ReceiveNo;
                        issumVM.transactionType = Master.transactionType;
                        issumVM.ReturnId = Master.ReturnId;
                        issumVM.Post = issueAutoPostValue;
                        issumVM.BranchId = Master.BranchId;

                        if (IsAutoFrom4_3 == false)
                        {
                            retResults = issDal.IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);
                        }
                        else
                        {
                            retResults = new IssueBOMDAL().IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);

                        }


                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                        }

                        #endregion Insert to Issue Header

                    }
                    else if (Master.transactionType == "PackageProduction")// insert into sale header
                    {
                        #region Insert to Issue Header

                        IssueMasterVM issumVM = new IssueMasterVM();
                        issumVM.IssueNo = newID;
                        issumVM.ShiftId = Master.ShiftId;
                        issumVM.IssueDateTime = Master.ReceiveDateTime;
                        issumVM.TotalVATAmount = 0;
                        issumVM.TotalAmount = 0;
                        issumVM.SerialNo = Master.SerialNo;
                        issumVM.Comments = Master.Comments;
                        issumVM.CreatedBy = Master.CreatedBy;
                        issumVM.CreatedOn = Master.CreatedOn;
                        issumVM.LastModifiedBy = Master.LastModifiedBy;
                        issumVM.LastModifiedOn = Master.LastModifiedOn;
                        issumVM.ReceiveNo = Master.ReceiveNo;
                        issumVM.transactionType = Master.transactionType;
                        issumVM.ReturnId = Master.ReturnId;
                        issumVM.Post = issueAutoPostValue;
                        issumVM.BranchId = Master.BranchId;

                        if (IsAutoFrom4_3 == false)
                        {

                            retResults = issDal.IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);
                        }
                        else
                        {
                            retResults = new IssueBOMDAL().IssueInsertToMaster(issumVM, VcurrConn, Vtransaction);
                        }

                        if (retResults[0] != "Success")
                        {

                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                        }

                        #endregion Insert to Issue Header
                        #region Insert to SalesInvoiceHeaders Header
                        SaleMasterVM smVM = new SaleMasterVM();
                        smVM.SalesInvoiceNo = newID;
                        smVM.ShiftId = Master.ShiftId;
                        smVM.CustomerID = "0";
                        smVM.DeliveryAddress1 = "NA";
                        smVM.DeliveryAddress2 = "NA";
                        smVM.DeliveryAddress3 = "NA";
                        smVM.VehicleID = "NA";
                        smVM.InvoiceDateTime = Master.ReceiveDateTime;
                        smVM.TotalAmount = Master.TotalAmount;
                        smVM.TotalVATAmount = Master.TotalVATAmount;
                        smVM.SerialNo = Master.SerialNo;
                        smVM.Comments = Master.Comments;
                        smVM.CreatedBy = Master.CreatedBy;
                        smVM.CreatedOn = Master.CreatedOn;
                        smVM.LastModifiedBy = Master.LastModifiedBy;
                        smVM.LastModifiedOn = Master.LastModifiedOn;
                        smVM.SaleType = "New";
                        smVM.PreviousSalesInvoiceNo = Master.ReturnId;
                        smVM.Trading = "N";
                        smVM.IsPrint = "N";
                        smVM.TenderId = "0";
                        smVM.TransactionType = Master.transactionType;
                        smVM.DeliveryDate = Master.ReceiveDateTime;
                        smVM.ReturnId = Master.ReturnId;
                        smVM.CurrencyID = "260";
                        smVM.CurrencyRateFromBDT = 0;
                        smVM.Post = Master.Post;
                        smVM.BranchId = Master.BranchId;
                        retResults = salDal.SalesInsertToMaster(smVM, VcurrConn, Vtransaction);

                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                        }


                        #endregion Insert to SalesInvoiceHeaders Header
                    }

                }

                #endregion Receive For BOM //////IssueBOM

                #endregion if Transection not Other Insert Issue /Receive

                #region Insert into Details(Insert complete in Header)
                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }


                #endregion Validation for Detail

                #region Insert Detail Table

                foreach (var Item in Details.ToList())
                {
                    #region Find Transaction Exist

                    sqlText = "";
                    sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo='" + newID + "' ";
                    sqlText += " AND ItemNo=@ItemItemNo";
                    SqlCommand cmdFindId = new SqlCommand(sqlText, VcurrConn);
                    cmdFindId.Transaction = Vtransaction;
                    cmdFindId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                    IDExist = (int)cmdFindId.ExecuteScalar();

                    if (IDExist > 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                        MessageVM.receiveMsgFindExistID);
                    }

                    #endregion Find Transaction Exist
                    #region USD calculate

                    string[] usdResults = GetUSDCurrency(Item.SubTotal);
                    #endregion USD calculate
                    #region Insert only DetailTable
                    ReceiveDetailVM rdVM = new ReceiveDetailVM();
                    rdVM.ReceiveNo = newID;
                    rdVM.ReceiveLineNo = Item.ReceiveLineNo;
                    rdVM.ItemNo = Item.ItemNo;
                    rdVM.Quantity = Item.Quantity;
                    rdVM.CostPrice = Item.CostPrice;
                    rdVM.NBRPrice = Item.NBRPrice;
                    rdVM.UOM = Item.UOM;
                    rdVM.VATRate = Item.VATRate;
                    rdVM.VATAmount = Item.VATAmount;
                    rdVM.SubTotal = Item.SubTotal;
                    rdVM.CommentsD = Item.CommentsD;
                    rdVM.CreatedBy = Master.CreatedBy;
                    rdVM.CreatedOn = Master.CreatedOn;
                    rdVM.LastModifiedBy = Master.LastModifiedBy;
                    rdVM.LastModifiedOn = Master.LastModifiedOn;
                    rdVM.SD = Item.SD;
                    rdVM.SDAmount = Item.SDAmount;
                    rdVM.ReceiveDateTime = Master.ReceiveDateTime;
                    rdVM.transactionType = Master.transactionType;
                    rdVM.ReturnId = Master.ReturnId;
                    rdVM.BOMId = Item.BOMId;
                    rdVM.UOMPrice = Item.UOMPrice;
                    rdVM.UOMQty = Item.UOMQty;
                    rdVM.UOMn = Item.UOMn;
                    rdVM.UOMc = Item.UOMc;
                    rdVM.VatName = Item.VatName;
                    rdVM.CurrencyValue = Convert.ToDecimal(usdResults[0]);
                    rdVM.DollerValue = Convert.ToDecimal(usdResults[1]);
                    if (Master.transactionType == "ReceiveReturn")
                    {
                        rdVM.ReturnTransactionType = Item.ReturnTransactionType;
                    }

                    rdVM.Post = Master.Post;
                    rdVM.BranchId = Master.BranchId;
                    retResults = ReceiveInsertToDetail(rdVM, VcurrConn, Vtransaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                    }
                    #endregion Insert only DetailTable  //done

                    //done
                    if (Master.transactionType == "ReceiveReturn")

                        //receiveDate = previousReceiveDate.Date;
                        receiveDate = previousReceiveDate.Date.ToString("yyyy/MM/dd");
                    else
                    {
                        VDate = Convert.ToDateTime(Master.ReceiveDateTime);
                        receiveDate = VDate.Date.ToString("yyyy/MM/dd");
                    }
                    #region TollReceive
                    if (Master.transactionType == "ReceiveReturn" && Item.ReturnTransactionType == "TollReceive")
                    {
                        ProductDAL productDal = new ProductDAL();
                        DataTable TollItemInfo = productDal.SearchRawItemNo(Master.ReturnId);

                        string TollItem;
                        decimal TollUnitCost = 0;

                        TollItem = TollItemInfo.Rows[0]["ItemNo"].ToString();
                        TollUnitCost = Convert.ToDecimal(TollItemInfo.Rows[0]["CostPrice"].ToString());

                        #region Insert to Issue 16 out
                        IssueDetailVM isdVM = new IssueDetailVM();
                        isdVM.BOMId = Item.BOMId;

                        isdVM.IssueNo = newID;
                        isdVM.IssueLineNo = "10";
                        isdVM.ItemNo = TollItem;
                        isdVM.Quantity = Item.Quantity;
                        isdVM.NBRPrice = 0;
                        isdVM.CostPrice = TollUnitCost;
                        isdVM.UOM = Item.UOM;
                        isdVM.VATRate = 0;
                        isdVM.VATAmount = 0;
                        isdVM.SubTotal = TollUnitCost;
                        isdVM.CreatedBy = Master.CreatedBy;
                        isdVM.CreatedOn = Master.CreatedOn;
                        isdVM.LastModifiedBy = Master.LastModifiedBy;
                        isdVM.LastModifiedOn = Master.LastModifiedOn;
                        isdVM.ReceiveNo = newID;
                        isdVM.IssueDateTime = Master.ReceiveDateTime;
                        isdVM.SD = 0;
                        isdVM.SDAmount = 0;
                        isdVM.Wastage = 0;
                        isdVM.BOMDate = "1900/01/01";
                        isdVM.FinishItemNo = "0";
                        isdVM.transactionType = "TollReceiveReturn";
                        isdVM.IssueReturnId = Master.ReturnId;
                        isdVM.UOMQty = Item.UOMQty;
                        isdVM.UOMPrice = Item.UOMPrice;
                        isdVM.UOMc = Item.UOMc;
                        isdVM.UOMn = Item.UOMn;
                        isdVM.UOMWastage = 0;
                        isdVM.Post = Master.Post;
                        isdVM.BranchId = Master.BranchId;
                        retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }




                        #endregion Insert to Issue




                    }
                    #endregion TollReceive

                    #region Transaction is FromBOM

                    if (Master.FromBOM == "Y")
                    {

                        ProductDAL productDal = new ProductDAL();

                        //////BomId = string.Empty;
                        BOMDate = DateTime.MinValue;
                        string bomDate = "";

                        #region Comments 12-Sep-2019

                        ////#region Last BOMId

                        ////sqlText = "  ";
                        ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId from BOMs";
                        ////sqlText += " where ";
                        ////sqlText += " FinishItemNo=@ItemItemNo ";
                        ////sqlText += " and vatname=@ItemVatName ";
                        ////sqlText += " and effectdate<='" + receiveDate + "'";
                        ////sqlText += " and post='Y' ";
                        ////if (Master.CustomerID != "0")
                        ////{
                        ////    sqlText += " and CustomerID=@MasterCustomerID ";
                        ////}
                        ////sqlText += " order by effectdate desc ";

                        ////SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                        ////cmdBomId.Transaction = transaction;
                        ////cmdBomId.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                        ////cmdBomId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                        ////cmdBomId.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                        ////if (cmdBomId.ExecuteScalar() == null)
                        ////{
                        ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                        ////                                    "No Price declaration found for this item");
                        ////    BomId = "0";
                        ////}
                        ////else
                        ////{
                        ////    BomId = (string)cmdBomId.ExecuteScalar();
                        ////}

                        ////#endregion Last BOMId

                        ////#region Last BOMDate

                        ////sqlText = "  ";
                        ////sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                        ////sqlText += " where FinishItemNo=@ItemItemNo ";
                        ////sqlText += " and vatname=@ItemVatName ";
                        ////sqlText += " and effectdate<='" + receiveDate + "'";
                        ////sqlText += " and post='Y' ";
                        ////if (Master.CustomerID != "0")
                        ////{
                        ////    sqlText += " and CustomerID=@MasterCustomerID ";
                        ////}
                        ////sqlText += " order by effectdate desc ";

                        ////SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                        ////cmdBomEDate.Transaction = transaction;
                        ////cmdBomEDate.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                        ////cmdBomEDate.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                        ////cmdBomEDate.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                        ////if (cmdBomEDate.ExecuteScalar() == null)
                        ////{
                        ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                        ////                                    "No Price declaration found for this item");
                        ////    BOMDate = DateTime.MinValue;
                        ////    bomDate = BOMDate.Date.ToString("yyyy/MM/dd 00:00:00");
                        ////}
                        ////else
                        ////{
                        ////    BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                        ////    bomDate = BOMDate.Date.ToString("yyyy/MM/dd 00:00:00");
                        ////}

                        ////#endregion Last BOMDate
                        #endregion


                        if (Item.BOMId > 0)
                        {
                            BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                            vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                            BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                        }



                        if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" ||
                            Master.transactionType == "WIP")
                        {
                            #region Find Raw Item From BOM  and update Stock

                            //sss
                            sqlText = "";
                            sqlText +=
                                " SELECT  b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ," +
                                "b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty,b.TransactionType from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId";////'" + Item.BOMId + "' ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='wip' or rawitemtype='finish' or rawitemtype='export') ";


                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                            #region Comments


                            //////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    sqlText += " and CustomerID=@MasterCustomerID ";
                            //////}

                            //////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='wip' or rawitemtype='finish' or rawitemtype='export') ";



                            //////DataTable dataTable = new DataTable("RIFB");
                            //////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            //////cmdRIFB.Transaction = transaction;
                            //////cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);

                            #endregion


                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no Item for Auto Consumption for the Item Name (" + Item.ItemName + ") and Item Code (" + Item.ItemCode + ") in price declaration.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                decimal vStock = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Declare

                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    //////string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    string vTransactionType = "";

                                    #endregion Declare

                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false, true, true, true, connVM, UserId);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    #region Issue Settings
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);
                                    #endregion Issue Settings

                                    rwUom = BRItem["Uom"].ToString();

                                    var rwMajorUom = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwMajorUom, rwUom, "Y", VcurrConn, Vtransaction); //uomc


                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                    vTransactionType = BRItem["TransactionType"].ToString();
                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        var stock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                               Master.ReceiveDateTime,
                                                             VcurrConn, Vtransaction, false, true, true, true, connVM, UserId).Rows[0]["Quantity"].ToString());

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock

                                    #endregion Find Quantity From Products


                                    #region Find Quantity From Transaction
                                    IssueDetailVM isdVM = new IssueDetailVM();
                                    isdVM.IssueNo = newID;
                                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                                    isdVM.ItemNo = v1RawItemNo;
                                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    isdVM.NBRPrice = AvgRate;
                                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    isdVM.UOM = v1UOM;
                                    isdVM.VATRate = 0;
                                    isdVM.VATAmount = 0;
                                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    isdVM.CommentsD = Item.CommentsD;
                                    isdVM.CreatedBy = Master.CreatedBy;
                                    isdVM.CreatedOn = Master.CreatedOn;
                                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                                    isdVM.ReceiveNo = newID;
                                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                                    isdVM.SD = 0;
                                    isdVM.SDAmount = 0;
                                    isdVM.Wastage = v1Wastage;
                                    isdVM.BOMDate = Convert.ToDateTime(v1BOMDate).ToString("MM/dd/yyyy");
                                    isdVM.FinishItemNo = v1FinishItemNo;
                                    if (vTransactionType.Trim() == "TollReceiveRaw")
                                    {
                                        isdVM.transactionType = vTransactionType.Trim();
                                    }
                                    else
                                    {
                                        //var Ptype = productDal.ProductDTByItemNo(v1RawItemNo, "", currConn, transaction).Rows[0]["TollProduct"];
                                        //if (Ptype.ToString().ToLower() == "y")
                                        //{
                                        //    isdVM.transactionType = Master.transactionType + "Toll";

                                        //}
                                        //if (Master.WithToll == "Y")
                                        //{
                                        //    isdVM.transactionType = Master.transactionType + "Toll";
                                        //}
                                        //else
                                        //{
                                        isdVM.transactionType = Master.transactionType;
                                        //}
                                    }

                                    isdVM.IssueReturnId = Master.ReturnId;
                                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    isdVM.UOMc = v1UOMc;
                                    isdVM.UOMn = v1UOMn;
                                    isdVM.UOMWastage = v1UOMWastage;
                                    isdVM.BOMId = Item.BOMId;//// Convert.ToInt32(v1BOMId);
                                    isdVM.Post = issueAutoPostValue;
                                    isdVM.BranchId = Master.BranchId;



                                    if (IsAutoFrom4_3 == false)
                                    {
                                        var WithToll = Master.WithToll;
                                        var Ptype = productDal.ProductDTByItemNo(v1RawItemNo, "", VcurrConn, Vtransaction).Rows[0]["TollProduct"];
                                        if (WithToll.ToString().ToLower() == "y")
                                        {
                                            if (Ptype.ToString().ToLower() == "y")
                                            {
                                                isdVM.transactionType = Master.transactionType + "Toll";

                                            }
                                            retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                        }
                                        else
                                        {

                                            if (Ptype.ToString().ToLower() != "y")
                                            {
                                                retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                            }
                                        }

                                    }
                                    else
                                    {
                                        retResults = new IssueBOMDAL().IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);

                                    }

                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue

                                    if (IsAutoFrom4_3 == false)
                                    {

                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= '" + newID + "')";
                                    }
                                    else
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaderBOMs set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs ";
                                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                        sqlText += " where (IssueHeaderBOMs.IssueNo= '" + newID + "')";
                                    }
                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock

                        }
                        else if (Master.transactionType == "Tender")
                        {
                            #region Declare

                            decimal v1Quantity = 0;
                            string v1RawItemNo = "";
                            decimal v1CostPrice = 0;
                            string v1UOM = "";
                            decimal v1SubTotal = 0;
                            decimal v1Wastage = 0;
                            DateTime v1BOMDate = DateTime.Now.Date;
                            string v1FinishItemNo = "";

                            decimal v1UOMQty = 0;
                            decimal v1UOMPrice = 0;
                            decimal v1UOMc = 0;
                            string v1UOMn = "";
                            //////string v1BOMId = "";
                            decimal v1UOMWastage = 0;

                            #endregion Declare

                            #region Find Raw Item From BOM  and update Stock
                            #region Insert into Issue

                            sqlText = "";


                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ," +
                                "b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finish') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                            #region Comments

                            //////sqlText += " FinishItemNo=@ItemItemNo ";
                            //////sqlText += " and vatname=@ItemVatName ";
                            //////sqlText += " and effectdate='" + bomDate + "'";
                            //////sqlText += " and post='Y' ";
                            //////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    sqlText += " and CustomerID=@MasterCustomerID ";
                            //////}

                            //////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finish') ";


                            //////DataTable dataTable = new DataTable("RIFB");
                            //////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            //////cmdRIFB.Transaction = transaction;
                            //////cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            //////cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            //////cmdRIFB.Parameters.AddWithValue("@ItemVatName", Item.VatName);

                            #endregion

                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    #region Issue Settings
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);
                                    #endregion Issue Settings



                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = Item.BOMId.ToString();
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;

                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                              Master.ReceiveDateTime,
                                                            VcurrConn, Vtransaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock



                                    #region Find Quantity From Transaction

                                    IssueDetailVM isdVM = new IssueDetailVM();
                                    isdVM.IssueNo = newID;
                                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                                    isdVM.ItemNo = v1RawItemNo;
                                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    isdVM.NBRPrice = AvgRate;
                                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    isdVM.UOM = v1UOM;
                                    isdVM.VATRate = 0;
                                    isdVM.VATAmount = 0;
                                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    isdVM.CommentsD = Item.CommentsD;
                                    isdVM.CreatedBy = Master.CreatedBy;
                                    isdVM.CreatedOn = Master.CreatedOn;
                                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                                    isdVM.ReceiveNo = newID;
                                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                                    isdVM.SD = 0;
                                    isdVM.SDAmount = 0;
                                    isdVM.Wastage = v1Wastage;
                                    isdVM.BOMDate = v1BOMDate.ToString();
                                    isdVM.FinishItemNo = v1FinishItemNo;
                                    isdVM.transactionType = Master.transactionType;
                                    isdVM.IssueReturnId = Master.ReturnId;
                                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    isdVM.UOMc = v1UOMc;
                                    isdVM.UOMn = v1UOMn;
                                    isdVM.UOMWastage = v1UOMWastage;
                                    isdVM.BOMId = Item.BOMId;//// Convert.ToInt32(v1BOMId);
                                    isdVM.Post = issueAutoPostValue;
                                    isdVM.BranchId = Master.BranchId;


                                    if (IsAutoFrom4_3 == false)
                                    {
                                        retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                    }
                                    else
                                    {
                                        retResults = new IssueBOMDAL().IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);

                                    }

                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue
                                    if (IsAutoFrom4_3 == false)
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= '" + newID + "')";
                                    }
                                    else
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaderBOMs set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs";
                                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                        sqlText += " where (IssueHeaderBOMs.IssueNo= '" + newID + "')";
                                    }

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }
                            #endregion Insert into Issue

                            #endregion Find Raw Item From BOM and update Stock
                        }


                    #endregion Transaction is FromBOM //////IssueBOM

                        #region TollFinishReceive

                        else if (Master.transactionType == "TollFinishReceive")
                        {
                            #region TollFinishReceive


                            //////BomId = string.Empty; //BOMId
                            BOMDate = DateTime.MinValue;
                            #region 12-Sep-2019


                            ////#region Last BOMId

                            ////sqlText = "  ";
                            ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId  from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            ////sqlText += " and effectdate<='" + receiveDate + "'";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}
                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomId1 = new SqlCommand(sqlText, currConn);
                            ////cmdBomId1.Transaction = transaction;
                            ////cmdBomId1.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////cmdBomId1.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////if (cmdBomId1.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BomId = "0";
                            ////}
                            ////else
                            ////{
                            ////    BomId = (string)cmdBomId1.ExecuteScalar();
                            ////}

                            ////#endregion Last BOMId

                            ////#region Last BOMDate

                            ////sqlText = "  ";
                            ////sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            ////sqlText += " and effectdate<='" + receiveDate + "'";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}
                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomEDate1 = new SqlCommand(sqlText, currConn);
                            ////cmdBomEDate1.Transaction = transaction;
                            ////cmdBomEDate1.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////cmdBomEDate1.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////if (cmdBomEDate1.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BOMDate = DateTime.MinValue;
                            ////    bomDate = DateTime.MinValue.ToString("yyyy/MM/dd 00:00:00");
                            ////}
                            ////else
                            ////{
                            ////    BOMDate = (DateTime)cmdBomEDate1.ExecuteScalar();
                            ////    bomDate = BOMDate.Date.ToString("yyyy/MM/dd 00:00:00");
                            ////}

                            ////#endregion Last BOMDate
                            #endregion

                            if (Item.BOMId > 0)
                            {
                                BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                                BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                            }


                            #region Find Raw Item From BOM  and update Stock

                            sqlText = "";

                            //NeedChange

                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn,Cost ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty  from BOMRaws b  ";
                            sqlText += " where 1=1";
                            sqlText += " and BOMId=@BOMId";////'" + Item.BOMId + "'";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finish') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                            #region Comments

                            //////sqlText += " and BomId='" + Item.BOMId + "'";
                            //////sqlText += " and post='Y' ";
                            //sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                            //if (Master.CustomerID != "0")
                            //{
                            //    sqlText += " and CustomerID=@MasterCustomerID ";
                            //}

                            //////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finish') ";

                            //////DataTable dataTable = new DataTable("RIFB");
                            //////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            //////cmdRIFB.Transaction = transaction;
                            //////cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            //////cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);

                            #endregion


                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                #region Declare

                                decimal v1Quantity = 0;
                                string v1RawItemNo = "";
                                decimal v1CostPrice = 0;
                                string v1UOM = "";
                                decimal v1SubTotal = 0;
                                decimal v1Wastage = 0;
                                DateTime v1BOMDate = DateTime.Now.Date;
                                string v1FinishItemNo = "";

                                decimal v1UOMQty = 0;
                                decimal v1UOMPrice = 0;
                                decimal v1UOMc = 0;
                                string v1UOMn = "";
                                ////string v1BOMId = "";
                                decimal v1UOMWastage = 0;

                                #endregion Declare

                                decimal vQuantity = 0;
                                decimal vWastage = 0;

                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;


                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }
                                    AvgRate = Convert.ToDecimal(BRItem["Cost"].ToString());
                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    #region Issue Settings
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);
                                    #endregion Issue Settings

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);

                                    #endregion Find Quantity From Products

                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                              Master.ReceiveDateTime,
                                                            VcurrConn, Vtransaction, false).Rows[0]["Quantity"].ToString();


                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock

                                    #region Find Quantity From Transaction

                                    IssueDetailVM isdVM = new IssueDetailVM();
                                    isdVM.IssueNo = newID;
                                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                                    isdVM.ItemNo = v1RawItemNo;
                                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    isdVM.NBRPrice = AvgRate;
                                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    isdVM.UOM = v1UOM;
                                    isdVM.VATRate = 0;
                                    isdVM.VATAmount = 0;
                                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    isdVM.CommentsD = Item.CommentsD;
                                    isdVM.CreatedBy = Master.CreatedBy;
                                    isdVM.CreatedOn = Master.CreatedOn;
                                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                                    isdVM.ReceiveNo = newID;
                                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                                    isdVM.SD = 0;
                                    isdVM.SDAmount = 0;
                                    isdVM.Wastage = v1Wastage;
                                    isdVM.BOMDate = v1BOMDate.ToString();
                                    isdVM.FinishItemNo = v1FinishItemNo;
                                    isdVM.transactionType = Master.transactionType;
                                    if (AvgRate == 0)
                                    {
                                        isdVM.transactionType = Master.transactionType;
                                    }

                                    isdVM.transactionType = Master.transactionType;
                                    isdVM.IssueReturnId = Master.ReturnId;
                                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    isdVM.UOMc = v1UOMc;
                                    isdVM.UOMn = v1UOMn;
                                    isdVM.UOMWastage = v1UOMWastage;
                                    isdVM.BOMId = Item.BOMId;//// Convert.ToInt32(v1BOMId);
                                    isdVM.Post = issueAutoPostValue;
                                    isdVM.BranchId = Master.BranchId;


                                    retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update IssueHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                    sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                    sqlText += " where (IssueHeaders.IssueNo= '" + newID + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock

                            #endregion TollFinishReceive

                        }


                        #endregion TollFinishReceive

                        #region PackageProduction

                        else if (Master.transactionType == "PackageProduction")
                        {
                            #region TollFinishReceive

                            ////BomId = string.Empty; //BOMId
                            BOMDate = DateTime.MinValue;
                            #region 12-Sep-2019


                            ////#region Last BOMId

                            ////sqlText = "  ";
                            ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId  from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Package)' ";
                            ////sqlText += " and effectdate<='" + receiveDate + "'";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomId1 = new SqlCommand(sqlText, currConn);
                            ////cmdBomId1.Transaction = transaction;
                            ////cmdBomId1.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////cmdBomId1.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////if (cmdBomId1.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BomId = "0";
                            ////}
                            ////else
                            ////{
                            ////    BomId = (string)cmdBomId1.ExecuteScalar();
                            ////}

                            ////#endregion Last BOMId

                            ////#region Last BOMDate

                            ////sqlText = "  ";
                            ////sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Package)' ";
                            ////sqlText += " and effectdate<='" + receiveDate + "'";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomEDate1 = new SqlCommand(sqlText, currConn);
                            ////cmdBomEDate1.Transaction = transaction;
                            ////cmdBomEDate1.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////cmdBomEDate1.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////if (cmdBomEDate1.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BOMDate = DateTime.MinValue;
                            ////    bomDate = BOMDate.Date.ToString("yyyy/MM/dd 00:00:00");
                            ////}
                            ////else
                            ////{
                            ////    BOMDate = (DateTime)cmdBomEDate1.ExecuteScalar();
                            ////    bomDate = BOMDate.Date.ToString("yyyy/MM/dd 00:00:00");
                            ////}

                            ////#endregion Last BOMDate
                            #endregion

                            if (Item.BOMId > 0)
                            {
                                BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                                BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                            }

                            #region Find Raw Item From BOM  and update Stock
                            #region Finish

                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty  from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='finish') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                            cmdRIFB.Transaction = Vtransaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                            #region Comments


                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Package)' ";
                            ////sqlText += " and effectdate='" + bomDate + "'";
                            ////sqlText += " and post='Y' ";
                            ////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}

                            ////sqlText += "   and (rawitemtype='finish') ";

                            ////DataTable dataTable = new DataTable("RIFB");
                            ////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            ////cmdRIFB.Transaction = transaction;
                            ////cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            #endregion


                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                #region Declare

                                decimal v1Quantity = 0;
                                string v1RawItemNo = "";
                                decimal v1CostPrice = 0;
                                string v1UOM = "";
                                decimal v1SubTotal = 0;
                                decimal v1UOMQty = 0;
                                decimal v1UOMPrice = 0;
                                decimal v1UOMc = 0;
                                string v1UOMn = "";
                                #endregion Declare

                                decimal vQuantity = 0;
                                decimal vWastage = 0;

                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    decimal nbrPriceFromBom = productDal.GetLastNBRPriceFromBOM_VatName(BRItem["RawItemNo"].ToString(),
                                                                  "VAT 1", Master.ReceiveDateTime,
                                                                  null, null);

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());



                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);

                                    #endregion Find Quantity From Products

                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                         Master.ReceiveDateTime,
                                       VcurrConn, Vtransaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock

                                    #region Find Quantity From Transaction
                                    SaleDetailVm sdVM = new SaleDetailVm();
                                    sdVM.SalesInvoiceNo = newID;
                                    sdVM.InvoiceLineNo = Item.ReceiveLineNo;
                                    sdVM.ItemNo = v1RawItemNo;
                                    sdVM.Quantity = v1Quantity;
                                    sdVM.PromotionalQuantity = 0;
                                    sdVM.SalesPrice = nbrPriceFromBom;
                                    sdVM.NBRPrice = nbrPriceFromBom;
                                    sdVM.AvgRate = AvgRate;
                                    sdVM.UOM = v1UOM;
                                    sdVM.VATRate = 0;
                                    sdVM.VATAmount = 0;
                                    sdVM.SubTotal = v1SubTotal;
                                    sdVM.CommentsD = Item.CommentsD;
                                    sdVM.CreatedBy = Master.CreatedBy;
                                    sdVM.CreatedOn = Master.CreatedOn;
                                    sdVM.LastModifiedBy = Master.LastModifiedBy;
                                    sdVM.LastModifiedOn = Master.LastModifiedOn;
                                    sdVM.SD = 0;
                                    sdVM.SDAmount = 0;
                                    sdVM.SaleTypeD = "New";
                                    sdVM.PreviousSalesInvoiceNoD = Master.ReturnId;
                                    sdVM.TradingD = "N";
                                    sdVM.NonStockD = "N";
                                    sdVM.TradingMarkUp = 0;
                                    sdVM.InvoiceDateTime = Master.ReceiveDateTime;
                                    sdVM.Type = "VAT";
                                    sdVM.TransactionType = Master.transactionType;
                                    sdVM.ReturnId = Master.ReturnId;
                                    sdVM.Post = Master.Post;
                                    sdVM.UOMQty = v1UOMQty;
                                    sdVM.UOMn = v1UOMn;
                                    sdVM.UOMc = v1UOMc;
                                    sdVM.DiscountAmount = 0;
                                    sdVM.DiscountedNBRPrice = nbrPriceFromBom;
                                    sdVM.DollerValue = 0;
                                    sdVM.CurrencyValue = nbrPriceFromBom;
                                    sdVM.FinishItemNo = Item.ItemNo;
                                    sdVM.UOMPrice = v1UOMPrice;
                                    sdVM.BranchId = Master.BranchId;

                                    retResults = salDal.SalesInsertToDetail(sdVM, VcurrConn, Vtransaction);
                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }

                                    //sqlText = "";
                                    //sqlText += " insert into SalesInvoiceDetails(";
                                    //sqlText += " SalesInvoiceNo                                ,";
                                    //sqlText += " InvoiceLineNo                                ,";
                                    //sqlText += " ItemNo                                ,";
                                    //sqlText += " Quantity                                ,";
                                    //sqlText += " PromotionalQuantity                                ,";
                                    //sqlText += " SalesPrice                                ,";
                                    //sqlText += " NBRPrice                                ,";
                                    //sqlText += " AVGPrice                                ,";
                                    //sqlText += " UOM                                ,";
                                    //sqlText += " VATRate                                ,";
                                    //sqlText += " VATAmount                                ,";
                                    //sqlText += " SubTotal                                ,";
                                    //sqlText += " Comments                                ,";
                                    //sqlText += " CreatedBy                                ,";
                                    //sqlText += " CreatedOn                                ,";
                                    //sqlText += " LastModifiedBy                                ,";
                                    //sqlText += " LastModifiedOn                                ,";
                                    //sqlText += " SD                                ,";
                                    //sqlText += " SDAmount                                ,";
                                    //sqlText += " SaleType                                ,";
                                    //sqlText += " PreviousSalesInvoiceNo                                ,";
                                    //sqlText += " Trading                                ,";
                                    //sqlText += " NonStock                                ,";
                                    //sqlText += " TradingMarkUp                                ,";
                                    //sqlText += " InvoiceDateTime                                ,";
                                    //sqlText += " Type                                ,";
                                    //sqlText += " TransactionType                                ,";
                                    //sqlText += " SaleReturnId                                ,";
                                    //sqlText += " Post                                ,";
                                    //sqlText += " UOMQty                                ,";
                                    //sqlText += " UOMn                                ,";
                                    //sqlText += " UOMc                                ,";
                                    //sqlText += " DiscountAmount                                ,";
                                    //sqlText += " DiscountedNBRPrice                                ,";
                                    //sqlText += " DollerValue                                ,";
                                    //sqlText += " CurrencyValue                                ,";
                                    //sqlText += " FinishItemNo                                ,";
                                    //sqlText += " UOMPrice                       ";
                                    //sqlText += " )";
                                    //sqlText += " values(	";
                                    //sqlText += "'" +  newID                                 + "',";//sqlText                                 += "'"                                 + newID                                 + "',";
                                    //sqlText += " '" + Item.ReceiveLineNo                                 + "', ";//sqlText                                 += " '"                                 + Item.InvoiceLineNo                                 + "', ";
                                    //sqlText += " '" + v1RawItemNo                                 + "', ";//sqlText                                 += " '"                                 + Item.ItemNo                                 + " ',";
                                    //sqlText += " '" + v1Quantity                                 + "', ";//sqlText                                 += " '"                                 + Item.Quantity                                 + " ',";
                                    //sqlText += " 0, ";//sqlText                                 += " '"                                 + Item.PromotionalQuantity                                 + " ',";
                                    //sqlText += " '" + nbrPriceFromBom                                 + "', ";//sqlText                                 += " '"                                 + Item.SalesPrice                                 + " ',";
                                    //sqlText += " '" + nbrPriceFromBom                                 + "', ";//sqlText                                 += " '"                                 + Item.NBRPrice                                 + " ',";
                                    //sqlText += " '" + AvgRate                                 + "', ";//sqlText                                 += " '"                                 + AvgRate                                 + " ',";
                                    //sqlText += " '" + v1UOM                                 + "', ";//sqlText                                 += " '"                                 + Item.UOM                                 + " ',";
                                    //sqlText += " '0', ";//sqlText                                 += " '"                                 + Item.VATRate                                 + " ',";
                                    //sqlText += " '0', ";//sqlText                                 += " '"                                 + Item.VATAmount                                 + " ',";
                                    //sqlText += " '" + v1SubTotal                                 + "', ";//sqlText                                 += " '"                                 + Item.SubTotal                                 + " ',";
                                    //sqlText += " '" + Item.CommentsD                                 + "', ";//sqlText                                 += " '"                                 + Item.CommentsD                                 + " ',";
                                    //sqlText += " '" + Master.CreatedBy                                 + "', ";//sqlText                                 += " '"                                 + Master.CreatedBy                                 + " ',";
                                    //sqlText += " '" + Master.CreatedOn                                 + "', ";//sqlText                                 += " '"                                 + Master.CreatedOn                                 + " ',";
                                    //sqlText += " '" + Master.LastModifiedBy                                 + "', ";//sqlText                                 += " '"                                 + Master.LastModifiedBy + " ',";
                                    //sqlText += " '" + Master.LastModifiedOn                                 + "', ";//sqlText                                 += " '"                                 + Master.LastModifiedOn + " ',";
                                    //sqlText += " '0', ";//sqlText                                 += " '"                                 + Item.SD                                 + " ',";
                                    //sqlText += " '0', ";//sqlText                                 += " '"                                 + Item.SDAmount                                 + " ',";
                                    //sqlText += " 'New', ";//sqlText                                 += " '"                                 + Item.SaleTypeD                                 + " ',";
                                    //sqlText += " '" + Master.ReturnId                                 + "', ";//sqlText                                 += " '"                                 + Item.PreviousSalesInvoiceNoD + " ',";
                                    //sqlText += " 'N', ";//sqlText                                 += " '"                                 + Item.TradingD                                 + " ',";
                                    //sqlText += " 'N', ";//sqlText                                 += " '"                                 + Item.NonStockD                                 + " ',";
                                    //sqlText += " '0', ";//sqlText                                 += " '"                                 + Item.TradingMarkUp                                 + " ',";
                                    //sqlText += " '" + Master.ReceiveDateTime                                 + "', ";//sqlText                                 += " '"                                 + Master.InvoiceDateTime + " ',";
                                    //sqlText += " 'VAT', ";//sqlText                                 += " '"                                 + Item.Type                                 + " ',";
                                    //sqlText += " '" + Master.transactionType                                 + "', ";//sqlText                                 += " '"                                 + Master.TransactionType + " ',";
                                    //sqlText += " '" + Master.ReturnId                                 + "', ";//sqlText                                 += " '"                                 + Master.ReturnId                                 + " ',";
                                    //sqlText += " '" + Master.Post                                 + "', ";//sqlText                                 += " '"                                 + Master.Post                                 + " ',";
                                    //sqlText += " '" + v1UOMQty                                 + "', ";//sqlText                                 += " '"                                 + Item.UOMQty                                 + " ',";
                                    //sqlText += " '" + v1UOMn                                 + "', ";//sqlText                                 += " '"                                 + Item.UOMn                                 + " ',";
                                    //sqlText += " '" + v1UOMc                                 + "', ";//sqlText                                 += " '"                                 + Item.UOMc                                 + " ',";
                                    //sqlText += " '0', ";//sqlText                                 += "'"                                 + Item.DiscountAmount                                 + "',";
                                    //sqlText += " '" + nbrPriceFromBom                                 + "', ";//sqlText                                 += "'"                                 + Item.DiscountedNBRPrice                                 + "',";
                                    //sqlText += " '0',";//sqlText                                 += "'"                                 + Item.DollerValue                                 + "',";
                                    //sqlText += " '" + nbrPriceFromBom                                 + "', ";
                                    //sqlText += " '" + Item.ItemNo                                 + "', ";
                                    //sqlText += " '" + v1UOMPrice                                 + "' ";//sqlText                                 += " '"                                 + Item.UOMPrice                                 + "' ";
                                    //sqlText += ")	";
                                    //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                    //cmdInsertIssue.Transaction = transaction;
                                    //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                    //if (transResult <= 0)
                                    //{
                                    //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                    //                                    MessageVM.receiveMsgUnableToSaveIssue);
                                    //}

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update SalesInvoiceHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*NBRPrice) from SalesInvoiceDetails";
                                    sqlText += "  where SalesInvoiceDetails.SalesInvoiceNo =SalesInvoiceHeaders.SalesInvoiceNo)";
                                    sqlText += " where (SalesInvoiceHeaders.SalesInvoiceNo= '" + newID + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }
                            #endregion Finish

                            #region Insert into Issue

                            sqlText = "";

                            //NeedChange

                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty  from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='Trading' ) ";

                            DataTable dataTableR = new DataTable("RIFB");
                            SqlCommand cmdRIF = new SqlCommand(sqlText, VcurrConn);
                            cmdRIF.Transaction = Vtransaction;
                            cmdRIF.Parameters.AddWithValue("@BOMId", Item.BOMId);


                            #region Comments

                            //////sqlText += " FinishItemNo=@ItemItemNo ";
                            //////sqlText += " and vatname='VAT 4.3 (Package)' ";
                            //////sqlText += " and effectdate='" + bomDate + "'";
                            //////sqlText += " and post='Y' ";
                            //////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    sqlText += " and CustomerID=@MasterCustomerID ";
                            //////}

                            //////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='Trading' ) ";


                            //////DataTable dataTableR = new DataTable("RIFB");
                            //////SqlCommand cmdRIF = new SqlCommand(sqlText, currConn);
                            //////cmdRIF.Transaction = transaction;
                            //////cmdRIF.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            //////cmdRIF.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);

                            #endregion


                            SqlDataAdapter reportDataAdapt1 = new SqlDataAdapter(cmdRIF);
                            reportDataAdapt1.Fill(dataTableR);

                            if (dataTableR == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTableR.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTableR.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, VcurrConn, Vtransaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    #region Issue Settings
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);
                                    #endregion Issue Settings

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", VcurrConn, Vtransaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign
                                    #region Declare

                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    ////string v1BOMId = "";
                                    decimal v1UOMWastage = 0;

                                    #endregion Declare

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = Convert.ToString(Item.BOMId);
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;

                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                              Master.ReceiveDateTime,
                                                            VcurrConn, Vtransaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock
                                    #region Find Quantity From Transaction

                                    IssueDetailVM isdVM = new IssueDetailVM();
                                    isdVM.IssueNo = newID;
                                    isdVM.IssueLineNo = Item.ReceiveLineNo;
                                    isdVM.ItemNo = v1RawItemNo;
                                    isdVM.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    isdVM.NBRPrice = AvgRate;
                                    isdVM.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    isdVM.UOM = v1UOM;
                                    isdVM.VATRate = 0;
                                    isdVM.VATAmount = 0;
                                    isdVM.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    isdVM.CommentsD = Item.CommentsD;
                                    isdVM.CreatedBy = Master.CreatedBy;
                                    isdVM.CreatedOn = Master.CreatedOn;
                                    isdVM.LastModifiedBy = Master.LastModifiedBy;
                                    isdVM.LastModifiedOn = Master.LastModifiedOn;
                                    isdVM.ReceiveNo = newID;
                                    isdVM.IssueDateTime = Master.ReceiveDateTime;
                                    isdVM.SD = 0;
                                    isdVM.SDAmount = 0;
                                    isdVM.Wastage = v1Wastage;
                                    isdVM.BOMDate = v1BOMDate.ToString();
                                    isdVM.FinishItemNo = v1FinishItemNo;
                                    isdVM.transactionType = Master.transactionType;
                                    isdVM.IssueReturnId = Master.ReturnId;
                                    isdVM.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    isdVM.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    isdVM.UOMc = v1UOMc;
                                    isdVM.UOMn = v1UOMn;
                                    isdVM.UOMWastage = v1UOMWastage;
                                    isdVM.BOMId = Item.BOMId;//// Convert.ToInt32(v1BOMId);
                                    isdVM.Post = issueAutoPostValue;
                                    isdVM.BranchId = Master.BranchId;
                                    retResults = issDal.IssueInsertToDetails(isdVM, VcurrConn, Vtransaction);
                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update IssueHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                    sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                    sqlText += " where (IssueHeaders.IssueNo= '" + newID + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateIssue.Transaction = Vtransaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }
                            #endregion Insert into Issue

                            #endregion Find Raw Item From BOM and update Stock

                            #endregion PackageProduction

                        }


                        #endregion TollFinishReceive
                    }

                }


                #endregion Insert Detail Table
                #endregion Insert into Details(Insert complete in Header)

                #region Tracking
                if (Trackings != null && Trackings.Count > 0)
                {
                    for (int i = 0; i < Trackings.Count; i++)
                    {
                        if (Master.transactionType == "ReceiveReturn")
                        {
                            if (Trackings[i].ReturnReceive == "Y")
                            {
                                Trackings[i].ReturnReceiveID = newID;
                                Trackings[i].ReturnType = Master.transactionType;
                            }

                        }
                        else if (Trackings[i].IsReceive == "Y")
                        {
                            Trackings[i].ReceiveNo = newID;
                            Trackings[i].ReceiveDate = Master.ReceiveDateTime;
                            //Trackings[i].Post = Master.Post;
                        }
                    }
                    string trackingUpdate = string.Empty;
                    TrackingDAL trackingDal = new TrackingDAL();
                    trackingUpdate = trackingDal.TrackingUpdate(Trackings, Vtransaction, VcurrConn);

                    if (trackingUpdate == "Fail")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Tracking Information not added.");
                    }
                }
                #endregion
                #region return Current ID and Post Status

                sqlText = "";
                sqlText = sqlText + "select distinct  Post from dbo.ReceiveHeaders WHERE ReceiveNo='" + newID + "'";
                SqlCommand cmdIPS = new SqlCommand(sqlText, VcurrConn);
                cmdIPS.Transaction = Vtransaction;
                PostStatus = (string)cmdIPS.ExecuteScalar();
                if (string.IsNullOrEmpty(PostStatus))
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgUnableCreatID);
                }


                #endregion Prefetch
                #region Commit
                if (vcurrConn == null)
                {
                    if (Vtransaction != null)
                    {
                        //if (transResult > 0)
                        //{
                        Vtransaction.Commit();
                        //}

                    }
                }

                #endregion Commit
                #region SuccessResult
                retResults = new string[5];
                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSaveSuccessfully;
                retResults[2] = "" + newID;
                retResults[3] = "" + PostStatus;
                retResults[4] = Id;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            //catch (SqlException sqlex)
            //{
            //    if (vcurrConn == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (vcurrConn == null)
                {
                    Vtransaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ReceiveDAL", "ReceiveInsertX", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (vcurrConn == null)
                {
                    if (VcurrConn != null)
                    {
                        if (VcurrConn.State == ConnectionState.Open)
                        {
                            VcurrConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ReceiveUpdateX(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, List<TrackingVM> Trackings, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            IssueDAL issDal = new IssueDAL();
            PurchaseDAL purDal = new PurchaseDAL();
            SaleDAL salDal = new SaleDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";
            bool NegStockAllow = false;
            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime receiveDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue;  //start
            //////string BomId = string.Empty;

            string newID = "";
            string PostStatus = "";
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";


            bool IsAutoFrom4_3 = false;
            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgNoDataToUpdate);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, "Please Check Invoice Data and Time");

                }



                #endregion Validation for Header

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();

                int IssuePlaceQty = 8;// Convert.ToInt32(commonDal.settings("Issue", "Quantity"));
                int IssuePlaceAmt = 8;//Convert.ToInt32(commonDal.settings("Issue", "Amount"));
                int ReceivePlaceAmt = 8;//Convert.ToInt32(commonDal.settings("Receive", "Amount"));

                transaction = currConn.BeginTransaction(MessageVM.receiveMsgMethodNameInsert);
                #endregion open connection and transaction

                #region Master

                string vissueAutoPost, vNegStockAllow = string.Empty;

                vissueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost");
                vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                if (
                    string.IsNullOrEmpty(vissueAutoPost)
                   || string.IsNullOrEmpty(vNegStockAllow)
                    )
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                }
                issueAutoPost = Convert.ToBoolean(vissueAutoPost == "Y" ? true : false);
                NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                if (issueAutoPost)
                    issueAutoPostValue = "Y";

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDateTime;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK
                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders WHERE ReceiveNo=@MasterReceiveNo ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUnableFindExistID);
                }

                #endregion Find ID for Update


                if (Master.transactionType == "ReceiveReturn")
                {
                    #region Find Receive Return Date

                    sqlText = "";
                    sqlText = sqlText + "select ReceiveDateTime from ReceiveHeaders" +
                              " WHERE ReceiveNo=@MasterReturnId ";
                    SqlCommand cmdFindPDate = new SqlCommand(sqlText, currConn);
                    cmdFindPDate.Transaction = transaction;
                    cmdFindPDate.Parameters.AddWithValue("@MasterReturnId", Master.ReturnId);
                    previousReceiveDate = (DateTime)cmdFindPDate.ExecuteScalar();

                    if (previousReceiveDate == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                        MessageVM.receiveMsgFindExistID);
                    }

                    #endregion  Find Receive Return Date
                }

                #region ID check completed,update Information in Header

                #region update Header

                string[] cFields = new string[] { "rh.ReceiveNo" };
                string[] cVals = new string[] { Master.ReceiveNo };
                ReceiveMasterVM rmVm = SelectAllList(0, cFields, cVals, currConn, transaction, null, connVM).FirstOrDefault();
                rmVm.ShiftId = Master.ShiftId;
                rmVm.ReceiveDateTime = Master.ReceiveDateTime;
                rmVm.WithToll = Master.WithToll;
                rmVm.TotalAmount = Master.TotalAmount;
                rmVm.SerialNo = Master.SerialNo;
                rmVm.Comments = Master.Comments;
                rmVm.LastModifiedBy = Master.LastModifiedBy;
                rmVm.LastModifiedOn = Master.LastModifiedOn;
                rmVm.transactionType = Master.transactionType;
                rmVm.ReturnId = Master.ReturnId;
                rmVm.ReferenceNo = Master.ReferenceNo;
                rmVm.CustomerID = Master.CustomerID;
                rmVm.Post = Master.Post;
                rmVm.BranchId = Master.BranchId;
                retResults = ReceiveUpdateToMaster(rmVm, currConn, transaction);
                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, retResults[1]);
                }

                //sqlText = "";

                //sqlText += " update ReceiveHeaders set  ";
                //sqlText += " ShiftId            = '" + Master.ShiftId                                 + "' ,";
                //sqlText += " ReceiveDateTime    = '" + Master.ReceiveDateTime                                 + "' ,";
                //sqlText += " WithToll           = '" + Master.WithToll                                 + "' ,";
                //sqlText += " TotalAmount        = " +  Master.TotalAmount                                 + " ,";
                //sqlText += " SerialNo           = '" + Master.SerialNo                                 + "' ,";
                //sqlText += " Comments           = '" + Master.Comments                                 + "' ,";
                //sqlText += " LastModifiedBy     = '" + Master.LastModifiedBy                                 + "' ,";
                //sqlText += " LastModifiedOn     = '" + Master.LastModifiedOn                                 + "' ,";
                //sqlText += " transactionType    = '" + Master.transactionType                                 + "' ,";
                //sqlText += " ReceiveReturnId    = '" + Master.ReturnId                                 + "' ,";
                //sqlText += " ReferenceNo        = '" + Master.ReferenceNo                                 + "' ,";
                //sqlText += " CustomerID         = '" + Master.CustomerID                                 + "' ,";
                //sqlText += " Post               = '" + Master.Post                                 + "' ";
                //sqlText += " where  ReceiveNo= '" + Master.ReceiveNo + "' ";


                //SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                //cmdUpdate.Transaction = transaction;
                //transResult = (int)cmdUpdate.ExecuteNonQuery();
                //if (transResult <= 0)
                //{
                //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUpdateNotSuccessfully);
                //}
                #endregion update Header

                #region Transaction Not Other

                #region Transaction is FromBOM
                if (Master.FromBOM == "Y")
                {
                    if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn"
                        || Master.transactionType == "WIP" || Master.transactionType == "TollFinishReceive"
                        || Master.transactionType == "Tender")
                    {
                        #region update Issue

                        cFields = new string[] { "IssueNo" };
                        cVals = new string[] { Master.ReceiveNo };
                        IssueMasterVM imVm = new IssueMasterVM();
                        if (IsAutoFrom4_3 == false)
                        {
                            imVm = issDal.SelectAllList(0, cFields, cVals, currConn, transaction, null, connVM).FirstOrDefault();
                        }
                        else
                        {
                            imVm = new IssueBOMDAL().SelectAllList(0, cFields, cVals, currConn, transaction, null, null).FirstOrDefault();

                        }

                        if (imVm != null)
                        {

                            imVm.ShiftId = Master.ShiftId;
                            imVm.IssueDateTime = Master.ReceiveDateTime;
                            imVm.Comments = Master.Comments;
                            imVm.SerialNo = Master.SerialNo;
                            imVm.LastModifiedBy = Master.LastModifiedBy;
                            imVm.LastModifiedOn = Master.LastModifiedOn;
                            imVm.transactionType = Master.transactionType;
                            imVm.ReturnId = Master.ReturnId;
                            imVm.Post = issueAutoPostValue;
                            imVm.BranchId = Master.BranchId;

                            if (IsAutoFrom4_3 == false)
                            {

                                retResults = issDal.IssueUpdateToMaster(imVm, currConn, transaction);
                            }
                            else
                            {
                                retResults = new IssueBOMDAL().IssueUpdateToMaster(imVm, currConn, transaction);

                            }

                            if (retResults[0] != "Success")
                            {
                                //throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                //                                MessageVM.receiveMsgUpdateNotSuccessfully);
                            }

                        }


                        #endregion update Issue

                    }

                    if (Master.transactionType == "PackageProduction")
                    {
                        #region update Issue

                        cFields = new string[] { "IssueNo" };
                        cVals = new string[] { Master.ReceiveNo };
                        IssueMasterVM imVm = new IssueMasterVM();
                        if (IsAutoFrom4_3 == false)
                        {
                            imVm = issDal.SelectAllList(0, cFields, cVals, currConn, transaction, null, connVM).FirstOrDefault();
                        }
                        else
                        {
                            imVm = new IssueBOMDAL().SelectAllList(0, cFields, cVals, currConn, transaction, null, null).FirstOrDefault();

                        }

                        if (imVm != null)
                        {



                            imVm.ShiftId = Master.ShiftId;
                            imVm.IssueDateTime = Master.ReceiveDateTime;
                            imVm.Comments = Master.Comments;
                            imVm.SerialNo = Master.SerialNo;
                            imVm.LastModifiedBy = Master.LastModifiedBy;
                            imVm.LastModifiedOn = Master.LastModifiedOn;
                            imVm.transactionType = Master.transactionType;
                            imVm.ReturnId = Master.ReturnId;
                            imVm.Post = issueAutoPostValue;
                            imVm.BranchId = Master.BranchId;


                            if (IsAutoFrom4_3 == false)
                            {
                                retResults = issDal.IssueUpdateToMaster(imVm, currConn, transaction);
                            }
                            else
                            {
                                retResults = new IssueBOMDAL().IssueUpdateToMaster(imVm, currConn, transaction);
                            }

                            if (retResults[0] != "Success")
                            {
                                //throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                //                                MessageVM.receiveMsgUpdateNotSuccessfully);
                            }
                        }

                        #endregion update Issue
                        #region update Sale

                        cFields = new string[] { "sih.SalesInvoiceNo" };
                        cVals = new string[] { Master.ReceiveNo };
                        SaleMasterVM smVm = salDal.SelectAllList(0, cFields, cVals, currConn, transaction, null, null).FirstOrDefault();
                        smVm.CustomerID = "0";
                        smVm.DeliveryAddress1 = "NA";
                        smVm.DeliveryAddress2 = "NA";
                        smVm.DeliveryAddress3 = "NA";
                        smVm.VehicleID = "0";
                        smVm.ShiftId = Master.ShiftId;
                        smVm.InvoiceDateTime = Master.ReceiveDateTime;
                        smVm.SerialNo = Master.SerialNo;
                        smVm.Comments = Master.Comments;
                        smVm.DeliveryDate = Master.ReceiveDateTime;
                        smVm.LastModifiedBy = Master.LastModifiedBy;
                        smVm.LastModifiedOn = Master.LastModifiedOn;
                        smVm.SaleType = "New";
                        smVm.PreviousSalesInvoiceNo = Master.ReturnId;
                        smVm.Trading = "N";
                        smVm.IsPrint = "N";
                        smVm.TenderId = "N";
                        smVm.TransactionType = Master.transactionType;
                        smVm.ReturnId = Master.ReturnId;
                        smVm.CurrencyID = "260";
                        smVm.CurrencyRateFromBDT = 1;
                        smVm.Post = Master.Post;
                        imVm.BranchId = Master.BranchId;

                        retResults = salDal.SalesUpdateToMaster(smVm, currConn, transaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, retResults[1]);
                        }

                        //sqlText = "";

                        //sqlText += " update SalesInvoiceHeaders set  ";
                        //sqlText += " CustomerID             = '0'  ,";
                        //sqlText += " DeliveryAddress1       = 'NA' ,";
                        //sqlText += " DeliveryAddress2       = 'NA' ,";
                        //sqlText += " DeliveryAddress3       = 'NA' ,";
                        //sqlText += " VehicleID              = '0' ,";
                        //sqlText += " ShiftId                = '" + Master.ShiftId                                 + "' ,";
                        //sqlText += " InvoiceDateTime        = '" + Master.ReceiveDateTime                                 + "' ,";
                        //sqlText += " SerialNo               = '" + Master.SerialNo                                 + "' ,";
                        //sqlText += " Comments               = '" + Master.Comments                                 + "' ,";
                        //sqlText += " DeliveryDate           = '" + Master.ReceiveDateTime                                 + "' ,";
                        //sqlText += " LastModifiedBy         = '" + Master.LastModifiedBy                                 + "' ,";
                        //sqlText += " LastModifiedOn         = '" + Master.LastModifiedOn                                 + "' ,";
                        //sqlText += " SaleType               = 'New' ,";
                        //sqlText += " PreviousSalesInvoiceNo = '" + Master.ReturnId                                 + "' ,";
                        //sqlText += " Trading                = 'N' ,";
                        //sqlText += " IsPrint                = 'N' ,";
                        //sqlText += " TenderId               = 'N' ,";
                        //sqlText += " TransactionType        = '" + Master.transactionType                                 + "' ,";
                        //sqlText += " SaleReturnId           = '" + Master.ReturnId                                 + "' ,";
                        //sqlText += " CurrencyID             = '260' ,";
                        //sqlText += " CurrencyRateFromBDT    = '1' ,";
                        //sqlText += " Post                   = '" + Master.Post                                 + "' ";
                        //sqlText += " where  SalesInvoiceNo= '" + Master.ReceiveNo + "' ";


                        //SqlCommand cmdUpdateSale = new SqlCommand(sqlText, currConn);
                        //cmdUpdateSale.Transaction = transaction;
                        //transResult = (int)cmdUpdateSale.ExecuteNonQuery();
                        //if (transResult <= 0)
                        //{
                        //    //throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                        //    //                                MessageVM.receiveMsgUpdateNotSuccessfully);
                        //}

                        #endregion update Sale

                    }


                }

                #endregion Transaction is FromBOM //////IssueBOM

                #endregion Transaction Not Other


                #endregion ID check completed,update Information in Header

                #endregion Master

                #region Update into Details(Update complete in Header)

                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgNoDataToUpdate);
                }


                #endregion Validation for Detail

                #region Delete Existing Detail Data

                #region Purchase/Receive/Issue Data

                sqlText = "";
                sqlText += @" delete FROM PurchaseInvoiceDetails WHERE PurchaseInvoiceNo=@MasterReceiveNo ";
                sqlText += @" delete FROM PurchaseInvoiceDuties WHERE PurchaseInvoiceNo=@MasterReceiveNo ";

                sqlText += @" delete FROM ReceiveDetails WHERE ReceiveNo=@MasterReceiveNo ";

                sqlText += @" delete FROM IssueDetails WHERE IssueNo=@MasterReceiveNo ";
                sqlText += @" delete FROM IssueDetailBOMs WHERE IssueNo=@MasterReceiveNo ";


                SqlCommand cmdDeleteDetail = new SqlCommand(sqlText, currConn);
                cmdDeleteDetail.Transaction = transaction;
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterReceiveNo", Master.ReceiveNo);

                transResult = cmdDeleteDetail.ExecuteNonQuery();


                #endregion


                #endregion

                #region Update Detail Table

                foreach (var Item in Details.ToList())
                {
                    ProductDAL productDal = new ProductDAL();

                    #region Find Transaction Mode Insert or Update


                    #region Comments // 11-Sep-2019


                    //////IDExist = 0;
                    //////sqlText = "";
                    //////sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo=@MasterReceiveNo";
                    //////sqlText += " AND ItemNo=@ItemItemNo";
                    //////SqlCommand cmdFindId = new SqlCommand(sqlText, currConn);
                    //////cmdFindId.Transaction = transaction;

                    //////cmdFindId.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                    //////cmdFindId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                    //////IDExist = (int)cmdFindId.ExecuteScalar();

                    #endregion



                    string receiveFormatDate = "";
                    if (Master.transactionType == "ReceiveReturn")
                    {
                        receiveDate = previousReceiveDate.Date;
                        receiveFormatDate = receiveDate.ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    else
                    {
                        receiveDate = Convert.ToDateTime(Master.ReceiveDateTime).Date;
                        receiveFormatDate = receiveDate.ToString("yyyy-MM-dd HH:mm:ss");
                    }

                    #region USD calculate

                    string[] usdResults = GetUSDCurrency(Item.SubTotal);
                    #endregion USD calculate


                    #region Insert only DetailTable
                    ReceiveDetailVM rdVm = new ReceiveDetailVM();
                    rdVm.ReceiveNo = Master.ReceiveNo;
                    rdVm.ReceiveLineNo = Item.ReceiveLineNo;
                    rdVm.ItemNo = Item.ItemNo;
                    rdVm.Quantity = Item.Quantity;
                    rdVm.CostPrice = Item.CostPrice;
                    rdVm.NBRPrice = Item.NBRPrice;
                    rdVm.UOM = Item.UOM;
                    rdVm.VATRate = Item.VATRate;
                    rdVm.VATAmount = Item.VATAmount;
                    rdVm.SubTotal = Item.SubTotal;
                    rdVm.CommentsD = Item.CommentsD;
                    rdVm.CreatedBy = Master.CreatedBy;
                    rdVm.CreatedOn = Master.CreatedOn;
                    rdVm.LastModifiedBy = Master.LastModifiedBy;
                    rdVm.LastModifiedOn = Master.LastModifiedOn;
                    rdVm.SD = Item.SD;
                    rdVm.SDAmount = Item.SDAmount;
                    rdVm.ReceiveDateTime = Master.ReceiveDateTime;
                    rdVm.transactionType = Master.transactionType;
                    rdVm.ReturnId = Master.ReturnId;
                    rdVm.BOMId = Item.BOMId;
                    rdVm.UOMPrice = Item.UOMPrice;
                    rdVm.UOMQty = Item.UOMQty;
                    rdVm.UOMn = Item.UOMn;
                    rdVm.UOMc = Item.UOMc;
                    rdVm.VatName = Item.VatName;
                    rdVm.CurrencyValue = Convert.ToDecimal(usdResults[0]);
                    rdVm.DollerValue = Convert.ToDecimal(usdResults[1]);
                    rdVm.Post = Master.Post;
                    rdVm.BranchId = Master.BranchId;
                    retResults = ReceiveInsertToDetail(rdVm, currConn, transaction);

                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                    }

                    #endregion Insert only DetailTable
                    #region if Transection not Other Insert Issue /Receive

                    #region TollReceive
                    if (Master.transactionType == "ReceiveReturn" && Item.ReturnTransactionType == "TollReceive")
                    {
                        //ProductDAL productDal = new ProductDAL();
                        DataTable TollItemInfo = productDal.SearchRawItemNo(Master.ReturnId);

                        string TollItem;
                        decimal TollUnitCost = 0;

                        TollItem = TollItemInfo.Rows[0]["ItemNo"].ToString();
                        TollUnitCost = Convert.ToDecimal(TollItemInfo.Rows[0]["CostPrice"].ToString());

                        #region Insert to Issue Header


                        #endregion Insert to Issue Header

                        #region Insert to Issue 16 out

                        IssueDetailVM idVm = new IssueDetailVM();
                        idVm.BOMId = Item.BOMId;

                        idVm.IssueNo = newID;
                        idVm.IssueLineNo = "0";
                        idVm.ItemNo = TollItem;
                        idVm.Quantity = Item.Quantity;
                        idVm.NBRPrice = 0;
                        idVm.CostPrice = TollUnitCost;
                        idVm.UOM = Item.UOM;
                        idVm.VATRate = 0;
                        idVm.VATAmount = 0;
                        idVm.SubTotal = TollUnitCost * Item.UOMQty;
                        idVm.CreatedBy = Master.CreatedBy;
                        idVm.CreatedOn = Master.CreatedOn;
                        idVm.LastModifiedBy = Master.LastModifiedBy;
                        idVm.LastModifiedOn = Master.LastModifiedOn;
                        idVm.ReceiveNo = newID;
                        idVm.IssueDateTime = Master.ReceiveDateTime;
                        idVm.SD = 0;
                        idVm.SDAmount = 0;
                        idVm.Wastage = 0;
                        idVm.BOMDate = "1900/01/01";
                        idVm.FinishItemNo = "0";
                        idVm.transactionType = "TollReceiveReturn";
                        idVm.IssueReturnId = Master.ReturnId;
                        idVm.UOMQty = Item.UOMQty;
                        idVm.UOMPrice = Item.UOMPrice;
                        idVm.UOMc = Item.UOMc;
                        idVm.UOMn = Item.UOMn;
                        idVm.UOMWastage = 0;
                        idVm.Post = Master.Post;
                        idVm.BranchId = Master.BranchId;

                        retResults = issDal.IssueInsertToDetails(idVm, currConn, transaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }


                        #endregion Insert to Issue


                    }
                    #endregion TollReceive


                    #region Purchase For TollReceive
                    #region From BOM

                    if (Master.FromBOM == "Y")
                    {
                        //////BomId = string.Empty;
                        BOMDate = DateTime.MinValue;


                        #region Comments 12-Sep-2019

                        ////#region Last BOMId

                        ////sqlText = "  ";
                        ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId  from BOMs";
                        ////sqlText += " where ";
                        ////sqlText += " FinishItemNo=@ItemItemNo";
                        ////sqlText += " and vatname=@ItemVatName";
                        ////sqlText += " and effectdate<=@receiveDateDate";
                        ////sqlText += " and post='Y' ";
                        ////if (Master.CustomerID != "0")
                        ////{
                        ////    sqlText += " and CustomerID=@MasterCustomerID  ";
                        ////}

                        ////sqlText += " order by effectdate desc ";

                        ////SqlCommand cmdBomId2 = new SqlCommand(sqlText, currConn);
                        ////cmdBomId2.Transaction = transaction;
                        ////cmdBomId2.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                        ////cmdBomId2.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                        ////cmdBomId2.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                        ////cmdBomId2.Parameters.AddWithValue("@receiveDateDate", receiveDate.Date);
                        ////if (cmdBomId2.ExecuteScalar() == null)
                        ////{
                        ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                        ////                                    "No Price declaration found for this item");
                        ////    BomId = "0";
                        ////}
                        ////else
                        ////{
                        ////    BomId = (string)cmdBomId2.ExecuteScalar();
                        ////}

                        ////#endregion Last BOMId



                        //////                    #region Last BOMDate

                        //////                    sqlText = "  ";
                        //////                    sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                        //////                    sqlText += " where ";
                        //////                    sqlText += " FinishItemNo=@ItemItemNo ";
                        //////                    sqlText += " and vatname=@ItemVatName ";
                        //////                    sqlText += " and effectdate<='" + receiveDate + "'";
                        //////                    sqlText += " and post='Y' ";
                        //////                    if (Master.CustomerID != "0")
                        //////                    {
                        //////                        sqlText += " and CustomerID=@MasterCustomerID ";
                        //////                    }

                        //////                    sqlText += " order by effectdate desc ";

                        //////                    SqlCommand cmdBomEDate2 = new SqlCommand(sqlText, currConn);
                        //////                    cmdBomEDate2.Transaction = transaction;
                        //////                    cmdBomEDate2.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                        //////                    cmdBomEDate2.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                        //////                    cmdBomEDate2.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                        //////                    if (cmdBomEDate2.ExecuteScalar() == null)
                        //////                    {
                        //////                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                        //////                                                        "No Price declaration found for this item");
                        //////                        BOMDate = DateTime.MinValue;
                        //////                    }
                        //////                    else
                        //////                    {
                        //////                        BOMDate = (DateTime)cmdBomEDate2.ExecuteScalar();
                        //////                    }

                        //////                    #endregion Last BOMDate

                        #endregion


                        if (Item.BOMId > 0)
                        {
                            BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                            vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, currConn, transaction, null, null).FirstOrDefault();

                            BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                        }


                        if (Master.transactionType == "Other"
                            || Master.transactionType == "ReceiveReturn"
                            || Master.transactionType == "WIP")
                        {
                            #region Find Raw Item From BOM  and update Stock
                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.Uom,UOMUQty,UOMWQty,b.TransactionType from BOMRaws b  ";
                            sqlText += " WHERE 1=1 ";
                            sqlText += " AND BOMId=@BOMId";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finsih' or rawitemtype='wip') ";


                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                            #region Comments


                            //////sqlText += " FinishItemNo=@ItemItemNo ";
                            //////sqlText += " and vatname=@ItemVatName ";
                            //////sqlText += " and effectdate=@BOMDate";
                            //////sqlText += " and post='Y' ";
                            //////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    sqlText += " and CustomerID=@MasterCustomerID  ";
                            //////}

                            //////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finsih' or rawitemtype='wip') ";


                            //////DataTable dataTable = new DataTable("RIFB");
                            //////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            //////cmdRIFB.Transaction = transaction;


                            //////cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            //////cmdRIFB.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                            //////cmdRIFB.Parameters.AddWithValue("@BOMDate", BOMDate);
                            //////cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            #endregion


                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    //////string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    string vTransactionType = "";
                                    #endregion DECLARE

                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);


                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);

                                    #endregion Find Quantity From Products

                                    #region valueAssign
                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    //////v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                    vTransactionType = BRItem["TransactionType"].ToString();
                                    #endregion valueAssign

                                    #region Stock
                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        //var stock = productDal.StockInHand(v1RawItemNo,
                                        //   Master.ReceiveDateTime + DateTime.Now.ToString(" HH:mm:ss"), currConn, transaction).ToString();
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                         Master.ReceiveDateTime +
                                                                         DateTime.Now.ToString(" HH:mm:ss"),
                                                       currConn, transaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                        }
                                    }
                                    #endregion Stock
                                    #region Find Quantity From Transaction

                                    IssueDetailVM idVm = new IssueDetailVM();
                                    idVm.IssueNo = Master.ReceiveNo;
                                    idVm.IssueLineNo = Item.ReceiveLineNo;
                                    idVm.ItemNo = v1RawItemNo;
                                    idVm.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    idVm.NBRPrice = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    idVm.CostPrice = v1CostPrice;
                                    idVm.UOM = v1UOM;
                                    idVm.VATRate = 0;
                                    idVm.VATAmount = 0;
                                    idVm.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    idVm.CommentsD = Item.CommentsD;
                                    idVm.CreatedBy = Master.CreatedBy;
                                    idVm.CreatedOn = Master.CreatedOn;
                                    idVm.LastModifiedBy = Master.LastModifiedBy;
                                    idVm.LastModifiedOn = Master.LastModifiedOn;
                                    idVm.ReceiveNo = newID;
                                    idVm.IssueDateTime = Master.ReceiveDateTime;
                                    idVm.SD = 0;
                                    idVm.SDAmount = 0; ;
                                    idVm.Wastage = v1Wastage;
                                    idVm.BOMDate = v1BOMDate.ToString();
                                    idVm.FinishItemNo = v1FinishItemNo;
                                    if (vTransactionType.Trim() == "TollReceiveRaw")
                                    {
                                        idVm.transactionType = vTransactionType.Trim();
                                    }
                                    else
                                    {
                                        if (Master.WithToll == "Y")
                                        {
                                            idVm.transactionType = Master.transactionType;
                                        }
                                        else
                                        {
                                            idVm.transactionType = Master.transactionType;
                                        }
                                    }

                                    idVm.IssueReturnId = Master.ReturnId;
                                    idVm.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    idVm.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    idVm.UOMc = v1UOMc;
                                    idVm.UOMn = v1UOMn;
                                    idVm.UOMWastage = v1UOMWastage;
                                    idVm.BOMId = Item.BOMId;//// Convert.ToInt32(v1BOMId);
                                    idVm.Post = issueAutoPostValue;
                                    idVm.BranchId = Master.BranchId;


                                    if (IsAutoFrom4_3 == false)
                                    {
                                        retResults = issDal.IssueInsertToDetails(idVm, currConn, transaction);
                                    }
                                    else
                                    {
                                        retResults = new IssueBOMDAL().IssueInsertToDetails(idVm, currConn, transaction);

                                    }

                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue

                                    if (IsAutoFrom4_3 == false)
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= @MasterReceiveNo)";
                                    }
                                    else
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaderBOMs set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs";
                                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                        sqlText += " where (IssueHeaderBOMs.IssueNo= @MasterReceiveNo)";

                                    }

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    cmdUpdateIssue.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);

                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Insert Issue

                        }
                        else if (Master.transactionType == "Tender")
                        {

                            #region Find Raw Item From BOM  and update Stock

                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,UOMUQty,UOMWQty from BOMRaws b  ";
                            sqlText += " where ";
                            sqlText += " FinishItemNo=@ItemItemNo";
                            sqlText += " and vatname=@ItemVatName ";
                            sqlText += " and effectdate='" + BOMDate + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                            if (Master.CustomerID != "0")
                            {
                                sqlText += " and CustomerID=@MasterCustomerID ";
                            }
                            sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finsih') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            cmdRIFB.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                            cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else
                            {

                                decimal vQuantity = 0;
                                decimal vWastage = 0;

                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    #endregion DECLARE

                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                    }


                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);


                                    #endregion Find Quantity From Products
                                    #region valueAssign
                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    ////v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                    #endregion valueAssign

                                    #region Stock
                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                         Master.ReceiveDateTime +
                                                                         DateTime.Now.ToString(" HH:mm:ss"),
                                                       currConn, transaction, false).Rows[0]["Quantity"].ToString();
                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                        }
                                    }
                                    #endregion Stock
                                    #region Find Quantity From Transaction

                                    IssueDetailVM idVm = new IssueDetailVM();
                                    idVm.IssueNo = Master.ReceiveNo;
                                    idVm.IssueLineNo = Item.ReceiveLineNo;
                                    idVm.ItemNo = v1RawItemNo;
                                    idVm.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    idVm.NBRPrice = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    idVm.CostPrice = v1CostPrice;
                                    idVm.UOM = v1UOM;
                                    idVm.VATRate = 0;
                                    idVm.VATAmount = 0;
                                    idVm.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    idVm.CommentsD = Item.CommentsD;
                                    idVm.CreatedBy = Master.CreatedBy;
                                    idVm.CreatedOn = Master.CreatedOn;
                                    idVm.LastModifiedBy = Master.LastModifiedBy;
                                    idVm.LastModifiedOn = Master.LastModifiedOn;
                                    idVm.ReceiveNo = newID;
                                    idVm.IssueDateTime = Master.ReceiveDateTime;
                                    idVm.SD = 0;
                                    idVm.SDAmount = 0;
                                    idVm.Wastage = v1Wastage;
                                    idVm.BOMDate = v1BOMDate.ToString();
                                    idVm.FinishItemNo = v1FinishItemNo;
                                    idVm.transactionType = Master.transactionType;
                                    idVm.IssueReturnId = Master.ReturnId;
                                    idVm.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    idVm.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    idVm.UOMc = v1UOMc;
                                    idVm.UOMn = v1UOMn;
                                    idVm.UOMWastage = v1UOMWastage;
                                    idVm.BOMId = Convert.ToInt32(v1BOMId);
                                    idVm.Post = issueAutoPostValue;
                                    idVm.BranchId = Master.BranchId;
                                    if (IsAutoFrom4_3 == false)
                                    {

                                        retResults = issDal.IssueInsertToDetails(idVm, currConn, transaction);
                                    }
                                    else
                                    {
                                        retResults = new IssueBOMDAL().IssueInsertToDetails(idVm, currConn, transaction);

                                    }

                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue
                                    if (IsAutoFrom4_3 == false)
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= @MasterReceiveNo)";
                                    }
                                    else
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaderBOMs set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs";
                                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                        sqlText += " where (IssueHeaderBOMs.IssueNo= @MasterReceiveNo)";

                                    }
                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    cmdUpdateIssue.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock

                        }


                        else if (Master.transactionType == "TollFinishReceive")
                        {
                            #region TollFinishReceive
                            //////BomId = string.Empty;
                            BOMDate = DateTime.MinValue;

                            #region Comments 12-Sep-2019

                            ////#region Last BOMId
                            ////sqlText = "  ";
                            ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId  from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            ////sqlText += " and effectdate<=@receiveDateDate";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomId3 = new SqlCommand(sqlText, currConn);
                            ////cmdBomId3.Transaction = transaction;
                            ////cmdBomId3.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////cmdBomId3.Parameters.AddWithValue("@receiveDateDate", receiveDate.Date);
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    cmdBomId3.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////}
                            ////if (cmdBomId3.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BomId = "0";
                            ////}
                            ////else
                            ////{
                            ////    BomId = (string)cmdBomId3.ExecuteScalar();
                            ////}

                            ////#endregion Last BOMId

                            ////#region Last BOMDate
                            ////sqlText = "  ";
                            ////sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            ////sqlText += " and effectdate<=@receiveDateDate";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID  ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomEDate3 = new SqlCommand(sqlText, currConn);
                            ////cmdBomEDate3.Transaction = transaction;
                            ////cmdBomEDate3.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////cmdBomEDate3.Parameters.AddWithValue("@receiveDateDate", receiveDate.Date);
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    cmdBomEDate3.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////}
                            ////if (cmdBomEDate3.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BOMDate = DateTime.MinValue;
                            ////}
                            ////else
                            ////{
                            ////    BOMDate = (DateTime)cmdBomEDate3.ExecuteScalar();
                            ////}

                            ////#endregion Last BOMDate

                            #endregion

                            if (Item.BOMId > 0)
                            {
                                BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, currConn, transaction, null, null).FirstOrDefault();

                                BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                            }


                            #region Find Raw Item From BOM  and update Stock

                            sqlText = "";


                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " where 1=1";
                            sqlText += " AND BOMId=@BOMId";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finsih') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                            #region Comments



                            //////sqlText += " FinishItemNo=@ItemItemNo";
                            //////sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            //////sqlText += " and effectdate='" + BOMDate + "'";
                            //////sqlText += " and post='Y' ";
                            //////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    sqlText += " and CustomerID=@MasterCustomerID ";
                            //////}
                            //////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finsih') ";

                            //////DataTable dataTable = new DataTable("RIFB");
                            //////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            //////cmdRIFB.Transaction = transaction;
                            //////cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            //////}
                            #endregion


                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;


                                foreach (DataRow BRItem in dataTable.Rows)
                                {

                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    ////string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    #endregion DECLARE
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                    //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());
                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);


                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign
                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    ////v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                    #endregion valueAssign

                                    #region Stock
                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                         Master.ReceiveDateTime +
                                                                         DateTime.Now.ToString(" HH:mm:ss"),
                                                       currConn, transaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                        }
                                    }
                                    #endregion Stock
                                    #region Find Quantity From Transaction

                                    IssueDetailVM idVm = new IssueDetailVM();
                                    idVm.IssueNo = Master.ReceiveNo;
                                    idVm.IssueLineNo = Item.ReceiveLineNo;
                                    idVm.ItemNo = v1RawItemNo;
                                    idVm.Quantity = FormatingNumeric(v1Quantity, IssuePlaceQty);
                                    idVm.NBRPrice = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    idVm.CostPrice = FormatingNumeric(v1CostPrice, IssuePlaceAmt);
                                    idVm.UOM = v1UOM;
                                    idVm.VATRate = 0;
                                    idVm.VATAmount = 0;
                                    idVm.SubTotal = FormatingNumeric(v1SubTotal, IssuePlaceAmt);
                                    idVm.CommentsD = Item.CommentsD;
                                    idVm.CreatedBy = Master.CreatedBy;
                                    idVm.CreatedOn = Master.CreatedOn;
                                    idVm.LastModifiedBy = Master.LastModifiedBy;
                                    idVm.LastModifiedOn = Master.LastModifiedOn;
                                    idVm.ReceiveNo = newID;
                                    idVm.IssueDateTime = Master.ReceiveDateTime;
                                    idVm.SD = 0;
                                    idVm.SDAmount = 0;
                                    idVm.Wastage = v1Wastage;
                                    idVm.BOMDate = v1BOMDate.ToString();
                                    idVm.FinishItemNo = v1FinishItemNo;
                                    idVm.transactionType = Master.transactionType;
                                    idVm.IssueReturnId = Master.ReturnId;
                                    idVm.UOMQty = FormatingNumeric(v1UOMQty, IssuePlaceQty);
                                    idVm.UOMPrice = FormatingNumeric(v1UOMPrice, IssuePlaceAmt);
                                    idVm.UOMc = v1UOMc;
                                    idVm.UOMn = v1UOMn;
                                    idVm.UOMWastage = v1UOMWastage;
                                    idVm.BOMId = Item.BOMId;////Convert.ToInt32(v1BOMId);
                                    idVm.Post = issueAutoPostValue;
                                    idVm.BranchId = Master.BranchId;
                                    if (IsAutoFrom4_3 == false)
                                    {
                                        retResults = issDal.IssueInsertToDetails(idVm, currConn, transaction);
                                    }
                                    else
                                    {
                                        retResults = new IssueBOMDAL().IssueInsertToDetails(idVm, currConn, transaction);

                                    }

                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue

                                    if (IsAutoFrom4_3 == false)
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= @MasterReceiveNo)";

                                    }
                                    else
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaderBOMs set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs";
                                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                        sqlText += " where (IssueHeaderBOMs.IssueNo= @MasterReceiveNo)";

                                    }


                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    cmdUpdateIssue.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock
                            #endregion TollFinishReceive
                        }
                        else if (Master.transactionType == "PackageProduction")
                        {
                            #region PackageProduction
                            //////BomId = string.Empty;
                            BOMDate = DateTime.MinValue;

                            #region Comments 12-Sep-2019


                            ////#region Last BOMId
                            ////sqlText = "  ";
                            ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId  from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 4.3 (Package)' ";
                            ////sqlText += " and effectdate<=@receiveDateDate";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomId3 = new SqlCommand(sqlText, currConn);
                            ////cmdBomId3.Transaction = transaction;
                            ////cmdBomId3.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////cmdBomId3.Parameters.AddWithValue("@receiveDateDate", receiveDate.Date);
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    cmdBomId3.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////}
                            ////if (cmdBomId3.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BomId = "0";
                            ////}
                            ////else
                            ////{
                            ////    BomId = (string)cmdBomId3.ExecuteScalar();
                            ////}

                            ////#endregion Last BOMId

                            ////#region Last BOMDate
                            ////sqlText = "  ";
                            ////sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname='VAT 1' ";
                            ////sqlText += " and effectdate<=@receiveDateDate";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomEDate3 = new SqlCommand(sqlText, currConn);
                            ////cmdBomEDate3.Transaction = transaction;
                            ////cmdBomEDate3.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////cmdBomEDate3.Parameters.AddWithValue("@receiveDateDate", receiveDate.Date);
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    cmdBomEDate3.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////}
                            ////if (cmdBomEDate3.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BOMDate = DateTime.MinValue;
                            ////}
                            ////else
                            ////{
                            ////    BOMDate = (DateTime)cmdBomEDate3.ExecuteScalar();
                            ////}

                            ////#endregion Last BOMDate
                            #endregion


                            if (Item.BOMId > 0)
                            {
                                BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, currConn, transaction, null, null).FirstOrDefault();

                                BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                            }

                            #region Find Raw Item From BOM  and update Stock
                            sqlText = "";


                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " where 1=1";
                            sqlText += " AND BOMId=@BOMId ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            sqlText += " and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='trading') ";

                            DataTable dataTabler = new DataTable("RIFB");
                            SqlCommand cmdRIFB1 = new SqlCommand(sqlText, currConn);
                            cmdRIFB1.Transaction = transaction;

                            cmdRIFB1.Parameters.AddWithValue("@BOMId", Item.BOMId);


                            #region Comments


                            //////sqlText += " FinishItemNo=@ItemItemNo ";
                            //////sqlText += " and vatname='VAT 1' ";
                            //////sqlText += " and effectdate='" + BOMDate + "'";
                            //////sqlText += " and post='Y' ";
                            //////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    sqlText += " and CustomerID=@MasterCustomerID";
                            //////}
                            //////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='trading') ";

                            //////DataTable dataTabler = new DataTable("RIFB");
                            //////SqlCommand cmdRIFB1 = new SqlCommand(sqlText, currConn);
                            //////cmdRIFB1.Transaction = transaction;

                            //////cmdRIFB1.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            //////if (Master.CustomerID != "0")
                            //////{
                            //////    cmdRIFB1.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            //////}

                            #endregion



                            SqlDataAdapter reportDataAdapt1 = new SqlDataAdapter(cmdRIFB1);
                            reportDataAdapt1.Fill(dataTabler);

                            if (dataTabler == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTabler.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTabler.Rows)
                                {
                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    ////string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    #endregion DECLARE

                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                    //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);

                                    #endregion Find Quantity From Products

                                    #region valueAssign
                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    ////v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                    #endregion valueAssign

                                    #region Stock
                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        //var stock = productDal.StockInHand(v1RawItemNo,
                                        //   Master.ReceiveDateTime + DateTime.Now.ToString(" HH:mm:ss"), currConn, transaction).ToString();
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                         Master.ReceiveDateTime +
                                                                         DateTime.Now.ToString(" HH:mm:ss"),
                                                       currConn, transaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                        }
                                    }
                                    #endregion Stock
                                    #region Find Quantity From Transaction
                                    IssueDetailVM idVm = new IssueDetailVM();
                                    idVm.IssueNo = Master.ReceiveNo;
                                    idVm.IssueLineNo = Item.ReceiveLineNo;
                                    idVm.ItemNo = v1RawItemNo;
                                    idVm.Quantity = v1Quantity;
                                    idVm.NBRPrice = AvgRate;
                                    idVm.CostPrice = v1CostPrice;
                                    idVm.UOM = v1UOM;
                                    idVm.VATRate = 0;
                                    idVm.VATAmount = 0;
                                    idVm.SubTotal = v1SubTotal;
                                    idVm.CommentsD = Item.CommentsD;
                                    idVm.CreatedBy = Master.CreatedBy;
                                    idVm.CreatedOn = Master.CreatedOn;
                                    idVm.LastModifiedBy = Master.LastModifiedBy;
                                    idVm.LastModifiedOn = Master.LastModifiedOn;
                                    idVm.ReceiveNo = newID;
                                    idVm.IssueDateTime = Master.ReceiveDateTime;
                                    idVm.SD = 0;
                                    idVm.SDAmount = 0;
                                    idVm.Wastage = v1Wastage;
                                    idVm.BOMDate = v1BOMDate.ToString();
                                    idVm.FinishItemNo = v1FinishItemNo;
                                    idVm.transactionType = Master.transactionType;
                                    idVm.IssueReturnId = Master.ReturnId;
                                    idVm.UOMQty = v1UOMQty;
                                    idVm.UOMPrice = v1UOMPrice;
                                    idVm.UOMc = v1UOMc;
                                    idVm.UOMn = v1UOMn;
                                    idVm.UOMWastage = v1UOMWastage;
                                    idVm.BOMId = Item.BOMId; ////Convert.ToInt32(v1BOMId);
                                    idVm.Post = issueAutoPostValue;
                                    idVm.BranchId = Master.BranchId;

                                    if (IsAutoFrom4_3 == false)
                                    {

                                        retResults = issDal.IssueInsertToDetails(idVm, currConn, transaction);
                                    }
                                    else
                                    {
                                        retResults = new IssueBOMDAL().IssueInsertToDetails(idVm, currConn, transaction);
                                    }

                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }

                                    #region Update Issue
                                    if (IsAutoFrom4_3 == false)
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= @MasterReceiveNo)";
                                    }
                                    else
                                    {
                                        sqlText = "";
                                        sqlText += " update IssueHeaderBOMs set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetailBOMs";
                                        sqlText += "  where IssueDetailBOMs.IssueNo =IssueHeaderBOMs.IssueNo)";
                                        sqlText += " where (IssueHeaderBOMs.IssueNo= @MasterReceiveNo)";
                                    }



                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    cmdUpdateIssue.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Insert Issue


                            #region Find Raw Item From BOM  and update Stock

                            sqlText = "";


                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " where ";
                            sqlText += " FinishItemNo=@ItemItemNo ";
                            sqlText += " and vatname='VAT 1' ";
                            sqlText += " and effectdate='" + BOMDate + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                            if (Master.CustomerID != "0")
                            {
                                sqlText += " and CustomerID=@MasterCustomerID ";
                            }


                            sqlText += "   and (rawitemtype='finsih') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            if (Master.CustomerID != "0")
                            {
                                cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            }
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {

                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    //////string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    #endregion DECLARE
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);
                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    decimal nbrPriceFromBom = productDal.GetLastNBRPriceFromBOM_VatName(BRItem["RawItemNo"].ToString(),
                                                             "VAT 1", Master.ReceiveDateTime,
                                                             null, null);


                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    AvgRate = FormatingNumeric(AvgRate, IssuePlaceAmt);
                                    vQuantity = FormatingNumeric(vQuantity, IssuePlaceQty);
                                    vWastage = FormatingNumeric(vWastage, IssuePlaceQty);

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign
                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;

                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    #endregion valueAssign

                                    #region Stock
                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                         Master.ReceiveDateTime +
                                                                         DateTime.Now.ToString(" HH:mm:ss"),
                                                       currConn, transaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                        }
                                    }
                                    #endregion Stock
                                    #region Find Quantity From Transaction
                                    SaleDetailVm sdVm = new SaleDetailVm();
                                    sdVm.SalesInvoiceNo = Master.ReceiveNo;
                                    sdVm.InvoiceLineNo = Item.ReceiveLineNo;
                                    sdVm.ItemNo = v1RawItemNo;
                                    sdVm.Quantity = v1Quantity;
                                    sdVm.PromotionalQuantity = 0;
                                    sdVm.SalesPrice = nbrPriceFromBom;
                                    sdVm.NBRPrice = nbrPriceFromBom;
                                    sdVm.AvgRate = AvgRate;
                                    sdVm.UOM = v1UOM;
                                    sdVm.VATRate = 0;
                                    sdVm.VATAmount = 0;
                                    sdVm.SubTotal = v1SubTotal;
                                    sdVm.CommentsD = Item.CommentsD;
                                    sdVm.CreatedBy = Master.CreatedBy;
                                    sdVm.CreatedOn = Master.CreatedOn;
                                    sdVm.LastModifiedBy = Master.LastModifiedBy;
                                    sdVm.LastModifiedOn = Master.LastModifiedOn;
                                    sdVm.SD = 0;
                                    sdVm.SDAmount = 0;
                                    sdVm.SaleTypeD = "New";
                                    sdVm.PreviousSalesInvoiceNoD = Master.ReturnId;
                                    sdVm.TradingD = "N";
                                    sdVm.NonStockD = "N";
                                    sdVm.TradingMarkUp = 0;
                                    sdVm.InvoiceDateTime = Master.ReceiveDateTime;
                                    sdVm.Type = "VAT";
                                    sdVm.TransactionType = Master.transactionType;
                                    sdVm.ReturnId = Master.ReturnId;
                                    sdVm.Post = Master.Post;
                                    sdVm.UOMQty = v1UOMQty;
                                    sdVm.UOMn = v1UOMn;
                                    sdVm.UOMc = v1UOMc;
                                    sdVm.DiscountAmount = 0;
                                    sdVm.DiscountedNBRPrice = nbrPriceFromBom;
                                    sdVm.DollerValue = 0;
                                    sdVm.CurrencyValue = nbrPriceFromBom;
                                    sdVm.FinishItemNo = Item.ItemNo;
                                    sdVm.UOMPrice = v1UOMPrice;
                                    sdVm.BranchId = Master.BranchId;

                                    retResults = salDal.SalesInsertToDetail(sdVm, currConn, transaction);
                                    if (retResults[0] != "Success")
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                    }


                                    #region Update Issue


                                    sqlText = "";
                                    sqlText += " update SalesInvoiceHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*NBRPrice) from SalesInvoiceDetails";
                                    sqlText += "  where SalesInvoiceDetails.SalesInvoiceNo =SalesInvoiceHeaders.SalesInvoiceNo)";
                                    sqlText += " where (SalesInvoiceHeaders.SalesInvoiceNo= @MasterReceiveNo)";



                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    cmdUpdateIssue.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock


                            #endregion PackageProduction
                        }

                    }

                    #endregion From BOM //////IssueBOM


                    #endregion Purchase ID Create For IssueReturn

                    #endregion if Transection not Other Insert Issue /Receive

                    #endregion Find Transaction Mode Insert or Update
                }


                #endregion Update Detail Table

                #endregion  Update into Details(Update complete in Header)

                #region Tracking
                if (Trackings != null && Trackings.Count > 0)
                {

                    for (int i = 0; i < Trackings.Count; i++)
                    {
                        if (Master.transactionType == "ReceiveReturn")
                        {
                            if (Trackings[i].ReturnReceive == "Y")
                            {
                                Trackings[i].ReturnReceiveID = Master.ReceiveNo;
                                Trackings[i].ReturnType = Master.transactionType;
                            }

                        }
                        else if (Trackings[i].IsReceive == "Y")
                        {
                            Trackings[i].ReceiveNo = Master.ReceiveNo;
                            Trackings[i].ReceiveDate = Master.ReceiveDateTime;
                            //Trackings[i].Post = Master.Post;
                        }
                        else
                        {
                            Trackings[i].ReceiveNo = "";

                        }
                    }
                    string trackingUpdate = string.Empty;
                    TrackingDAL trackingDal = new TrackingDAL();
                    trackingUpdate = trackingDal.TrackingUpdate(Trackings, transaction, currConn);

                    if (trackingUpdate == "Fail")
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Tracking Information not added.");
                    }
                }
                #endregion

                #region return Current ID and Post Status

                sqlText = "";
                sqlText = sqlText + "select distinct Post from ReceiveHeaders WHERE ReceiveNo=@MasterReceiveNo";
                SqlCommand cmdIPS = new SqlCommand(sqlText, currConn);
                cmdIPS.Transaction = transaction;
                cmdIPS.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                PostStatus = (string)cmdIPS.ExecuteScalar();
                if (string.IsNullOrEmpty(PostStatus))
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUnableCreatID);
                }


                #endregion Prefetch

                #region Commit
                if (transaction != null)
                {
                    //if (transResult > 0)
                    //{
                    transaction.Commit();
                    //}




                }


                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgUpdateSuccessfully;
                retResults[2] = Master.ReceiveNo;
                retResults[3] = PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            //catch (SqlException sqlex)
            //{
            //    transaction.Rollback();
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReceiveUpdateX", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] ReceivePostX(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, List<TrackingVM> Trackings, SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            //SqlConnection currConn = null;
            //SqlTransaction transaction = null;
            SqlConnection vcurrConn = VcurrConn;
            if (vcurrConn == null)
            {
                VcurrConn = null;
                Vtransaction = null;
            }
            int transResult = 0;
            string sqlText = "";

            string PostStatus = "";
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";
            DateTime receiveDate = DateTime.MinValue;
            string receiveDateFormat = "";
            DateTime BOMDate = DateTime.MinValue; //start
            ////string BomId = string.Empty;
            IssueDAL issDal = new IssueDAL();
            SaleDAL saleDal = new SaleDAL();

            #endregion Initializ

            #region Try
            try
            {
                string vNegStockAllow, vIssueAutoPost = string.Empty;
                CommonDAL commonDal = new CommonDAL();
                vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                vIssueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost");
                if (string.IsNullOrEmpty(vNegStockAllow)
                    || string.IsNullOrEmpty(vIssueAutoPost)
                    )
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Sale");
                }
                bool NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);
                issueAutoPost = Convert.ToBoolean(vIssueAutoPost == "Y" ? true : false);
                if (issueAutoPost)
                    issueAutoPostValue = "Y";

                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgNoDataToPost);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                    MessageVM.receiveMsgCheckDatePost);

                }



                #endregion Validation for Header

                #region open connection and transaction

                if (vcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }
                    Vtransaction = VcurrConn.BeginTransaction(MessageVM.receiveMsgMethodNamePost);

                }


                ////currConn = _dbsqlConnection.GetConnection();
                ////if (currConn.State != ConnectionState.Open)
                ////{
                ////    currConn.Open();
                ////}



                ////transaction = currConn.BeginTransaction(MessageVM.receiveMsgMethodNamePost);

                #endregion open connection and transaction

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDateTime;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, VcurrConn);
                    cmdIdExist.Transaction = Vtransaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, VcurrConn);
                    cmdYearNotExist.Transaction = Vtransaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders WHERE ReceiveNo=@MasterReceiveNo ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, VcurrConn);
                cmdFindIdUpd.Transaction = Vtransaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                    MessageVM.receiveMsgUnableFindExistIDPost);
                }

                #endregion Find ID for Update

                #region ID check completed,update Information in Header

                #region update Header
                PostVM postVm = new PostVM();
                postVm.LastModifiedBy = Master.LastModifiedBy;
                postVm.LastModifiedOn = Master.LastModifiedOn;
                postVm.Post = Master.Post;
                postVm.Code = Master.ReceiveNo;
                retResults = ReceiveAllPost(postVm);

                //sqlText = "";

                //sqlText += " update ReceiveHeaders set  ";
                //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "' ,";
                //sqlText += " Post= '" + Master.Post + "' ";
                //sqlText += " where  ReceiveNo= '" + Master.ReceiveNo + "' ";


                //SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                //cmdUpdate.Transaction = transaction;
                //transResult = (int)cmdUpdate.ExecuteNonQuery();
                //if (transResult <= 0)
                //{
                //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                //                                    MessageVM.receiveMsgPostNotSuccessfully);
                //}

                #endregion update Header

                #region Transaction is FromBOM

                if (Master.FromBOM == "Y")
                {
                    if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn"
                        || Master.transactionType == "WIP" || Master.transactionType == "TollFinishReceive"
                        || Master.transactionType == "Tender")
                    {
                        #region update Issue
                        PostVM pvm = new PostVM();
                        pvm.LastModifiedBy = Master.LastModifiedBy;
                        pvm.LastModifiedOn = Master.LastModifiedOn;
                        pvm.Post = issueAutoPostValue;
                        pvm.Code = Master.ReceiveNo;
                        retResults = issDal.IssueAllPost(pvm, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.issueMsgMethodNamePost, retResults[1]);
                        }


                        //sqlText = "";
                        //sqlText += " update IssueHeaders set ";
                        //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                        //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                        //sqlText += " Post= '" + issueAutoPostValue + "' ";
                        //sqlText += " where  IssueNo= '" + Master.ReceiveNo + "' ";


                        //SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                        //cmdUpdateIssue.Transaction = transaction;
                        //transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                        #endregion update Issue
                    }
                    if (Master.transactionType == "PackageProduction")
                    {
                        #region update Issue
                        PostVM pvm = new PostVM();
                        pvm.LastModifiedBy = Master.LastModifiedBy;
                        pvm.LastModifiedOn = Master.LastModifiedOn;
                        pvm.Post = issueAutoPostValue;
                        pvm.Code = Master.ReceiveNo;
                        retResults = issDal.IssueAllPost(pvm, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.issueMsgMethodNamePost, retResults[1]);
                        }

                        //sqlText = "";
                        //sqlText += " update IssueHeaders set ";
                        //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                        //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                        //sqlText += " Post= '" + issueAutoPostValue + "' ";
                        //sqlText += " where  IssueNo= '" + Master.ReceiveNo + "' ";


                        //SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                        //cmdUpdateIssue.Transaction = transaction;
                        //transResult = (int)cmdUpdateIssue.ExecuteNonQuery();


                        #endregion update Issue

                        #region update Issue
                        pvm = new PostVM();
                        pvm.LastModifiedBy = Master.LastModifiedBy;
                        pvm.LastModifiedOn = Master.LastModifiedOn;
                        pvm.Post = issueAutoPostValue;
                        pvm.Code = Master.ReceiveNo;
                        retResults = saleDal.SaleAllPost(pvm, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.issueMsgMethodNamePost, retResults[1]);
                        }

                        //sqlText = "";
                        //sqlText += " update SalesInvoiceHeaders set ";
                        //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                        //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                        //sqlText += " Post= '" + issueAutoPostValue + "' ";
                        //sqlText += " where  SalesInvoiceNo= '" + Master.ReceiveNo + "' ";


                        //SqlCommand cmdUpdateIssueS = new SqlCommand(sqlText, currConn);
                        //cmdUpdateIssueS.Transaction = transaction;
                        //transResult = (int)cmdUpdateIssueS.ExecuteNonQuery();


                        #endregion update Issue
                    }
                }
                #endregion Transaction is FromBOM



                #endregion ID check completed,update Information in Header

                #region Update into Details(Update complete in Header)
                #region Validation for Detail
                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                        MessageVM.receiveMsgNoDataToPost);
                }
                #endregion Validation for Detail

                #region Update Detail Table

                foreach (var Item in Details.ToList())
                {
                    #region Find Transaction Mode Insert or Update

                    sqlText = "";
                    sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo=@MasterReceiveNo ";
                    sqlText += " AND ItemNo=@ItemItemNo";
                    SqlCommand cmdFindId = new SqlCommand(sqlText, VcurrConn);
                    cmdFindId.Transaction = Vtransaction;

                    cmdFindId.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                    cmdFindId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);

                    IDExist = (int)cmdFindId.ExecuteScalar();

                    if (IDExist <= 0)
                    {

                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                            MessageVM.receiveMsgNoDataToPost);
                    }
                    else
                    {
                        #region Update only DetailTable
                        //sqlText = "";
                        //sqlText += " update ReceiveDetails set ";
                        //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                        //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                        //sqlText += " Post='" + Master.Post + "'";
                        //sqlText += " where ReceiveNo='" + Master.ReceiveNo + "' ";
                        //sqlText += " and 	ItemNo='" + Item.ItemNo + "' ";

                        //SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        //cmdInsDetail.Transaction = transaction;
                        //transResult = (int)cmdInsDetail.ExecuteNonQuery();

                        //if (transResult <= 0)
                        //{
                        //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgUpdateNotSuccessfully);
                        //}
                        #endregion Update only DetailTable
                        #region Update Issue and Receive if Transaction is not Other

                        //if (Master.transactionType == "ReceiveReturn")

                        //    receiveDate = previousReceiveDate.Date;
                        //else
                        receiveDate = Convert.ToDateTime(Master.ReceiveDateTime).Date;
                        receiveDateFormat = receiveDate.ToString("yyyy-MM-dd HH:mm:ss");
                        #region TollReceive
                        if (Master.transactionType == "ReceiveReturn" && Item.ReturnTransactionType == "TollReceive")
                        {
                            ProductDAL productDal = new ProductDAL();
                            DataTable TollItemInfo = productDal.SearchRawItemNo(Master.ReturnId);

                            string TollItem;
                            decimal TollUnitCost = 0;

                            TollItem = TollItemInfo.Rows[0]["ItemNo"].ToString();
                            TollUnitCost = Convert.ToDecimal(TollItemInfo.Rows[0]["CostPrice"].ToString());

                            #region Update to Issue

                            //sqlText = "";
                            //sqlText += " update IssueDetails set";
                            //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                            //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                            //sqlText += " Post='" + issueAutoPostValue + "'";
                            //sqlText += " WHERE  IssueNo ='" + Master.ReceiveNo + "'";
                            //sqlText += "  and IssueDetails.ItemNo = '" + TollItem + "'";
                            //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                            //cmdInsertIssue.Transaction = transaction;
                            //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                            //if (transResult <= 0)
                            //{
                            //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                            //                                    MessageVM.receiveMsgUnableToIssuePost);
                            //}

                            #endregion Update to Issue

                        }

                        #endregion TollReceive


                        #region Transaction is FromBOM
                        if (Master.FromBOM == "Y")
                        {
                            //////BomId = string.Empty;
                            BOMDate = DateTime.MinValue;
                            string bomDateFormat = "";


                            #region Comments 12-Sep-2019

                            ////#region Last BOMId

                            ////sqlText = "  ";
                            ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId  from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo";
                            ////sqlText += " and vatname=@ItemVatName ";
                            //////sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            ////sqlText += " and effectdate<='" + receiveDateFormat + "'";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID  ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                            ////cmdBomId.Transaction = transaction;

                            ////cmdBomId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////cmdBomId.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    cmdBomId.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////}

                            ////if (cmdBomId.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BomId = "0";
                            ////}
                            ////else
                            ////{
                            ////    BomId = (string)cmdBomId.ExecuteScalar();
                            ////}

                            ////#endregion Last BOMId

                            ////#region Last BOMDate
                            //////NeedChange

                            ////sqlText = "  ";
                            ////sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                            ////sqlText += " where ";
                            ////sqlText += " FinishItemNo=@ItemItemNo ";
                            ////sqlText += " and vatname=@ItemVatName";
                            //////sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            ////sqlText += " and effectdate<='" + receiveDateFormat + "'";
                            ////sqlText += " and post='Y' ";
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    sqlText += " and CustomerID=@MasterCustomerID ";
                            ////}

                            ////sqlText += " order by effectdate desc ";

                            ////SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                            ////cmdBomEDate.Transaction = transaction;

                            ////cmdBomEDate.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            ////cmdBomEDate.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                            ////if (Master.CustomerID != "0")
                            ////{
                            ////    cmdBomEDate.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                            ////}

                            ////if (cmdBomEDate.ExecuteScalar() == null)
                            ////{
                            ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                            ////                                    "No Price declaration found for this item");
                            ////    BOMDate = DateTime.MinValue;
                            ////    bomDateFormat = BOMDate.Date.ToString("yyyy-MM-dd 00:00:00");

                            ////}
                            ////else
                            ////{
                            ////    BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                            ////    bomDateFormat = BOMDate.Date.ToString("yyyy/MM/dd 00:00:00");

                            ////}

                            ////#endregion Last BOMDate

                            #endregion



                            if (Item.BOMId > 0)
                            {
                                BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                                BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                            }

                            bomDateFormat = BOMDate.Date.ToString("yyyy-MM-dd 00:00:00");


                            if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn"
                                || Master.transactionType == "WIP" || Master.transactionType == "Tender")
                            {
                                #region Update to Issue

                                //sqlText = "";
                                //sqlText += " update IssueDetails set";
                                //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                //sqlText += " Post='" + issueAutoPostValue + "'";
                                //sqlText += " WHERE  IssueNo ='" + Master.ReceiveNo + "'";
                                //sqlText += "  and IssueDetails.FinishItemNo = '" + Item.ItemNo + "'";
                                //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                //cmdInsertIssue.Transaction = transaction;
                                //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                //if (transResult <= 0)
                                //{
                                //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                //                                    MessageVM.receiveMsgUnableToIssuePost);
                                //}

                                #endregion Update to Issue

                                #region Find Raw Item From BOM  and update Stock

                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity from BOMRaws b  ";
                                sqlText += " WHERE 1=1 ";
                                sqlText += " AND BOMId=@BOMId ";
                                sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                                sqlText += " and (rawitemtype='raw' or rawitemtype='pack') ";

                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                                cmdRIFB.Transaction = Vtransaction;
                                cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);


                                #region Comments

                                ////sqlText += " FinishItemNo=@ItemItemNo ";
                                ////sqlText += " and vatname=@ItemVatName ";
                                //////sqlText += " and effectdate='" + BOMDate.Date + "'";
                                ////sqlText += " and effectdate='" + bomDateFormat + "'";

                                ////sqlText += " and post='Y' ";
                                ////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                                ////if (Master.CustomerID != "0")
                                ////{
                                ////    sqlText += " and CustomerID=@MasterCustomerID  ";
                                ////}
                                ////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";

                                ////DataTable dataTable = new DataTable("RIFB");
                                ////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                                ////cmdRIFB.Transaction = transaction;
                                ////cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                                ////cmdRIFB.Parameters.AddWithValue("@ItemVatName", Item.VatName);
                                ////if (Master.CustomerID != "0")
                                ////{
                                ////    cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                                ////}

                                #endregion


                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {
                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Update Item Qty
                                        #region Qty  check and Update

                                        if (NegStockAllow == false)
                                        {
                                            #region Find Quantity From Products

                                            ProductDAL productDal = new ProductDAL();
                                            //decimal BRItemoldStock =
                                            //    productDal.StockInHand(BRItem["RawItemNo"].ToString(),
                                            //                           Master.ReceiveDateTime, currConn,
                                            //                           transaction);

                                            decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                            Master.ReceiveDateTime,
                                                          VcurrConn, Vtransaction, true).Rows[0]["Quantity"].ToString());

                                            #endregion Find Quantity From Products

                                            #region Find Quantity From Transaction

                                            sqlText = "";
                                            sqlText +=
                                                "select isnull(isnull(Quantity ,0)+isnull(Wastage ,0),0) from IssueDetails ";
                                            sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                       "and IssueNo= @MasterReceiveNo";
                                            SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, VcurrConn);
                                            cmdBRItemTranQty.Transaction = Vtransaction;

                                            cmdBRItemTranQty.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);

                                            decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                            #endregion Find Quantity From Transaction


                                            if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                            {
                                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                                MessageVM.
                                                                                    receiveMsgStockNotAvailablePost);
                                            }
                                        }



                                        #endregion Qty  check and Update

                                        #endregion Qty  check and Update
                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock
                            }
                            #region  TollFinishReceive

                            else if (Master.transactionType == "TollFinishReceive")
                            {
                                ProductDAL productDal1 = new ProductDAL();
                                //////BomId = string.Empty;  //BOMId
                                BOMDate = DateTime.MinValue;

                                #region Comments 12-Sep-2019


                                ////#region Last BOMId
                                ////sqlText = "  ";
                                ////sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId  from BOMs";
                                ////sqlText += " where ";
                                ////sqlText += " FinishItemNo=@ItemItemNo ";
                                ////sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                                ////sqlText += " and effectdate<=@receiveDateDate ";
                                ////sqlText += " and post='Y' ";
                                ////if (Master.CustomerID != "0")
                                ////{
                                ////    sqlText += " and CustomerID=@MasterCustomerID ";
                                ////}

                                ////sqlText += " order by effectdate desc ";

                                ////SqlCommand cmdBomId1 = new SqlCommand(sqlText, currConn);
                                ////cmdBomId1.Transaction = transaction;

                                ////cmdBomId1.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                                ////cmdBomId1.Parameters.AddWithValue("@receiveDateDate", receiveDate.Date);
                                ////if (Master.CustomerID != "0")
                                ////{
                                ////    cmdBomId1.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                                ////}
                                ////if (cmdBomId1.ExecuteScalar() == null)
                                ////{
                                ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                ////                                    "No Price declaration found for this item");
                                ////    BomId = "0";
                                ////}
                                ////else
                                ////{
                                ////    BomId = (string)cmdBomId1.ExecuteScalar();
                                ////}

                                ////#endregion Last BOMId

                                ////#region Last BOMDate
                                ////sqlText = "  ";
                                ////sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                                ////sqlText += " where ";
                                ////sqlText += " FinishItemNo=@ItemItemNo ";
                                ////sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                                ////sqlText += " and effectdate<='" + receiveDate.Date + "'";
                                ////sqlText += " and post='Y' ";
                                ////if (Master.CustomerID != "0")
                                ////{
                                ////    sqlText += " and CustomerID=@MasterCustomerID ";
                                ////}

                                ////sqlText += " order by effectdate desc ";

                                ////SqlCommand cmdBomEDate1 = new SqlCommand(sqlText, currConn);
                                ////cmdBomEDate1.Transaction = transaction;
                                ////cmdBomEDate1.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                                ////cmdBomEDate1.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                                ////if (cmdBomEDate1.ExecuteScalar() == null)
                                ////{
                                ////    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                ////                                    "No Price declaration found for this item");
                                ////    BOMDate = DateTime.MinValue;
                                ////}
                                ////else
                                ////{
                                ////    BOMDate = (DateTime)cmdBomEDate1.ExecuteScalar();
                                ////}

                                ////#endregion Last BOMDate

                                #endregion

                                if (Item.BOMId > 0)
                                {
                                    BOMNBRVM vBOMNBRVM = new BOMNBRVM();
                                    vBOMNBRVM = new BOMDAL().SelectAllList(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, null).FirstOrDefault();

                                    BOMDate = Convert.ToDateTime(vBOMNBRVM.EffectDate);

                                }

                                #region Update to Issue

                                //sqlText = "";
                                //sqlText += " update IssueDetails set";
                                //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                //sqlText += " Post='" + issueAutoPostValue + "'";
                                //sqlText += " WHERE  IssueNo ='" + Master.ReceiveNo + "'";
                                //sqlText += "  and IssueDetails.FinishItemNo = '" + Item.ItemNo + "'";
                                //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                //cmdInsertIssue.Transaction = transaction;
                                //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                //if (transResult <= 0)
                                //{
                                //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                //                                    MessageVM.receiveMsgUnableToIssuePost);
                                //}

                                #endregion Update to Issue

                                #region Find Raw Item From BOM  and update Stock


                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity from BOMRaws b  ";
                                sqlText += " WHERE 1=1";
                                sqlText += " AND BOMId=@BOMId ";
                                sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                                sqlText += " and (rawitemtype='raw' or rawitemtype='pack') ";

                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                                cmdRIFB.Transaction = Vtransaction;
                                cmdRIFB.Parameters.AddWithValue("@BOMId", Item.BOMId);

                                #region Comments

                                ////sqlText += " FinishItemNo=@ItemItemNo ";
                                ////sqlText += " and b.Vatname='VAT 4.3 (Toll Issue)'";
                                ////sqlText += " and effectdate='" + BOMDate.Date + "'";
                                ////sqlText += " and post='Y' ";
                                ////sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";
                                ////if (Master.CustomerID != "0")
                                ////{
                                ////    sqlText += " and CustomerID=@MasterCustomerID ";
                                ////}
                                ////sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";

                                ////DataTable dataTable = new DataTable("RIFB");
                                ////SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                                ////cmdRIFB.Transaction = transaction;
                                ////cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                                ////cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);
                                #endregion

                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {
                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Update Item Qty

                                        #region Find Quantity From Products

                                        ProductDAL productDal = new ProductDAL();
                                        //decimal BRItemoldStock = productDal.StockInHand(Item.ItemNo,
                                        //                                                Master.ReceiveDateTime, currConn,
                                        //                                                transaction);

                                        decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(Item.ItemNo,
                                                                            Master.ReceiveDateTime,
                                                          VcurrConn, Vtransaction, true).Rows[0]["Quantity"].ToString());

                                        #endregion Find Quantity From Products

                                        #region Find Quantity From Transaction

                                        sqlText = "";
                                        sqlText +=
                                            "select isnull(isnull(Quantity ,0)+isnull(Wastage ,0),0) from IssueDetails ";
                                        sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                   "and IssueNo= @MasterReceiveNo";
                                        SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, VcurrConn);
                                        cmdBRItemTranQty.Transaction = Vtransaction;
                                        cmdBRItemTranQty.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);

                                        decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                        #endregion Find Quantity From Transaction

                                        #region Qty  check and Update

                                        if (NegStockAllow == false)
                                        {
                                            if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                            {
                                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                                MessageVM.
                                                                                    receiveMsgStockNotAvailablePost);
                                            }
                                        }


                                        #endregion Qty  check and Update

                                        #endregion Qty  check and Update
                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock
                            }
                            #endregion TollFinishReceive

                            else if (Master.transactionType == "PackageProduction")
                            {
                                #region Update to Issue

                                //sqlText = "";
                                //sqlText += " update IssueDetails set";
                                //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                //sqlText += " Post='" + issueAutoPostValue + "'";
                                //sqlText += " WHERE  IssueNo ='" + Master.ReceiveNo + "'";
                                //SqlCommand cmdInsertIssue21 = new SqlCommand(sqlText, currConn);
                                //cmdInsertIssue21.Transaction = transaction;
                                //transResult = (int)cmdInsertIssue21.ExecuteNonQuery();



                                #endregion Update to Issue

                                #region Find Raw Item From BOM  and update Stock

                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity from BOMRaws b  ";
                                sqlText += " WHERE ";

                                sqlText += " FinishItemNo=@ItemItemNo ";
                                sqlText += " and vatname='VAT 4.3 (Package)' ";
                                sqlText += " and effectdate=@BOMDateDate";
                                sqlText += " and post='Y' ";
                                sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                                if (Master.CustomerID != "0")
                                {
                                    sqlText += " and CustomerID=@MasterCustomerID";
                                }

                                sqlText += "   and (rawitemtype='raw' or rawitemtype='pack'  or rawitemtype='Trading') ";

                                DataTable dataTable21 = new DataTable("RIFB");
                                SqlCommand cmdRIFB21 = new SqlCommand(sqlText, VcurrConn);
                                cmdRIFB21.Transaction = Vtransaction;

                                cmdRIFB21.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                                cmdRIFB21.Parameters.AddWithValue("@BOMDateDate", BOMDate.Date);
                                cmdRIFB21.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);

                                SqlDataAdapter reportDataAdapt21 = new SqlDataAdapter(cmdRIFB21);
                                reportDataAdapt21.Fill(dataTable21);

                                if (dataTable21 == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable21.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {
                                    foreach (DataRow BRItem in dataTable21.Rows)
                                    {

                                        #region Qty  check and Update

                                        if (NegStockAllow == false)
                                        {
                                            #region Find Quantity From Products

                                            ProductDAL productDal = new ProductDAL();


                                            decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                            Master.ReceiveDateTime,
                                                          VcurrConn, Vtransaction, true).Rows[0]["Quantity"].ToString());

                                            #endregion Find Quantity From Products

                                            #region Find Quantity From Transaction

                                            sqlText = "";
                                            sqlText +=
                                                "select isnull(isnull(Quantity ,0)+isnull(Wastage ,0),0) from IssueDetails ";
                                            sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                       "and IssueNo=@MasterReceiveNo";
                                            SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, VcurrConn);
                                            cmdBRItemTranQty.Transaction = Vtransaction;
                                            cmdBRItemTranQty.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);

                                            decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                            #endregion Find Quantity From Transaction


                                            if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                            {
                                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                                MessageVM.
                                                                                    receiveMsgStockNotAvailablePost);
                                            }
                                        }



                                        #endregion Qty  check and Update

                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock

                                #region Update to Issue

                                //sqlText = "";
                                //sqlText += " update SalesInvoiceDetails set";
                                //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                //sqlText += " Post='" + issueAutoPostValue + "'";
                                //sqlText += " WHERE  SalesInvoiceNo ='" + Master.ReceiveNo + "'";
                                //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                //cmdInsertIssue.Transaction = transaction;
                                //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                //if (transResult <= 0)
                                //{
                                //    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                //                                    MessageVM.receiveMsgUnableToIssuePost);
                                //}

                                #endregion Update to Issue

                                #region Find Raw Item From BOM  and update Stock

                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity from BOMRaws b  ";
                                sqlText += " WHERE ";

                                sqlText += " FinishItemNo=@ItemItemNo ";
                                sqlText += " and vatname='VAT 4.3 (Package)' ";
                                sqlText += " and effectdate=@BOMDateDate";
                                sqlText += " and post='Y' ";
                                sqlText += " and isnull(IssueOnProduction,'Y')='Y' ";

                                if (Master.CustomerID != "0")
                                {
                                    sqlText += " and CustomerID=@MasterCustomerID ";
                                }

                                sqlText += "   and (rawitemtype='Finish') ";

                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                                cmdRIFB.Transaction = Vtransaction;
                                cmdRIFB.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                                cmdRIFB.Parameters.AddWithValue("@BOMDateDate", BOMDate.Date);
                                cmdRIFB.Parameters.AddWithValue("@MasterCustomerID", Master.CustomerID);

                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {
                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Update Item Qty
                                        #region Qty  check and Update

                                        if (NegStockAllow == false)
                                        {
                                            #region Find Quantity From Products

                                            ProductDAL productDal = new ProductDAL();


                                            decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                            Master.ReceiveDateTime,
                                                          VcurrConn, Vtransaction, true).Rows[0]["Quantity"].ToString());

                                            #endregion Find Quantity From Products

                                            #region Find Quantity From Transaction

                                            sqlText = "";
                                            sqlText +=
                                                "select isnull(Quantity ,0) from SalesInvoiceDetails ";
                                            sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                       "and SalesInvoiceNo= @MasterReceiveNo";
                                            SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, VcurrConn);
                                            cmdBRItemTranQty.Transaction = Vtransaction;
                                            cmdBRItemTranQty.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                                            decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                            #endregion Find Quantity From Transaction


                                            if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                            {
                                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                                MessageVM.
                                                                                    receiveMsgStockNotAvailablePost);
                                            }
                                        }



                                        #endregion Qty  check and Update

                                        #endregion Qty  check and Update
                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock
                            }

                        }

                        #endregion Transaction is FromBOM





                        #endregion Update Issue and Receive if Transaction is not Other
                    }

                    #endregion Find Transaction Mode Insert or Update
                }


                #endregion Update Detail Table

                #endregion  Update into Details(Update complete in Header)

                #region Tracking
                if (Trackings != null && Trackings.Count > 0)
                {
                    for (int i = 0; i < Trackings.Count; i++)
                    {
                        if (Trackings[i].ReceiveNo == Master.ReceiveNo)
                        {
                            sqlText = "";

                            sqlText += " update Trackings set  ";
                            sqlText += " LastModifiedBy= @MasterLastModifiedBy, ";
                            sqlText += " LastModifiedOn= @MasterLastModifiedOn, ";

                            sqlText += " ReceivePost=@MasterPost  ";
                            sqlText += " where  ReceiveNo=@MasterReceiveNo ";
                            sqlText += " and  Heading1=@Heading1";// '" + Trackings[i].Heading1 + "' ";

                            SqlCommand cmdUpdateTracking = new SqlCommand(sqlText, VcurrConn);
                            cmdUpdateTracking.Transaction = Vtransaction;
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedOn", Master.LastModifiedOn);
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterPost", Master.Post);
                            cmdUpdateTracking.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                            cmdUpdateTracking.Parameters.AddWithValue("@Heading1", Trackings[i].Heading1);

                            transResult = (int)cmdUpdateTracking.ExecuteNonQuery();
                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                            }

                        }
                        else
                        {
                            if (Trackings[i].transactionType == "Receive_Return")
                            {
                                if (Trackings[i].ReturnReceive == "Y")
                                {
                                    sqlText = "";

                                    sqlText += " update Trackings set  ";
                                    sqlText += " LastModifiedBy= @MasterLastModifiedBy, ";
                                    sqlText += " LastModifiedOn= @MasterLastModifiedOn, ";
                                    sqlText += " ReturnReceiveDate=@MasterReceiveDateTime ";

                                    sqlText += " where Heading1=@Heading1";// '" + Trackings[i].Heading1 + "' ";


                                    SqlCommand cmdUpdateTracking = new SqlCommand(sqlText, VcurrConn);
                                    cmdUpdateTracking.Transaction = Vtransaction;

                                    cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedBy", Master.LastModifiedBy);
                                    cmdUpdateTracking.Parameters.AddWithValue("@MasterLastModifiedOn", Master.LastModifiedOn);
                                    cmdUpdateTracking.Parameters.AddWithValue("@MasterReceiveDateTime", Master.ReceiveDateTime);
                                    cmdUpdateTracking.Parameters.AddWithValue("@Heading1", Trackings[i].Heading1);

                                    transResult = (int)cmdUpdateTracking.ExecuteNonQuery();
                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                        MessageVM.PurchasemsgUpdateNotSuccessfully);
                                    }
                                }
                            }
                        }

                    }
                }


                #endregion
                #region return Current ID and Post Status

                sqlText = "";
                sqlText = sqlText + "select distinct Post from ReceiveHeaders WHERE ReceiveNo=@MasterReceiveNo";
                SqlCommand cmdIPS = new SqlCommand(sqlText, VcurrConn);
                cmdIPS.Transaction = Vtransaction;
                cmdIPS.Parameters.AddWithValue("@MasterReceiveNo", Master.ReceiveNo);
                PostStatus = (string)cmdIPS.ExecuteScalar();
                if (string.IsNullOrEmpty(PostStatus))
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgPostNotSelect);
                }


                #endregion Prefetch
                #region Commit
                if (vcurrConn == null)
                {
                    if (Vtransaction != null)
                    {
                        //if (transResult > 0)
                        //{
                        Vtransaction.Commit();
                        //}

                    }
                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSuccessfullyPost;
                retResults[2] = Master.ReceiveNo;
                retResults[3] = PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            //catch (SqlException sqlex)
            //{
            //    transaction.Rollback();
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                Vtransaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReceiveDAL", "ReceivePostX", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (vcurrConn == null)
                {
                    if (VcurrConn != null)
                    {
                        if (VcurrConn.State == ConnectionState.Open)
                        {
                            VcurrConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        #endregion

        #region unused methods / Year-2013

        #region Backup 18092013
        public string[] ReceiveInsert_18092013(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";
            string newID = "";
            string PostStatus = "";

            int IDExist = 0;
            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime receiveDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue; //start
            string BomId = string.Empty;
            bool withoutBOM = false;
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";
            bool NegStockAllow = false;

            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header


                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Please Check Invoice Data and Time");

                }




                #endregion Validation for Header
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();


                transaction = currConn.BeginTransaction(MessageVM.receiveMsgMethodNameInsert);
                string vIssueAutoPost = string.Empty;
                vIssueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost");
                if (string.IsNullOrEmpty(vIssueAutoPost))
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                }
                issueAutoPost = Convert.ToBoolean(vIssueAutoPost == "Y" ? true : false);
                if (issueAutoPost)
                    issueAutoPostValue = "Y";




                #endregion open connection and transaction
                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDateTime;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK
                #region Find Transaction Exist

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders" +
                          " WHERE ReceiveNo='" + Master.ReceiveNo + "' ";
                SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                cmdExistTran.Transaction = transaction;
                IDExist = (int)cmdExistTran.ExecuteScalar();

                if (IDExist > 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgFindExistID);
                }

                #endregion Find Transaction Exist

                #region Purchase ID Create
                if (string.IsNullOrEmpty(Master.transactionType)) // start
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.msgTransactionNotDeclared);
                }
                #region Purchase ID Create For Other

                //CommonDAL commonDal = new CommonDAL();

                if (Master.transactionType == "Other" || Master.transactionType == "Tender")
                {
                    newID = commonDal.TransactionCode("Receive", "Other", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction);
                }
                else if (Master.transactionType == "WIP")
                {
                    newID = commonDal.TransactionCode("Receive", "WIP", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction);
                }
                else if (Master.transactionType == "TollFinishReceive")
                {
                    newID = commonDal.TransactionCode("TollFinishReceive", "TollFinishReceive", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction);
                }
                else if (Master.transactionType == "ReceiveReturn")
                {
                    newID = commonDal.TransactionCode("Receive", "ReceiveReturn", "ReceiveHeaders", "ReceiveNo",
                                              "ReceiveDateTime", Master.ReceiveDateTime, Master.BranchId.ToString(), currConn, transaction);
                    #region Find Receive Return Date

                    sqlText = "";
                    sqlText = sqlText + "select ReceiveDateTime from ReceiveHeaders" +
                              " WHERE ReceiveNo='" + Master.ReturnId + "' ";
                    SqlCommand cmdFindPDate = new SqlCommand(sqlText, currConn);
                    cmdFindPDate.Transaction = transaction;
                    previousReceiveDate = (DateTime)cmdFindPDate.ExecuteScalar();

                    if (previousReceiveDate == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgFindExistID);
                    }

                    #endregion  Find Receive Return Date
                }


                #endregion Purchase ID Create For Other


                #endregion Purchase ID Create Not Complete

                #region ID generated completed,Insert new Information in Header


                sqlText = "";
                sqlText += " insert into ReceiveHeaders"; //Database Table name change
                sqlText += " (";

                sqlText += " ReceiveNo,";
                sqlText += " ReceiveDateTime,";
                sqlText += " TotalAmount,";
                sqlText += " TotalVATAmount,";
                sqlText += " SerialNo,";
                sqlText += " Comments,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " transactionType,";
                sqlText += " ReceiveReturnId,";
                sqlText += " Post";
                sqlText += " )";

                sqlText += " values";
                sqlText += " (";
                sqlText += "'" + newID + "',";
                sqlText += "'" + Master.ReceiveDateTime + "',";
                sqlText += "'" + Master.TotalAmount + "',";
                sqlText += "'" + Master.TotalVATAmount + "',";
                sqlText += "'" + Master.SerialNo + "',";
                sqlText += "'" + Master.Comments + "',";
                sqlText += "'" + Master.CreatedBy + "',";
                sqlText += "'" + Master.CreatedOn + "',";
                sqlText += "'" + Master.LastModifiedBy + "',";
                sqlText += "'" + Master.LastModifiedOn + "',";
                sqlText += "'" + Master.transactionType + "',";
                sqlText += "'" + Master.ReturnId + "',";
                sqlText += "'" + Master.Post + "'";
                sqlText += ")";


                SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                cmdInsert.Transaction = transaction;
                transResult = (int)cmdInsert.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header

                #region if Transection not Other Insert Issue /Receive

                #region Receive For BOM
                if (Master.FromBOM == "Y")
                {
                    string vNegStockAllow = string.Empty;
                    vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                    NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                    if (string.IsNullOrEmpty(vNegStockAllow))
                    {
                        throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                    }


                    if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" || Master.transactionType == "WIP" || Master.transactionType == "Tender" || Master.transactionType == "TollFinishReceive")
                    {
                        #region Insert to Issue Header



                        sqlText = "";
                        sqlText += " insert into IssueHeaders(";
                        sqlText += " IssueNo,";
                        sqlText += " ShiftId,";
                        sqlText += " IssueDateTime,";
                        sqlText += " TotalVATAmount,";
                        sqlText += " TotalAmount,";
                        sqlText += " SerialNo,";
                        sqlText += " Comments,";
                        sqlText += " CreatedBy,";
                        sqlText += " CreatedOn,";
                        sqlText += " LastModifiedBy,";
                        sqlText += " LastModifiedOn,";
                        sqlText += " ReceiveNo,";
                        sqlText += " transactionType,";
                        sqlText += " IssueReturnId,";
                        sqlText += " Post";

                        sqlText += " )";
                        sqlText += " values(	";
                        //sqlText += "'" + Master.Id + "',";

                        sqlText += "'" + newID + "',";

                        sqlText += "'" + Master.ShiftId + "',";
                        sqlText += "'" + Master.ReceiveDateTime + "',";
                        sqlText += " 0,0,";
                        sqlText += "'" + Master.SerialNo + "',";
                        sqlText += "'" + Master.Comments + "',";
                        sqlText += "'" + Master.CreatedBy + "',";
                        sqlText += "'" + Master.CreatedOn + "',";
                        sqlText += "'" + Master.LastModifiedBy + "',";
                        sqlText += "'" + Master.LastModifiedOn + "',";
                        sqlText += "'" + Master.ReceiveNo + "',";
                        sqlText += "'" + Master.transactionType + "',";
                        sqlText += "'" + Master.ReturnId + "',";
                        //sqlText += "'" + Master.Post + "'";
                        sqlText += "'" + issueAutoPostValue + "'";

                        //sqlText += "'" + Master.@Post + "'";
                        sqlText += ")	";

                        SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                        cmdInsertIssue.Transaction = transaction;
                        transResult = (int)cmdInsertIssue.ExecuteNonQuery();
                        if (transResult <= 0)
                        {

                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                            MessageVM.receiveMsgUnableToSaveIssue);
                        }

                        #endregion Insert to Issue Header

                    }



                }

                #endregion Receive For BOM



                #endregion if Transection not Other Insert Issue /Receive

                #region Insert into Details(Insert complete in Header)
                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgNoDataToSave);
                }


                #endregion Validation for Detail

                #region Insert Detail Table

                foreach (var Item in Details.ToList())
                {
                    #region Find Transaction Exist

                    sqlText = "";
                    sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo='" + newID + "' ";
                    sqlText += " AND ItemNo='" + Item.ItemNo + "'";
                    SqlCommand cmdFindId = new SqlCommand(sqlText, currConn);
                    cmdFindId.Transaction = transaction;
                    IDExist = (int)cmdFindId.ExecuteScalar();

                    if (IDExist > 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgFindExistID);
                    }

                    #endregion Find Transaction Exist

                    #region Insert only DetailTable

                    sqlText = "";
                    sqlText += " insert into ReceiveDetails(";

                    sqlText += " ReceiveNo,";
                    sqlText += " ReceiveLineNo,";
                    sqlText += " ItemNo,";
                    sqlText += " Quantity,";
                    sqlText += " CostPrice,";
                    sqlText += " NBRPrice,";
                    sqlText += " UOM,";
                    sqlText += " VATRate,";
                    sqlText += " VATAmount,";
                    sqlText += " SubTotal,";
                    sqlText += " Comments,";
                    sqlText += " CreatedBy,";
                    sqlText += " CreatedOn,";
                    sqlText += " LastModifiedBy,";
                    sqlText += " LastModifiedOn,";
                    sqlText += " SD,";
                    sqlText += " SDAmount,";
                    sqlText += " ReceiveDateTime,";
                    sqlText += " transactionType,";
                    sqlText += " ReceiveReturnId,";
                    sqlText += " BOMId,";

                    sqlText += " UOMPrice,";
                    sqlText += " UOMQty,";
                    sqlText += " UOMn,";
                    sqlText += " UOMc,";
                    sqlText += " VATName,";

                    sqlText += " Post";
                    sqlText += " )";
                    sqlText += " values(	";
                    sqlText += "'" + newID + "',";
                    sqlText += "'" + Item.ReceiveLineNo + "',";
                    sqlText += "'" + Item.ItemNo + "',";
                    sqlText += "'" + Item.Quantity + "',";
                    sqlText += "'" + Item.CostPrice + "',";
                    sqlText += "'" + Item.NBRPrice + "',";
                    sqlText += "'" + Item.UOM + "',";
                    sqlText += "'" + Item.VATRate + "',";
                    sqlText += "'" + Item.VATAmount + "',";
                    sqlText += "'" + Item.SubTotal + "',";
                    sqlText += "'" + Item.CommentsD + "',";
                    sqlText += "'" + Master.CreatedBy + "',";
                    sqlText += "'" + Master.CreatedOn + "',";
                    sqlText += "'" + Master.LastModifiedBy + "',";
                    sqlText += "'" + Master.LastModifiedOn + "',";
                    sqlText += "'" + Item.SD + "',";
                    sqlText += "'" + Item.SDAmount + "',";
                    sqlText += "'" + Master.ReceiveDateTime + "',";
                    sqlText += "'" + Master.transactionType + "',";
                    sqlText += "'" + Master.ReturnId + "',";
                    sqlText += "'" + Item.BOMId + "',";

                    sqlText += "'" + Item.UOMPrice + "',";
                    sqlText += "'" + Item.UOMQty + "',";
                    sqlText += "'" + Item.UOMn + "',";
                    sqlText += "'" + Item.UOMc + "',";
                    sqlText += "'" + Item.VatName + "',";

                    sqlText += "'" + Master.Post + "'";
                    sqlText += ")	";


                    SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                    cmdInsDetail.Transaction = transaction;
                    transResult = (int)cmdInsDetail.ExecuteNonQuery();

                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgSaveNotSuccessfully);
                    }
                    #endregion Insert only DetailTable  //done
                    //done
                    if (Master.transactionType == "ReceiveReturn")

                        receiveDate = previousReceiveDate.Date;
                    else
                        receiveDate = Convert.ToDateTime(Master.ReceiveDateTime);

                    #region Transaction is FromBOM
                    if (Master.FromBOM == "Y")
                    {
                        ProductDAL productDal = new ProductDAL();

                        BomId = string.Empty;
                        BOMDate = DateTime.MinValue;

                        #region Last BOMId

                        sqlText = "  ";
                        sqlText += " select top 1  CONVERT(varchar(10), isnull(BOMId,0))BOMId from BOMs";
                        sqlText += " where ";
                        sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                        sqlText += " and vatname='" + Item.VatName + "' ";
                        sqlText += " and effectdate<='" + receiveDate.Date + "'";
                        sqlText += " and post='Y' ";
                        sqlText += " order by effectdate desc ";

                        SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                        cmdBomId.Transaction = transaction;
                        if (cmdBomId.ExecuteScalar() == null)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                            "No Price declaration found for this item");
                            BomId = "0";
                        }
                        else
                        {
                            BomId = (string)cmdBomId.ExecuteScalar();
                        }

                        #endregion Last BOMId

                        #region Last BOMDate

                        sqlText = "  ";
                        sqlText += " select top 1 CONVERT(varchar(20), isnull(EffectDate,'1900/01/01')) from BOMs";
                        sqlText += " where ";
                        sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                        sqlText += " and vatname='" + Item.VatName + "' ";
                        sqlText += " and effectdate<='" + receiveDate.Date + "'";
                        sqlText += " and post='Y' ";
                        sqlText += " order by effectdate desc ";

                        SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                        cmdBomEDate.Transaction = transaction;
                        if (cmdBomEDate.ExecuteScalar() == null)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                            "No Price declaration found for this item");
                            BOMDate = DateTime.MinValue;
                        }
                        else
                        {
                            BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                        }

                        #endregion Last BOMDate

                        if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" ||
                            Master.transactionType == "WIP")
                        {
                            #region Find Raw Item From BOM  and update Stock

                            //sss
                            sqlText = "";
                            sqlText +=
                                " SELECT  b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " WHERE ";

                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate='" + BOMDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";



                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                decimal vStock = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;
                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Declare

                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    string v1BOMId = "";
                                    decimal v1UOMWastage = 0;

                                    #endregion Declare

                                    #region Update Item Qty

                                    #region Find Quantity From Products


                                    //decimal AvgRate = productDal.AvgPrice(BRItem["RawItemNo"].ToString(),
                                    //                                      Master.ReceiveDateTime, currConn, transaction);
                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                    //    vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    rwUom = BRItem["Uom"].ToString();

                                    var rwMajorUom = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwMajorUom, rwUom, "Y", currConn, transaction); //uomc


                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        //var stock = productDal.StockInHand(BRItem["RawItemNo"].ToString(),
                                        //                                       Master.ReceiveDateTime+
                                        //                                       DateTime.Now.ToString(" HH:mm:ss"),
                                        //                                   currConn, transaction).ToString();
                                        var stock = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                                   Master.ReceiveDateTime +
                                                                                   DateTime.Now.ToString(" HH:mm:ss"),
                                                                 currConn, transaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock


                                    #endregion Find Quantity From Products


                                    #region Find Quantity From Transaction


                                    sqlText = "";
                                    sqlText += " insert into IssueDetails(";

                                    sqlText += " IssueNo,";
                                    sqlText += " IssueLineNo,";
                                    sqlText += " ItemNo,";
                                    sqlText += " Quantity,";
                                    sqlText += " NBRPrice,";
                                    sqlText += " CostPrice,";
                                    sqlText += " UOM,";
                                    sqlText += " VATRate,";
                                    sqlText += " VATAmount,";
                                    sqlText += " SubTotal,";
                                    sqlText += " Comments,";
                                    sqlText += " CreatedBy,";
                                    sqlText += " CreatedOn,";
                                    sqlText += " LastModifiedBy,";
                                    sqlText += " LastModifiedOn,";
                                    sqlText += " ReceiveNo,";
                                    sqlText += " IssueDateTime,";
                                    sqlText += " SD,";
                                    sqlText += " SDAmount,"; //19
                                    sqlText += " Wastage,";
                                    sqlText += " BOMDate,";
                                    sqlText += " FinishItemNo,";
                                    sqlText += " transactionType,";
                                    sqlText += " IssueReturnId,";
                                    sqlText += " UOMQty,";
                                    sqlText += " UOMPrice,";
                                    sqlText += " UOMc,";
                                    sqlText += " UOMn,";
                                    sqlText += " UOMWastage,";
                                    sqlText += " BOMId,";

                                    sqlText += " Post";
                                    sqlText += " )";
                                    sqlText += " values( ";
                                    sqlText += "'" + newID + "',";
                                    sqlText += "'" + Item.ReceiveLineNo + "',";
                                    sqlText += " '" + v1RawItemNo + "', ";
                                    sqlText += " " + v1Quantity + " ,";
                                    sqlText += " " + AvgRate + ",";
                                    sqlText += "" + v1CostPrice + ","; //6
                                    sqlText += " '" + v1UOM + "',";
                                    sqlText += " 0,0, "; //VATRate,VATAmount
                                    sqlText += " " + v1SubTotal + ",";
                                    sqlText += "'" + Item.CommentsD + "',";
                                    sqlText += "'" + Master.CreatedBy + "',";
                                    sqlText += "'" + Master.CreatedOn + "',";
                                    sqlText += "'" + Master.LastModifiedBy + "',";
                                    sqlText += "'" + Master.LastModifiedOn + "',";
                                    sqlText += "'" + newID + "',";
                                    sqlText += "'" + Master.ReceiveDateTime + "',";
                                    sqlText += " 0,	0,"; //SDSDAmount //19
                                    sqlText += " " + v1Wastage + ",	";
                                    sqlText += "'" + v1BOMDate + "',	";
                                    sqlText += "'" + v1FinishItemNo + "',";
                                    sqlText += "'" + Master.transactionType + "',";
                                    sqlText += "'" + Master.ReturnId + "',";
                                    sqlText += "" + v1UOMQty + ",";
                                    sqlText += "" + v1UOMPrice + ",";
                                    sqlText += "" + v1UOMc + ",";
                                    sqlText += "'" + v1UOMn + "',";
                                    sqlText += "'" + v1UOMWastage + "',";
                                    sqlText += "'" + v1BOMId + "',";

                                    sqlText += "'" + issueAutoPostValue + "'";
                                    sqlText += ")";
                                    SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                    cmdInsertIssue.Transaction = transaction;
                                    transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update IssueHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                    sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                    sqlText += " where (IssueHeaders.IssueNo= '" + newID + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock

                        }
                        else if (Master.transactionType == "Tender")
                        {
                            #region Declare

                            decimal v1Quantity = 0;
                            string v1RawItemNo = "";
                            decimal v1CostPrice = 0;
                            string v1UOM = "";
                            decimal v1SubTotal = 0;
                            decimal v1Wastage = 0;
                            DateTime v1BOMDate = DateTime.Now.Date;
                            string v1FinishItemNo = "";

                            decimal v1UOMQty = 0;
                            decimal v1UOMPrice = 0;
                            decimal v1UOMc = 0;
                            string v1UOMn = "";
                            string v1BOMId = "";
                            decimal v1UOMWastage = 0;

                            #endregion Declare

                            #region Find Raw Item From BOM  and update Stock

                            sqlText = "";


                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " WHERE ";

                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate='" + BOMDate.Date + "'";
                            sqlText += "  and post='Y' and (b.rawitemtype='raw' or b.rawitemtype='pack') ";


                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;
                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    //decimal AvgRate = productDal.AvgPrice(BRItem["RawItemNo"].ToString(),
                                    //                                      Master.ReceiveDateTime, currConn, transaction);

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                    //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign

                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    v1BOMId = Convert.ToString(Item.BOMId);
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;

                                    #endregion valueAssign

                                    #region Stock

                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;

                                        //var stock = productDal.StockInHand(v1RawItemNo,
                                        //                                      Master.ReceiveDateTime+
                                        //                                      DateTime.Now.ToString(" HH:mm:ss"),
                                        //                                  currConn, transaction).ToString();
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                              Master.ReceiveDateTime +
                                                                              DateTime.Now.ToString(" HH:mm:ss"), currConn, transaction, false).Rows[0]["Quantity"].ToString();




                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt =
                                                productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert",
                                                                            "Stock not Available for Finish Item( Name: " +
                                                                            FinName + " & Code: " + FinCode +
                                                                            " ) \n and consumtion Material ( Name: " +
                                                                            RawName + " & Code: " + RawCode + " )");
                                        }
                                    }

                                    #endregion Stock



                                    #region Find Quantity From Transaction

                                    sqlText = "";
                                    sqlText += " insert into IssueDetails(";

                                    sqlText += " IssueNo,";
                                    sqlText += " IssueLineNo,";
                                    sqlText += " ItemNo,";
                                    sqlText += " Quantity,";
                                    sqlText += " NBRPrice,";
                                    sqlText += " CostPrice,";
                                    sqlText += " UOM,";
                                    sqlText += " VATRate,";
                                    sqlText += " VATAmount,";
                                    sqlText += " SubTotal,";
                                    sqlText += " Comments,";
                                    sqlText += " CreatedBy,";
                                    sqlText += " CreatedOn,";
                                    sqlText += " LastModifiedBy,";
                                    sqlText += " LastModifiedOn,";
                                    sqlText += " ReceiveNo,";
                                    sqlText += " IssueDateTime,";
                                    sqlText += " SD,";
                                    sqlText += " SDAmount,";
                                    sqlText += " Wastage,";
                                    sqlText += " BOMDate,";
                                    sqlText += " FinishItemNo,";
                                    sqlText += " transactionType,";
                                    sqlText += " IssueReturnId,";
                                    sqlText += " UOMQty,";
                                    sqlText += " UOMPrice,";
                                    sqlText += " UOMc,";
                                    sqlText += " UOMn,";
                                    sqlText += " UOMWastage,";
                                    sqlText += " BOMId,";
                                    sqlText += " Post";
                                    sqlText += " )";
                                    sqlText += " values( ";
                                    sqlText += "'" + newID + "',";
                                    sqlText += "'" + Item.ReceiveLineNo + "',";
                                    sqlText += " '" + v1RawItemNo + "', ";
                                    sqlText += " " + v1Quantity + " ,";
                                    sqlText += " " + AvgRate + ",";
                                    sqlText += "" + v1CostPrice + ",";

                                    sqlText += " '" + v1UOM + "',";
                                    sqlText += " 0,0, ";
                                    sqlText += " " + v1SubTotal + ",";
                                    sqlText += "'" + Item.CommentsD + "',";
                                    sqlText += "'" + Master.CreatedBy + "',";
                                    sqlText += "'" + Master.CreatedOn + "',";
                                    sqlText += "'" + Master.LastModifiedBy + "',";
                                    sqlText += "'" + Master.LastModifiedOn + "',";
                                    sqlText += "'" + newID + "',";
                                    sqlText += "'" + Master.ReceiveDateTime + "',";
                                    sqlText += " 0,	0,";
                                    sqlText += " " + v1Wastage + ",	";
                                    sqlText += "'" + v1BOMDate + "',	";
                                    sqlText += "'" + v1FinishItemNo + "',";
                                    sqlText += "'" + Master.transactionType + "',";
                                    sqlText += "'" + Master.ReturnId + "',";
                                    sqlText += "" + v1UOMQty + ",";
                                    sqlText += "" + v1UOMPrice + ",";
                                    sqlText += "" + v1UOMc + ",";
                                    sqlText += "'" + v1UOMn + "',";
                                    sqlText += "'" + v1UOMWastage + "',";
                                    sqlText += "'" + v1BOMId + "',";
                                    sqlText += "'" + issueAutoPostValue + "'";
                                    sqlText += ")";
                                    SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                    cmdInsertIssue.Transaction = transaction;
                                    transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update IssueHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                    sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                    sqlText += " where (IssueHeaders.IssueNo= '" + newID + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock
                        }
                    }

                    #endregion Transaction is Trading

                    #region TollFinishReceive
                    if (Master.transactionType == "TollFinishReceive")
                    {

                        ProductDAL productDal = new ProductDAL();
                        string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Issue)", Master.ReceiveDateTime,
                                                                           currConn, transaction).ToString();

                        BomId = string.Empty;  //BOMId
                        BOMDate = DateTime.MinValue;
                        #region Last BOMId
                        sqlText = "  ";
                        sqlText += " select top 1 CONVERT(varchar(10),isnull(BOMId,0)) from BOMs";
                        sqlText += " where ";
                        sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                        sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                        sqlText += " and effectdate<='" + receiveDate.Date + "'";
                        sqlText += " and post='Y' ";
                        sqlText += " order by effectdate desc ";

                        SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                        cmdBomId.Transaction = transaction;
                        if (cmdBomId.ExecuteScalar() == null)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                            "No Price declaration found for this item");
                            BomId = "0";
                        }
                        else
                        {
                            BomId = (string)cmdBomId.ExecuteScalar();
                        }

                        #endregion Last BOMId

                        #region Last BOMDate
                        sqlText = "  ";
                        sqlText += " select top 1 CONVERT(varchar(20),isnull(EffectDate,'1900/01/01')) from BOMs";
                        sqlText += " where ";
                        sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                        sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                        sqlText += " and effectdate<='" + receiveDate.Date + "'";
                        sqlText += " and post='Y' ";
                        sqlText += " order by effectdate desc ";

                        SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                        cmdBomEDate.Transaction = transaction;
                        if (cmdBomEDate.ExecuteScalar() == null)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                            "No Price declaration found for this item");
                            BOMDate = DateTime.MinValue;
                        }
                        else
                        {
                            BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                        }

                        #endregion Last BOMDate


                        #region Find Raw Item From BOM  and update Stock

                        sqlText = "";


                        sqlText +=
                            " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty  from BOMRaws b  ";
                        sqlText += " WHERE ";
                        sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' " +
                                   "and post='Y' " +
                                   "and EffectDate='" +
                                   BOMDate.Date + "'";
                        sqlText += " and Vatname='VAT 4.3 (Toll Issue)'";
                        sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";

                        DataTable dataTable = new DataTable("RIFB");
                        SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                        cmdRIFB.Transaction = transaction;
                        SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                        reportDataAdapt.Fill(dataTable);

                        if (dataTable == null)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                            MessageVM.receiveMsgNoDataToPost);
                        }
                        else if (dataTable.Rows.Count <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                            "There is no price declaration for this item.");
                        }
                        else
                        {
                            #region Declare
                            decimal v1Quantity = 0;
                            string v1RawItemNo = "";
                            decimal v1CostPrice = 0;
                            string v1UOM = "";
                            decimal v1SubTotal = 0;
                            decimal v1Wastage = 0;
                            DateTime v1BOMDate = DateTime.Now.Date;
                            string v1FinishItemNo = "";

                            decimal v1UOMQty = 0;
                            decimal v1UOMPrice = 0;
                            decimal v1UOMc = 0;
                            string v1UOMn = "";
                            string v1BOMId = "";
                            decimal v1UOMWastage = 0;
                            #endregion Declare

                            decimal vQuantity = 0;
                            decimal vWastage = 0;
                            decimal AvgRate = 0;

                            string rwUom = "";
                            decimal vConvertionRate = 0;

                            foreach (DataRow BRItem in dataTable.Rows)
                            {
                                #region Update Item Qty

                                #region Find Quantity From Products

                                //decimal AvgRate = productDal.AvgPrice(BRItem["RawItemNo"].ToString(),
                                //                                      Master.ReceiveDateTime, currConn, transaction);

                                DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                if (quantity > 0)
                                {
                                    AvgRate = amount / quantity;
                                }
                                else
                                {
                                    AvgRate = 0;
                                }

                                //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                rwUom = BRItem["Uom"].ToString();
                                var rwUomMajor = BRItem["Uomn"].ToString();
                                if (string.IsNullOrEmpty(rwUom))
                                {
                                    throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                }

                                /*Processing UOM*/

                                UOMDAL uomdal = new UOMDAL();
                                vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);

                                #endregion Find Quantity From Products

                                #region valueAssign
                                v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                v1Wastage = (vWastage) * Item.UOMQty;
                                v1BOMId = BomId;
                                v1RawItemNo = BRItem["RawItemNo"].ToString();
                                v1UOM = BRItem["UOM"].ToString();
                                v1CostPrice = AvgRate * vConvertionRate;
                                v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                v1UOMPrice = AvgRate;
                                v1UOMn = BRItem["UOMn"].ToString();
                                v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                v1FinishItemNo = FinishItemIdFromOH;
                                v1UOMc = vConvertionRate;
                                v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                #endregion valueAssign

                                #region Stock
                                if (NegStockAllow == false)
                                {
                                    decimal vStock = 0;
                                    //var stock = productDal.StockInHand(v1RawItemNo,
                                    //    Master.ReceiveDateTime+ DateTime.Now.ToString(" HH:mm:ss"), currConn, transaction).ToString();

                                    var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                                  Master.ReceiveDateTime +
                                                                                  DateTime.Now.ToString(" HH:mm:ss"),
                                                                currConn, transaction, false).Rows[0]["Quantity"].ToString();
                                    vStock = Convert.ToDecimal(stock);


                                    if ((vStock - v1UOMQty) < 0)
                                    {
                                        string FinName = string.Empty;
                                        string FinCode = string.Empty;
                                        string RawName = string.Empty;
                                        string RawCode = string.Empty;
                                        DataTable finDt = new DataTable();
                                        finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                        foreach (DataRow FinItem in finDt.Rows)
                                        {
                                            FinName = FinItem["ProductName"].ToString();
                                            FinCode = FinItem["ProductCode"].ToString();
                                        }
                                        DataTable rawDt = new DataTable();
                                        rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                        foreach (DataRow RawItem in rawDt.Rows)
                                        {
                                            RawName = RawItem["ProductName"].ToString();
                                            RawCode = RawItem["ProductCode"].ToString();
                                        }

                                        throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                    }
                                }
                                #endregion Stock

                                #region Find Quantity From Transaction

                                sqlText = "";
                                sqlText += " insert into IssueDetails(";

                                sqlText += " IssueNo,";
                                sqlText += " IssueLineNo,";
                                sqlText += " ItemNo,";
                                sqlText += " Quantity,";
                                sqlText += " NBRPrice,";
                                sqlText += " CostPrice,";
                                sqlText += " UOM,";
                                sqlText += " VATRate,";
                                sqlText += " VATAmount,";
                                sqlText += " SubTotal,";
                                sqlText += " Comments,";
                                sqlText += " CreatedBy,";
                                sqlText += " CreatedOn,";
                                sqlText += " LastModifiedBy,";
                                sqlText += " LastModifiedOn,";
                                sqlText += " ReceiveNo,";
                                sqlText += " IssueDateTime,";
                                sqlText += " SD,";
                                sqlText += " SDAmount,";
                                sqlText += " Wastage,";
                                sqlText += " BOMDate,";
                                sqlText += " FinishItemNo,";
                                sqlText += " transactionType,";
                                sqlText += " IssueReturnId,";
                                sqlText += " UOMQty,";
                                sqlText += " UOMPrice,";
                                sqlText += " UOMc,";
                                sqlText += " UOMn,";
                                sqlText += " UOMWastage,";
                                sqlText += " BOMId,";
                                sqlText += " Post";
                                sqlText += " )";
                                sqlText += " values( ";
                                sqlText += "'" + newID + "',";
                                sqlText += "'" + Item.ReceiveLineNo + "',";
                                sqlText += " '" + v1RawItemNo + "', ";
                                sqlText += " " + v1Quantity + " ,";
                                sqlText += " " + AvgRate + ",";
                                sqlText += "" + v1CostPrice + ",";
                                sqlText += " '" + v1UOM + "',";
                                sqlText += " 0,0, ";
                                sqlText += " " + v1SubTotal + ",";
                                sqlText += "'" + Item.CommentsD + "',";
                                sqlText += "'" + Master.CreatedBy + "',";
                                sqlText += "'" + Master.CreatedOn + "',";
                                sqlText += "'" + Master.LastModifiedBy + "',";
                                sqlText += "'" + Master.LastModifiedOn + "',";
                                sqlText += "'" + newID + "',";
                                sqlText += "'" + Master.ReceiveDateTime + "',";
                                sqlText += " 0,	0,";
                                sqlText += " " + v1Wastage + ",	";
                                sqlText += "'" + v1BOMDate + "',	";
                                sqlText += "'" + v1FinishItemNo + "',";
                                sqlText += "'" + Master.transactionType + "',";
                                sqlText += "'" + Master.ReturnId + "',";
                                sqlText += "" + v1UOMQty + ",";
                                sqlText += "" + v1UOMPrice + ",";
                                sqlText += "" + v1UOMc + ",";
                                sqlText += "'" + v1UOMn + "',";
                                sqlText += "'" + v1UOMWastage + "',";
                                sqlText += "'" + v1BOMId + "',";
                                sqlText += "'" + issueAutoPostValue + "'";
                                sqlText += ")";
                                SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                cmdInsertIssue.Transaction = transaction;
                                transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                    MessageVM.receiveMsgUnableToSaveIssue);
                                }

                                #region Update Issue

                                sqlText = "";
                                sqlText += " update IssueHeaders set ";
                                sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                sqlText += " where (IssueHeaders.IssueNo= '" + newID + "')";

                                SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                cmdUpdateIssue.Transaction = transaction;
                                transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                    MessageVM.receiveMsgUnableToSaveIssue);
                                }

                                #endregion Update Issue

                                #endregion Qty  check and Update

                                #endregion Qty  check and Update
                            }
                        }

                        #endregion Find Raw Item From BOM and update Stock

                    }
                    #endregion TollFinishReceive


                }


                #endregion Insert Detail Table
                #endregion Insert into Details(Insert complete in Header)

                #region return Current ID and Post Status

                sqlText = "";
                sqlText = sqlText + "select distinct  Post from dbo.ReceiveHeaders WHERE ReceiveNo='" + newID + "'";
                SqlCommand cmdIPS = new SqlCommand(sqlText, currConn);
                cmdIPS.Transaction = transaction;
                PostStatus = (string)cmdIPS.ExecuteScalar();
                if (string.IsNullOrEmpty(PostStatus))
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgUnableCreatID);
                }


                #endregion Prefetch
                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                    }

                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSaveSuccessfully;
                retResults[2] = "" + newID;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            catch (SqlException sqlex)
            {

                transaction.Rollback();
                FileLogger.Log("ReceiveDAL", "ReceiveInsert_18092013", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {

                transaction.Rollback();
                FileLogger.Log("ReceiveDAL", "ReceiveInsert_18092013", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }
        public string[] ReceiveUpdate_18092013(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";
            bool NegStockAllow = false;
            DateTime previousReceiveDate = DateTime.MinValue;
            DateTime receiveDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue;  //start
            string BomId = string.Empty;

            string newID = "";
            string PostStatus = "";
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";
            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgNoDataToUpdate);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, "Please Check Invoice Data and Time");

                }



                #endregion Validation for Header
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();
                transaction = currConn.BeginTransaction(MessageVM.receiveMsgMethodNameInsert);
                #endregion open connection and transaction
                #region Master

                string vissueAutoPost, vNegStockAllow = string.Empty;

                vissueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost");
                vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                if (
                    string.IsNullOrEmpty(vissueAutoPost)
                   || string.IsNullOrEmpty(vNegStockAllow)
                    )
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Receive");
                }
                issueAutoPost = Convert.ToBoolean(vissueAutoPost == "Y" ? true : false);
                NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                if (issueAutoPost)
                    issueAutoPostValue = "Y";

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDateTime;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK
                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders WHERE ReceiveNo='" + Master.ReceiveNo + "' ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUnableFindExistID);
                }

                #endregion Find ID for Update


                if (Master.transactionType == "ReceiveReturn")
                {
                    #region Find Receive Return Date

                    sqlText = "";
                    sqlText = sqlText + "select ReceiveDateTime from ReceiveHeaders" +
                              " WHERE ReceiveNo='" + Master.ReturnId + "' ";
                    SqlCommand cmdFindPDate = new SqlCommand(sqlText, currConn);
                    cmdFindPDate.Transaction = transaction;
                    previousReceiveDate = (DateTime)cmdFindPDate.ExecuteScalar();

                    if (previousReceiveDate == null)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                        MessageVM.receiveMsgFindExistID);
                    }

                    #endregion  Find Receive Return Date
                }

                #region ID check completed,update Information in Header

                #region update Header
                sqlText = "";

                sqlText += " update ReceiveHeaders set  ";
                sqlText += " ReceiveDateTime= '" + Master.ReceiveDateTime + "' ,";
                sqlText += " TotalAmount= " + Master.TotalAmount + " ,";
                sqlText += " SerialNo= '" + Master.SerialNo + "' ,";
                sqlText += " Comments= '" + Master.Comments + "' ,";
                sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "' ,";
                sqlText += " transactionType= '" + Master.transactionType + "' ,";
                sqlText += " ReceiveReturnId= '" + Master.ReturnId + "' ,";
                sqlText += " Post= '" + Master.Post + "' ";
                sqlText += " where  ReceiveNo= '" + Master.ReceiveNo + "' ";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUpdateNotSuccessfully);
                }
                #endregion update Header

                #region Transaction Not Other

                #region Transaction is FromBOM
                if (Master.FromBOM == "Y")
                {
                    if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" || Master.transactionType == "WIP" || Master.transactionType == "TollFinishReceive" || Master.transactionType == "Tender")
                    {
                        #region update Issue

                        sqlText = "";
                        sqlText += " update IssueHeaders set ";
                        sqlText += " ShiftId='" + Master.ShiftId + "',";
                        sqlText += " IssueDateTime='" + Master.ReceiveDateTime + "',";
                        sqlText += " Comments= '" + Master.Comments + "' ,";
                        sqlText += " SerialNo= '" + Master.SerialNo + "' ,";
                        sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                        sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                        sqlText += " transactionType= '" + Master.transactionType + "' ,";
                        sqlText += " IssueReturnId= '" + Master.ReturnId + "' ,";
                        sqlText += " Post= '" + issueAutoPostValue + "' ";
                        sqlText += " where  IssueNo= '" + Master.ReceiveNo + "' ";


                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                        cmdUpdateIssue.Transaction = transaction;
                        transResult = (int)cmdUpdateIssue.ExecuteNonQuery();
                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                                            MessageVM.receiveMsgUpdateNotSuccessfully);
                        }

                        #endregion update Issue

                    }

                }

                #endregion Transaction is TollReceive

                #endregion Transaction Not Other


                #endregion ID check completed,update Information in Header

                #endregion Master
                #region Update into Details(Update complete in Header)
                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgNoDataToUpdate);
                }


                #endregion Validation for Detail

                #region Update Detail Table

                foreach (var Item in Details.ToList())
                {
                    ProductDAL productDal = new ProductDAL();

                    #region Find Transaction Mode Insert or Update

                    IDExist = 0;
                    sqlText = "";
                    sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo='" + Master.ReceiveNo + "' ";
                    sqlText += " AND ItemNo='" + Item.ItemNo + "'";
                    SqlCommand cmdFindId = new SqlCommand(sqlText, currConn);
                    cmdFindId.Transaction = transaction;
                    IDExist = (int)cmdFindId.ExecuteScalar();
                    if (Master.transactionType == "ReceiveReturn")

                        receiveDate = previousReceiveDate.Date;
                    else
                        receiveDate = Convert.ToDateTime(Master.ReceiveDateTime);

                    if (IDExist <= 0)
                    {
                        #region Insert only DetailTable

                        sqlText = "";
                        sqlText += " insert into ReceiveDetails(";

                        sqlText += " ReceiveNo,";
                        sqlText += " ReceiveLineNo,";
                        sqlText += " ItemNo,";
                        sqlText += " Quantity,";
                        sqlText += " CostPrice,";
                        sqlText += " NBRPrice,";
                        sqlText += " UOM,";
                        sqlText += " VATRate,";
                        sqlText += " VATAmount,";
                        sqlText += " SubTotal,";
                        sqlText += " Comments,";
                        sqlText += " CreatedBy,";
                        sqlText += " CreatedOn,";
                        sqlText += " LastModifiedBy,";
                        sqlText += " LastModifiedOn,";
                        sqlText += " SD,";
                        sqlText += " SDAmount,";
                        sqlText += " ReceiveDateTime,";
                        sqlText += " transactionType,";
                        sqlText += " ReceiveReturnId,";
                        sqlText += " BOMId,";
                        sqlText += " UOMPrice,";
                        sqlText += " UOMQty,";
                        sqlText += " UOMn,";
                        sqlText += " UOMc,";
                        sqlText += " VATName,";

                        sqlText += " Post";
                        sqlText += " )";
                        sqlText += " values(	";
                        sqlText += "'" + Master.ReceiveNo + "',";
                        sqlText += "'" + Item.ReceiveLineNo + "',";
                        sqlText += "'" + Item.ItemNo + "',";
                        sqlText += "'" + Item.Quantity + "',";
                        sqlText += "'" + Item.CostPrice + "',";
                        sqlText += "'" + Item.NBRPrice + "',";
                        sqlText += "'" + Item.UOM + "',";
                        sqlText += "'" + Item.VATRate + "',";
                        sqlText += "'" + Item.VATAmount + "',";
                        sqlText += "'" + Item.SubTotal + "',";
                        sqlText += "'" + Item.CommentsD + "',";
                        sqlText += "'" + Master.CreatedBy + "',";
                        sqlText += "'" + Master.CreatedOn + "',";
                        sqlText += "'" + Master.LastModifiedBy + "',";
                        sqlText += "'" + Master.LastModifiedOn + "',";
                        sqlText += "'" + Item.SD + "',";
                        sqlText += "'" + Item.SDAmount + "',";
                        sqlText += "'" + Master.ReceiveDateTime + "',";
                        sqlText += "'" + Master.transactionType + "',";
                        sqlText += "'" + Master.ReturnId + "',";
                        sqlText += "'" + Item.BOMId + "',";

                        sqlText += "'" + Item.UOMPrice + "',";
                        sqlText += "'" + Item.UOMQty + "',";
                        sqlText += "'" + Item.UOMn + "',";
                        sqlText += "'" + Item.UOMc + "',";
                        sqlText += "'" + Item.VatName + "',";


                        sqlText += "'" + Master.Post + "'";
                        sqlText += ")	";


                        SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        cmdInsDetail.Transaction = transaction;
                        transResult = (int)cmdInsDetail.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, MessageVM.receiveMsgSaveNotSuccessfully);
                        }
                        #endregion Insert only DetailTable
                        #region if Transection not Other Insert Issue /Receive


                        #region Purchase For TollReceive
                        #region From BOM

                        if (Master.FromBOM == "Y")
                        {
                            BomId = string.Empty;
                            BOMDate = DateTime.MinValue;

                            #region Last BOMId

                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(BOMId,0)) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                            cmdBomId.Transaction = transaction;
                            if (cmdBomId.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BomId = "0";
                            }
                            else
                            {
                                BomId = (string)cmdBomId.ExecuteScalar();
                            }

                            #endregion Last BOMId

                            #region Last BOMDate

                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(EffectDate,'1900/01/01')) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                            cmdBomEDate.Transaction = transaction;
                            if (cmdBomEDate.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BOMDate = DateTime.MinValue;
                            }
                            else
                            {
                                BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                            }

                            #endregion Last BOMDate


                            if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" || Master.transactionType == "WIP")
                            {



                                #region Find Raw Item From BOM  and update Stock


                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.Uom,UOMUQty,UOMWQty from BOMRaws b  ";
                                sqlText += " where ";
                                sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                                sqlText += " and vatname='" + Item.VatName + "' ";
                                sqlText += " and effectdate='" + BOMDate.Date + "'";
                                sqlText += " and post='Y' ";

                                sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";

                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                                cmdRIFB.Transaction = transaction;
                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {
                                    decimal vQuantity = 0;
                                    decimal vWastage = 0;
                                    string rwUom = "";
                                    decimal vConvertionRate = 0;
                                    decimal AvgRate = 0;
                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Declare
                                        decimal v1Quantity = 0;
                                        string v1RawItemNo = "";
                                        decimal v1CostPrice = 0;
                                        string v1UOM = "";
                                        decimal v1SubTotal = 0;
                                        decimal v1Wastage = 0;
                                        DateTime v1BOMDate = DateTime.Now.Date;
                                        string v1FinishItemNo = "";

                                        decimal v1UOMQty = 0;
                                        decimal v1UOMPrice = 0;
                                        decimal v1UOMc = 0;
                                        string v1UOMn = "";
                                        string v1BOMId = "";
                                        decimal v1UOMWastage = 0;
                                        #endregion DECLARE

                                        #region Update Item Qty

                                        #region Find Quantity From Products

                                        //decimal AvgRate = productDal.AvgPrice(BRItem["RawItemNo"].ToString(),
                                        //Master.ReceiveDateTime, currConn, transaction);
                                        DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                        decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                        decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                        if (quantity > 0)
                                        {
                                            AvgRate = amount / quantity;
                                        }
                                        else
                                        {
                                            AvgRate = 0;
                                        }


                                        //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                        //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                        vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                        vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                        rwUom = BRItem["Uom"].ToString();
                                        var rwUomMajor = BRItem["Uomn"].ToString();
                                        if (string.IsNullOrEmpty(rwUom))
                                        {
                                            throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                        }

                                        /*Processing UOM*/

                                        UOMDAL uomdal = new UOMDAL();
                                        vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);

                                        #endregion Find Quantity From Products

                                        #region valueAssign
                                        v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                        v1Wastage = (vWastage) * Item.UOMQty;
                                        v1BOMId = BomId;
                                        v1RawItemNo = BRItem["RawItemNo"].ToString();
                                        v1UOM = BRItem["UOM"].ToString();
                                        v1CostPrice = AvgRate * vConvertionRate;
                                        v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                        v1UOMPrice = AvgRate;
                                        v1UOMn = BRItem["UOMn"].ToString();
                                        v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                        v1FinishItemNo = Item.ItemNo;
                                        v1UOMc = vConvertionRate;
                                        v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                        v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                        #endregion valueAssign

                                        #region Stock
                                        if (NegStockAllow == false)
                                        {
                                            decimal vStock = 0;
                                            //var stock = productDal.StockInHand(v1RawItemNo,
                                            //    Master.ReceiveDateTime + DateTime.Now.ToString(" HH:mm:ss"), currConn, transaction).ToString();

                                            var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                                  Master.ReceiveDateTime +
                                                                                  DateTime.Now.ToString(" HH:mm:ss"),
                                                                currConn, transaction, false).Rows[0]["Quantity"].ToString();

                                            vStock = Convert.ToDecimal(stock);


                                            if ((vStock - v1UOMQty) < 0)
                                            {
                                                string FinName = string.Empty;
                                                string FinCode = string.Empty;
                                                string RawName = string.Empty;
                                                string RawCode = string.Empty;
                                                DataTable finDt = new DataTable();
                                                finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                                foreach (DataRow FinItem in finDt.Rows)
                                                {
                                                    FinName = FinItem["ProductName"].ToString();
                                                    FinCode = FinItem["ProductCode"].ToString();
                                                }
                                                DataTable rawDt = new DataTable();
                                                rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                                foreach (DataRow RawItem in rawDt.Rows)
                                                {
                                                    RawName = RawItem["ProductName"].ToString();
                                                    RawCode = RawItem["ProductCode"].ToString();
                                                }

                                                throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                            }
                                        }
                                        #endregion Stock
                                        #region Find Quantity From Transaction

                                        sqlText = "";
                                        sqlText += " insert into IssueDetails(";
                                        sqlText += " IssueNo,";
                                        sqlText += " IssueLineNo,";
                                        sqlText += " ItemNo,";
                                        sqlText += " Quantity,";
                                        sqlText += " NBRPrice,";
                                        sqlText += " CostPrice,";
                                        sqlText += " UOM,";
                                        sqlText += " VATRate,";
                                        sqlText += " VATAmount,";
                                        sqlText += " SubTotal,";
                                        sqlText += " Comments,";
                                        sqlText += " CreatedBy,";
                                        sqlText += " CreatedOn,";
                                        sqlText += " LastModifiedBy,";
                                        sqlText += " LastModifiedOn,";
                                        sqlText += " ReceiveNo,";
                                        sqlText += " IssueDateTime,";
                                        sqlText += " SD,";
                                        sqlText += " SDAmount,";
                                        sqlText += " Wastage,";
                                        sqlText += " BOMDate,";
                                        sqlText += " FinishItemNo,";
                                        sqlText += " transactionType,";
                                        sqlText += " IssueReturnId,";
                                        sqlText += " UOMQty,";
                                        sqlText += " UOMPrice,";
                                        sqlText += " UOMc,";
                                        sqlText += " UOMn,";
                                        sqlText += " UOMWastage,";
                                        sqlText += " BOMId,";
                                        sqlText += " Post";
                                        sqlText += " )";
                                        sqlText += " values( ";
                                        sqlText += "'" + Master.ReceiveNo + "',";
                                        sqlText += "'" + Item.ReceiveLineNo + "',";
                                        sqlText += " '" + v1RawItemNo + "', ";
                                        sqlText += " " + v1Quantity + " ,";
                                        sqlText += " " + AvgRate + ",";
                                        sqlText += "" + v1CostPrice + ",";

                                        sqlText += " '" + v1UOM + "',";
                                        sqlText += " 0,0, ";
                                        sqlText += " " + v1SubTotal + ",";
                                        sqlText += "'" + Item.CommentsD + "',";
                                        sqlText += "'" + Master.CreatedBy + "',";
                                        sqlText += "'" + Master.CreatedOn + "',";
                                        sqlText += "'" + Master.LastModifiedBy + "',";
                                        sqlText += "'" + Master.LastModifiedOn + "',";
                                        sqlText += "'" + newID + "',";
                                        sqlText += "'" + Master.ReceiveDateTime + "',";
                                        sqlText += " 0,	0,";
                                        sqlText += " " + v1Wastage + ",	";
                                        sqlText += "'" + v1BOMDate + "',	";
                                        sqlText += "'" + v1FinishItemNo + "',";
                                        sqlText += "'" + Master.transactionType + "',";
                                        sqlText += "'" + Master.ReturnId + "',";
                                        sqlText += "" + v1UOMQty + ",";
                                        sqlText += "" + v1UOMPrice + ",";
                                        sqlText += "" + v1UOMc + ",";
                                        sqlText += "'" + v1UOMn + "',";
                                        sqlText += "'" + v1UOMWastage + "',";
                                        sqlText += "'" + v1BOMId + "',";

                                        sqlText += "'" + issueAutoPostValue + "'";
                                        sqlText += ")";
                                        SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                        cmdInsertIssue.Transaction = transaction;
                                        transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                        if (transResult <= 0)
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                            MessageVM.receiveMsgUnableToSaveIssue);
                                        }

                                        #region Update Issue

                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                        cmdUpdateIssue.Transaction = transaction;
                                        transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                        if (transResult <= 0)
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                            MessageVM.receiveMsgUnableToSaveIssue);
                                        }

                                        #endregion Update Issue

                                        #endregion Qty  check and Update

                                        #endregion Qty  check and Update
                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock

                            }
                            else if (Master.transactionType == "Tender")
                            {

                                #region Find Raw Item From BOM  and update Stock

                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,UOMUQty,UOMWQty from BOMRaws b  ";
                                sqlText += " WHERE ";
                                sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                                sqlText += " and vatname='" + Item.VatName + "' ";
                                sqlText += " and effectdate='" + BOMDate.Date + "'";

                                sqlText += "   and post='Y'  and (b.rawitemtype='raw' or b.rawitemtype='pack') ";

                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                                cmdRIFB.Transaction = transaction;
                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {

                                    decimal vQuantity = 0;
                                    decimal vWastage = 0;
                                    decimal AvgRate = 0;
                                    string rwUom = "";
                                    decimal vConvertionRate = 0;

                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Declare
                                        decimal v1Quantity = 0;
                                        string v1RawItemNo = "";
                                        decimal v1CostPrice = 0;
                                        string v1UOM = "";
                                        decimal v1SubTotal = 0;
                                        decimal v1Wastage = 0;
                                        DateTime v1BOMDate = DateTime.Now.Date;
                                        string v1FinishItemNo = "";

                                        decimal v1UOMQty = 0;
                                        decimal v1UOMPrice = 0;
                                        decimal v1UOMc = 0;
                                        string v1UOMn = "";
                                        string v1BOMId = "";
                                        decimal v1UOMWastage = 0;
                                        #endregion DECLARE

                                        #region Update Item Qty

                                        #region Find Quantity From Products

                                        //decimal AvgRate = productDal.AvgPrice(BRItem["RawItemNo"].ToString(),
                                        //                                      Master.ReceiveDateTime, currConn, transaction);

                                        DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                        decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                        decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                        if (quantity > 0)
                                        {
                                            AvgRate = amount / quantity;
                                        }
                                        else
                                        {
                                            AvgRate = 0;
                                        }


                                        //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                        //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                        vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                        vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                        rwUom = BRItem["Uom"].ToString();
                                        var rwUomMajor = BRItem["Uomn"].ToString();
                                        if (string.IsNullOrEmpty(rwUom))
                                        {
                                            throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                        }


                                        UOMDAL uomdal = new UOMDAL();
                                        vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);


                                        #endregion Find Quantity From Products
                                        #region valueAssign
                                        v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                        v1Wastage = (vWastage) * Item.UOMQty;
                                        v1BOMId = BomId;
                                        v1RawItemNo = BRItem["RawItemNo"].ToString();
                                        v1UOM = BRItem["UOM"].ToString();
                                        v1CostPrice = AvgRate * vConvertionRate;
                                        v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                        v1UOMPrice = AvgRate;
                                        v1UOMn = BRItem["UOMn"].ToString();
                                        v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                        v1FinishItemNo = Item.ItemNo;
                                        v1UOMc = vConvertionRate;
                                        v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                        v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                        #endregion valueAssign

                                        #region Stock
                                        if (NegStockAllow == false)
                                        {
                                            decimal vStock = 0;
                                            //var stock = productDal.StockInHand(v1RawItemNo,
                                            //    Master.ReceiveDateTime + DateTime.Now.ToString(" HH:mm:ss"), currConn, transaction).ToString();
                                            var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                                  Master.ReceiveDateTime +
                                                                                  DateTime.Now.ToString(" HH:mm:ss"),
                                                                currConn, transaction, false).Rows[0]["Quantity"].ToString();
                                            vStock = Convert.ToDecimal(stock);


                                            if ((vStock - v1UOMQty) < 0)
                                            {
                                                string FinName = string.Empty;
                                                string FinCode = string.Empty;
                                                string RawName = string.Empty;
                                                string RawCode = string.Empty;
                                                DataTable finDt = new DataTable();
                                                finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                                foreach (DataRow FinItem in finDt.Rows)
                                                {
                                                    FinName = FinItem["ProductName"].ToString();
                                                    FinCode = FinItem["ProductCode"].ToString();
                                                }
                                                DataTable rawDt = new DataTable();
                                                rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                                foreach (DataRow RawItem in rawDt.Rows)
                                                {
                                                    RawName = RawItem["ProductName"].ToString();
                                                    RawCode = RawItem["ProductCode"].ToString();
                                                }

                                                throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                            }
                                        }
                                        #endregion Stock
                                        #region Find Quantity From Transaction

                                        sqlText = "";
                                        sqlText += " insert into IssueDetails(";

                                        sqlText += " IssueNo,";
                                        sqlText += " IssueLineNo,";
                                        sqlText += " ItemNo,";
                                        sqlText += " Quantity,";
                                        sqlText += " NBRPrice,";
                                        sqlText += " CostPrice,";
                                        sqlText += " UOM,";
                                        sqlText += " VATRate,";
                                        sqlText += " VATAmount,";
                                        sqlText += " SubTotal,";
                                        sqlText += " Comments,";
                                        sqlText += " CreatedBy,";
                                        sqlText += " CreatedOn,";
                                        sqlText += " LastModifiedBy,";
                                        sqlText += " LastModifiedOn,";
                                        sqlText += " ReceiveNo,";
                                        sqlText += " IssueDateTime,";
                                        sqlText += " SD,";
                                        sqlText += " SDAmount,";
                                        sqlText += " Wastage,";
                                        sqlText += " BOMDate,";
                                        sqlText += " FinishItemNo,";
                                        sqlText += " transactionType,";
                                        sqlText += " IssueReturnId,";
                                        sqlText += " UOMQty,";
                                        sqlText += " UOMPrice,";
                                        sqlText += " UOMc,";
                                        sqlText += " UOMn,";
                                        sqlText += " UOMWastage,";
                                        sqlText += " BOMId,";
                                        sqlText += " Post";
                                        sqlText += " )";
                                        sqlText += " values( ";
                                        sqlText += "'" + Master.ReceiveNo + "',";
                                        sqlText += "'" + Item.ReceiveLineNo + "',";
                                        sqlText += " '" + v1RawItemNo + "', ";
                                        sqlText += " " + v1Quantity + " ,";
                                        sqlText += " " + AvgRate + ",";
                                        sqlText += "" + v1CostPrice + ",";

                                        sqlText += " '" + v1UOM + "',";
                                        sqlText += " 0,0, ";
                                        sqlText += " " + v1SubTotal + ",";
                                        sqlText += "'" + Item.CommentsD + "',";
                                        sqlText += "'" + Master.CreatedBy + "',";
                                        sqlText += "'" + Master.CreatedOn + "',";
                                        sqlText += "'" + Master.LastModifiedBy + "',";
                                        sqlText += "'" + Master.LastModifiedOn + "',";
                                        sqlText += "'" + newID + "',";
                                        sqlText += "'" + Master.ReceiveDateTime + "',";
                                        sqlText += " 0,	0,";
                                        sqlText += " " + v1Wastage + ",	";
                                        sqlText += "'" + v1BOMDate + "',	";
                                        sqlText += "'" + v1FinishItemNo + "',";
                                        sqlText += "'" + Master.transactionType + "',";
                                        sqlText += "'" + Master.ReturnId + "',";
                                        sqlText += "" + v1UOMQty + ",";
                                        sqlText += "" + v1UOMPrice + ",";
                                        sqlText += "" + v1UOMc + ",";
                                        sqlText += "'" + v1UOMn + "',";
                                        sqlText += "'" + v1UOMWastage + "',";
                                        sqlText += "'" + v1BOMId + "',";

                                        sqlText += "'" + issueAutoPostValue + "'";
                                        sqlText += ")";
                                        SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                        cmdInsertIssue.Transaction = transaction;
                                        transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                        if (transResult <= 0)
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                            MessageVM.receiveMsgUnableToSaveIssue);
                                        }

                                        #region Update Issue

                                        sqlText = "";
                                        sqlText += " update IssueHeaders set ";
                                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                        sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                        cmdUpdateIssue.Transaction = transaction;
                                        transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                        if (transResult <= 0)
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                            MessageVM.receiveMsgUnableToSaveIssue);
                                        }

                                        #endregion Update Issue

                                        #endregion Qty  check and Update

                                        #endregion Qty  check and Update
                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock

                            }

                        }

                        #endregion From BOM
                        #region TollFinishReceive
                        if (Master.transactionType == "TollFinishReceive")
                        {
                            BomId = string.Empty;
                            BOMDate = DateTime.MinValue;

                            string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Issue)", Master.ReceiveDateTime,
                                                                               currConn, transaction);


                            #region Last BOMId
                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(BOMId,0)) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                            cmdBomId.Transaction = transaction;
                            if (cmdBomId.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BomId = "0";
                            }
                            else
                            {
                                BomId = (string)cmdBomId.ExecuteScalar();
                            }

                            #endregion Last BOMId

                            #region Last BOMDate
                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(EffectDate,'1900/01/01')) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                            cmdBomEDate.Transaction = transaction;
                            if (cmdBomEDate.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BOMDate = DateTime.MinValue;
                            }
                            else
                            {
                                BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                            }

                            #endregion Last BOMDate


                            #region Find Raw Item From BOM  and update Stock

                            sqlText = "";


                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                            sqlText += " WHERE ";

                            sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate='" + BOMDate.Date + "'";
                            sqlText += " and post='Y' ";

                            sqlText += " and (b.rawitemtype='raw' or b.rawitemtype='pack') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                "There is no price declaration for this item.");
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;
                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;

                                foreach (DataRow BRItem in dataTable.Rows)
                                {

                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    #endregion DECLARE
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    //decimal AvgRate = productDal.AvgPrice(BRItem["RawItemNo"].ToString(),
                                    //                                      Master.ReceiveDateTime, currConn, transaction);

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }

                                    //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                    //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);


                                    #endregion Find Quantity From Products

                                    #region valueAssign
                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    v1BOMId = BomId;
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = FinishItemIdFromOH;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                    #endregion valueAssign

                                    #region Stock
                                    if (NegStockAllow == false)
                                    {
                                        decimal vStock = 0;
                                        //var stock = productDal.StockInHand(v1RawItemNo,
                                        //    Master.ReceiveDateTime + DateTime.Now.ToString(" HH:mm:ss"), currConn, transaction).ToString();
                                        var stock = productDal.AvgPriceNew(v1RawItemNo,
                                                                                  Master.ReceiveDateTime +
                                                                                  DateTime.Now.ToString(" HH:mm:ss"),
                                                                currConn, transaction, false).Rows[0]["Quantity"].ToString();

                                        vStock = Convert.ToDecimal(stock);


                                        if ((vStock - v1UOMQty) < 0)
                                        {
                                            string FinName = string.Empty;
                                            string FinCode = string.Empty;
                                            string RawName = string.Empty;
                                            string RawCode = string.Empty;
                                            DataTable finDt = new DataTable();
                                            finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                            foreach (DataRow FinItem in finDt.Rows)
                                            {
                                                FinName = FinItem["ProductName"].ToString();
                                                FinCode = FinItem["ProductCode"].ToString();
                                            }
                                            DataTable rawDt = new DataTable();
                                            rawDt = productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                            foreach (DataRow RawItem in rawDt.Rows)
                                            {
                                                RawName = RawItem["ProductName"].ToString();
                                                RawCode = RawItem["ProductCode"].ToString();
                                            }

                                            throw new ArgumentNullException("ReceiveInsert", "Stock not Available for Finish Item( Name: " + FinName + " & Code: " + FinCode + " ) \n and consumtion Material ( Name: " + RawName + " & Code: " + RawCode + " )");
                                        }
                                    }
                                    #endregion Stock
                                    #region Find Quantity From Transaction

                                    sqlText = "";
                                    sqlText += " insert into IssueDetails(";
                                    sqlText += " IssueNo,";
                                    sqlText += " IssueLineNo,";
                                    sqlText += " ItemNo,";
                                    sqlText += " Quantity,";
                                    sqlText += " NBRPrice,";
                                    sqlText += " CostPrice,";
                                    sqlText += " UOM,";
                                    sqlText += " VATRate,";
                                    sqlText += " VATAmount,";
                                    sqlText += " SubTotal,";
                                    sqlText += " Comments,";
                                    sqlText += " CreatedBy,";
                                    sqlText += " CreatedOn,";
                                    sqlText += " LastModifiedBy,";
                                    sqlText += " LastModifiedOn,";
                                    sqlText += " ReceiveNo,";
                                    sqlText += " IssueDateTime,";
                                    sqlText += " SD,";
                                    sqlText += " SDAmount,";
                                    sqlText += " Wastage,";
                                    sqlText += " BOMDate,";
                                    sqlText += " FinishItemNo,";
                                    sqlText += " transactionType,";
                                    sqlText += " IssueReturnId,";
                                    sqlText += " UOMQty,";
                                    sqlText += " UOMPrice,";
                                    sqlText += " UOMc,";
                                    sqlText += " UOMn,";
                                    sqlText += " UOMWastage,";
                                    sqlText += " BOMId,";
                                    sqlText += " Post";
                                    sqlText += " )";
                                    sqlText += " values( ";
                                    sqlText += "'" + Master.ReceiveNo + "',";
                                    sqlText += "'" + Item.ReceiveLineNo + "',";
                                    sqlText += " '" + v1RawItemNo + "', ";
                                    sqlText += " " + v1Quantity + " ,";
                                    sqlText += " " + AvgRate + ",";
                                    sqlText += "" + v1CostPrice + ",";

                                    sqlText += " '" + v1UOM + "',";
                                    sqlText += " 0,0, ";
                                    sqlText += " " + v1SubTotal + ",";
                                    sqlText += "'" + Item.CommentsD + "',";
                                    sqlText += "'" + Master.CreatedBy + "',";
                                    sqlText += "'" + Master.CreatedOn + "',";
                                    sqlText += "'" + Master.LastModifiedBy + "',";
                                    sqlText += "'" + Master.LastModifiedOn + "',";
                                    sqlText += "'" + newID + "',";
                                    sqlText += "'" + Master.ReceiveDateTime + "',";
                                    sqlText += " 0,	0,";
                                    sqlText += " " + v1Wastage + ",	";
                                    sqlText += "'" + v1BOMDate + "',	";
                                    sqlText += "'" + v1FinishItemNo + "',";
                                    sqlText += "'" + Master.transactionType + "',";
                                    sqlText += "'" + Master.ReturnId + "',";
                                    sqlText += "" + v1UOMQty + ",";
                                    sqlText += "" + v1UOMPrice + ",";
                                    sqlText += "" + v1UOMc + ",";
                                    sqlText += "'" + v1UOMn + "',";
                                    sqlText += "'" + v1UOMWastage + "',";
                                    sqlText += "'" + v1BOMId + "',";

                                    sqlText += "'" + issueAutoPostValue + "'";
                                    sqlText += ")";
                                    SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                    cmdInsertIssue.Transaction = transaction;
                                    transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #region Update Issue

                                    sqlText = "";
                                    sqlText += " update IssueHeaders set ";
                                    sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                    sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                    sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                    cmdUpdateIssue.Transaction = transaction;
                                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                        MessageVM.receiveMsgUnableToSaveIssue);
                                    }

                                    #endregion Update Issue

                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock

                        }
                        #endregion TollFinishReceive

                        #endregion Purchase ID Create For IssueReturn

                        #endregion if Transection not Other Insert Issue /Receive
                    }
                    else
                    {
                        //Update

                        #region Update only DetailTable

                        sqlText = "";


                        sqlText += " update ReceiveDetails set ";
                        sqlText += " ReceiveLineNo='" + Item.ReceiveLineNo + "',";
                        sqlText += " Quantity=" + Item.Quantity + ",";
                        sqlText += " CostPrice='" + Item.CostPrice + "',";
                        sqlText += " NBRPrice='" + Item.NBRPrice + "',";
                        sqlText += " UOM='" + Item.UOM + "',";
                        sqlText += " VATRate='" + Item.VATRate + "',";
                        sqlText += " VATAmount='" + Item.VATAmount + "',";
                        sqlText += " SubTotal='" + Item.SubTotal + "',";
                        sqlText += " Comments='" + Item.CommentsD + "',";
                        sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                        sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                        sqlText += " SD='" + Item.SD + "',";
                        sqlText += " SDAmount='" + Item.SDAmount + "',";
                        sqlText += " ReceiveDateTime='" + Master.ReceiveDateTime + "',";
                        sqlText += " transactionType='" + Master.transactionType + "',";
                        sqlText += " ReceiveReturnId='" + Master.ReturnId + "',";
                        sqlText += " BOMId='" + Item.BOMId + "',";

                        sqlText += " UOMPrice='" + Item.UOMPrice + "',";
                        sqlText += " UOMQty='" + Item.UOMQty + "',";
                        sqlText += " UOMn='" + Item.UOMn + "',";
                        sqlText += " UOMc='" + Item.UOMc + "',";
                        sqlText += " VATName='" + Item.VatName + "',";
                        sqlText += " Post='" + Master.Post + "'";
                        sqlText += " where ReceiveNo='" + Master.ReceiveNo + "' ";
                        sqlText += " and 	ItemNo='" + Item.ItemNo + "' ";



                        SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        cmdInsDetail.Transaction = transaction;
                        transResult = (int)cmdInsDetail.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUpdateNotSuccessfully);
                        }
                        #endregion Update only DetailTable
                        #region Update Issue and Receive if Transaction is not Other


                        #region Transaction is FromBOM
                        if (Master.FromBOM == "Y")
                        {
                            BomId = string.Empty;
                            BOMDate = DateTime.MinValue;

                            #region Last BOMId

                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(BOMId,0)) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                            cmdBomId.Transaction = transaction;
                            if (cmdBomId.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BomId = "0";
                            }
                            else
                            {
                                BomId = (string)cmdBomId.ExecuteScalar();
                            }

                            #endregion Last BOMId

                            #region Last BOMDate

                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(EffectDate,'1900/01/01')) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                            cmdBomEDate.Transaction = transaction;
                            if (cmdBomEDate.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BOMDate = DateTime.MinValue;
                            }
                            else
                            {
                                BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                            }

                            #endregion Last BOMDate


                            if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" || Master.transactionType == "WIP")
                            {
                                #region Update to Issue



                                #region Find Raw Item From BOM  and update Stock
                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty from BOMRaws b  ";
                                sqlText += " WHERE ";
                                sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                                sqlText += " and vatname='" + Item.VatName + "' ";
                                sqlText += " and effectdate='" + BOMDate.Date + "'";
                                sqlText += " and post='Y' ";

                                sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";

                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                                cmdRIFB.Transaction = transaction;
                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {
                                    decimal vQuantity = 0;
                                    decimal vWastage = 0;
                                    decimal vConvertionRate = 0;
                                    decimal AvgRate = 0;


                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    string rwUom = "";

                                    #endregion DECLARE

                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Update Item Qty

                                        #region Find Quantity From Products

                                        DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                        decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                        decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                        if (quantity > 0)
                                        {
                                            AvgRate = amount / quantity;
                                        }
                                        else
                                        {
                                            AvgRate = 0;
                                        }


                                        #endregion Find Quantity From Products

                                        //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                        //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());

                                        vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                        vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());


                                        rwUom = BRItem["Uom"].ToString();
                                        var rwUomMajor = BRItem["Uomn"].ToString();
                                        if (string.IsNullOrEmpty(rwUom))
                                        {
                                            throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                        }

                                        /*Processing UOM*/

                                        UOMDAL uomdal = new UOMDAL();
                                        vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);

                                        #region valueAssign
                                        v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                        v1Wastage = (vWastage) * Item.UOMQty;
                                        v1BOMId = BomId;
                                        v1RawItemNo = BRItem["RawItemNo"].ToString();
                                        v1UOM = BRItem["UOM"].ToString();
                                        v1CostPrice = AvgRate * vConvertionRate;
                                        v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                        v1UOMPrice = AvgRate;
                                        v1UOMn = BRItem["UOMn"].ToString();
                                        v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                        v1FinishItemNo = Item.ItemNo;
                                        v1UOMc = vConvertionRate;
                                        v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                        v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                        #endregion valueAssign

                                        #region Qty  check and Update

                                        if (NegStockAllow == false)
                                        {
                                            #region Find Quantity From Products

                                            //decimal BRItemoldStock =
                                            //productDal.StockInHand(BRItem["RawItemNo"].ToString(),
                                            //                       Master.ReceiveDateTime, currConn,
                                            //                       transaction);
                                            decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                                  Master.ReceiveDateTime,
                                                                currConn, transaction, false).Rows[0]["Quantity"].ToString());



                                            #endregion Find Quantity From Products

                                            #region Find Quantity From Transaction

                                            sqlText = "";
                                            sqlText +=
                                                "select isnull(UOMQty ,isnull(Quantity,0)) from IssueDetails ";
                                            sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                       "and IssueNo= '" + Master.ReceiveNo + "'";
                                            SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, currConn);
                                            cmdBRItemTranQty.Transaction = transaction;
                                            decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                            #endregion Find Quantity From Transaction



                                            if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                            {
                                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                                MessageVM.
                                                                                    receiveMsgStockNotAvailablePost);
                                            }
                                        }




                                        #endregion Qty  check and Update




                                        sqlText = "";
                                        sqlText += " update IssueDetails set";
                                        sqlText += " IssueLineNo='" + Item.ReceiveLineNo + "',";
                                        sqlText += " Comments='" + Item.CommentsD + "',";
                                        sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                        sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                        sqlText += " IssueDateTime='" + Master.ReceiveDateTime + "',";
                                        sqlText += " Post='" + issueAutoPostValue + "',";
                                        sqlText += " uom='" + v1UOM + "',";
                                        sqlText += " Quantity=" + v1Quantity + ",";
                                        sqlText += " Wastage=" + v1Wastage + ",";

                                        sqlText += " BOMDate='" + v1BOMDate + "',";
                                        sqlText += " CostPrice=" + v1CostPrice + ",";
                                        sqlText += " NBRPrice=" + AvgRate + ",";
                                        sqlText += " transactionType='" + Master.transactionType + "',";
                                        sqlText += " IssueReturnId='" + Master.ReturnId + "',";
                                        sqlText += " UOMQty= " + v1UOMQty + ",";
                                        sqlText += " UOMPrice= " + v1UOMPrice + ",";
                                        sqlText += " UOMc= " + v1UOMc + ",";
                                        sqlText += " UOMn= '" + v1UOMn + "',";
                                        sqlText += " UOMWastage= '" + v1UOMWastage + "',";
                                        sqlText += " BOMId= '" + v1BOMId + "',";
                                        sqlText += " SubTotal=" + v1SubTotal + "";
                                        sqlText += " WHERE FinishItemNo=" + v1FinishItemNo + " AND ItemNo='" +
                                                   v1RawItemNo + "' ";
                                        sqlText += " and  IssueNo='" + Master.ReceiveNo + "'";


                                        SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                        cmdInsertIssue.Transaction = transaction;
                                        transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                        if (transResult <= 0)
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                                                            MessageVM.receiveMsgUnableToUpdateIssue);
                                        }

                                        #endregion Qty  check and Update

                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock

                                /////////

                                #endregion Update to Issue

                                #region Update Issue Header

                                sqlText = "";
                                sqlText += " update IssueHeaders set ";
                                sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                                SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                cmdUpdateIssue.Transaction = transaction;
                                transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                                                    MessageVM.receiveMsgUnableToUpdateIssue);
                                }

                                #endregion Update Issue Header

                            }
                            else if (Master.transactionType == "Tender")
                            {
                                #region Update to Issue


                                #region Find Raw Item From BOM  and update Stock

                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM,UOMUQty,UOMWQty from BOMRaws b  ";
                                sqlText += " WHERE ";
                                sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                                sqlText += " and vatname='" + Item.VatName + "' ";
                                sqlText += " and effectdate='" + BOMDate.Date + "'";

                                sqlText += "  and post='Y'   and (b.rawitemtype='raw' or b.rawitemtype='pack') ";
                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                                cmdRIFB.Transaction = transaction;
                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {

                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    #endregion DECLARE

                                    decimal vQuantity = 0;
                                    decimal vWastage = 0;

                                    string rwUom = "";
                                    decimal vConvertionRate = 0;
                                    decimal AvgRate = 0;


                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Update Item Qty

                                        #region Find Quantity From Products

                                        DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                        decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                        decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                        if (quantity > 0)
                                        {
                                            AvgRate = amount / quantity;
                                        }
                                        else
                                        {
                                            AvgRate = 0;
                                        }


                                        #endregion Find Quantity From Products

                                        //vQuantity = Convert.ToDecimal(BRItem["UOMUQty"].ToString());
                                        //vWastage = Convert.ToDecimal(BRItem["UOMWQty"].ToString());
                                        vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                        vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                        rwUom = BRItem["Uom"].ToString();
                                        var rwUomMajor = BRItem["Uomn"].ToString();
                                        if (string.IsNullOrEmpty(rwUom))
                                        {
                                            throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                        }

                                        /*Processing UOM*/

                                        UOMDAL uomdal = new UOMDAL();
                                        vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);


                                        #region valueAssign
                                        v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                        v1Wastage = (vWastage) * Item.UOMQty;
                                        v1BOMId = Convert.ToString(Item.BOMId);
                                        v1RawItemNo = BRItem["RawItemNo"].ToString();
                                        v1UOM = BRItem["UOM"].ToString();
                                        v1CostPrice = AvgRate * vConvertionRate;
                                        v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                        v1UOMPrice = AvgRate;
                                        v1UOMn = BRItem["UOMn"].ToString();
                                        v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                        v1FinishItemNo = Item.ItemNo;
                                        v1UOMc = vConvertionRate;
                                        v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                        v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                        #endregion valueAssign
                                        #region Stock Check
                                        if (NegStockAllow == false)
                                        {
                                            #region Find Quantity From Products

                                            //decimal BRItemoldStock =
                                            //    productDal.StockInHand(v1RawItemNo,
                                            //                           Master.ReceiveDateTime, currConn,
                                            //                           transaction);
                                            decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(v1RawItemNo,
                                                                                 Master.ReceiveDateTime,
                                                               currConn, transaction, false).Rows[0]["Quantity"].ToString());




                                            #endregion Find Quantity From Products

                                            #region Find Quantity From Transaction

                                            sqlText = "";
                                            sqlText +=
                                                "select isnull(UOMQty,isnull(Quantity ,0)) from IssueDetails ";
                                            sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                       "and IssueNo= '" + Master.ReceiveNo + "'";
                                            SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, currConn);
                                            cmdBRItemTranQty.Transaction = transaction;
                                            decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                            #endregion Find Quantity From Transaction



                                            if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                            {
                                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                                MessageVM.
                                                                                    receiveMsgStockNotAvailablePost);
                                            }
                                        }
                                        #endregion Stock Check



                                        sqlText = "";
                                        sqlText += " update IssueDetails set";
                                        sqlText += " IssueLineNo='" + Item.ReceiveLineNo + "',";
                                        sqlText += " Comments='" + Item.CommentsD + "',";
                                        sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                        sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                        sqlText += " IssueDateTime='" + Master.ReceiveDateTime + "',";
                                        sqlText += " Post='" + issueAutoPostValue + "',";
                                        sqlText += " uom='" + v1UOM + "',";
                                        sqlText += " Quantity=" + v1Quantity + ",";
                                        sqlText += " Wastage=" + v1Wastage + ",";
                                        sqlText += " BOMDate='" + v1BOMDate + "',";
                                        sqlText += " CostPrice=" + v1CostPrice + ",";
                                        sqlText += " NBRPrice=" + AvgRate + ",";
                                        sqlText += " transactionType='" + Master.transactionType + "',";
                                        sqlText += " IssueReturnId='" + Master.ReturnId + "',";
                                        sqlText += " UOMQty= " + v1UOMQty + ",";
                                        sqlText += " UOMPrice= " + v1UOMPrice + ",";
                                        sqlText += " UOMc= " + v1UOMc + ",";
                                        sqlText += " UOMn= '" + v1UOMn + "',";
                                        sqlText += " UOMWastage= '" + v1UOMWastage + "',";
                                        sqlText += " BOMId= '" + v1BOMId + "',";
                                        sqlText += " SubTotal=" + v1SubTotal + "";
                                        sqlText += " WHERE FinishItemNo=" + v1FinishItemNo + " AND ItemNo='" +
                                                   v1RawItemNo + "' ";
                                        sqlText += " and  IssueNo='" + Master.ReceiveNo + "'";


                                        SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                        cmdInsertIssue.Transaction = transaction;
                                        transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                        if (transResult <= 0)
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                                                            MessageVM.receiveMsgUnableToUpdateIssue);
                                        }

                                        #endregion Qty  check and Update

                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock

                                /////////

                                #endregion Update to Issue

                                #region Update Issue Header

                                sqlText = "";
                                sqlText += " update IssueHeaders set ";
                                sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                                SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                cmdUpdateIssue.Transaction = transaction;
                                transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                                                    MessageVM.receiveMsgUnableToUpdateIssue);
                                }

                                #endregion Update Issue Header

                            }

                        }

                        #endregion Transaction is Trading

                        #region Transaction is TollFinishReceive

                        if (Master.transactionType == "TollFinishReceive")
                        {
                            string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Issue)", Master.ReceiveDateTime,
                                                                           currConn, transaction);

                            BomId = string.Empty;
                            BOMDate = DateTime.MinValue;

                            #region Last BOMId
                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(BOMId,0)) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                            cmdBomId.Transaction = transaction;
                            if (cmdBomId.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BomId = "0";
                            }
                            else
                            {
                                BomId = (string)cmdBomId.ExecuteScalar();
                            }

                            #endregion Last BOMId

                            #region Last BOMDate
                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(EffectDate,'1900/01/01')) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                            cmdBomEDate.Transaction = transaction;
                            if (cmdBomEDate.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BOMDate = DateTime.MinValue;
                            }
                            else
                            {
                                BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                            }

                            #endregion Last BOMDate

                            #region Update to Issue



                            #region Find Raw Item From BOM  and update Stock



                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,b.UOMUQty,b.UOMWQty,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity,b.UOM from BOMRaws b  ";
                            sqlText += " WHERE ";

                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate='" + BOMDate.Date + "'";
                            sqlText += " and post='Y' ";

                            sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";


                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else
                            {
                                decimal vQuantity = 0;
                                decimal vWastage = 0;

                                string rwUom = "";
                                decimal vConvertionRate = 0;
                                decimal AvgRate = 0;


                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Declare
                                    decimal v1Quantity = 0;
                                    string v1RawItemNo = "";
                                    decimal v1CostPrice = 0;
                                    string v1UOM = "";
                                    decimal v1SubTotal = 0;
                                    decimal v1Wastage = 0;
                                    DateTime v1BOMDate = DateTime.Now.Date;
                                    string v1FinishItemNo = "";

                                    decimal v1UOMQty = 0;
                                    decimal v1UOMPrice = 0;
                                    decimal v1UOMc = 0;
                                    string v1UOMn = "";
                                    string v1BOMId = "";
                                    decimal v1UOMWastage = 0;
                                    #endregion DECLARE

                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDateTime, currConn, transaction, false);


                                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                    if (quantity > 0)
                                    {
                                        AvgRate = amount / quantity;
                                    }
                                    else
                                    {
                                        AvgRate = 0;
                                    }


                                    #endregion Find Quantity From Products

                                    vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                    vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());
                                    rwUom = BRItem["Uom"].ToString();
                                    var rwUomMajor = BRItem["Uomn"].ToString();
                                    if (string.IsNullOrEmpty(rwUom))
                                    {
                                        throw new ArgumentNullException("ReceiveInsert", "Could not find UOM of raw item");
                                    }

                                    /*Processing UOM*/

                                    UOMDAL uomdal = new UOMDAL();
                                    vConvertionRate = uomdal.GetConvertionRate(rwUomMajor, rwUom, "Y", currConn, transaction);

                                    #region valueAssign
                                    v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                    v1Wastage = (vWastage) * Item.UOMQty;
                                    v1BOMId = Convert.ToString(Item.BOMId);
                                    v1RawItemNo = BRItem["RawItemNo"].ToString();
                                    v1UOM = BRItem["UOM"].ToString();
                                    v1CostPrice = AvgRate * vConvertionRate;
                                    v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                    v1UOMPrice = AvgRate;
                                    v1UOMn = BRItem["UOMn"].ToString();
                                    v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                    v1FinishItemNo = Item.ItemNo;
                                    v1UOMc = vConvertionRate;
                                    v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                    v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                    #endregion valueAssign
                                    #region Stock Check
                                    if (NegStockAllow == false)
                                    {
                                        #region Find Quantity From Products

                                        //decimal BRItemoldStock =
                                        //    productDal.StockInHand(v1RawItemNo,
                                        //                           Master.ReceiveDateTime, currConn,
                                        //                           transaction);
                                        decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(v1RawItemNo,
                                                                             Master.ReceiveDateTime,
                                                           currConn, transaction, false).Rows[0]["Quantity"].ToString());



                                        #endregion Find Quantity From Products

                                        #region Find Quantity From Transaction

                                        sqlText = "";
                                        sqlText +=
                                            "select isnull(UOMQty,isnull(Quantity ,0)) from IssueDetails ";
                                        sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                   "and IssueNo= '" + Master.ReceiveNo + "'";
                                        SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, currConn);
                                        cmdBRItemTranQty.Transaction = transaction;
                                        decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                        #endregion Find Quantity From Transaction



                                        if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                            MessageVM.
                                                                                receiveMsgStockNotAvailablePost);
                                        }
                                    }
                                    #endregion Stock Check



                                    sqlText = "";
                                    sqlText += " update IssueDetails set";
                                    sqlText += " IssueLineNo='" + Item.ReceiveLineNo + "',";
                                    sqlText += " Comments='" + Item.CommentsD + "',";
                                    sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                    sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                    sqlText += " IssueDateTime='" + Master.ReceiveDateTime + "',";
                                    sqlText += " Post='" + issueAutoPostValue + "',";
                                    sqlText += " uom='" + v1UOM + "',";
                                    sqlText += " Quantity=" + v1Quantity + ",";
                                    sqlText += " Wastage=" + v1Wastage + ",";

                                    sqlText += " BOMDate='" + v1BOMDate + "',";
                                    sqlText += " CostPrice=" + v1CostPrice + ",";
                                    sqlText += " NBRPrice=" + AvgRate + ",";
                                    sqlText += " transactionType='" + Master.transactionType + "',";
                                    sqlText += " IssueReturnId='" + Master.ReturnId + "',";
                                    sqlText += " UOMQty= " + v1UOMQty + ",";
                                    sqlText += " UOMPrice= " + v1UOMPrice + ",";
                                    sqlText += " UOMc= " + v1UOMc + ",";
                                    sqlText += " UOMn= '" + v1UOMn + "',";
                                    sqlText += " UOMWastage= '" + v1UOMWastage + "',";
                                    sqlText += " BOMId= '" + v1BOMId + "',";
                                    sqlText += " SubTotal=" + v1SubTotal + "";
                                    sqlText += " WHERE FinishItemNo=" + v1FinishItemNo + " AND ItemNo='" +
                                               v1RawItemNo + "' ";
                                    sqlText += " and  IssueNo='" + Master.ReceiveNo + "'";

                                    SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                    cmdInsertIssue.Transaction = transaction;
                                    transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                    if (transResult <= 0)
                                    {
                                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                                                        MessageVM.receiveMsgUnableToUpdateIssue);
                                    }

                                    #endregion Qty  check and Update

                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock


                            #endregion Update to Issue

                            #region Update Issue Header

                            sqlText = "";
                            sqlText += " update IssueHeaders set ";
                            sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                            sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                            sqlText += " where (IssueHeaders.IssueNo= '" + Master.ReceiveNo + "')";

                            SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                            cmdUpdateIssue.Transaction = transaction;
                            transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate,
                                                                MessageVM.receiveMsgUnableToUpdateIssue);
                            }

                            #endregion Update Issue Header

                        }



                        #endregion Transaction is Trading



                        #endregion Update Issue and Receive if Transaction is not Other
                    }

                    #endregion Find Transaction Mode Insert or Update
                }


                #endregion Update Detail Table

                #endregion  Update into Details(Update complete in Header)


                #region return Current ID and Post Status

                sqlText = "";
                sqlText = sqlText + "select distinct Post from ReceiveHeaders WHERE ReceiveNo='" + Master.ReceiveNo + "'";
                SqlCommand cmdIPS = new SqlCommand(sqlText, currConn);
                cmdIPS.Transaction = transaction;
                PostStatus = (string)cmdIPS.ExecuteScalar();
                if (string.IsNullOrEmpty(PostStatus))
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameUpdate, MessageVM.receiveMsgUnableCreatID);
                }


                #endregion Prefetch
                #region Commit
                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                    }




                }


                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgUpdateSuccessfully;
                retResults[2] = Master.ReceiveNo;
                retResults[3] = PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReceiveDAL", "ReceiveUpdate_18092013", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
                transaction.Rollback();
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "ReceiveUpdate_18092013", ex.ToString() + "\n" + sqlText);

                throw ex;
                transaction.Rollback();
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }
        public string[] ReceivePost_18092013(ReceiveMasterVM Master, List<ReceiveDetailVM> Details, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";

            string PostStatus = "";
            bool issueAutoPost = false;
            string issueAutoPostValue = "N";
            DateTime receiveDate = DateTime.MinValue;
            DateTime BOMDate = DateTime.MinValue; //start
            string BomId = string.Empty;

            #endregion Initializ

            #region Try
            try
            {
                string vNegStockAllow, vIssueAutoPost = string.Empty;
                CommonDAL commonDal = new CommonDAL();
                vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                vIssueAutoPost = commonDal.settings("IssueFromBOM", "IssueAutoPost");
                if (string.IsNullOrEmpty(vNegStockAllow)
                    || string.IsNullOrEmpty(vIssueAutoPost)
                    )
                {
                    throw new ArgumentNullException(MessageVM.msgSettingValueNotSave, "Sale");
                }
                bool NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);
                issueAutoPost = Convert.ToBoolean(vIssueAutoPost == "Y" ? true : false);
                if (issueAutoPost)
                    issueAutoPostValue = "Y";
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgNoDataToPost);
                }
                else if (Convert.ToDateTime(Master.ReceiveDateTime) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDateTime) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgCheckDatePost);

                }



                #endregion Validation for Header
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }



                transaction = currConn.BeginTransaction(MessageVM.receiveMsgMethodNamePost);

                #endregion open connection and transaction
                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDateTime;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDateTime).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK
                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText + "select COUNT(ReceiveNo) from ReceiveHeaders WHERE ReceiveNo='" + Master.ReceiveNo + "' ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgUnableFindExistIDPost);
                }

                #endregion Find ID for Update

                #region ID check completed,update Information in Header

                #region update Header
                sqlText = "";

                sqlText += " update ReceiveHeaders set  ";
                sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "' ,";
                sqlText += " Post= '" + Master.Post + "' ";
                sqlText += " where  ReceiveNo= '" + Master.ReceiveNo + "' ";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgPostNotSuccessfully);
                }
                #endregion update Header
                #region Transaction is FromBOM
                if (Master.FromBOM == "Y")
                {
                    if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" || Master.transactionType == "WIP")
                    {
                        #region update Issue

                        sqlText = "";
                        sqlText += " update IssueHeaders set ";
                        sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                        sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                        sqlText += " Post= '" + issueAutoPostValue + "' ";
                        sqlText += " where  IssueNo= '" + Master.ReceiveNo + "' ";


                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                        cmdUpdateIssue.Transaction = transaction;
                        transResult = (int)cmdUpdateIssue.ExecuteNonQuery();
                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                            MessageVM.receiveMsgUnableToIssuePost);
                        }

                        #endregion update Issue
                    }

                }
                #endregion Transaction is FromBOM

                #region Transaction is FromBOM

                if (Master.transactionType == "TollFinishReceive")
                {
                    #region update Issue

                    sqlText = "";
                    sqlText += " update IssueHeaders set ";
                    sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                    sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                    sqlText += " Post= '" + issueAutoPostValue + "' ";
                    sqlText += " where  IssueNo= '" + Master.ReceiveNo + "' ";


                    SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                    cmdUpdateIssue.Transaction = transaction;
                    transResult = (int)cmdUpdateIssue.ExecuteNonQuery();
                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                        MessageVM.receiveMsgUnableToIssuePost);
                    }

                    #endregion update Issue
                }


                #endregion Transaction is FromBOM

                #endregion ID check completed,update Information in Header

                #region Update into Details(Update complete in Header)
                #region Validation for Detail
                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                        MessageVM.receiveMsgNoDataToPost);
                }
                #endregion Validation for Detail

                #region Update Detail Table

                foreach (var Item in Details.ToList())
                {
                    #region Find Transaction Mode Insert or Update

                    sqlText = "";
                    sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo='" + Master.ReceiveNo + "' ";
                    sqlText += " AND ItemNo='" + Item.ItemNo + "'";
                    SqlCommand cmdFindId = new SqlCommand(sqlText, currConn);
                    cmdFindId.Transaction = transaction;
                    IDExist = (int)cmdFindId.ExecuteScalar();

                    if (IDExist <= 0)
                    {

                        throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                            MessageVM.receiveMsgNoDataToPost);
                    }
                    else
                    {
                        #region Update only DetailTable
                        sqlText = "";
                        sqlText += " update ReceiveDetails set ";
                        sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                        sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                        sqlText += " Post='" + Master.Post + "'";
                        sqlText += " where ReceiveNo='" + Master.ReceiveNo + "' ";
                        sqlText += " and 	ItemNo='" + Item.ItemNo + "' ";

                        SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        cmdInsDetail.Transaction = transaction;
                        transResult = (int)cmdInsDetail.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgUpdateNotSuccessfully);
                        }
                        #endregion Update only DetailTable
                        #region Update Issue and Receive if Transaction is not Other

                        //if (Master.transactionType == "ReceiveReturn")

                        //    receiveDate = previousReceiveDate.Date;
                        //else
                        receiveDate = Convert.ToDateTime(Master.ReceiveDateTime);

                        #region Transaction is FromBOM
                        if (Master.FromBOM == "Y")
                        {
                            BomId = string.Empty;
                            BOMDate = DateTime.MinValue;

                            #region Last BOMId

                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(BOMId,0)) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                            cmdBomId.Transaction = transaction;
                            if (cmdBomId.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BomId = "0";
                            }
                            else
                            {
                                BomId = (string)cmdBomId.ExecuteScalar();
                            }

                            #endregion Last BOMId

                            #region Last BOMDate

                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(EffectDate,'1900/01/01')) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and vatname='" + Item.VatName + "' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                            cmdBomEDate.Transaction = transaction;
                            if (cmdBomEDate.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BOMDate = DateTime.MinValue;
                            }
                            else
                            {
                                BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                            }

                            #endregion Last BOMDate

                            if (Master.transactionType == "Other" || Master.transactionType == "ReceiveReturn" || Master.transactionType == "WIP")
                            {
                                #region Update to Issue

                                sqlText = "";
                                sqlText += " update IssueDetails set";
                                sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                                sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                                sqlText += " Post='" + issueAutoPostValue + "'";
                                sqlText += " WHERE  IssueNo ='" + Master.ReceiveNo + "'";
                                sqlText += "  and IssueDetails.FinishItemNo = '" + Item.ItemNo + "'";
                                SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                                cmdInsertIssue.Transaction = transaction;
                                transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgUnableToIssuePost);
                                }

                                #endregion Update to Issue

                                #region Find Raw Item From BOM  and update Stock

                                sqlText = "";
                                sqlText +=
                                    " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity from BOMRaws b  ";
                                sqlText += " WHERE ";

                                sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                                sqlText += " and vatname='" + Item.VatName + "' ";
                                sqlText += " and effectdate='" + BOMDate.Date + "'";
                                sqlText += " and post='Y' ";

                                sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";

                                DataTable dataTable = new DataTable("RIFB");
                                SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                                cmdRIFB.Transaction = transaction;
                                SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                                reportDataAdapt.Fill(dataTable);

                                if (dataTable == null)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else if (dataTable.Rows.Count <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                    MessageVM.receiveMsgNoDataToPost);
                                }
                                else
                                {
                                    foreach (DataRow BRItem in dataTable.Rows)
                                    {
                                        #region Update Item Qty
                                        #region Qty  check and Update

                                        if (NegStockAllow == false)
                                        {
                                            #region Find Quantity From Products

                                            ProductDAL productDal = new ProductDAL();
                                            //decimal BRItemoldStock =
                                            //    productDal.StockInHand(BRItem["RawItemNo"].ToString(),
                                            //                           Master.ReceiveDateTime, currConn,
                                            //                           transaction);

                                            decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                                 Master.ReceiveDateTime,
                                                               currConn, transaction, true).Rows[0]["Quantity"].ToString());

                                            #endregion Find Quantity From Products

                                            #region Find Quantity From Transaction

                                            sqlText = "";
                                            sqlText +=
                                                "select isnull(isnull(Quantity ,0)+isnull(Wastage ,0),0) from IssueDetails ";
                                            sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                                       "and IssueNo= '" + Master.ReceiveNo + "'";
                                            SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, currConn);
                                            cmdBRItemTranQty.Transaction = transaction;
                                            decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                            #endregion Find Quantity From Transaction


                                            if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                            {
                                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                                MessageVM.
                                                                                    receiveMsgStockNotAvailablePost);
                                            }
                                        }



                                        #endregion Qty  check and Update

                                        #endregion Qty  check and Update
                                    }
                                }

                                #endregion Find Raw Item From BOM and update Stock
                            }


                        }

                        #endregion Transaction is FromBOM

                        #region Transaction is FromBOM

                        if (Master.transactionType == "TollFinishReceive")
                        {
                            ProductDAL productDal1 = new ProductDAL();
                            string FinishItemIdFromOH = productDal1.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Issue)", Master.ReceiveDateTime,
                                                                           currConn, transaction);

                            BomId = string.Empty;  //BOMId
                            BOMDate = DateTime.MinValue;
                            #region Last BOMId
                            sqlText = "  ";
                            sqlText += " select top 1 CONVERT(varchar(20),isnull(BOMId,0)) from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomId = new SqlCommand(sqlText, currConn);
                            cmdBomId.Transaction = transaction;
                            if (cmdBomId.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BomId = "0";
                            }
                            else
                            {
                                BomId = (string)cmdBomId.ExecuteScalar();
                            }

                            #endregion Last BOMId

                            #region Last BOMDate
                            sqlText = "  ";
                            sqlText += " select top 1 isnull(EffectDate,'1900/01/01') from BOMs";
                            sqlText += " where ";
                            sqlText += " FinishItemNo='" + FinishItemIdFromOH + "' ";
                            sqlText += " and vatname='VAT 4.3 (Toll Issue)' ";
                            sqlText += " and effectdate<='" + receiveDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += " order by effectdate desc ";

                            SqlCommand cmdBomEDate = new SqlCommand(sqlText, currConn);
                            cmdBomEDate.Transaction = transaction;
                            if (cmdBomEDate.ExecuteScalar() == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                "No Price declaration found for this item");
                                BOMDate = DateTime.MinValue;
                            }
                            else
                            {
                                BOMDate = (DateTime)cmdBomEDate.ExecuteScalar();
                            }

                            #endregion Last BOMDate

                            #region Update to Issue

                            sqlText = "";
                            sqlText += " update IssueDetails set";
                            sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                            sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                            sqlText += " Post='" + issueAutoPostValue + "'";
                            sqlText += " WHERE  IssueNo ='" + Master.ReceiveNo + "'";
                            sqlText += "  and IssueDetails.FinishItemNo = '" + FinishItemIdFromOH + "'";
                            SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                            cmdInsertIssue.Transaction = transaction;
                            transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgUnableToIssuePost);
                            }

                            #endregion Update to Issue

                            #region Find Raw Item From BOM  and update Stock


                            sqlText = "";
                            sqlText +=
                                " SELECT   b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ,b.WastageQuantity from BOMRaws b  ";
                            sqlText += " WHERE ";

                            sqlText += " FinishItemNo='" + Item.ItemNo + "' ";
                            sqlText += " and b.Vatname='VAT 4.3 (Toll Issue)'";
                            sqlText += " and effectdate='" + BOMDate.Date + "'";
                            sqlText += " and post='Y' ";
                            sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";

                            DataTable dataTable = new DataTable("RIFB");
                            SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                            cmdRIFB.Transaction = transaction;
                            SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                            reportDataAdapt.Fill(dataTable);

                            if (dataTable == null)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else if (dataTable.Rows.Count <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                MessageVM.receiveMsgNoDataToPost);
                            }
                            else
                            {
                                foreach (DataRow BRItem in dataTable.Rows)
                                {
                                    #region Update Item Qty

                                    #region Find Quantity From Products

                                    ProductDAL productDal = new ProductDAL();
                                    //decimal BRItemoldStock = productDal.StockInHand(Item.ItemNo,
                                    //                                                Master.ReceiveDateTime, currConn,
                                    //                                                transaction);
                                    decimal BRItemoldStock = Convert.ToDecimal(productDal.AvgPriceNew(Item.ItemNo,
                                                                           Master.ReceiveDateTime,
                                                         currConn, transaction, true).Rows[0]["Quantity"].ToString());



                                    #endregion Find Quantity From Products

                                    #region Find Quantity From Transaction

                                    sqlText = "";
                                    sqlText +=
                                        "select isnull(isnull(Quantity ,0)+isnull(Wastage ,0),0) from IssueDetails ";
                                    sqlText += " WHERE ItemNo='" + BRItem["RawItemNo"].ToString() + "' " +
                                               "and IssueNo= '" + Master.ReceiveNo + "'";
                                    SqlCommand cmdBRItemTranQty = new SqlCommand(sqlText, currConn);
                                    cmdBRItemTranQty.Transaction = transaction;
                                    decimal BRItemTranQty = (decimal)cmdBRItemTranQty.ExecuteScalar();

                                    #endregion Find Quantity From Transaction

                                    #region Qty  check and Update

                                    if (NegStockAllow == false)
                                    {
                                        if (BRItemTranQty > (BRItemoldStock + BRItemTranQty))
                                        {
                                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                                            MessageVM.
                                                                                receiveMsgStockNotAvailablePost);
                                        }
                                    }


                                    #endregion Qty  check and Update

                                    #endregion Qty  check and Update
                                }
                            }

                            #endregion Find Raw Item From BOM and update Stock
                        }




                        #endregion Transaction is FromBOM

                        #endregion Update Issue and Receive if Transaction is not Other
                    }

                    #endregion Find Transaction Mode Insert or Update
                }


                #endregion Update Detail Table

                #endregion  Update into Details(Update complete in Header)


                #region return Current ID and Post Status

                sqlText = "";
                sqlText = sqlText + "select distinct Post from ReceiveHeaders WHERE ReceiveNo='" + Master.ReceiveNo + "'";
                SqlCommand cmdIPS = new SqlCommand(sqlText, currConn);
                cmdIPS.Transaction = transaction;
                PostStatus = (string)cmdIPS.ExecuteScalar();
                if (string.IsNullOrEmpty(PostStatus))
                {
                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost, MessageVM.receiveMsgPostNotSelect);
                }


                #endregion Prefetch
                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                    }

                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.receiveMsgSuccessfullyPost;
                retResults[2] = Master.ReceiveNo;
                retResults[3] = PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            catch (SqlException sqlex)
            {

                transaction.Rollback();

                FileLogger.Log("ReceiveDAL", "ReceivePost_18092013", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {

                transaction.Rollback();

                FileLogger.Log("ReceiveDAL", "ReceivePost_18092013", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        #endregion Backup 18092013

        #endregion

        #endregion

        #region Split Methods

        public string[] SaveReceive_Split(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();
                var value = commonDal.settingValue("CompanyCode", "Code", null, currConn, transaction);

                #region delete and bulk insert to Source

                string deleteSource = @"delete from VAT_Source_Receives";
                SqlCommand cmd = new SqlCommand(deleteSource, currConn, transaction);
                cmd.ExecuteNonQuery();

                string columnNames = "";

                //foreach (DataColumn Column in param.Data.Columns)
                //{
                //    columnNames += Column.ColumnName + ",";
                //}


                string[] result = commonDal.BulkInsert("VAT_Source_Receives", param.Data, currConn, transaction);

                #endregion

                if (OrdinaryVATDesktop.IsACIFGReturnFromSales(value, param.TransactionType))
                {
                    param.IsJoinReference = false;
                }

                #region update ID

                if (param.IsJoinReference)
                {
                    string updateID = "update VAT_Source_Receives set ID = ID+'~'+FORMAT(Receive_DateTime,'ddMMyy')+'~'+isnull(Reference_No,'')";
                    cmd.CommandText = updateID;

                    cmd.ExecuteNonQuery();
                }


                #endregion

                #region Join Date Time

                if (!param.Data.Columns.Contains("Receive_DateTime"))
                {
                    string updateDate = "update VAT_Source_Receives set Receive_DateTime = Receive_Date + ' ' + Receive_Time";
                    cmd.CommandText = updateDate;

                    cmd.ExecuteNonQuery();
                }


                #endregion

                #region delete duplicate
                string duplicate = commonDal.settings("Import", "ReceiveDuplicateInsert");

                if (duplicate == "N")
                {
                    string deleteDuplicate = @"
update  VAT_Source_Receives                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(Receive_DateTime)) +  CONVERT(VARCHAR(4),YEAR(Receive_DateTime)),6)
where PeriodId is null or PeriodId = ''

delete from VAT_Source_Receives where ID in (
                select vr.ID from VAT_Source_Receives vr inner join ReceiveHeaders rh
                on vr.ID = rh.ImportIDExcel and vr.PeriodId = rh.PeriodId)";

                    ////////                    if (OrdinaryVATDesktop.IsACICompany(value))
                    ////////                    {

                    ////////                        deleteDuplicate = @"
                    ////////update  VAT_Source_Receives                             
                    ////////set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(Receive_DateTime)) +  CONVERT(VARCHAR(4),YEAR(Receive_DateTime)),6)
                    ////////where PeriodId is null or PeriodId = ''
                    ////////
                    ////////delete from VAT_Source_Receives where ID in (
                    ////////                select vr.ID from VAT_Source_Receives vr inner join ReceiveHeaders rh
                    ////////                on vr.JoinId = rh.ImportIDExcel and vr.PeriodId = rh.PeriodId)";

                    ////////                    }

                    cmd.CommandText = deleteDuplicate;
                    cmd.ExecuteNonQuery();
                }


                #endregion

                #region Delete Trading Products

                string deleteTrading = @"
update VAT_Source_Receives set ProductType = Products.IsRaw
from (select p.ProductCode,pc.IsRaw from Products p left outer join ProductCategories pc
on p.CategoryID = pc.CategoryID)Products
left outer join   VAT_Source_Receives on products.ProductCode = VAT_Source_Receives.Item_Code ";

                if (param.TransactionType.ToLower() == "other")
                {
                    deleteTrading += @" 
delete from VAT_Source_Receives where ProductType != 'finish' and ProductType != 'export'";
                }


                cmd.CommandText = deleteTrading;
                cmd.ExecuteNonQuery();



                #endregion

                #region Loop counter

                string getLoopCount = @"select Ceiling(count(distinct ID)/500.00) from VAT_Source_Receives";

                cmd.CommandText = getLoopCount;
                int counter = Convert.ToInt32(cmd.ExecuteScalar());

                #endregion

                transaction.Commit();
                currConn.Close();

                DataTable sourceData = new DataTable();

                if (param.SetSteps != null)
                {
                    param.SetSteps(counter + 2);
                }

                if (param.callBack != null)
                {
                    param.callBack();
                }


                for (int i = 0; i < counter; i++)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                    cmd.Connection = currConn;
                    cmd.Transaction = transaction;

                    #region Create Temp tables

                    string tempTableCreate = @"create table #tempIds(sl int identity(1,1), ID varchar(500))";
                    cmd.CommandText = tempTableCreate;
                    cmd.ExecuteNonQuery();

                    #endregion

                    #region Get Top Rows

                    string insertIds = @"insert into #tempIds(ID)
select  distinct top 500 ID 
from VAT_Source_Receives
where isnull(IsProcessed,'N') = 'N'";

                    cmd.CommandText = insertIds;
                    cmd.ExecuteNonQuery();

                    string getData = @"SELECT 
      [ID]
      ,[BranchCode]
      ,format([Receive_DateTime], 'yyyy-MM-dd HH:mm:ss')Receive_DateTime
      ,[Reference_No]
      ,[Comments]
      ,[Post]
      ,[Return_Id]
      ,[Item_Code]
      ,[Item_Name]
      ,[ItemNo]
      ,[Quantity]
      ,[NBR_Price]
      ,[UOM]
      ,[VAT_Name]
      ,[CustomerCode]
      ,[CustomerID]
      ,[BranchId]
      ,[BomId]
      ,[With_Toll]
      ,[Product_Group]

  FROM VAT_Source_Receives where ID in (select ID from #tempIds)";

                    cmd.CommandText = getData;
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(sourceData);

                    //sourceData.Columns.Remove("IsProcessed");

                    #endregion

                    retResults = SaveTempReceive(sourceData, param.TransactionType, param.CurrentUser, param.DefaultBranchId,
                        () => { }, currConn, transaction, null, param.BranchCode);


                    #region updateSourceTable

                    string updateSourceAndClearTemp = @"update VAT_Source_Receives set IsProcessed = 'Y' where ID  in (select ID from #tempIds);
                                            --delete from #tempIds;";

                    cmd.CommandText = updateSourceAndClearTemp;
                    cmd.ExecuteNonQuery();

                    #endregion

                    if (OrdinaryVATDesktop.IsACICompany(value))
                    {
                        //currConn = _dbsqlConnection.GetConnection();
                        //currConn.Open();
                        //transaction = currConn.BeginTransaction();
                        //cmd.Connection = currConn;
                        //cmd.Transaction = transaction;

                        string updateIntegration =
                            @"

update  ACIData.dbo.Receives set JoinId  = ID+'~'+FORMAT(Receive_DateTime,'ddMMyy')+'~'+Reference_No
where JoinId is null

update ACIData.dbo.Receives set IsProcessed = isnull(VAT_Source_Receives.IsProcessed,'N')
from VAT_Source_Receives
where VAT_Source_Receives.ID =  ACIData.dbo.Receives.JoinId

";

                        if (OrdinaryVATDesktop.IsACIFGReturnFromSales(value, param.TransactionType))
                        {
                            updateIntegration = @"

update ACIData.dbo.SaleInvoices set IsProcessed = 'Y'
from VAT_Source_Receives
where VAT_Source_Receives.ID =  ACIData.dbo.SaleInvoices.ID

";

                        }

                        cmd.CommandText = updateIntegration;
                        cmd.ExecuteNonQuery();

                    }

                    transaction.Commit();
                    currConn.Close();
                    transaction.Dispose();
                    currConn.Dispose();

                    sourceData.Clear();

                    if (param.callBack != null)
                    {
                        param.callBack();
                    }


                }

                if (param.callBack != null)
                {
                    param.callBack();
                }
                //param.callBack();

                #region Drop Temp table

                //currConn = _dbsqlConnection.GetConnection();
                //currConn.Open();
                //transaction = currConn.BeginTransaction();
                //cmd.Connection = currConn;
                //cmd.Transaction = transaction;

                //string dropTemp = @"drop table #tempIds";
                //cmd.CommandText = dropTemp;
                //cmd.ExecuteNonQuery();


                //transaction.Commit();
                //currConn.Close();
                //transaction.Dispose();
                //currConn.Dispose();

                #endregion

                return retResults;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                //retResults[4] = ex.Message.ToString(); //catch ex
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ReceiveDAL", "SaveReceive_Split", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
        }

        public string[] SaveAndProcessReceiveData(string transactionType, string CurrentUser, int branchId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, Action callBack = null, SysDBInfoVMTemp connVM = null, string BranchCode = "")
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();
                CommonImportDAL cImport = new CommonImportDAL();

                #region Settings

                var value = commonDal.settings("CompanyCode", "Code", currConn, transaction);
                string productSave = commonDal.settings("AutoSave", "ReceiveProduct", currConn, transaction);
                string customerSave = commonDal.settings("AutoSave", "SaleCustomers", currConn, transaction);
                string vPriceDeclaration = commonDal.settings("Receive", "PriceDeclarationForImport", currConn, transaction);
                bool isPriceDeclaration = vPriceDeclaration == "Y";
                string IssueFromBOM = new CommonDAL().settings("IssueFromBOM", "IssueFromBOM");
                string CreatedDateTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string uomc = commonDal.settings("Integration", "UOM", currConn, transaction);

                #endregion

                DataTable dtCustomer = new DataTable();
                DataTable dtItem = new DataTable();
                DataTable codeGen = new DataTable();
                DataTable DtUOMc = new DataTable();

                #region FiscalYearCheck

                sqlText = @"
 select distinct cast(Temp.Receive_DateTime as varchar(200))Receive_DateTime
 from (
select cast(Receive_DateTime as date)Receive_DateTime 
from TempReceiveData) as Temp";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                SqlDataAdapter fAdapter = new SqlDataAdapter(cmd);
                DataTable ftable = new DataTable();

                fAdapter.Fill(ftable);

                string fiscalYearText = @"select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                        " where 1=1 and isnull(PeriodLock,'Y') = 'Y' and isnull(GLLock,'Y') = 'Y'";

                int rowsCount = ftable.Rows.Count;

                if (rowsCount > 0)
                {
                    fiscalYearText += "  and (";

                    for (int index = 0; index < rowsCount; index++)
                    {
                        DataRow row = ftable.Rows[index];
                        fiscalYearText += "  ( '" + row["Receive_DateTime"] + "'  between PeriodStart and PeriodEnd  )";

                        if (index != (rowsCount - 1))
                        {
                            fiscalYearText += " or ";
                        }
                    }


                    fiscalYearText += ")";

                }

                cmd.CommandText = fiscalYearText;
                ftable = new DataTable();
                fAdapter.SelectCommand = cmd;

                fAdapter.Fill(ftable);

                if (ftable.Rows.Count > 0)
                {
                    throw new Exception("Fiscal Year Is Locked");
                }


                #endregion

                #region Item/Product

                string getItemNo = @"
select distinct BranchId, ItemNo, Item_Code, Item_Name, UOM, isnull(NBR_Price,0) NBR_Price 
from TempReceiveData where isnull(ItemNo,0) = 0";

                cmd.CommandText = getItemNo;
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);

                dataAdapter.Fill(dtItem);

                foreach (DataRow dr in dtItem.Rows)
                {
                    int branchIdRow = !string.IsNullOrEmpty(dr["BranchId"].ToString()) ? Convert.ToInt32(dr["BranchId"].ToString()) : branchId;

                    if (dr["ItemNo"].ToString().Trim() == "0" || string.IsNullOrEmpty(dr["ItemNo"].ToString().Trim()))
                    {

                        if (productSave == "Y")
                        {
                            string itemCode = dr["Item_Code"].ToString().Trim();
                            string itemName = dr["Item_Name"].ToString().Trim();
                            string uom = dr["UOM"].ToString().Trim();
                            decimal varRate = 0;

                            decimal nbrPrice = !string.IsNullOrEmpty(dr["NBR_Price"].ToString()) ? Convert.ToDecimal(dr["NBR_Price"].ToString()) : 0;

                            #region getting default group id

                            string defaultGroupName = commonDal.settingValue("AutoSave", "DefaultProductCategory", null, currConn, transaction);

                            sqlText = " ";
                            sqlText = " SELECT top 1 CategoryID ";
                            sqlText += " from ProductCategories";
                            sqlText += " where ";
                            sqlText += " CategoryName=@CategoryName  ";

                            SqlCommand cmd3 = new SqlCommand(sqlText, currConn);
                            cmd3.Transaction = transaction;
                            cmd3.Parameters.AddWithValueAndNullHandle("@CategoryName", defaultGroupName);
                            var cmd3result = cmd3.ExecuteScalar();
                            if (cmd3result == null)
                            {
                                throw new Exception("Could not find Product group " + defaultGroupName);
                            }
                            string GroupId = cmd3result.ToString();

                            #endregion

                            #region Product VM

                            ProductVM vm = new ProductVM();
                            vm.ProductName = itemName;
                            vm.ProductCode = itemCode;
                            vm.CategoryID = GroupId;
                            vm.ActiveStatus = "Y";
                            vm.UOM = uom;
                            vm.BranchId = branchId;
                            vm.IsTransport = "N";
                            vm.TDSCode = "NA";
                            vm.IsZeroVAT = "N";
                            vm.Banderol = "N";
                            vm.TollProduct = "N";
                            vm.Trading = "N";
                            vm.NonStock = "N";
                            vm.HSCodeNo = "NA";
                            vm.VATRate2 = 0;
                            vm.Comments = "NA";
                            vm.ProductDescription = "NA";
                            vm.VATRate = varRate;
                            vm.NBRPrice = nbrPrice;
                            vm.OpeningDate = "01/01/1901";
                            vm.ShortName = itemName;

                            #endregion

                            ProductDAL _pDal = new ProductDAL();
                            var result = _pDal.InsertToProduct(vm, null, null, true, currConn, transaction);

                        }
                        else
                        {
                            throw new Exception("This ('" + dr["Item_Code"].ToString().Trim() + "~" + dr["Item_Name"].ToString().Trim() + "') Product Not Found in Vat System Please add Product");

                        }

                    }

                }
                #endregion

                #region Customers

                string getCustomers = @"
select distinct BranchId, CustomerID, Customer_Name, Customer_Code, CustomerGroup, CustomerBIN, Delivery_Address,CustomerAddress 
from SalesTempData where CustomerID = 0 or CustomerID is null";

                cmd.CommandText = getCustomers;
                dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dtCustomer);

                foreach (DataRow dr in dtCustomer.Rows)
                {
                    int branchIdRow = !string.IsNullOrEmpty(dr["BranchId"].ToString()) ? Convert.ToInt32(dr["BranchId"].ToString()) : branchId;

                    if (dr["CustomerID"].ToString().Trim() == "0" || string.IsNullOrEmpty(dr["CustomerID"].ToString().Trim()))
                    {
                        if (customerSave == "Y")
                        {
                            string customerCode = dr["Customer_Code"].ToString().Trim();
                            string group = dr["CustomerGroup"].ToString().Trim();

                            if ((customerCode != "NA" && customerCode != "N/A"))
                            {
                                string customerIdInDb = cImport.FindCustomerId(customerCode, customerCode, currConn, transaction);

                                if (string.IsNullOrEmpty(customerIdInDb))
                                {
                                    throw new ArgumentNullException("Customer Id Not Found For Customer Code" + customerCode);
                                }
                            }

                        }


                    }
                }
                #endregion

                #region ItemNo/CustomerID Update

                string itemUpdate = @"
update TempReceiveData set ItemNo = Products.ItemNo from Products where Products.ProductCode = TempReceiveData.Item_Code and Products.IsArchive = 0 
and (TempReceiveData.ItemNo = '0' or TempReceiveData.ItemNo is null);

update TempReceiveData set CustomerID = Customers.CustomerID from Customers where Customers.CustomerID  = TempReceiveData.CustomerCode
and (TempReceiveData.CustomerID = '0' or TempReceiveData.CustomerID is null)
";

                cmd.CommandText = itemUpdate;
                cmd.ExecuteNonQuery();

                #endregion

                #region Update PeriodId

                string updatePeriodId = @"
update  TempReceiveData                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(Receive_DateTime)) +  CONVERT(VARCHAR(4),YEAR(Receive_DateTime)),6)
where PeriodId is null or PeriodId = ''";

                cmd.CommandText = updatePeriodId;
                cmd.ExecuteNonQuery();

                #endregion

                #region Update FiscalYear

                string updateFiscalYear = @"

update  TempReceiveData set TempReceiveData.FiscalYear=FiscalYear.CurrentYear 
from FiscalYear where TempReceiveData.PeriodID = FiscalYear.PeriodID 
and (TempReceiveData.FiscalYear ='' or TempReceiveData.FiscalYear is null)

";

                cmd.CommandText = updateFiscalYear;
                cmd.ExecuteNonQuery();

                #endregion

                #region Update LastNBRPrice

                string UpdateLastNBRPrice = @"

update TempReceiveData set TempReceiveData.NBR_Price = isnull(boms.nbrprice,0) from boms where boms.BOMId = TempReceiveData.BomId 
and TempReceiveData.BomId !='0' and TempReceiveData.BomId is not null

update TempReceiveData set TempReceiveData.NBR_Price = isnull(products.NBRPrice,0) from products where products.ItemNo = TempReceiveData.ItemNo 
and TempReceiveData.ItemNo !='0' and (TempReceiveData.NBR_Price='0' or TempReceiveData.NBR_Price is null)

";
                if (isPriceDeclaration)
                {
                    cmd.CommandText = UpdateLastNBRPrice;
                    cmd.ExecuteNonQuery();
                }

                #endregion

                #region uomUpdate

                string uomUpdate = @"
update TempReceiveData set UOM=LTRIM(RTRIM(UOM))

update TempReceiveData set UOMn = Products.UOM from Products 
where TempReceiveData.ItemNo = Products.ItemNo;

update TempReceiveData set TempReceiveData.UOMc = UOMs.Convertion from UOMs 
where  UOMs.UOMFrom = TempReceiveData.UOMn 
and UOMs.UOMTo = TempReceiveData.UOM and (TempReceiveData.UOMc = 0 or TempReceiveData.UOMc is null)

update TempReceiveData set UOMc = (case when UOM = UOMn then 1.00 else UOMc end)
where UOMc = 0 or UOMc is null

";
                cmd.CommandText = uomUpdate;
                cmd.ExecuteNonQuery();


                string uomDefault = @"
update TempReceiveData set UOMc = 1  where UOMc = 0 or UOMc is null

";

                if (uomc.ToLower() == "y")
                {
                    cmd.CommandText = uomDefault;
                    cmd.ExecuteNonQuery();
                }

                #endregion

                #region UOM Convertion Check

                sqlText = @"select UOM,UOMn,Item_Code,Item_Name from TempReceiveData where UOMc = 0 or UOMc is null ";
                cmd = new SqlCommand(sqlText, currConn, transaction);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(DtUOMc);

                if (DtUOMc != null && DtUOMc.Rows.Count > 0)
                {
                    throw new Exception("UOM Convertion not found('" + DtUOMc.Rows[0]["UOMn"].ToString().Trim() + "  to  " + DtUOMc.Rows[0]["UOM"].ToString().Trim() + "')");
                }

                #endregion

                #region NBR_PriceUpdate

                string NBR_PriceUpdate = @"
update TempReceiveData set UOMPrice = NBR_Price

update TempReceiveData set NBR_Price = isnull(UOMc,0) * UOMPrice

update TempReceiveData set UOMQty = UOMc * Quantity where UOMQty = 0 or UOMQty is null

update TempReceiveData set SubTotal = NBR_Price * Quantity
";

                cmd.CommandText = NBR_PriceUpdate;
                cmd.ExecuteNonQuery();

                #endregion

                #region Update TransactionType

                string updateTransactionType = @"
update  TempReceiveData set TransactionType=@TransactionType
";

                cmd.CommandText = updateTransactionType;
                cmd.Parameters.AddWithValue("@TransactionType", transactionType);
                cmd.ExecuteNonQuery();

                #endregion

                #region Code Generation For Receive

                sqlText = "";
                sqlText = @"select * from TempReceiveData order by Id ";
                cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 500;

                adapter = new SqlDataAdapter(cmd);
                adapter.Fill(codeGen);

                ////////codeGen = OrdinaryVATDesktop.DtColumnAdd(codeGen, "TransactionType", transactionType, "string");

                CodeGenerationForReceive(codeGen, currConn, transaction);

                #endregion

                #region Delete and Bulk Insert to TempData

                sqlText = "delete from TempReceiveData; DBCC CHECKIDENT ('TempReceiveData', RESEED, 0);";

                cmd.CommandText = sqlText;
                transResult = cmd.ExecuteNonQuery();

                retResults = commonDal.BulkInsert("TempReceiveData", codeGen, currConn, transaction);
                codeGen.Clear();

                #endregion

                #region Get Master Data And bulk insert

                DataTable masters = GetMasterData(currConn, transaction, "", connVM);

                masters = OrdinaryVATDesktop.DtColumnAdd(masters, "CreatedBy", CurrentUser, "string");
                masters = OrdinaryVATDesktop.DtColumnAdd(masters, "CreatedOn", CreatedDateTime, "string");
                masters = OrdinaryVATDesktop.DtColumnAdd(masters, "LastModifiedBy", CurrentUser, "string");
                masters = OrdinaryVATDesktop.DtColumnAdd(masters, "LastModifiedOn", CreatedDateTime, "string");
                masters = OrdinaryVATDesktop.DtColumnAdd(masters, "IssueFromBOM", IssueFromBOM, "string");

                retResults = commonDal.BulkInsert("ReceiveHeaders", masters, currConn, transaction);

                masters.Clear();

                #endregion

                #region Get details Data And bulk insert

                DataTable details = GetDetailsData(currConn, transaction, connVM);

                details = OrdinaryVATDesktop.DtColumnAdd(details, "CreatedBy", CurrentUser, "string");
                details = OrdinaryVATDesktop.DtColumnAdd(details, "CreatedOn", CreatedDateTime, "string");
                details = OrdinaryVATDesktop.DtColumnAdd(details, "LastModifiedBy", CurrentUser, "string");
                details = OrdinaryVATDesktop.DtColumnAdd(details, "LastModifiedOn", CreatedDateTime, "string");

                retResults = commonDal.BulkInsert("ReceiveDetails", details, currConn, transaction);

                details.Clear();

                #endregion

                return retResults;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (Vtransaction == null && transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ReceiveDAL", "SaveAndProcessReceiveData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
        }

        public void CodeGenerationForReceive(DataTable table, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region try

            try
            {

                var oldId = "";
                var newId = "";
                var invoiceId = "";
                var commonDAl = new CommonDAL();

                if (table == null || table.Rows.Count == 0)
                {
                    return;
                }


                var branchId = table.Rows[0]["BranchId"].ToString();
                string transactionType = table.Rows[0]["TransactionType"].ToString();

                string codeGroup = "Receive";

                var firstInvoice = commonDAl.CodeGeneration(codeGroup, transactionType, table.Rows[0]["Receive_DateTime"].ToString(), branchId, VcurrConn, Vtransaction, true);
                //INV-1001/0720
                var dataArray = firstInvoice.Split('~');
                var length = Convert.ToInt32(dataArray[4]);
                var codePreFix = dataArray[6];
                var nextId = Convert.ToInt32(dataArray[5]);
                var currentYear = dataArray[8];

                for (var i = 0; i < table.Rows.Count; i++)
                {
                    DataRow row = table.Rows[i];

                    newId = row["ID"].ToString();
                    //1
                    if (newId == oldId && transactionType == table.Rows[i]["TransactionType"].ToString() && branchId == table.Rows[i]["BranchId"].ToString())
                    {
                        row["ReceiveNo"] = invoiceId;
                        row["ReceiveNumber"] = nextId - 1;

                    }
                    else
                    {//2
                        string transactionDate = table.Rows[i]["Receive_DateTime"].ToString();

                        if (branchId != table.Rows[i]["BranchId"].ToString() || transactionType != table.Rows[i]["TransactionType"].ToString())
                        {
                            UpdateCodeGen(VcurrConn, Vtransaction, nextId - 1, branchId, currentYear, codePreFix);

                            branchId = table.Rows[i]["BranchId"].ToString();
                            transactionType = table.Rows[i]["TransactionType"].ToString();

                            firstInvoice = commonDAl.CodeGeneration(codeGroup, transactionType, transactionDate, branchId, VcurrConn, Vtransaction, true);

                            dataArray = firstInvoice.Split('~');
                            length = Convert.ToInt32(dataArray[4]);
                            codePreFix = dataArray[6];
                            nextId = Convert.ToInt32(dataArray[5]);
                            currentYear = dataArray[8];

                        }

                        invoiceId = commonDAl.CodeGeneration1(dataArray[0], dataArray[1], dataArray[2], dataArray[3], length, nextId, codePreFix, transactionDate);

                        row["ReceiveNo"] = invoiceId;
                        row["ReceiveNumber"] = nextId;
                        oldId = newId;

                        nextId++;
                    }
                }

                UpdateCodeGen(VcurrConn, Vtransaction, nextId - 1, branchId, currentYear, codePreFix);
            }
            #endregion

            #region catch

            catch (Exception e)
            {
                FileLogger.Log("ReceiveDAL", "CodeGenerationForReceive", e.ToString());

                throw e;
            }
            #endregion

        }

        private void UpdateCodeGen(SqlConnection VcurrConn, SqlTransaction Vtransaction, int nextId, string branchId, string currentYear, string codePreFix, SysDBInfoVMTemp connVM = null)
        {
            #region try

            try
            {
                var sqlText = "  ";
                sqlText += " update  CodeGenerations set LastId='" + nextId + "'";
                sqlText += " WHERE CurrentYear=@CurrentYear AND BranchId=@BranchId AND Prefix=@Prefix";


                var cmdExist = new SqlCommand(sqlText, VcurrConn);
                cmdExist.Transaction = Vtransaction;

                cmdExist.Parameters.AddWithValue("@BranchId", branchId);

                cmdExist.Parameters.AddWithValue("@CurrentYear", currentYear);
                cmdExist.Parameters.AddWithValue("@Prefix", codePreFix);
                cmdExist.ExecuteNonQuery();
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "UpdateCodeGen", ex.ToString());

                throw ex;
            }
            #endregion

        }

        public DataTable GetMasterData(SqlConnection vConnection = null, SqlTransaction vTransaction = null, string app = "", SysDBInfoVMTemp connVM = null, string userId = null, bool orderBy = false)
        {
            SqlTransaction transaction = null;
            SqlConnection connection = null;

            #region try

            try
            {

                #region Connection and Transaction

                if (vConnection != null)
                {
                    connection = vConnection;
                }

                if (vTransaction != null)
                {
                    transaction = vTransaction;
                }

                if (vConnection == null)
                {
                    connection = _dbsqlConnection.GetConnection(connVM);
                    connection.Open();

                }

                if (vTransaction == null)
                {
                    transaction = connection.BeginTransaction();
                }

                #endregion


                var sqlText = @"
SELECT distinct 
 ReceiveNo
,BranchId
,Receive_DateTime ReceiveDateTime
,isnull(sum(SubTotal),0) TotalAmount
,0 TotalVATAmount
,Reference_No SerialNo
,Comments
,TransactionType	
,Post	
,Return_Id ReceiveReturnId	
,ID ImportIDExcel	
,Reference_No ReferenceNo	
,With_Toll WithToll	
,CustomerID	
,ShiftId	
,ReceiveNumber
,FiscalYear
,PeriodID
FROM TempReceiveData

group by 
ReceiveNo
,BranchId
,Receive_DateTime
,Reference_No
,Comments
,TransactionType	
,Post	
,Return_Id	
,ID		
,With_Toll	
,CustomerID	
,ShiftId	
,ReceiveNumber
,FiscalYear
,PeriodID

";

                if (orderBy)
                {
                    sqlText += " order by Id";
                }

                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.CommandTimeout = 500;
                DataTable table = new DataTable();

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                table.Columns.Add(new DataColumn("AppVersion") { DefaultValue = app });

                if (vTransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                return table;

            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                if (vTransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReceiveDAL", "GetMasterData", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion

            #region finally

            finally
            {
                if (vConnection == null && connection != null)
                {
                    connection.Close();
                }
            }
            #endregion

        }

        public DataTable GetDetailsData(SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null, string userId = null, string token = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Text

                sqlText = @"
SELECT distinct 
 ReceiveNo
,BranchId
,Receive_DateTime ReceiveDateTime
,row_number() OVER (ORDER BY ReceiveNo) ReceiveLineNo
,ItemNo
,sum(Quantity)Quantity
,sum(NBR_Price)NBRPrice
,UOM	
,0 VATRate	
,0 VATAmount	
,sum(SubTotal)SubTotal	
,Comments
,0 SD
,0 SDAmount
,TransactionType
,Post	
,VAT_Name VATName	
,Return_Id ReceiveReturnId	
,0 DiscountAmount	
,0 DiscountedNBRPrice	
,BomId BOMId
,sum(UOMQty)UOMQty	
,UOMPrice	
,UOMc	
,UOMn	
,0 CurrencyValue	
,0 DollerValue
,PeriodID	
,Weight

FROM TempReceiveData 
 
  ";
                #region Group By

                sqlText += @"  
GROUP BY 
 ItemNo
,ReceiveNo
,BranchId
,Receive_DateTime
,Quantity
,NBR_Price
,UOM		
,SubTotal	
,Comments
,TransactionType
,Post	
,VAT_Name
,Return_Id 	
,BomId
,UOMQty	
,UOMPrice	
,UOMc	
,UOMn	
,PeriodID	
,Weight

";
                #endregion

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 500;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "GetDetailsData", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            return dt;

            #endregion
        }


        #endregion

        #region SQR

        public string[] SaveTempReceiveImport(DataTable dtTableResult, string transactionType, string CurrentUser, int branchId, Action callBack, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                sqlText = @"delete from TempReceiveData where UserId = '" + CurrentUser + "'";

                CommonDAL commonDal = new CommonDAL();

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.ExecuteNonQuery();

                dtTableResult.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = CurrentUser });
                dtTableResult.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = branchId });

                commonDal.BulkInsert("TempReceiveData", dtTableResult, currConn, transaction);

                string UpdateReference = @"

--update TempReceiveData set ID = FORMAT(Receive_DateTime, 'ddMMyyyy') where UserId = @userID

create table #Refs
(
	SL int Identity(1,1),
	ID varchar(100),
	RefNo varchar(6000),
	UserID varchar(50),

)
Insert Into #Refs (ID, RefNo,userID)
select distinct ID, Reference_No,UserId from TempReceiveData where UserId = @userID

create table #updtRefs
(
	SL int Identity(1,1),
	ID varchar(100),
	RefNo varchar(6000),
	UserID varchar(50),
)

insert into #updtRefs (ID, RefNo, UserID)
SELECT DISTINCT temp2.ID, 
    SUBSTRING(
        (
            SELECT ','+temp1.RefNo  AS [text()]
            FROM #Refs temp1
            WHERE temp1.ID = temp2.ID and temp1.UserID = temp2.UserID
            ORDER BY temp1.ID
            FOR XML PATH ('')
        ), 2, 6000) [Refs], temp2.UserID
FROM #Refs temp2



update TempReceiveData set Reference_No = #updtRefs.RefNo 
from #updtRefs where TempReceiveData.ID = #updtRefs.ID and #updtRefs.UserId = TempReceiveData.UserId

drop table #Refs
drop table #updtRefs";

                #region itemUpdate

                string itemUpdate = @"
update TempReceiveData set ItemNo = Products.ItemNo from Products where Products.ProductCode = TempReceiveData.Item_Code and Products.IsArchive = 0 and (TempReceiveData.ItemNo = '0' or TempReceiveData.ItemNo is null);
update TempReceiveData set ItemNo = Products.ItemNo from Products where Products.ProductName = TempReceiveData.Item_Name and Products.IsArchive = 0 and (TempReceiveData.ItemNo = '0' or TempReceiveData.ItemNo is null);";

                #endregion

                #region branchCode

                string branchCode =
                    @"
update TempReceiveData set BranchId = BranchProfiles.BranchID from BranchProfiles 
where BranchProfiles.BranchCode = TempReceiveData.BranchCode or BranchProfiles.IntegrationCode = TempReceiveData.BranchCode

update TempReceiveData set BranchId = BranchMapDetails.BranchID from BranchMapDetails 
where   BranchMapDetails.IntegrationCode = TempReceiveData.BranchCode and (TempReceiveData.BranchId  is null or 

TempReceiveData.BranchId ='0' or TempReceiveData.BranchId = ''

)
";
                #endregion

                #region customerCode

                string customerCode = @"update TempReceiveData set CustomerID = Customers.CustomerID 
from Customers where Customers.CustomerID  = TempReceiveData.CustomerCode;";

                #endregion

                // @Receive_DateTime

                /*
                 * cast(@Receive_DateTime as datetime)
                 *
                 */
                #region bom

                string bom = @"
DECLARE @Counter INT 
DECLARE @BomId INT 
DECLARE @FinishItemNo varchar(100)
DECLARE @VAT_Name varchar(100)
DECLARE @Receive_DateTime varchar(100)
DECLARE @len INT 

SET @Counter=(Select min(SL) from TempReceiveData)
SET @len=(Select max(SL) from TempReceiveData)


WHILE ( @Counter <= @len)
BEGIN
	select @FinishItemNo= ItemNo,@VAT_Name= VAT_Name,@Receive_DateTime=Receive_DateTime from TempReceiveData
	where TempReceiveData.SL=@Counter
	select   top 1  @BomId= BOMId  from BOMs
	where  boms.FinishItemNo =@FinishItemNo and boms.VATName = @VAT_Name
and boms.EffectDate <=   dateadd(d,1,cast(@Receive_DateTime as datetime)) and boms.Post = 'Y' 
order by boms.EffectDate desc
	update TempReceiveData set BomId=@BomId where  TempReceiveData.SL=@Counter

    SET @Counter  = @Counter  + 1

END
 ";
                #endregion

                #region updateUOM

                string updateUOM = @"update TempReceiveData set UOM = Products.UOM 
from Products where Products.ItemNo = TempReceiveData.ItemNo 
--and TempReceiveData.UOM = '-'

";
                #endregion

                #region updateUOMn

                string updateUOMn = @"

 update TempReceiveData set UOMn = Products.UOM 
from Products where Products.ItemNo = TempReceiveData.ItemNo 

update TempReceiveData set TempReceiveData.UOMc = UOMs.Convertion from UOMs 
where  UOMs.UOMFrom = TempReceiveData.UOMn 
and UOMs.UOMTo = TempReceiveData.UOM and (TempReceiveData.UOMc = 0 or TempReceiveData.UOMc is null)

update TempReceiveData set UOMc = (case when UOM = UOMn then 1.00 else UOMc end)
where UOMc = 0 or UOMc is null

";
                #endregion

                #region updateShifts

                string updateShifts = @"
update TempReceiveData set ShiftId = (select top 1 Shifts.Id 
from Shifts where cast(TempReceiveData.Receive_DateTime as time) between Shifts.ShiftStart and Shifts.ShiftEnd);";

                #endregion

                string getAll = @"select * from TempReceiveData";

                string autoUOM = commonDal.settingValue("Receive", "AutoUOM", null, currConn, transaction);

                cmd.CommandText = UpdateReference;

                cmd.Parameters.AddWithValue("@userID", CurrentUser);

                cmd.ExecuteNonQuery();

                cmd.CommandText = itemUpdate + " " + branchCode + " " + customerCode + " " + updateShifts;

                cmd.ExecuteNonQuery();


                cmd.CommandText = updateUOM;
                cmd.ExecuteNonQuery();

                cmd.CommandText = updateUOMn;
                cmd.ExecuteNonQuery();

                #region Delete Duplicate

                string CompanyCode = commonDal.settings("CompanyCode", "Code", currConn, transaction);
                string duplicate = commonDal.settings("Import", "ReceiveDuplicateInsert", currConn, transaction);

                string deleteDuplicate = @"
delete TempReceiveData from 
TempReceiveData 
join ReceiveHeaders on TempReceiveData.ID = ReceiveHeaders.ImportIDExcel";

                string selectDuplicate = @"select distinct TempReceiveData.ID,ReceiveHeaders.ImportIDExcel from 
TempReceiveData join ReceiveHeaders on TempReceiveData.ID = ReceiveHeaders.ImportIDExcel";

                if (CompanyCode == "CP")
                {
                    if (duplicate.ToLower() == "n")
                    {
                        cmd.CommandText = selectDuplicate;
                        SqlDataAdapter ddataAdapter = new SqlDataAdapter(cmd);
                        DataTable duplicates = new DataTable();
                        ddataAdapter.Fill(duplicates);

                        string duplicateIds = string.Join(", ", duplicates.Rows.OfType<DataRow>().Select(r => r[0].ToString()));

                        if (duplicates.Rows.Count > 0)
                        {
                            throw new Exception("These Invoices are already in system-" + duplicateIds);
                        }
                    }
                    else if (duplicate.ToLower() == "y")
                    {
                        cmd.CommandText = deleteDuplicate;

                        int deletedData = cmd.ExecuteNonQuery();
                    }
                }

                #endregion

                cmd.CommandText = bom;
                cmd.ExecuteNonQuery();

                cmd.CommandText = getAll;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                DataTable tempData = new DataTable();

                adapter.Fill(tempData);

                //////retResults = SaveReceive(tempData, transactionType, CurrentUser, branchId, currConn, transaction, callBack);

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        retResults[0] = "Success";
                        retResults[1] = "Import completed successfully";

                        transaction.Commit();
                    }
                }
                #endregion Commit

            }

            #endregion

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message;//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (Vtransaction == null && transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ReceiveDAL", "SaveTempReceiveImport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public DataTable SelectAllHeaderTemp(int Id = 0, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SaleMasterVM likeVM = null, bool Dt = false, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();

            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                #region SqlText

                sqlText = @"
SELECT '0' SL
      ,trd.ID
      ,trd.BranchCode
      ,trd.Receive_DateTime ReceiveDateTime
      ,trd.Reference_No ReferenceNo
      ,trd.Comments
      ,trd.Post
      ,trd.Return_Id ReturnId
      ,trd.Item_Code ItemCode
      ,trd.Item_Name ItemName
      ,trd.ItemNo
      ,sum(trd.Quantity)Quantity
      ,trd.NBR_Price NBRPrice
      ,trd.UOM
      ,trd.VAT_Name VATName
      ,trd.CustomerCode
      ,trd.CustomerID
	  ,cus.CustomerName
      ,trd.BranchId
      ,trd.BomId
      ,trd.With_Toll WithToll
  FROM TempReceiveData trd
  left outer join Customers cus on trd.CustomerID=cus.CustomerID

WHERE  1=1 

        ";


                if (Id > 0)
                {
                    sqlText += @" and ID=@Id";
                }


                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;
                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                #region Group By

                sqlText += @"
group by 
Item_Code
      ,trd.ID
      ,trd.BranchCode
      ,trd.Receive_DateTime
      ,trd.Reference_No
      ,trd.Comments
      ,trd.Post
      ,trd.Return_Id
      ,trd.Item_Name
      ,trd.ItemNo
	  ,trd.NBR_Price
      ,trd.UOM
      ,trd.VAT_Name
      ,trd.CustomerCode
      ,trd.CustomerID
	  ,cus.CustomerName
      ,trd.BranchId
      ,trd.BomId
      ,trd.With_Toll
";

                #endregion

                #endregion SqlText

                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (Id > 0)
                {
                    da.SelectCommand.Parameters.AddWithValue("@Id", Id);
                }
                da.Fill(dt);

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #endregion

            #region catch
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReceiveDAL", "SelectAllHeaderTemp", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                FileLogger.Log("ReceiveDAL", "SelectAllHeaderTemp", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dt;
        }

        public DataTable SearchReceiveDetailTemp(string ImportId, string userId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("SearchIssueDetail");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                //transaction = currConn.BeginTransaction();
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                          
SELECT '0' SL
      ,trd.ID
      ,trd.BranchCode
      ,trd.Receive_DateTime
      ,trd.Reference_No
      ,trd.Comments
      ,trd.Post
      ,trd.Return_Id
      ,trd.Item_Code ItemCode
      ,trd.Item_Name
      ,trd.ItemNo
      ,Sum(trd.Quantity) Quantity
      ,trd.NBR_Price
      ,trd.UOM
      ,trd.VAT_Name VATName
      ,trd.CustomerCode
      ,trd.CustomerID
      ,trd.BranchId
      ,ISNULL(trd.BomId,0)BomId
      ,trd.With_Toll
	  ,Products.ProductCode
,Products.ProductName
,Products.NBRPrice
,trd.UOMn
,trd.UOMc

  FROM TempReceiveData trd
LEFT OUTER JOIN Products ON trd.ItemNo = Products.ItemNo 

where trd.ID = @Id and UserId = @userId 

group by 

trd.ID
,trd.BranchCode
,trd.Receive_DateTime
,trd.Reference_No
,trd.Comments
,trd.Post
,trd.Return_Id
,trd.Item_Code
,trd.Item_Name
,trd.ItemNo
,Products.ProductCode
,Products.ProductName
,trd.NBR_Price
,trd.UOM
,trd.VAT_Name
,trd.CustomerCode
,trd.CustomerID
,trd.BranchId
,trd.BomId
,trd.With_Toll
,Products.NBRPrice
,trd.BomId
,trd.UOMn
,trd.UOMc

                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommSaleDetail = new SqlCommand();
                objCommSaleDetail.Connection = currConn;
                //objCommSaleDetail.Transaction = transaction;

                objCommSaleDetail.CommandText = sqlText;
                objCommSaleDetail.CommandType = CommandType.Text;

                #endregion.

                #region Parameter

                objCommSaleDetail.Parameters.AddWithValue("@Id", ImportId);
                objCommSaleDetail.Parameters.AddWithValue("@userId", userId);

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleDetail);
                dataAdapter.Fill(dataTable);
            }
            #endregion

            #region Catch & Finally
            catch (Exception ex)
            {

                FileLogger.Log("ReceiveDAL", "SearchReceiveDetailTemp", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }


        #endregion

        #region Excell upload Validation

        //public ResultVM ExcelReceiveValidation(DataTable data, string columnName)
        //{

        //    ResultVM result = new ResultVM();
        //    List<ErrorMessage> errorList = new List<ErrorMessage>();
        //    #region try

        //    try
        //    {
        //        // process

        //        foreach (DataRow row in data.Rows)
        //        {
        //            if (columnName.ToLower() == "quantity")
        //            {
        //                if (!OrdinaryVATDesktop.IsNumeric(row[columnName].ToString()))
        //                {
        //                    errorList.Add(new ErrorMessage()
        //                    {
        //                        ColumnName = columnName,
        //                        Message = "Quantity Field is numeric of ID :" + row["ID"]
        //                    });
        //                }
        //            }

        //            if (columnName.ToLower() == "receive_datetime")
        //            {
        //                if (!OrdinaryVATDesktop.IsDate(row[columnName].ToString()))
        //                {
        //                    errorList.Add(new ErrorMessage()
        //                    {
        //                        ColumnName = columnName,
        //                        Message = "Receive_DateTime Field is datetime of ID :" + row["ID"]
        //                    });
        //                }
        //            }

        //            if (columnName.ToLower() == "nbr_price")
        //            {
        //                if (!OrdinaryVATDesktop.IsNumeric(row[columnName].ToString()))
        //                {
        //                    errorList.Add(new ErrorMessage()
        //                    {
        //                        ColumnName = columnName,
        //                        Message = "NBR_Price Field is numeric of ID :" + row["ID"]
        //                    });
        //                }
        //            }

        //            if (columnName.ToLower() == "post")
        //            {
        //                if (!OrdinaryVATDesktop.IsYNCheck(row[columnName].ToString()))
        //                {
        //                    errorList.Add(new ErrorMessage()
        //                    {
        //                        ColumnName = columnName,
        //                        Message = "Post Field is only Y/N of ID :" + row["ID"]
        //                    });
        //                }
        //            }
        //            if (columnName.ToLower() == "with_toll")
        //            {
        //                if (!OrdinaryVATDesktop.IsYNCheck(row[columnName].ToString()))
        //                {
        //                    errorList.Add(new ErrorMessage()
        //                    {
        //                        ColumnName = columnName,
        //                        Message = "With_Toll Filed is only Y/N of ID :" + row["ID"]
        //                    });
        //                }
        //            }


        //        }



        //        if (errorList.Count > 0)
        //        {
        //            result.Status = "fail";
        //            result.Message = "fail";
        //            result.ErrorList = errorList;

        //        }
        //        else
        //        {

        //            result.Status = "Success";
        //            result.Message = "Success";
        //        }


        //        return result;
        //    }
        //    #endregion

        //    #region catch
        //    catch (Exception ex)
        //    {
        //        FileLogger.Log("ReceiveDAL", "ExcelReceiveValidation", ex.ToString());
        //        throw ex;
        //    }

        //    #endregion
        //}

        //public ResultVM ExcelValidationNumeric(DataTable data, string columnName, string ErrorColumnName)
        //{

        //    ResultVM result = new ResultVM();
        //    List<ErrorMessage> errorList = new List<ErrorMessage>();
        //    #region try

        //    try
        //    {
        //        // process

        //        foreach (DataRow row in data.Rows)
        //        {
        //            if (!OrdinaryVATDesktop.IsNumericScientific(row[columnName].ToString()))
        //            {
        //                errorList.Add(new ErrorMessage()
        //                {
        //                    ColumnName = columnName,
        //                    Message = columnName + " Field is numeric of " + ErrorColumnName + " :" + row[ErrorColumnName]
        //                });
        //            }

        //        }

        //        if (errorList.Count > 0)
        //        {
        //            result.Status = "fail";
        //            result.Message = "fail";
        //            result.ErrorList = errorList;

        //        }
        //        else
        //        {

        //            result.Status = "Success";
        //            result.Message = "Success";
        //        }


        //        return result;
        //    }
        //    #endregion

        //    #region catch
        //    catch (Exception ex)
        //    {
        //        FileLogger.Log("ReceiveDAL", "ExcelValidationNumeric", ex.ToString());
        //        throw ex;
        //    }

        //    #endregion
        //}

        //public ResultVM ExcelValidationDateTime(DataTable data, string columnName, string ErrorColumnName)
        //{

        //    ResultVM result = new ResultVM();
        //    List<ErrorMessage> errorList = new List<ErrorMessage>();
        //    #region try

        //    try
        //    {

        //        foreach (DataRow row in data.Rows)
        //        {

        //            if (!OrdinaryVATDesktop.IsDate(row[columnName].ToString()))
        //            {
        //                errorList.Add(new ErrorMessage()
        //                {
        //                    ColumnName = columnName,
        //                    Message = columnName + " Field is datetime of " + ErrorColumnName + " :" + row[ErrorColumnName]
        //                });
        //            }

        //        }

        //        if (errorList.Count > 0)
        //        {
        //            result.Status = "fail";
        //            result.Message = "fail";
        //            result.ErrorList = errorList;

        //        }
        //        else
        //        {

        //            result.Status = "Success";
        //            result.Message = "Success";
        //        }


        //        return result;
        //    }
        //    #endregion

        //    #region catch
        //    catch (Exception ex)
        //    {
        //        FileLogger.Log("ReceiveDAL", "ExcelValidationDateTime", ex.ToString());
        //        throw ex;
        //    }

        //    #endregion
        //}

        //public ResultVM ExcelValidationYNCheck(DataTable data, string columnName, string ErrorColumnName)
        //{

        //    ResultVM result = new ResultVM();
        //    List<ErrorMessage> errorList = new List<ErrorMessage>();
        //    #region try

        //    try
        //    {

        //        foreach (DataRow row in data.Rows)
        //        {

        //            if (!OrdinaryVATDesktop.IsYNCheck(row[columnName].ToString()))
        //            {
        //                errorList.Add(new ErrorMessage()
        //                {
        //                    ColumnName = columnName,
        //                    Message = columnName + " Field is only Y/N of " + ErrorColumnName + " :" + row[ErrorColumnName]
        //                });
        //            }

        //        }

        //        if (errorList.Count > 0)
        //        {
        //            result.Status = "fail";
        //            result.Message = "fail";
        //            result.ErrorList = errorList;

        //        }
        //        else
        //        {

        //            result.Status = "Success";
        //            result.Message = "Success";
        //        }


        //        return result;
        //    }
        //    #endregion

        //    #region catch
        //    catch (Exception ex)
        //    {
        //        FileLogger.Log("ReceiveDAL", "ExcelValidationYNCheck", ex.ToString());
        //        throw ex;
        //    }

        //    #endregion
        //}

        //public ResultVM ExcelQuantityZeroCheck(DataTable data, string columnName)
        //{

        //    ResultVM result = new ResultVM();
        //    List<ErrorMessage> errorList = new List<ErrorMessage>();
        //    #region try

        //    try
        //    {
        //        // process

        //        foreach (DataRow row in data.Rows)
        //        {
        //            string quantity = row[columnName].ToString();
        //            decimal qty = Convert.ToDecimal(quantity);

        //            if (qty < 0)
        //            {
        //                errorList.Add(new ErrorMessage()
        //                {
        //                    ColumnName = columnName,
        //                    Message = columnName + " Field Value can't be zero of ID :" + row["ID"]
        //                });

        //            }


        //        }

        //        if (errorList.Count > 0)
        //        {
        //            result.Status = "fail";
        //            result.Message = "fail";
        //            result.ErrorList = errorList;

        //        }
        //        else
        //        {

        //            result.Status = "Success";
        //            result.Message = "Success";
        //        }


        //        return result;
        //    }
        //    #endregion

        //    #region catch
        //    catch (Exception ex)
        //    {
        //        FileLogger.Log("ReceiveDAL", "ExcelValidationNumeric", ex.ToString());
        //        throw ex;
        //    }

        //    #endregion
        //}


        #endregion

        public List<TrackingVM> GetTrackingsWeb(List<ReceiveDetailVM> DetailVMs, string ID, SysDBInfoVMTemp connVM = null)
        {
            List<TrackingVM> receiveTrackings = new List<TrackingVM>();

            foreach (ReceiveDetailVM ReceiveDetailVm in DetailVMs)
            {
                DataTable trackingInfoDt = SearchReceiveTracking(ID);
                if (trackingInfoDt.Rows.Count > 0)
                {
                    for (int i = 0; i < trackingInfoDt.Rows.Count; i++)
                    {
                        TrackingVM trackingVm = new TrackingVM();
                        trackingVm.ItemNo = trackingInfoDt.Rows[i]["ItemNo"].ToString();
                        trackingVm.Heading1 = trackingInfoDt.Rows[i]["Heading1"].ToString();
                        trackingVm.Heading2 = trackingInfoDt.Rows[i]["Heading2"].ToString();
                        //trackingVm.IsReceive = trackingInfoDt.Rows[i]["IsReceive"].ToString();
                        trackingVm.ReceiveNo = trackingInfoDt.Rows[i]["ReceiveNo"].ToString();
                        trackingVm.Quantity = Convert.ToDecimal(trackingInfoDt.Rows[i]["Quantity"].ToString());

                        receiveTrackings.Add(trackingVm);
                    }
                }
            }

            return receiveTrackings;
        }

        public DataTable SearchReceiveTracking(string ReceiveNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataTable dataTable = new DataTable();

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement



                sqlText = "";
                sqlText += @"

SELECT t.[ReceiveNo]
      ,pr.[ProductCode]
	  ,pr.[ProductName] 
      ,t.[ItemNo]
	  ,t.[Heading1]
      ,t.[Heading2]
      ,t.[Quantity]
      ,t.[IsPurchase]
      ,t.[Post]
	  ,t.ReturnPurchase
	  ,t.ReturnPurchaseID
	  ,t.ReturnReceive
	  ,t.ReturnReceiveID
	  ,t.ReturnSale
	  ,t.ReturnSaleID
	  ,t.ReturnType
      ,ISNULL(t.[UnitPrice],0) UnitPrice

FROM Trackings t,
Products pr
where t.[ItemNo]=pr.[ItemNo]
and t.ReceiveNo=@ReceiveNo
---and t.ItemNo=@itemNo
";

                SqlCommand objCommProduct = new SqlCommand();
                objCommProduct.Connection = currConn;
                objCommProduct.CommandText = sqlText;
                objCommProduct.CommandType = CommandType.Text;



                if (!objCommProduct.Parameters.Contains("@ReceiveNo"))
                { objCommProduct.Parameters.AddWithValue("@ReceiveNo", ReceiveNo); }
                else { objCommProduct.Parameters["@ReceiveNo"].Value = ReceiveNo; }

                //if (string.IsNullOrEmpty(itemNo))
                //{
                //    if (!objCommProduct.Parameters.Contains("@itemNo"))
                //    { objCommProduct.Parameters.AddWithValue("@itemNo", System.DBNull.Value); }
                //    else { objCommProduct.Parameters["@itemNo"].Value = System.DBNull.Value; }
                //}
                //else
                //{
                //    if (!objCommProduct.Parameters.Contains("@itemNo"))
                //    { objCommProduct.Parameters.AddWithValue("@itemNo", itemNo); }
                //    else { objCommProduct.Parameters["@itemNo"].Value = itemNo; }
                //}

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProduct);
                dataAdapter.Fill(dataTable);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                //2020-12-13
                FileLogger.Log("RecceiveDAL", "SearchRceiveTracking", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //throw sqlex;
            }
            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("ReceiveDAL", "SearchReceiveTracking", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }

    }
}
