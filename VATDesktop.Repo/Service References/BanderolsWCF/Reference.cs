//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.BanderolsWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BanderolsWCF.IBanderolsWCF")]
    public interface IBanderolsWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/DoWork", ReplyAction="http://tempuri.org/IBanderolsWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/DoWork", ReplyAction="http://tempuri.org/IBanderolsWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/InsertToBanderol", ReplyAction="http://tempuri.org/IBanderolsWCF/InsertToBanderolResponse")]
        string InsertToBanderol(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/InsertToBanderol", ReplyAction="http://tempuri.org/IBanderolsWCF/InsertToBanderolResponse")]
        System.Threading.Tasks.Task<string> InsertToBanderolAsync(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/UpdateBanderol", ReplyAction="http://tempuri.org/IBanderolsWCF/UpdateBanderolResponse")]
        string UpdateBanderol(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/UpdateBanderol", ReplyAction="http://tempuri.org/IBanderolsWCF/UpdateBanderolResponse")]
        System.Threading.Tasks.Task<string> UpdateBanderolAsync(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/DeleteBanderolInformation", ReplyAction="http://tempuri.org/IBanderolsWCF/DeleteBanderolInformationResponse")]
        string DeleteBanderolInformation(string BanderolID, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/DeleteBanderolInformation", ReplyAction="http://tempuri.org/IBanderolsWCF/DeleteBanderolInformationResponse")]
        System.Threading.Tasks.Task<string> DeleteBanderolInformationAsync(string BanderolID, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/SearchBanderols", ReplyAction="http://tempuri.org/IBanderolsWCF/SearchBanderolsResponse")]
        string SearchBanderols(string BanderolName, string BandeSize, string OpeningDateFrom, string OpeningDateTo, string ActiveStatus, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolsWCF/SearchBanderols", ReplyAction="http://tempuri.org/IBanderolsWCF/SearchBanderolsResponse")]
        System.Threading.Tasks.Task<string> SearchBanderolsAsync(string BanderolName, string BandeSize, string OpeningDateFrom, string OpeningDateTo, string ActiveStatus, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBanderolsWCFChannel : VATDesktop.Repo.BanderolsWCF.IBanderolsWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BanderolsWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.BanderolsWCF.IBanderolsWCF>, VATDesktop.Repo.BanderolsWCF.IBanderolsWCF {
        
        public BanderolsWCFClient() {
        }
        
        public BanderolsWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BanderolsWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanderolsWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanderolsWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string InsertToBanderol(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string connVMwcf) {
            return base.Channel.InsertToBanderol(BanderolID, BanderolName, BanderolSize, Uom, Description, ActiveStatus, CreatedBy, CreatedOn, LastModifiedBy, LastModifiedOn, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToBanderolAsync(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string connVMwcf) {
            return base.Channel.InsertToBanderolAsync(BanderolID, BanderolName, BanderolSize, Uom, Description, ActiveStatus, CreatedBy, CreatedOn, LastModifiedBy, LastModifiedOn, connVMwcf);
        }
        
        public string UpdateBanderol(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string connVMwcf) {
            return base.Channel.UpdateBanderol(BanderolID, BanderolName, BanderolSize, Uom, Description, ActiveStatus, LastModifiedBy, LastModifiedOn, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateBanderolAsync(string BanderolID, string BanderolName, string BanderolSize, string Uom, string Description, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string connVMwcf) {
            return base.Channel.UpdateBanderolAsync(BanderolID, BanderolName, BanderolSize, Uom, Description, ActiveStatus, LastModifiedBy, LastModifiedOn, connVMwcf);
        }
        
        public string DeleteBanderolInformation(string BanderolID, string connVMwcf) {
            return base.Channel.DeleteBanderolInformation(BanderolID, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBanderolInformationAsync(string BanderolID, string connVMwcf) {
            return base.Channel.DeleteBanderolInformationAsync(BanderolID, connVMwcf);
        }
        
        public string SearchBanderols(string BanderolName, string BandeSize, string OpeningDateFrom, string OpeningDateTo, string ActiveStatus, string connVMwcf) {
            return base.Channel.SearchBanderols(BanderolName, BandeSize, OpeningDateFrom, OpeningDateTo, ActiveStatus, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchBanderolsAsync(string BanderolName, string BandeSize, string OpeningDateFrom, string OpeningDateTo, string ActiveStatus, string connVMwcf) {
            return base.Channel.SearchBanderolsAsync(BanderolName, BandeSize, OpeningDateFrom, OpeningDateTo, ActiveStatus, connVMwcf);
        }
    }
}
