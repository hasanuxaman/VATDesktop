//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.ReceiveWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReceiveWCF.IReceiveWCF")]
    public interface IReceiveWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/DoWork", ReplyAction="http://tempuri.org/IReceiveWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/DoWork", ReplyAction="http://tempuri.org/IReceiveWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SearchByReferenceNo", ReplyAction="http://tempuri.org/IReceiveWCF/SearchByReferenceNoResponse")]
        string SearchByReferenceNo(string ReferenceNo, string ItemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SearchByReferenceNo", ReplyAction="http://tempuri.org/IReceiveWCF/SearchByReferenceNoResponse")]
        System.Threading.Tasks.Task<string> SearchByReferenceNoAsync(string ReferenceNo, string ItemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/FormatingNumeric", ReplyAction="http://tempuri.org/IReceiveWCF/FormatingNumericResponse")]
        string FormatingNumeric(decimal value, int DecPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/FormatingNumeric", ReplyAction="http://tempuri.org/IReceiveWCF/FormatingNumericResponse")]
        System.Threading.Tasks.Task<string> FormatingNumericAsync(decimal value, int DecPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/GetExcelData", ReplyAction="http://tempuri.org/IReceiveWCF/GetExcelDataResponse")]
        string GetExcelData(string invoiceListwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/GetExcelData", ReplyAction="http://tempuri.org/IReceiveWCF/GetExcelDataResponse")]
        System.Threading.Tasks.Task<string> GetExcelDataAsync(string invoiceListwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/GetUSDCurrency", ReplyAction="http://tempuri.org/IReceiveWCF/GetUSDCurrencyResponse")]
        string GetUSDCurrency(decimal subTotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/GetUSDCurrency", ReplyAction="http://tempuri.org/IReceiveWCF/GetUSDCurrencyResponse")]
        System.Threading.Tasks.Task<string> GetUSDCurrencyAsync(decimal subTotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ImportData", ReplyAction="http://tempuri.org/IReceiveWCF/ImportDataResponse")]
        string ImportData(string dtReceiveMwcf, string dtReceiveDwcf, int branchId, System.Action callBack, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ImportData", ReplyAction="http://tempuri.org/IReceiveWCF/ImportDataResponse")]
        System.Threading.Tasks.Task<string> ImportDataAsync(string dtReceiveMwcf, string dtReceiveDwcf, int branchId, System.Action callBack, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ImportData_Sanofi", ReplyAction="http://tempuri.org/IReceiveWCF/ImportData_SanofiResponse")]
        string ImportData_Sanofi(string dtReceiveMwcf, string dtReceiveDwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ImportData_Sanofi", ReplyAction="http://tempuri.org/IReceiveWCF/ImportData_SanofiResponse")]
        System.Threading.Tasks.Task<string> ImportData_SanofiAsync(string dtReceiveMwcf, string dtReceiveDwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ImportExcelFile", ReplyAction="http://tempuri.org/IReceiveWCF/ImportExcelFileResponse")]
        string ImportExcelFile(string paramVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ImportExcelFile", ReplyAction="http://tempuri.org/IReceiveWCF/ImportExcelFileResponse")]
        System.Threading.Tasks.Task<string> ImportExcelFileAsync(string paramVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/MultiplePost", ReplyAction="http://tempuri.org/IReceiveWCF/MultiplePostResponse")]
        string MultiplePost(string Idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/MultiplePost", ReplyAction="http://tempuri.org/IReceiveWCF/MultiplePostResponse")]
        System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReceiveInsert", ReplyAction="http://tempuri.org/IReceiveWCF/ReceiveInsertResponse")]
        string ReceiveInsert(string Masterwcf, string Detailswcf, string Trackingswcf, int BranchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReceiveInsert", ReplyAction="http://tempuri.org/IReceiveWCF/ReceiveInsertResponse")]
        System.Threading.Tasks.Task<string> ReceiveInsertAsync(string Masterwcf, string Detailswcf, string Trackingswcf, int BranchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReceivePost", ReplyAction="http://tempuri.org/IReceiveWCF/ReceivePostResponse")]
        string ReceivePost(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReceivePost", ReplyAction="http://tempuri.org/IReceiveWCF/ReceivePostResponse")]
        System.Threading.Tasks.Task<string> ReceivePostAsync(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReceiveUpdate", ReplyAction="http://tempuri.org/IReceiveWCF/ReceiveUpdateResponse")]
        string ReceiveUpdate(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReceiveUpdate", ReplyAction="http://tempuri.org/IReceiveWCF/ReceiveUpdateResponse")]
        System.Threading.Tasks.Task<string> ReceiveUpdateAsync(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReturnReceiveQty", ReplyAction="http://tempuri.org/IReceiveWCF/ReturnReceiveQtyResponse")]
        string ReturnReceiveQty(string receiveReturnId, string itemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/ReturnReceiveQty", ReplyAction="http://tempuri.org/IReceiveWCF/ReturnReceiveQtyResponse")]
        System.Threading.Tasks.Task<string> ReturnReceiveQtyAsync(string receiveReturnId, string itemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SaveTempReceive", ReplyAction="http://tempuri.org/IReceiveWCF/SaveTempReceiveResponse")]
        string SaveTempReceive(string dtTableResultwcf, string transactionType, string CurrentUser, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SaveTempReceive", ReplyAction="http://tempuri.org/IReceiveWCF/SaveTempReceiveResponse")]
        System.Threading.Tasks.Task<string> SaveTempReceiveAsync(string dtTableResultwcf, string transactionType, string CurrentUser, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SearchReceiveDetailNew", ReplyAction="http://tempuri.org/IReceiveWCF/SearchReceiveDetailNewResponse")]
        string SearchReceiveDetailNew(string ReceiveNo, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SearchReceiveDetailNew", ReplyAction="http://tempuri.org/IReceiveWCF/SearchReceiveDetailNewResponse")]
        System.Threading.Tasks.Task<string> SearchReceiveDetailNewAsync(string ReceiveNo, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SearchReceiveHeaderDTNew", ReplyAction="http://tempuri.org/IReceiveWCF/SearchReceiveHeaderDTNewResponse")]
        string SearchReceiveHeaderDTNew(string ReceiveNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SearchReceiveHeaderDTNew", ReplyAction="http://tempuri.org/IReceiveWCF/SearchReceiveHeaderDTNewResponse")]
        System.Threading.Tasks.Task<string> SearchReceiveHeaderDTNewAsync(string ReceiveNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SelectAll", ReplyAction="http://tempuri.org/IReceiveWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SelectAll", ReplyAction="http://tempuri.org/IReceiveWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SelectAllList", ReplyAction="http://tempuri.org/IReceiveWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SelectAllList", ReplyAction="http://tempuri.org/IReceiveWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SelectReceiveDetail", ReplyAction="http://tempuri.org/IReceiveWCF/SelectReceiveDetailResponse")]
        string SelectReceiveDetail(string ReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReceiveWCF/SelectReceiveDetail", ReplyAction="http://tempuri.org/IReceiveWCF/SelectReceiveDetailResponse")]
        System.Threading.Tasks.Task<string> SelectReceiveDetailAsync(string ReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReceiveWCFChannel : VATDesktop.Repo.ReceiveWCF.IReceiveWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReceiveWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.ReceiveWCF.IReceiveWCF>, VATDesktop.Repo.ReceiveWCF.IReceiveWCF {
        
        public ReceiveWCFClient() {
        }
        
        public ReceiveWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReceiveWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReceiveWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReceiveWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SearchByReferenceNo(string ReferenceNo, string ItemNo, string connVMwcf) {
            return base.Channel.SearchByReferenceNo(ReferenceNo, ItemNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchByReferenceNoAsync(string ReferenceNo, string ItemNo, string connVMwcf) {
            return base.Channel.SearchByReferenceNoAsync(ReferenceNo, ItemNo, connVMwcf);
        }
        
        public string FormatingNumeric(decimal value, int DecPlace) {
            return base.Channel.FormatingNumeric(value, DecPlace);
        }
        
        public System.Threading.Tasks.Task<string> FormatingNumericAsync(decimal value, int DecPlace) {
            return base.Channel.FormatingNumericAsync(value, DecPlace);
        }
        
        public string GetExcelData(string invoiceListwcf, string connVMwcf) {
            return base.Channel.GetExcelData(invoiceListwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetExcelDataAsync(string invoiceListwcf, string connVMwcf) {
            return base.Channel.GetExcelDataAsync(invoiceListwcf, connVMwcf);
        }
        
        public string GetUSDCurrency(decimal subTotal) {
            return base.Channel.GetUSDCurrency(subTotal);
        }
        
        public System.Threading.Tasks.Task<string> GetUSDCurrencyAsync(decimal subTotal) {
            return base.Channel.GetUSDCurrencyAsync(subTotal);
        }
        
        public string ImportData(string dtReceiveMwcf, string dtReceiveDwcf, int branchId, System.Action callBack, string connVMwcf) {
            return base.Channel.ImportData(dtReceiveMwcf, dtReceiveDwcf, branchId, callBack, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ImportDataAsync(string dtReceiveMwcf, string dtReceiveDwcf, int branchId, System.Action callBack, string connVMwcf) {
            return base.Channel.ImportDataAsync(dtReceiveMwcf, dtReceiveDwcf, branchId, callBack, connVMwcf);
        }
        
        public string ImportData_Sanofi(string dtReceiveMwcf, string dtReceiveDwcf, string connVMwcf) {
            return base.Channel.ImportData_Sanofi(dtReceiveMwcf, dtReceiveDwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ImportData_SanofiAsync(string dtReceiveMwcf, string dtReceiveDwcf, string connVMwcf) {
            return base.Channel.ImportData_SanofiAsync(dtReceiveMwcf, dtReceiveDwcf, connVMwcf);
        }
        
        public string ImportExcelFile(string paramVMwcf) {
            return base.Channel.ImportExcelFile(paramVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ImportExcelFileAsync(string paramVMwcf) {
            return base.Channel.ImportExcelFileAsync(paramVMwcf);
        }
        
        public string MultiplePost(string Idswcf, string connVMwcf) {
            return base.Channel.MultiplePost(Idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMwcf) {
            return base.Channel.MultiplePostAsync(Idswcf, connVMwcf);
        }
        
        public string ReceiveInsert(string Masterwcf, string Detailswcf, string Trackingswcf, int BranchId, string connVMwcf) {
            return base.Channel.ReceiveInsert(Masterwcf, Detailswcf, Trackingswcf, BranchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ReceiveInsertAsync(string Masterwcf, string Detailswcf, string Trackingswcf, int BranchId, string connVMwcf) {
            return base.Channel.ReceiveInsertAsync(Masterwcf, Detailswcf, Trackingswcf, BranchId, connVMwcf);
        }
        
        public string ReceivePost(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf) {
            return base.Channel.ReceivePost(Masterwcf, Detailswcf, Trackingswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ReceivePostAsync(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf) {
            return base.Channel.ReceivePostAsync(Masterwcf, Detailswcf, Trackingswcf, connVMwcf);
        }
        
        public string ReceiveUpdate(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf) {
            return base.Channel.ReceiveUpdate(Masterwcf, Detailswcf, Trackingswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ReceiveUpdateAsync(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf) {
            return base.Channel.ReceiveUpdateAsync(Masterwcf, Detailswcf, Trackingswcf, connVMwcf);
        }
        
        public string ReturnReceiveQty(string receiveReturnId, string itemNo, string connVMwcf) {
            return base.Channel.ReturnReceiveQty(receiveReturnId, itemNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ReturnReceiveQtyAsync(string receiveReturnId, string itemNo, string connVMwcf) {
            return base.Channel.ReturnReceiveQtyAsync(receiveReturnId, itemNo, connVMwcf);
        }
        
        public string SaveTempReceive(string dtTableResultwcf, string transactionType, string CurrentUser, int branchId, string connVMwcf) {
            return base.Channel.SaveTempReceive(dtTableResultwcf, transactionType, CurrentUser, branchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveTempReceiveAsync(string dtTableResultwcf, string transactionType, string CurrentUser, int branchId, string connVMwcf) {
            return base.Channel.SaveTempReceiveAsync(dtTableResultwcf, transactionType, CurrentUser, branchId, connVMwcf);
        }
        
        public string SearchReceiveDetailNew(string ReceiveNo, string databaseName, string connVMwcf) {
            return base.Channel.SearchReceiveDetailNew(ReceiveNo, databaseName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchReceiveDetailNewAsync(string ReceiveNo, string databaseName, string connVMwcf) {
            return base.Channel.SearchReceiveDetailNewAsync(ReceiveNo, databaseName, connVMwcf);
        }
        
        public string SearchReceiveHeaderDTNew(string ReceiveNo) {
            return base.Channel.SearchReceiveHeaderDTNew(ReceiveNo);
        }
        
        public System.Threading.Tasks.Task<string> SearchReceiveHeaderDTNewAsync(string ReceiveNo) {
            return base.Channel.SearchReceiveHeaderDTNewAsync(ReceiveNo);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf, Dt, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf, Dt, connVMWCF);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf);
        }
        
        public string SelectReceiveDetail(string ReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectReceiveDetail(ReceiveNo, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectReceiveDetailAsync(string ReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectReceiveDetailAsync(ReceiveNo, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
    }
}
