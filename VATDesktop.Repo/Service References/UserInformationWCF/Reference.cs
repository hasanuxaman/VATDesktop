//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.UserInformationWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserInformationWCF.IUserInformationWCF")]
    public interface IUserInformationWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/DoWork", ReplyAction="http://tempuri.org/IUserInformationWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/DoWork", ReplyAction="http://tempuri.org/IUserInformationWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SelectAll", ReplyAction="http://tempuri.org/IUserInformationWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SelectAll", ReplyAction="http://tempuri.org/IUserInformationWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/UpdateUserPasswordNew", ReplyAction="http://tempuri.org/IUserInformationWCF/UpdateUserPasswordNewResponse")]
        string UpdateUserPasswordNew(string UserName, string UserPassword, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/UpdateUserPasswordNew", ReplyAction="http://tempuri.org/IUserInformationWCF/UpdateUserPasswordNewResponse")]
        System.Threading.Tasks.Task<string> UpdateUserPasswordNewAsync(string UserName, string UserPassword, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/UpdateUserInformation", ReplyAction="http://tempuri.org/IUserInformationWCF/UpdateUserInformationResponse")]
        string UpdateUserInformation(string UserID, string UserName, string FullName, string Designation, string ContactNo, string Address, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf, string IsMainSettings, string nationalId, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/UpdateUserInformation", ReplyAction="http://tempuri.org/IUserInformationWCF/UpdateUserInformationResponse")]
        System.Threading.Tasks.Task<string> UpdateUserInformationAsync(string UserID, string UserName, string FullName, string Designation, string ContactNo, string Address, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf, string IsMainSettings, string nationalId, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/DropDown", ReplyAction="http://tempuri.org/IUserInformationWCF/DropDownResponse")]
        string DropDown(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/DropDown", ReplyAction="http://tempuri.org/IUserInformationWCF/DropDownResponse")]
        System.Threading.Tasks.Task<string> DropDownAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/GetExcelData", ReplyAction="http://tempuri.org/IUserInformationWCF/GetExcelDataResponse")]
        string GetExcelData(string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/GetExcelData", ReplyAction="http://tempuri.org/IUserInformationWCF/GetExcelDataResponse")]
        System.Threading.Tasks.Task<string> GetExcelDataAsync(string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SelectForLogin", ReplyAction="http://tempuri.org/IUserInformationWCF/SelectForLoginResponse")]
        string SelectForLogin(string Logvmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SelectForLogin", ReplyAction="http://tempuri.org/IUserInformationWCF/SelectForLoginResponse")]
        System.Threading.Tasks.Task<string> SelectForLoginAsync(string Logvmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserHasNew", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserHasNewResponse")]
        string SearchUserHasNew(string UserName, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserHasNew", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserHasNewResponse")]
        System.Threading.Tasks.Task<string> SearchUserHasNewAsync(string UserName, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserDataTable", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserDataTableResponse")]
        string SearchUserDataTable(string UserID, string UserName, string ActiveStatus, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserDataTable", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserDataTableResponse")]
        System.Threading.Tasks.Task<string> SearchUserDataTableAsync(string UserID, string UserName, string ActiveStatus, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertToUserInformationNew", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertToUserInformationNewResponse")]
        string InsertToUserInformationNew(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertToUserInformationNew", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertToUserInformationNewResponse")]
        System.Threading.Tasks.Task<string> InsertToUserInformationNewAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertToUserRoll", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertToUserRollResponse")]
        string InsertToUserRoll(string userRollVMswcf, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertToUserRoll", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertToUserRollResponse")]
        System.Threading.Tasks.Task<string> InsertToUserRollAsync(string userRollVMswcf, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertUserLogOutByList", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertUserLogOutByListResponse")]
        string InsertUserLogOutByList(string Detailswcf, string LogOutDateTime, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertUserLogOutByList", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertUserLogOutByListResponse")]
        System.Threading.Tasks.Task<string> InsertUserLogOutByListAsync(string Detailswcf, string LogOutDateTime, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertUserInformation", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertUserInformationResponse")]
        string InsertUserInformation(
                    string UserID, 
                    string UserName, 
                    string UserPassword, 
                    string FullName, 
                    string Designation, 
                    string ContactNo, 
                    string Address, 
                    string ActiveStatus, 
                    string LastLoginDateTime, 
                    string CreatedBy, 
                    string CreatedOn, 
                    string LastModifiedBy, 
                    string LastModifiedOn, 
                    string databaseName, 
                    string connVMwcf, 
                    string IsMainSettings, 
                    string email, 
                    string NationalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertUserInformation", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertUserInformationResponse")]
        System.Threading.Tasks.Task<string> InsertUserInformationAsync(
                    string UserID, 
                    string UserName, 
                    string UserPassword, 
                    string FullName, 
                    string Designation, 
                    string ContactNo, 
                    string Address, 
                    string ActiveStatus, 
                    string LastLoginDateTime, 
                    string CreatedBy, 
                    string CreatedOn, 
                    string LastModifiedBy, 
                    string LastModifiedOn, 
                    string databaseName, 
                    string connVMwcf, 
                    string IsMainSettings, 
                    string email, 
                    string NationalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserRoll", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserRollResponse")]
        string SearchUserRoll(string UserID, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserRoll", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserRollResponse")]
        System.Threading.Tasks.Task<string> SearchUserRollAsync(string UserID, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertUserLogOut", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertUserLogOutResponse")]
        string InsertUserLogOut(string LogID, string LogOutDateTime, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/InsertUserLogOut", ReplyAction="http://tempuri.org/IUserInformationWCF/InsertUserLogOutResponse")]
        System.Threading.Tasks.Task<string> InsertUserLogOutAsync(string LogID, string LogOutDateTime, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserLog", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserLogResponse")]
        string SearchUserLog(string ComputerLoginUserName, string SoftwareUserName, string ComputerName, string StartDate, string EndDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserLog", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserLogResponse")]
        System.Threading.Tasks.Task<string> SearchUserLogAsync(string ComputerLoginUserName, string SoftwareUserName, string ComputerName, string StartDate, string EndDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserHas", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserHasResponse")]
        string SearchUserHas(string UserName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserInformationWCF/SearchUserHas", ReplyAction="http://tempuri.org/IUserInformationWCF/SearchUserHasResponse")]
        System.Threading.Tasks.Task<string> SearchUserHasAsync(string UserName, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserInformationWCFChannel : VATDesktop.Repo.UserInformationWCF.IUserInformationWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserInformationWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.UserInformationWCF.IUserInformationWCF>, VATDesktop.Repo.UserInformationWCF.IUserInformationWCF {
        
        public UserInformationWCFClient() {
        }
        
        public UserInformationWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserInformationWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserInformationWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserInformationWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string UpdateUserPasswordNew(string UserName, string UserPassword, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf) {
            return base.Channel.UpdateUserPasswordNew(UserName, UserPassword, LastModifiedBy, LastModifiedOn, databaseName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUserPasswordNewAsync(string UserName, string UserPassword, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf) {
            return base.Channel.UpdateUserPasswordNewAsync(UserName, UserPassword, LastModifiedBy, LastModifiedOn, databaseName, connVMwcf);
        }
        
        public string UpdateUserInformation(string UserID, string UserName, string FullName, string Designation, string ContactNo, string Address, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf, string IsMainSettings, string nationalId, string email) {
            return base.Channel.UpdateUserInformation(UserID, UserName, FullName, Designation, ContactNo, Address, ActiveStatus, LastModifiedBy, LastModifiedOn, databaseName, connVMwcf, IsMainSettings, nationalId, email);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUserInformationAsync(string UserID, string UserName, string FullName, string Designation, string ContactNo, string Address, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string databaseName, string connVMwcf, string IsMainSettings, string nationalId, string email) {
            return base.Channel.UpdateUserInformationAsync(UserID, UserName, FullName, Designation, ContactNo, Address, ActiveStatus, LastModifiedBy, LastModifiedOn, databaseName, connVMwcf, IsMainSettings, nationalId, email);
        }
        
        public string DropDown(string connVMwcf) {
            return base.Channel.DropDown(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DropDownAsync(string connVMwcf) {
            return base.Channel.DropDownAsync(connVMwcf);
        }
        
        public string GetExcelData(string idswcf, string connVMwcf) {
            return base.Channel.GetExcelData(idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetExcelDataAsync(string idswcf, string connVMwcf) {
            return base.Channel.GetExcelDataAsync(idswcf, connVMwcf);
        }
        
        public string SelectForLogin(string Logvmwcf, string connVMwcf) {
            return base.Channel.SelectForLogin(Logvmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectForLoginAsync(string Logvmwcf, string connVMwcf) {
            return base.Channel.SelectForLoginAsync(Logvmwcf, connVMwcf);
        }
        
        public string SearchUserHasNew(string UserName, string databaseName, string connVMwcf) {
            return base.Channel.SearchUserHasNew(UserName, databaseName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserHasNewAsync(string UserName, string databaseName, string connVMwcf) {
            return base.Channel.SearchUserHasNewAsync(UserName, databaseName, connVMwcf);
        }
        
        public string SearchUserDataTable(string UserID, string UserName, string ActiveStatus, string databaseName, string connVMwcf) {
            return base.Channel.SearchUserDataTable(UserID, UserName, ActiveStatus, databaseName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserDataTableAsync(string UserID, string UserName, string ActiveStatus, string databaseName, string connVMwcf) {
            return base.Channel.SearchUserDataTableAsync(UserID, UserName, ActiveStatus, databaseName, connVMwcf);
        }
        
        public string InsertToUserInformationNew(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToUserInformationNew(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToUserInformationNewAsync(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToUserInformationNewAsync(vmwcf, connVMwcf);
        }
        
        public string InsertToUserRoll(string userRollVMswcf, string databaseName, string connVMwcf) {
            return base.Channel.InsertToUserRoll(userRollVMswcf, databaseName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToUserRollAsync(string userRollVMswcf, string databaseName, string connVMwcf) {
            return base.Channel.InsertToUserRollAsync(userRollVMswcf, databaseName, connVMwcf);
        }
        
        public string InsertUserLogOutByList(string Detailswcf, string LogOutDateTime, string connVMwcf) {
            return base.Channel.InsertUserLogOutByList(Detailswcf, LogOutDateTime, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserLogOutByListAsync(string Detailswcf, string LogOutDateTime, string connVMwcf) {
            return base.Channel.InsertUserLogOutByListAsync(Detailswcf, LogOutDateTime, connVMwcf);
        }
        
        public string InsertUserInformation(
                    string UserID, 
                    string UserName, 
                    string UserPassword, 
                    string FullName, 
                    string Designation, 
                    string ContactNo, 
                    string Address, 
                    string ActiveStatus, 
                    string LastLoginDateTime, 
                    string CreatedBy, 
                    string CreatedOn, 
                    string LastModifiedBy, 
                    string LastModifiedOn, 
                    string databaseName, 
                    string connVMwcf, 
                    string IsMainSettings, 
                    string email, 
                    string NationalId) {
            return base.Channel.InsertUserInformation(UserID, UserName, UserPassword, FullName, Designation, ContactNo, Address, ActiveStatus, LastLoginDateTime, CreatedBy, CreatedOn, LastModifiedBy, LastModifiedOn, databaseName, connVMwcf, IsMainSettings, email, NationalId);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserInformationAsync(
                    string UserID, 
                    string UserName, 
                    string UserPassword, 
                    string FullName, 
                    string Designation, 
                    string ContactNo, 
                    string Address, 
                    string ActiveStatus, 
                    string LastLoginDateTime, 
                    string CreatedBy, 
                    string CreatedOn, 
                    string LastModifiedBy, 
                    string LastModifiedOn, 
                    string databaseName, 
                    string connVMwcf, 
                    string IsMainSettings, 
                    string email, 
                    string NationalId) {
            return base.Channel.InsertUserInformationAsync(UserID, UserName, UserPassword, FullName, Designation, ContactNo, Address, ActiveStatus, LastLoginDateTime, CreatedBy, CreatedOn, LastModifiedBy, LastModifiedOn, databaseName, connVMwcf, IsMainSettings, email, NationalId);
        }
        
        public string SearchUserRoll(string UserID, string connVMwcf) {
            return base.Channel.SearchUserRoll(UserID, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserRollAsync(string UserID, string connVMwcf) {
            return base.Channel.SearchUserRollAsync(UserID, connVMwcf);
        }
        
        public string InsertUserLogOut(string LogID, string LogOutDateTime, string connVMwcf) {
            return base.Channel.InsertUserLogOut(LogID, LogOutDateTime, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserLogOutAsync(string LogID, string LogOutDateTime, string connVMwcf) {
            return base.Channel.InsertUserLogOutAsync(LogID, LogOutDateTime, connVMwcf);
        }
        
        public string SearchUserLog(string ComputerLoginUserName, string SoftwareUserName, string ComputerName, string StartDate, string EndDate, string connVMwcf) {
            return base.Channel.SearchUserLog(ComputerLoginUserName, SoftwareUserName, ComputerName, StartDate, EndDate, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserLogAsync(string ComputerLoginUserName, string SoftwareUserName, string ComputerName, string StartDate, string EndDate, string connVMwcf) {
            return base.Channel.SearchUserLogAsync(ComputerLoginUserName, SoftwareUserName, ComputerName, StartDate, EndDate, connVMwcf);
        }
        
        public string SearchUserHas(string UserName, string connVMwcf) {
            return base.Channel.SearchUserHas(UserName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserHasAsync(string UserName, string connVMwcf) {
            return base.Channel.SearchUserHasAsync(UserName, connVMwcf);
        }
    }
}
