//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.CommonWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommonWCF.ICommonWCF")]
    public interface ICommonWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DoWork", ReplyAction="http://tempuri.org/ICommonWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DoWork", ReplyAction="http://tempuri.org/ICommonWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SettingsDesktop", ReplyAction="http://tempuri.org/ICommonWCF/SettingsDesktopResponse")]
        string SettingsDesktop(string SettingGroup, string SettingName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SettingsDesktop", ReplyAction="http://tempuri.org/ICommonWCF/SettingsDesktopResponse")]
        System.Threading.Tasks.Task<string> SettingsDesktopAsync(string SettingGroup, string SettingName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DataAlreadyUsed", ReplyAction="http://tempuri.org/ICommonWCF/DataAlreadyUsedResponse")]
        string DataAlreadyUsed(string CompareTable, string CompareField, string CompareWith, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DataAlreadyUsed", ReplyAction="http://tempuri.org/ICommonWCF/DataAlreadyUsedResponse")]
        System.Threading.Tasks.Task<string> DataAlreadyUsedAsync(string CompareTable, string CompareField, string CompareWith, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SettingValue", ReplyAction="http://tempuri.org/ICommonWCF/SettingValueResponse")]
        string SettingValue(string settingGroup, string settingName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SettingValue", ReplyAction="http://tempuri.org/ICommonWCF/SettingValueResponse")]
        System.Threading.Tasks.Task<string> SettingValueAsync(string settingGroup, string settingName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/Settings", ReplyAction="http://tempuri.org/ICommonWCF/SettingsResponse")]
        string Settings(string SettingGroup, string SettingName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/Settings", ReplyAction="http://tempuri.org/ICommonWCF/SettingsResponse")]
        System.Threading.Tasks.Task<string> SettingsAsync(string SettingGroup, string SettingName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/MultipleSearch", ReplyAction="http://tempuri.org/ICommonWCF/MultipleSearchResponse")]
        string MultipleSearch(string tableName, string SearchValue, string ConditionField, string FixedConditions, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/MultipleSearch", ReplyAction="http://tempuri.org/ICommonWCF/MultipleSearchResponse")]
        System.Threading.Tasks.Task<string> MultipleSearchAsync(string tableName, string SearchValue, string ConditionField, string FixedConditions, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/MultipleSearchSQL", ReplyAction="http://tempuri.org/ICommonWCF/MultipleSearchSQLResponse")]
        string MultipleSearchSQL(string sqlText, string SearchValue, string ConditionField, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/MultipleSearchSQL", ReplyAction="http://tempuri.org/ICommonWCF/MultipleSearchSQLResponse")]
        System.Threading.Tasks.Task<string> MultipleSearchSQLAsync(string sqlText, string SearchValue, string ConditionField, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/NextId", ReplyAction="http://tempuri.org/ICommonWCF/NextIdResponse")]
        string NextId(string tableName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/NextId", ReplyAction="http://tempuri.org/ICommonWCF/NextIdResponse")]
        System.Threading.Tasks.Task<string> NextIdAsync(string tableName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/BulkInsert", ReplyAction="http://tempuri.org/ICommonWCF/BulkInsertResponse")]
        string BulkInsert(string tableName, string datawcf, int batchSize, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/BulkInsert", ReplyAction="http://tempuri.org/ICommonWCF/BulkInsertResponse")]
        System.Threading.Tasks.Task<string> BulkInsertAsync(string tableName, string datawcf, int batchSize, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GenericSelection", ReplyAction="http://tempuri.org/ICommonWCF/GenericSelectionResponse")]
        string GenericSelection(string tableName, string databaseName, string cFieldswcf, string cValswcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GenericSelection", ReplyAction="http://tempuri.org/ICommonWCF/GenericSelectionResponse")]
        System.Threading.Tasks.Task<string> GenericSelectionAsync(string tableName, string databaseName, string cFieldswcf, string cValswcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GenericSelectionNotSync", ReplyAction="http://tempuri.org/ICommonWCF/GenericSelectionNotSyncResponse")]
        string GenericSelectionNotSync(string tableName, string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GenericSelectionNotSync", ReplyAction="http://tempuri.org/ICommonWCF/GenericSelectionNotSyncResponse")]
        System.Threading.Tasks.Task<string> GenericSelectionNotSyncAsync(string tableName, string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SearchTransanctionHistoryNew", ReplyAction="http://tempuri.org/ICommonWCF/SearchTransanctionHistoryNewResponse")]
        string SearchTransanctionHistoryNew(string TransactionNo, string TransactionType, string TransactionDateFrom, string TransactionDateTo, string ProductName, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SearchTransanctionHistoryNew", ReplyAction="http://tempuri.org/ICommonWCF/SearchTransanctionHistoryNewResponse")]
        System.Threading.Tasks.Task<string> SearchTransanctionHistoryNewAsync(string TransactionNo, string TransactionType, string TransactionDateFrom, string TransactionDateTo, string ProductName, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/ExecuteQuerySelect", ReplyAction="http://tempuri.org/ICommonWCF/ExecuteQuerySelectResponse")]
        string ExecuteQuerySelect(string sqlText, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/ExecuteQuerySelect", ReplyAction="http://tempuri.org/ICommonWCF/ExecuteQuerySelectResponse")]
        System.Threading.Tasks.Task<string> ExecuteQuerySelectAsync(string sqlText, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SuperAdministrator", ReplyAction="http://tempuri.org/ICommonWCF/SuperAdministratorResponse")]
        string SuperAdministrator();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SuperAdministrator", ReplyAction="http://tempuri.org/ICommonWCF/SuperAdministratorResponse")]
        System.Threading.Tasks.Task<string> SuperAdministratorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/CompanyList", ReplyAction="http://tempuri.org/ICommonWCF/CompanyListResponse")]
        string CompanyList(string ActiveStatus, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/CompanyList", ReplyAction="http://tempuri.org/ICommonWCF/CompanyListResponse")]
        System.Threading.Tasks.Task<string> CompanyListAsync(string ActiveStatus, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SuperDBInformation", ReplyAction="http://tempuri.org/ICommonWCF/SuperDBInformationResponse")]
        string SuperDBInformation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SuperDBInformation", ReplyAction="http://tempuri.org/ICommonWCF/SuperDBInformationResponse")]
        System.Threading.Tasks.Task<string> SuperDBInformationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/UpdateIsVATComplete", ReplyAction="http://tempuri.org/ICommonWCF/UpdateIsVATCompleteResponse")]
        string UpdateIsVATComplete(string TableName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/UpdateIsVATComplete", ReplyAction="http://tempuri.org/ICommonWCF/UpdateIsVATCompleteResponse")]
        System.Threading.Tasks.Task<string> UpdateIsVATCompleteAsync(string TableName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/BomSynchronize", ReplyAction="http://tempuri.org/ICommonWCF/BomSynchronizeResponse")]
        string BomSynchronize(string dtBOMswcf, string dtBOMRawswcf, string dtBOMOverheadwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/BomSynchronize", ReplyAction="http://tempuri.org/ICommonWCF/BomSynchronizeResponse")]
        System.Threading.Tasks.Task<string> BomSynchronizeAsync(string dtBOMswcf, string dtBOMRawswcf, string dtBOMOverheadwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/TransactionSync", ReplyAction="http://tempuri.org/ICommonWCF/TransactionSyncResponse")]
        string TransactionSync(string TableName, string dswcf, string loadedDatabase, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/TransactionSync", ReplyAction="http://tempuri.org/ICommonWCF/TransactionSyncResponse")]
        System.Threading.Tasks.Task<string> TransactionSyncAsync(string TableName, string dswcf, string loadedDatabase, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/NewDBCreate", ReplyAction="http://tempuri.org/ICommonWCF/NewDBCreateResponse")]
        string NewDBCreate(string companyProfileswcf, string databaseName, string fiscalDetailswcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/NewDBCreate", ReplyAction="http://tempuri.org/ICommonWCF/NewDBCreateResponse")]
        System.Threading.Tasks.Task<string> NewDBCreateAsync(string companyProfileswcf, string databaseName, string fiscalDetailswcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SuperAdministratorUpdate", ReplyAction="http://tempuri.org/ICommonWCF/SuperAdministratorUpdateResponse")]
        string SuperAdministratorUpdate(string miki, string mouse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SuperAdministratorUpdate", ReplyAction="http://tempuri.org/ICommonWCF/SuperAdministratorUpdateResponse")]
        System.Threading.Tasks.Task<string> SuperAdministratorUpdateAsync(string miki, string mouse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DatabaseInformationUpdate", ReplyAction="http://tempuri.org/ICommonWCF/DatabaseInformationUpdateResponse")]
        string DatabaseInformationUpdate(string Tom, string jary, string mini, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DatabaseInformationUpdate", ReplyAction="http://tempuri.org/ICommonWCF/DatabaseInformationUpdateResponse")]
        System.Threading.Tasks.Task<string> DatabaseInformationUpdateAsync(string Tom, string jary, string mini, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/ExecuteQuery", ReplyAction="http://tempuri.org/ICommonWCF/ExecuteQueryResponse")]
        string ExecuteQuery(string sqlText, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/ExecuteQuery", ReplyAction="http://tempuri.org/ICommonWCF/ExecuteQueryResponse")]
        System.Threading.Tasks.Task<string> ExecuteQueryAsync(string sqlText, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SaveTempTest", ReplyAction="http://tempuri.org/ICommonWCF/SaveTempTestResponse")]
        string SaveTempTest(string vmswcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SaveTempTest", ReplyAction="http://tempuri.org/ICommonWCF/SaveTempTestResponse")]
        System.Threading.Tasks.Task<string> SaveTempTestAsync(string vmswcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GetHardwareID", ReplyAction="http://tempuri.org/ICommonWCF/GetHardwareIDResponse")]
        string GetHardwareID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GetHardwareID", ReplyAction="http://tempuri.org/ICommonWCF/GetHardwareIDResponse")]
        System.Threading.Tasks.Task<string> GetHardwareIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GetServerHardwareId", ReplyAction="http://tempuri.org/ICommonWCF/GetServerHardwareIdResponse")]
        string GetServerHardwareId(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/GetServerHardwareId", ReplyAction="http://tempuri.org/ICommonWCF/GetServerHardwareIdResponse")]
        System.Threading.Tasks.Task<string> GetServerHardwareIdAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/ServerDateTime", ReplyAction="http://tempuri.org/ICommonWCF/ServerDateTimeResponse")]
        string ServerDateTime(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/ServerDateTime", ReplyAction="http://tempuri.org/ICommonWCF/ServerDateTimeResponse")]
        System.Threading.Tasks.Task<string> ServerDateTimeAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/TestConnection", ReplyAction="http://tempuri.org/ICommonWCF/TestConnectionResponse")]
        string TestConnection(string userName, string Password, string Datasource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/TestConnection", ReplyAction="http://tempuri.org/ICommonWCF/TestConnectionResponse")]
        System.Threading.Tasks.Task<string> TestConnectionAsync(string userName, string Password, string Datasource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/UpdateSystemData", ReplyAction="http://tempuri.org/ICommonWCF/UpdateSystemDataResponse")]
        string UpdateSystemData(string userName, string password, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/UpdateSystemData", ReplyAction="http://tempuri.org/ICommonWCF/UpdateSystemDataResponse")]
        System.Threading.Tasks.Task<string> UpdateSystemDataAsync(string userName, string password, string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SettingChange", ReplyAction="http://tempuri.org/ICommonWCF/SettingChangeResponse")]
        void SettingChange();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/SettingChange", ReplyAction="http://tempuri.org/ICommonWCF/SettingChangeResponse")]
        System.Threading.Tasks.Task SettingChangeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/AddBranchInfo", ReplyAction="http://tempuri.org/ICommonWCF/AddBranchInfoResponse")]
        void AddBranchInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/AddBranchInfo", ReplyAction="http://tempuri.org/ICommonWCF/AddBranchInfoResponse")]
        System.Threading.Tasks.Task AddBranchInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DataAlreadyUsedWithoutThis", ReplyAction="http://tempuri.org/ICommonWCF/DataAlreadyUsedWithoutThisResponse")]
        string DataAlreadyUsedWithoutThis(string CompareTable, string CompareField, string CompareWith, string IdField, string IdValue, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommonWCF/DataAlreadyUsedWithoutThis", ReplyAction="http://tempuri.org/ICommonWCF/DataAlreadyUsedWithoutThisResponse")]
        System.Threading.Tasks.Task<string> DataAlreadyUsedWithoutThisAsync(string CompareTable, string CompareField, string CompareWith, string IdField, string IdValue, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommonWCFChannel : VATDesktop.Repo.CommonWCF.ICommonWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommonWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.CommonWCF.ICommonWCF>, VATDesktop.Repo.CommonWCF.ICommonWCF {
        
        public CommonWCFClient() {
        }
        
        public CommonWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommonWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SettingsDesktop(string SettingGroup, string SettingName) {
            return base.Channel.SettingsDesktop(SettingGroup, SettingName);
        }
        
        public System.Threading.Tasks.Task<string> SettingsDesktopAsync(string SettingGroup, string SettingName) {
            return base.Channel.SettingsDesktopAsync(SettingGroup, SettingName);
        }
        
        public string DataAlreadyUsed(string CompareTable, string CompareField, string CompareWith, string connVMwcf) {
            return base.Channel.DataAlreadyUsed(CompareTable, CompareField, CompareWith, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DataAlreadyUsedAsync(string CompareTable, string CompareField, string CompareWith, string connVMwcf) {
            return base.Channel.DataAlreadyUsedAsync(CompareTable, CompareField, CompareWith, connVMwcf);
        }
        
        public string SettingValue(string settingGroup, string settingName, string connVMwcf) {
            return base.Channel.SettingValue(settingGroup, settingName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SettingValueAsync(string settingGroup, string settingName, string connVMwcf) {
            return base.Channel.SettingValueAsync(settingGroup, settingName, connVMwcf);
        }
        
        public string Settings(string SettingGroup, string SettingName, string connVMwcf) {
            return base.Channel.Settings(SettingGroup, SettingName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SettingsAsync(string SettingGroup, string SettingName, string connVMwcf) {
            return base.Channel.SettingsAsync(SettingGroup, SettingName, connVMwcf);
        }
        
        public string MultipleSearch(string tableName, string SearchValue, string ConditionField, string FixedConditions, string connVMwcf) {
            return base.Channel.MultipleSearch(tableName, SearchValue, ConditionField, FixedConditions, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> MultipleSearchAsync(string tableName, string SearchValue, string ConditionField, string FixedConditions, string connVMwcf) {
            return base.Channel.MultipleSearchAsync(tableName, SearchValue, ConditionField, FixedConditions, connVMwcf);
        }
        
        public string MultipleSearchSQL(string sqlText, string SearchValue, string ConditionField, string connVMwcf) {
            return base.Channel.MultipleSearchSQL(sqlText, SearchValue, ConditionField, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> MultipleSearchSQLAsync(string sqlText, string SearchValue, string ConditionField, string connVMwcf) {
            return base.Channel.MultipleSearchSQLAsync(sqlText, SearchValue, ConditionField, connVMwcf);
        }
        
        public string NextId(string tableName, string connVMwcf) {
            return base.Channel.NextId(tableName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> NextIdAsync(string tableName, string connVMwcf) {
            return base.Channel.NextIdAsync(tableName, connVMwcf);
        }
        
        public string BulkInsert(string tableName, string datawcf, int batchSize, string connVMwcf) {
            return base.Channel.BulkInsert(tableName, datawcf, batchSize, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> BulkInsertAsync(string tableName, string datawcf, int batchSize, string connVMwcf) {
            return base.Channel.BulkInsertAsync(tableName, datawcf, batchSize, connVMwcf);
        }
        
        public string GenericSelection(string tableName, string databaseName, string cFieldswcf, string cValswcf) {
            return base.Channel.GenericSelection(tableName, databaseName, cFieldswcf, cValswcf);
        }
        
        public System.Threading.Tasks.Task<string> GenericSelectionAsync(string tableName, string databaseName, string cFieldswcf, string cValswcf) {
            return base.Channel.GenericSelectionAsync(tableName, databaseName, cFieldswcf, cValswcf);
        }
        
        public string GenericSelectionNotSync(string tableName, string databaseName) {
            return base.Channel.GenericSelectionNotSync(tableName, databaseName);
        }
        
        public System.Threading.Tasks.Task<string> GenericSelectionNotSyncAsync(string tableName, string databaseName) {
            return base.Channel.GenericSelectionNotSyncAsync(tableName, databaseName);
        }
        
        public string SearchTransanctionHistoryNew(string TransactionNo, string TransactionType, string TransactionDateFrom, string TransactionDateTo, string ProductName, string databaseName, string connVMwcf) {
            return base.Channel.SearchTransanctionHistoryNew(TransactionNo, TransactionType, TransactionDateFrom, TransactionDateTo, ProductName, databaseName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchTransanctionHistoryNewAsync(string TransactionNo, string TransactionType, string TransactionDateFrom, string TransactionDateTo, string ProductName, string databaseName, string connVMwcf) {
            return base.Channel.SearchTransanctionHistoryNewAsync(TransactionNo, TransactionType, TransactionDateFrom, TransactionDateTo, ProductName, databaseName, connVMwcf);
        }
        
        public string ExecuteQuerySelect(string sqlText, bool Dt, string connVMwcf) {
            return base.Channel.ExecuteQuerySelect(sqlText, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ExecuteQuerySelectAsync(string sqlText, bool Dt, string connVMwcf) {
            return base.Channel.ExecuteQuerySelectAsync(sqlText, Dt, connVMwcf);
        }
        
        public string SuperAdministrator() {
            return base.Channel.SuperAdministrator();
        }
        
        public System.Threading.Tasks.Task<string> SuperAdministratorAsync() {
            return base.Channel.SuperAdministratorAsync();
        }
        
        public string CompanyList(string ActiveStatus, string connVMwcf) {
            return base.Channel.CompanyList(ActiveStatus, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> CompanyListAsync(string ActiveStatus, string connVMwcf) {
            return base.Channel.CompanyListAsync(ActiveStatus, connVMwcf);
        }
        
        public string SuperDBInformation() {
            return base.Channel.SuperDBInformation();
        }
        
        public System.Threading.Tasks.Task<string> SuperDBInformationAsync() {
            return base.Channel.SuperDBInformationAsync();
        }
        
        public string UpdateIsVATComplete(string TableName, string connVMwcf) {
            return base.Channel.UpdateIsVATComplete(TableName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateIsVATCompleteAsync(string TableName, string connVMwcf) {
            return base.Channel.UpdateIsVATCompleteAsync(TableName, connVMwcf);
        }
        
        public string BomSynchronize(string dtBOMswcf, string dtBOMRawswcf, string dtBOMOverheadwcf, string connVMwcf) {
            return base.Channel.BomSynchronize(dtBOMswcf, dtBOMRawswcf, dtBOMOverheadwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> BomSynchronizeAsync(string dtBOMswcf, string dtBOMRawswcf, string dtBOMOverheadwcf, string connVMwcf) {
            return base.Channel.BomSynchronizeAsync(dtBOMswcf, dtBOMRawswcf, dtBOMOverheadwcf, connVMwcf);
        }
        
        public string TransactionSync(string TableName, string dswcf, string loadedDatabase, string connVMwcf) {
            return base.Channel.TransactionSync(TableName, dswcf, loadedDatabase, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> TransactionSyncAsync(string TableName, string dswcf, string loadedDatabase, string connVMwcf) {
            return base.Channel.TransactionSyncAsync(TableName, dswcf, loadedDatabase, connVMwcf);
        }
        
        public string NewDBCreate(string companyProfileswcf, string databaseName, string fiscalDetailswcf) {
            return base.Channel.NewDBCreate(companyProfileswcf, databaseName, fiscalDetailswcf);
        }
        
        public System.Threading.Tasks.Task<string> NewDBCreateAsync(string companyProfileswcf, string databaseName, string fiscalDetailswcf) {
            return base.Channel.NewDBCreateAsync(companyProfileswcf, databaseName, fiscalDetailswcf);
        }
        
        public string SuperAdministratorUpdate(string miki, string mouse) {
            return base.Channel.SuperAdministratorUpdate(miki, mouse);
        }
        
        public System.Threading.Tasks.Task<string> SuperAdministratorUpdateAsync(string miki, string mouse) {
            return base.Channel.SuperAdministratorUpdateAsync(miki, mouse);
        }
        
        public string DatabaseInformationUpdate(string Tom, string jary, string mini, string connVMwcf) {
            return base.Channel.DatabaseInformationUpdate(Tom, jary, mini, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DatabaseInformationUpdateAsync(string Tom, string jary, string mini, string connVMwcf) {
            return base.Channel.DatabaseInformationUpdateAsync(Tom, jary, mini, connVMwcf);
        }
        
        public string ExecuteQuery(string sqlText, string connVMwcf) {
            return base.Channel.ExecuteQuery(sqlText, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ExecuteQueryAsync(string sqlText, string connVMwcf) {
            return base.Channel.ExecuteQueryAsync(sqlText, connVMwcf);
        }
        
        public string SaveTempTest(string vmswcf) {
            return base.Channel.SaveTempTest(vmswcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveTempTestAsync(string vmswcf) {
            return base.Channel.SaveTempTestAsync(vmswcf);
        }
        
        public string GetHardwareID() {
            return base.Channel.GetHardwareID();
        }
        
        public System.Threading.Tasks.Task<string> GetHardwareIDAsync() {
            return base.Channel.GetHardwareIDAsync();
        }
        
        public string GetServerHardwareId(string connVMwcf) {
            return base.Channel.GetServerHardwareId(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetServerHardwareIdAsync(string connVMwcf) {
            return base.Channel.GetServerHardwareIdAsync(connVMwcf);
        }
        
        public string ServerDateTime(string connVMwcf) {
            return base.Channel.ServerDateTime(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ServerDateTimeAsync(string connVMwcf) {
            return base.Channel.ServerDateTimeAsync(connVMwcf);
        }
        
        public string TestConnection(string userName, string Password, string Datasource) {
            return base.Channel.TestConnection(userName, Password, Datasource);
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionAsync(string userName, string Password, string Datasource) {
            return base.Channel.TestConnectionAsync(userName, Password, Datasource);
        }
        
        public string UpdateSystemData(string userName, string password, string source) {
            return base.Channel.UpdateSystemData(userName, password, source);
        }
        
        public System.Threading.Tasks.Task<string> UpdateSystemDataAsync(string userName, string password, string source) {
            return base.Channel.UpdateSystemDataAsync(userName, password, source);
        }
        
        public void SettingChange() {
            base.Channel.SettingChange();
        }
        
        public System.Threading.Tasks.Task SettingChangeAsync() {
            return base.Channel.SettingChangeAsync();
        }
        
        public void AddBranchInfo() {
            base.Channel.AddBranchInfo();
        }
        
        public System.Threading.Tasks.Task AddBranchInfoAsync() {
            return base.Channel.AddBranchInfoAsync();
        }
        
        public string DataAlreadyUsedWithoutThis(string CompareTable, string CompareField, string CompareWith, string IdField, string IdValue, string connVMwcf) {
            return base.Channel.DataAlreadyUsedWithoutThis(CompareTable, CompareField, CompareWith, IdField, IdValue, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DataAlreadyUsedWithoutThisAsync(string CompareTable, string CompareField, string CompareWith, string IdField, string IdValue, string connVMwcf) {
            return base.Channel.DataAlreadyUsedWithoutThisAsync(CompareTable, CompareField, CompareWith, IdField, IdValue, connVMwcf);
        }
    }
}
