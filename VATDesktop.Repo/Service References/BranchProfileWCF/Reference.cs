//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.BranchProfileWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BranchProfileWCF.IBranchProfileWCF")]
    public interface IBranchProfileWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/DoWork", ReplyAction="http://tempuri.org/IBranchProfileWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/DoWork", ReplyAction="http://tempuri.org/IBranchProfileWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/SelectAll", ReplyAction="http://tempuri.org/IBranchProfileWCF/SelectAllResponse")]
        string SelectAll(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/SelectAll", ReplyAction="http://tempuri.org/IBranchProfileWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/Delete", ReplyAction="http://tempuri.org/IBranchProfileWCF/DeleteResponse")]
        string Delete(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/Delete", ReplyAction="http://tempuri.org/IBranchProfileWCF/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/DropDown", ReplyAction="http://tempuri.org/IBranchProfileWCF/DropDownResponse")]
        string DropDown(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/DropDown", ReplyAction="http://tempuri.org/IBranchProfileWCF/DropDownResponse")]
        System.Threading.Tasks.Task<string> DropDownAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/InsertToBranchProfileNew", ReplyAction="http://tempuri.org/IBranchProfileWCF/InsertToBranchProfileNewResponse")]
        string InsertToBranchProfileNew(string vmwcf, bool BranchProfileAutoSave, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/InsertToBranchProfileNew", ReplyAction="http://tempuri.org/IBranchProfileWCF/InsertToBranchProfileNewResponse")]
        System.Threading.Tasks.Task<string> InsertToBranchProfileNewAsync(string vmwcf, bool BranchProfileAutoSave, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/SelectAllList", ReplyAction="http://tempuri.org/IBranchProfileWCF/SelectAllListResponse")]
        string SelectAllList(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/SelectAllList", ReplyAction="http://tempuri.org/IBranchProfileWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/UpdateToBranchProfileNew", ReplyAction="http://tempuri.org/IBranchProfileWCF/UpdateToBranchProfileNewResponse")]
        string UpdateToBranchProfileNew(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBranchProfileWCF/UpdateToBranchProfileNew", ReplyAction="http://tempuri.org/IBranchProfileWCF/UpdateToBranchProfileNewResponse")]
        System.Threading.Tasks.Task<string> UpdateToBranchProfileNewAsync(string vmwcf, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBranchProfileWCFChannel : VATDesktop.Repo.BranchProfileWCF.IBranchProfileWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BranchProfileWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.BranchProfileWCF.IBranchProfileWCF>, VATDesktop.Repo.BranchProfileWCF.IBranchProfileWCF {
        
        public BranchProfileWCFClient() {
        }
        
        public BranchProfileWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BranchProfileWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BranchProfileWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BranchProfileWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SelectAll(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public string Delete(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.Delete(vmwcf, idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.DeleteAsync(vmwcf, idswcf, connVMwcf);
        }
        
        public string DropDown(string connVMwcf) {
            return base.Channel.DropDown(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DropDownAsync(string connVMwcf) {
            return base.Channel.DropDownAsync(connVMwcf);
        }
        
        public string InsertToBranchProfileNew(string vmwcf, bool BranchProfileAutoSave, string connVMwcf) {
            return base.Channel.InsertToBranchProfileNew(vmwcf, BranchProfileAutoSave, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToBranchProfileNewAsync(string vmwcf, bool BranchProfileAutoSave, string connVMwcf) {
            return base.Channel.InsertToBranchProfileNewAsync(vmwcf, BranchProfileAutoSave, connVMwcf);
        }
        
        public string SelectAllList(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string UpdateToBranchProfileNew(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateToBranchProfileNew(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateToBranchProfileNewAsync(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateToBranchProfileNewAsync(vmwcf, connVMwcf);
        }
    }
}
