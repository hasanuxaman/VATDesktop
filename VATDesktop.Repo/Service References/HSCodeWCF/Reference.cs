//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.HSCodeWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HSCodeWCF.IHSCodeWCF")]
    public interface IHSCodeWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/DoWork", ReplyAction="http://tempuri.org/IHSCodeWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/DoWork", ReplyAction="http://tempuri.org/IHSCodeWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/Delete", ReplyAction="http://tempuri.org/IHSCodeWCF/DeleteResponse")]
        string Delete(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/Delete", ReplyAction="http://tempuri.org/IHSCodeWCF/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/GetExcelData", ReplyAction="http://tempuri.org/IHSCodeWCF/GetExcelDataResponse")]
        string GetExcelData(string HSCodewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/GetExcelData", ReplyAction="http://tempuri.org/IHSCodeWCF/GetExcelDataResponse")]
        System.Threading.Tasks.Task<string> GetExcelDataAsync(string HSCodewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/InsertfromExcel", ReplyAction="http://tempuri.org/IHSCodeWCF/InsertfromExcelResponse")]
        string InsertfromExcel(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/InsertfromExcel", ReplyAction="http://tempuri.org/IHSCodeWCF/InsertfromExcelResponse")]
        System.Threading.Tasks.Task<string> InsertfromExcelAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/InsertToHSCode", ReplyAction="http://tempuri.org/IHSCodeWCF/InsertToHSCodeResponse")]
        string InsertToHSCode(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/InsertToHSCode", ReplyAction="http://tempuri.org/IHSCodeWCF/InsertToHSCodeResponse")]
        System.Threading.Tasks.Task<string> InsertToHSCodeAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/SelectAll", ReplyAction="http://tempuri.org/IHSCodeWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/SelectAll", ReplyAction="http://tempuri.org/IHSCodeWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/SelectAllList", ReplyAction="http://tempuri.org/IHSCodeWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/SelectAllList", ReplyAction="http://tempuri.org/IHSCodeWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/UpdateHSCode", ReplyAction="http://tempuri.org/IHSCodeWCF/UpdateHSCodeResponse")]
        string UpdateHSCode(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHSCodeWCF/UpdateHSCode", ReplyAction="http://tempuri.org/IHSCodeWCF/UpdateHSCodeResponse")]
        System.Threading.Tasks.Task<string> UpdateHSCodeAsync(string vmwcf, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHSCodeWCFChannel : VATDesktop.Repo.HSCodeWCF.IHSCodeWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HSCodeWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.HSCodeWCF.IHSCodeWCF>, VATDesktop.Repo.HSCodeWCF.IHSCodeWCF {
        
        public HSCodeWCFClient() {
        }
        
        public HSCodeWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HSCodeWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HSCodeWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HSCodeWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string Delete(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.Delete(vmwcf, idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.DeleteAsync(vmwcf, idswcf, connVMwcf);
        }
        
        public string GetExcelData(string HSCodewcf, string connVMwcf) {
            return base.Channel.GetExcelData(HSCodewcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetExcelDataAsync(string HSCodewcf, string connVMwcf) {
            return base.Channel.GetExcelDataAsync(HSCodewcf, connVMwcf);
        }
        
        public string InsertfromExcel(string vmwcf, string connVMwcf) {
            return base.Channel.InsertfromExcel(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertfromExcelAsync(string vmwcf, string connVMwcf) {
            return base.Channel.InsertfromExcelAsync(vmwcf, connVMwcf);
        }
        
        public string InsertToHSCode(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToHSCode(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToHSCodeAsync(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToHSCodeAsync(vmwcf, connVMwcf);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string UpdateHSCode(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateHSCode(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateHSCodeAsync(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateHSCodeAsync(vmwcf, connVMwcf);
        }
    }
}
