using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Text.RegularExpressions;
using SymphonySofttech.Utilities;
using VATViewModel.DTOs;
using System.Net;
using System.Windows.Forms;
using System.Reflection;
using Newtonsoft.Json;
using VATServer.Ordinary;
using VATServer.Interface;
using System.Text;
using System.Xml;
using Oracle.DataAccess.Client;
using VATServer.Library.Integration;

namespace VATServer.Library
{
    public class CommonDAL //: ICommon
    {
        #region Global Variables
        private const string FieldDelimeter = DBConstant.FieldDelimeter;
        private static string PassPhrase = DBConstant.PassPhrase;
        private static string EnKey = DBConstant.EnKey;
        DataTable ApiDt = new DataTable();
        private DBSQLConnection _dbsqlConnection = new DBSQLConnection();


        #endregion

        #region Update Currency

        private static string CurrencyUpdateSQL =
            @"
Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Fils',
CurrencySymbol='.?.?' where CurrencyCode='BHD'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Fils',
CurrencySymbol='?.?' where CurrencyCode='IQD'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Fils',
CurrencySymbol='? or K.D' where CurrencyCode='KWD'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Dirham',
CurrencySymbol='LD' where CurrencyCode='LYD'  
  Update Currencies set CurrencyMajor='rial', CurrencyMinor='Baisa',
CurrencySymbol='?.?.' where CurrencyCode='OMR'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Millime',
CurrencySymbol='DT' where CurrencyCode='TND'  
  Update Currencies set CurrencyMajor='d?ng', CurrencyMinor='Hào',
CurrencySymbol='.' where CurrencyCode='VND'  
  Update Currencies set CurrencyMajor='ruble', CurrencyMinor='Kopek',
CurrencySymbol='' where CurrencyCode='RUB'  
  Update Currencies set CurrencyMajor='afghani', CurrencyMinor='Pul',
CurrencySymbol='None' where CurrencyCode='AFN'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='lek', CurrencyMinor='Qindarkë',
CurrencySymbol='L' where CurrencyCode='ALL'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GBP'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GGP[N]'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Santeem',
CurrencySymbol='??' where CurrencyCode='DZD'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='kwanza', CurrencyMinor='Cêntimo',
CurrencySymbol='Kz' where CurrencyCode='AOA'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='$' where CurrencyCode='ARS'  
  Update Currencies set CurrencyMajor='dram', CurrencyMinor='Luma',
CurrencySymbol='None' where CurrencyCode='AMD'  
  Update Currencies set CurrencyMajor='florin', CurrencyMinor='Cent',
CurrencySymbol='ƒ' where CurrencyCode='AWG'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='SHP'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='AUD'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='manat', CurrencyMinor='Q?pik',
CurrencySymbol='None' where CurrencyCode='AZN'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='BSD'  
  Update Currencies set CurrencyMajor='taka', CurrencyMinor='Paisa',
CurrencySymbol='?' where CurrencyCode='BDT'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='BBD'  
  Update Currencies set CurrencyMajor='ruble', CurrencyMinor='Kapyeyka',
CurrencySymbol='Br' where CurrencyCode='BYR'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='BZD'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='BMD'  
  Update Currencies set CurrencyMajor='ngultrum', CurrencyMinor='Chetrum',
CurrencySymbol='Nu.' where CurrencyCode='BTN'  
  Update Currencies set CurrencyMajor='rupee', CurrencyMinor='Paisa',
CurrencySymbol='INR' where CurrencyCode='INR'  
  Update Currencies set CurrencyMajor='boliviano', CurrencyMinor='Centavo',
CurrencySymbol='Bs.' where CurrencyCode='BOB'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='mark', CurrencyMinor='Fening',
CurrencySymbol='KM' where CurrencyCode='BAM'  
  Update Currencies set CurrencyMajor='pula', CurrencyMinor='Thebe',
CurrencySymbol='P' where CurrencyCode='BWP'  
  Update Currencies set CurrencyMajor='real', CurrencyMinor='Centavo',
CurrencySymbol='R$' where CurrencyCode='BRL'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Sen',
CurrencySymbol='$' where CurrencyCode='BND'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='SGD'  
  Update Currencies set CurrencyMajor='lev', CurrencyMinor='Stotinka',
CurrencySymbol='??' where CurrencyCode='BGN'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='kyat', CurrencyMinor='Pya',
CurrencySymbol='Ks' where CurrencyCode='MMK'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='BIF'  
  Update Currencies set CurrencyMajor='riel', CurrencyMinor='Sen',
CurrencySymbol='?' where CurrencyCode='KHR'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XAF'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='CAD'  
  Update Currencies set CurrencyMajor='escudo', CurrencyMinor='Centavo',
CurrencySymbol=' $' where CurrencyCode='CVE'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='KYD'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XAF'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XAF'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='$' where CurrencyCode='CLP'  
  Update Currencies set CurrencyMajor='yuan', CurrencyMinor='Fen',
CurrencySymbol='¥ ' where CurrencyCode='CNY'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='AUD'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='$' where CurrencyCode='COP'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='KMF'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='CDF'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XAF'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='NZD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='colón', CurrencyMinor='Céntimo',
CurrencySymbol='¢' where CurrencyCode='CRC'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='kuna', CurrencyMinor='Lipa',
CurrencySymbol='kn' where CurrencyCode='HRK'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='$' where CurrencyCode='CUC'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='$' where CurrencyCode='CUP'  
  Update Currencies set CurrencyMajor='guilder', CurrencyMinor='Cent',
CurrencySymbol='ƒ' where CurrencyCode='ANG'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='koruna', CurrencyMinor='Halér',
CurrencySymbol='Kc' where CurrencyCode='CZK'  
  Update Currencies set CurrencyMajor='krone', CurrencyMinor='Øre',
CurrencySymbol='kr' where CurrencyCode='DKK'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='DJF'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='$' where CurrencyCode='DOP'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Piastre',
CurrencySymbol='£ ' where CurrencyCode='EGP'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XAF'  
  Update Currencies set CurrencyMajor='nakfa', CurrencyMinor='Cent',
CurrencySymbol='Nfk' where CurrencyCode='ERN'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='birr', CurrencyMinor='Santim',
CurrencySymbol='Br' where CurrencyCode='ETB'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='FKP'  
  Update Currencies set CurrencyMajor='krone', CurrencyMinor='Øre',
CurrencySymbol='kr' where CurrencyCode='DKK'  
  Update Currencies set CurrencyMajor='króna', CurrencyMinor='Oyra',
CurrencySymbol='kr' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='FJD'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XPF'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XAF'  
  Update Currencies set CurrencyMajor='dalasi', CurrencyMinor='Butut',
CurrencySymbol='D' where CurrencyCode='GMD'  
  Update Currencies set CurrencyMajor='lari', CurrencyMinor='Tetri',
CurrencySymbol='.' where CurrencyCode='GEL'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='cedi', CurrencyMinor='Pesewa',
CurrencySymbol='?' where CurrencyCode='GHS'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GIP'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='quetzal', CurrencyMinor='Centavo',
CurrencySymbol='Q' where CurrencyCode='GTQ'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GBP'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='GNF'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='GYD'  
  Update Currencies set CurrencyMajor='gourde', CurrencyMinor='Centime',
CurrencySymbol='G' where CurrencyCode='HTG'  
  Update Currencies set CurrencyMajor='lempira', CurrencyMinor='Centavo',
CurrencySymbol='L' where CurrencyCode='HNL'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='HKD'  
  Update Currencies set CurrencyMajor='forint', CurrencyMinor='Fillér',
CurrencySymbol='Ft' where CurrencyCode='HUF'  
  Update Currencies set CurrencyMajor='króna', CurrencyMinor='Eyrir',
CurrencySymbol='kr' where CurrencyCode='ISK'  
  Update Currencies set CurrencyMajor='rupee', CurrencyMinor='Paisa',
CurrencySymbol='INR' where CurrencyCode='INR'  
  Update Currencies set CurrencyMajor='rupiah', CurrencyMinor='Sen',
CurrencySymbol='Rp' where CurrencyCode='IDR'  
  Update Currencies set CurrencyMajor='rial', CurrencyMinor='Dinar',
CurrencySymbol='' where CurrencyCode='IRR'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GBP'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='IMP[N]'  
  Update Currencies set CurrencyMajor='shekel', CurrencyMinor='Agora',
CurrencySymbol='?' where CurrencyCode='ILS'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='JMD'  
  Update Currencies set CurrencyMajor='yen', CurrencyMinor='Sen',
CurrencySymbol='¥' where CurrencyCode='JPY'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GBP'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='JEP[N]'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Piastre',
CurrencySymbol='None' where CurrencyCode='JOD'  
  Update Currencies set CurrencyMajor='tenge', CurrencyMinor='Tïin',
CurrencySymbol='?' where CurrencyCode='KZT'  
  Update Currencies set CurrencyMajor='shilling', CurrencyMinor='Cent',
CurrencySymbol='Sh' where CurrencyCode='KES'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='AUD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='won', CurrencyMinor='Chon',
CurrencySymbol='?' where CurrencyCode='KPW'  
  Update Currencies set CurrencyMajor='won', CurrencyMinor='Jeon',
CurrencySymbol='?' where CurrencyCode='KRW'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='som', CurrencyMinor='Tyiyn',
CurrencySymbol='None' where CurrencyCode='KGS'  
  Update Currencies set CurrencyMajor='kip', CurrencyMinor='Att',
CurrencySymbol='? or ?N' where CurrencyCode='LAK'  
  Update Currencies set CurrencyMajor='lats', CurrencyMinor='Santims',
CurrencySymbol='Ls' where CurrencyCode='LVL'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Piastre',
CurrencySymbol='?.?' where CurrencyCode='LBP'  
  Update Currencies set CurrencyMajor='loti', CurrencyMinor='Sente',
CurrencySymbol='L' where CurrencyCode='LSL'  
  Update Currencies set CurrencyMajor='rand', CurrencyMinor='Cent',
CurrencySymbol='R' where CurrencyCode='ZAR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='LRD'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Rappen',
CurrencySymbol='Fr' where CurrencyCode='CHF'  
  Update Currencies set CurrencyMajor='litas', CurrencyMinor='Centas',
CurrencySymbol='Lt' where CurrencyCode='LTL'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='pataca', CurrencyMinor='Avo',
CurrencySymbol='P' where CurrencyCode='MOP'  
  Update Currencies set CurrencyMajor='denar', CurrencyMinor='Deni',
CurrencySymbol='???' where CurrencyCode='MKD'  
  Update Currencies set CurrencyMajor='kwacha', CurrencyMinor='Tambala',
CurrencySymbol='MK' where CurrencyCode='MWK'  
  Update Currencies set CurrencyMajor='ringgit', CurrencyMinor='Sen',
CurrencySymbol='RM' where CurrencyCode='MYR'  
  Update Currencies set CurrencyMajor='rufiyaa', CurrencyMinor='Laari',
CurrencySymbol='MVR' where CurrencyCode='MVR'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='rupee', CurrencyMinor='Cent',
CurrencySymbol='None' where CurrencyCode='MUR'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='$' where CurrencyCode='MXN'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='leu', CurrencyMinor='Ban',
CurrencySymbol='L' where CurrencyCode='MDL'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='tögrög', CurrencyMinor='Möngö',
CurrencySymbol='?' where CurrencyCode='MNT'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='dirham', CurrencyMinor='Centime',
CurrencySymbol='?.?.' where CurrencyCode='MAD'  
  Update Currencies set CurrencyMajor='metical', CurrencyMinor='Centavo',
CurrencySymbol='MT' where CurrencyCode='MZN'  
  Update Currencies set CurrencyMajor='dram', CurrencyMinor='Luma',
CurrencySymbol='' where CurrencyCode='AMD'  
  Update Currencies set CurrencyMajor='dram', CurrencyMinor='Luma',
CurrencySymbol='None' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='NAD'  
  Update Currencies set CurrencyMajor='rand', CurrencyMinor='Cent',
CurrencySymbol='R' where CurrencyCode='ZAR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='AUD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='rupee', CurrencyMinor='Paisa',
CurrencySymbol='Rs' where CurrencyCode='NPR'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XPF'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='NZD'  
  Update Currencies set CurrencyMajor='córdoba', CurrencyMinor='Centavo',
CurrencySymbol='C$' where CurrencyCode='NIO'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='naira', CurrencyMinor='Kobo',
CurrencySymbol='?' where CurrencyCode='NGN'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='NZD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='lira', CurrencyMinor='Kurus',
CurrencySymbol='None' where CurrencyCode='TRY'  
  Update Currencies set CurrencyMajor='krone', CurrencyMinor='Øre',
CurrencySymbol='kr' where CurrencyCode='NOK'  
  Update Currencies set CurrencyMajor='rupee', CurrencyMinor='Paisa',
CurrencySymbol='?' where CurrencyCode='PKR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='shekel', CurrencyMinor='Agora',
CurrencySymbol='?' where CurrencyCode='ILS'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Piastre',
CurrencySymbol='None' where CurrencyCode='JOD'  
  Update Currencies set CurrencyMajor='balboa', CurrencyMinor='Centésimo',
CurrencySymbol='B/.' where CurrencyCode='PAB'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='kina', CurrencyMinor='Toea',
CurrencySymbol='K' where CurrencyCode='PGK'  
  Update Currencies set CurrencyMajor='guaraní', CurrencyMinor='Céntimo',
CurrencySymbol=' (? in unicode)' where CurrencyCode='PYG'  
  Update Currencies set CurrencyMajor='sol', CurrencyMinor='Céntimo',
CurrencySymbol='S/.' where CurrencyCode='PEN'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centavo',
CurrencySymbol='?' where CurrencyCode='PHP'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='NZD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='zloty', CurrencyMinor='Grosz',
CurrencySymbol='zl' where CurrencyCode='PLN'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='riyal', CurrencyMinor='Dirham',
CurrencySymbol='QR or ?.?' where CurrencyCode='QAR'  
  Update Currencies set CurrencyMajor='leu', CurrencyMinor='Ban',
CurrencySymbol='lei' where CurrencyCode='RON'  
  Update Currencies set CurrencyMajor='ruble', CurrencyMinor='Kopek',
CurrencySymbol='' where CurrencyCode='RUB'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='RWF'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Santeem',
CurrencySymbol='None' where CurrencyCode='DZD'  
  Update Currencies set CurrencyMajor='dirham', CurrencyMinor='Centime',
CurrencySymbol='None' where CurrencyCode='MAD'  
  Update Currencies set CurrencyMajor='peseta', CurrencyMinor='Centime',
CurrencySymbol='Ptas' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='SHP'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='XCD'  
  Update Currencies set CurrencyMajor='tala', CurrencyMinor='Sene',
CurrencySymbol='T' where CurrencyCode='WST'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='dobra', CurrencyMinor='Cêntimo',
CurrencySymbol='Db' where CurrencyCode='STD'  
  Update Currencies set CurrencyMajor='riyal', CurrencyMinor='Halala',
CurrencySymbol='None' where CurrencyCode='SAR'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='dinar', CurrencyMinor='Para',
CurrencySymbol='din.' where CurrencyCode='RSD'  
  Update Currencies set CurrencyMajor='rupee', CurrencyMinor='Cent',
CurrencySymbol='None' where CurrencyCode='SCR'  
  Update Currencies set CurrencyMajor='leone', CurrencyMinor='Cent',
CurrencySymbol='Le' where CurrencyCode='SLL'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Sen',
CurrencySymbol='$' where CurrencyCode='BND'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='SGD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='guilder', CurrencyMinor='Cent',
CurrencySymbol='ƒ' where CurrencyCode='ANG'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='SBD'  
  Update Currencies set CurrencyMajor='shilling', CurrencyMinor='Cent',
CurrencySymbol='Sh' where CurrencyCode='SOS'  
  Update Currencies set CurrencyMajor='shilling', CurrencyMinor='Cent',
CurrencySymbol='Sh' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='rand', CurrencyMinor='Cent',
CurrencySymbol='R' where CurrencyCode='ZAR'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GBP'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='ruble', CurrencyMinor='Kopek',
CurrencySymbol='' where CurrencyCode='RUB'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Piastre',
CurrencySymbol='£' where CurrencyCode='SSP'  
  Update Currencies set CurrencyMajor='rupee', CurrencyMinor='Cent',
CurrencySymbol='Rs' where CurrencyCode='LKR'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Piastre',
CurrencySymbol='£' where CurrencyCode='SDG'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='SRD'  
  Update Currencies set CurrencyMajor='lilangeni', CurrencyMinor='Cent',
CurrencySymbol='L' where CurrencyCode='SZL'  
  Update Currencies set CurrencyMajor='krona', CurrencyMinor='Öre',
CurrencySymbol='kr' where CurrencyCode='SEK'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Rappen',
CurrencySymbol='Fr' where CurrencyCode='CHF'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Piastre',
CurrencySymbol='£ ' where CurrencyCode='SYP'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='TWD'  
  Update Currencies set CurrencyMajor='somoni', CurrencyMinor='Diram',
CurrencySymbol='None' where CurrencyCode='TJS'  
  Update Currencies set CurrencyMajor='shilling', CurrencyMinor='Cent',
CurrencySymbol='Sh' where CurrencyCode='TZS'  
  Update Currencies set CurrencyMajor='baht', CurrencyMinor='Satang',
CurrencySymbol='?' where CurrencyCode='THB'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XOF'  
  Update Currencies set CurrencyMajor='pa?anga', CurrencyMinor='Seniti',
CurrencySymbol='T$' where CurrencyCode='TOP'  
  Update Currencies set CurrencyMajor='ruble', CurrencyMinor='Kopek',
CurrencySymbol='?.' where CurrencyCode='PRB[N]'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='TTD'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='SHP'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='lira', CurrencyMinor='Kurus',
CurrencySymbol='None' where CurrencyCode='TRY'  
  Update Currencies set CurrencyMajor='manat', CurrencyMinor='Tennesi',
CurrencySymbol='m' where CurrencyCode='TMT'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='AUD'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='shilling', CurrencyMinor='Cent',
CurrencySymbol='Sh' where CurrencyCode='UGX'  
  Update Currencies set CurrencyMajor='hryvnia', CurrencyMinor='Kopiyka',
CurrencySymbol='?' where CurrencyCode='UAH'  
  Update Currencies set CurrencyMajor='dirham', CurrencyMinor='Fils',
CurrencySymbol='None' where CurrencyCode='AED'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GBP'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='peso', CurrencyMinor='Centésimo',
CurrencySymbol='$' where CurrencyCode='UYU'  
  Update Currencies set CurrencyMajor='som', CurrencyMinor='Tiyin',
CurrencySymbol='None' where CurrencyCode='UZS'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='bolívar', CurrencyMinor='Céntimo',
CurrencySymbol='Bs F' where CurrencyCode='VEF'  
  Update Currencies set CurrencyMajor='franc', CurrencyMinor='Centime',
CurrencySymbol='Fr' where CurrencyCode='XPF'  
  Update Currencies set CurrencyMajor='rial', CurrencyMinor='Fils',
CurrencySymbol='None' where CurrencyCode='YER'  
  Update Currencies set CurrencyMajor='kwacha', CurrencyMinor='Ngwee',
CurrencySymbol='ZK' where CurrencyCode='ZMW'  
  Update Currencies set CurrencyMajor='pula', CurrencyMinor='Thebe',
CurrencySymbol='P' where CurrencyCode='BWP'  
  Update Currencies set CurrencyMajor='pound', CurrencyMinor='Penny',
CurrencySymbol='£' where CurrencyCode='GBP'  
  Update Currencies set CurrencyMajor='Euro', CurrencyMinor='Cent',
CurrencySymbol='€' where CurrencyCode='EUR'  
  Update Currencies set CurrencyMajor='rand', CurrencyMinor='Cent',
CurrencySymbol='R' where CurrencyCode='ZAR'  
  Update Currencies set CurrencyMajor='dollar', CurrencyMinor='Cent',
CurrencySymbol='$' where CurrencyCode='USD'  
  Update Currencies set CurrencyMajor='ariary', CurrencyMinor='Iraimbilanja',
CurrencySymbol='Ar' where CurrencyCode='MGA'  
  Update Currencies set CurrencyMajor='ouguiya', CurrencyMinor='Khoums',
CurrencySymbol='UM' where CurrencyCode='MRO'  
  Update Currencies set CurrencyMajor='ouguiya', CurrencyMinor='Khoums',
CurrencySymbol='UM' where CurrencyCode='MRO'  
  Update Currencies set CurrencyMajor='apsar', CurrencyMinor='None',
CurrencySymbol='None' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='None', CurrencyMinor='Centavo',
CurrencySymbol='None' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='None', CurrencyMinor='Centavo',
CurrencySymbol='None' where CurrencyCode='None'  
  Update Currencies set CurrencyMajor='vatu', CurrencyMinor='None',
CurrencySymbol='Vt' where CurrencyCode='VUV'  

";

        private static string CurrencyConvertionUpdateSql =
            @"
UPDATE CurrencyConversion
   SET ConversionDate = '1900/01/01 00:00:00.000'
 WHERE ConversionDate is null
";
        #endregion Update Currency

        #region  Create table script
        private static string CreateSettingsRoleScript =
            @"
/****** Object:  Table [dbo].[SettingsRole]    Script Date: 12/02/14 10:24:55 AM ******/
CREATE TABLE [dbo].[SettingsRole](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]
";
        private static string CreateBanderolsScript =
            @"
/****** Object:  Table [dbo].[Banderols]    Script Date: 31/03/14 12:56:33 PM ******/
CREATE TABLE [dbo].[Banderols](
	[BanderolID] [varchar](50) NOT NULL,
	[BanderolName] [varchar](120) NULL,
	[BanderolSize] [varchar](50) NULL,
	[UOM] [varchar](120) NULL,
	[OpeningQty] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
	[Description] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Banderols] PRIMARY KEY CLUSTERED 
(
	[BanderolID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
        private static string CreatePackInfoScript =
@"
/****** Object:  Table [dbo].[PackagingInformations]    Script Date: 31/03/14 12:56:33 PM ******/
CREATE TABLE [dbo].[PackagingInformations](
	[PackagingID] [varchar](50) NOT NULL,
	[PackagingNature] [varchar](120) NULL,
	[PackagingCapacity] [varchar](50) NULL,
	[UOM] [varchar](120) NULL,
	[Description] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PackagingInformations] PRIMARY KEY CLUSTERED 
(
	[PackagingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
        private static string CreateBandeProScript =

@"
/****** Object:  Table [dbo].[BanderolProducts]    Script Date: 31/03/14 12:56:33 PM ******/
CREATE TABLE [dbo].[BanderolProducts](
	[BandProductId] [varchar](20) NOT NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[BanderolId] [varchar](50) NULL,
	[PackagingId] [varchar](50) NULL,
	[BUsedQty] [decimal](25, 9) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[WastageQty] [decimal](25, 9) NULL,
	[OpeningQty] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
 CONSTRAINT [PK_BanderolProducts] PRIMARY KEY CLUSTERED 
(
	[BandProductId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
        private static string CreateDemandHeaderScript =

@"
/****** Object:  Table [dbo].[DemandHeaders]    Script Date: 31/03/14 12:56:33 PM ******/
CREATE TABLE [dbo].[DemandHeaders](
	[DemandNo] [varchar](20) NOT NULL,
	[DemandDateTime] [datetime] NULL,
	[FiscalYear] [varchar](30) NULL,
	[MonthFrom] [varchar](50) NULL,
	[MonthTo] [varchar](50) NULL,
	[TotalQty] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[DemandReceiveID] [varchar](20) NULL,
	[VehicleID] [varchar](20) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DemandReceiveDate] [datetime] NULL,
	[RefNo] [varchar](20) NULL,
	[RefDate] [datetime] NULL,
 CONSTRAINT [PK_DemandHeaders] PRIMARY KEY CLUSTERED 
(
	[DemandNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
        private static string CreateDemandDetailsScript =
@"
/****** Object:  Table [dbo].[DemandDetails]    Script Date: 31/03/14 12:56:33 PM ******/

            CREATE TABLE [dbo].[DemandDetails](
	[DemandNo] [varchar](20) NOT NULL,
	[DemandLineNo] [int] NULL,
	[BandProductId] [varchar](20) NOT NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[DemandQty] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[TransactionDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[DemandReceiveID] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[VehicleID] [varchar](20) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]


";

        private static string CreateTransferRawHeadersScript =
@"
/****** Object:  Table [dbo].[TransferRawHeaders]    Script Date: 12/1/2014 12:16:05 PM ******/

CREATE TABLE [dbo].[TransferRawHeaders](
	[TransferId] [varchar](20) NOT NULL,
	[TransferDateTime] [datetime] NULL,
	[TransFromItemNo] [varchar](20) NOT NULL,
	[UOM] [varchar](50) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[TransferedQty] [decimal](25, 9) NULL,
	[TransferedAmt] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_TransferRawHeaders] PRIMARY KEY CLUSTERED 
(
	[TransferId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";
        private static string CreateTransferRawDetailsScript =
@"
/****** Object:  Table [dbo].[TransferRawDetails]    Script Date: 12/1/2014 12:17:15 PM ******/


CREATE TABLE [dbo].[TransferRawDetails](
	[TransferId] [varchar](20) NOT NULL,
	[TransLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[TransFromItemNo] [varchar](20) NOT NULL,
	[TransferDateTime] [datetime] NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]


";

        #region Bureau
        private static string CreateBureauSaleDetailsScript =
        @"
/****** Object:  Table [dbo].[BureauSalesInvoiceDetails]    Script Date: 6/16/2014 9:43:26 PM ******/

CREATE TABLE [dbo].[BureauSalesInvoiceDetails](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[InvoiceLineNo] [int] NULL,
	[ItemNo] [varchar](20) NULL,
	[InvoiceName] [varchar](120) NOT NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Quantity] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[Type] [varchar](10) NULL,
	[PreviousSalesInvoiceNo] [varchar](200) NULL,
	[ChallanDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[InvoiceCurrency] [varchar](50) NULL,
	[TransactionType] [varchar](50) NULL,
	[CConversionDate] [datetime] NULL,
	[ReturnTransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_BureauSalesInvoiceDetails_1] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC,
	[InvoiceName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
        #endregion

        private static string CreateVAT7Script =
        @"
        CREATE TABLE [dbo].[VAT7](
	[VAT7No] [varchar](20) NOT NULL,
	[Vat7Date] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[FinishUOM] [varchar](50) NULL,
	[Vat7LineNo] [int] NULL,
	[ItemNo] [varchar](20) NULL,
	[UOM] [varchar](50) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[Post]	[varchar] (1) NULL,	
    [CreatedBy]	[varchar](120)	NULL,
    [CreatedOn]	[datetime] NULL,	
    [LastModifiedBy]	[varchar] (120) NULL,	
    [LastModifiedOn]	[datetime]	NULL
) ON [PRIMARY]

";
        // Tracking Table

        private static string CreateTrackingsScript =
@"
/****** Object:  Table [dbo].[Trackings]    Script Date: 2/18/2015 10:55:42 AM ******/

CREATE TABLE [dbo].[Trackings](
	
[ItemNo] [varchar](20) NOT NULL,
	[TrackLineNo] [int] NULL,
	[Heading1] [varchar](200) NOT NULL,
	[Heading2] [varchar](200) NULL,
	[Quantity] [int] NULL,
	[IsPurchase] [varchar](1) NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[IsIssue] [varchar](1) NULL,
	[IssueNo] [varchar](20) NULL,
	[IsReceive] [varchar](1) NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IsSale] [varchar](1) NULL,
	[SaleInvoiceNo] [varchar](20) NULL,
	[FinishItemNo] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceivePost] [varchar](1) NULL,
	[SalePost] [varchar](1) NULL,
	[IssuePost] [varchar](1) NULL,
	[ReceiveDate] [datetime] NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[ReturnType] [varchar](50) NULL,
	[ReturnPurchase] [varchar](1) NULL,
	[ReturnPurchaseID] [varchar](50) NULL,
	[ReturnReceive] [varchar](1) NULL,
	[ReturnReceiveID] [varchar](50) NULL,
	[ReturnSale] [varchar](1) NULL,
	[ReturnSaleID] [varchar](50) NULL,
	[ReturnPurDate] [datetime] NULL,
	[ReturnReceiveDate] [datetime] NULL,
 CONSTRAINT [PK_Trackings] PRIMARY KEY CLUSTERED 
(
	[Heading1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]



";
        #endregion  Create table script

        #region Foreign Key

        private static string AddForeignKeyBandeProduct1 =
            @"
SET ANSI_PADDING OFF


ALTER TABLE [dbo].[BanderolProducts]  WITH CHECK ADD  CONSTRAINT [FK_BanderolProducts_Banderols] FOREIGN KEY([BanderolId])
REFERENCES [dbo].[Banderols] ([BanderolID])


ALTER TABLE [dbo].[BanderolProducts] CHECK CONSTRAINT [FK_BanderolProducts_Banderols]
";

        private static string AddForeignKeyBandeProduct2 = @"
SET ANSI_PADDING OFF

ALTER TABLE [dbo].[BanderolProducts]  WITH CHECK ADD  CONSTRAINT [FK_BanderolProducts_PackagingInformations] FOREIGN KEY([PackagingId])
REFERENCES [dbo].[PackagingInformations] ([PackagingID])


ALTER TABLE [dbo].[BanderolProducts] CHECK CONSTRAINT [FK_BanderolProducts_PackagingInformations]";

        private static string AddForeignKeyDemandDetails1 =
            @"

SET ANSI_PADDING OFF


ALTER TABLE [dbo].[DemandDetails]  WITH CHECK ADD  CONSTRAINT [FK_DemandDetails_BanderolProducts] FOREIGN KEY([BandProductId])
REFERENCES [dbo].[BanderolProducts] ([BandProductId])


ALTER TABLE [dbo].[DemandDetails] CHECK CONSTRAINT [FK_DemandDetails_BanderolProducts]";
        private static string AddForeignKeyDemandDetails2 =
                    @"
SET ANSI_PADDING OFF


ALTER TABLE [dbo].[DemandDetails]  WITH CHECK ADD  CONSTRAINT [FK_DemandDetails_DemandHeaders] FOREIGN KEY([DemandNo])
REFERENCES [dbo].[DemandHeaders] ([DemandNo])


ALTER TABLE [dbo].[DemandDetails] CHECK CONSTRAINT [FK_DemandDetails_DemandHeaders]";

        private static string AddForeignKeyTransferRawDetails1 =
            @"
SET ANSI_PADDING OFF


ALTER TABLE [dbo].[TransferRawDetails]  WITH CHECK ADD  CONSTRAINT [FK_TransferRawDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])

ALTER TABLE [dbo].[TransferRawDetails] CHECK CONSTRAINT [FK_TransferRawDetails_Products]
";

        private static string AddForeignKeyTransferRawDetails2 =
        @"
SET ANSI_PADDING OFF


ALTER TABLE [dbo].[TransferRawDetails]  WITH CHECK ADD  CONSTRAINT [FK_TransferRawDetails_TransferRawHeaders] FOREIGN KEY([TransferId])
REFERENCES [dbo].[TransferRawHeaders] ([TransferId])

ALTER TABLE [dbo].[TransferRawDetails] CHECK CONSTRAINT [FK_TransferRawDetails_TransferRawHeaders]
";

        private static string AddForeignKeyTrackings =
        @"
        SET ANSI_PADDING OFF

       ALTER TABLE [dbo].[Trackings]  WITH CHECK ADD  CONSTRAINT [FK_Trackings_Products] FOREIGN KEY([ItemNo])
       REFERENCES [dbo].[Products] ([ItemNo])

       ALTER TABLE [dbo].[Trackings] CHECK CONSTRAINT [FK_Trackings_Products]
        ";

        #endregion

        ////
        #region Methods 00 --- FUM (Frequently Used Methods)

        public void DatabaseTableChanges(SysDBInfoVMTemp connVM = null)
        {
            #region Objects and Variables

            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;

            #endregion

            #region try

            try
            {
                #region Connection and Transaction

                currConn = _dbsqlConnection.GetConnectionNoTimeOut(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction(MessageVM.issueMsgMethodNameInsert);

                #endregion

                string CompanyCode = settingValue("CompanyCode", "Code", connVM, currConn, transaction);

                #region Table add

                string sqlText = "";


                #region TollProductionConsumptions

                if (commonDal.NewTableExistCheck("TollProductionConsumptions", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[TollProductionConsumptions](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[Code] [varchar](20) NOT NULL,
	[DateTime] [datetime] NULL,
	[PeriodID] [varchar](6) NULL,
	[RefNo] [varchar](2000) NULL,
	[Comments] [varchar](200) NULL,
	[ImportID] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsCancle] [bit] NULL,
 CONSTRAINT [PK_TollProductionConsumptions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("TollProductionConsumptions", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region TollProductionConsumptionDetails

                if (commonDal.NewTableExistCheck("TollProductionConsumptionDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[TollProductionConsumptionDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[HeaderId] [int] NOT NULL,
	[BranchId] [int] NULL,
	[DateTime] [datetime] NULL,
	[PeriodID] [varchar](6) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IsCancle] [bit] NULL,
	[ItemNo] [nvarchar](10) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UnitCost] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[BomId] [varchar](20) NULL,
                 CONSTRAINT [PK_TollProductionConsumptionDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("TollProductionConsumptionDetails", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region TollContInOuts

                if (commonDal.NewTableExistCheck("TollContInOuts", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[TollContInOuts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[Code] [varchar](20) NOT NULL,
	[VendorID] [nvarchar](20) NULL,
	[DateTime] [datetime] NULL,
	[PeriodID] [varchar](6) NULL,
	[RefNo] [varchar](2000) NULL,
	[Comments] [varchar](200) NULL,
	[ImportID] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsCancle] [bit] NULL,
 CONSTRAINT [PK_TollContInOuts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("TollContInOuts", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region TollContInOutDetails

                if (commonDal.NewTableExistCheck("TollContInOutDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[TollContInOutDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[HeaderId] [int] NOT NULL,
	[BranchId] [int] NULL,
	[DateTime] [datetime] NULL,
	[PeriodID] [varchar](6) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IsCancle] [bit] NULL,
	[ItemNo] [nvarchar](10) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UnitCost] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
 CONSTRAINT [PK_TollContInOutDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("TollContInOutDetails", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region TollClientInOuts

                if (commonDal.NewTableExistCheck("TollClientInOuts", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[TollClientInOuts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[Code] [varchar](20) NOT NULL,
	[CustomerID] [nvarchar](20) NULL,
	[DateTime] [datetime] NULL,
	[PeriodID] [varchar](6) NULL,
	[RefNo] [varchar](2000) NULL,
	[Comments] [varchar](200) NULL,
	[ImportID] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsCancle] [bit] NULL,
 CONSTRAINT [PK_TollClientInOuts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("TollClientInOuts", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region TollClientInOutDetails

                if (commonDal.NewTableExistCheck("TollClientInOutDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[TollClientInOutDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[HeaderId] [int] NOT NULL,
	[BranchId] [int] NULL,
	[DateTime] [datetime] NULL,
	[PeriodID] [varchar](6) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IsCancle] [bit] NULL,
	[ItemNo] [nvarchar](10) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UnitCost] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[BomId] [varchar](20) NULL,
 CONSTRAINT [PK_TollClientInOutDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("TollClientInOutDetails", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region UserInformationIVAS

                if (commonDal.NewTableExistCheck("UserInformationIVAS", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[UserInformationIVAS](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NULL,
	[UserName] [varchar](120) NOT NULL,
	[UserPassword] [varchar](500) NULL,
	[FullName] [varchar](500) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_UserInformationIVAS] PRIMARY KEY CLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("UserInformationIVAS", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region British Council Audit table

                if (CompanyCode.ToLower() == "british".ToLower())
                {
                    #region PurchaseAudits

                    if (commonDal.NewTableExistCheck("PurchaseAudits", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[PurchaseAudits](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[FileName] [varchar](50) NULL,
	[ID] [varchar](100) NULL,
	[BranchCode] [varchar](50) NULL,
	[Vendor_Code] [varchar](50) NULL,
	[Vendor_Name] [varchar](300) NULL,
	[ReferenceNo] [varchar](100) NULL,
	[LC_No] [varchar](50) NULL,
	[BE_Number] [varchar](50) NULL,
	[Invoice_Date] [datetime] NULL,
	[Receive_Date] [datetime] NULL,
	[Post] [varchar](5) NULL,
	[With_VDS] [varchar](5) NULL,
	[Comments] [varchar](500) NULL,
	[Item_Code] [varchar](50) NULL,
	[Item_Name] [varchar](300) NULL,
	[Quantity] [decimal](18, 9) NULL,
	[Total_Price] [decimal](18, 9) NULL,
	[UOM] [varchar](20) NULL,
	[Type] [varchar](20) NULL,
	[Rebate_Rate] [decimal](18, 9) NULL,
	[SD_Amount] [decimal](18, 9) NULL,
	[VAT_Amount] [decimal](18, 9) NULL,
	[CnF_Amount] [decimal](18, 9) NULL,
	[Insurance_Amount] [decimal](18, 9) NULL,
	[Assessable_Value] [decimal](18, 9) NULL,
	[CD_Amount] [decimal](18, 9) NULL,
	[RD_Amount] [decimal](18, 9) NULL,
	[AITAmount] [decimal](18, 9) NULL,
	[AT_Amount] [decimal](18, 9) NULL,
	[Others_Amount] [decimal](18, 9) NULL,
	[Remarks] [varchar](500) NULL,
	[Transection_Type] [varchar](20) NULL,
	[CompanyCode] [varchar](50) NULL,
	[ProcessDateTime] [datetime] NULL,
 CONSTRAINT [PK_PurchaseAudits] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("PurchaseAudits", sqlText, currConn, transaction, connVM);
                    }
                    #endregion

                    #region SalesAudit

                    if (commonDal.NewTableExistCheck("SalesAudits", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[SalesAudits](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[FileID] [varchar](50) NULL,
	[ID] [varchar](100) NULL,
	[BranchCode] [varchar](50) NULL,
	[CustomerGroup] [varchar](50) NULL,
	[CustomerCode] [varchar](50) NULL,
	[CustomerName] [varchar](300) NULL,
	[DeliveryAddress] [varchar](500) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[DeliveryDateTime] [datetime] NULL,
	[ReferenceNo] [varchar](100) NULL,
	[Comments] [varchar](500) NULL,
	[ProductCode] [varchar](10) NULL,
	[ProductName] [varchar](300) NULL,
	[UOM] [varchar](20) NULL,
	[Quantity] [decimal](18, 9) NULL,
	[UnitPrice] [decimal](18, 9) NULL,
	[Subtotal] [decimal](18, 9) NULL,
	[SDRate] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 9) NULL,
	[DiscountAmount] [decimal](18, 9) NULL,
	[PromotionalQuantity] [decimal](18, 9) NULL,
	[Post] [varchar](5) NULL,
	[LCNumber] [varchar](50) NULL,
	[CurrencyCode] [varchar](20) NULL,
	[LineComments] [varchar](400) NULL,
	[Type] [varchar](20) NULL,
	[TransactionType] [varchar](50) NULL,
	[IsProcessed] [varchar](5) NULL,
	[CompanyCode] [varchar](50) NULL,
	[VehicleNo] [varchar](20) NULL,
	[VehicleType] [varchar](20) NULL,
	[PreviousInvoiceNo] [varchar](20) NULL,
	[PreviousInvoiceDateTime] [datetime] NULL,
	[PreviousUnitPrice] [decimal](18, 9) NULL,
	[PreviousQuantity] [decimal](18, 9) NULL,
	[PreviousUnitOfMeasuremnet] [varchar](20) NULL,
	[PreviousSuppDuty] [varchar](200) NULL,
	[PreviousVATRate] [decimal](18, 9) NULL,
	[ReasonOfReturn] [varchar](300) NULL,
	[ProcessDateTime] [datetime] NULL,
 CONSTRAINT [PK_SalesAudits] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("SalesAudits", sqlText, currConn, transaction, connVM);
                    }
                    #endregion

                    #region TempResponse

                    if (commonDal.NewTableExistCheck("TempResponse", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[TempResponse](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[FileId] [varchar](100) NULL,
	[Status] [varchar](20) NULL,
	[Message] [varchar](400) NULL,
	[TransactionNumber] [varchar](100) NULL,
	[InvoiceNo] [varchar](20) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[VendorCustomer] [varchar](max) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
    [GetNumber] [varchar](50) NULL,
 CONSTRAINT [PK_TempResponse] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("TempResponse", sqlText, currConn, transaction, connVM);
                    }
                    #endregion

                }

                #endregion

                #region BSL Audit table

                if (CompanyCode.ToLower() == "bsl".ToLower())
                {
                    #region PurchaseAudits

                    if (commonDal.NewTableExistCheck("PurchaseAudits", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[PurchaseAudits](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BookingDate] [datetime] NULL,
	[DocumentDate] [datetime] NULL,
	[DocumentNumber] [nvarchar](250) NULL,
	[Type] [nvarchar](50) NULL,
	[CostCenter] [nvarchar](max) NULL,
	[ArticleNumber] [nvarchar](100) NULL,
	[ArticleName] [nvarchar](max) NULL,
	[QTY] [decimal](25, 4) NULL,
	[Unit] [nvarchar](50) NULL,
	[TransferCostCenter] [nvarchar](max) NULL,
	[Supplier] [nvarchar](250) NULL,
	[SupplierAccount] [nvarchar](50) NULL,
	[COS] [decimal](25, 4) NULL,
	[COSTotal] [decimal](25, 4) NULL,
	[SalesPrice] [decimal](25, 4) NULL,
	[SalesPriceTotal] [decimal](25, 4) NULL,    
	[Invoiced] [nvarchar](100) NULL,
	[ItemGroup] [nvarchar](250) NULL,
	[MajorGroup] [nvarchar](250) NULL,
	[OverGroup] [nvarchar](250) NULL,
    [Transection_Type] [nvarchar](20) NULL,
	[CompanyCode] [nvarchar](20) NULL,
    [BranchId] int NULL,
    [UserId] [nvarchar](50) NULL,
	[ProcessDateTime] [datetime] NULL,
    VATRate decimal(25,4),
    VAT_Amount decimal(25,4)
 CONSTRAINT [PK_PurchaseAudits] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("PurchaseAudits", sqlText, currConn, transaction, connVM);
                    }
                    #endregion
                }

                #endregion

                #region BOLLORE Audit table

                if (CompanyCode.ToLower() == "BOLLORE".ToLower())
                {
                    #region PurchaseAudits

                    if (commonDal.NewTableExistCheck("PurchaseAudits", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[PurchaseAudits](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Vendor_Name] [varchar](500) NULL,
	[Vendor_Code] [nvarchar](50) NULL,
	[VendorID] [varchar](20) NULL,
	[Referance_No] [nvarchar](100) NULL,
	[Previous_Purchase_No] [nvarchar](100) NULL,
	[Post] [varchar](1) NULL,
	[LC_No] [nvarchar](100) NULL,
	[Item_Code] [nvarchar](100) NULL,
	[Item_Name] [varchar](200) NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [nvarchar](100) NULL,
	[BranchCode] [nvarchar](100) NULL,
	[Comments] [nvarchar](700) NULL,
	[VAT_Amount] [decimal](25, 9) NULL,
	[BE_Number] [varchar](100) NULL,
	[Invoice_Date] [varchar](100) NULL,
	[Receive_Date] [varchar](100) NULL,
	[With_VDS] [varchar](100) NULL,
	[Total_Price] [varchar](100) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Type] [varchar](100) NULL,
	[Rebate_Rate] [varchar](100) NULL,
	[SD_Amount] [decimal](25, 9) NULL,
	[Assessable_Value] [decimal](25, 9) NULL,
	[CD_Amount] [decimal](25, 9) NULL,
	[RD_Amount] [decimal](25, 9) NULL,
	[Others_Amount] [decimal](25, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[BEItemNo] [varchar](100) NULL,
	[VDSAmount] [decimal](25, 9) NULL,
	[AITAmount] [decimal](25, 9) NULL,
	[UserId] [varchar](50) NULL,
	[AT_Amount] [decimal](25, 9) NULL,
	[Transection_Type] [varchar](200) NULL,
	[TDS_Amount] [decimal](25, 9) NULL,
	[OtherRef] [varchar](500) NULL,
	[TDSRate] [decimal](25, 9) NULL,
	[TDSAmount] [decimal](25, 9) NULL,
	[ProcessDateTime] [datetime] NULL

 CONSTRAINT [PK_PurchaseAudits] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("PurchaseAudits", sqlText, currConn, transaction, connVM);
                    }
                    #endregion
                }

                #endregion

                #region VAT9_1NBRApi_Attachment

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_Attachment", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1NBRApi_Attachment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
    [PeriodId] [nvarchar](10) NULL,
	[FileName] [nvarchar](250) NULL,
	[DocType] [nvarchar](10) NULL,
	[FileType] [nvarchar](10) NULL,	
    [Notes] [nvarchar](50) NULL,
	[FileLocation] [nvarchar](250) NULL,	

 CONSTRAINT [PK_VAT9_1NBRApi_Attachment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_Attachment", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region VAT9_1NBRApi_Master_Bank

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_Master_Bank", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1NBRApi_Master_Bank](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](14) NULL,
	[BanCD] [varchar](25) NULL,
	[RoutingNumber] [varchar](60) NULL,
	[Bankn] [varchar](100) NULL,
	[Brannm] [varchar](100) NULL,
	[BanCDDatefrom] [varchar](10) NULL,
	[BanCDDateto] [varchar](10) NULL,
	[RoutingNumberDatefrom] [varchar](10) NULL,
	[RoutingNumberDateto] [varchar](10) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_Master_Bank] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_Master_Bank", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_Master_BoEData

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_Master_BoEData", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1NBRApi_Master_BoEData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](14) NULL,
	[PeriodKey] [varchar](4) NULL,
	[Serial] [varchar](10) NULL,
	[BoENumber] [varchar](50) NULL,
	[BoEDate] [varchar](18) NULL,
	[BoEOffCode] [varchar](20) NULL,
	[BoEItmNo] [varchar](20) NULL,
	[CPCCode] [varchar](50) NULL,
	[Description] [varchar](150) NULL,
	[GoodService] [varchar](15) NULL,
	[Name] [varchar](100) NULL,
	[AssessValue] [decimal](15, 2) NULL,
	[VAT] [decimal](15, 2) NULL,
	[SD] [decimal](15, 2) NULL,
	[AT] [decimal](15, 2) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_Master_BoEData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_Master_BoEData", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_Master_categoryNote

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_Master_categoryNote", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1NBRApi_Master_categoryNote](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](14) NULL,
	[PeriodKey] [varchar](4) NULL,
	[CategoryID] [varchar](4) NULL,
	[Category] [varchar](100) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_Master_categoryNote] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_Master_categoryNote", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_Master_cpccode

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_Master_cpccode", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1NBRApi_Master_cpccode](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](14) NULL,
	[CpcCode] [varchar](50) NULL,
	[Description] [varchar](200) NULL,
	[Serial] [varchar](100) NULL,
	[NoteNo] [varchar](10) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_Master_cpccode] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_Master_cpccode", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_Master_goodsService01_04

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_Master_goodsService01_04", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1NBRApi_Master_goodsService01_04](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](14) NULL,
	[PeriodKey] [varchar](4) NULL,
	[CategoryID] [varchar](4) NULL,
	[Type] [varchar](10) NULL,
	[GoodsServiceCode] [varchar](15) NULL,
	[GoodsServiceName] [varchar](200) NULL,
	[SDRate] [decimal](10, 2) NULL,
	[VATRate] [decimal](10, 2) NULL,
	[StandardVatRate] [decimal](10, 2) NULL,
	[TotTate] [decimal](10, 2) NULL,
	[SpecRate06] [decimal](10, 2) NULL,
	[ValidFrom] [varchar](10) NULL,
	[ValidTo] [varchar](10) NULL,
	[ItemID] [varchar](15) NULL,
	[Note] [varchar](100) NULL,
	[ManualInput] [varchar](50) NULL,
	[NoteNo] [varchar](5) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_Master_goodsService01_04] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_Master_goodsService01_04", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_Master_periodKey

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_Master_periodKey", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1NBRApi_Master_periodKey](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](14) NULL,
	[PeriodKey] [varchar](4) NULL,
	[Txt50] [varchar](15) NULL,
	[DueDate] [varchar](15) NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_Master_periodKey] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_Master_periodKey", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApiHeader

                if (commonDal.NewTableExistCheck("VAT9_1NBRApiHeader", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1NBRApiHeader](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MSGID] [varchar](20) NULL,
	[FBTyp] [varchar](4) NULL,
	[BIN] [varchar](14) NULL,
	[PeriodKey] [varchar](4) NULL,
	[Depositor] [varchar](100) NULL,
	[APIMsgId] [int] NULL,
	[SubmissionId] [varchar](100) NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1NBRApiHeader] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApiHeader", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_SF_adjustSet

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_SF_adjustSet", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1NBRApi_SF_adjustSet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MSGID] [varchar](20) NULL,
	[FieldID] [varchar](5) NULL,
	[NoteNo] [varchar](20) NULL,
	[IssueDat] [varchar](8) NULL,
	[VATChallanNo] [varchar](20) NULL,
	[VATChallanDate] [varchar](8) NULL,
	[ReasonIssuance] [varchar](255) NULL,
	[ValueChallan] [varchar](17) NULL,
	[QuantityinChallan] [varchar](17) NULL,
	[VATChallan] [varchar](17) NULL,
	[SDChallan] [varchar](17) NULL,
	[ValueIncDecAdj] [varchar](17) NULL,
	[QuantityIncDecAdj] [varchar](17) NULL,
	[VATIncDecAdj] [varchar](17) NULL,
	[SDIncDecAdj] [varchar](17) NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_SF_adjustSet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_SF_adjustSet", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_SF_challanSet

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_SF_challanSet", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1NBRApi_SF_challanSet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MSGID] [varchar](20) NULL,
	[FieldID] [varchar](20) NULL,
	[TreasuryChallanToken] [varchar](15) NULL,
	[ChallanDate] [varchar](8) NULL,
	[Amount] [varchar](18) NULL,
	[Notes] [varchar](255) NULL,
	[BankCode] [varchar](25) NULL,
	[BranchCode] [varchar](60) NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_SF_challanSet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_SF_challanSet", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_SF_goservSet

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_SF_goservSet", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1NBRApi_SF_goservSet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MSGID] [varchar](20) NULL,
	[FieldID] [varchar](5) NULL,
	[ValueBasevalueVAT] [varchar](18) NULL,
	[SD] [varchar](18) NULL,
	[VAT] [varchar](18) NULL,
	[HSCommercialDescription] [varchar](255) NULL,
	[Notes] [varchar](255) NULL,
	[Quantity] [varchar](13) NULL,
	[ActualSalesPurchasesValue] [varchar](18) NULL,
	[UnitMeasure] [varchar](10) NULL,
	[ItemID] [varchar](10) NULL,
	[Category] [varchar](2) NULL,
	[DataSource] [varchar](1) NULL,
	[BoeNo] [varchar](50) NULL,
	[BoEDate] [varchar](8) NULL,
	[BoEOficeCode] [varchar](20) NULL,
	[BoEItemNo] [varchar](20) NULL,
	[CPCCode] [varchar](50) NULL,
	[AssessableValue] [varchar](18) NULL,
	[AT] [varchar](18) NULL,
	[InvoiceNo] [varchar](20) NULL,
	[InvoiceDate] [varchar](8) NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_SF_goservSet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_SF_goservSet", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_SF_otherSet

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_SF_otherSet", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1NBRApi_SF_otherSet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MSGID] [varchar](20) NULL,
	[FieldID] [varchar](5) NULL,
	[ChallanNumber] [varchar](15) NULL,
	[Date] [varchar](8) NULL,
	[Value] [varchar](17) NULL,
	[VAT] [varchar](17) NULL,
	[SD] [varchar](17) NULL,
	[PurposeNotes] [varchar](255) NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_SF_otherSet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_SF_otherSet", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1NBRApi_SF_vdsSet

                if (commonDal.NewTableExistCheck("VAT9_1NBRApi_SF_vdsSet", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1NBRApi_SF_vdsSet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MSGID] [varchar](20) NULL,
	[FieldID] [varchar](20) NULL,
	[BuyerSupplyerBIN] [varchar](13) NULL,
	[BuyerSupplyerName] [varchar](255) NULL,
	[BuyerSupplyerAddress] [varchar](255) NULL,
	[Value] [varchar](18) NULL,
	[DeductedVAT] [varchar](18) NULL,
	[InvoiceNoChallanBillNo] [varchar](50) NULL,
	[InvoiceChallanBillDate] [varchar](8) NULL,
	[VATDeductionatSource] [varchar](60) NULL,
	[VATDeductionatSourceCerDate] [varchar](8) NULL,
	[TaxDepositedSerialBookTransfer] [varchar](60) NULL,
	[TaxDepositedDate] [varchar](8) NULL,
	[Notes] [varchar](255) NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1NBRApi_SF_vdsSet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1NBRApi_SF_vdsSet", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region API Audit table

                #region Sale API Audit

                if (commonDal.NewTableExistCheck("SaleAPIAudit", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[SaleAPIAudit](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](50) NULL,
	[BranchCode] [varchar](50) NULL,
	[User] [varchar](100) NULL,
	[ID] [nvarchar](max) NULL,
	[CustomerCode] [nvarchar](50) NULL,
	[DeliveryAddress] [varchar](max) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[ReferenceNo] [varchar](200) NULL,
	[CurrencyCode] [varchar](20) NULL,
	[VehicleNo] [varchar](100) NULL,
	[VehicleType] [varchar](50) NULL,
	[SaleType] [varchar](20) NULL,
	[TransactionType] [varchar](20) NULL,
	[IsPrint] [char](1) NULL,
	[Post] [char](1) NULL,
	[LCNumber] [varchar](100) NULL,
	[TenderId] [varchar](100) NULL,
	[PreviousInvoiceNo] [varchar](100) NULL,
	[Comments] [varchar](max) NULL,
	[LCBank] [varchar](255) NULL,
	[LCDate] [datetime] NULL,
	[PINo] [varchar](255) NULL,
	[PIDate] [datetime] NULL,
	[BOe] [varchar](255) NULL,
	[EXPFormDate] [datetime] NULL,
	[ItemCode] [varchar](50) NULL,
	[UOM] [varchar](50) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[Type] [varchar](50) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[PromotionalQuantity] [decimal](25, 9) NULL,
	[VATName] [varchar](50) NULL,
	[CommercialName] [varchar](max) NULL,
	[Weight] [varchar](100) NULL,
	[CPCName] [varchar](255) NULL,
	[CommentsD] [varchar](max) NULL,
	[PreviousInvoiceDateTime] [datetime] NULL,
	[PreviousNBRPrice] [decimal](25, 9) NULL,
	[PreviousQuantity] [decimal](25, 9) NULL,
	[PreviousSubTotal] [decimal](25, 9) NULL,
	[PreviousSD] [decimal](25, 9) NULL,
	[PreviousSDAmount] [decimal](25, 9) NULL,
	[PreviousVATRate] [decimal](25, 9) NULL,
	[PreviousVATAmount] [decimal](25, 9) NULL,
	[PreviousUOM] [varchar](20) NULL,
	[ReasonOfReturn] [varchar](500) NULL,
	[ProcessDateTime] [datetime] NULL,

 CONSTRAINT [PK_SaleAPIAudit] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("SaleAPIAudit", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region Purchase API Audit

                if (commonDal.NewTableExistCheck("PurchaseAPIAudit", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[PurchaseAPIAudit](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](50) NULL,
	[BranchCode] [varchar](10) NULL,
	[User] [varchar](50) NULL,
	[ID] [nvarchar](max) NULL,
	[VendorCode] [varchar](20) NULL,
	[InvoiceDate] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[RebateDate] [datetime] NULL,
	[IsRebate] [char](1) NULL,
	[LCNo] [varchar](20) NULL,
	[BENumber] [varchar](20) NULL,
	[ReferenceNo] [varchar](max) NULL,
	[TransactionType] [varchar](50) NULL,
	[WithVDS] [char](1) NULL,
	[Post] [char](1) NULL,
	[Comments] [varchar](max) NULL,
	[ItemCode] [varchar](50) NULL,
	[UOM] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[Type] [varchar](20) NULL,
	[CDAmount] [decimal](25, 9) NULL,
	[RDAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[ATAmount] [decimal](25, 9) NULL,
	[AITAmount] [decimal](25, 9) NULL,
	[OthersAmount] [decimal](25, 9) NULL,
	[Remarks] [varchar](max) NULL,
	[ProcessDateTime] [datetime] NULL,

 CONSTRAINT [PK_PurchaseAPIAudit] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("PurchaseAPIAudit", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region Transfer API Audit

                if (commonDal.NewTableExistCheck("TransferAPIAudit", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[TransferAPIAudit](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](50) NULL,
	[BranchCode] [varchar](10) NULL,
	[User] [varchar](50) NULL,
	[ID] [nvarchar](max) NULL,
	TransferToBranchCode [varchar](50) NULL,
    TransactionDateTime DATETIME,
    VehicleNo [varchar](50) NULL,
    VehicleType [varchar](50) NULL,
    ReferenceNo [varchar](50) NULL,
    TransactionType [varchar](50) NULL,
    Post [varchar](1) NULL,
    Comments [varchar](MAX) NULL,
    ItemCode [varchar](50) NULL,
    UOM [varchar](50) NULL,
    Quantity DECIMAL(25, 9),
    CostPrice DECIMAL(25, 9),
    VATRate DECIMAL(25, 9),
    [Weight] [varchar](50) NULL,
    CommentsD [varchar](MAX) NULL,
	[ProcessDateTime] [datetime] NULL,

 CONSTRAINT [PK_TransferAPIAudit] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("TransferAPIAudit", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region Issue API Audit

                if (commonDal.NewTableExistCheck("IssueAPIAudit", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[IssueAPIAudit](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[BIN] [varchar](50) NULL,
	[BranchCode] [varchar](10) NULL,
	[User] [varchar](50) NULL,
	[ID] [nvarchar](max) NULL,
    IssueDateTime DATETIME,
    ReferenceNo [varchar](50) NULL,
    ReturnId [varchar](50) NULL,
    Post [varchar](1) NULL,
    Comments [varchar](MAX) NULL,
    ItemCode [varchar](50) NULL,
    UOM [varchar](50) NULL,
    Quantity DECIMAL(25, 9),
	[ProcessDateTime] [datetime] NULL,

 CONSTRAINT [PK_IssueAPIAudit] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("IssueAPIAudit", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #endregion

                #region BERGER Audit table

                if (CompanyCode.ToUpper() == "BERGER")
                {
                    #region SalesAudit

                    if (commonDal.NewTableExistCheck("SalesAudits", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[SalesAudits](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Company] [varchar](50) NULL,
	[BillingDate] [date] NULL,
	[OrderDoc] [varchar](255) NULL,
	[DeliveryDoc] [varchar](600) NULL,
	[BillingDoc] [varchar](255) NULL,
	[AccountGroup] [varchar](255) NULL,
	[BusArea] [varchar](100) NULL,
	[BillingTime] [varchar](50) NULL,
	[CustomerNo] [varchar](100) NULL,
	[CustomerName] [varchar](500) NULL,
	[CustomerAddress] [varchar](600) NULL,
	[MaterialNo] [varchar](100) NULL,
	[MaterialName] [varchar](200) NULL,
	[fkimg_meins] [varchar](300) NULL,
	[BillQty] [decimal](18, 9) NULL,
	[UoM] [varchar](20) NULL,
	[waerk] [varchar](50) NULL,
	[Revenue] [decimal](18, 9) NULL,
	[UnitPrice] [decimal](18, 9) NULL,
	[VATAmount] [decimal](18, 9) NULL,
	[VatPct] [decimal](18, 9) NULL,
	[SdAmount] [decimal](18, 9) NULL,
	[SdPct] [decimal](18, 9) NULL,
	[CollTax] [decimal](18, 9) NULL,
	[DisAmount] [decimal](18, 9) NULL,
	[StorageLoc] [varchar](255) NULL,
	[ItemCat] [varchar](255) NULL,
	[VehicleType] [varchar](255) NULL,
	[VehicleNo] [varchar](255) NULL,
	[MovementType] [varchar](255) NULL,
	[DeliveryAddress] [varchar](600) NULL,
	[belnr] [varchar](255) NULL,
	[gjahr] [varchar](255) NULL,
	[vkorg] [varchar](255) NULL,
	[matkl] [varchar](255) NULL,
	[ProcessDateTime] [datetime] NULL,
 CONSTRAINT [PK_SalesAudits] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("SalesAudits", sqlText, currConn, transaction, connVM);
                    }
                    #endregion

                }

                #endregion

                #region VAT9_1SubFormA

                if (commonDal.NewTableExistCheck("VAT9_1SubFormA", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormA](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductDescription] [varchar](max) NULL,
	[ProductName] [varchar](max) NULL,
	[ProductCode] [varchar](50) NULL,
	[DetailRemarks] [varchar](2000) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormA] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormA", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormB

                if (commonDal.NewTableExistCheck("VAT9_1SubFormB", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormB](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[Invoice/B/E No] [varchar](50) NULL,
	[Date] [datetime] NULL,
	[OfficeCode] [varchar](50) NULL,
	[BE_ItemNo] [varchar](100) NULL,
	[CPC] [varchar](200) NULL,
	[Assessablevalue] [decimal](25, 9) NULL,
	[BasevalueofVAT] [decimal](25, 9) NULL,
	[VAT] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[AT] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductDescription] [varchar](max) NULL,
	[ProductName] [varchar](max) NULL,
	[ProductCode] [varchar](50) NULL,
	[DetailRemarks] [varchar](2000) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormB] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormB", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormC

                if (commonDal.NewTableExistCheck("VAT9_1SubFormC", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormC](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductDescription] [varchar](max) NULL,
	[ProductName] [varchar](max) NULL,
	[ProductCode] [varchar](50) NULL,
	[DetailRemarks] [varchar](2000) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormC] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormC", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormD

                if (commonDal.NewTableExistCheck("VAT9_1SubFormD", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormD](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductDescription] [varchar](max) NULL,
	[ProductName] [varchar](max) NULL,
	[ProductCode] [varchar](50) NULL,
	[DetailRemarks] [varchar](2000) NULL,
	[ProductCategory] [varchar](120) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormD] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormD", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormE

                if (commonDal.NewTableExistCheck("VAT9_1SubFormE", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormE](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[BillDeductAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[VendorName] [varchar](max) NULL,
	[VendorBIN] [varchar](50) NULL,
	[VendorAddress] [varchar](max) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[VDSAmount] [decimal](25, 9) NULL,
	[InvoiceNo] [varchar](100) NULL,
	[InvoiceDate] [datetime] NULL,
	[VDSCertificateNo] [varchar](20) NULL,
	[VDSCertificateDate] [datetime] NULL,
	[AccountCode] [varchar](120) NULL,
	[TaxDepositSerialNo] [varchar](50) NULL,
	[TaxDepositDate] [datetime] NULL,
	[DetailRemarks] [varchar](20) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormE] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormE", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormF

                if (commonDal.NewTableExistCheck("VAT9_1SubFormF", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1SubFormF](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[DebitNoteNo] [varchar](20) NULL,
	[IssuedDate] [datetime] NULL,
	[TaxChallanNo] [varchar](20) NULL,
	[TaxChallanDate] [datetime] NULL,
	[ReasonforIssuance] [varchar](500) NULL,
	[ValueinChallan] [decimal](25, 9) NULL,
	[QuantityinChallan] [decimal](25, 9) NULL,
	[VATinChallan] [decimal](25, 9) NULL,
	[SDinChallan] [decimal](25, 9) NULL,
	[ValueofIncreasingAdjustment] [decimal](25, 9) NULL,
	[QuantityofIncreasingAdjustment] [decimal](25, 9) NULL,
	[VATofIncreasingAdjustment] [decimal](25, 9) NULL,
	[SDofIncreasingAdjustment] [decimal](25, 9) NULL,
	[Remarks] [varchar](50) NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductDescription] [varchar](max) NULL,
	[ProductName] [varchar](max) NULL,
	[SubFormName] [varchar](50) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormF] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormF", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VATReturnSubFormG

                if (commonDal.NewTableExistCheck("VAT9_1SubFormG", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormG](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[AdjType] [varchar](50) NULL,
	[AdjName] [varchar](500) NULL,
	[ChallanNumber] [varchar](50) NULL,
	[Date] [datetime] NULL,
	[Amount] [decimal](25, 9) NULL,
	[VAT] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[Notes] [varchar](50) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormG] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormG", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormH

                if (commonDal.NewTableExistCheck("VAT9_1SubFormH", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormH](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[BillDeductAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[CustomerName] [nvarchar](max) NULL,
	[CustomerBIN] [varchar](50) NULL,
	[CustomerAddress] [nvarchar](1000) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[VDSAmount] [decimal](25, 9) NULL,
	[PurchaseNumber] [varchar](50) NULL,
	[InvoiceNo] [varchar](50) NULL,
	[InvoiceDate] [datetime] NULL,
	[VDSCertificateNo] [varchar](50) NULL,
	[VDSCertificateDate] [datetime] NULL,
	[AccountCode] [varchar](50) NULL,
	[SerialNo] [varchar](120) NULL,
	[TaxDepositDate] [datetime] NULL,
	[DetailRemarks] [varchar](20) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormH] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormH", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormI

                if (commonDal.NewTableExistCheck("VAT9_1SubFormI", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormI](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[Column1] [decimal](25, 9) NULL,
	[Column2] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[Date] [datetime] NULL,
	[CustomHouse] [varchar](500) NULL,
	[BENumber] [varchar](200) NULL,
	[DetailRemarks] [varchar](2000) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormI] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormI", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormJ

                if (commonDal.NewTableExistCheck("VAT9_1SubFormJ", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VAT9_1SubFormJ](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[CreditNoteNo] [varchar](20) NULL,
	[IssuedDate] [datetime] NULL,
	[TaxChallanNo] [varchar](20) NULL,
	[TaxChallanDate] [datetime] NULL,
	[ReasonforIssuance] [varchar](500) NULL,
	[ValueinChallan] [decimal](25, 9) NULL,
	[QuantityinChallan] [decimal](25, 9) NULL,
	[VATinChallan] [decimal](25, 9) NULL,
	[SDinChallan] [decimal](25, 9) NULL,
	[ValueofDecreasingAdjustment] [decimal](25, 9) NULL,
	[QuantityofDecreasingAdjustment] [decimal](25, 9) NULL,
	[VATofDecreasingAdjustment] [decimal](25, 9) NULL,
	[SDofDecreasingAdjustment] [decimal](25, 9) NULL,
	[Remarks] [nvarchar](500) NULL,
	[ItemNo] [nchar](10) NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ProductName] [nvarchar](500) NULL,
	[SubFormName] [varchar](50) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormJ] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormJ", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormK

                if (commonDal.NewTableExistCheck("VAT9_1SubFormK", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormK](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[Branch] [varchar](120) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[Amount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[Remarks] [nvarchar](500) NULL,
	[SubFormName] [varchar](50) NULL,
	[ChallanNumber] [varchar](50) NULL,
	[BankName] [varchar](120) NULL,
	[BankBranch] [varchar](120) NULL,
	[Date] [datetime] NULL,
	[AccountCode] [varchar](120) NULL,
	[DepositId] [varchar](20) NULL,
	[DetailRemarks] [varchar](2000) NULL,
	[PeriodID] [varchar](6) NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VAT9_1SubFormK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormK", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VAT9_1SubFormCheck

                if (commonDal.NewTableExistCheck("VAT9_1SubFormCheck", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VAT9_1SubFormCheck](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PeriodID] [varchar](6) NULL,
 CONSTRAINT [PK_VAT9_1SubFormCheck] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("VAT9_1SubFormCheck", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region MailSettings

                if (commonDal.NewTableExistCheck("MailSettings", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[MailSettings](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](max) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_MailSettings] PRIMARY KEY CLUSTERED 
(
	[SettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("MailSettings", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Audits

                if (commonDal.NewTableExistCheck("Audits", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[Audits](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FiscalYear] [varchar](50) NULL,
	[FileName] [varchar](150) NULL,
	[FilePath] [varchar](150) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Audits] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("Audits", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region CP Audit table

                if (CompanyCode.ToLower() == "cp")
                {
                    #region SalesAudit

                    if (commonDal.NewTableExistCheck("SalesAudit", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[SalesAudit](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [nvarchar](max) NULL,
	[Branch_Code] [nvarchar](100) NULL,
	[CustomerGroup] [nvarchar](100) NULL,
	[Customer_Name] [varchar](500) NULL,
	[Customer_Code] [nvarchar](50) NULL,
	[Delivery_Address] [nvarchar](1000) NULL,
	[Invoice_Date_Time] [datetime] NULL,
	[Delivery_Date_Time] [datetime] NULL,
	[Reference_No] [varchar](6000) NULL,
	[Comments] [varchar](2000) NULL,
	[Sale_Type] [nvarchar](100) NULL,
	[Vehicle_No] [nvarchar](100) NULL,
	[VehicleType] [varchar](200) NULL,
	[Previous_Invoice_No] [nvarchar](100) NULL,
	[Is_Print] [nchar](1) NULL,
	[Tender_Id] [nvarchar](100) NULL,
	[Post] [varchar](1) NULL,
	[LC_Number] [nvarchar](100) NULL,
	[Currency_Code] [nvarchar](50) NULL,
	[CommentsD] [nvarchar](700) NULL,
	[Item_Code] [nvarchar](100) NULL,
	[Item_Name] [nvarchar](100) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBR_Price] [decimal](25, 9) NULL,
	[UOM] [nvarchar](100) NULL,
	[VAT_Rate] [decimal](25, 9) NULL,
	[SD_Rate] [decimal](25, 9) NULL,
	[Non_Stock] [nvarchar](100) NULL,
	[Trading_MarkUp] [decimal](25, 9) NULL,
	[Type] [nvarchar](100) NULL,
	[Discount_Amount] [decimal](25, 9) NULL,
	[Promotional_Quantity] [decimal](25, 9) NULL,
	[VAT_Name] [nvarchar](100) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[VAT_Amount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TransactionType] [nvarchar](50) NULL,
	[ExpDescription] [nvarchar](100) NULL,
	[ExpQuantity] [nvarchar](100) NULL,
	[ExpGrossWeight] [nvarchar](100) NULL,
	[ExpNetWeight] [nvarchar](100) NULL,
	[ExpNumberFrom] [nvarchar](100) NULL,
	[ExpNumberTo] [nvarchar](100) NULL,
	[ReturnId] [int] NULL,
    [ProcessDate] [datetime] NULL,
 CONSTRAINT [PK_SalesAudit] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("SalesAudit", sqlText, currConn, transaction, connVM);
                    }
                    #endregion

                    #region ReceiveAudit

                    if (commonDal.NewTableExistCheck("ReceiveAudit", currConn, transaction, connVM) == 0)
                    {

                        sqlText = " ";
                        sqlText = @"
CREATE TABLE [dbo].[ReceiveAudit](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[Receive_DateTime] [datetime] NULL,
	[Reference_No] [varchar](6000) NULL,
	[Comments] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[With_Toll] [varchar](1) NULL,
	[Item_Code] [varchar](100) NULL,
	[Item_Name] [varchar](100) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBR_Price] [decimal](25, 9) NULL,
	[UOM] [varchar](100) NULL,
	[VAT_Name] [varchar](50) NULL,
	[CustomerCode] [varchar](100) NULL,
	[Transection_Type] [varchar](50) NULL,
    [ProcessDate] [datetime] NULL,
 CONSTRAINT [PK_ReceiveAudit] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                        transResult = commonDal.NewTableAdd("ReceiveAudit", sqlText, currConn, transaction, connVM);
                    }
                    #endregion

                }


                #endregion

                #region ProductPriceHistorys

                if (commonDal.NewTableExistCheck("ProductPriceHistorys", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[ProductPriceHistorys](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductCode] [varchar](50) NULL,
	[EffectDate] [datetime] NULL,
	[VatablePrice] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_ProductPriceHistorys] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("ProductPriceHistorys", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region StockUpdateTracking

                if (commonDal.NewTableExistCheck("StockUpdateTracking", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[StockUpdateTracking](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StockId] [int] NULL,
 CONSTRAINT [PK_StockUpdateTracking] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("StockUpdateTracking", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region UserSecurityLog

                if (commonDal.NewTableExistCheck("UserSecurityLog", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[UserSecurityLog](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[IP] [varchar](50) NULL,
	[UserAgent] [varchar](50) NULL,
	[type] [varchar](50) NULL,
	[pcName] [varchar](50) NULL,
	[LoginTime] [varchar](50) NULL,
 CONSTRAINT [PK_UserSecurityLog] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] ";
                    transResult = commonDal.NewTableAdd("UserSecurityLog", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region BillInvoiceHeaders

                if (commonDal.NewTableExistCheck("BillInvoiceHeaders", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[BillInvoiceHeaders](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BillNo] [varchar](50) NOT NULL,
	[BranchId] [varchar](20) NULL,
	[BillDate] [datetime] NULL,
	[CustomerID] [varchar](20) NOT NULL,
	[PONo] [varchar](50) NULL,
	[ChallanNo] [varchar](50) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[PeriodID] [varchar](6) NULL,
	[Option1] [varchar](200) NULL,
	[Option2] [varchar](200) NULL,
	[Option3] [varchar](200) NULL,
	[Option4] [varchar](200) NULL,
	[Option5] [varchar](200) NULL,
	[Option6] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_BillInvoiceHeaders] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("BillInvoiceHeaders", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region BillInvoiceDetails

                if (commonDal.NewTableExistCheck("BillInvoiceDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[BillInvoiceDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BillId] [int] NOT NULL,
	[BillNo] [varchar](20) NOT NULL,
	[BillDate] [datetime] NULL,
	[BranchId] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
    [ItemNo] [varchar](20) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[PeriodID] [varchar](6) NULL,
	[Option1] [varchar](200) NULL,
	[Option2] [varchar](200) NULL,
	[Option3] [varchar](200) NULL,
	[Option4] [varchar](200) NULL,
	[Option5] [varchar](200) NULL,
	[Option6] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_BillInvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("BillInvoiceDetails", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region CustomerTempData

                if (commonDal.NewTableExistCheck("CustomerTempData", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[CustomerTempData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CustomerID] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[CustomerCode] [varchar](100) NULL,
	[CustomerName] [nvarchar](max) NULL,
	[CustomerGroupID] [varchar](20) NULL,
	[Address1] [nvarchar](1000) NULL,
	[StartDateTime] [datetime] NULL,
	[VATRegistrationNo] [varchar](500) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,
	[CustomerGroup] [nvarchar](100) NULL,
 CONSTRAINT [PK_CustomerTempData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("CustomerTempData", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region ProductMapDetails

                if (commonDal.NewTableExistCheck("ProductMapDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[ProductMapDetails](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductMappingCode] [varchar](50) NULL,
	[ProductDescription] [varchar](max) NULL,
	[ProductCode] [varchar](50) NULL,
 CONSTRAINT [PK_ProductMapDetails] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("ProductMapDetails", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region ErrorLogs

                if (commonDal.NewTableExistCheck("ErrorLogs", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[ErrorLogs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ImportId] [varchar](MAX) NULL,
	[ErrorDate] [datetime] NULL,
	[FileName] [varchar](500) NULL,
	[ErrorMassage] [varchar](MAX) NULL,
	[ActionName] [varchar](100) NULL,
	[SourceName] [varchar](100) NULL,
	[TransactionName] [varchar](100) NULL,
 CONSTRAINT [PK_ErrorLogs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("ErrorLogs", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region NestleTempTable Trackings

                if (commonDal.NewTableExistCheck("NestleTempTable", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[NestleTempTable](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChallanNo] [nvarchar](50) NULL,
	[SaleCode] [nvarchar](50) NULL,
	[SalesInvoiceNo] [nvarchar](50) NULL,
	[ProductCode] [nvarchar](50) NULL,
	[DSQty] [decimal](25, 9) NULL,
	[DSValue] [decimal](25, 9) NULL,
	[MSaleQty] [decimal](25, 9) NULL,
	[MSaleValue] [decimal](25, 9) NULL,
	[MCreditQty] [decimal](25, 9) NULL,
	[MCreditValue] [decimal](25, 9) NULL,
	[MDebitQty] [decimal](25, 9) NULL,
	[MDebitValue] [decimal](25, 9) NULL,
	[SaleQty] [decimal](25, 9) NULL,
	[SaleValue] [decimal](25, 9) NULL,
	[SaleVAT] [decimal](25, 9) NULL,
	[CreditQty] [decimal](25, 9) NULL,
	[CreditValue] [decimal](25, 9) NULL,
	[CreditVAT] [decimal](25, 9) NULL,
	[DebitQty] [decimal](25, 9) NULL,
	[DebitValue] [decimal](25, 9) NULL,
	[DebitVAT] [decimal](25, 9) NULL,
 CONSTRAINT [PK_NestleTempTable] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("NestleTempTable", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region TransfersIssue Trackings

                if (commonDal.NewTableExistCheck("TransferIssueTrackings", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
    CREATE TABLE [dbo].[TransferIssueTrackings](
	[ItemNo] [varchar](20) NOT NULL,
	[TrackLineNo] [int] NULL,
	[Heading1] [varchar](200) NOT NULL,
	[Heading2] [varchar](200) NULL,
	[Quantity] [int] NULL,
	[TransferIssueNo] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[IsTransfer] [varchar](1) NULL,
	[FinishItemNo] [varchar](20) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[BranchId] [int] NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TransferIssueTrackings] PRIMARY KEY CLUSTERED 
(
	[Heading1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("TransferIssueTrackings", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region VendorsAddress Table

                if (commonDal.NewTableExistCheck("VendorsAddress", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[VendorsAddress](
	[Id] [int] NULL,
	[VendorID] [varchar](20) NULL,
	[VendorAddress] [varchar](500) NULL
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("VendorsAddress", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region CPCDetails Table

                if (commonDal.NewTableExistCheck("CPCDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[CPCDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [nvarchar](50) NULL,
	[Name] [nvarchar](200) NULL,
	[Type] [nvarchar](50) NULL,
	[CreatedBy] [nvarchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [nvarchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_CPCDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("CPCDetails", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region TempTransferIssue_Audit Table

                if (commonDal.NewTableExistCheck("TempTransferIssue_Audit", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[TempTransferIssue_Audit](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[Transaction_Date] [datetime] NULL,
	[Transaction_Time] [datetime] NULL,
	[ProductCode] [varchar](100) NULL,
	[ProductName] [varchar](100) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [varchar](100) NULL,
	[Weight] [varchar](50) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[TransferToBranchCode] [varchar](100) NULL,
	[ReferenceNo] [varchar](100) NULL,
	[VehicleNo] [varchar](30) NULL,
	[VehicleType] [varchar](50) NULL,
	[TransactionType] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[VAT_Rate] [decimal](25, 2) NULL,
	[Comments] [varchar](100) NULL,
	[CommentsD] [varchar](100) NULL,
 CONSTRAINT [PK_TempTransferIssue_Audit] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("TempTransferIssue_Audit", sqlText, currConn, transaction, connVM);
                }

                #endregion


                #region SMC Purchase Data

                if (commonDal.NewTableExistCheck("SMC_PurchaseData", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[SMC_PurchaseData](
	[Sl_No] [varchar](50) NULL,
	[Project] [varchar](50) NULL,
	[Nature] [varchar](50) NULL,
	[Product_Code] [varchar](50) NULL,
	[Product_Name] [varchar](150) NULL,
	[Supplier_Name] [varchar](100) NULL,
	[Supplier_BillNo] [varchar](50) NULL,
	[UOM] [varchar](50) NULL,
	[HS_Code] [varchar](50) NULL,
	[Challan_No] [varchar](50) NULL,
	[InvoiceDate] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[Quantity] [decimal](18, 9) NULL,
	[Vat_Rate] [decimal](18, 9) NULL,
	[Exemted_LocalPrice] [decimal](18, 9) NULL,
	[Exemted_ImportPrice] [decimal](18, 9) NULL,
	[Standard_LocalPrice] [decimal](18, 9) NULL,
	[Standard_LocalVatAmount] [decimal](18, 9) NULL,
	[Standard_ImportPrice] [decimal](18, 9) NULL,
	[Standard_ImportVatAmount] [decimal](18, 9) NULL,
	[AT] [varchar](50) NULL,
	[ATCustomHouse] [varchar](50) NULL,
	[WithoutStandard_LocalPrice] [decimal](18, 9) NULL,
	[WithoutStandard_LocalVatAmount] [decimal](18, 9) NULL,
	[WithoutStandard_ImportPrice] [decimal](18, 9) NULL,
	[WithoutStandard_ImportVatAmount] [decimal](18, 9) NULL,
	[FixedPrice] [decimal](18, 9) NULL,
	[Fixed_VatAmount] [decimal](18, 9) NULL,
	[NonRebateTurnoverOrganizationPrice] [decimal](18, 9) NULL,
	[NonRebateUnregisteredOrganizationPrice] [decimal](18, 9) NULL,
	[NonRebateExemtedPrice] [decimal](18, 9) NULL,
	[Remarks] [varchar](50) NULL
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("SMC_PurchaseData", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Product Customer Rate

                if (commonDal.NewTableExistCheck("ProductCustomerRate", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[ProductCustomerRate](
	[CustomerId] [varchar](50) NULL,
	[ItemNo] [varchar](20) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[TollCharge] [decimal](25, 9) NULL,
	[BranchId] [int] NULL
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("ProductCustomerRate", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Product Transfers

                if (commonDal.NewTableExistCheck("ProductTransfers", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[ProductTransfers](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TransferCode] [nvarchar](50) NULL,
	[TransferDate] [datetime] NULL,
	[BranchId] [int] NULL,
	[IsWastage] [varchar](1) NULL,
	[Post] [varchar](1) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_ProductTransfers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("ProductTransfers", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Product Transfers Details

                if (commonDal.NewTableExistCheck("ProductTransfersDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[ProductTransfersDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductTransferId] [int] NULL,
	[BranchId] [int] NULL,
	[FromItemNo] [varchar](20) NULL,
	[FromUOM] [varchar](120) NULL,
	[FromQuantity] [decimal](18, 5) NULL,
	[FromUOMConversion] [decimal](18, 5) NULL,
	[ToItemNo] [varchar](20) NULL,
	[ToUOM] [varchar](120) NULL,
	[ToQuantity] [decimal](18, 5) NULL,
	[IsWastage] [varchar](1) NULL,
	[TransferDate] [datetime] NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_ProductTransfersDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                    transResult = commonDal.NewTableAdd("ProductTransfersDetails", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Company Category

                if (commonDal.NewTableExistCheck("CompanyCategory", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[CompanyCategory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CATEGORY_ID] [nvarchar](50) NULL,
	[CATEGORY] [nvarchar](200) NULL,
 CONSTRAINT [PK_CompanyCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("CompanyCategory", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Bank Channel Payment

                if (commonDal.NewTableExistCheck("BankChannelPayment", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"
CREATE TABLE [dbo].[BankChannelPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PurchaseInvoiceNo] [varchar](20) NULL,
	[BankID] [varchar](20) NULL,
	[PaymentDate] [datetime] NULL,
	[PaymentAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_BankChannelPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("BankChannelPayment", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Channel

                if (commonDal.NewTableExistCheck("Channel", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"


CREATE TABLE [dbo].[Channel](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [nvarchar](50) NULL,
	[Name] [nvarchar](200) NULL,
 CONSTRAINT [PK_Channel] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("Channel", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Client 6_3s

                if (commonDal.NewTableExistCheck("Client6_3s", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"


CREATE TABLE [dbo].[Client6_3s](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNo] [varchar](20) NOT NULL,
	[VendorID] [varchar](20) NULL,
	[Address] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[BranchId] [int] NULL,
	[PeriodId] [int] NULL,
	[SignatoryName] [varchar](200) NULL,
	[SignatoryDesig] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Client6_3s] PRIMARY KEY CLUSTERED 
(
	[InvoiceNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("Client6_3s", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Client 6_3 Details

                if (commonDal.NewTableExistCheck("Client6_3Details", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[Client6_3Details](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNo] [varchar](20) NOT NULL,
	[InvoiceLineNo] [int] NULL,
	[ReceiveNo] [varchar](20) NOT NULL,
	[InvoiceDateTime] [datetime] NULL,
	[ItemNo] [varchar](100) NULL,
	[UOM] [varchar](20) NULL,
	[Quantity] [decimal](18, 9) NULL,
	[UnitPrice] [decimal](18, 9) NULL,
	[Subtotal] [decimal](18, 9) NULL,
	[SDRate] [decimal](18, 9) NULL,
	[SDAmount] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 9) NULL,
	[VATAmount] [decimal](18, 9) NULL,
	[LineTotalAmount] [decimal](18, 9) NULL,
	[BranchId] [int] NULL,
	[TransactionType] [varchar](50) NULL,
	[PeriodId] [int] NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Client6_3Details] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("Client6_3Details", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Dispose Finishs

                if (commonDal.NewTableExistCheck("DisposeFinishs", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"


CREATE TABLE [dbo].[DisposeFinishs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[DisposeNo] [varchar](20) NOT NULL,
	[TransactionDateTime] [datetime] NULL,
	[ShiftId] [int] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NOT NULL,
	[UOM] [varchar](120) NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[OfferUnitPrice] [decimal](25, 9) NULL,
	[IsSaleable] [varchar](1) NULL,
	[BOMId] [int] NULL,
	[ReferenceNo] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[IsSynced] [varchar](1) NULL,
	[FiscalYear] [varchar](20) NULL,
	[AppVersion] [varchar](100) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[PeriodId] [varchar](6) NULL,
 CONSTRAINT [PK_DisposeFinishs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("DisposeFinishs", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Dispose Finish Details

                if (commonDal.NewTableExistCheck("DisposeFinishDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"


CREATE TABLE [dbo].[DisposeFinishDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DisposeNo] [varchar](20) NOT NULL,
	[DisposeLineNo] [int] NULL,
	[BranchId] [int] NULL,
	[TransactionDateTime] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[UOM] [varchar](120) NULL,
	[UsedQuantity] [decimal](25, 9) NULL,
	[PurchaseNo] [varchar](20) NOT NULL,
	[PurchaseQuantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[RebateVATAmount] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[Comments] [varchar](200) NULL,
	[IsSynced] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[PeriodId] [varchar](6) NULL,
 CONSTRAINT [PK_DisposeFinishDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("DisposeFinishDetails", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Dispose Raws

                if (commonDal.NewTableExistCheck("DisposeRaws", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"


CREATE TABLE [dbo].[DisposeRaws](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[DisposeNo] [varchar](20) NOT NULL,
	[TransactionDateTime] [datetime] NULL,
	[ShiftId] [int] NULL,
	[ReferenceNo] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
    [PeriodID] [varchar](6) NULL,
	[Post] [varchar](1) NULL,
	[IsSynced] [varchar](1) NULL,
	[FiscalYear] [varchar](20) NULL,
	[AppVersion] [varchar](100) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("DisposeRaws", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region Dispose Raw Details

                if (commonDal.NewTableExistCheck("DisposeRawDetails", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"


CREATE TABLE [dbo].[DisposeRawDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[DisposeNo] [varchar](20) NOT NULL,
	[PurchaseNo] [varchar](20) NOT NULL,
	[SaleNo] [varchar](20) NOT NULL,
	[DisposeLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDateTime] [datetime] NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[ATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[OfferUnitPrice] [decimal](25, 9) NULL,
    [PeriodID] [varchar](6) NULL,
	[Post] [varchar](1) NULL,
	[IsSaleable] [varchar](1) NULL,
	[Comments] [varchar](200) NULL,
	[IsSynced] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]


";
                    transResult = commonDal.NewTableAdd("DisposeRawDetails", sqlText, currConn, transaction, connVM);
                }

                #endregion

                #region PurchaseRegister_VAT6_1s
                if (commonDal.NewTableExistCheck("PurchaseRegister_VAT6_1s", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[PurchaseRegister_VAT6_1s](
	[ID] [int] IDENTITY(1,1) NOT NULL,                           
	[SerialNo] [nvarchar](50) NULL,                                    
	[StartDateTime] [datetime] NULL,                                   
	[StartingQuantity] [decimal](25, 9) NULL,                          
	[StartingAmount] [decimal](25, 9) NULL,                            
	[TransID] [nvarchar](100) NULL,                                    
	[TransType] [nvarchar](100) NULL,                                  
	[VendorName] [nvarchar](100) NULL,                     
	[Address1] [nvarchar](200) NULL,                          
	[Address2] [nvarchar](200) NULL,                          
	[Address3] [nvarchar](200) NULL,                          
	[VATRegistrationNo] [nvarchar](100) NULL,                 
	[ProductName] [nvarchar](100) NULL,                       
	[Quantity] [decimal](25, 9) NULL,                  
	[VATRate] [decimal](25, 9) NULL,                   
	[SD] [decimal](25, 9) NULL,                      
	[UnitCost] [decimal](25, 9) NULL,                    
	[HSCodeNo] [nvarchar](100) NULL,                  
	[BENumber]  [nvarchar](100) NULL,                  
	[InvoiceDateTime] [datetime] NULL,                  
	[Remarks] [nvarchar](200) NULL,                     
	[ItemNo] [nvarchar](100) NULL,                   
	[CreatedDateTime] [datetime] NULL,  
                                                      	
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("PurchaseRegister_VAT6_1s", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region SaleRegister_VAT6_2s
                if (commonDal.NewTableExistCheck("SaleRegister_VAT6_2s", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[SaleRegister_VAT6_2s](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [nvarchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [nvarchar](100) NULL,
	[TransType] [nvarchar](100) NULL,
	[CustomerName] [nvarchar](100) NULL,
	[Address1] [nvarchar](200) NULL,
	[Address2] [nvarchar](200) NULL,
	[Address3] [nvarchar](200) NULL,
	[VATRegistrationNo] [nvarchar](100) NULL,
	[ProductName] [nvarchar](100) NULL,
	[HSCodeNo] [nvarchar](100) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[remarks] [nvarchar](200) NULL,
	[CreatedDateTime] [datetime] NULL,
	[UnitRate] [decimal](25, 9) NULL,
	[ItemNo] [nvarchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("SaleRegister_VAT6_2s", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region ProductStockMISKas
                if (commonDal.NewTableExistCheck("ProductStockMISKas", currConn, transaction, connVM) == 0)
                {

                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[ProductStockMISKas](

[Id]					[int] IDENTITY(1,1) NOT NULL,
[SerialNo]				[varchar](100) NULL,
[StartDateTime]			[datetime] NULL,
[StartingQuantity]		[decimal](25, 8) NULL,
[StartingAmount]		[decimal](25, 8) NULL,
[TransID]				[varchar](200) NULL,
[TransType]				[varchar](200) NULL,
[VendorName]			[varchar](200) NULL,
[Address1]				[varchar](200) NULL,
[Address2]				[varchar](200) NULL,
[Address3]				[varchar](200) NULL,
[VATRegistrationNo]		[varchar](200) NULL,
[ProductName]			[varchar](200) NULL,
[Quantity]				[decimal](25, 8) NULL,
[VATRate]				[decimal](25, 8) NULL,
[SD]					[decimal](25, 8) NULL,
[UnitCost]				[decimal](25, 8) NULL,
[HSCodeNo]				[varchar](200) NULL,
[BENumber]				[varchar](200) NULL,
[InvoiceDateTime]		[datetime] NULL,
[Remarks]				[varchar](200) NULL,
[ItemNo]				[varchar](200) NULL,
[StockType]				[varchar](200) NULL
 CONSTRAINT [PK_ProductStockMISKas] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                    transResult = commonDal.NewTableAdd("ProductStockMISKas", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region VATReturnHeaders

                if (commonDal.NewTableExistCheck("VATReturnHeaders", currConn, transaction, connVM) == 0)
                {
                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VATReturnHeaders](
	[Id] [int] NOT NULL,
	[UserName] [varchar](500) NULL,
	[Branch] [varchar](500) NULL,
	[Remarks] [varchar](500) NULL,
	[PeriodID] [varchar](6) NULL,
	[PeriodStart] [datetime] NULL,
	[BranchId] [int] NULL,
	[MainOrginalReturn] [nvarchar](1) NULL,
	[LateReturn] [nvarchar](1) NULL,
	[AmendReturn] [nvarchar](1) NULL,
	[FullAdditionalAlternativeReturn] [nvarchar](1) NULL,
	[NoActivites] [nvarchar](1) NULL,
	[NoActivitesDetails] [nvarchar](1000) NULL,
	[DateOfSubmission] [datetime] NULL,
 CONSTRAINT [PK_VATReturnHeaderV2s] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                    transResult = commonDal.NewTableAdd("VATReturnHeaders", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region VATReturnV2s

                if (commonDal.NewTableExistCheck("VATReturnV2s", currConn, transaction, connVM) == 0)
                {
                    sqlText = " ";
                    sqlText = @"

CREATE TABLE [dbo].[VATReturnV2s](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](500) NULL,
	[Branch] [varchar](500) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[LineA] [decimal](18, 5) NULL,
	[LineB] [decimal](18, 5) NULL,
	[LineC] [decimal](18, 5) NULL,
	[SubFormName] [varchar](500) NULL,
	[Remarks] [varchar](500) NULL,
	[PeriodID] [varchar](6) NULL,
	[PeriodStart] [datetime] NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_VATReturnV2s] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                    transResult = commonDal.NewTableAdd("VATReturnV2s", sqlText, currConn, transaction, connVM);
                }
                #endregion

                #region VATReturnV2Details
                //                sqlText = " ";
                //                sqlText = @"
                //
                //CREATE TABLE [dbo].[VATReturnV2Details](
                //	[Id] [int] IDENTITY(1,1) NOT NULL,
                //	[UserName] [varchar](500) NULL,
                //	[Branch] [varchar](500) NULL,
                //	[NoteNo] [int] NULL,
                //	[SubNoteNo] [int] NULL,
                //	[LineA] [decimal](18, 5) NULL,
                //	[LineB] [decimal](18, 5) NULL,
                //	[LineC] [decimal](18, 5) NULL,
                //	[SubFormName] [varchar](500) NULL,
                //	[Remarks] [varchar](500) NULL,
                //	[PeriodID] [varchar](6) NULL,
                //	[PeriodStart] [datetime] NULL,
                //	[BranchId] [int] NULL,
                // CONSTRAINT [PK_VATReturnV2Details] PRIMARY KEY CLUSTERED 
                //(
                //	[Id] ASC
                //)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                //) ON [PRIMARY]
                //
                //
                //";

                //                transResult = commonDal.NewTableAdd("VATReturnV2s", sqlText, currConn, transaction);
                #endregion

                #region VATReturnV2Notes
                string VATReturnV2NotesSql = " ";
                VATReturnV2NotesSql = @"

CREATE TABLE [dbo].[VATReturnV2Notes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NoteNo] [int] NOT NULL,
	[Description] [nvarchar](3000) NOT NULL,
 CONSTRAINT [PK_VATReturnV2Notes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

SET IDENTITY_INSERT [dbo].[VATReturnV2Notes] ON 

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (1, 1, N'Zero Rated Goods/Service (Direct Export)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (2, 2, N'Zero Rated Goods/Service (Deemd Export)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (3, 3, N'Exempted Goods/Service')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (4, 4, N'Standard Rated Goods/Service')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (5, 5, N'Goods Based on MRP')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (6, 6, N'Goods/Service Based on Specific VAT')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (7, 7, N'Goods/Service Other than Standard Rate')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (8, 8, N'Retail/Wholesale/Trade Based Supply')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (9, 9, N'Total Sales Value & Total Payable Taxes')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (10, 10, N'Zero Rated Goods/Service (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (11, 11, N'Zero Rated Goods/Service (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (12, 12, N'Exempted Goods/Service (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (13, 13, N'Exempted Goods/Service (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (14, 14, N'Standard Rated Goods/Service (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (15, 15, N'Standard Rated Goods/Service (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (16, 16, N'Goods/Service Other than Standard Rate (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (17, 17, N'Goods/Service Other than Standard Rate (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (18, 18, N'Goods/Service Based on Specific VAT (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (19, 19, N'Goods/Service Not Admissible for Credit (Local Purchase) (From Turnover Tax Units)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (20, 20, N'Goods/Service Not Admissible for Credit (Local Purchase) (From Unregistered Entities)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (21, 21, N'Goods/Service Not Admissible for Credit (Taxpayers who sell ONLY Exempted/ Specific VAT and Goods/Service Other than Standard Rate/Credits not taken within stipulated time) (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (22, 22, N'Goods/Service Not Admissible for Credit (Taxpayers who sell ONLY Exempted/ Specific VAT and Goods/Service Other than Standard Rate/Credits not taken within stipulated time) (Import )')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (23, 23, N'Total Input Tax Credit')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (24, 24, N'VAT Deducted at Source from Suppliers')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (25, 25, N'Payment Not Made Through Banking Channel')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (26, 26, N'Issuance of Debit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (27, 27, N'Any Other Adjustments (please specify below)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (28, 28, N'Total Increasing Adjustment')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (29, 29, N'Due to VAT Deducted at Source from the Suppliers delivered')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (30, 30, N'Advance Tax Paid at Import Stage')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (31, 31, N'Issuance of Credit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (32, 32, N'Any Other Adjustments (please specify below)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (33, 33, N'Total Decreasing Adjustment')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (34, 34, N'Net Payable VAT for the Tax Period (Section- 45)(9C+23B+28-33)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (35, 35, N'Net Payable VAT for the Tax Period after Adjusted with Closing Balance and Balance of from 18.6 [34+(52+56)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (36, 36, N'Net Payable Supplementary Duty for the Tax Period (Before adjustment with Closing Balance) [9B+38-(39+40)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (37, 37, N'Net Payable Supplementary Duty for the Tax Period after Adjusted with Closing Balance and Balance of from 18.6 [36-(53+57)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (38, 38, N'Supplementary Duty Against Issuance of Debit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (39, 39, N'Supplementary Duty Against Issuance of Credit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (40, 40, N'Supplementary Duty Paid on Inputs Against Exports')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (41, 41, N'Interest on Overdue VAT (Based on note -35)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (42, 42, N'Interest on Overdue SD  (Based on note -37)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (43, 43, N'Fine/Penalty for Non-submission of Return')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (44, 44, N'Other Fine/Penalty/Interest')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (45, 45, N'Payable Excise Duty')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (46, 46, N'Payable Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (47, 47, N'Payable ICT Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (48, 48, N'Payable Health Care Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (49, 49, N'Payable Environmental Protection Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (50, 50, N'Net Payable VAT for treasury Deposit (35+41+43+44)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (51, 51, N'Net Payable SD for treasury Deposit (37+42)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (52, 52, N'Closing Balance of Last Tax Period (VAT)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (53, 53, N'Closing Balance of Last Tax Period (SD)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (54, 54, N'Closing Balance (VAT) up to 30th June, 2019 from Mushak-18.6,[Rule 118(5)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (55, 55, N'Closing Balance (SD) up to 30th June, 2019 from Mushak-18.6,[Rule 118(5)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (56, 56, N'Decreasing Adjustment for Note 54 (up to 10% of Note 34)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (57, 57, N'Decreasing Adjustment for Note 55 (up to 10% of Note 36)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (58, 58, N'VAT Deposit for the Current Tax Period')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (59, 59, N'SD Deposit for the Current Tax Period')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (60, 60, N'Excise Duty')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (61, 61, N'Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (62, 62, N'ICT Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (63, 63, N'Health Care Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (64, 64, N'Environmental Protection Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (65, 65, N'Closing Balance (VAT)  [58-(50+67)+ the refund amount not approved')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (66, 66, N'Closing Balance (SD) [59-(51+68)+ the refund amount not approved')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (67, 67, N'I am interested to get refund of my Closing Balance (Requested Amount for Refund (VAT))')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (68, 68, N'I am interested to get refund of my Closing Balance (Requested Amount for Refund (SD))')

SET IDENTITY_INSERT [dbo].[VATReturnV2Notes] OFF

";

                transResult = commonDal.NewTableAdd("VATReturnV2Notes", VATReturnV2NotesSql, currConn, transaction, connVM);
                #endregion VATReturnV2Notes

                #region branchReport
                string branchReportSql = @"CREATE TABLE [dbo].[BranchReports](
	                [Id] [int] NOT NULL,
	                [Name] [varchar](500) NULL,
	                [DBName] [varchar](50) NULL,
	                [IsSelf] [varchar](1) NULL,
	                [IsHeadOffice] [varchar](1) NULL,
                 CONSTRAINT [PK_BranchReports] PRIMARY KEY CLUSTERED 
                (
	                [Id] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("BranchReports", branchReportSql, currConn, transaction, connVM);
                #endregion

                #region branch
                string branchSql = @" CREATE TABLE [dbo].[Branchs](
	[Id] [int] NOT NULL,
	[Name] [varchar](500) NULL,
	[BrAddress] [varchar](500) NULL,
	[DBName] [varchar](500) NULL,
 CONSTRAINT [PK_Branchs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("Branchs", branchSql, currConn, transaction, connVM);
                #endregion

                #region TransferIssues
                string TransferIssuesSql = @"CREATE TABLE [dbo].[TransferIssues](
	[TransferIssueNo] [varchar](20) NOT NULL,
	[TransactionDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[TransferTo] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_TransferIssues] PRIMARY KEY CLUSTERED 
(
	[TransferIssueNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("TransferIssues", TransferIssuesSql, currConn, transaction, connVM);
                #endregion

                #region TransferIssueDetails
                string TransferIssueDetailsSql = @"CREATE TABLE [dbo].[TransferIssueDetails](
	[TransferIssueNo] [varchar](20) NOT NULL,
	[IssueLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDateTime] [datetime] NULL,
	[TransferTo] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_TransferIssueDetails] PRIMARY KEY CLUSTERED 
(
	[TransferIssueNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("TransferIssueDetails", TransferIssueDetailsSql, currConn, transaction, connVM);
                #endregion

                #region TransferReceives
                string TransferReceivesSql = @"CREATE TABLE [dbo].[TransferReceives](
	[TransferReceiveNo] [varchar](20) NOT NULL,
	[TransactionDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[TransferNo] [varchar](20) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[TransferFrom] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransferFromNo] [varchar](20) NULL,
 CONSTRAINT [PK_TransferReceives] PRIMARY KEY CLUSTERED 
(
	[TransferReceiveNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("TransferReceives", TransferReceivesSql, currConn, transaction, connVM);
                #endregion

                #region TransferReceiveDetails
                string TransferReceiveDetailsSql = @"CREATE TABLE [dbo].[TransferReceiveDetails](
	[TransferReceiveNo] [varchar](20) NOT NULL,
	[ReceiveLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[TransferFrom] [varchar](50) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransferFromNo] [varchar](20) NULL,
 CONSTRAINT [PK_TransferReceiveDetails] PRIMARY KEY CLUSTERED 
(
	[TransferReceiveNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("TransferReceiveDetails", TransferReceiveDetailsSql, currConn, transaction, connVM);
                #endregion

                #region Transfers
                string TransfersSql = @"CREATE TABLE [dbo].[Transfers](
	[TransferNo] [varchar](20) NOT NULL,
	[TransferFromNo] [varchar](20) NOT NULL,
	[TransactionDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[TransferFrom] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Transfers] PRIMARY KEY CLUSTERED 
(
	[TransferNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("Transfers", TransfersSql, currConn, transaction, connVM);
                #endregion

                #region TransferDetails
                string TransferDetailsSql = @"CREATE TABLE [dbo].[TransferDetails](
	[TransferNo] [varchar](20) NOT NULL,
	[TransferLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[TransferFrom] [varchar](50) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransferFromNo] [varchar](20) NULL,
 CONSTRAINT [PK_TransferDetails] PRIMARY KEY CLUSTERED 
(
	[TransferNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("TransferDetails", TransferDetailsSql, currConn, transaction, connVM);
                #endregion

                #region TDSs
                string TDSs = @"CREATE TABLE [dbo].[TDSs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Section] [varchar](500) NULL,
	[Code] [varchar](500) NULL,
	[Description] [varchar](500) NULL,
	[MinValue] [decimal](18, 2) NULL,
	[MaxValue] [decimal](18, 2) NULL,
	[Rate] [decimal](18, 2) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_TDS_52_AAs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

 
SET IDENTITY_INSERT [dbo].[TDSs] ON 

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (1, N'52A', N'52A', N'52A', CAST(1.00 AS Decimal(18, 2)), CAST(1500000.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), N'', N'admin', CAST(0x0000AAC100D176A8 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (2, N'52A', N'52A', N'52A', CAST(1500000.10 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(3.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (3, N'52A', N'52A', N'52A', CAST(2500000.10 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(5.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (4, N'52AA', N'52AA_1', N'Advisory or Consultancy Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), N'', N'admin', CAST(0x0000AACA00DF9E18 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (5, N'52AA', N'52AA_2', N'Professional Service, Technical Services Fee, or Technical Assistance Fee', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), N'', N'admin', CAST(0x0000AABE00E5F1A0 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (6, N'52AA', N'52AA_3_1', N'Catering Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), N'', N'admin', CAST(0x0000AABE00E64150 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (7, N'52AA', N'52AA_3_2', N'Cleaning Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (8, N'52AA', N'52AA_3_3', N'Collection and Recovery Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (9, N'52AA', N'52AA_3_4', N'Private Security Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (10, N'52AA', N'52AA_3_5', N'Manpower Supply Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (11, N'52AA', N'52AA_3_6', N'Creative Media Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (12, N'52AA', N'52AA_3_7', N'Public Relations Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (13, N'52AA', N'52AA_3_8', N'Event Management Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (14, N'52AA', N'52AA_3_9', N'Training, Workshop, etc. Organization and Management Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (15, N'52AA', N'52AA_3_10', N'Courier Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (16, N'52AA', N'52AA_3_11', N'Packing and Shifting Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (17, N'52AA', N'52AA_3_12', N'Any Other Service of Similar Nature                                                   ', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (18, N'52AA', N'52AA_4', N'Media Buying Agency Service                                                                                                     ', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(0.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (19, N'52AA', N'52AA_5', N'Indenting Commission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (20, N'52AA', N'52AA_6', N'Meeting Fees, Training Fees or Honorarium', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (21, N'52AA', N'52AA_7', N'Mobile Network Operator, Technical Support Service Provider or Service Delivery Agents Engaged in Mobile Banking Operations', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (22, N'52AA', N'52AA_8', N'Credit Rating Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), N'', N'admin', CAST(0x0000AABE00E64AB0 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (23, N'52AA', N'52AA_9', N'Motor Garage Or Workshop', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (24, N'52AA', N'52AA_10', N'Private Container Port Or Dockyard Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (25, N'52AA', N'52AA_11', N'Shipping Agency Commission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (26, N'52AA', N'52AA_12', N'Stevedoring/Berth Operation Commission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (27, N'52AA', N'52AA_13', N'Transport Service, Carrying Service, Vehicle Rental Service Or Ride Sharing Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(3.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (28, N'52AA', N'52AA_13A', N'Wheeling Charge For Electricity Transmission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(4.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (29, N'52AA', N'52AA_14', N'Any Other Service Which is not Mentioned in Chapter VII of this Ordinance And is not a Service provided by any Bank, Insurance or Financial Institutions', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (30, N'52AA', N'52AA_1', N'Advisory or Consultancy Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (31, N'52AA', N'52AA_2', N'Professional Service, Technical Services Fee, or Technical Assistance Fee', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (32, N'52AA', N'52AA_3_1', N'Catering Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (33, N'52AA', N'52AA_3_2', N'Cleaning Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (34, N'52AA', N'52AA_3_3', N'Collection and Recovery Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (35, N'52AA', N'52AA_3_4', N'Private Security Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (36, N'52AA', N'52AA_3_5', N'Manpower Supply Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (37, N'52AA', N'52AA_3_6', N'Creative Media Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (38, N'52AA', N'52AA_3_7', N'Public Relations Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (39, N'52AA', N'52AA_3_8', N'Event Management Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (40, N'52AA', N'52AA_3_9', N'Training, Workshop, etc. Organization and Management Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (41, N'52AA', N'52AA_3_10', N'Courier Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (42, N'52AA', N'52AA_3_11', N'Packing and Shifting Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (43, N'52AA', N'52AA_3_12', N'Any Other Service of Similar Nature                                                   ', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (44, N'52AA', N'52AA_4', N'Media Buying Agency Service                                                                                                     ', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(0.65 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (45, N'52AA', N'52AA_5', N'Indenting Commission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (46, N'52AA', N'52AA_6', N'Meeting Fees, Training Fees or Honorarium', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (47, N'52AA', N'52AA_7', N'Mobile Network Operator, Technical Support Service Provider or Service Delivery Agents Engaged in Mobile Banking Operations', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (48, N'52AA', N'52AA_8', N'Credit Rating Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (49, N'52AA', N'52AA_9', N'Motor Garage Or Workshop', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (50, N'52AA', N'52AA_10', N'Private Container Port Or Dockyard Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (51, N'52AA', N'52AA_11', N'Shipping Agency Commission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (52, N'52AA', N'52AA_12', N'Stevedoring/Berth Operation Commission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (53, N'52AA', N'52AA_13', N'Transport Service, Carrying Service, Vehicle Rental Service Or Ride Sharing Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(4.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (54, N'52AA', N'52AA_13A', N'Wheeling Charge For Electricity Transmission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(5.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [IsArchive]) VALUES (55, N'52AA', N'52AA_14', N'Any Other Service Which is not Mentioned in Chapter VII of this Ordinance And is not a Service provided by any Bank, Insurance or Financial Institutions', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL, NULL)

SET IDENTITY_INSERT [dbo].[TDSs] OFF";

                transResult = commonDal.NewTableAdd("TDSs", TDSs, currConn, transaction, connVM);


                #endregion TDSs

                #region HSCodes
                string HSCodes = @"

CREATE TABLE [dbo].[HSCodes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](500) NULL,
	[HSCode] [varchar](1000) NULL,
	[Description] [varchar](1000) NULL,
	[RD] [decimal](18, 2) NULL,
	[CD] [decimal](18, 2) NULL,
	[SD] [decimal](18, 2) NULL,
	[VAT] [decimal](18, 2) NULL,
	[AT] [decimal](18, 2) NULL,
	[AIT] [decimal](18, 2) NULL,
	[OtherSD] [decimal](25, 9) NULL,
	[OtherVAT] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,
	[IsFixedCD] [varchar](1) NULL,
	[IsFixedRD] [varchar](1) NULL,
	[IsFixedSD] [varchar](1) NULL,
	[IsFixedVAT] [varchar](1) NULL,
	[IsFixedAT] [varchar](1) NULL,
	[IsFixedAIT] [varchar](1) NULL,
	[IsFixedOtherVAT] [varchar](1) NULL,
	[IsFixedOtherSD] [varchar](1) NULL,
 CONSTRAINT [PK_HSCodes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 
 ";

                transResult = commonDal.NewTableAdd("HSCodes", HSCodes, currConn, transaction, connVM);


                #endregion HSCodes

                #region CustomerDiscount
                string cusdiscount = @"

CREATE TABLE [dbo].[CustomerDiscounts](
	[Id] [int] NOT NULL,
	[Code] [varchar](500) NULL,
	[Description] [varchar](500) NULL,
	[MinValue] [decimal](18, 2) NULL,
	[MaxValue] [decimal](18, 2) NULL,
	[Rate] [decimal](18, 2) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,
	[Section] [varchar](200) NULL,
 CONSTRAINT [PK_CustomerDiscounts_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
 
 ";

                transResult = commonDal.NewTableAdd("CustomerDiscounts", cusdiscount, currConn, transaction, connVM);


                #endregion HSCodes

                #region TransferDetails
                string PurchaseTDSs = @" CREATE TABLE [dbo].[PurchaseTDSs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PurchaseInvoiceNo] [varchar](20) NULL,
	[TDSCode] [varchar](50) NULL,
	[PurchaseBillAmount] [decimal](18, 2) NULL,
	[TDSAmount] [decimal](18, 2) NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_PurchaseTDSs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("PurchaseTDSs", PurchaseTDSs, currConn, transaction, connVM);
                #endregion

                #region BureauSaleInvoiceDetails
                string BureauSaleInvoiceDetailSql = @"CREATE TABLE [dbo].[BureauSalesInvoiceDetails](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[InvoiceLineNo] [int] NULL,
	[ItemNo] [varchar](20) NULL,
	[InvoiceName] [varchar](120) NOT NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Quantity] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[Type] [varchar](10) NULL,
	[PreviousSalesInvoiceNo] [varchar](200) NULL,
	[ChallanDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[InvoiceCurrency] [varchar](50) NULL,
	[TransactionType] [varchar](50) NULL,
	[CConversionDate] [datetime] NULL,
	[ReturnTransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[CustomerId] [varchar](20) NULL,
	[BureauType] [varchar](50) NULL,
	[BureauId] [varchar](50) NULL,
	[ValueOnly] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
 CONSTRAINT [PK_BureauSalesInvoiceDetails_1] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC,
	[InvoiceName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("BureauSalesInvoiceDetails", BureauSaleInvoiceDetailSql, currConn, transaction, connVM);
                #endregion

                #region DutyDrawBackSaleInvoices
                string DutyDrawBackSaleInvoicesSql = @"
CREATE TABLE [dbo].[DutyDrawBackSaleInvoices](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SalesInvoiceNo] [varchar](50) NULL,
	[SL] [int] NULL,
	[DDBackNo] [varchar](50) NULL,
	[SalesDate] [datetime] NULL,
	[BranchId] [int] NULL
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("DutyDrawBackSaleInvoices", DutyDrawBackSaleInvoicesSql, currConn, transaction, connVM);
                #endregion

                #region PurchaseSaleTrackings
                string PurchaseSaleTrackingsSql = @"
CREATE TABLE [dbo].[PurchaseSaleTrackings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PurchaseInvoiceNo] [varchar](50) NULL,
	[PurchaseInvoiceDateTime] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[ItemNo] [varchar](50) NULL,
	[BENumber] [varchar](500) NULL,
	[SalesInvoiceNo] [varchar](50) NULL,
	[CustomHouse] [varchar](500) NULL,
	[SaleInvoiceDateTime] [datetime] NULL,
	[IsSold] [bit] NULL,
	[VATableValue] [decimal](25, 2) NULL,
	[VATAmount] [decimal](25, 2) NULL,
	[TradeVATableValue] [decimal](25, 5) NULL,
	[TradeVATAmount] [decimal](25, 5) NULL,
	[TradeVATRate] [decimal](25, 5) NULL,
	[TotalValue] [decimal](25, 5) NULL,
	[BranchId] [int] NULL
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("PurchaseSaleTrackings", PurchaseSaleTrackingsSql, currConn, transaction, connVM);
                #endregion

                #region SaleExportInvoices
                string SaleExportInvoicesSql = @"
CREATE TABLE [dbo].[SaleExportInvoices](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SaleExportNo] [varchar](50) NULL,
	[SL] [int] NULL,
	[SalesInvoiceNo] [varchar](50) NULL,
	[BranchId] [int] NULL
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("SaleExportInvoices", SaleExportInvoicesSql, currConn, transaction, connVM);
                #endregion

                #region SaleExports
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[SaleExports](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SaleExportNo] [varchar](50) NULL,
	[SaleExportDate] [varchar](50) NULL,
	[Description] [varchar](1000) NULL,
	[Comments] [varchar](100) NULL,
	[Quantity] [varchar](50) NULL,
	[GrossWeight] [varchar](50) NULL,
	[NetWeight] [varchar](50) NULL,
	[NumberFrom] [varchar](50) NULL,
	[NumberTo] [varchar](50) NULL,
	[PortFrom] [varchar](100) NULL,
	[PortTo] [varchar](100) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](50) NULL,
	[LastModifiedOn] [datetime] NULL,
	[BranchId] [int] NULL
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("SaleExports", sqlText, currConn, transaction, connVM);

                #endregion

                #region TDSs
                ////////                sqlText = " ";
                ////////                sqlText = @"
                ////////CREATE TABLE [dbo].[TDSs](
                ////////	[Id] [int] IDENTITY(1,1) NOT NULL,
                ////////	[Code] [varchar](500) NULL,
                ////////	[Description] [varchar](500) NULL,
                ////////	[MinValue] [decimal](18, 2) NULL,
                ////////	[MaxValue] [decimal](18, 2) NULL,
                ////////	[Rate] [decimal](18, 2) NULL,
                ////////	[Comments] [varchar](200) NULL,
                ////////	[CreatedBy] [varchar](120) NULL,
                ////////	[CreatedOn] [datetime] NULL,
                ////////	[LastModifiedBy] [varchar](120) NULL,
                ////////	[LastModifiedOn] [datetime] NULL,
                //////// CONSTRAINT [PK_TDS_52_AAs] PRIMARY KEY CLUSTERED 
                ////////(
                ////////	[Id] ASC
                ////////)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ////////) ON [PRIMARY]
                ////////";

                ////////                transResult = commonDal.NewTableAdd("TDSs", sqlText, currConn, transaction);

                #endregion

                #region IssueHeaderBOMs
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[IssueHeaderBOMs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[IssueNo] [varchar](20) NOT NULL,
	[IssueDateTime] [datetime] NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[ShiftId] [int] NULL,
 CONSTRAINT [PK_IssueHeaderBOM] PRIMARY KEY CLUSTERED 
(
	[IssueNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("IssueHeaderBOMs", sqlText, currConn, transaction, connVM);

                #endregion

                #region IssueDetailBOMs
                sqlText = " ";
                sqlText = @"
 
CREATE TABLE [dbo].[IssueDetailBOMs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[IssueNo] [varchar](20) NOT NULL,
	[IssueLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IssueDateTime] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[Wastage] [decimal](25, 9) NULL,
	[BOMDate] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[BOMId] [varchar](20) NULL,
	[UOMWastage] [decimal](25, 9) NULL,
	[IsProcess] [varchar](1) NULL,
 CONSTRAINT [PK_IssueDetailBOMs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]



SET ANSI_PADDING OFF


ALTER TABLE [dbo].[IssueDetailBOMs]  WITH CHECK ADD  CONSTRAINT [FK_IssueDetailBOMs_IssueHeaderBOMs] FOREIGN KEY([IssueNo])
REFERENCES [dbo].[IssueHeaderBOMs] ([IssueNo])


ALTER TABLE [dbo].[IssueDetailBOMs] CHECK CONSTRAINT [FK_IssueDetailBOMs_IssueHeaderBOMs]


ALTER TABLE [dbo].[IssueDetailBOMs]  WITH CHECK ADD  CONSTRAINT [FK_IssueDetailBOMs_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])


ALTER TABLE [dbo].[IssueDetailBOMs] CHECK CONSTRAINT [FK_IssueDetailBOMs_Products]

";

                transResult = commonDal.NewTableAdd("IssueDetailBOMs", sqlText, currConn, transaction, connVM);
                #endregion

                #region ReportPurchaseRegister
                sqlText = " ";
                sqlText = @"

CREATE TABLE [dbo].[ReportPurchaseRegister](
	[SerialNo] [varchar](2) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[VendorName] [varchar](200) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[VATRegistrationNo] [varchar](200) NULL,
	[ProductName] [varchar](200) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[HSCodeNo] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[CreateDateTime] [datetime] NULL,
	[UserName] [nvarchar](120) NOT NULL,
	[BranchName] [nvarchar](200) NOT NULL
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("ReportPurchaseRegister", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturns
                sqlText = " ";
                sqlText = @"


CREATE TABLE [dbo].[VATReturns](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](500) NULL,
	[Branch] [varchar](500) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[LineA] [decimal](18, 5) NULL,
	[LineB] [decimal](18, 5) NULL,
	[LineC] [decimal](18, 5) NULL,
	[SubFormName] [varchar](500) NULL,
	[Remarks] [varchar](500) NULL,
 CONSTRAINT [PK_VATReturn] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VATReturns", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturn SubForms A-G

                #region VATReturnSubFormA
                sqlText = " ";
                sqlText = @"

CREATE TABLE [dbo].[VATReturnSubFormA](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ProductCode] [nvarchar](500) NULL,
	[ProductName] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL default 0,
	[SDAmount] [decimal](18, 5) NULL default 0,
	[VATAmount] [decimal](18, 5) NULL default 0,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormA] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VATReturnSubFormA", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturnSubFormB
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[VATReturnSubFormB](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductCategorey] [nvarchar](500) NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ProductCode] [nvarchar](500) NULL,
	[ProductName] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL default 0,
	[SDAmount] [decimal](18, 5) NULL default 0,
	[VATAmount] [decimal](18, 5) NULL default 0,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormB] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VATReturnSubFormB", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturnSubFormC
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[VATReturnSubFormC](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ProductCode] [nvarchar](500) NULL,
	[ProductName] [nvarchar](500) NULL,
	[UOM] [nvarchar](100) NULL,
	[Quantity] [decimal](18, 5) NULL default 0,

	[TotalPrice] [decimal](18, 5) NULL default 0,
	[SDAmount] [decimal](18, 5) NULL default 0,
	[VATAmount] [decimal](18, 5) NULL default 0,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormC] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]



";

                transResult = commonDal.NewTableAdd("VATReturnSubFormC", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturnSubFormD
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[VATReturnSubFormD](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VendorBIN] [nvarchar](500) NULL,
	[VendorName] [nvarchar](500) NULL,
	[VendorAddress] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL default 0,
	[VDSAmount] [decimal](18, 5) NULL default 0,
	[InvoiceNo] [nvarchar](500) NULL,
	[InvoiceDate] [datetime] NULL,
	[AccountCode] [nvarchar](500) NULL,

	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormD] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VATReturnSubFormD", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturnSubFormE
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[VATReturnSubFormE](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CustomerBIN] [nvarchar](500) NULL,
	[CustomerName] [nvarchar](500) NULL,
	[CustomerAddress] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL default 0,
	[VDSAmount] [decimal](18, 5) NULL default 0,
	[InvoiceNo] [nvarchar](500) NULL,
	[InvoiceDate] [datetime] NULL,
	[AccountCode] [nvarchar](500) NULL,

	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormE] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VATReturnSubFormE", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturnSubFormF
                sqlText = " ";
                sqlText = @"

CREATE TABLE [dbo].[VATReturnSubFormF](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BENumber] [nvarchar](500) NULL,
	[Date] [datetime] NULL,
	[CustomHouse] [nvarchar](500) NULL,
	[ATAmount] [decimal](18, 5) NULL default 0,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormF] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VATReturnSubFormF", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturnSubFormG
                sqlText = " ";
                sqlText = @"

CREATE TABLE [dbo].[VATReturnSubFormG](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChallanNumber] [nvarchar](500) NULL,
	[BankName] [nvarchar](500) NULL,
	[BankBranch] [nvarchar](500) NULL,
	[Date] [datetime] NULL,
	[AccountCode] [nvarchar](500) NULL,
	[Quantity] [decimal](18, 5) NULL default 0,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormG] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VATReturnSubFormG", sqlText, currConn, transaction, connVM);
                #endregion

                #endregion

                #region Toll6_3Invoices
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[Toll6_3Invoices](
	[Id] [int] IDENTITY(1,1) NOT NULL
	,[TollNo] [varchar](20) NOT NULL
    ,CustomerID	varchar(20)	NOT NULL
	,[Address] [varchar](200) NULL
	,[TollDateTime] [datetime] NULL
	,[Comments] [varchar](200) NULL
	,[Post] [varchar](1) NULL
	,[CreatedBy] [varchar](120) NULL
	,[CreatedOn] [datetime] NULL
	,[LastModifiedBy] [varchar](120) NULL
	,[LastModifiedOn] [datetime] NULL
 CONSTRAINT [PK_Toll6_3Invoices] PRIMARY KEY CLUSTERED 
(
	[TollNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("Toll6_3Invoices", sqlText, currConn, transaction, connVM);
                #endregion

                #region Toll6_3InvoiceDetails
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[Toll6_3InvoiceDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL
	,[TollNo] [varchar](20) NOT NULL
	,[TollLineNo] [int] NULL
    ,SalesInvoiceNo	varchar(20) NOT NULL
    ,InvoiceDateTime	datetime	NULL
	,[Comments] [varchar](200) NULL
	,[Post] [varchar](1) NULL
	,[CreatedBy] [varchar](120) NULL
	,[CreatedOn] [datetime] NULL
	,[LastModifiedBy] [varchar](120) NULL
	,[LastModifiedOn] [datetime] NULL
 CONSTRAINT [PK_Toll6_3InvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";
                transResult = commonDal.NewTableAdd("Toll6_3InvoiceDetails", sqlText, currConn, transaction, connVM);
                #endregion

                #region SalesTempData
                sqlText = " ";
                sqlText = @"
CREATE TABLE [dbo].[SalesTempData](
	[SL] [bigint] IDENTITY(1,1) NOT NULL,
	[ID] [nvarchar](max) NOT NULL,
	[SalesInvoiceNo] [varchar](40) NULL,
	[Customer_Name] [varchar](500) NOT NULL,
	[Customer_Code] [nvarchar](50) NULL,
	[Delivery_Address] [nvarchar](500) NOT NULL,
	[Vehicle_No] [nvarchar](100) NULL,
	[Invoice_Date_Time] [nvarchar](100) NOT NULL,
	[Delivery_Date_Time] [nvarchar](100) NULL,
	[Reference_No] [nvarchar](100) NULL,
	[Comments] [nvarchar](100) NULL,
	[Sale_Type] [nvarchar](100) NULL,
	[Previous_Invoice_No] [nvarchar](100) NULL,
	[Is_Print] [nchar](1) NULL,
	[Tender_Id] [nvarchar](100) NULL,
	[Post] [varchar](1) NOT NULL,
	[LC_Number] [nvarchar](100) NULL,
	[Currency_Code] [nvarchar](50) NULL,
	[Item_Code] [nvarchar](100) NOT NULL,
	[Item_Name] [nvarchar](100) NOT NULL,
	[Quantity] [decimal](25, 9) NOT NULL,
	[NBR_Price] [decimal](25, 9) NOT NULL,
	[UOM] [nvarchar](100) NOT NULL,
	[VAT_Rate] [decimal](25, 9) NULL,
	[SD_Rate] [decimal](25, 9) NOT NULL,
	[Non_Stock] [nvarchar](100) NULL,
	[Trading_MarkUp] [decimal](25, 9) NULL,
	[Type] [nvarchar](100) NULL,
	[Discount_Amount] [decimal](25, 9) NULL,
	[Promotional_Quantity] [decimal](25, 9) NULL,
	[VAT_Name] [nvarchar](100) NULL,
	[SubTotal] [decimal](25, 9) NOT NULL,
	[IsVATComplete] [char](1) NULL,
	[ItemNo] [varchar](20) NULL,
	[CustomerID] [varchar](20) NULL,
	[IsProcessed] [bit] NULL,
	[Branch_Code] [nvarchar](100) NULL,
	[ExpDescription] [nvarchar](100) NULL,
	[ExpQuantity] [nvarchar](100) NULL,
	[ExpGrossWeight] [nvarchar](100) NULL,
	[ExpNetWeight] [nvarchar](100) NULL,
	[ExpNumberFrom] [nvarchar](100) NULL,
	[ExpNumberTo] [nvarchar](100) NULL,
	[CommentsD] [nvarchar](700) NULL,
	[BranchId] [int] NULL,
	[CurrencyId] [int] NULL,
	[CustomerGroup] [nvarchar](100) NULL,
	[VAT_Amount] [decimal](18, 2) NULL,
	[GroupId] [nvarchar](20) NULL,
	[VehicleID] [nvarchar](20) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[CreatedBy] [nvarchar](100) NULL,
	[CreatedOn] [nvarchar](100) NULL,
	[BOMId] [int] NULL,
	[TransactionType] [nvarchar](50) NULL,
	[ReturnId] [int] NULL,
 CONSTRAINT [PK_SalesTempData] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[SalesTempData] ADD  CONSTRAINT [DF_SalesTempData_ItemNo]  DEFAULT ('0') FOR [ItemNo]


ALTER TABLE [dbo].[SalesTempData] ADD  CONSTRAINT [DF_SalesTempData_CustomerID]  DEFAULT ('0') FOR [CustomerID]


ALTER TABLE [dbo].[SalesTempData] ADD  CONSTRAINT [DF_SalesTempData_IsProcessed]  DEFAULT ((0)) FOR [IsProcessed]";
                transResult = commonDal.NewTableAdd("SalesTempData", sqlText, currConn, transaction, connVM);
                #endregion

                #region VATReturnClosings
                sqlText = " ";
                sqlText = @"

CREATE TABLE [dbo].[VATReturnClosings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PeriodId] [nvarchar](50) NULL,
	[Line62] [decimal](18, 5) NULL,
	[Line63] [decimal](18, 5) NULL,
 CONSTRAINT [PK_VATReturnClosings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]



";
                transResult = commonDal.NewTableAdd("VATReturnClosings", sqlText, currConn, transaction, connVM);
                #endregion

                #region DepositTDSs

                sqlText = @"
CREATE TABLE [dbo].[DepositTDSs](
	[DepositId] [varchar](20) NOT NULL,
	[TreasuryNo] [varchar](50) NULL,
	[DepositDateTime] [datetime] NULL,
	[DepositType] [varchar](50) NULL,
	[DepositAmount] [decimal](25, 9) NULL,
	[ChequeNo] [varchar](50) NULL,
	[ChequeBank] [varchar](120) NULL,
	[ChequeBankBranch] [varchar](120) NULL,
	[ChequeDate] [datetime] NULL,
	[BankID] [varchar](20) NULL,
	[TreasuryCopy] [varchar](20) NULL,
	[DepositPerson] [varchar](120) NULL,
	[DepositPersonDesignation] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReverseDepositId] [varchar](20) NULL,
	[SaleExportNo] [varchar](50) NULL,
	[DepositPersonContactNo] [varchar](500) NULL,
	[DepositPersonAddress] [varchar](500) NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BankDepositDate] [datetime] NULL,
	[BranchId] [int] NULL,
 CONSTRAINT [PK_DepositTDS] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("DepositTDSs", sqlText, currConn, transaction, connVM);
                #endregion

                #region DepositTDSDetails

                sqlText = @"CREATE TABLE [dbo].[DepositTDSDetails](
	[TDSId] [varchar](20) NULL,
	[VendorId] [varchar](20) NULL,
	[BillAmount] [decimal](25, 9) NULL,
	[BillDate] [datetime] NULL,
	[BillDeductAmount] [decimal](25, 9) NULL,
	[DepositNumber] [varchar](30) NULL,
	[DepositDate] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[IssueDate] [datetime] NULL,
	[PurchaseNumber] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[IsPurchase] [varchar](20) NULL,
	[IsPercent] [varchar](1) NULL,
	[ReverseVDSId] [varchar](20) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[POST] [varchar](1) NULL,
	[BranchId] [int] NULL
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("DepositTDSDetails", sqlText, currConn, transaction, connVM);
                #endregion

                #region TempPurchaseTable

                sqlText = @"CREATE TABLE [dbo].[TempPurchaseData](
	[SL] [bigint] IDENTITY(1,1) NOT NULL,
	[ID] [nvarchar](max) NULL,
	[Vendor_Name] [varchar](500) NULL,
	[Vendor_Code] [nvarchar](50) NULL,
	[VendorID] [varchar](20) NULL,
	[Referance_No] [nvarchar](100) NULL,
	[Previous_Purchase_No] [nvarchar](100) NULL,
	[Post] [varchar](1) NULL,
	[LC_No] [nvarchar](100) NULL,
	[Item_Code] [nvarchar](100) NOT NULL,
	[Item_Name] [nvarchar](200) NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [nvarchar](100) NULL,
	[BranchCode] [nvarchar](100) NULL,
	[BranchId] [int] NULL,
	[Comments] [nvarchar](700) NULL,
	[VAT_Amount] [decimal](18, 2) NULL,
	[BOMId] [int] NULL,
	[BE_Number] [varchar](100) NULL,
	[Invoice_Date] [varchar](100) NULL,
	[Receive_Date] [varchar](100) NULL,
	[With_VDS] [varchar](100) NULL,
	[Custom_House] [varchar](100) NULL,
	[Total_Price] [varchar](100) NULL,
	[Type] [varchar](100) NULL,
	[Rebate_Rate] [varchar](100) NULL,
	[SD_Amount] [decimal](25, 9) NULL,
	[CnF_Amount] [decimal](25, 9) NULL,
	[Insurance_Amount] [decimal](25, 9) NULL,
	[Assessable_Value] [decimal](25, 9) NULL,
	[CD_Amount] [decimal](25, 9) NULL,
	[RD_Amount] [decimal](25, 9) NULL,
	[TVB_Amount] [decimal](25, 9) NULL,
	[TVA_Amount] [decimal](25, 9) NULL,
	[ATV_Amount] [decimal](25, 9) NULL,
	[Others_Amount] [decimal](25, 9) NULL,
	[Remarks] [varchar](100) NULL
 CONSTRAINT [PK_TempPurchaseData] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[TempPurchaseData] ADD  CONSTRAINT [DF_TempPurchaseData_ItemNo]  DEFAULT ('0') FOR [ItemNo]";

                transResult = commonDal.NewTableAdd("TempPurchaseData", sqlText, currConn, transaction, connVM);

                #endregion

                #region TempReceiveTable

                sqlText = @"CREATE TABLE [dbo].[TempReceiveData](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[Receive_DateTime] [varchar](100) NULL,
	[Reference_No] [varchar](100) NULL,
	[Comments] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[Return_Id] [varchar](100) NULL,
	[Item_Code] [varchar](100) NULL,
	[Item_Name] [varchar](100) NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](18, 2) NULL,
	[NBR_Price] [decimal](25, 2) NULL,
	[UOM] [varchar](100) NULL,
	[VAT_Name] [varchar](50) NULL,
	[CustomerCode] [varchar](100) NULL,
	[CustomerID] [int] NULL,
	[BranchId] [int] NULL,
    [BomId] [int] NULL,
 CONSTRAINT [PK_TempReceiveData] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("TempReceiveData", sqlText, currConn, transaction, connVM);

                #endregion

                #region TempIssueTable

                sqlText = @"CREATE TABLE [dbo].[TempIssueData](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[Issue_DateTime] [varchar](100) NULL,
	[Reference_No] [varchar](100) NULL,
	[Comments] [varchar](100) NULL,
	[Return_Id] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[Item_Code] [varchar](100) NULL,
	[Item_Name] [varchar](100) NULL,
	[Quantity] [decimal](18, 2) NULL,
	[UOM] [varchar](100) NULL,
	[ItemNo] [varchar](20) NULL,
	[BranchId] [int] NULL,
    [BomId] [int] NULL,
 CONSTRAINT [PK_TempIssueData] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("TempIssueData", sqlText, currConn, transaction, connVM);

                #endregion

                #region TempTransferTable

                sqlText = @"CREATE TABLE [dbo].[TempTransferData](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[TransactionDateTime] [varchar](100) NULL,
	[TransactionType] [varchar](100) NULL,
	[ProductCode] [varchar](100) NULL,
	[ProductName] [varchar](100) NULL,
	[UOM] [varchar](100) NULL,
	[Quantity] [decimal](18, 2) NULL,
	[CostPrice] [decimal](25, 2) NULL,
	[TransferToBranchCode] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[VAT_Rate] [decimal](25, 2) NULL,
	[ReferenceNo] [varchar](100) NULL,
	[Comments] [varchar](100) NULL,
	[ItemNo] [varchar](50) NULL,
	[BranchId] [int] NULL,
	[BomId] [int] NULL,
	[TransferToBranchId] [int] NULL,
	[CommentsD] [varchar](100) NULL,
 CONSTRAINT [PK_TempTransferData] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("TempTransferData", sqlText, currConn, transaction, connVM);

                #endregion

                #region TempVDSTable

                sqlText = @"CREATE TABLE [dbo].[TempVDSData](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[Deposit_Type] [varchar](100) NULL,
	[Deposit_Date] [varchar](100) NULL,
	[Treasury_No] [varchar](100) NULL,
	[Cheque_No] [varchar](100) NULL,
	[Cheque_Date] [varchar](100) NULL,
	[Cheque_Bank] [varchar](100) NULL,
	[Cheque_Bank_Branch] [varchar](100) NULL,
	[Bank_Name] [varchar](100) NULL,
	[Branch_Code] [varchar](100) NULL,
	[Account_No] [varchar](100) NULL,
	[Deposit_Person] [varchar](100) NULL,
	[Person_Designation] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[Comments] [varchar](100) NULL,
	[Vendor_Code] [varchar](100) NULL,
	[Vendor_Name] [varchar](100) NULL,
	[Bill_Amount] [decimal](18, 2) NULL,
	[Bill_Date] [varchar](100) NULL,
	[VDS_Amount] [decimal](25, 2) NULL,
	[Issue_Date] [varchar](100) NULL,
	[Purchase_No] [varchar](50) NULL,
	[IsPurchase] [varchar](10) NULL,
	[VendorID] [int] NULL,
	[BranchId] [int] NULL,
	[BomId] [int] NULL,
 CONSTRAINT [PK_TempVDSData] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";


                transResult = commonDal.NewTableAdd("TempVDSData", sqlText, currConn, transaction, connVM);

                #endregion

                #region ProductDetails

                sqlText = @"CREATE TABLE [dbo].[ProductDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[ProductCode] [varchar](50) NULL,
	[ProductName] [varchar](120) NULL,
	[UOM] [varchar](120) NULL,
 CONSTRAINT [PK_ProductDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("ProductDetails", sqlText, currConn, transaction, connVM);

                #endregion

                #region HSCodes
                sqlText = @"CREATE TABLE [dbo].[HSCodes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](500) NULL,
	[HSCode] [varchar](1000) NULL,
	[Description] [varchar](1000) NULL,
	[CD] [decimal](18, 2) NULL,
	[SD] [decimal](18, 2) NULL,
	[VAT] [decimal](18, 2) NULL,
	[AIT] [decimal](18, 2) NULL,
	[RD] [decimal](18, 2) NULL,
	[AT] [decimal](18, 2) NULL,
	[OtherSD] [decimal](25, 9) NULL,
	[OtherVAT] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,
	[IsFixedVAT] [varchar](1) NULL,
 CONSTRAINT [PK_HSCodes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("HSCodes", sqlText, currConn, transaction, connVM);

                #endregion

                #region BOMTemp
                sqlText = @"CREATE TABLE [dbo].[BOMTempData](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[BOMId] [int] NULL,
	[ReferenceNo] [varchar](50) NULL,
	[CustomerCode] [varchar](50) NULL,
	[CustomerName] [varchar](50) NULL,
	[FCode] [varchar](50) NULL,
	[FName] [varchar](100) NULL,
	[RCode] [varchar](50) NULL,
	[RName] [varchar](100) NULL,
	[FinishItemNo] [varchar](20) NULL,
	[RawItemNo] [varchar](20) NULL,
	[RawItemType] [varchar](50) NULL,
	[EffectDate] [varchar](50) NULL,
	[VATName] [varchar](50) NULL,
	[UseQuantity] [decimal](25, 12) NULL,
	[WastageQuantity] [decimal](25, 12) NULL,
	[Cost] [decimal](25, 9) NULL,
	[RUOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[MarkUpValue] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMUQty] [decimal](25, 12) NULL,
	[UOMWQty] [decimal](25, 12) NULL,
	[TotalQuantity] [decimal](25, 12) NULL,
	[Post] [varchar](1) NULL,
	[PBOMId] [varchar](20) NULL,
	[PInvoiceNo] [varchar](20) NULL,
	[TransactionType] [varchar](50) NULL,
	[CustomerID] [varchar](20) NULL,
	[IssueOnProduction] [varchar](1) NULL,
	[BranchId] [int] NULL,
	[FirstSupplyDate] [varchar](50) NULL,
	[BOMRawId] [int] NULL,
	[OverHead_RebatePercent] [decimal](25, 9) NULL,
	[OverHead_RebateAmount] [decimal](25, 9) NULL,
	[OverHead_AdditionalCost] [decimal](25, 9) NULL,
	[overHeadId] [int] NULL,
 CONSTRAINT [PK_BOMTempData] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("BOMTempData", sqlText, currConn, transaction, connVM);

                #endregion

                #region ProductStocks
                string ProductStocks = @"CREATE TABLE [dbo].[ProductStocks](
	[Id] [int] NOT NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[BranchId] [int] NOT NULL,
	[StockQuantity] [decimal](18, 6) NOT NULL,
	[StockValue] [decimal](18, 6) NOT NULL,
	[CurrentStock] [decimal](18, 6) NOT NULL,
	[Comments] [varchar](520) NULL,
 CONSTRAINT [PK_ProductStocks] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("ProductStocks", ProductStocks, currConn, transaction, connVM);
                #endregion

                #region ProductStocksTemp
                string ProductStocksTemp = @"
CREATE TABLE [dbo].[ProductStockTemp](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[BranchCode] [nvarchar](255) NULL,
	[BranchName] [nvarchar](255) NULL,
	[CategoryType] [nvarchar](255) NULL,
	[CategoryName] [nvarchar](255) NULL,
	[ProductCode] [nvarchar](255) NULL,
	[ProductName] [nvarchar](MAX) NULL,
	[StockQuantity] [decimal](25, 9) NULL,
	[StockValue] [decimal](25, 9) NULL,
	[Comments] [nvarchar](255) NULL,
	[ItemNo] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[StockId] [int] NULL,
 CONSTRAINT [PK_ProductStockTemp] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("ProductStockTemp", ProductStocksTemp, currConn, transaction, connVM);
                #endregion

                #region SalesInvoiceExps
                sqlText = @"CREATE TABLE [dbo].[SalesInvoiceExps](
	[ID] [int] NOT NULL,
	[LCDate] [datetime] NULL,
	[LCBank] [nvarchar](200) NULL,
	[PINo] [nvarchar](500) NULL,
	[PIDate] [datetime] NULL,
	[EXPNo] [nvarchar](200) NULL,
	[EXPDate] [datetime] NULL,
	[PortFrom] [nvarchar](500) NULL,
	[PortTo] [nvarchar](500) NULL,
	[Remarks] [nvarchar](500) NULL,
	[IsArchive] [varchar](1) NULL,
	[CreatedBy] [nvarchar](100) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [nvarchar](100) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_SalesInvoiceExps] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("SalesInvoiceExps", sqlText, currConn, transaction, connVM);
                #endregion

                #region CustomsHouse
                sqlText = @"CREATE TABLE [dbo].[CustomsHouse](
	[ID] [varchar](20) NOT NULL,
	[Code] [varchar](20) NULL,
	[CustomsHouseName] [varchar](200) NULL,
	[CustomsHouseAddress] [varchar](250) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[IsArchive] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_CustomsHouse] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("CustomsHouse", sqlText, currConn, transaction, connVM);
                #endregion

                #region ProductStockMISs
                sqlText = @"CREATE TABLE [dbo].[ProductStockMISs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TransID] [varchar](100) NULL,
	[TransType] [varchar](100) NULL,
	[Quantity] [decimal](25, 8) NULL,
	[UnitCost] [decimal](25, 8) NULL,
	[ItemNo] [varchar](100) NULL,
	[TransactionDate] [datetime] NULL,
	[Remarks] [varchar](100) NULL,
	[StockType] [varchar](100) NULL,
 CONSTRAINT [PK_ProductStockMIS] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("ProductStockMISs", sqlText, currConn, transaction, connVM);
                #endregion

                #region ReleaseNotes
                sqlText = @"CREATE TABLE [dbo].[ReleaseNotes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SL] [int] NOT NULL,
	[Version] [varchar](200) NULL,
	[Date] [datetime] NULL,
	[Name] [varchar](200) NULL,
	[Issue] [varchar](200) NULL,
	[Description] [varchar](200) NULL,
 CONSTRAINT [PK_ReleaseNotes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("ReleaseNotes", sqlText, currConn, transaction, connVM);
                #endregion

                #region MasterTemp
                sqlText = @" create table SalesInvoiceHeaderMasterTemp(
	SerialNo int identity(1,1) Primary Key,
	ID varchar(MAX),
	[Check] bit,
	InvoiceNo varchar(20),
    IsLoaded bit null
)
";

                transResult = commonDal.NewTableAdd("SalesInvoiceHeaderMasterTemp", sqlText, currConn, transaction, connVM);
                #endregion

                #region VAT_Source_TransferIssues
                sqlText = @" 
CREATE TABLE [dbo].[VAT_Source_TransferIssues](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[TransactionDateTime] [datetime] NULL,
	[TransactionType] [varchar](100) NULL,
	[ProductCode] [varchar](100) NULL,
	[ProductName] [varchar](100) NULL,
	[UOM] [varchar](100) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[TransferToBranchCode] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[VAT_Rate] [decimal](25, 2) NULL,
	[ReferenceNo] [varchar](100) NULL,
	[Comments] [varchar](100) NULL,
	[ItemNo] [varchar](50) NULL,
	[BranchId] [int] NULL,
	[BomId] [int] NULL,
	[TransferToBranchId] [int] NULL,
	[CommentsD] [varchar](100) NULL,
	[UserId] [varchar](200) NULL,
	[UOMn] [varchar](200) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[VehicleType] [varchar](50) NULL,
	[Weight] [varchar](50) NULL,
	[VehicleNo] [varchar](30) NULL,
	[PeriodId] [varchar](255) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("VAT_Source_TransferIssues", sqlText, currConn, transaction, connVM);
                #endregion

                #region VAT_Source_Purchase

                sqlText = @"CREATE TABLE [dbo].[VAT_Source_Purchase](
	[SL] [bigint] IDENTITY(1,1) NOT NULL,
	[ID] [nvarchar](max) NULL,
	[Vendor_Name] [varchar](500) NULL,
	[Vendor_Code] [nvarchar](50) NULL,
	[VendorID] [varchar](20) NULL,
	[Referance_No] [nvarchar](100) NULL,
	[Previous_Purchase_No] [nvarchar](100) NULL,
	[Post] [varchar](1) NULL,
	[LC_No] [nvarchar](100) NULL,
	[Item_Code] [nvarchar](100) NOT NULL,
	[Item_Name] [nvarchar](200) NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [nvarchar](100) NULL,
	[BranchCode] [nvarchar](100) NULL,
	[BranchId] [int] NULL,
	[Comments] [nvarchar](700) NULL,
	[VAT_Amount] [decimal](18, 2) NULL,
	[BOMId] [int] NULL,
	[BE_Number] [varchar](100) NULL,
	[Invoice_Date] [varchar](100) NULL,
	[Receive_Date] [varchar](100) NULL,
	[With_VDS] [varchar](100) NULL,
	[Custom_House] [varchar](100) NULL,
	[Total_Price] [varchar](100) NULL,
	[Type] [varchar](100) NULL,
	[Rebate_Rate] [varchar](100) NULL,
	[SD_Amount] [decimal](25, 9) NULL,
	[CnF_Amount] [decimal](25, 9) NULL,
	[Insurance_Amount] [decimal](25, 9) NULL,
	[Assessable_Value] [decimal](25, 9) NULL,
	[CD_Amount] [decimal](25, 9) NULL,
	[RD_Amount] [decimal](25, 9) NULL,
	[TVB_Amount] [decimal](25, 9) NULL,
	[TVA_Amount] [decimal](25, 9) NULL,
	[ATV_Amount] [decimal](25, 9) NULL,
	[Others_Amount] [decimal](25, 9) NULL,
	[Remarks] [varchar](100) NULL,
    [PeriodId] [varchar](255) NULL,
    [IsProcessed] [varchar](1) NULL
 CONSTRAINT [PK_VAT_Source_Purchase] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[VAT_Source_Purchase] ADD  CONSTRAINT [DF_VAT_Source_Purchase_ItemNo]  DEFAULT ('0') FOR [ItemNo]";

                transResult = commonDal.NewTableAdd("VAT_Source_Purchase", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT_Source_Sales
                sqlText = @"CREATE TABLE [dbo].[VAT_Source_Sales](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](6000) NULL,
	[InvoiceNo] [varchar](100) NULL,
	[BranchCode] [varchar](50) NULL,
	[CustomerGroup] [varchar](100) NULL,
	[CustomerCode] [varchar](50) NULL,
	[CustomerName] [varchar](100) NULL,
	[DeliveryAddress] [varchar](2000) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[DeliveryDateTime] [datetime] NULL,
	[ReferenceNo] [varchar](6000) NULL,
	[Comments] [varchar](2000) NULL,
	[ProductCode] [varchar](50) NULL,
	[ProductName] [varchar](100) NULL,
	[UOM] [varchar](50) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[Subtotal] [decimal](25, 9) NULL,
	[TotalValue] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[PromotionalQuantity] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[LCNumber] [varchar](50) NULL,
	[CurrencyCode] [varchar](50) NULL,
	[LineComments] [varchar](2000) NULL,
	[Type] [varchar](50) NULL,
	[TransactionType] [varchar](100) NULL,
	[PreviousInvoiceNo] [varchar](100) NULL,
	[IsProcessed] [varchar](1) NULL,
	[CompanyCode] [varchar](50) NULL,
 CONSTRAINT [PK_VAT_Source_Sales] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("VAT_Source_Sales", sqlText, currConn, transaction, connVM);
                #endregion

                #region VAT_Source_Receives

                sqlText = @"CREATE TABLE [dbo].[VAT_Source_Receives](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[Receive_DateTime] datetime NULL,
	[Reference_No] [varchar](100) NULL,
	[Comments] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[Return_Id] [varchar](100) NULL,
	[Item_Code] [varchar](100) NULL,
	[Item_Name] [varchar](100) NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](18, 2) NULL,
	[NBR_Price] [decimal](25, 2) NULL,
	[UOM] [varchar](100) NULL,
	[VAT_Name] [varchar](50) NULL,
	[CustomerCode] [varchar](100) NULL,
	[CustomerID] [int] NULL,
	[BranchId] [int] NULL,
    [BomId] [int] NULL,
    [With_Toll] [varchar](1) NULL,
    [PeriodId] [varchar](255) NULL,
    [IsProcessed] [varchar](1) NULL
 CONSTRAINT [PK_VAT_Source_Receives] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("VAT_Source_Receives", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT_Source_Issue

                sqlText = @"CREATE TABLE [dbo].[VAT_Source_Issue](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[BranchCode] [varchar](100) NULL,
	[Issue_DateTime] datetime NULL,
	[Reference_No] [varchar](100) NULL,
	[Comments] [varchar](100) NULL,
	[Return_Id] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[Item_Code] [varchar](100) NULL,
	[Item_Name] [varchar](100) NULL,
	[Quantity] [decimal](18, 2) NULL,
	[UOM] [varchar](100) NULL,
	[ItemNo] [varchar](20) NULL,
	[BranchId] [int] NULL,
    [BomId] [int] NULL,
    [PeriodId] [varchar](255) NULL,
    [IsProcessed] [varchar](1) NULL
 CONSTRAINT [PK_VAT_Source_Issue] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("VAT_Source_Issue", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT_Source_VDS

                sqlText = @"CREATE TABLE [dbo].[VAT_Source_VDS](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](max) NULL,
	[Deposit_Type] [varchar](100) NULL,
	[Deposit_Date] [varchar](100) NULL,
	[Treasury_No] [varchar](100) NULL,
	[Cheque_No] [varchar](100) NULL,
	[Cheque_Date] [varchar](100) NULL,
	[Cheque_Bank] [varchar](100) NULL,
	[Cheque_Bank_Branch] [varchar](100) NULL,
	[Bank_Name] [varchar](100) NULL,
	[Branch_Code] [varchar](100) NULL,
	[Account_No] [varchar](100) NULL,
	[Deposit_Person] [varchar](100) NULL,
	[Person_Designation] [varchar](100) NULL,
	[Post] [varchar](10) NULL,
	[Comments] [varchar](500) NULL,
	[Vendor_Code] [varchar](100) NULL,
	[Vendor_Name] [varchar](100) NULL,
	[Bill_Amount] [decimal](18, 2) NULL,
	[Bill_Date] [varchar](100) NULL,
	[VDS_Amount] [decimal](25, 2) NULL,
	[Issue_Date] [varchar](100) NULL,
	[Purchase_No] [varchar](50) NULL,
	[IsPurchase] [varchar](10) NULL,
	[VendorID] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[BomId] [int] NULL,
	[Branch_Name] [varchar](100) NULL,
	[Remarks] [varchar](100) NULL,
	[BankID] [varchar](20) NULL,
	[BankDepositDate] [varchar](100) NULL,
	[BillNo] [varchar](100) NULL,
	[Person_ContactNo] [varchar](500) NULL,
	[Person_Address] [varchar](500) NULL,
	[PeriodId] [varchar](255) NULL,
	[IsProcessed] [varchar](1) NULL,
 CONSTRAINT [PK_VAT_Source_VDS] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";

                transResult = commonDal.NewTableAdd("VAT_Source_VDS", sqlText, currConn, transaction, connVM);

                #endregion

                #region BranchMapDetails

                sqlText = @"
CREATE TABLE [dbo].[BranchMapDetails](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[BranchCode] [varchar](20) NOT NULL,
	[IntegrationCode] [varchar](20) NOT NULL,
	[BranchId] [int] NOT NULL,
	[Address] [varchar](500) NOT NULL,
 CONSTRAINT [PK_BranchMapDetails] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("BranchMapDetails", sqlText, currConn, transaction, connVM);

                #endregion

                #region ProductAvgPrice

                sqlText = @"
CREATE TABLE [dbo].[ProductAvgPrice](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ItemNo] [varchar](50) NOT NULL,
	[AgvPriceDate] [datetime] NOT NULL,
	[PurchaseQty] [decimal](25, 9) NULL,
	[PurchaseValue] [decimal](25, 9) NULL,
	[RuntimeQty] [decimal](25, 9) NULL,
	[RuntimeTotal] [decimal](25, 9) NULL,
	[AvgPrice] [decimal](25, 9) NOT NULL,
 CONSTRAINT [PK_ProductAvgPrice] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("ProductAvgPrice", sqlText, currConn, transaction, connVM);

                #endregion

                #region SaleEngineChassisDetails
                sqlText = @"
CREATE TABLE [dbo].[SaleEngineChassisDetails](
	[SL] [int] IDENTITY(1,1) NOT NULL,
	[ID] [varchar](500) NULL,
	[ProductCode] [varchar](50) NULL,
	[BranchCode] [varchar](50) NULL,
	[EngineNumber] [varchar](300) NULL,
	[ChassisNumber] [varchar](300) NULL,
	[CompanyCode] [varchar](50) NULL,
	[SalesInvoiceNo] [varchar](60) NULL,
	[ItemNo] [varchar](60) NULL,
	[BranchId] [varchar](60) NULL,
 CONSTRAINT [PK_SaleEngineChassisDetails] PRIMARY KEY CLUSTERED 
(
	[SL] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("SaleEngineChassisDetails", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_1
                sqlText = @"

CREATE TABLE [dbo].[VAT6_1](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[ItemNo] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[VendorID] [varchar](50) NULL,
	[SD] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[TransID] [varchar](50) NULL,
	[TransType] [varchar](50) NULL,
	[BENumber] [varchar](50) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](100) NULL,
	[CreateDateTime] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[UserId] [varchar](50) NULL,
	[AvgRate] [decimal](25, 9) NULL,
	[RunningTotal] [decimal](25, 9) NULL,
 CONSTRAINT [PK_VAT6_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VAT6_1", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_2
                sqlText = @"



CREATE TABLE [dbo].[VAT6_2](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[CustomerName] [varchar](200) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[VATRegistrationNo] [varchar](500) NULL,
	[ProductName] [varchar](500) NULL,
	[ProductCode] [varchar](500) NULL,
	[UOM] [varchar](50) NULL,
	[HSCodeNo] [varchar](500) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedDateTime] [datetime] NULL,
	[UnitRate] [decimal](25, 9) NULL,
	[ItemNo] [varchar](50) NULL,
	[AdjustmentValue] [decimal](25, 9) NULL,
	[UserId] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[CustomerID] [varchar](50) NULL,
	[ProductDesc] [varchar](500) NULL,
	[ClosingRate] [decimal](25, 9) NULL,
	[DeclaredPrice] [decimal](25, 9) NULL,
	[RunningTotal] [decimal](18, 8) NULL,
	[RunningTotalValue] [decimal](18, 8) NULL,
	[RunningTotalValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningQuantityFinal] [decimal](18, 8) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]




";

                transResult = commonDal.NewTableAdd("VAT6_2", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_2_Permanent
                sqlText = @"



CREATE TABLE [dbo].[VAT6_2_Permanent](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[CustomerName] [varchar](200) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[VATRegistrationNo] [varchar](500) NULL,
	[ProductName] [varchar](500) NULL,
	[ProductCode] [varchar](500) NULL,
	[UOM] [varchar](50) NULL,
	[HSCodeNo] [varchar](500) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedDateTime] [datetime] NULL,
	[UnitRate] [decimal](25, 9) NULL,
	[ItemNo] [varchar](50) NULL,
	[AdjustmentValue] [decimal](25, 9) NULL,
	[UserId] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[CustomerID] [varchar](50) NULL,
	[ProductDesc] [varchar](500) NULL,
	[ClosingRate] [decimal](25, 9) NULL,
	[PeriodId] [varchar](50) NULL,
	[RunningTotal] [decimal](18, 8) NULL,
	[RunningTotalValue] [decimal](18, 8) NULL,
	[RunningTotalValueFinal] [decimal](18, 8) NULL,
	[DeclaredPrice] [decimal](25, 9) NULL,
	[RunningOpeningValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningQuantityFinal] [decimal](18, 8) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]






";

                transResult = commonDal.NewTableAdd("VAT6_2_Permanent", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_1_Permanent
                sqlText = @"

CREATE TABLE [dbo].[VAT6_1_Permanent](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[ItemNo] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[VendorID] [varchar](50) NULL,
	[SD] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[TransID] [varchar](50) NULL,
	[TransType] [varchar](50) NULL,
	[BENumber] [varchar](50) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](100) NULL,
	[CreateDateTime] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[UserId] [varchar](50) NULL,
	[AvgRate] [decimal](25, 9) NULL,
	[PeriodID] [varchar](50) NULL,
	[RunningTotal] [decimal](25, 9) NULL,
 CONSTRAINT [PK_VAT6_1_p] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VAT6_1_Permanent", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_1_Permanent_Branch
                sqlText = @"

CREATE TABLE [dbo].[VAT6_1_Permanent_Branch](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[ItemNo] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[VendorID] [varchar](50) NULL,
	[SD] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[TransID] [varchar](50) NULL,
	[TransType] [varchar](50) NULL,
	[BENumber] [varchar](50) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](100) NULL,
	[CreateDateTime] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[UserId] [varchar](50) NULL,
	[AvgRate] [decimal](25, 9) NULL,
	[PeriodID] [varchar](50) NULL,
	[RunningTotal] [decimal](25, 9) NULL,
 CONSTRAINT [PK_VAT6_1_p_bss] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VAT6_1_Permanent_Branch", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_2_Permanent_Branch
                sqlText = @"



CREATE TABLE [dbo].[VAT6_2_Permanent_Branch](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[CustomerName] [varchar](200) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[VATRegistrationNo] [varchar](500) NULL,
	[ProductName] [varchar](500) NULL,
	[ProductCode] [varchar](500) NULL,
	[UOM] [varchar](50) NULL,
	[HSCodeNo] [varchar](500) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedDateTime] [datetime] NULL,
	[UnitRate] [decimal](25, 9) NULL,
	[ItemNo] [varchar](50) NULL,
	[AdjustmentValue] [decimal](25, 9) NULL,
	[UserId] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[CustomerID] [varchar](50) NULL,
	[ProductDesc] [varchar](500) NULL,
	[ClosingRate] [decimal](25, 9) NULL,
	[PeriodId] [varchar](50) NULL,
	[RunningTotal] [decimal](18, 8) NULL,
	[RunningTotalValue] [decimal](18, 8) NULL,
	[RunningTotalValueFinal] [decimal](18, 8) NULL,
	[DeclaredPrice] [decimal](25, 9) NULL,
	[RunningOpeningValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningQuantityFinal] [decimal](18, 8) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


";

                transResult = commonDal.NewTableAdd("VAT6_2_Permanent_Branch", sqlText, currConn, transaction, connVM);

                #endregion

                #region SettingsMaster
                sqlText = @"

CREATE TABLE [dbo].[SettingsMaster](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("SettingsMaster", sqlText, currConn, transaction, connVM);

                #endregion

                #region Product HS Codes
                sqlText = @"
CREATE TABLE [dbo].[ProductHSCodes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ItemNo] [varchar](20) NULL,
	[HSCode] [varchar](50) NULL,
 CONSTRAINT [PK_ProductHSCodes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("ProductHSCodes", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_2_1_Permanent
                sqlText = @"


CREATE TABLE [dbo].[VAT6_2_1_Permanent](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](100) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 8) NULL,
	[StartingAmount] [decimal](25, 8) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[VendorName] [varchar](200) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[VATRegistrationNo] [varchar](200) NULL,
	[ProductName] [varchar](200) NULL,
	[Quantity] [decimal](25, 8) NULL,
	[VATRate] [decimal](25, 8) NULL,
	[SD] [decimal](25, 8) NULL,
	[UnitCost] [decimal](25, 8) NULL,
	[HSCodeNo] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[ItemNo] [varchar](200) NULL,
	[StockType] [varchar](200) NULL,
	[BranchId] [int] NULL,
	[ClosingRate] [decimal](25, 9) NULL,
	[PeriodId] [varchar](50) NULL,
	[RunningTotal] [decimal](18, 8) NULL,
	[RunningTotalValue] [decimal](18, 8) NULL,
	[RunningTotalValueFinal] [decimal](18, 8) NULL,
	[DeclaredPrice] [decimal](25, 9) NULL,
	[RunningOpeningValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningQuantityFinal] [decimal](18, 8) NULL,
	[UnitRate] [decimal](18, 8) NULL,
	[CustomerId] [varchar](200) NULL,
	[AdjustmentValue] [decimal](18, 8) NULL,
 CONSTRAINT [PK_VAT6_2_1_Permanent] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VAT6_2_1_Permanent", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_2_1_Permanent_Branch
                sqlText = @"

CREATE TABLE [dbo].[VAT6_2_1_Permanent_Branch](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](100) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 8) NULL,
	[StartingAmount] [decimal](25, 8) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[VendorName] [varchar](200) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[VATRegistrationNo] [varchar](200) NULL,
	[ProductName] [varchar](200) NULL,
	[Quantity] [decimal](25, 8) NULL,
	[VATRate] [decimal](25, 8) NULL,
	[SD] [decimal](25, 8) NULL,
	[UnitCost] [decimal](25, 8) NULL,
	[HSCodeNo] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[ItemNo] [varchar](200) NULL,
	[StockType] [varchar](200) NULL,
	[BranchId] [int] NULL,
	[ClosingRate] [decimal](25, 9) NULL,
	[PeriodId] [varchar](50) NULL,
	[RunningTotal] [decimal](18, 8) NULL,
	[RunningTotalValue] [decimal](18, 8) NULL,
	[RunningTotalValueFinal] [decimal](18, 8) NULL,
	[DeclaredPrice] [decimal](25, 9) NULL,
	[RunningOpeningValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningQuantityFinal] [decimal](18, 8) NULL,
	[UnitRate] [decimal](18, 8) NULL,
	[CustomerId] [varchar](200) NULL,
	[AdjustmentValue] [decimal](18, 8) NULL,
 CONSTRAINT [PK_VAT6_2_1_Permanent_Branch] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VAT6_2_1_Permanent_Branch", sqlText, currConn, transaction, connVM);

                #endregion

                #region PurchaseTrackingRecord

                sqlText = @"

CREATE TABLE [dbo].[PurchaseTrackingRecord](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PurchaseHeaderId] [int] NULL,
	[PurchaseInvoiceNo] [varchar](50) NULL,
	[BENo] [varchar](50) NULL,
	[ItemNo] [varchar](50) NULL,
	[UOM] [varchar](50) NULL,
	[UOMQty] [decimal](18, 6) NULL,
	[RestQty] [decimal](18, 6) NULL,
 CONSTRAINT [PK_PurchaseTrackingRecord] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                transResult = commonDal.NewTableAdd("PurchaseTrackingRecord", sqlText, currConn, transaction, connVM);

                #endregion

                #region PurchaseTrackingRecord

                sqlText = @"

CREATE TABLE [dbo].[PurchaseTrackingRecord](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PurchaseHeaderId] [int] NULL,
	[PurchaseInvoiceNo] [varchar](50) NULL,
	[BENo] [varchar](50) NULL,
	[ItemNo] [varchar](50) NULL,
	[UOM] [varchar](50) NULL,
	[UOMQty] [decimal](18, 6) NULL,
	[RestQty] [decimal](18, 6) NULL,
 CONSTRAINT [PK_PurchaseTrackingRecord] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";
                transResult = commonDal.NewTableAdd("PurchaseTrackingRecord", sqlText, currConn, transaction, connVM);

                #endregion

                #region SaleTrackingConsumption

                sqlText = @"
CREATE TABLE [dbo].[SaleTrackingConsumption](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SaleHeaderId] [int] NULL,
	[SalesInvoiceNo] [varchar](50) NULL,
	[BENo] [varchar](50) NULL,
	[PurchaseInvoiceNo] [varchar](50) NULL,
	[UOM] [nchar](10) NULL,
	[ItemNo] [varchar](50) NULL,
	[UOMQty] [decimal](18, 6) NULL,
 CONSTRAINT [PK_SaleTrackingConsumtion] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";
                transResult = commonDal.NewTableAdd("SaleTrackingConsumption", sqlText, currConn, transaction, connVM);

                #endregion

                #region APINote1_22

                sqlText = @"
CREATE TABLE [dbo].[APINote1_22](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](255) NULL,
	[Branch] [varchar](255) NULL,
	[NoteNo] [varchar](50) NULL,
	[SubNoteNo] [varchar](50) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Remarks] [varchar](255) NULL,
	[ItemNo] [varchar](50) NULL,
	[ProductDescription] [varchar](255) NULL,
	[ProductName] [varchar](255) NULL,
	[ProductCode] [varchar](255) NULL,
	[DetailRemarks] [varchar](255) NULL,
	[ProductCategory] [varchar](255) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[PeriodId] [varchar](255) NULL,

	[SalesInvoiceNo] [varchar](255) NULL,
	[ImportIDExcel] [varchar](255) NULL,
	[UOM] [varchar](255) NULL,
	[PurchaseInvoiceNo] [varchar](255) NULL,

	[ItemId] [varchar](255) NULL,
	[VATRate] decimal(25,9) NULL,
	[SDRate] decimal(25,9) NULL,

 CONSTRAINT [PK_APINote1_22] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("APINote1_22", sqlText, currConn, transaction, connVM);

                #endregion

                #region APINote24_29

                sqlText = @"

CREATE TABLE [dbo].[APINote24_29](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](200) NULL,
	[Branch] [varchar](200) NULL,
	[NoteNo] [varchar](200) NULL,
	[SubNoteNo] [varchar](200) NULL,
	[BillDeductAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](200) NULL,
	[Remarks] [varchar](200) NULL,
	[VendorName] [varchar](200) NULL,
	[VendorBIN] [varchar](200) NULL,
	[VendorAddress] [varchar](200) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[VDSAmount] [decimal](25, 9) NULL,
	[InvoiceNo] [varchar](200) NULL,
	[InvoiceDate] [varchar](200) NULL,
	[VDSCertificateNo] [varchar](200) NULL,
	[VDSCertificateDate] [varchar](200) NULL,
	[AccountCode] [varchar](200) NULL,
	[TaxDepositSerialNo] [varchar](200) NULL,
	[TaxDepositDate] [varchar](200) NULL,
	[DetailRemarks] [varchar](200) NULL,
	[CustomerName] [varchar](200) NULL,
	[CustomerBIN] [varchar](200) NULL,
	[CustomerAddress] [varchar](200) NULL,
	[PurchaseNumber] [varchar](200) NULL,
	[SerialNo] [varchar](200) NULL,
	[PeriodId] [varchar](255) NULL,

 CONSTRAINT [PK_APINote24_29_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("APINote24_29", sqlText, currConn, transaction, connVM);

                #endregion

                #region APINote30

                sqlText = @"
CREATE TABLE [dbo].[APINote30](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](200) NULL,
	[Branch] [varchar](200) NULL,
	[NoteNo] [varchar](200) NULL,
	[SubNoteNo] [varchar](200) NULL,
	[ATAmount] [decimal](25, 9) NULL,
	[Column1] [varchar](200) NULL,
	[Column2] [varchar](200) NULL,
	[SubFormName] [varchar](200) NULL,
	[Remarks] [varchar](200) NULL,
	[Date] [varchar](200) NULL,
	[CustomHouse] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[DetailRemarks] [varchar](200) NULL,
	[PeriodId] [varchar](255) NULL,

 CONSTRAINT [PK_APINote24_29] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("APINote30", sqlText, currConn, transaction, connVM);



                #endregion

                #region APINote58_64

                sqlText = @"
CREATE TABLE [dbo].[APINote58_64](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](200) NULL,
	[Branch] [varchar](200) NULL,
	[NoteNo] [varchar](200) NULL,
	[SubNoteNo] [varchar](200) NULL,
	[Amount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubFormName] [varchar](200) NULL,
	[Remarks] [varchar](200) NULL,
	[ChallanNumber] [varchar](200) NULL,
	[BankName] [varchar](200) NULL,
	[BankBranch] [varchar](200) NULL,
	[Date] [varchar](200) NULL,
	[AccountCode] [varchar](200) NULL,
	[DepositId] [varchar](200) NULL,
	[DetailRemarks] [varchar](200) NULL,
	[PeriodId] [varchar](255) NULL,

 CONSTRAINT [PK_APINote58_64] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("APINote58_64", sqlText, currConn, transaction, connVM);

                #endregion

                #region APINote26_31

                sqlText = @"
CREATE TABLE [dbo].[APINote26_31](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](100) NULL,
	[Branch] [varchar](100) NULL,
	[NoteNo] [varchar](100) NULL,
	[SubNoteNo] [varchar](100) NULL,
	[DebitNoteNo] [varchar](100) NULL,
	[IssuedDate] [datetime] NULL,
	[TaxChallanNo] [varchar](100) NULL,
	[TaxChallanDate] [datetime] NULL,
	[ReasonforIssuance] [varchar](50) NULL,
	[ValueinChallan] [decimal](25, 9) NULL,
	[QuantityinChallan] [decimal](25, 9) NULL,
	[VATinChallan] [decimal](25, 9) NULL,
	[SDinChallan] [decimal](25, 9) NULL,
	[ValueofIncreasingAdjustment] [decimal](25, 9) NULL,
	[QuantityofIncreasingAdjustment] [decimal](25, 9) NULL,
	[VATofIncreasingAdjustment] [decimal](25, 9) NULL,
	[SDofIncreasingAdjustment] [decimal](25, 9) NULL,
	[Remarks] [varchar](50) NULL,
	[ItemNo] [varchar](50) NULL,
	[ProductDescription] [varchar](100) NULL,
	[ProductName] [varchar](100) NULL,
	[SubFormName] [varchar](100) NULL,
	[CreditNoteNo] [varchar](50) NULL,
	[ValueofDecreasingAdjustment] [decimal](25, 9) NULL,
	[QuantityofDecreasingAdjustment] [decimal](25, 9) NULL,
	[VATofDecreasingAdjustment] [decimal](25, 9) NULL,
	[SDofDecreasingAdjustment] [decimal](25, 9) NULL,
	[PeriodId] [varchar](50) NULL,
 CONSTRAINT [PK_API26_31] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("APINote26_31", sqlText, currConn, transaction, connVM);

                #endregion

                #region APINote27_32

                sqlText = @"


CREATE TABLE [dbo].[APINote27_32](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NoteNo] [varchar](50) NULL,
	[AdjType] [varchar](50) NULL,
	[AdjName] [varchar](50) NULL,
	[ChallanNumber] [varchar](50) NULL,
	[Date] [datetime] NULL,
	[Amount] [decimal](25, 9) NULL,
	[VAT] [decimal](25, 9) NULL,
	[SubFormName] [varchar](50) NULL,
	[Notes] [varchar](50) NULL,
	[Remarks] [varchar](50) NULL,
	[PeriodId] [varchar](50) NULL,
 CONSTRAINT [PK_API27_32] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("APINote27_32", sqlText, currConn, transaction, connVM);

                #endregion

                #region Customer Bill Process

                sqlText = @"


CREATE TABLE [dbo].[CustomerBillProcess](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CustomerID] [varchar](20) NOT NULL,
	[Jan] [varchar](2) NULL,
	[Feb] [varchar](2) NULL,
	[Mar] [varchar](2) NULL,
	[Apr] [varchar](2) NULL,
	[May] [varchar](2) NULL,
	[Jun] [varchar](2) NULL,
	[Jul] [varchar](2) NULL,
	[Aug] [varchar](2) NULL,
	[Sep] [varchar](2) NULL,
	[Oct] [varchar](2) NULL,
	[Nov] [varchar](2) NULL,
	[Dec] [varchar](2) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_CustomerBillProcess] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("CustomerBillProcess", sqlText, currConn, transaction, connVM);

                #endregion

                #region Customer Item Headers

                sqlText = @"

CREATE TABLE [dbo].[CustomerItemHeaders](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNo] [varchar](20) NOT NULL,
	[CustomerID] [varchar](20) NOT NULL,
	[Attention] [varchar](5000) NULL,
	[Notes] [varchar](6000) NULL,
	[TransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[BranchId] [int] NOT NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_CustomerItemHeaders] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("CustomerItemHeaders", sqlText, currConn, transaction, connVM);

                #endregion

                #region Customer Item Details

                sqlText = @"
CREATE TABLE [dbo].[CustomerItemDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[InvoiceNo] [varchar](20) NOT NULL,
	[CustomerID] [varchar](20) NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Value] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[BranchId] [int] NOT NULL,
	[Post] [varchar](1) NULL,
	[VATRate] [decimal](18, 8) NULL,
 CONSTRAINT [PK_CustomerItemDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[CustomerItemDetails]  WITH CHECK ADD  CONSTRAINT [FK_CustomerItemDetails_Customers] FOREIGN KEY([CustomerID])
REFERENCES [dbo].[Customers] ([CustomerID])


ALTER TABLE [dbo].[CustomerItemDetails] CHECK CONSTRAINT [FK_CustomerItemDetails_Customers]


ALTER TABLE [dbo].[CustomerItemDetails]  WITH CHECK ADD  CONSTRAINT [FK_CustomerItemDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])


ALTER TABLE [dbo].[CustomerItemDetails] CHECK CONSTRAINT [FK_CustomerItemDetails_Products]


ALTER TABLE [dbo].[CustomerItemDetails]  WITH CHECK ADD  CONSTRAINT [fkey_CustomerID] FOREIGN KEY([CustomerID])
REFERENCES [dbo].[CustomerItemHeaders] ([CustomerID])


ALTER TABLE [dbo].[CustomerItemDetails] CHECK CONSTRAINT [fkey_CustomerID]

";

                transResult = commonDal.NewTableAdd("CustomerItemDetails", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_2_Permanent_DayWise

                sqlText = @"

CREATE TABLE [dbo].[VAT6_2_Permanent_DayWise](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[CustomerName] [varchar](200) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[VATRegistrationNo] [varchar](500) NULL,
	[ProductName] [varchar](500) NULL,
	[ProductCode] [varchar](500) NULL,
	[UOM] [varchar](50) NULL,
	[HSCodeNo] [varchar](500) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedDateTime] [datetime] NULL,
	[UnitRate] [decimal](25, 9) NULL,
	[ItemNo] [varchar](50) NULL,
	[AdjustmentValue] [decimal](25, 9) NULL,
	[UserId] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[CustomerID] [varchar](50) NULL,
	[ProductDesc] [varchar](500) NULL,
	[ClosingRate] [decimal](25, 9) NULL,
	[PeriodId] [varchar](50) NULL,
	[RunningTotal] [decimal](18, 8) NULL,
	[RunningTotalValue] [decimal](18, 8) NULL,
	[RunningTotalValueFinal] [decimal](18, 8) NULL,
	[DeclaredPrice] [decimal](25, 9) NULL,
	[RunningOpeningValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningQuantityFinal] [decimal](18, 8) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VAT6_2_Permanent_DayWise", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_2_Permanent_DayWise_Branch

                sqlText = @"

CREATE TABLE [dbo].[VAT6_2_Permanent_DayWise_Branch](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[CustomerName] [varchar](200) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[VATRegistrationNo] [varchar](500) NULL,
	[ProductName] [varchar](500) NULL,
	[ProductCode] [varchar](500) NULL,
	[UOM] [varchar](50) NULL,
	[HSCodeNo] [varchar](500) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedDateTime] [datetime] NULL,
	[UnitRate] [decimal](25, 9) NULL,
	[ItemNo] [varchar](50) NULL,
	[AdjustmentValue] [decimal](25, 9) NULL,
	[UserId] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[CustomerID] [varchar](50) NULL,
	[ProductDesc] [varchar](500) NULL,
	[ClosingRate] [decimal](25, 9) NULL,
	[PeriodId] [varchar](50) NULL,
	[RunningTotal] [decimal](18, 8) NULL,
	[RunningTotalValue] [decimal](18, 8) NULL,
	[RunningTotalValueFinal] [decimal](18, 8) NULL,
	[DeclaredPrice] [decimal](25, 9) NULL,
	[RunningOpeningValueFinal] [decimal](18, 8) NULL,
	[RunningOpeningQuantityFinal] [decimal](18, 8) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VAT6_2_Permanent_DayWise_Branch", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_1_Permanent_DayWise

                sqlText = @"


CREATE TABLE [dbo].[VAT6_1_Permanent_DayWise](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[ItemNo] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[VendorID] [varchar](50) NULL,
	[SD] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[TransID] [varchar](50) NULL,
	[TransType] [varchar](50) NULL,
	[BENumber] [varchar](300) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](100) NULL,
	[CreateDateTime] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[UserId] [varchar](50) NULL,
	[AvgRate] [decimal](25, 9) NULL,
	[PeriodID] [varchar](50) NULL,
	[RunningTotal] [decimal](25, 9) NULL,
	[RunningValue] [decimal](25, 9) NULL,
	[RunningOpeningValue] [decimal](25, 9) NULL,
	[RunningOpeningQuantity] [decimal](25, 9) NULL,
 CONSTRAINT [PK_VAT6_1_p_day] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VAT6_1_Permanent_DayWise", sqlText, currConn, transaction, connVM);

                #endregion

                #region VAT6_1_Permanent_DayWise

                sqlText = @"


CREATE TABLE [dbo].[VAT6_1_Permanent_DayWise_Branch](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SerialNo] [varchar](200) NULL,
	[ItemNo] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[VendorID] [varchar](50) NULL,
	[SD] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[TransID] [varchar](50) NULL,
	[TransType] [varchar](50) NULL,
	[BENumber] [varchar](300) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](100) NULL,
	[CreateDateTime] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[BranchId] [varchar](50) NULL,
	[UserId] [varchar](50) NULL,
	[AvgRate] [decimal](25, 9) NULL,
	[PeriodID] [varchar](50) NULL,
	[RunningTotal] [decimal](25, 9) NULL,
	[RunningValue] [decimal](25, 9) NULL,
	[RunningOpeningValue] [decimal](25, 9) NULL,
	[RunningOpeningQuantity] [decimal](25, 9) NULL,
 CONSTRAINT [PK_VAT6_1_p_day_Branch] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("VAT6_1_Permanent_DayWise_Branch", sqlText, currConn, transaction, connVM);

                #endregion

                #region SalesDeliveryChallanTracking

                sqlText = @"

CREATE TABLE [dbo].[SalesDeliveryChallanTracking](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CustomerID] [varchar](20) NOT NULL,
	[DeliveryChallanNo] [varchar](50) NULL,
	[ChallanDate] [datetime] NULL,
	[PONo] [varchar](50) NULL,
	[PODate] [datetime] NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[PartialDescription] [varchar](2000) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_SalesDeliveryChallanTracking] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
";

                transResult = commonDal.NewTableAdd("SalesDeliveryChallanTracking", sqlText, currConn, transaction, connVM);

                #endregion

                #region ProductMapingTemp

                sqlText = @"
CREATE TABLE [dbo].[ProductMapingTemp](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[product_code] [varchar](50) NULL,
	[code] [varchar](50) NULL,
	[eSales_Name] [varchar](max) NULL,
	[DSS_Name] [varchar](max) NULL,
	[ItemNo] [varchar](20) NULL,
 CONSTRAINT [PK_ProductMapingTemp] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

";

                transResult = commonDal.NewTableAdd("ProductMapingTemp", sqlText, currConn, transaction, connVM);

                #endregion

                #endregion

                //transResult = commonDal.TableFieldDelete("UserAuditLogs", "ComputerName", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("UserAuditLogs", "ComputerLoginUserName", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("UserAuditLogs", "ComputerIPAddress", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("UserAuditLogs", "SoftwareUserId", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("UserAuditLogs", "SessionDate", currConn, transaction);

                #region Oct 2023 to Oct 2024

                transResult = commonDal.TableFieldAdd("Products", "FixedVATAmountP", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsPackCal", "nvarchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "TollOpeningQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "BOeDate", "datetime", currConn, transaction, "1900-01-01", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1NBRApiHeader", "IsSubmit", "varchar(1)", currConn, transaction, "Y", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "IsCreditCustomer", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "SC", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "RF", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "SSLF", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "DC", "decimal(25, 2)", currConn, transaction, "", connVM);



                transResult = commonDal.TableFieldAdd("UserInformations", "Signature", "image", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VDS", "IsMailSend", "NVARCHAR(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Customers", "PackSize", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "PackSize", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "PackSize", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "BrandName", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "BanglaName", "nvarchar(200)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("VAT9_1SubFormA", "SerialNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormA", "PurchaseInvoiceNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormA", "ImportIDExcel", "varchar(6000)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormA", "SalesInvoiceNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormA", "VATRate", "decimal(10, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormA", "SDRate", "decimal(10, 2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormB", "SalesInvoiceNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormB", "VATRate", "decimal(10, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormB", "SDRate", "decimal(10, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormB", "SDRate", "decimal(10, 2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormC", "UOM", "varchar(120)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormC", "PurchaseInvoiceNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormC", "SalesInvoiceNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormC", "VATRate", "decimal(10, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormC", "SDRate", "decimal(10, 2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormD", "SalesInvoiceNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormD", "VATRate", "decimal(10, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1SubFormD", "SDRate", "decimal(10, 2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormF", "DetailRemarks", "varchar(2000)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormI", "ATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormG", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormJ", "DetailRemarks", "varchar(2000)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1NBRApiHeader", "SubmitDate", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT9_1NBRApiHeader", "SubmitTime", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "Volume", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "VolumeUnit", "nvarchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TollProductionConsumptionDetails", "SubTotal", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TollContInOutDetails", "SubTotal", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TollClientInOutDetails", "SubTotal", "decimal(25, 2)", currConn, transaction, "", connVM);



                #endregion

                #region June 2022 to July 2023

                transResult = commonDal.TableFieldAdd("ProductTransfersDetails", "PackSize", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductTransfersDetails", "FromUnitPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductTransfersDetails", "ToUnitPrice", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT9_1SubFormC", "Quantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "WromgAttempt", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "IsLock", "bit", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMs", "SubmittedFilePath", "varchar(300)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMs", "SubmittedFileName", "varchar(300)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMs", "ApprovedFilePath", "varchar(300)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMs", "ApprovedFileName", "varchar(300)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "OrderNumber", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsSendMail", "varchar(2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "TCSRate", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Customers", "IsTCS", "varchar(1)", currConn, transaction, "N", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "VehicleNo", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "VehicleType", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "TDSAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "TDSRate", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "CompanyCode", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "FileName", "varchar(200)", currConn, transaction, "", connVM);



                transResult = commonDal.TableFieldAdd("TempPurchaseData", "CompanyCode", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "FileName", "varchar(200)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "TDSRate", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "CompanyCode", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "FileName", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ProductStockMISs", "IsProcess", "varchar(1)", currConn, transaction, "N", connVM);
                transResult = commonDal.TableFieldAdd("AdjustmentHistorys", "IsAdjSD", "varchar(2)", currConn, transaction, "N", connVM);

                transResult = commonDal.TableFieldAdd("Products", "Option1", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "Option2", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "Option3", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "Option4", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "Option5", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "TDS_Amount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "PODate", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsChild", "varchar(2)", currConn, transaction, "N", connVM);
                transResult = commonDal.TableFieldAdd("Products", "MasterProductItemNo", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsBillCompleted", "varchar(1)", currConn, transaction, "N", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "PONo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMs", "MasterComments", "varchar(1000)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferIssue_Audit", "TransactionDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferIssue_Audit", "BranchFromRef", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferIssue_Audit", "BranchToRef", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ReceiveDetails", "BOMId1", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMs", "AutoIssue", "varchar(1)", currConn, transaction, "Y", connVM);
                transResult = commonDal.TableFieldAdd("BOMTempData", "AutoIssue", "varchar(1)", currConn, transaction, "Y", connVM);

                transResult = commonDal.TableFieldAdd("TempReceiveData", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "ReceiveNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "ReceiveNumber", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "UOMPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "UOMQty", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "TransactionType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "SubTotal", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Toll6_3Invoices", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                ////transResult = commonDal.TableFieldAdd("Toll6_3InvoiceDetails", "PeriodID", "varchar(6)", currConn, transaction);

                transResult = commonDal.TableFieldAdd("SalesTempData", "BEItemNo", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CPCName", "varchar(200)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "OtherRef", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "Section21", "varchar(1)", currConn, transaction, "N", connVM);

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "OtherRef", "varchar(500)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "OtherRef", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "OtherRef", "varchar(500)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousInvoiceDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousNBRPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousUOM", "varchar(120)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousSubTotal", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousVATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousSD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PreviousSDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "ReasonOfReturn", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option1", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option2", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option3", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option4", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option5", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option6", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option7", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option8", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option9", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option10", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option11", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Option12", "varchar(200)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option1", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option2", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option3", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option4", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option5", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option6", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option7", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option8", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option9", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option10", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option11", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Option12", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "Option1", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option2", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option3", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option4", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option5", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option6", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option7", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option8", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option9", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option10", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option11", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Option12", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Customers", "IsTax", "varchar(1)", currConn, transaction, "N", connVM);


                transResult = commonDal.TableFieldAdd("ProductStockMISs", "OpeningQuantity", "decimal(18,6)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISs", "OpeningValue", "decimal(18,6)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISs", "IsProcessed", "varchar(1)", currConn, transaction, "N", connVM);

                #endregion

                #region July 2021 to Oct 2021

                #region VAT6_1
                transResult = commonDal.TableFieldAdd("ProductStockMISs", "AdjustmentValue", "decimal(25, 5)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISs", "SerialNo", "varchar(10)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT6_1", "SerialNo", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "ItemNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "StartDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "StartingQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "StartingAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "VendorID", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "Quantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "UnitCost", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "TransID", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "TransType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "BENumber", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "InvoiceDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "Remarks", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "CreateDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "TransactionType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "BranchId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "UserId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "AvgRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "RunningTotal", "decimal(25, 9)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("APINote1_22", "[Invoice/B/E No]", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "Date", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "OfficeCode", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "CPC", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "AssessableValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "BasevalueofVAT", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "VAT", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "AT", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "BE_ItemNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("APINote1_22", "ProductType", "varchar(500)", currConn, transaction, "", connVM);

                #endregion

                #region VAT6_1_Permanent

                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "SerialNo", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "ItemNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "StartDateTime", "datetime ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "StartingQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "StartingAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "VendorID", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "Quantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "UnitCost", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "TransID", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "TransType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "BENumber", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "InvoiceDateTime ", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "Remarks", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "CreateDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "TransactionType ", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "BranchId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "UserId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "AvgRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "PeriodID", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "RunningTotal", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "SerialNo", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "ItemNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "StartDateTime", "datetime ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "StartingQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "StartingAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "VendorID", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "Quantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "UnitCost", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "TransID", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "TransType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "BENumber", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "InvoiceDateTime ", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "Remarks", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "CreateDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "TransactionType ", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "BranchId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "UserId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "AvgRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "PeriodID", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "RunningTotal", "decimal(25, 9)", currConn, transaction, "", connVM);

                #endregion

                #region VAT6_2

                transResult = commonDal.TableFieldAdd("VAT6_2", "SerialNo", "varchar(200) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "StartDateTime", "datetime ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "StartingQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "StartingAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "TransID", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "TransType", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "CustomerName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "Address1", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "Address2", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "Address3", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "VATRegistrationNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "ProductName", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "ProductCode", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "UOM", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "HSCodeNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "Quantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "UnitCost", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "Remarks", "varchar(200) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "CreatedDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "UnitRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "ItemNo", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "UserId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "BranchId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "CustomerID", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "ProductDesc", "varchar(500) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "ClosingRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "DeclaredPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningTotal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningTotalValue", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningTotalValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningOpeningValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningOpeningQuantityFinal", "decimal(18, 8)", currConn, transaction, "", connVM);

                #endregion

                #region VAT6_2_Permanent

                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "SerialNo", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "StartDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "StartingQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "StartingAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "TransID", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "TransType", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "CustomerName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "Address1", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "Address2", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "Address3", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "VATRegistrationNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "ProductName", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "ProductCode", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "UOM", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "HSCodeNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "Quantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "UnitCost", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "Remarks", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "CreatedDateTime", "datetime ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "UnitRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "ItemNo", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "UserId", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "BranchId", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "CustomerID", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "ProductDesc", "varchar(500) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "ClosingRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "PeriodId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "RunningTotal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "RunningTotalValue", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "RunningTotalValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "DeclaredPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "RunningOpeningValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent", "RunningOpeningQuantityFinal", "decimal(18, 8)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "SerialNo", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "StartDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "StartingQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "StartingAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "TransID", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "TransType", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "CustomerName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "Address1", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "Address2", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "Address3", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "VATRegistrationNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "ProductName", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "ProductCode", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "UOM", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "HSCodeNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "Quantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "SD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "UnitCost", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "Remarks", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "CreatedDateTime", "datetime ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "UnitRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "ItemNo", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "UserId", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "BranchId", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "CustomerID", "varchar(50) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "ProductDesc", "varchar(500) ", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "ClosingRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "PeriodId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "RunningTotal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "RunningTotalValue", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "RunningTotalValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "DeclaredPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "RunningOpeningValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2_Permanent_Branch", "RunningOpeningQuantityFinal", "decimal(18, 8)", currConn, transaction, "", connVM);


                #endregion

                //'RunningOpeningQuantityFinal'.

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "CPCName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "BEItemNo", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Customers", "CustomerBanglaName", "nvarchar(255)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "BOe", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "BOe", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "InvoiceDiscountAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "InvoiceDiscountAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                ////transResult = commonDal.TableFieldAdd("TempPurchaseData", "VATRate", "decimal(18, 8)", currConn, transaction);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsVDSCompleted", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CustomerItemDetails", "VATRate", "decimal(18, 8)", currConn, transaction, "", connVM);
                //transResult = commonDal.TableFieldAdd("TempPurchaseData", "VATRate", "decimal(18, 8)", currConn, transaction);
                transResult = commonDal.TableFieldAdd("CompanyCategory", "ITEM_ID", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyCategory", "GOODS_SERVICE_CODE", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyCategory", "GOODS_SERVICE_NAME", "varchar(200)", currConn, transaction, "", connVM);



                //transResult = commonDal.TableFieldAdd("CustomerItemDetails", "VATRate", "decimal(18, 8)", currConn, transaction);

                transResult = commonDal.TableFieldAdd("Customers", "NIDNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Vendors", "NIDNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleEngineChassisDetails", "TransactionType", "varchar(50)", currConn, transaction, "Other", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "Weight", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveDetails", "Weight", "varchar(50)", currConn, transaction, "0", connVM);


                transResult = commonDal.TableFieldAdd("Products", "IsFixedVATRebate", "varchar(2)", currConn, transaction, "N", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "FixedVATRebate", "varchar(2)", currConn, transaction, "Y", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "FixedVATRebate", "varchar(2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SaleTrackingConsumption", "InvoiceDateTime", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseTrackingRecord", "InvoiceDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseTrackingRecord", "ReceiveDate", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseTrackingRecord", "ExpireDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "RunningTotal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "RunningTotalValue", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "RunningTotalValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "DeclaredPrice", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "RunningOpeningValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "UnitRate", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "CustomerId", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "AdjustmentValue", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "RunningOpeningQuantityFinal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "RunningOpeningQuantityValue", "decimal(18, 8)", currConn, transaction, "", connVM);

                //transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "SerialNo", "varchar(200)", currConn, transaction);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "BEItemNo", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "BEItemNo", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Client6_3Details", "HSCode", "varchar(50)", currConn, transaction, "'-'", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "HSCode", "varchar(50)", currConn, transaction, "'-'", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "HSCode", "varchar(50)", currConn, transaction, "'-'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "HSCode", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "HSCode", "varchar(50)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "CPCName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "CPCName", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "CustomCode", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "CustomCode", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "Custom_Code", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Custom_Code", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("FiscalYear", "APIMsgFullId", "varchar(200)", currConn, transaction, "", connVM);


                #endregion

                #region Jan-2021 to Mar-2021

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "ProductType", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "DataSource", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ImportID", "varchar(2000)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "TransactionHoldDate", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductCategories", "ReportType", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductAvgPrice", "ToDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("HSCodes", "FiscalYear", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "ChallanNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "SSO", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Section", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "BatchNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ProductType", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ChallanNo", "varchar(500)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "ProductBanglaName", "nvarchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "SSO", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Section", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "BatchNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ProductType", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "SignatoryName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "SignatoryDesig", "varchar(200)", currConn, transaction, "", connVM);
                //////transResult = commonDal.TableFieldAdd("Products", "TradingSaleVATRate", "decimal(25, 9)", currConn, transaction);
                //////transResult = commonDal.TableFieldAdd("Products", "TradingSaleSD", "decimal(25, 9)", currConn, transaction);
                transResult = commonDal.TableFieldAdd("VAT6_1", "RunningTotal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningTotal", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningTotalValue", "decimal(18, 8)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_2", "RunningTotalValueFinal", "decimal(18, 8)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "ReportType", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "CustomerID", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "CustomerCommercialName", "nvarchar(130)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsClients6_3Complete", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempReceiveData", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveDetails", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("SalesTempData", "IsInstitution", "nvarchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "TotalValue", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "OldMRP", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "OldNBRPrice", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "OldSubtotal", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "LineTotal", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsInstitution", "nvarchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "OldMRP", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "OldNBRPrice", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "OldSubtotal", "decimal(25,9)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("ProductTransfers", "TransactionType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductTransfersDetails", "TransactionType", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ProductTransfersDetails", "IssuePrice", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductTransfersDetails", "ReceivePrice", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "TradingSaleVATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "TradingSaleSD", "decimal(25, 9)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "IsTraderVAT ", "nvarchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "InvoiceValue ", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "ExchangeRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "Currency", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "WastageTotalQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "WastageTotalValue", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ProductStocks", "WastageTotalQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ProductType", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockTemp", "CurrentStock", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BankChannelPayment", "PaymentType ", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsBankingChannelPay ", "varchar(1)", currConn, transaction, "'Y'", connVM);
                transResult = commonDal.TableFieldAdd("SaleRegister_VAT6_2s", "UOM", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleRegister_VAT6_2s", "ProductCode", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleRegister_VAT6_2s", "AdjustmentValue", "decimal(18,10)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Rebate_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Receive_Time", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Invoice_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Invoice_Time", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Rebate_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Rebate_Time", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempReceiveData", "UOMc", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "UOMn", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "UserId", "varchar(200)", currConn, transaction, "", connVM);

                #endregion Jan-2021 to Mar-2021

                #region Oct-2020 to Dec-2020

                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISKas", "UserId", "varchar(50)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("VAT6_2", "SerialId", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "ProcessFlag", "varchar(1)", currConn, transaction, "N", connVM);

                transResult = commonDal.TableFieldAdd("ProductStockMISs", "Day", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ProductStockMISs", "ClosingQuantity", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISs", "ClosingAmount", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ProductStockMISs", "ClosingAmountFinal", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStockMISs", "ClosingQuantityFinal", "decimal(25,9)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "BillingPeriodFrom", "datetime", currConn, transaction, "1990-01-01", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "BillingPeriodTo", "datetime", currConn, transaction, "2030-12-31", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "BillingDays", "int", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("salesTempData", "BillingPeriodFrom", "datetime", currConn, transaction, "1990-01-01", connVM);
                transResult = commonDal.TableFieldAdd("salesTempData", "BillingPeriodTo", "datetime", currConn, transaction, "2030-12-31", connVM);
                transResult = commonDal.TableFieldAdd("salesTempData", "BillingDays", "int", currConn, transaction, "0", connVM);


                transResult = commonDal.TableFieldAdd("ProductAvgPrice", "SerialNo", "varchar(10)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseinvoiceDetails", "ExpireDate", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "ExpireDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT6_2", "DeclaredPrice", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT6_1", "RunningValue", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "RunningOpeningValue", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1", "RunningOpeningQuantity", "decimal(25,9)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "RunningValue", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "RunningOpeningValue", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent_Branch", "RunningOpeningQuantity", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "RunningValue", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "RunningOpeningValue", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT6_1_Permanent", "RunningOpeningQuantity", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsTripComplete", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Rebate_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Rebate_Time", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Receives", "Product_Group", "varchar(150)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "Product_Group", "varchar(150)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("TempPurchaseData", "IsRebate", "varchar(2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "RebateDate", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "IsRebate", "varchar(2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "RebateDate", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "BankGuarantee", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsVDS", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Product_Group", "varchar(150)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Product_Group", "varchar(150)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "RebateDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Toll6_3Invoices", "VendorID", "int", currConn, transaction, "'0'", connVM);
                transResult = commonDal.TableFieldAdd("Toll6_3Invoices", "TransactionType", "varchar(50)", currConn, transaction, "'Contractor63'", connVM);
                transResult = commonDal.TableFieldAdd("Toll6_3InvoiceDetails", "TransactionType", "varchar(50)", currConn, transaction, "'Contractor63'", connVM);

                transResult = commonDal.TableFieldAdd("DisposeRawDetails", "IsSaleable", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductStocks", "CurrentStock", "decimal(18, 6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DisposeRaws", "PeriodId", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DisposeRawDetails", "PeriodId", "varchar(6)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("IssueDetails", "IsDayEnd ", "varchar(1)", currConn, transaction, "'N'", connVM);

                transResult = commonDal.TableFieldAdd("IssueDetails", "WIPBOMId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMRaws", "WIPBOMId", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "NationalID", "nvarchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "NationalID", "nvarchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "SignatoryName", "varchar(120)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "SignatoryDesig", "varchar(120)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "Email", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "Mobile", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "VDSAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Deposits", "ImportIDExcel", "varchar(35)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "VDSAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "Post", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturnV2s", "Post", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("FiscalYear", "VATReturnPost", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchMapDetails", "BranchName", "varchar(120)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "PeriodId", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "PreLineTotal", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreLineTotal", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseRegister_VAT6_1s", "UOM", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseRegister_VAT6_1s", "ProductCodeA", "varchar(50)", currConn, transaction, "", connVM);

                #endregion Oct-2020 to Dec-2020

                #region Aug-01-2020

                #region Add Fields

                #region  Regular Fields

                transResult = commonDal.TableFieldAdd("Products", "IsSample", "varchar(2)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("Client6_3Details", "HSCode", "varchar(50)", currConn, transaction, "'-'", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "HSCode", "varchar(50)", currConn, transaction, "'-'", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "HSCode", "varchar(50)", currConn, transaction, "'-'", connVM);

                transResult = commonDal.TableFieldAdd("ProductAvgPrice", "FromDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssues", "SignatoryName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssues", "SignatoryDesig", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ProductStockMISs", "PeriodName", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_TransferIssues", "Transaction_Date", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_TransferIssues", "Transaction_Time", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_TransferIssues", "IsProcessed", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Receives", "With_Toll", "varchar(10)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Receives", "PeriodId", "varchar(300)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Receives", "ProductType", "varchar(300)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempIssueData", "UserId", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempIssueData", "UOMc", "decimal(25,9)", currConn, transaction, "", connVM);
                //transResult = commonDal.TableFieldAdd("TempIssueData", "UOMQty", "decimal(25,9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("TempIssueData", "UOMPrice", "decimal(25,9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("TempIssueData", "Subtotal", "decimal(25,9)", currConn, transaction);

                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "IsLeader", "varchar(2)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "LeaderAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "LeaderVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "NonLeaderAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "NonLeaderVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "IsLeader", "varchar(2)", currConn, transaction, "NA", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "LeaderAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "LeaderVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "NonLeaderAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "NonLeaderVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "LineTotal", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "IsPDFGenerated", "varchar(10)", currConn, transaction, "N", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CustomerAddress", "varchar(500)", currConn, transaction, "N", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "UserName", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "LineTotal", "decimal(25,9)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsPDFGenerated", "varchar(10)", currConn, transaction, "N", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "DataSource", "varchar(60)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "DataSource", "varchar(60)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "DataSource", "varchar(60)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsCurrencyConvCompleted", "varchar(1)",
                    currConn, transaction, "'Y'", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "IsCurrencyConvCompleted", "varchar(1)",
                    currConn, transaction, "'Y'", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "IsLeader", "varchar(2)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "LeaderAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "LeaderVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "NonLeaderAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "NonLeaderVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "LineTotal", "decimal(25,9)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "SourcePaidQuantity", "decimal(25, 9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "SourcePaidVATAmount", "decimal(25, 9)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "TotalValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PeriodId", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousSalesInvoiceNo", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousInvoiceDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousNBRPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousQuantity", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousUOM", "varchar(120)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousSubTotal", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousVATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousSD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PreviousSDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ReasonOfReturn", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "SourcePaidQuantity", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "SourcePaidVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssues", "VehicleType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturnHeaders", "PostStatus", "varchar(10)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BranchProfiles", "IsCentral", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempTransferData", "UserId", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "UOMn", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "UOMQty", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "UOMc", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "UOMPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "VATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "SDRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "SDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "SubTotal", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "VehicleType", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "BranchFromRef", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempTransferData", "BranchToRef", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssues", "BranchFromRef", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssues", "BranchToRef", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "Weight", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "Weight", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "ShortName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "ShortName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsConfirmed", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Vendors", "ShortName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "IsInstitution", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "IsExamted", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "IsSpecialRate", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "IssueFromBOM", "varchar(1)", currConn, transaction, "'Y'", connVM);
                transResult = commonDal.TableFieldAdd("CustomerDiscounts", "CustomerID", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CustomerDiscounts", "CustomerCode", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMs", "ReferenceNo", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsHouseRent", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssues", "TripNo", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackHeader", "TransactionType", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackHeader", "ApprovedSD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalSDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceExps", "LCNumber", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackDetails", "TransactionType", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VDS", "BillNo", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "IP", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "DbName", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "Id", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "Pass", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("HSCodes", "OtherSD", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "OtherVAT", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedCD", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedSD", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedRD", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedVAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedAIT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedOtherVAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("HSCodes", "IsFixedOtherSD", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "IsFixedSD", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsFixedCD", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsFixedRD", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsFixedAIT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsFixedVAT1", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsFixedAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsFixedOtherSD", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsVDS", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "HPSRate", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "IsFixedVAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "FixedVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Codes", "LastId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "AITAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDuties", "AITInp", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDuties", "AITAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempPurchaseData", "AITAmount", "decimal(25, 9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "UserId", "varchar(50)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "AITAmount", "decimal(25, 9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "UserId", "varchar(50)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("IssueDetails", "VATName", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempTransferData", "Weight", "varchar(50)", currConn, transaction, "'NA'", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "IsFixedVAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "FixedVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ProductDescription", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "CDNVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "CDNSDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "CDNSubtotal", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ExtraCharges", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "OtherRef", "varchar(500)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "HPSRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "HPSAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "HPSTotalAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "NBRPriceInclusiveVAT", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "DeductionAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "BranchRef", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "AppVersion", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "FileName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "PreviousImportedExcelId", "varchar(600)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "AppVersion", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueHeaders", "AppVersion", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "SaleInvoiceNumber", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueHeaders", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssues", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceives", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Deposits", "FiscalYear", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("IssueHeaders", "AppVersion", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("IssueHeaders", "IssueNumber", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "BOMId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferDetails", "BOMId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "BOMId", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("IssueDetails", "BOMId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "Is6_3TollCompleted", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "BOMId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveDetails", "BOMId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "BOMId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TDSs", "Section", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "Section", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "TDSCode", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "TDSCode", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "TDSSection", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Toll6_3InvoiceDetails", "Post", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Toll6_3InvoiceDetails", "TollLineNo", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Toll6_3InvoiceDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Toll6_3Invoices", "BranchId", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "AppVersion", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "TDSAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsVDSCompleted", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsTDSCompleted", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "PurchaseInvoiceNumber", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Deposits", "BankDepositDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TDSs", "IsArchive", "bit", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Vendors", "TDSCode", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "IsTransport", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("IssueHeaders", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueDetails", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsTDS", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "ReceiveNumber", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ReceiveDetails", "IsSynced", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VDS", "POST", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssues", "ImportIDExcel", "varchar(35)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMs", "FirstSupplyDate", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "BusinessNature", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "AccountingNature", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "BIN", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "AppVersion", "nvarchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsDeemedExport", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Vendors", "IsRegister", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Vendors", "IsTurnover", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "IsExempted", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsZeroVAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "IsVDSWithHolder", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Vendors", "IsVDSWithHolder", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "IsVDSWithHolder", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "VDSAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "VDSAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldDelete("SalesInvoiceHeaders", "ValueOnly", currConn, transaction, connVM);
                transResult = commonDal.TableFieldAdd("VDS", "VATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Vendors", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("UOMs", "IsArchive", "bit", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("Products", "IsVATRate", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsSDRate", "varchar(1)", currConn, transaction, "'N'", connVM);

                transResult = commonDal.TableFieldAdd("BankInformations", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("Currencies", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("CurrencyConversion", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("CustomerGroups", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("ProductCategories", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("UOMName", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("UOMs", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("Vehicles", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("VendorGroups", "IsArchive", "bit", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("Vendors", "IsArchive", "bit", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "IsSample", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "Email", "nvarchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "Mobile", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "VerificationCode", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "IsVerified", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "IsAdmin", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "LastPasswordChangeDate", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMs", "BOMCode", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "USDInvoiceValue", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "USDValue", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "USDVAT", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "VATableValue", "decimal(25, 2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "TradeVATRate", "decimal(25, 5)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "TradeVATAmount", "decimal(25, 5)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "TradeVATableValue", "decimal(25, 5)", currConn, transaction, "", connVM);

                transResult = commonDal.TableAdd("PurchaseSaleTrackings", "Id", "int", currConn, transaction); //tablename,fieldName, datatype
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "PurchaseInvoiceNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "PurchaseInvoiceDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "ReceiveDate", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "ItemNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "BENumber", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "SalesInvoiceNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "CustomHouse", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "SaleInvoiceDateTime", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "IsSold", "bit", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "VATableValue", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "VATAmount", "decimal(25, 2)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "TradeVATableValue", "decimal(25, 5)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "TradeVATAmount", "decimal(25, 5)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "TradeVATRate", "decimal(25, 5)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "TotalValue", "decimal(25, 5)", currConn, transaction, "", connVM);

                transResult = commonDal.TableAdd("DutyDrawBackSaleInvoices", "Id", "int", currConn, transaction); //tablename,fieldName, datatype
                transResult = commonDal.TableFieldAdd("DutyDrawBackSaleInvoices", "SalesInvoiceNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackSaleInvoices", "SL", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackSaleInvoices", "DDBackNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackSaleInvoices", "SalesDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableAdd("Shifts", "Id", "int", currConn, transaction, connVM); //tablename,fieldName, datatype
                transResult = commonDal.TableAdd("SaleExports", "Id", "int", currConn, transaction, connVM); //tablename,fieldName, datatype
                transResult = commonDal.TableAdd("SaleExportInvoices", "Id", "int", currConn, transaction, connVM); //tablename,fieldName, datatype
                transResult = commonDal.TableFieldAdd("Deposits", "SaleExportNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Deposits", "SaleExportNo", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Deposits", "DepositPersonContactNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DepositTDSDetails", "PaymentDate", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseTDSs", "PaymentDate", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseTDSs", "DepositId", "varchar(20)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SaleExports", "SaleExportNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "SaleExportDate", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "Description", "varchar(1000)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "Comments", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "Quantity", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "GrossWeight", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "NetWeight", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "NumberFrom", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "NumberTo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "PortFrom", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "PortTo", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "Post", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "CreatedBy", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "CreatedOn", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "LastModifiedBy", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "LastModifiedOn", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SaleExportInvoices", "SaleExportNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExportInvoices", "SL", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExportInvoices", "SalesInvoiceNo", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Shifts", "ShiftName", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Shifts", "ShiftStart", "time(7)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Shifts", "ShiftEnd", "time(7)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Shifts", "Remarks", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Shifts", "Sl", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Shifts", "NextDay", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "PINo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "PIDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("UserInformations", "FullName", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "Designation", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "ContactNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "Address", "varchar(500)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "ShiftId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "ShiftId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueHeaders", "ShiftId", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "TotalValue", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "WareHouseRent", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "WareHouseVAT", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ATVRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ATVablePrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ATVAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "IsCommercialImporter", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "ValueOnly", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ValueOnly", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "AT_Amount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "AT_Amount", "decimal(25, 9)", currConn, transaction, "", connVM);
                //transResult = commonDal.TableFieldAdd("Deposits", "VATCircle", "varchar(20)", currConn, transaction);
                transResult = commonDal.TableFieldAdd("TransferIssues", "ShiftId", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempTransferData", "VehicleNo", "varchar(30)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempPurchaseData", "Transection_Type", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Transection_Type", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "GenericName", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "DARNo", "varchar(100)", currConn, transaction, "", connVM);

                #endregion

                #region Add PeriodId

                transResult = commonDal.TableFieldAdd("IssueHeaders", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("AdjustmentHistorys", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackHeader", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BureauSalesInvoiceDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Deposits", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VDS", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssues", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferReceives", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);


                #endregion

                #region Id Add

                ////transResult = commonDal.TableFieldIdAdd("DDBHeader", currConn, transaction);
                ////transResult = commonDal.TableFieldIdAdd("DDBDetails", currConn, transaction);
                transResult = commonDal.TableFieldIdAdd("DepositTDSDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("DutyDrawBacks", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("DutyDrawBackHeader", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("DutyDrawBackDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("SaleExports", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("SaleExportInvoices", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TenderHeaders", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TenderDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("Trackings", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("Transfers", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TransferDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TransferIssueDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TransferRawHeaders", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TransferRawDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TransferReceiveDetails", currConn, transaction, connVM);



                transResult = commonDal.TableFieldIdAdd("TransferReceives", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("TransferIssues", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("IssueHeaders", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("IssueDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("PurchaseInvoiceHeaders", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("PurchaseInvoiceDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("PurchaseInvoiceDuties", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("ReceiveHeaders", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("ReceiveDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("SalesInvoiceHeaders", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("SalesInvoiceDetails", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("SalesInvoiceHeadersExport", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("Deposits", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("SDDeposits", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("AdjustmentHistorys", currConn, transaction, connVM);
                transResult = commonDal.TableFieldIdAdd("VDS", currConn, transaction, connVM);

                #endregion  Id Add

                #region Transfer Business

                transResult = commonDal.TableFieldAdd("TransferDetails", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferDetails", "VATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferDetails", "SDRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferDetails", "SDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "VATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "SDRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "SDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "VATRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "VATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "SDRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "SDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Transfers", "TotalVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Transfers", "TotalSDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssues", "TotalVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssues", "TotalSDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferReceives", "TotalVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceives", "TotalSDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);


                #endregion

                #region Add BranchId

                transResult = commonDal.TableFieldAdd("AdjustmentHistorys", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("AdjustmentName", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BanderolProducts", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Banderols", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BankInformations", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMCompanyOverhead", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMRaws", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMs", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BureauSalesInvoiceDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyOverheads", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyOverheadVAT", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Customers", "BranchId", "int", currConn, transaction, "", connVM);
                ////transResult = commonDal.TableFieldAdd("DDBDetails", "BranchId", "int", currConn, transaction);
                ////transResult = commonDal.TableFieldAdd("DDBHeader", "BranchId", "int", currConn, transaction);
                transResult = commonDal.TableFieldAdd("DemandDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DemandHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Deposits", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DisposeDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DisposeHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Duties", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackHeader", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBacks", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("DutyDrawBackSaleInvoices", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueDetailBOMs", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueHeaderBOMs", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("IssueHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PackagingInformations", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PriceService", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDuties", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseSaleTrackings", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReportPurchaseRegister", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductCategories", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExportInvoices", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SaleExports", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeadersExport", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SDDeposits", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TenderDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TenderHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Trackings", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransactionHistorys", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Transactions", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssueDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssues", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferRawDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferRawHeaders", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceiveDetails", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TransferReceives", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Transfers", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VDS", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Vendors", "BranchId", "int", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempIssueData", "UOMn", "varchar(50)", currConn, transaction, "", connVM);



                //transResult = commonDal.TableFieldAdd("VATReturns", "BranchId", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VATReturnSubFormA", "BranchId", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VATReturnSubFormB", "BranchId", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VATReturnSubFormC", "BranchId", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VATReturnSubFormD", "BranchId", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VATReturnSubFormE", "BranchId", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VATReturnSubFormF", "BranchId", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VATReturnSubFormG", "BranchId", "int", currConn, transaction);

                #endregion

                #region Sale Temp Table Field Add



                transResult = commonDal.TableFieldAdd("SalesTempData", "VAT_Amount", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "UOMPrice", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "UOMc", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "UOMn", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "UOMQty", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "SDAmount", "decimal(25, 9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "DeliveryAddress2", "varchar(200)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "DeliveryAddress3", "varchar(200)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Trading", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "TradingD", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "IsVDS", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "GetVDSCertificate", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "VDSCertificateDate", "varchar(50)", currConn, transaction, "'1900/01/01'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "AlReadyPrint", "int", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "DeliveryChallanNo", "varchar(50)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "IsGatePass", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CompInvoiceNo", "varchar(50)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "LCBank", "varchar(50)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "LCDate", "varchar(50)", currConn, transaction, "'1900/01/01'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PINo", "varchar(50)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PIDate", "varchar(50)", currConn, transaction, "'1900/01/01'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "EXPFormNo", "varchar(50)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "EXPFormDate", "varchar(50)", currConn, transaction, "'1900/01/01'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "IsDeemedExport", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "VDSAmount", "decimal(25, 9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "Is6_3TollCompleted", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ValueOnly", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CConversionDate", "varchar(50)", currConn, transaction, "'1900/01/01'", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "Weight", "varchar(50)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ValueOnly", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "WareHouseRent", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "WareHouseVAT", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ATVRate", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ATVablePrice", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ATVAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "TradeVATRate", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "TradeVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "VDSAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "VDSAmountD", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CDNVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CDNSDAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CDNSubtotal", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "BENumber", "varchar(50)", currConn, transaction, "'NA'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "TradeVATableValue", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "TradeVATRate", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "SalesPrice", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "TotalValue", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "DollerValue", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CurrencyValue ", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CurrencyRateFromBDT ", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "DeductionAmount ", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "DiscountedNBRPrice ", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "EXPFormDate ", "varchar(50)", currConn, transaction, "'1900/01/01'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "EXPFormNo ", "varchar(50)", currConn, transaction, "'1900/01/01'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ShiftId ", "int", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "IsCommercialImporter", "varchar(1)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ProductDescription", "varchar(100)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "IsFixedVAT", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "FixedVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "UserId", "int", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "token", "varchar(200)", currConn, transaction, "'0'", connVM);


                transResult = commonDal.TableFieldAdd("SalesTempData", "ExtraCharge", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "FileName", "varchar(300)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "OtherRef", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "CustomerBIN", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousImportedExcelId", "varchar(600)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "VehicleType", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "SourcePaidQuantity", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "SourcePaidQuantity", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "SourcePaidVATAmount", "decimal(25,9)", currConn, transaction, "0", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "NBRPriceInclusiveVAT", "decimal(25,9)", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousNBRPrice", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousQuantity", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousSubTotal", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousSD", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousSDAmount", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousVATRate", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousVATAmount", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousUOM", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "ReasonOfReturn", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "PreviousInvoiceDateTime", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousNBRPrice", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousQuantity", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousSubTotal", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousSD", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousSDAmount", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousVATRate", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousVATAmount", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousUOM", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "ReasonOfReturn", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "PreviousInvoiceDateTime", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("SalesTempData", "CNDNRef", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesTempData", "BranchRef", "varchar(50)", currConn, transaction, "", connVM);

                #endregion

                #region ProductRate

                transResult = commonDal.TableFieldAdd("Products", "VATRate2", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "VDSRate", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "VDSRate", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "VDSAmount", "decimal(25, 2)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "EXPFormNo", "varchar(500)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "EXPFormDate", "datetime", currConn, transaction, "", connVM);

                #endregion

                #region Add Fields 2

                transResult = commonDal.TableFieldAdd("FiscalYear", "APIMsgId", "int", currConn, transaction, "0", connVM);

                transResult = commonDal.TableFieldAdd("TempReceiveData", "Receive_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "Receive_Time", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Receive_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Receive_Time", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Invoice_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Purchase", "Invoice_Time", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VAT_Source_Receives", "Receive_Date", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Receives", "Receive_Time", "varchar(50)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("ProductAvgPrice", "PurchaseNo", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductAvgPrice", "InsertTime", "datetime2", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ProductAvgPrice", "TransactionType", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "UOM2", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "UOMConvertion", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Toll6_3Invoices", "SignatoryName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Toll6_3Invoices", "SignatoryDesig", "varchar(200)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "IsTripComplete", "varchar(1)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMTempData", "FUOM", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMTempData", "FUOMn", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMTempData", "FUOMc", "decimal(25,15)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMTempData", "FUOMPrice", "decimal(25,15)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMs", "UOMPrice", "decimal(25,15)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMs", "UOMn", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMs", "UOMc", "decimal(25,15)", currConn, transaction, "", connVM);


                //transResult = commonDal.TableFieldAdd("BOMTempData", "OverHead_RebatePercent", "decimal(25,9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BOMTempData", "OverHead_RebateAmount", "decimal(25,9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BOMTempData", "OverHead_AdditionalCost", "decimal(25,9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BOMTempData", "overHeadId", "int", currConn, transaction);

                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "SignatoryName", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "SignatoryDesig", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "CNDNRef", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "CustomHouse",
                    "varchar(500)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("Products", "SDRate", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "VATRate3", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "FixedVATAmount", "decimal(25, 9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "IsFixedVAT", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("Products", "TollProduct", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "WithToll", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "LCBank", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "LCDate", "datetime", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("CustomersAddress", "CustomerID", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CustomersAddress", "CustomerVATRegNo", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CustomersAddress", "CustomerAddress", "varchar(500)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BOMs", "CustomerID", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMRaws", "IssueOnProduction", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMRaws", "CustomerID", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BOMCompanyOverhead", "CustomerID", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("ReceiveHeaders", "CustomerID", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VDS", "IsPurchase", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempVDSData", "Branch_Name", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempVDSData", "Remarks", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempVDSData", "BankID", "varchar(20)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempVDSData", "BankDepositDate", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempVDSData", "Person_Address", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("TempVDSData", "Person_ContactNo", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TempReceiveData", "With_Toll", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("TempReceiveData", "ShiftId", "varchar(50)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("TransferIssues", "IsTransfer", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("TransferIssues", "VehicleNo", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("VATReturns", "PeriodID", "varchar(6)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturns", "PeriodStart", "datetime", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VATReturns", "BranchId", "int", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("BranchProfiles", "DbType", "varchar(100)", currConn, transaction, "'oracle'", connVM);

                transResult = commonDal.TableFieldAdd("TempVDSData", "BillNo", "varchar(100)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("UserInformations", "Email", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "SDAmount", "decimal(25,9)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("VAT_Source_Sales", "VAT_Amount", "decimal(25,9)", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "IsRebate", "varchar(1)", currConn, transaction, "'Y'", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "IsRebate", "varchar(1)", currConn, transaction, "'Y'", connVM);

                transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "RebatePeriodID", "varchar(6)", currConn, transaction, "'0'", connVM);
                transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "RebatePeriodID", "varchar(6)", currConn, transaction, "'0'", connVM);



                #endregion FieldAdd

                #endregion

                #region Delete Fields

                transResult = commonDal.TableFieldDelete("Toll6_3Invoices", "VehicleID", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("Toll6_3InvoiceDetails", "[LineNo]", currConn, transaction, connVM);

                #region No Need Branch
                ////////transResult = commonDal.TableFieldDelete("VATReturns", "BranchId", currConn, transaction);
                transResult = commonDal.TableFieldDelete("VATReturnSubFormA", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VATReturnSubFormB", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VATReturnSubFormC", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VATReturnSubFormD", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VATReturnSubFormE", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VATReturnSubFormF", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VATReturnSubFormG", "BranchId", currConn, transaction, connVM);


                //transResult = commonDal.TableFieldDelete("AuditSalesInvoiceHeaders", "BranchId", currConn, transaction);
                transResult = commonDal.TableFieldDelete("BranchReports", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("Branchs", "BranchId", currConn, transaction, connVM);
                //transResult = commonDal.TableFieldDelete("BOMsMas", "BranchId", currConn, transaction);
                transResult = commonDal.TableFieldDelete("Codes", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("CompanyProfiles", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("Costing", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("Currencies", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("CurrencyConversion", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("CustomerGroups", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("CustomersAddress", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("FiscalYear", "BranchId", currConn, transaction, connVM);
                //transResult = commonDal.TableFieldDelete("ImagesStore", "BranchId", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("ReportSales", "BranchId", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("SaleD", "BranchId", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("SaleDOld", "BranchId", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("SaleDoLD1", "BranchId", currConn, transaction);
                transResult = commonDal.TableFieldDelete("Settings", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("SettingsRole", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("Setup", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("Shifts", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("TDSDemos", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("TDSs", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("UOMName", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("UOMs", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("UserAuditLogs", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("UserGroups", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("UserInformations", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("UserLogs", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("UserRolls", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VAT7", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("Vehicles", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("VendorGroups", "BranchId", currConn, transaction, connVM);
                transResult = commonDal.TableFieldDelete("YourTable", "BranchId", currConn, transaction, connVM);
                #endregion

                #endregion

                #endregion

                #region Update Query

                #region Update_RebateDate

                sqlText = @"update  PurchaseInvoiceHeaders set RebateDate=ReceiveDate where RebateDate is null or RebateDate = ''";

                Update_Fields(sqlText, currConn, transaction, connVM);

                #endregion

                Update_RebatePeriodID(currConn, transaction, connVM);

                Update_PeriodId(currConn, transaction, connVM);

                UpdateQueryForBranchId(currConn, transaction, connVM);

                UpdateSalesDetails(currConn, transaction, connVM);

                Update_FiscalYear(currConn, transaction, connVM);

                Update_ChannelTable(currConn, transaction, connVM);

                Update_CompanyCategoryTable(currConn, transaction, connVM);

                Update_ProductAvgTable(currConn, transaction, connVM);

                Update_CalcAVGPrice(currConn, transaction, connVM);
                Update_CodeToCode_TransactionType(currConn, transaction, connVM);

                Update_ProductType(currConn, transaction, connVM);

                Update_OpeningStock(currConn, transaction, connVM);

                //Update_AVGPriceTable(currConn, transaction);

                //Update_AppVersion(currConn, transaction);
                #endregion

                #region Primary Key

                UpdateSalesDetailsPK(new Dictionary<string, string>()
                    {
                        {"PurchaseInvoiceDetails", "PurchaseInvoiceNo"},
                        {"DDBDetails", "DDBDetailsNo"},
                        {"DepositTDSDetails", "TDSId"},
                        {"DutyDrawBackDetails", "DDBackNo"},
                        {"IssueDetails", "IssueNo"},
                        {"ReceiveDetails", "ReceiveNo"},
                        {"TenderDetails", "TenderId"},
                        {"TransferDetails", "TransferNo"},
                        {"TransferIssueDetails", "TransferIssueNo"},
                        {"TransferRawDetails", "TransferId"},
                        {"TransferReceiveDetails", "TransferReceiveNo"}
                    },
                    currConn, transaction, connVM);

                #endregion

                #region Alter Fields

                #region Jan-2024

                commonDal.TableFieldAlter("VDS", "PurchaseNumber", "varchar(100)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempVDSData", "Bill_Amount", "decimal(25, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempVDSData", "VDS_Amount", "decimal(25, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempVDSData", "Purchase_No", "varchar(100)", currConn, transaction, connVM);


                #endregion


                #region Nov-2023

                commonDal.TableFieldAlter("VAT9_1NBRApi_SF_vdsSet", "BuyerSupplyerBIN", "varchar(14)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT9_1NBRApi_SF_otherSet", "ChallanNumber", "varchar(20)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("CodeGenerations", "Prefix", "varchar(6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "RunningTotal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "RunningTotalValue", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "RunningTotalValueFinal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "RunningOpeningValueFinal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "UnitRate", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "RunningOpeningQuantityFinal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "RunningOpeningQuantityValue", "decimal(25, 9)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_2_1_Permanent", "RunningTotal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent", "RunningTotalValue", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent", "RunningTotalValueFinal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent", "RunningOpeningValueFinal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent", "RunningOpeningQuantityFinal", "decimal(25, 9)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_2_1_Permanent_Branch", "RunningTotal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent_Branch", "RunningTotalValue", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent_Branch", "RunningTotalValueFinal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent_Branch", "RunningOpeningValueFinal", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent_Branch", "AdjustmentValue", "decimal(25, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_1_Permanent_Branch", "RunningOpeningQuantityFinal", "decimal(25, 9)", currConn, transaction, connVM);

                #endregion

                #region Aug-2022


                commonDal.TableFieldAlter("ProductStockTemp", "ProductName", "varchar(MAX)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockTemp", "ProductName", "varchar(MAX)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("UserInformations", "LastPasswordChangeDate", "datetime", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "FName", "varchar(MAX)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ErrorLogs", "FileName", "varchar(MAX)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "RName", "varchar(MAX)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_2", "ProductDesc", "varchar(1000)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_2", "DeclaredPrice", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2", "RunningTotal", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2", "RunningTotalValue", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2", "RunningTotalValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2", "RunningOpeningValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2", "RunningOpeningQuantityFinal", "decimal(18, 4)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_2_Permanent_DayWise_Branch", "DeclaredPrice", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_DayWise_Branch", "RunningTotal", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_DayWise_Branch", "RunningTotalValue", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_DayWise_Branch", "RunningTotalValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_DayWise_Branch", "RunningOpeningValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_DayWise_Branch", "RunningOpeningQuantityFinal", "decimal(18, 4)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT_Source_Issue", "ID", "varchar(800)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceDetails", "Option2", "decimal(18,6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesTempData", "Delivery_Address", "nvarchar(1000)", currConn, transaction, connVM);


                commonDal.TableFieldAlter("VAT6_2_Permanent_Branch", "DeclaredPrice", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_Branch", "RunningTotal", "decimal(18, 6)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_2_Permanent_Branch", "RunningTotalValue", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_Branch", "RunningTotalValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_Branch", "RunningOpeningValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent_Branch", "RunningOpeningQuantityFinal", "decimal(18, 4)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_2_Permanent", "DeclaredPrice", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent", "RunningTotal", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent", "RunningTotalValue", "decimal(18, 6)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent", "RunningTotalValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent", "RunningOpeningValueFinal", "decimal(18, 4)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_2_Permanent", "RunningOpeningQuantityFinal", "decimal(18, 4)", currConn, transaction, connVM);

                #endregion

                #region july-2021 to Dec-2021

                commonDal.TableFieldAlter("APINote26_31", "ReasonforIssuance", "varchar(100)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssues", "SerialNo", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssues", "Comments", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssues", "ReferenceNo", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssues", "TripNo", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssues", "ImportIDExcel", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceHeaders", "Comments", "nvarchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMs", "Comments", "varchar(1000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("PurchaseInvoiceDetails", "HSCode", "varchar(500)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMCompanyOverhead", "HeadName", "varchar(1000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "RName", "varchar(500)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Products", "ProductName", "varchar(MAX)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductDetails", "ProductName", "varchar(MAX)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Products", "ProductDescription", "varchar(MAX)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("Customers", "CustomerName", "nvarchar(MAX)", currConn, transaction, connVM);
                ////commonDal.TableFieldAlter("Customers", "Address1", "varchar(MAX)", currConn, transaction);
                commonDal.TableFieldAlter("Customers", "Address1", "nvarchar(1000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Customers", "Address3", "nvarchar(1000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductStockMISKas", "CustomerId", "varchar(50)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("Vendors", "VendorName", "varchar(MAX)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Vendors", "Address1", "varchar(MAX)", currConn, transaction, connVM);

                #endregion

                #region Jan-2021 to Mar-2021

                //commonDal.TableFieldAlter("SalesInvoiceDetails", "SalesInvoiceNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("SalesInvoiceHeaders", "SalesInvoiceNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "PurchaseInvoiceNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("PurchaseInvoiceHeaders", "PurchaseInvoiceNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("IssueDetails", "IssueNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("IssueHeaders", "IssueNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("ReceiveDetails", "ReceiveNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("ReceiveHeaders", "ReceiveNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("TransferIssueDetails", "TransferIssueNo", "varchar(50)", currConn, transaction);
                //commonDal.TableFieldAlter("TransferIssues", "TransferIssueNo", "varchar(50)", currConn, transaction);

                //commonDal.TableFieldAlter("BOMTempData", "FName", "varchar(250)", currConn, transaction);
                //commonDal.TableFieldAlter("BOMTempData", "RName", "varchar(250)", currConn, transaction);

                commonDal.TableFieldAlter("TempTransferData", "TransactionDateTime", "datetime", currConn, transaction, connVM);
                commonDal.TableFieldAlter("IssueHeaders", "TotalAmount", "decimal(32,5)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempReceiveData", "Reference_No", "varchar(6000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ReceiveHeaders", "ReferenceNo", "varchar(6000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Customers", "Email", "varchar(200)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("IssueHeaders", "ImportIDExcel", "varchar(200)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempPurchaseData", "Remarks", "varchar(200)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceDetails", "ReasonOfReturn", "varchar(500)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT_Source_Issue", "Quantity", "decimal(18, 9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT_Source_Receives", "Quantity", "decimal(18, 5)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT_Source_Receives", "NBR_Price", "decimal(18, 5)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("VAT6_1", "BENumber", "varchar(300)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_1_Permanent", "BENumber", "varchar(300)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT6_1_permanent_Branch", "BENumber", "varchar(300)", currConn, transaction, connVM);


                #endregion

                #region Before Jan-2021

                commonDal.TableFieldAlter("TempPurchaseData", "Item_Name", "varchar(200)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesTempData", "Invoice_Date_Time", "datetime", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesTempData", "Delivery_Date_Time", "datetime", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempPurchaseData", "VAT_Amount", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT_Source_Purchase", "VAT_Amount", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempPurchaseData", "SD_Amount", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT_Source_Purchase", "SD_Amount", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VAT_Source_Purchase", "Item_Name", "varchar(200)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("UserInformations", "UserPassword", "varchar(500)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempTransferData", "Quantity", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesTempData", "VAT_Amount", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempIssueData", "Quantity", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DutyDrawBackHeader", "SalesInvoiceNo", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DutyDrawBackDetails", "SalesInvoiceNo", "varchar(2000)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("TempReceiveData", "Quantity", "decimal(25,9)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempReceiveData", "NBR_Price", "decimal(25,9)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("Products", "HSCodeNo", "varchar(500)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("SalesTempData", "Reference_No", "varchar(6000)", currConn, transaction, connVM);
                //commonDal.TableFieldAlter("SalesTempData", "VAT_Amount", "decimal(25,10)", currConn, transaction);

                commonDal.TableFieldAlter("TempTransferData", "CostPrice", "decimal(25, 9)", currConn, transaction, connVM);

                //////commonDal.TableFieldAlter("SalesInvoiceHeaders", "DeliveryAddress1", "varchar(2000)", currConn, transaction);
                commonDal.TableFieldAlter("SalesInvoiceHeaders", "DeliveryAddress1", "nvarchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceHeaders", "ImportIDExcel", "varchar(6000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceHeaders", "SerialNo", "varchar(6000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceDetails", "Comments", "varchar(2000)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("ReceiveHeaders", "ImportIDExcel", "varchar(200)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempReceiveData", "Receive_DateTime", "datetime", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempIssueData", "Issue_DateTime", "datetime", currConn, transaction, connVM);

                commonDal.TableFieldAlter("BOMTempData", "TotalQuantity", "decimal(25, 15)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "UOMWQty", "decimal(25, 15)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "UOMUQty", "decimal(25, 15)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "UseQuantity", "decimal(25, 15)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "WastageQuantity", "decimal(25, 15)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("BOMTempData", "OverHead_RebatePercent", "decimal(25, 15)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "OverHead_AdditionalCost", "decimal(25, 15)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMTempData", "OverHead_RebateAmount", "decimal(25, 15)", currConn, transaction, connVM);

                commonDal.TableFieldAlter("SalesInvoiceDetails", "ProductDescription", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempVDSData", "VendorID", "varchar(20)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempVDSData", "Person_ContactNo", "varchar(500)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempVDSData", "Person_Address", "varchar(500)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TempVDSData", "Comments", "varchar(500)", currConn, transaction, connVM);
                //commonDal.TableFieldAlter("SalesTempData", "Delivery_Address", "nvarchar(500) null", currConn, transaction);

                commonDal.TableFieldAlter("CompanyProfiles", "BusinessNature", "varchar(300)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("CompanyProfiles", "AccountingNature", "varchar(300)", currConn, transaction, connVM);

                #endregion

                #region Alter BranchId for all table feild

                commonDal.TableFieldAlter("SalesTempData", "Comments", "nvarchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Products", "ShortName", "nvarchar(300)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssues", "TransferTo", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssueDetails", "TransferTo", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Transfers", "TransferFrom", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferDetails", "TransferFrom", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferReceives", "TransferFrom", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferReceiveDetails", "TransferFrom", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("AdjustmentHistorys", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("AdjustmentName", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BanderolProducts", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Banderols", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BankInformations", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMCompanyOverhead", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMRaws", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BOMs", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("BureauSalesInvoiceDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("CompanyOverheads", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("CompanyOverheadVAT", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Customers", "BranchId", "int", currConn, transaction, connVM);
                ////commonDal.TableFieldAlter("Customers", "Address1", "varchar(1000)", currConn, transaction);
                commonDal.TableFieldAlter("Customers", "Address2", "varchar(1000)", currConn, transaction, connVM);
                //commonDal.TableFieldAlter("Customers", "Address3", "varchar(1000)", currConn, transaction);
                //////commonDal.TableFieldAlter("DDBDetails", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("DDBHeader", "BranchId", "int", currConn, transaction);
                commonDal.TableFieldAlter("DemandDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DemandHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Deposits", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DisposeDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DisposeHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Duties", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DutyDrawBackDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DutyDrawBackHeader", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DutyDrawBacks", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("DutyDrawBackSaleInvoices", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("IssueDetailBOMs", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("IssueDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("IssueHeaderBOMs", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("IssueHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("IssueHeaders", "SerialNo", "varchar(2000)", currConn, transaction, connVM);
                commonDal.TableFieldAlter("PackagingInformations", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("PriceService", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Products", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("PurchaseInvoiceDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("PurchaseInvoiceDuties", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("PurchaseInvoiceHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("PurchaseSaleTrackings", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ReceiveDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ReceiveHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ReportPurchaseRegister", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("ProductCategories", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SaleExportInvoices", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SaleExports", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SalesInvoiceHeadersExport", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("SDDeposits", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TenderDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TenderHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Trackings", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransactionHistorys", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Transactions", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssueDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferIssues", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferRawDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferRawHeaders", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferReceiveDetails", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("TransferReceives", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Transfers", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("VDS", "BranchId", "int", currConn, transaction, connVM);
                commonDal.TableFieldAlter("Vendors", "BranchId", "int", currConn, transaction, connVM);


                ////commonDal.TableFieldAlter("VATReturns", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("VATReturnSubFormA", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("VATReturnSubFormB", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("VATReturnSubFormC", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("VATReturnSubFormD", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("VATReturnSubFormE", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("VATReturnSubFormF", "BranchId", "int", currConn, transaction);
                ////commonDal.TableFieldAlter("VATReturnSubFormG", "BranchId", "int", currConn, transaction);


                #endregion

                #region Commented - Before Apr-15-2020

                //commonDal.TableFieldAlter("AdjustmentHistorys","AdjHistoryNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("BureauSalesInvoiceDetails","SalesInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DDBDetails","DDBNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DDBHeader","DDBNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DemandDetails","DemandNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DemandHeaders","DemandNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("Deposits","DepositId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DepositTDSDetails","TDSId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DepositTDSs","DepositId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DisposeDetails","DisposeNumber","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DisposeHeaders","DisposeNumber","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DutyDrawBackDetails","DDBackNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DutyDrawBackHeader","DDBackNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DutyDrawBacks","DrawBackID","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("DutyDrawBackSaleInvoices","SalesInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("IssueDetailBOMs","IssueNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("IssueDetails","IssueNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("IssueHeaderBOMs","IssueNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("IssueHeaders","IssueNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails","PurchaseInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties","PurchaseInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("PurchaseInvoiceHeaders","PurchaseInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("PurchaseSaleTrackings","PurchaseInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("PurchaseTDSs","PurchaseInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("ReceiveDetails","ReceiveNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("ReceiveHeaders","ReceiveNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("SaleExportInvoices","SaleExportNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("SaleExports","SaleExportNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("SalesInvoiceDetails","SalesInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("SalesInvoiceHeaders","SalesInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("SalesInvoiceHeadersExport","SalesInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("SalesTempData","SalesInvoiceNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("SDDeposits","DepositId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TenderDetails","TenderId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TenderHeaders","TenderId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("Toll6_3InvoiceDetails","TollNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("Toll6_3Invoices","TollNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransactionHistorys","TransactionNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("Transactions","TransactionID","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransferDetails","TransferNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransferIssueDetails","TransferIssueNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransferIssues","TransferIssueNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransferRawDetails","TransferId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransferRawHeaders","TransferId","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransferReceiveDetails","TransferReceiveNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("TransferReceives","TransferReceiveNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("Transfers","TransferNo","varchar(50)",currConn,transaction);
                //commonDal.TableFieldAlter("VDS","VDSId","varchar(50)",currConn,transaction);

                #endregion

                #endregion

                #region Stored Procedure

                #region spInsertOpeningBranch

                string SPExecuteCustomQuery =
                    @"
ALTER PROCEDURE [dbo].[SPExecuteCustomQuery]
    @Query NVARCHAR(MAX)
AS
BEGIN
    EXEC sp_executesql @Query; -- Execute the dynamic SQL query passed as parameter
END;

";

                NewStoredProc("SPExecuteCustomQuery", SPExecuteCustomQuery, currConn, transaction, connVM);

                #endregion

                #region spInsertOpeningBranch

                string SPExecuteSelectQuery =
                    @"
ALTER PROCEDURE [dbo].[SPExecuteSelectQuery]
    @Query NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    EXEC sp_executesql @Query; -- Execute the dynamic SQL query passed as parameter
END;

";

                NewStoredProc("SPExecuteSelectQuery", SPExecuteSelectQuery, currConn, transaction, connVM);

                #endregion

                #region spVAT6_2

                string spVAT6_2 = @"
ALTER PROCEDURE [dbo].[spVAT6_2](
    @StartDate DATETIME,
    @EndDate DATETIME,
    @FilteredItems VARCHAR(1) = 'X',
    @ItemNo VARCHAR(50) = NULL,
    @post1 VARCHAR(2) = 'Y',
    @post2 VARCHAR(2) = 'Y',
    @IsExport VARCHAR(20) = 'No',
    @Opening BIT,
    @VAT6_2_1 BIT,
    @BranchId INT = 0,
    @stockMovement BIT,
    @UserId VARCHAR(20)
)
AS

BEGIN

    BEGIN TRY

        -- region local variable
        DECLARE @Present DECIMAL(25, 9);
        DECLARE @OpeningDate DATETIME;

        DECLARE @StartDate_mask DATETIME = @StartDate
        DECLARE @EndDate_mask DATETIME = @EndDate
        DECLARE @FilteredItems_mask VARCHAR(1) = @FilteredItems
        DECLARE @ItemNo_mask VARCHAR(50) = @ItemNo
        DECLARE @post1_mask VARCHAR(2) = @post1
        DECLARE @post2_mask VARCHAR(2) = @post2
        DECLARE @IsExport_mask VARCHAR(20) = @IsExport
        DECLARE @Opening_mask BIT =@Opening
        DECLARE @VAT6_2_1_mask BIT= @VAT6_2_1
        DECLARE @BranchId_mask INT =@BranchId
        DECLARE @stockMovement_mask BIT =@stockMovement
        DECLARE @UserId_mask VARCHAR(20) =@UserId
        -- end region

        -- DROP INDEX IF EXISTS idx_order ON [VAT_Process].[dbo].VATTemp_17_1;
--     CREATE TABLE VAT_17_1
--     (
--         ID               INT IDENTITY (1,1),
--         SerialId         INT            NULL,
--         SerialNo         VARCHAR(10)    NULL,
--         ItemNo           VARCHAR(200)   NULL,
--         StartDateTime    DATETIME       NULL,
--         StartingQuantity DECIMAL(25, 9) NULL,
--         StartingAmount   DECIMAL(25, 9) NULL,
--         CustomerID       VARCHAR(200)   NULL,
--         SD               DECIMAL(25, 9) NULL,
--         VATRate          DECIMAL(25, 9) NULL,
--         Quantity         DECIMAL(25, 9) NULL,
--         UnitCost         DECIMAL(25, 9) NULL,
--         TransID          VARCHAR(200)   NULL,
--         TransType        VARCHAR(200)   NULL,
--         Remarks          VARCHAR(200),
--         CreatedDateTime  DATETIME       NULL,
--         UnitRate         DECIMAL(25, 9),
--         ProductDesc      VARCHAR(500),
--         ClosingRate      DECIMAL(25, 9),
--         AdjustmentValue  DECIMAL(25, 9)
--     )
--
--     CREATE TABLE [VAT_Process].[dbo].VATTemp_17_1
--     (
--         SerialNo        VARCHAR(10)    NULL,
--         Dailydate       DATETIME       NULL,
--         TransID         VARCHAR(200)   NULL,
--         TransType       VARCHAR(200)   NULL,
--         ItemNo          VARCHAR(200)   NULL,
--         UnitCost        DECIMAL(25, 9) NULL,
--         Quantity        DECIMAL(25, 9) NULL,
--         VATRate         DECIMAL(25, 9) NULL,
--         SD              DECIMAL(25, 9) NULL,
--         Remarks         VARCHAR(200),
--         CreatedDateTime DATETIME       NULL,
--         UnitRate        DECIMAL(25, 9),
--         AdjustmentValue DECIMAL(25, 9)
--     )

        -- DELETE FROM VAT_17_1
        DELETE FROM [VAT_Process].[dbo].VATTemp_17_1

        CREATE TABLE #ProductReceive
        (
            ItemNo      VARCHAR(50),
            OpeningRate DECIMAL(25, 9),
            ClosingRate DECIMAL(25, 9)
        )


        IF (@FilteredItems_mask = 'Y')
            BEGIN
                INSERT INTO #ProductReceive(ItemNo, OpeningRate, ClosingRate)
                SELECT Products.ItemNo, 0 OpeningRate, 0 ClosingRate
                FROM Products
                         LEFT OUTER JOIN ProductCategories pc
                                         ON pc.CategoryID = Products.CategoryID
                WHERE 1 = 1
                  AND Products.ReportType IN ('VAT6_2', 'VAT6_1_And_6_2')
                  AND Products.ProcessFlag = 'Y'
            END

        IF (@ItemNo_mask IS NOT NULL)
            BEGIN

                INSERT INTO #ProductReceive(ItemNo, OpeningRate, ClosingRate)
                SELECT Products.ItemNo, 0 OpeningRate, 0 ClosingRate
                FROM Products
                         LEFT OUTER JOIN ProductCategories pc
                                         ON pc.CategoryID = Products.CategoryID
                WHERE 1 = 1
                  AND Products.ReportType IN ('VAT6_2', 'VAT6_1_And_6_2')
                  AND ItemNo = @ItemNo_mask

            END

        IF (@ItemNo_mask IS NULL AND @FilteredItems_mask = 'x')
            BEGIN
                INSERT INTO #ProductReceive(ItemNo, OpeningRate, ClosingRate)
                SELECT Products.ItemNo, 0 OpeningRate, 0 ClosingRate
                FROM Products
                         LEFT OUTER JOIN ProductCategories pc
                                         ON pc.CategoryID = Products.CategoryID
                WHERE 1 = 1
                  AND Products.ReportType IN ('VAT6_2', 'VAT6_1_And_6_2')
            END

---------- Transaction Data------------------
        IF (@Opening_mask = 0)
            BEGIN

                IF (@VAT6_2_1_mask = 0)
                    BEGIN
                        ------------ Receive Data-----------------

                        -------------'Other','Tender','PackageProduction' ,'Wastage','SaleWastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService' ,'TradingImport'

                        INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo,
                                                                     UnitCost, Quantity,
                                                                     VATRate, SD, remarks, CreatedDateTime, UnitRate,
                                                                     AdjustmentValue,BranchId)

                        SELECT 'A1',
                               rd.ReceiveDateTime,
                               rd.ReceiveNo,
                               'Receive',
                               rd.ItemNo,
                               ISNULL(rd.SubTotal, 0) AS SubTotal,
                               ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)),
                               rd.VATAmount,
                               rd.SDAmount,
                               rd.TransactionType--'Receive'
                                ,
                               rd.ReceiveDateTime,
                               rd.CostPrice,
                               rd.AdjustmentValue,
                               rd.BranchId
                        FROM ReceiveDetails RD
                        WHERE rd.ReceiveDateTime >= @StartDate_mask
                          AND rd.ReceiveDateTime < DATEADD(D, 1, @EndDate_mask)
                          AND rd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                          AND (Quantity > 0)
                          AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                          AND rd.TransactionType IN
                              ('Other', 'Tender', 'PackageProduction', 'Wastage', 'Trading', 'TradingAuto',
                               'ExportTrading',
                               'TradingTender', 'ExportTradingTender', 'InternalIssue', 'Service', 'ExportService',
                               'TradingImport'
                                  )
                          AND rd.BranchId > @BranchId_mask

                        -------------'Other','Tender','PackageProduction' ,'Wastage','SaleWastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService' ,'TradingImport'----------
                        INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo,
                                                                     UnitCost, Quantity,
                                                                     VATRate, SD, remarks, CreatedDateTime, UnitRate,
                                                                     AdjustmentValue,BranchId)

                        SELECT 'A2',
                               rd.TransferDate,
                               h.TransferCode,
                               'Receive',
                               rd.ToItemNo,
                               ISNULL(rd.ReceivePrice, 0) AS SubTotal,
                               ISNULL(NULLIF(ToQuantity, 0), ISNULL(ToQuantity, 0)),
                               0                             VATAmount,
                               0                             SDAmount,
                               rd.TransactionType--'Receive'
                                ,
                               rd.TransferDate,
                               rd.ReceivePrice,
                               0                             AdjustmentValue,
                               rd.BranchId
                        FROM ProductTransfersDetails RD
                                 LEFT OUTER JOIN ProductTransfers h ON h.Id = rd.ProductTransferId
                        WHERE 1 = 1
                          AND rd.TransferDate >= @StartDate_mask
                          AND rd.TransferDate < DATEADD(D, 1, @EndDate_mask)
                          AND rd.ToItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                          AND (ToQuantity > 0)
                          AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                          AND rd.TransactionType IN ('FinishCTC')
                          AND rd.BranchId > @BranchId_mask

                        -------------- Toll Receive-------------------

                        INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo,
                                                                     UnitCost, Quantity,
                                                                     VATRate, SD, remarks, CreatedDateTime, UnitRate,
                                                                     AdjustmentValue,BranchId)

                        SELECT 'A1',
                               rd.ReceiveDateTime,
                               rd.ReceiveNo,
                               'Receive',
                               rd.ItemNo,
                               CASE
                                   WHEN @IsExport_mask = 'Yes' THEN ISNULL(rd.DollerValue, 0)
                                   ELSE ISNULL(rd.SubTotal, 0) END AS SubTotal,
                               ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)),
                               rd.VATAmount,
                               rd.SDAmount,
                               rd.TransactionType--'Receive'
                                ,
                               rd.ReceiveDateTime,
                               rd.CostPrice,
                               rd.AdjustmentValue,
                               rd.BranchId
                        FROM ReceiveDetails RD
                                 LEFT OUTER JOIN products p ON RD.ItemNo = p.ItemNo
                                 LEFT OUTER JOIN ProductCategories pc ON p.CategoryID = pc.CategoryID
                        WHERE rd.ReceiveDateTime >= @StartDate_mask
                          AND rd.ReceiveDateTime < DATEADD(D, 1, @EndDate_mask)
                          AND rd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                          AND (Quantity > 0)
                          AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                          AND rd.TransactionType IN ('TollReceive')
                          AND pc.IsRaw IN ('finish')
                          AND rd.BranchId > @BranchId_mask


                        -----------------------Toll Receive-----------------------


                        IF (@BranchId_mask != 0)
                            BEGIN
                                ------------------------'TransferReceive'--------------------

                                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType,
                                                                             ItemNo, UnitCost,
                                                                             Quantity,
                                                                             VATRate, SD, remarks, CreatedDateTime,
                                                                             UnitRate, AdjustmentValue,BranchId)

                                SELECT 'A4',
                                       rd.TransactionDateTime,
                                       rd.TransferReceiveNo,
                                       'Receive',
                                       rd.ItemNo,
                                       ISNULL(rd.SubTotal, 0) AS SubTotal,
                                       ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)),
                                       rd.VATAmount,
                                       rd.SDAmount,
                                       'Transfer Receive'
                                        ,
                                       rd.TransactionDateTime,
                                       rd.CostPrice,
                                       0                         AdjustmentValue,
                                       rd.BranchId
                                FROM TransferReceiveDetails RD
                                         LEFT OUTER JOIN products p ON RD.ItemNo = p.ItemNo
                                         LEFT OUTER JOIN ProductCategories pc ON p.CategoryID = pc.CategoryID
                                WHERE rd.TransactionDateTime >= @StartDate_mask
                                  AND rd.TransactionDateTime < DATEADD(D, 1, @EndDate_mask)
                                  AND rd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                                  AND (Quantity > 0)
                                  AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                                  AND rd.TransactionType IN ('62in')
                                  AND pc.IsRaw IN ('finish', 'Trading')
                                  AND rd.BranchId > @BranchId_mask


                                ------------------------'TransferReceive'--------------------
                            END


                        ------------------------'ReceiveReturn'---------------------

                        INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo,
                                                                     UnitCost, Quantity,
                                                                     VATRate, SD, remarks, CreatedDateTime, UnitRate,
                                                                     AdjustmentValue,BranchId)

                        SELECT 'A1',
                               rd.ReceiveDateTime,
                               rd.ReceiveNo,
                               'Receive',
                               rd.ItemNo,
                               -CASE
                                    WHEN @IsExport_mask = 'Yes' THEN ISNULL(rd.DollerValue, 0)
                                    ELSE ISNULL(rd.SubTotal, 0) END AS SubTotal,
                               -ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)),
                               -rd.VATAmount
                                ,
                               -rd.SDAmount,
                               RD.TransactionType,
                               rd.CreatedOn,
                               rd.CostPrice,
                               rd.AdjustmentValue,
                               rd.BranchId
                        FROM ReceiveDetails RD
                        WHERE rd.ReceiveDateTime >= @StartDate_mask
                          AND rd.ReceiveDateTime < DATEADD(D, 1, @EndDate_mask)
                          AND rd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                          AND (Quantity > 0)
                          AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                          AND RD.TransactionType IN ('ReceiveReturn')
                          AND rd.BranchId > @BranchId_mask

                        -------------------------'ReceiveReturn'--------------------


                        --------------------Receive Data----------------------


                        -------------------Purchase Data ----------------------

                        INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo,
                                                                     UnitCost, Quantity,
                                                                     VATRate, SD, remarks, CreatedDateTime, UnitRate,BranchId)

                        SELECT 'A5'
                             , ReceiveDate
                             , PurchaseInvoiceNo
                             , 'Receive'
                             , ItemNo
                             , SubTotal
                             , ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)) Quantity
                             , VATAmount
                             , SDAmount
                             , 'Client FG Receive without BOM'
                             , ReceiveDate
                             , CostPrice
                        ,rd.BranchId
                        FROM PurchaseInvoiceDetails rd
                        WHERE rd.ReceiveDate >= @StartDate_mask
                          AND rd.ReceiveDate < DATEADD(D, 1, @EndDate_mask)
                          AND rd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                          AND (Quantity > 0)
                          AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                          AND rd.TransactionType IN ('ClientFGReceiveWOBOM')
                          AND rd.BranchId > @BranchId_mask
                        -------------------Purchase Data-----------------------

                    END

                ----------------------- Sale Data------------------------------------

                -------------------------------------------------- Start Sale --------------------------------------------------


                --'Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale'


                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate, AdjustmentValue,BranchId)

                SELECT 'B10'
                     , InvoiceDateTime
                     , SalesInvoiceNo
                     , 'Sale'
                     , ItemNo
------,CASE WHEN @IsExport_mask='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
                     , CurrencyValue AS                               SubTotal
                     , ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)) Quantity
                     , VATAmount
                     , SDAmount
                     , SalesInvoiceDetails.TransactionType--'Sale'
                     , InvoiceDateTime
                     , NBRPrice
                     , AdjustmentValue
                ,BranchId
                FROM SalesInvoiceDetails
                WHERE InvoiceDateTime >= @StartDate_mask
                  AND InvoiceDateTime < DATEADD(D, 1, @EndDate_mask)
                  AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (UOMQty > 0)
                  AND (Post = @post1_mask OR Post = @post2_mask)
                  AND TransactionType IN ('RawSale')
                  AND BranchId > @BranchId_mask
                OPTION (OPTIMIZE FOR UNKNOWN)

                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate, AdjustmentValue,BranchId)

                SELECT 'B1'
                     , InvoiceDateTime
                     , SalesInvoiceNo
                     , 'Sale'
                     , ItemNo
                     , CurrencyValue AS                               SubTotal
                     , ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)) Quantity
                     , VATAmount
                     , SDAmount
                     , SalesInvoiceDetails.TransactionType--'Sale'
                     , InvoiceDateTime
                     , NBRPrice
                     , AdjustmentValue
                ,BranchId
                FROM SalesInvoiceDetails
                WHERE InvoiceDateTime >= @StartDate_mask
                  AND InvoiceDateTime < DATEADD(D, 1, @EndDate_mask)
                  AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (UOMQty > 0)
                  AND (Post = @post1_mask OR Post = @post2_mask)
                  AND TransactionType IN
                      ('Other', 'PackageSale', 'Wastage', 'CommercialImporter', 'ServiceNS', 'Export',
                       'ExportServiceNS',
                       'ExportTender',
                       'Tender', 'ExportPackage', 'Trading', 'ExportTrading', 'TradingTender', 'ExportTradingTender',
                       'InternalIssue', 'Service', 'ExportService', 'TollSale')
                  AND BranchId > @BranchId_mask
                OPTION (OPTIMIZE FOR UNKNOWN)

                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate, AdjustmentValue,BranchId)

                SELECT 'B2'
                     , rd.TransferDate
                     , h.TransferCode
                     , 'Sale'
                     , FromItemNo
                     , IssuePrice AS                                            SubTotal
                     , ISNULL(NULLIF(FromQuantity, 0), ISNULL(FromQuantity, 0)) Quantity
                     , 0                                                        VATAmount
                     , 0                                                        SDAmount
                     , rd.TransactionType--'Sale'
                     , rd.TransferDate
                     , IssuePrice
                     , 0                                                        AdjustmentValue
                ,rd.BranchId
                FROM ProductTransfersDetails rd
                         LEFT OUTER JOIN ProductTransfers h ON h.Id = rd.ProductTransferId
                WHERE rd.TransferDate >= @StartDate_mask
                  AND rd.TransferDate < DATEADD(D, 1, @EndDate_mask)
                  AND FromItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (FromQuantity > 0)
                  AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                  AND rd.TransactionType IN ('FinishCTC')
                  AND rd.BranchId > @BranchId_mask


                IF (@stockMovement_mask = 0)
                    BEGIN
                        INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo,
                                                                     UnitCost, Quantity,
                                                                     VATRate, SD, remarks, CreatedDateTime, UnitRate,
                                                                     AdjustmentValue,BranchId)

                        SELECT 'B1'
                             , InvoiceDateTime
                             , SalesInvoiceNo
                             , 'Sale'
                             , ItemNo
------,CASE WHEN @IsExport_mask='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
                             , CurrencyValue AS                               SubTotal
                             , ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)) Quantity
                             , VATAmount
                             , SDAmount
                             , SalesInvoiceDetails.TransactionType--'Sale'
                             , InvoiceDateTime
                             , NBRPrice
                             , AdjustmentValue
                        ,BranchId
                        FROM SalesInvoiceDetails
                        WHERE InvoiceDateTime >= @StartDate_mask
                          AND InvoiceDateTime < DATEADD(D, 1, @EndDate_mask)
                          AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                          AND (UOMQty > 0)
                          AND (Post = @post1_mask OR Post = @post2_mask)
                          AND TransactionType IN ('SaleWastage')
                          AND BranchId > @BranchId_mask
                        OPTION (OPTIMIZE FOR UNKNOWN)
                    END

                -- 'Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale'


                ------------------------- Debit ---------------------------------------------------------------------

                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate, AdjustmentValue,BranchId)

                SELECT 'B1'
                     , InvoiceDateTime
                     , SalesInvoiceNo
                     , 'Sale'
                     , ItemNo
                     , CurrencyValue AS                                                SubTotal
                     , (CASE WHEN ISNULL(ValueOnly, 'N') = 'Y' THEN 0 ELSE UOMQty END) Quantity
                     , VATAmount
                     , SDAmount
                     , SalesInvoiceDetails.TransactionType--'Sale'
                     , InvoiceDateTime
                     , NBRPrice
                     , AdjustmentValue
                ,BranchId
                FROM SalesInvoiceDetails
                WHERE InvoiceDateTime >= @StartDate_mask
                  AND InvoiceDateTime < DATEADD(D, 1, @EndDate_mask)
                  AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (UOMQty > 0)
                  AND (Post = @post1_mask OR Post = @post2_mask)
                  AND TransactionType IN ('Debit')
                  AND BranchId > @BranchId_mask
                OPTION (OPTIMIZE FOR UNKNOWN)
                --------------------------- Debit ---------------------------------------------------------------------


                ------------------------- Dispose Finish---------------------------------------------------------------------
                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate, AdjustmentValue,BranchId)

                SELECT 'B1'
                     , InvoiceDateTime
                     , SalesInvoiceNo
                     , 'Sale'
                     , ItemNo
                     , CurrencyValue AS                               SubTotal
                     , ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)) Quantity
                     , VATAmount
                     , SDAmount
                     , 'Dispose Finish Sale'                          TransactionType--'Sale'
                     , InvoiceDateTime
                     , NBRPrice
                     , AdjustmentValue
                ,BranchId
                FROM SalesInvoiceDetails
                WHERE 1 = 1
                  AND InvoiceDateTime >= @StartDate_mask
                  AND InvoiceDateTime < DATEADD(D, 1, @EndDate_mask)
                  AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (UOMQty > 0)
                  AND (Post = @post1_mask OR Post = @post2_mask)
                  AND TransactionType IN ('DisposeFinish')
                  AND BranchId > @BranchId_mask
                OPTION (OPTIMIZE FOR UNKNOWN)
                ------------------------- Dispose Finish---------------------------------------------------------------------


                ----------------------- Transfer Receive ------------------------------------
                IF (@BranchId_mask != 0)
                    BEGIN
                        INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo,
                                                                     UnitCost, Quantity,
                                                                     VATRate, SD, remarks, CreatedDateTime, UnitRate,
                                                                     AdjustmentValue,BranchId)

                        SELECT 'B3',
                               rd.TransactionDateTime,
                               rd.TransferIssueNo,
                               'Sale',
                               rd.ItemNo,
                               ISNULL(rd.SubTotal, 0) AS SubTotal,
                               ISNULL(NULLIF(UOMQty, 0), ISNULL(Quantity, 0)),
                               rd.VATAmount,
                               rd.SDAmount,
                               'Transfer Issue'
                                ,
                               rd.TransactionDateTime,
                               rd.CostPrice,
                               0                         AdjustmentValue,
                               rd.BranchId
                        FROM TransferIssueDetails RD
                                 LEFT OUTER JOIN products p ON RD.ItemNo = p.ItemNo
                                 LEFT OUTER JOIN ProductCategories pc ON p.CategoryID = pc.CategoryID
                        WHERE rd.TransactionDateTime >= @StartDate_mask
                          AND rd.TransactionDateTime < DATEADD(D, 1, @EndDate_mask)
                          AND rd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                          AND (Quantity > 0)
                          AND (rd.Post = @post1_mask OR rd.Post = @post2_mask)
                          AND rd.TransactionType IN ('62out')
                          AND pc.IsRaw IN ('finish', 'Trading')
                          AND rd.BranchId > @BranchId_mask
                    END

                ---------------------------credit---------------------------------------
                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate, AdjustmentValue,BranchId)
                SELECT 'B1',
                       InvoiceDateTime,
                       SalesInvoiceNo,
                       'Sale',
                       ItemNo,
----------CASE WHEN @IsExport_mask='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal,
                       -CurrencyValue AS                                                 SubTotal,
                       - (CASE WHEN ISNULL(ValueOnly, 'N') = 'Y' THEN 0 ELSE UOMQty END) Quantity,
                       -VATAmount,
                       -SDAmount,
                       TransactionType,
                       CreatedOn,
                       NBRPrice,
                       AdjustmentValue,
                       BranchId
                FROM SalesInvoiceDetails
                WHERE InvoiceDateTime >= @StartDate_mask
                  AND InvoiceDateTime < DATEADD(D, 1, @EndDate_mask)
                  AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (UOMQty > 0)
                  AND (Post = @post1_mask OR Post = @post2_mask)
                  AND TransactionType IN ('Credit', 'RawCredit')
                  AND BranchId > @BranchId_mask
                OPTION (OPTIMIZE FOR UNKNOWN)
                ---------------------------credit---------------------------------------

                ---------------------------Dispose Finish---------------------------------------

                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate,BranchId)

                SELECT 'B4'
                     , TransactionDateTime
                     , DisposeNo
                     , 'Sale'
                     , FinishItemNo                                    ItemNo
                     , (ISNULL(Quantity, 0) * ISNULL(UnitPrice, 0)) AS SubTotal
                     , ISNULL(Quantity, 0)                             Quantity
                     , 0                                               VATAmount
                     , 0                                               SDAmount
                     , 'Finish Dispose'
                     , TransactionDateTime
                     , 0                                               NBRPrice
                ,BranchId
                FROM DisposeFinishs
                WHERE 1 = 1
                  AND TransactionDateTime >= @StartDate_mask
                  AND TransactionDateTime < DATEADD(D, 1, @EndDate_mask)
                  AND FinishItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND ISNULL(IsSaleable, 'N') = 'N'
                  AND (Quantity > 0)
                  AND (Post = @post1_mask OR Post = @post2_mask)
                  AND TransactionType IN ('Other')
                  AND BranchId > @BranchId_mask


                INSERT INTO [VAT_Process].[dbo].VATTemp_17_1(SerialNo, Dailydate, TransID, TransType, ItemNo, UnitCost,
                                                             Quantity, VATRate, SD,
                                                             remarks, CreatedDateTime, UnitRate,BranchId)

                SELECT 'B4'
                     , TransactionDateTime
                     , DisposeNo
                     , 'Sale'
                     , FinishItemNo                                    ItemNo
                     , (ISNULL(Quantity, 0) * ISNULL(UnitPrice, 0)) AS SubTotal
                     , ISNULL(Quantity, 0)                             Quantity
                     , 0                                               VATAmount
                     , 0                                               SDAmount
                     , 'Trading Dispose'
                     , TransactionDateTime
                     , 0                                               NBRPrice
                ,BranchId
                FROM DisposeFinishs
                WHERE 1 = 1
                  AND TransactionDateTime >= @StartDate_mask
                  AND TransactionDateTime < DATEADD(D, 1, @EndDate_mask)
                  AND FinishItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND ISNULL(IsSaleable, 'N') = 'N'
                  AND (Quantity > 0)
                  AND (Post = @post1_mask OR Post = @post2_mask)
                  AND TransactionType IN ('DisposeTrading')
                  AND BranchId > @BranchId_mask

                ---------------------------Dispose Finish---------------------------------------

                ----------------------- Sale Data------------------------------------
            END


        DROP TABLE #ProductReceive
    END TRY
    BEGIN CATCH
        THROW ;
    END CATCH
END
";

                int result = NewStoredProc("spVAT6_2", spVAT6_2, currConn, transaction, connVM);

                #endregion

                #region spVAT6_1

                string spVAT6_1 = @"

ALTER PROCEDURE [dbo].[spVAT6_1](
    @StartDate DATETIME,
    @EndDate DATETIME,
    @FilteredItems VARCHAR(1) = 'X',
    @ItemNo VARCHAR(50) = NULL,
    @post1 VARCHAR(2) = 'Y',
    @post2 VARCHAR(2) = 'Y',
    @IsExport VARCHAR(20) = 'No',
    @Opening BIT,
    @VAT6_2_1 BIT,
    @BranchId INT = 0,
    @stockMovement BIT,
    @UserId VARCHAR(20)
    , @TotalIncludeSD BIT
    , @othervalue BIT
)
AS

BEGIN

    BEGIN TRY

        -- region local variable
        DECLARE @Present DECIMAL(25, 9);
        DECLARE @OpeningDate DATETIME;

        DECLARE @StartDate_mask DATETIME = @StartDate
        DECLARE @EndDate_mask DATETIME = @EndDate
        DECLARE @FilteredItems_mask VARCHAR(1) = @FilteredItems
        DECLARE @ItemNo_mask VARCHAR(50) = @ItemNo
        DECLARE @post1_mask VARCHAR(2) = @post1
        DECLARE @post2_mask VARCHAR(2) = @post2
        DECLARE @IsExport_mask VARCHAR(20) = @IsExport
        DECLARE @Opening_mask BIT =@Opening
        DECLARE @VAT6_2_1_mask BIT= @VAT6_2_1
        DECLARE @BranchId_mask INT =@BranchId
        DECLARE @stockMovement_mask BIT =@stockMovement
        DECLARE @UserId_mask VARCHAR(20) =@UserId

        DELETE FROM [VAT_Process61].[dbo].VATTemp_16

        CREATE TABLE #ProductReceive
        (
            ItemNo      VARCHAR(50),
            OpeningRate DECIMAL(25, 9),
            ClosingRate DECIMAL(25, 9)
        )


        IF (@FilteredItems_mask = 'Y')
            BEGIN
                INSERT INTO #ProductReceive(ItemNo, OpeningRate, ClosingRate)
                SELECT Products.ItemNo, 0 OpeningRate, 0 ClosingRate
                FROM Products
                         LEFT OUTER JOIN ProductCategories pc
                                         ON pc.CategoryID = Products.CategoryID
                WHERE 1 = 1
                  AND Products.ReportType IN ('VAT6_1', 'VAT6_1_And_6_2')
                  AND Products.ProcessFlag = 'Y'
            END

        IF (@ItemNo_mask IS NOT NULL)
            BEGIN

                INSERT INTO #ProductReceive(ItemNo, OpeningRate, ClosingRate)
                SELECT Products.ItemNo, 0 OpeningRate, 0 ClosingRate
                FROM Products
                         LEFT OUTER JOIN ProductCategories pc
                                         ON pc.CategoryID = Products.CategoryID
                WHERE 1 = 1
                  AND Products.ReportType IN ('VAT6_1', 'VAT6_1_And_6_2')
                  AND ItemNo = @ItemNo_mask

            END

        IF (@ItemNo_mask IS NULL AND @FilteredItems_mask = 'x')
            BEGIN
                INSERT INTO #ProductReceive(ItemNo, OpeningRate, ClosingRate)
                SELECT Products.ItemNo, 0 OpeningRate, 0 ClosingRate
                FROM Products
                         LEFT OUTER JOIN ProductCategories pc
                                         ON pc.CategoryID = Products.CategoryID
                WHERE 1 = 1
                  AND Products.ReportType IN ('VAT6_1', 'VAT6_1_And_6_2')
            END


        INSERT INTO [VAT_Process61].[dbo].VATTemp_16( SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo, UnitCost
                               , Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

        SELECT 'A1',
               CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate,
               CONVERT(VARCHAR, pd.InvoiceDateTime, 23) InvoiceDateTime,
               pd.PurchaseInvoiceNo,
               'Purchase',
               pd.BENumber,
               pd.ItemNo,
               IIF(@TotalIncludeSD = 1, ISNULL(subtotal, 0) + ISNULL(pd.SDAmount, 0), ISNULL(subtotal, 0))
                ,
               ISNULL(UOMQty, 0),
               pd.VATAmount,
               pd.SDAmount,
               'Purchase',
               CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate
			   ,Pd.BranchId
        FROM PurchaseInvoiceDetails PD
        WHERE pd.ReceiveDate >= @StartDate
          AND pd.ReceiveDate < DATEADD(D, 1, @EndDate)
          AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND pd.TransactionType IN
              ('Other', 'PurchaseCN', 'Trading', 'Service', 'ServiceNS', 'CommercialImporter', 'InputService',
               'PurchaseTollcharge')
          AND pd.BranchId > @BranchId

        UNION ALL

        SELECT 'A1',
               CONVERT(VARCHAR, pd.TransferDate, 23) ReceiveDate,
               CONVERT(VARCHAR, pd.TransferDate, 23) InvoiceDateTime,
               pt.TransferCode,
               'Purchase',
               '-',
               pd.ToItemNo
                ,
               ISNULL(pd.ReceivePrice, 0),
               ISNULL(ToQuantity, 0),
               0,
               0,
               'CTCPurchase',
               CONVERT(VARCHAR, pd.TransferDate, 23) ReceiveDate
			   ,Pd.BranchId
        FROM ProductTransfersDetails PD
                 LEFT OUTER JOIN ProductTransfers pt ON pd.ProductTransferId = pt.Id
        WHERE pd.TransferDate >= @StartDate
          AND pd.TransferDate < DATEADD(D, 1, @EndDate)

          AND pd.ToItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND pd.TransactionType IN ('RawCTC')
          AND pd.BranchId > @BranchId

        UNION ALL

        SELECT 'A1',
               CONVERT(VARCHAR, pd.TransferDate, 23) ReceiveDate,
               CONVERT(VARCHAR, pd.TransferDate, 23) InvoiceDateTime,
               pt.TransferCode,
               'Purchase',
               '-',
               pd.ToItemNo
                ,
               ISNULL(pd.ReceivePrice, 0),
               ISNULL(ToQuantity, 0),
               0,
               0,
               'CTCPurchase',
               CONVERT(VARCHAR, pd.TransferDate, 23) ReceiveDate
			   ,Pd.BranchId
        FROM ProductTransfersDetails PD
                 LEFT OUTER JOIN ProductTransfers pt ON pd.ProductTransferId = pt.Id
        WHERE pd.TransferDate >= @StartDate
          AND pd.TransferDate < DATEADD(D, 1, @EndDate)

          AND pd.ToItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND pd.ToItemNo IN (SELECT DISTINCT ItemNo
                              FROM Products p
                                       LEFT OUTER JOIN ProductCategories pc
                                                       ON p.CategoryID = pc.CategoryID
                              WHERE pc.IsRaw = 'Trading')
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND pd.TransactionType IN ('FinishCTC')
          AND pd.BranchId > @BranchId
        UNION ALL

        SELECT 'A1',
               CONVERT(VARCHAR, pd.TransactionDateTime, 23) ReceiveDate,
               CONVERT(VARCHAR, pd.TransactionDateTime, 23) InvoiceDateTime,
               pd.TransferReceiveNo,
               'Purchase',
               '-',
               pd.ItemNo
                ,
               ISNULL(pd.SubTotal, 0),
               ISNULL(Quantity, 0),
               0,
               0,
               'Raw TransferReceive',
               CONVERT(VARCHAR, pd.TransactionDateTime, 23) ReceiveDate
			   ,Pd.BranchId
        FROM TransferReceiveDetails PD
        WHERE pd.TransactionDateTime >= @StartDate
          AND pd.TransactionDateTime < DATEADD(D, 1, @EndDate)

          AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND pd.TransactionType IN ('61in')
          AND pd.BranchId > @BranchId

        UNION ALL
        SELECT 'A1',
               CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate,
               CONVERT(VARCHAR, pd.InvoiceDateTime, 23) InvoiceDateTime,
               pd.PurchaseInvoiceNo,
               'Purchase',
               pd.BENumber,
               pd.ItemNo,
               ISNULL(subtotal, 0),
               ISNULL(UOMQty, 0),
               pd.VATAmount,
               pd.SDAmount,
               'Toll Receive',
               pd.ReceiveDate
			   ,Pd.BranchId
        FROM PurchaseInvoiceDetails PD
        WHERE pd.ReceiveDate >= @StartDate
          AND pd.ReceiveDate < DATEADD(D, 1, @EndDate)
          AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND pd.TransactionType IN ('TollReceive-WIP')
          AND pd.BranchId > @BranchId


        UNION ALL
        SELECT 'A1',
               CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate,
               CONVERT(VARCHAR, pd.InvoiceDateTime, 23) InvoiceDateTime,
               pd.PurchaseInvoiceNo,
               'Purchase',
               pd.BENumber,
               pd.ItemNo,
               ISNULL(subtotal, 0),
               ISNULL(UOMQty, 0),
               pd.VATAmount,
               pd.SDAmount,
               'Toll Receive',
               pd.ReceiveDate
			   ,Pd.BranchId
        FROM PurchaseInvoiceDetails PD
        WHERE pd.ReceiveDate >= @StartDate
          AND pd.ReceiveDate < DATEADD(D, 1, @EndDate)
          AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND pd.TransactionType IN ('ClientFGReceiveWOBOM')
          AND pd.BranchId > @BranchId


        IF @stockMovement = 1
            BEGIN
                INSERT INTO [VAT_Process61].[dbo].VATTemp_16( SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo
                                       , UnitCost
                                       , Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

                SELECT 'A1',
                       CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate,
                       CONVERT(VARCHAR, pd.InvoiceDateTime, 23) InvoiceDateTime,
                       pd.PurchaseInvoiceNo,
                       'Purchase',
                       pd.BENumber,
                       pd.ItemNo,
                       ISNULL(subtotal, 0),
                       ISNULL(UOMQty, 0),
                       pd.VATAmount,
                       pd.SDAmount,
                       'Toll Receive',
                       pd.ReceiveDate
					   ,Pd.BranchId
                FROM PurchaseInvoiceDetails PD
                WHERE 1 = 1
                  AND pd.SubTotal > 0
                  AND pd.ReceiveDate >= @StartDate
                  AND pd.ReceiveDate < DATEADD(D, 1, @EndDate)
                  AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (pd.Post = @post1 OR pd.Post = @post2)
                  AND pd.TransactionType IN ('TollReceiveRaw')
                  AND pd.BranchId > @BranchId
            END


        INSERT INTO [VAT_Process61].[dbo].VATTemp_16(SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo, UnitCost,
                                Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)
        SELECT 'A1'
             , CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate
             , CONVERT(VARCHAR, pd.InvoiceDateTime, 23) InvoiceDateTime
             , pd.PurchaseInvoiceNo
             , 'Purchase'
             , pd.BENumber
             , pd.ItemNo
             , CASE
                   WHEN @TotalIncludeSD = 1 THEN (ISNULL(pd.AssessableValue, 0) + ISNULL(pd.CDAmount, 0) +
                                              ISNULL(pd.RDAmount, 0) + ISNULL(pd.TVBAmount, 0) +
                                              ISNULL(pd.TVAAmount, 0) + ISNULL(pd.SDAmount, 0) +
                                              IIF(@othervalue = 1, OthersAmount, 0))
                   ELSE (ISNULL(pd.AssessableValue, 0) + ISNULL(pd.CDAmount, 0) + ISNULL(pd.RDAmount, 0) +
                         ISNULL(pd.TVBAmount, 0) + ISNULL(pd.TVAAmount, 0) + IIF(@othervalue = 1, OthersAmount, 0)) END

             , ISNULL(UOMQty, 0)
             , pd.VATAmount
             , pd.SDAmount
             , PD.TransactionType
             , ReceiveDate
			 ,Pd.BranchId
        FROM PurchaseInvoiceDetails PD
        WHERE pd.ReceiveDate >= @StartDate
          AND pd.ReceiveDate < DATEADD(D, 1, @EndDate)
          AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND PD.TransactionType IN
              ('Import', 'ServiceImport', 'ServiceNSImport', 'TradingImport', 'InputServiceImport')
          AND pd.BranchId > @BranchId

        UNION ALL

        SELECT 'A1',
               CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate,
               CONVERT(VARCHAR, pd.InvoiceDateTime, 23) InvoiceDateTime,
               pd.PurchaseInvoiceNo,
               'Purchase',
               pd.BENumber,
               pd.ItemNo,
               CASE
                   WHEN @TotalIncludeSD = 1 THEN ISNULL(subtotal, 0) + ISNULL(pd.SDAmount, 0)
                   ELSE ISNULL(subtotal, 0) END
                ,
               ISNULL(UOMQty, 0),
               pd.VATAmount,
               pd.SDAmount,
               'Client Raw Receive',
               pd.ReceiveDate
			   ,Pd.BranchId
        FROM PurchaseInvoiceDetails PD
        WHERE pd.ReceiveDate >= @StartDate
          AND pd.ReceiveDate < DATEADD(D, 1, @EndDate)
          AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND pd.TransactionType IN ('ClientRawReceive')
          AND pd.BranchId > @BranchId


        INSERT INTO [VAT_Process61].[dbo].VATTemp_16(SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo, UnitCost,
                                Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

        SELECT 'A1'
             , CONVERT(VARCHAR, pd.ReceiveDate, 23)     ReceiveDate
             , CONVERT(VARCHAR, pd.InvoiceDateTime, 23) InvoiceDateTime
             , pd.PurchaseInvoiceNo
             , 'Purchase'
             , pd.BENumber
             , pd.ItemNo
             , IIF(@TotalIncludeSD = 1, -1 * ISNULL(subtotal, 0) + ISNULL(pd.SDAmount, 0), -1 * ISNULL(subtotal, 0))
             , -ISNULL(UOMQty, 0)
             , -pd.VATAmount
             , -pd.SDAmount
             , PD.TransactionType
             , CreatedOn
			 ,Pd.BranchId
        FROM PurchaseInvoiceDetails PD
        WHERE pd.ReceiveDate >= @StartDate
          AND pd.ReceiveDate < DATEADD(D, 1, @EndDate)
          AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (pd.Post = @post1 OR pd.Post = @post2)
          AND PD.TransactionType IN ('PurchaseReturn', 'PurchaseDN')
          AND pd.BranchId > @BranchId


        IF (@VAT6_2_1 = 0)
            BEGIN
                INSERT INTO [VAT_Process61].[dbo].VATTemp_16( SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo
                                       , UnitCost
                                       , Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

                SELECT 'A1',
                       pd.ReceiveDateTime,
                       pd.ReceiveDateTime,
                       pd.ReceiveNo,
                       'Purchase',
                       '' BENumber,
                       pd.ItemNo,
                       ISNULL(subtotal, 0),
                       ISNULL(UOMQty, 0),
                       pd.VATAmount,
                       0  SDAmount,
                       'WIP',
                       pd.ReceiveDateTime
					   ,Pd.BranchId
                FROM ReceiveDetails PD
                WHERE pd.ReceiveDateTime >= @StartDate
                  AND pd.ReceiveDateTime < DATEADD(D, 1, @EndDate)
                  AND pd.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (pd.Post = @post1 OR pd.Post = @post2)
                  AND pd.TransactionType IN ('WIP')
                  AND pd.BranchId > @BranchId

                INSERT INTO [VAT_Process61].[dbo].VATTemp_16(SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo,
                                        UnitCost,
                                        Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

                SELECT 'B'
                     , ID.IssueDateTime
                     , ID.IssueDateTime
                     , ID.IssueNo
                     , 'Issue'
                     , '-'
                     , id.ItemNo
                     , ISNULL(UOMQty, 0) * ISNULL(uomPrice, 0)
                     , ISNULL(UOMQty, 0)
                     , ID.VATAmount
                     , ID.SDAmount
                     , 'Issue'
                     , IssueDateTime
					 ,id.BranchId
                FROM IssueDetails ID
                WHERE ID.IssueDateTime >= @StartDate
                  AND ID.IssueDateTime < DATEADD(D, 1, @EndDate)
                  AND ID.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (ID.Post = @post1 OR ID.Post = @post2)
                  AND ID.TransactionType IN
                      ('Other', 'Trading', 'TradingAuto', 'ExportTrading', 'TradingTender', 'ExportTradingTender',
                       'InternalIssue', 'Service', 'ExportService', 'InputServiceImport', 'InputService', 'Tender',
                       'WIP', 'PackageProduction', 'PurchaseTollcharge')
                  AND id.BranchId > @BranchId

                INSERT INTO [VAT_Process61].[dbo].VATTemp_16(SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo,
                                        UnitCost,
                                        Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

                SELECT 'B'
                     , ID.TransactionDateTime IssueDateTime
                     , ID.TransactionDateTime IssueDateTime
                     , ID.DisposeNo
                     , 'Issue'
                     , '-'
                     , id.ItemNo
                     , ISNULL(Quantity, 0) * ISNULL(SubTotal, 0)
                     , ISNULL(Quantity, 0)
                     , ID.VATAmount
                     , ID.SDAmount
                     , 'Raw Dispose'
                     , TransactionDateTime    IssueDateTime
					 ,id.BranchId
                FROM DisposeRawDetails ID
                WHERE ID.TransactionDateTime >= @StartDate
                  AND ID.TransactionDateTime < DATEADD(D, 1, @EndDate)
                  AND ID.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND ISNULL(ID.IsSaleable, 'N') = 'N'
                  AND (ID.Post = @post1 OR ID.Post = @post2)
                  AND ID.TransactionType IN ('Other')
                  AND id.BranchId > @BranchId
            END

        INSERT INTO [VAT_Process61].[dbo].VATTemp_16(SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo, UnitCost,
                                Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

        SELECT 'B',
               InvoiceDateTime,
               InvoiceDateTime,
               SalesInvoiceNo,
               'Issue',
               '-',
               ItemNo,
               ISNULL(UOMQty, 0) * ISNULL(AVGPrice, 0),
               (CASE WHEN ISNULL(ValueOnly, 'N') = 'Y' THEN 0 ELSE UOMQty END),
               '0',
               SDAmount,
               TransactionType,
               CreatedOn
			   ,BranchId
        FROM SalesInvoiceDetails
        WHERE InvoiceDateTime >= @StartDate
          AND InvoiceDateTime < DATEADD(D, 1, @EndDate)
          AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
          AND (UOMQty > 0)
          AND (Post = @post1 OR Post = @post2)
          AND TransactionType IN ('RawSale')
          AND BranchId > @BranchId

        IF (@stockMovement = 0)
            BEGIN
                INSERT INTO [VAT_Process61].[dbo].VATTemp_16(SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo,
                                        UnitCost,
                                        Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

                SELECT 'B'
                     , ID.InvoiceDateTime
                     , ID.InvoiceDateTime
                     , ID.SalesInvoiceNo
                     , 'Issue'
                     , '-'
                     , id.ItemNo
                     , -ISNULL(UOMQty, 0) * ISNULL(AVGPrice, 0)
                     , -ISNULL(UOMQty, 0)
                     , -0 VATAmount
                     , -0 SDAmount
                     , id.TransactionType
                     , InvoiceDateTime
					 ,ID.BranchId
                FROM SalesInvoiceDetails ID
                WHERE ID.InvoiceDateTime >= @StartDate
                  AND ID.InvoiceDateTime < DATEADD(D, 1, @EndDate)
                  AND ID.ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (UOMQty > 0)
                  AND (ID.Post = @post1 OR ID.Post = @post2)
                  AND ID.TransactionType IN ('RawCredit')
                  AND ID.BranchId > @BranchId

                INSERT INTO [VAT_Process61].[dbo].VATTemp_16(SerialNo, Dailydate, InvoiceDateTime, TransID, TransType, BENumber, ItemNo,
                                        UnitCost,
                                        Quantity, VATRate, SD, Remarks, CreateDateTime,BranchId)

                SELECT 'B'
                     , InvoiceDateTime
                     , InvoiceDateTime
                     , SalesInvoiceNo
                     , 'Issue'
                     , '-'
                     , ItemNo
                     , ISNULL(UOMQty, 0) * ISNULL(UOMPrice, 0)
                     , CASE WHEN ISNULL(ValueOnly, 'N') = 'Y' THEN 0 ELSE UOMQty END
                     , '0'
                     , SDAmount
                     , 'Dispose Raw Sale'
                     , CreatedOn
					 ,BranchId
                FROM SalesInvoiceDetails
                WHERE 1 = 1
                  AND InvoiceDateTime >= @StartDate
                  AND InvoiceDateTime < DATEADD(D, 1, @EndDate)
                  AND ItemNo IN (SELECT DISTINCT ItemNo FROM #ProductReceive)
                  AND (UOMQty > 0)
                  AND (Post = @post1 OR Post = @post2)
                  AND TransactionType IN ('DisposeRaw')
                  AND BranchId > @BranchId

            END

        DROP TABLE #ProductReceive
    END TRY
    BEGIN CATCH
        THROW ;
    END CATCH
END

";

                result = NewStoredProc("spVAT6_1", spVAT6_1, currConn, transaction, connVM);

                #endregion

                #region spInsertOpeningBranch

                string spInsertOpeningBranch =
                    @"
ALTER PROCEDURE [dbo].[spInsertOpeningBranch] (@UserID nvarchar(30), @ItemNo nvarchar(30) = null)
AS

	BEGIN
Insert into VAT6_2_Permanent_Branch(
[SerialNo]
,[StartDateTime]
,[StartingQuantity]
,[StartingAmount]
,[TransID]
,[TransType] 
,[Quantity]
,[SD]
,[UnitCost]   
,[Remarks] 
,[ItemNo] 
,[UserId]   
,[BranchId]  
,[CustomerID]
,[ProductDesc]
,RunningOpeningQuantityFinal
,RunningOpeningValueFinal
,UnitRate

      )


SELECT distinct 'A'SerialNo, '1900-01-01' StartDateTime, 0 StartingQuantity, 0 StartingAmount,
0 TransID, 'Opening' TransType,
sum(isnull(p.StockQuantity,0)) Quantity,0 SD, sum(isnull(p.StockValue,0)) UnitCost, 'Opening'Remarks, p.ItemNo
, @UserID
,p.BranchId, 0 CustomerID,pd.ProductName,sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost, sum(isnull(p.StockValue,0))/(case when sum(isnull(StockQuantity,0)) =0 then 1 else sum(isnull(StockQuantity,0)) end) UnitRate

FROM ProductStocks p  left outer join Products pd on pd.ItemNo = p.ItemNo
WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_2','VAT6_1_And_6_2'))
and p.ItemNo not in (select ItemNo from VAT6_2_Permanent_Branch where transType = 'Opening')
and (p.ItemNo = @ItemNo or @ItemNo is null)
group by p.ItemNo,pd.ProductName,p.BranchId


END;
";

                NewStoredProc("spInsertOpeningBranch", spInsertOpeningBranch, currConn, transaction, connVM);

                #endregion

                #region spInsertDayOpeningBranch

                string spInsertDayOpeningBranch =
                    @"
ALTER PROCEDURE [dbo].[spInsertDayOpeningBranch] (@UserID nvarchar(30), @ItemNo nvarchar(30) = null)
AS

	BEGIN
Insert into VAT6_2_Permanent_DayWise_Branch(
[SerialNo]
,[StartDateTime]
,[StartingQuantity]
,[StartingAmount]
,[TransID]
,[TransType] 
,[Quantity]
,[SD]
,[UnitCost]   
,[Remarks] 
,[ItemNo] 
,[UserId]   
,[BranchId]  
,[CustomerID]
,[ProductDesc]
,RunningOpeningQuantityFinal
,RunningOpeningValueFinal
,UnitRate

      )


SELECT distinct 'A'SerialNo, '1900-01-01' StartDateTime, 0 StartingQuantity, 0 StartingAmount,
0 TransID, 'Opening' TransType,
sum(isnull(p.StockQuantity,0)) Quantity,0 SD, sum(isnull(p.StockValue,0)) UnitCost, 'Opening'Remarks, p.ItemNo
, @UserID
,p.BranchId, 0 CustomerID,pd.ProductName,sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost, sum(isnull(p.StockValue,0))/(case when sum(isnull(StockQuantity,0)) =0 then 1 else sum(isnull(StockQuantity,0)) end) UnitRate

FROM ProductStocks p  left outer join Products pd on pd.ItemNo = p.ItemNo
WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_2','VAT6_1_And_6_2'))
and p.ItemNo not in (select ItemNo from VAT6_2_Permanent_DayWise_Branch where transType = 'Opening')
and (p.ItemNo = @ItemNo or @ItemNo is null)
group by p.ItemNo,pd.ProductName,p.BranchId


END;
";

                NewStoredProc("spInsertDayOpeningBranch", spInsertDayOpeningBranch, currConn, transaction, connVM);

                #endregion

                #region spInsertOpening_61_Branch

                string procQuery =
                    @"

ALTER PROCEDURE [dbo].[spInsertOpening_61_Branch] (@UserID nvarchar(30), @ItemNo nvarchar(30) = null)
AS

	BEGIN	


insert into VAT6_1_Permanent_Branch(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,RunningTotal,RunningValue,RunningOpeningQuantity,RunningOpeningValue,BranchId)

SELECT distinct 'A'SerialNo, itemNo ,'1900-01-01' StartDateTime,'1900-01-01' InvoiceDateTime, 0 StartingQuantity, 0 StartingAmount,
0 VendorID, 
sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost,0TransID,  'Opening'TransType,0 VATRate
,0 SD,'-'BENumber,'Opening'Remarks,sum(isnull(StockQuantity,0)), sum(isnull(p.StockValue,0)) UnitCost,sum(isnull(StockQuantity,0)) Quantity
, sum(isnull(p.StockValue,0)) UnitCost, BranchId
FROM ProductStocks p  WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_1','VAT6_1_And_6_2'))
and p.ItemNo not in (select ItemNo from VAT6_1_Permanent_Branch where transType = 'Opening')
and (p.ItemNo = @ItemNo or @ItemNo is null)

group by ItemNo,branchId
	END;

";

                NewStoredProc("spInsertOpening_61_Branch", procQuery, currConn, transaction, connVM);

                #endregion

                #region spInsertOpening_61

                procQuery =
                                   @"
ALTER PROCEDURE [dbo].[spInsertOpening_61] (@UserID nvarchar(30), @ItemNo nvarchar(30) = null)
AS

	BEGIN	


			insert into VAT6_1_Permanent(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,RunningTotal,RunningValue,RunningOpeningQuantity,RunningOpeningValue)

SELECT distinct 'A'SerialNo, itemNo ,'1900-01-01' StartDateTime,'1900-01-01' InvoiceDateTime, 0 StartingQuantity, 0 StartingAmount,
0 VendorID, 
sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost,0TransID,  'Opening'TransType,0 VATRate
,0 SD,'-'BENumber,'Opening'Remarks,sum(isnull(StockQuantity,0)), sum(isnull(p.StockValue,0)) UnitCost,sum(isnull(StockQuantity,0)) Quantity
, sum(isnull(p.StockValue,0)) UnitCost
FROM ProductStocks p  WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_1'))
and p.ItemNo not in (select ItemNo from VAT6_1_Permanent where transType = 'Opening')
	and (p.ItemNo = @ItemNo or @ItemNo is null)

group by ItemNo
	END;

";

                NewStoredProc("spInsertOpening_61", procQuery, currConn, transaction, connVM);

                #endregion

                #region spInsertOpening

                procQuery =
                   @"

ALTER PROCEDURE [dbo].[spInsertOpening] (@UserID nvarchar(30), @ItemNo nvarchar(30) = null)
AS

	BEGIN	
					Insert into VAT6_2_Permanent(
					[SerialNo],[StartDateTime]
			      ,[StartingQuantity],[StartingAmount]
			      ,[TransID]
			      ,[TransType] ,[Quantity]
			      ,[SD],[UnitCost]    ,[Remarks] ,[ItemNo] 
			   ,[UserId]   ,[BranchId]  ,[CustomerID]
			      ,[ProductDesc]
				,RunningOpeningQuantityFinal
			,RunningOpeningValueFinal
			,UnitRate
			,AdjustmentValue
			      )
			
			SELECT distinct 'A'SerialNo, '1900-01-01' StartDateTime, 0 StartingQuantity, 0 StartingAmount,
			0 TransID, 'Opening' TransType,
			sum(isnull(p.StockQuantity,0)) Quantity,0 SD, sum(isnull(p.StockValue,0)) UnitCost, 'Opening'Remarks, pd.ItemNo
			, @UserID
			,0 BranchId, 0 CustomerID,pd.ProductName,sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost, sum(isnull(p.StockValue,0))/(case when sum(isnull(StockQuantity,0)) =0 then 1 else sum(isnull(StockQuantity,0)) end) UnitRate,0
			
			FROM ProductStocks p  left outer join Products pd on pd.ItemNo = p.ItemNo
			WHERE 
			p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_2','VAT6_1_And_6_2'))
			and p.ItemNo not in (select ItemNo from VAT6_2_Permanent where transType = 'Opening')
			and (p.ItemNo = @ItemNo or @ItemNo is null)
			group by pd.ItemNo,pd.ProductName

	END;
";

                NewStoredProc("spInsertOpening", procQuery, currConn, transaction, connVM);

                #endregion

                #region spInsertDayOpening

                procQuery =
                   @"

ALTER PROCEDURE [dbo].[spInsertDayOpening] (@UserID nvarchar(30), @ItemNo nvarchar(30) = null)
AS

	BEGIN	
					Insert into VAT6_2_Permanent_DayWise(
					[SerialNo],[StartDateTime]
			      ,[StartingQuantity],[StartingAmount]
			      ,[TransID]
			      ,[TransType] ,[Quantity]
			      ,[SD],[UnitCost]    ,[Remarks] ,[ItemNo] 
			   ,[UserId]   ,[BranchId]  ,[CustomerID]
			      ,[ProductDesc]
				,RunningOpeningQuantityFinal
			,RunningOpeningValueFinal
			,UnitRate
			,AdjustmentValue
			      )
			
			SELECT distinct 'A'SerialNo, '1900-01-01' StartDateTime, 0 StartingQuantity, 0 StartingAmount,
			0 TransID, 'Opening' TransType,
			sum(isnull(p.StockQuantity,0)) Quantity,0 SD, sum(isnull(p.StockValue,0)) UnitCost, 'Opening'Remarks, pd.ItemNo
			, @UserID
			,0 BranchId, 0 CustomerID,pd.ProductName,sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost, sum(isnull(p.StockValue,0))/(case when sum(isnull(StockQuantity,0)) =0 then 1 else sum(isnull(StockQuantity,0)) end) UnitRate,0
			
			FROM ProductStocks p  left outer join Products pd on pd.ItemNo = p.ItemNo
			WHERE 
			p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_2','VAT6_1_And_6_2'))
			and p.ItemNo not in (select ItemNo from VAT6_2_Permanent_DayWise where transType = 'Opening')
			and (p.ItemNo = @ItemNo or @ItemNo is null)
			group by pd.ItemNo,pd.ProductName

	END;
";

                NewStoredProc("spInsertDayOpening", procQuery, currConn, transaction, connVM);

                #endregion


                #region spDelete6_2_Branch

                procQuery =
                   @"
ALTER PROCEDURE [dbo].[spDelete6_2_Branch] (@StartDate datetime, @EndDate datetime, @FilteredItems varchar(1) = 'X', @ItemNo varchar(50) = null)
AS
	BEGIN

		if (@FilteredItems = 'Y' and @ItemNo is null)
			begin
				delete from VAT6_2_Permanent_Branch where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if (@ItemNo is not null)

			begin
				delete from VAT6_2_Permanent_Branch where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if( @FilteredItems = 'X' and @ItemNo is null)
			begin
				delete from VAT6_2_Permanent_Branch where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
			end

	end

";

                NewStoredProc("spDelete6_2_Branch", procQuery, currConn, transaction, connVM);

                #endregion

                #region spDelete6_1_Branch

                procQuery =
                   @"
ALTER PROCEDURE [dbo].[spDelete6_1_Branch] (@StartDate datetime, @EndDate datetime, @FilteredItems varchar(1) = 'X', @ItemNo varchar(50) = null)
AS
	BEGIN

		if (@FilteredItems = 'Y' and @ItemNo is null)
			begin
				delete from VAT6_1_Permanent_Branch where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if (@ItemNo is not null)

			begin
				delete from VAT6_1_Permanent_Branch where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if( @FilteredItems = 'X' and @ItemNo is null)
			begin
				delete from VAT6_1_Permanent_Branch where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
			end

	end

";

                NewStoredProc("spDelete6_1_Branch", procQuery, currConn, transaction, connVM);

                #endregion

                #region spDelete6_1

                procQuery =
                    @"

ALTER PROCEDURE [dbo].[spDelete6_1] (@StartDate datetime, @EndDate datetime, @FilteredItems varchar(1) = 'X', @ItemNo varchar(50) = null)
AS
	BEGIN

		if (@FilteredItems = 'Y' and @ItemNo is null)
			begin
				delete from VAT6_1_Permanent where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if (@ItemNo is not null)

			begin
				delete from VAT6_1_Permanent where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if( @FilteredItems = 'X' and @ItemNo is null)
			begin
				delete from VAT6_1_Permanent where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
			end
	end
";

                NewStoredProc("spDelete6_1", procQuery, currConn, transaction, connVM);

                #endregion

                #region spDelete6_2

                procQuery =
                    @"

ALTER PROCEDURE [dbo].[spDelete6_2] (@StartDate datetime, @EndDate datetime, @FilteredItems varchar(1) = 'X', @ItemNo varchar(50) = null)
AS
	BEGIN

		if (@FilteredItems = 'Y' and @ItemNo is null)
			begin
				delete from VAT6_2_Permanent where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if (@ItemNo is not null)

			begin
				delete from VAT6_2_Permanent where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
				and ItemNo in (select ItemNo from Products where ProcessFlag='Y' and ReportType='VAT6_2')
			end


		if( @FilteredItems = 'X' and @ItemNo is null)
			begin
				delete from VAT6_2_Permanent where 1=1  and TransType != 'Opening'
				and  StartDateTime>=@StartDate and StartDateTime<dateadd(d,1,@EndDate)
			end

	end
";

                NewStoredProc("spDelete6_2", procQuery, currConn, transaction, connVM);

                #endregion

                #endregion

                #region Commit

                if (transResult < 0)
                {
                    transaction.Commit();
                }

                #endregion

                ///////////-------------------///////////
                ///////////-------------------///////////
                #region Commented - Before Apr-15-2020
                #region SalesTemp2
                //                sqlText = @"
                //CREATE TABLE [dbo].[SalesTempData_2](
                //	[SL] [bigint] IDENTITY(1,1) NOT NULL,
                //	[ID] [nvarchar](max) NOT NULL,
                //	[SalesInvoiceNo] [varchar](40) NULL,
                //	[Customer_Name] [varchar](500) NOT NULL,
                //	[Customer_Code] [nvarchar](50) NULL,
                //	[Delivery_Address] [nvarchar](500) NULL,
                //	[Vehicle_No] [nvarchar](100) NULL,
                //	[Invoice_Date_Time] [nvarchar](100) NOT NULL,
                //	[Delivery_Date_Time] [nvarchar](100) NULL,
                //	[Reference_No] [varchar](6000) NULL,
                //	[Comments] [nvarchar](100) NULL,
                //	[Sale_Type] [nvarchar](100) NULL,
                //	[Previous_Invoice_No] [nvarchar](100) NULL,
                //	[Is_Print] [nchar](1) NULL,
                //	[Tender_Id] [nvarchar](100) NULL,
                //	[Post] [varchar](1) NOT NULL,
                //	[LC_Number] [nvarchar](100) NULL,
                //	[Currency_Code] [nvarchar](50) NULL,
                //	[Item_Code] [nvarchar](100) NOT NULL,
                //	[Item_Name] [nvarchar](100) NOT NULL,
                //	[Quantity] [decimal](25, 9) NOT NULL,
                //	[NBR_Price] [decimal](25, 9) NOT NULL,
                //	[UOM] [nvarchar](100) NOT NULL,
                //	[VAT_Rate] [decimal](25, 9) NULL,
                //	[SD_Rate] [decimal](25, 9) NOT NULL,
                //	[Non_Stock] [nvarchar](100) NULL,
                //	[Trading_MarkUp] [decimal](25, 9) NULL,
                //	[Type] [nvarchar](100) NULL,
                //	[Discount_Amount] [decimal](25, 9) NULL,
                //	[Promotional_Quantity] [decimal](25, 9) NULL,
                //	[VAT_Name] [nvarchar](100) NULL,
                //	[SubTotal] [decimal](25, 9) NOT NULL,
                //	[IsVATComplete] [char](1) NULL,
                //	[ItemNo] [varchar](20) NULL,
                //	[CustomerID] [varchar](20) NULL,
                //	[IsProcessed] [bit] NULL,
                //	[Branch_Code] [nvarchar](100) NULL,
                //	[ExpDescription] [nvarchar](100) NULL,
                //	[ExpQuantity] [nvarchar](100) NULL,
                //	[ExpGrossWeight] [nvarchar](100) NULL,
                //	[ExpNetWeight] [nvarchar](100) NULL,
                //	[ExpNumberFrom] [nvarchar](100) NULL,
                //	[ExpNumberTo] [nvarchar](100) NULL,
                //	[CommentsD] [nvarchar](700) NULL,
                //	[BranchId] [int] NULL,
                //	[CurrencyId] [int] NULL,
                //	[CustomerGroup] [nvarchar](100) NULL,
                //	[VAT_Amount] [decimal](18, 2) NULL,
                //	[GroupId] [nvarchar](20) NULL,
                //	[VehicleID] [nvarchar](20) NULL,
                //	[TotalAmount] [decimal](25, 9) NULL,
                //	[TotalVATAmount] [decimal](25, 9) NULL,
                //	[CreatedBy] [nvarchar](100) NULL,
                //	[CreatedOn] [nvarchar](100) NULL,
                //	[BOMId] [int] NULL,
                //	[TransactionType] [nvarchar](50) NULL,
                //	[ReturnId] [int] NULL,
                //	[UOMPrice] [decimal](25, 9) NULL,
                //	[UOMc] [decimal](25, 9) NULL,
                //	[UOMn] [varchar](100) NULL,
                //	[UOMQty] [decimal](25, 9) NULL,
                //	[SDAmount] [decimal](25, 9) NULL,
                //	[DeliveryAddress2] [varchar](200) NULL,
                //	[DeliveryAddress3] [varchar](200) NULL,
                //	[Trading] [varchar](1) NULL,
                //	[TradingD] [varchar](1) NULL,
                //	[IsVDS] [varchar](1) NULL,
                //	[GetVDSCertificate] [varchar](1) NULL,
                //	[VDSCertificateDate] [varchar](50) NULL,
                //	[AlReadyPrint] [int] NULL,
                //	[DeliveryChallanNo] [varchar](50) NULL,
                //	[IsGatePass] [varchar](1) NULL,
                //	[CompInvoiceNo] [varchar](50) NULL,
                //	[LCBank] [varchar](50) NULL,
                //	[LCDate] [varchar](50) NULL,
                //	[PINo] [varchar](50) NULL,
                //	[PIDate] [varchar](50) NULL,
                //	[EXPFormNo] [varchar](50) NULL,
                //	[EXPFormDate] [varchar](50) NULL,
                //	[IsDeemedExport] [varchar](1) NULL,
                //	[VDSAmount] [decimal](25, 9) NULL,
                //	[Is6_3TollCompleted] [varchar](1) NULL,
                //	[ValueOnly] [varchar](1) NULL,
                //	[CConversionDate] [varchar](50) NULL,
                //	[Weight] [varchar](50) NULL,
                //	[WareHouseRent] [decimal](25, 9) NULL,
                //	[WareHouseVAT] [decimal](25, 9) NULL,
                //	[ATVRate] [decimal](25, 9) NULL,
                //	[ATVablePrice] [decimal](25, 9) NULL,
                //	[ATVAmount] [decimal](25, 9) NULL,
                //	[TradeVATRate] [decimal](25, 9) NULL,
                //	[TradeVATAmount] [decimal](25, 9) NULL,
                //	[VDSAmountD] [decimal](25, 9) NULL,
                //	[CDNVATAmount] [decimal](25, 9) NULL,
                //	[CDNSDAmount] [decimal](25, 9) NULL,
                //	[CDNSubtotal] [decimal](25, 9) NULL,
                //	[BENumber] [varchar](50) NULL,
                //	[TradeVATableValue] [decimal](25, 9) NULL,
                //	[SalesPrice] [decimal](25, 9) NULL,
                //	[TotalValue] [decimal](25, 9) NULL,
                //	[DollerValue] [decimal](25, 9) NULL,
                //	[CurrencyValue] [decimal](25, 9) NULL,
                //	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
                //	[DeductionAmount] [decimal](25, 9) NULL,
                //	[DiscountedNBRPrice] [decimal](25, 9) NULL,
                //	[ShiftId] [int] NULL,
                //	[IsCommercialImporter] [varchar](1) NULL,
                //	[ProductDescription] [varchar](100) NULL,
                //	[IsFixedVAT] [varchar](1) NULL,
                //	[FixedVATAmount] [decimal](25, 9) NULL,
                //	[UserId] [int] NULL,
                //	[ExtraCharge] [decimal](25, 9) NULL,
                //	[FileName] [varchar](300) NULL,
                //	[OtherRef] [varchar](500) NULL,
                //	[CustomerBIN] [varchar](500) NULL,
                //	[token] [varchar](200) NULL,
                //	[PreviousImportedExcelId] [varchar](600) NULL,
                //	[VehicleType] [varchar](200) NULL,
                //	[PreviousNBRPrice] [decimal](25, 9) NULL,
                //	[PreviousQuantity] [decimal](25, 9) NULL,
                //	[PreviousSubTotal] [decimal](25, 9) NULL,
                //	[PreviousSD] [decimal](25, 9) NULL,
                //	[PreviousSDAmount] [decimal](25, 9) NULL,
                //	[PreviousVATRate] [decimal](25, 9) NULL,
                //	[PreviousVATAmount] [decimal](25, 9) NULL,
                //	[PreviousUOM] [varchar](200) NULL,
                //	[ReasonOfReturn] [varchar](200) NULL,
                //	[PreviousInvoiceDateTime] [varchar](200) NULL,
                // CONSTRAINT [PK_SalesTempData_2] PRIMARY KEY CLUSTERED 
                //(
                //	[SL] ASC
                //)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                //) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  CONSTRAINT [DF_SalesTempData_2_ItemNo]  DEFAULT ('0') FOR [ItemNo]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  CONSTRAINT [DF_SalesTempData_2_CustomerID]  DEFAULT ('0') FOR [CustomerID]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  CONSTRAINT [DF_SalesTempData_2_IsProcessed]  DEFAULT ((0)) FOR [IsProcessed]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [DeliveryAddress2]
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [DeliveryAddress3]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [Trading]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [TradingD]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [IsVDS]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [GetVDSCertificate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('1900/01/01') FOR [VDSCertificateDate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [AlReadyPrint]
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [DeliveryChallanNo]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [IsGatePass]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [CompInvoiceNo]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [LCBank]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('1900/01/01') FOR [LCDate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [PINo]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('1900/01/01') FOR [PIDate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [EXPFormNo]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('1900/01/01') FOR [EXPFormDate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [IsDeemedExport]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [VDSAmount]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [Is6_3TollCompleted]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [ValueOnly]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('1900/01/01') FOR [CConversionDate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [Weight]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [WareHouseRent]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [WareHouseVAT]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [ATVRate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [ATVablePrice]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [ATVAmount]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [TradeVATRate]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [TradeVATAmount]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [VDSAmountD]
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [CDNVATAmount]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [CDNSDAmount]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [CDNSubtotal]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('NA') FOR [BENumber]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [TradeVATableValue]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [SalesPrice]
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [TotalValue]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [DollerValue]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [CurrencyValue]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [CurrencyRateFromBDT]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [DeductionAmount]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [DiscountedNBRPrice]
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [ShiftId]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [IsCommercialImporter]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [ProductDescription]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('N') FOR [IsFixedVAT]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [FixedVATAmount]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [UserId]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ((0)) FOR [ExtraCharge]
                //
                //
                //ALTER TABLE [dbo].[SalesTempData_2] ADD  DEFAULT ('0') FOR [token]
                //
                //
                //
                //
                //";

                //                transResult = commonDal.NewTableAdd("SalesTempData_2", sqlText, currConn, transaction);
                #endregion
                //transResult = commonDal.TableFieldAdd("SalesTempData", "GroupId", "nvarchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("SalesTempData", "VehicleID", "nvarchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("SalesTempData", "SalesInvoiceNo", "varchar(40)", currConn, transaction);

                #region TableAdd
                #region 20131231 (yyMMdd)
                //transResult = commonDal.TableAdd("CustomersAddress", "Id", "int", currConn, transaction); //tablename,fieldName, datatype
                #endregion 20131231 (yyMMdd)

                #endregion TableAdd

                #region 20131231 (yyMMdd)
                //transResult = commonDal.TableFieldAdd("Costing", "Id", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "ItemNo", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "InputDate", "datetime", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "Quantity", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "UnitCost", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "AV", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "CD", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "RD", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "TVB", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "SDAmount", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "VATAmount", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "TVA", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "ATV", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "Other", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "CostPrice", "decimal(25, 9)", currConn, transaction);//Total
                //transResult = commonDal.TableFieldAdd("Costing", "CreatedBy", "varchar(120)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "CreatedOn", "datetime", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "LastModifiedBy", "varchar(120)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "LastModifiedOn", "datetime", currConn, transaction);

                //transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "ImportIDExcel", "varchar(30)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "AlReadyPrint", "int", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("ReceiveHeaders", "ImportIDExcel", "varchar(30)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("IssueHeaders", "ImportIDExcel", "varchar(30)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "ImportIDExcel", "varchar(30)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("ReceiveHeaders", "ReferenceNo", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "SerialNo1", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BOMRaws", "PInvoiceNo", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("IssueDetails", "IsProcess", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("DisposeDetails", "FromStock", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "FinishItemNo", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("ReceiveDetails", "CurrencyValue", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("ReceiveDetails", "DollerValue", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("DisposeDetails", "DollarPrice", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Currencies", "CurrencyMajor", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Currencies", "CurrencyMinor", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Currencies", "CurrencySymbol", "varchar(50)", currConn, transaction);
                #endregion 20131231 (yyMMdd)
                #region 20140102 (yyMMdd)
                //transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "CConversionDate", "datetime", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("CompanyProfiles", "Tom", "varchar(200)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("CompanyProfiles", "Jary", "varchar(200)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("CompanyProfiles", "Miki", "varchar(200)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("CompanyProfiles", "Mouse", "varchar(200)", currConn, transaction);
                #endregion 20140102 (yyMMdd)

                #region 20140312
                //transResult = commonDal.TableFieldAdd("VDS", "IsPercent", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "BENumber", "varchar(200)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "RefNo", "varchar(200)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Costing", "SD", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("UserRolls", "AddAccess", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("UserRolls", "EditAccess", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("PurchaseInvoiceDetails", "ReturnTransactionType", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "ReturnTransactionType", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("ReceiveDetails", "ReturnTransactionType", "varchar(50)", currConn, transaction);


                #endregion
                #region 20141117
                //transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "DeliveryChallanNo", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "IsGatePass", "varchar(3)", currConn, transaction);
                #endregion
                #region 20150101
                //transResult = commonDal.TableFieldAdd("Deposits", "ReverseDepositId", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("SDDeposits", "ReverseDepositId", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("VDS", "ReverseVDSId", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("AdjustmentHistorys", "ReverseAdjHistoryNo", "varchar(20)", currConn, transaction);
                #endregion
                #region 20150101
                //transResult = commonDal.TableFieldAdd("BOMRaws", "TransactionType", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("TenderHeaders", "CustomerGroupID", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "LCNumber", "varchar(50)", currConn, transaction);

                #endregion 20150101
                #region 20150806 juwel
                //transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "LCDate",  "datetime", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "LandedCost", "decimal(25, 9)", currConn, transaction);
                #endregion
                #region 20151001, Sanofi
                //transResult = commonDal.TableFieldAdd("SalesInvoiceHeaders", "CompInvoiceNo",  "varchar(50)", currConn, transaction);
                #endregion
                #region 20151109, Only for CP
                //transResult = commonDal.TableFieldAdd("SalesInvoiceDetails", "Weight", "varchar(120)", currConn, transaction);
                #endregion

                #region KeyDelete
                #region 20131231 (yyMMdd)
                //transResult = DeleteForeignKey("ProductCategories", "FK_ProductCategories_ProductTypes", currConn, transaction);
                #endregion 20131231 (yyMMdd)
                #endregion KeyDelete

                #region Data type alter
                #region 20131231 (yyMMdd)
                //TableFieldAlter("SalesInvoiceHeadersExport", "Quantity", "varchar(120)", currConn, transaction);
                //TableFieldAlter("SalesInvoiceHeadersExport", "GrossWeight", "varchar(120)", currConn, transaction);
                //TableFieldAlter("SalesInvoiceHeadersExport", "NetWeight", "varchar(120)", currConn, transaction);
                #endregion 20131231 (yyMMdd)
                #region 20140907
                //TableFieldAlter("SalesInvoiceDetails", "Type", "varchar(50)", currConn, transaction);
                #endregion 20140907
                #endregion Data type alter

                #region Update data
                #region 20140101 (yyMMdd)
                //ExecuteUpdateQuery(CurrencyUpdateSQL, currConn, transaction);
                #endregion 20140101 (yyMMdd)
                #region 20140201
                //ExecuteUpdateQuery(CurrencyConvertionUpdateSql, currConn, transaction);
                #endregion 20140201
                #endregion Update data

                #region OldDBUpdate
                //#region TableAdd
                //commonDal.TableAdd("SDDeposits", "DepositId", "varchar(20)", currConn); //tablename,fieldName, datatype
                //commonDal.TableAdd("DutyDrawBackHeader", "DDBackNo", "varchar(20)", currConn); //tablename,fieldName, datatype
                //commonDal.TableAdd("DutyDrawBackDetails", "DDBackNo", "varchar(20)", currConn); //tablename,fieldName, datatype

                //#endregion TableAdd
                //#region FieldAdd


                //commonDal.TableFieldAdd("BOMCompanyOverhead", "HeadID", "varchar(20)", currConn);

                //commonDal.TableFieldAdd("SalesInvoiceHeaders", "ImportIDExcel", "varchar(30)", currConn);
                //commonDal.TableFieldAdd("ReceiveHeaders", "ImportIDExcel", "varchar(30)", currConn);
                //commonDal.TableFieldAdd("IssueHeaders", "ImportIDExcel", "varchar(30)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceHeaders", "ImportIDExcel", "varchar(30)", currConn);

                //commonDal.TableFieldAdd("SalesInvoiceDetails", "PromotionalQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "DepositId", "varchar(20)", currConn);

                //commonDal.TableFieldAdd("Customers", "BusinessType", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("Customers", "BusinessCode", "varchar(20)", currConn);

                //commonDal.TableFieldAdd("Vendors", "BusinessType", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("Vendors", "BusinessCode", "varchar(20)", currConn);


                //commonDal.TableFieldAdd("SDDeposits", "TreasuryNo", "varchar(50)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "DepositDateTime", "datetime", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "DepositType", "varchar(50)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "DepositAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "ChequeNo", "varchar(50)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "ChequeBank", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "ChequeBankBranch", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "ChequeDate", "datetime", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "BankID", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "TreasuryCopy", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "DepositPerson", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "DepositPersonDesignation", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "Comments", "varchar(200)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "CreatedBy", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "CreatedOn", "datetime", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "LastModifiedBy", "varchar(120)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "LastModifiedOn", "datetime", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "TransactionType", "varchar(50)", currConn);
                //commonDal.TableFieldAdd("SDDeposits", "Post", "varchar(1)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "DDBackNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "DDBackDate", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "SalesInvoiceNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "SalesDate", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "CustormerID", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "CurrencyId", "int", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "ExpCurrency", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "BDTCurrency", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "FgItemNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimCD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimRD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimSD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalDDBack", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimVAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimCnFAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimInsuranceAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimTVBAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimTVAAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimATVAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "TotalClaimOthersAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "Comments", "varchar(250)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "CreatedBy", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "CreatedOn", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "LastModifiedBy", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "LastModifiedOn", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackHeader", "Post", "varchar(1)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "DDBackNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "DDBackDate", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "DDLineNo", "int", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "SalesInvoiceNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "PurchaseInvoiceNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "PurchaseDate", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "FgItemNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "FgQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ItemNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "BillOfEntry", "varchar(50)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "PurchaseUom", "varchar(10)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "PurchaseQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UnitPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "AV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "CD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "RD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "VAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "CnF", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "Insurance", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "TVB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "TVA", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ATV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "Others", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UseQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimCD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimRD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimSD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimVAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimCnF", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimInsurance", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimTVB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimTVA", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimATV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "ClaimOthers", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "SubTotalDDB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMc", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMn", "varchar(50)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMCD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMRD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMSD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMVAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMCnF", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMInsurance", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMTVB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMTVA", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMATV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMOthers", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "UOMSubTotalDDB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "Post", "varchar(1)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "CreatedBy", "varchar(200)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "CreatedOn", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "LastModifiedBy", "varchar(50)", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "LastModifiedOn", "datetime", currConn);
                //commonDal.TableFieldAdd("DutyDrawBackDetails", "PurchasetransactionType", "varchar(50)", currConn);


                //commonDal.TableFieldAdd("ReceiveDetails", "BOMId", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("ReceiveDetails", "UOMQty", "decimal(25, 9)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("ReceiveDetails", "UOMPrice", "decimal(25, 9)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("ReceiveDetails", "UOMc", "decimal(25, 9)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("ReceiveDetails", "UOMn", "varchar(50)", currConn); //tablename,fieldName, datatype

                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "ItemNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantityPercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "LineCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "UnitCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "Quantity", "decimal(25, 9)", currConn);

                //commonDal.TableFieldAdd("IssueDetails", "BOMId", "varchar(20)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("IssueDetails", "UOMQty", "decimal(25, 9)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("IssueDetails", "UOMPrice", "decimal(25, 9)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("IssueDetails", "UOMc", "decimal(25, 9)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("IssueDetails", "UOMn", "varchar(50)", currConn); //tablename,fieldName, datatype
                //commonDal.TableFieldAdd("IssueDetails", "UOMWastage", "decimal(25, 9)", currConn); //tablename,fieldName, datatype

                //commonDal.TableFieldAdd("BOMRaws", "PBOMId", "varchar(20)", currConn);

                //commonDal.TableFieldAdd("CurrencyConversion", "ConversionDate", "datetime", currConn);

                //commonDal.TableFieldAdd("Products", "OpeningTotalCost", "decimal(25, 9)", currConn); //tablename,fieldName, datatype

                //commonDal.TableFieldAdd("SalesInvoiceDetails", "DiscountAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("SalesInvoiceDetails", "DiscountedNBRPrice", "decimal(25, 9)", currConn);

                //commonDal.TableFieldAdd("TenderDetails", "BOMId", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("Vendors", "VDSPercent", "decimal(25, 9)", currConn);
                //#endregion FieldAdd

                //#region AlterFields

                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "CnFRate", "decimal(25, 9)", currConn);

                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjInputAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjInputPercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjVATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjVATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjSD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjSDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("AdjustmentHistorys", "AdjOtherAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMCompanyOverhead", "HeadAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMCompanyOverhead", "RebatePercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMCompanyOverhead", "RebateAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMCompanyOverhead", "AdditionalCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "UseQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "WastageQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "Cost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "TradingMarkUp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "RebateRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "MarkUpValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "UnitCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "UOMc", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "UOMPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "UOMUQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "UOMWQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMRaws", "TotalQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "TradingMarkUp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "RawTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "PackingTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "RebateTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "AdditionalTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "RebateAdditionTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "NBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "PacketPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "RawOHCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "LastNBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "LastNBRWithSDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "TotalQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "WholeSalePrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "NBRWithSDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "MarkUpValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "LastMarkUpValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "LastSDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("BOMs", "LastAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Customers", "VDSPercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Deposits", "DepositAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeDetails", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeDetails", "RealPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeDetails", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeDetails", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeDetails", "PresentPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeDetails", "QuantityImport", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "ImportVATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "TotalPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "TotalPriceImport", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "AppVATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "AppTotalPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "AppVATAmountImport", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DisposeHeaders", "AppTotalPriceImport", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "FgQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "PurchaseQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UnitPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "AV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "CD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "RD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "VAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "CnF", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "Insurance", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "TVB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "TVA", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ATV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "Others", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UseQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimCD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimRD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimSD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimVAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimCnF", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimInsurance", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimTVB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimTVA", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimATV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "ClaimOthers", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "SubTotalDDB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMc", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMCD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMRD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMSD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMVAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMCnF", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMInsurance", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMTVB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMTVA", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMATV", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMOthers", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackDetails", "UOMSubTotalDDB", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "ExpCurrency", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "BDTCurrency", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimCD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimRD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimSD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalDDBack", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimVAT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimCnFAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimInsuranceAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimTVBAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimTVAAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimATVAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("DutyDrawBackHeader", "TotalClaimOthersAmount", "decimal(25, 9)", currConn);

                //commonDal.TableFieldAlter("IssueDetails", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "NBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "CostPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "SubTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "Wastage", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "DiscountAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "DiscountedNBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "UOMPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "UOMQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "UOMc", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueDetails", "UOMWastage", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueHeaders", "TotalVATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("IssueHeaders", "TotalAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "Cost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "BasePrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "OtherRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "OtherType", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "OtherAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PriceService", "SalePrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ProductCategories", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ProductCategories", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "CostPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "SalesPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "NBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "ReceivePrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "IssuePrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "TenderPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "ExportPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "InternalIssuePrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "TollIssuePrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "TollCharge", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "OpeningBalance", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "PacketPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "TradingMarkUp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "QuantityInHand", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "RebatePercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "TVBRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "CnFRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "InsuranceRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "CDRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "RDRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "AITRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "TVARate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "ATVRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Products", "OpeningTotalCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "CostPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "NBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "UOMQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "UOMPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "UOMc", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "DollerValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "CurrencyValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "RebateRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "RebateAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "SubTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "CnFAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "InsuranceAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "AssessableValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "CDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "RDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "TVBAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "TVAAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "ATVAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDetails", "OthersAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "CnFInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "CnFRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "CnFAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "InsuranceInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "InsuranceRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "InsuranceAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "AssessableInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "AssessableValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "CDInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "CDRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "CDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "RDInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "RDRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "RDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "TVBInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "TVBRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "TVBAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "SDInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "VATInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "TVAInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "TVARate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "TVAAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "ATVInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "ATVRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "ATVAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "OthersInp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "OthersRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "OthersAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "DutyCompleteQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "DutyCompleteQuantityPercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "LineCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "UnitCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceDuties", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceHeaders", "TotalAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceHeaders", "TotalVATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("PurchaseInvoiceHeaders", "CurrencyRateFromBDT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "CostPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "NBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "SubTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "DiscountAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "DiscountedNBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "UOMQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "UOMPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveDetails", "UOMc", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveHeaders", "TotalAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("ReceiveHeaders", "TotalVATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "SalesPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "NBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "AVGPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "VATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "SubTotal", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "SD", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "SDAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "TradingMarkUp", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "UOMQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "UOMPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "UOMc", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "DollerValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "CurrencyValue", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "DiscountAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceDetails", "DiscountedNBRPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceHeaders", "TotalAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceHeaders", "TotalVATAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceHeaders", "CurrencyRateFromBDT", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceHeadersExport", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceHeadersExport", "GrossWeight", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SalesInvoiceHeadersExport", "NetWeight", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("SDDeposits", "DepositAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TenderDetails", "TenderQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TenderDetails", "SaleQty", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TenderDetails", "TenderPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TransactionHistorys", "Quantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TransactionHistorys", "UPrice", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TransactionHistorys", "TradingMarkup", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TransactionHistorys", "SDRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TransactionHistorys", "VATRate", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("TransactionHistorys", "TCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("UOMs", "Convertion", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("VDS", "BillAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("VDS", "BillDeductAmount", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("VDS", "VDSPercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAlter("Vendors", "VDSPercent", "decimal(25, 9)", currConn);
                //#endregion AlterFields
                #endregion OldBUpdate

                #region Banderol bussiness


                #region CreateTable

                //transResult = NewTableAdd("SettingsRole", CreateSettingsRoleScript, currConn, transaction);
                //transResult = NewTableAdd("Banderols", CreateBanderolsScript, currConn, transaction);
                //transResult = NewTableAdd("PackagingInformations", CreatePackInfoScript, currConn, transaction);
                //transResult = NewTableAdd("BanderolProducts", CreateBandeProScript, currConn, transaction);
                //transResult = NewTableAdd("DemandHeaders", CreateDemandHeaderScript, currConn, transaction);
                //transResult = NewTableAdd("DemandDetails", CreateDemandDetailsScript, currConn, transaction);

                #endregion CreateTable
                #region 20140302
                //transResult = commonDal.TableFieldAdd("Products", "Banderol", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Vehicles", "DriverName", "varchar(100)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BanderolProducts", "BandProductId", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BanderolProducts", "WastageQty", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("DemandHeaders", "DemandReceiveDate", "datetime", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("DemandHeaders", "RefNo", "varchar(20)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("DemandHeaders", "RefDate", "datetime", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("DemandDetails", "DemandQty", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BanderolProducts", "OpeningQty", "decimal(25, 9)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("BanderolProducts", "OpeningDate", "datetime", currConn, transaction);

                #endregion

                #endregion Banderol bussiness

                #region Bureau 20140616
                if (BureauInfoVM.IsBureau == true)
                {
                    //transResult = commonDal.TableFieldAdd("BureauSalesInvoiceDetails", "ValueOnly", "varchar(1)", currConn, transaction);
                    //transResult = commonDal.TableFieldAdd("BureauSalesInvoiceDetails", "UOMQty", "decimal(25, 9)", currConn, transaction);
                    //transResult = NewTableAdd("BureauSalesInvoiceDetails", CreateBureauSaleDetailsScript, currConn, transaction);
                    //transResult = commonDal.TableFieldAdd("BureauSalesInvoiceDetails", "CustomerId", "varchar(20)", currConn, transaction);
                    //transResult = commonDal.TableFieldAdd("BureauSalesInvoiceDetails", "BureauType", "varchar(50)", currConn, transaction);
                    //transResult = commonDal.TableFieldAdd("BureauSalesInvoiceDetails", "BureauId", "varchar(50)", currConn, transaction);
                }
                #endregion

                #region Create table

                //transResult = NewTableAdd("VAT7", CreateVAT7Script, currConn, transaction);
                //transResult = NewTableAdd("TransferRawHeaders", CreateTransferRawHeadersScript, currConn, transaction);
                //transResult = NewTableAdd("TransferRawDetails", CreateTransferRawDetailsScript, currConn, transaction);
                //transResult = NewTableAdd("Trackings", CreateTrackingsScript, currConn, transaction);
                #endregion

                #region Tracking
                //transResult = commonDal.TableFieldAdd("Trackings", "ReceivePost", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "SalePost", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "IssuePost", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "ReceiveDate", "DateTime", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "UnitPrice", "Decimal(25,9)", currConn, transaction);

                //transResult = commonDal.TableFieldAdd("Trackings", "ReturnType", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "ReturnPurchase", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "ReturnPurchaseID", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "ReturnReceive", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "ReturnReceiveID", "varchar(50)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "ReturnSale", "varchar(1)", currConn, transaction);
                //transResult = commonDal.TableFieldAdd("Trackings", "ReturnSaleID", "varchar(50)", currConn, transaction);


                #endregion Tracking

                #region Foreign Key


                //transResult = AddForeignKey("BanderolProducts", "FK_BanderolProducts_Banderols", AddForeignKeyBandeProduct1, currConn, null);
                //transResult = AddForeignKey("BanderolProducts", "FK_BanderolProducts_PackagingInformations", AddForeignKeyBandeProduct2, currConn, null);
                //transResult = AddForeignKey("DemandDetails", "FK_DemandDetails_BanderolProducts", AddForeignKeyDemandDetails1, currConn, null);
                //transResult = AddForeignKey("DemandDetails", "FK_DemandDetails_DemandHeaders", AddForeignKeyDemandDetails2, currConn, null);
                //transResult = AddForeignKey("TransferRawDetails", "FK_TransferRawDetails_Products", AddForeignKeyTransferRawDetails1, currConn, null);
                //transResult = AddForeignKey("TransferRawDetails", "FK_TransferRawDetails_TransferRawHeaders", AddForeignKeyTransferRawDetails2, currConn, null);
                //transResult = AddForeignKey("Trackings", "FK_Trackings_Products", AddForeignKeyTrackings, currConn, null);
                #endregion

                #endregion

                #region commented
                //transResult = commonDal.TableFieldDelete("BankInformations", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("Currencies", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("CurrencyConversion", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("CustomerGroups", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("Customers", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("ProductCategories", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("Products", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("SalesInvoiceDetails", "IsSample", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("UOMName", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("UOMs", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("Vehicles", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("VendorGroups", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("Vendors", "IsArchive", currConn, transaction);
                //transResult = commonDal.TableFieldDelete("UserInformations", "IsVerified", currConn, transaction);

                //transResult = commonDal.TableFieldAdd("Customers", "WithholdingAuthority", "varchar(1)", currConn, transaction);

                #endregion

            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                transaction.Rollback();

                FileLogger.Log("CommonDAL", "DatabaseTableChanges", ex.ToString());

                throw new ArgumentNullException("", ex.Message.ToString());

                //////throw new ArgumentNullException("", "SQL:" + "sqlText" + FieldDelimeter + ex.Message.ToString());
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

        }

        #endregion

        #region Settings Methods

        public string settingsBulkUpdate(DataTable settingsInsert, DataTable settingsDelete, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string retResults = "0";
            string sqlText = "";
            SqlConnection VcurrConn = null;
            SqlTransaction Vtransaction = null;

            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (VcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }

                    Vtransaction = VcurrConn.BeginTransaction("SettingBulkInsert");
                }

                #endregion open connection and transaction


                sqlText = @" create table #tempsettingsInsert(
ID int identity(1,1)
,SettingGroup varchar(200) COLLATE DATABASE_DEFAULT
,SettingName  varchar(200)
,SettingType  varchar(200)
,SettingValue varchar(200)
)
 create table #tempsettingsDelete(
ID int identity(1,1)
,SettingGroup varchar(200) COLLATE DATABASE_DEFAULT
,SettingName  varchar(200)
,SettingType  varchar(200)
,SettingValue varchar(200)
)

";
                SqlCommand cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);
                cmd.ExecuteNonQuery();

                CommonDAL commonDAL = new CommonDAL();

                string[] resultInsert = commonDAL.BulkInsert("#tempsettingsInsert", settingsInsert, VcurrConn, Vtransaction, 10000, null, connVM);
                string[] resultDelete = commonDAL.BulkInsert("#tempsettingsDelete", settingsDelete, VcurrConn, Vtransaction, 10000, null, connVM);


                sqlText = @" 
delete   Settings 
from #tempsettingsDelete
where Settings.SettingGroup= #tempsettingsDelete.SettingGroup
and Settings.SettingName= #tempsettingsDelete.SettingName
COLLATE DATABASE_DEFAULT

delete   #tempsettingsInsert 
from Settings
where Settings.SettingGroup= #tempsettingsInsert.SettingGroup
and Settings.SettingName= #tempsettingsInsert.SettingName
COLLATE DATABASE_DEFAULT

insert into Settings(SettingGroup ,SettingName,SettingType,SettingValue,ActiveStatus)
select SettingGroup ,SettingName,SettingType,SettingValue,'Y' from #tempsettingsInsert
								    
								    
drop table #tempsettingsDelete	   
drop table #tempsettingsInsert
update VATReturnV2Notes set Description='1[Increasing Adjustment of Supplementary Duty]' where NoteNo='38'
update VATReturnV2Notes set Description='1[Decreasing Adjustment of Supplementary Duty]' where NoteNo='39'


";
                cmd.CommandText = sqlText;
                cmd.ExecuteNonQuery();

                Vtransaction.Commit();

            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "settingsBulkUpdate", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "settingsBulkUpdate", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn != null)
                {
                    if (VcurrConn.State == ConnectionState.Open)
                    {
                        VcurrConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return retResults;
            #endregion


        }

        public string settingsBulkUpdateMaster(DataTable settingsInsert, DataTable settingsDelete, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string retResults = "0";
            string sqlText = "";
            SqlConnection VcurrConn = null;
            SqlTransaction Vtransaction = null;

            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (VcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }

                    Vtransaction = VcurrConn.BeginTransaction("SettingBulkInsert");
                }

                #endregion open connection and transaction


                sqlText = @" create table #tempsettingsInsert(
ID int identity(1,1)
,SettingGroup varchar(200)
,SettingName  varchar(200)
,SettingType  varchar(200)
,SettingValue varchar(200)
)
 create table #tempsettingsDelete(
ID int identity(1,1)
,SettingGroup varchar(200)
,SettingName  varchar(200)
,SettingType  varchar(200)
,SettingValue varchar(200)
)

";
                SqlCommand cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);
                cmd.ExecuteNonQuery();

                CommonDAL commonDAL = new CommonDAL();

                string[] resultInsert = commonDAL.BulkInsert("#tempsettingsInsert", settingsInsert, VcurrConn, Vtransaction, 10000, null, connVM);
                string[] resultDelete = commonDAL.BulkInsert("#tempsettingsDelete", settingsDelete, VcurrConn, Vtransaction, 10000, null, connVM);


                sqlText = @" 
delete   SettingsMaster 
from #tempsettingsDelete
where SettingsMaster.SettingGroup= #tempsettingsDelete.SettingGroup
and SettingsMaster.SettingName= #tempsettingsDelete.SettingName

delete   #tempsettingsInsert 
from SettingsMaster
where SettingsMaster.SettingGroup= #tempsettingsInsert.SettingGroup
and SettingsMaster.SettingName= #tempsettingsInsert.SettingName

insert into SettingsMaster(SettingGroup ,SettingName,SettingType,SettingValue,ActiveStatus)
select SettingGroup ,SettingName,SettingType,SettingValue,'Y' from #tempsettingsInsert
								    
								    
drop table #tempsettingsDelete	   
drop table #tempsettingsInsert

";
                cmd.CommandText = sqlText;
                cmd.ExecuteNonQuery();

                Vtransaction.Commit();

            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "settingsBulkUpdate", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "settingsBulkUpdate", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn != null)
                {
                    if (VcurrConn.State == ConnectionState.Open)
                    {
                        VcurrConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return retResults;
            #endregion


        }

        public void SettingChange(SysDBInfoVMTemp connVM = null)
        {
            string sqlResultssettings;
            SettingDAL settingDal = new SettingDAL();

            #region DataTable Insert

            DataTable dtInsert = new DataTable();
            dtInsert.Columns.Add("SettingGroup");
            dtInsert.Columns.Add("SettingName");
            dtInsert.Columns.Add("SettingType");
            dtInsert.Columns.Add("SettingValue");

            #endregion

            #region DataTable Delete

            DataTable dtDelete = new DataTable();
            dtDelete.Columns.Add("SettingGroup");
            dtDelete.Columns.Add("SettingName");

            #endregion

            #region Jan-2023 to Dec-2023

            dtInsert.Rows.Add("VAT6_2", "FromSP", "bool", "N");
            dtInsert.Rows.Add("VAT6_1", "FromSP", "bool", "N");
            dtInsert.Rows.Add("ReProcess", "FromSP", "bool", "N");

            dtInsert.Rows.Add("Integration", "FileLocationIBS", "string", "-");
            dtInsert.Rows.Add("Integration", "FileLocationIAS", "string", "-");
            dtInsert.Rows.Add("Integration", "FileLocationPDF", "string", "-");

            dtInsert.Rows.Add("VAT6_2", "FromDataTable", "bool", "N");
            dtInsert.Rows.Add("Sale", "ProductNameCheck", "bool", "Y");
            dtInsert.Rows.Add("Purchase", "ProductNameCheck", "bool", "Y");
            dtInsert.Rows.Add("Report", "SendMail6_6", "bool", "N");
            dtInsert.Rows.Add("Import", "PurchaseExistContinue", "bool", "N");

            dtInsert.Rows.Add("Sale", "TCSRate", "decimal", "0.00");

            dtInsert.Rows.Add("Password", "MinimumLengthCheck", "bool", "N");
            dtInsert.Rows.Add("Password", "MinimumLength", "int", "4");
            dtInsert.Rows.Add("Password", "MixPasswordCheck", "bool", "N");
            dtInsert.Rows.Add("Password", "MaxWrongLoginCheck", "bool", "N");
            dtInsert.Rows.Add("Password", "MaxWrongLoginTime", "int", "10");
            dtInsert.Rows.Add("Password", "ChangePolicyCheck", "bool", "N");
            dtInsert.Rows.Add("Password", "ChangeDate", "int", "120");
            dtInsert.Rows.Add("Password", "CaptureCheck", "bool", "N");

            dtInsert.Rows.Add("TransferIssue", "AutoUOM", "bool", "N");
            dtInsert.Rows.Add("Purchase", "AutoUOM", "bool", "N");
            dtInsert.Rows.Add("Customer", "CustomerBINCheck", "bool", "Y");
            dtInsert.Rows.Add("AutoSave", "VDSBank", "bool", "N");
            dtInsert.Rows.Add("Sale", "CheckCPC", "bool", "Y");

            dtInsert.Rows.Add("VAT6_2", "ProductPriceHistorys", "bool", "N");

            #endregion

            #region July-2022 to Dec-2022

            dtInsert.Rows.Add("Sale", "SaleDeliveryChallanTracking", "bool", "N");
            dtInsert.Rows.Add("Toll", "ClientFGReceiveIn9_1", "bool", "Y");
            dtInsert.Rows.Add("Integration", "CustomeDateFormat", "string", "-");
            dtInsert.Rows.Add("Integration", "MonthlyMiddlewarTable", "bool", "Y");
            dtInsert.Rows.Add("TransferReceive", "AutoReceive", "bool", "N");
            #endregion

            #region APR-2021 to Dec-2021
            dtInsert.Rows.Add("Sale", "ExportCurrencyValueUpdate", "bool", "N");
            dtInsert.Rows.Add("Sale", "FixBOMReferenceName", "string", "-");
            dtInsert.Rows.Add("Customer", "CustomerSync", "bool", "N");
            dtInsert.Rows.Add("Integration", "MultipleInvoiceMandatory", "bool", "N");
            dtInsert.Rows.Add("Integration", "DuplicateInvoiceSave", "bool", "N");
            dtInsert.Rows.Add("Purchase", "DuplicateBECheck", "bool", "N");
            dtInsert.Rows.Add("AutoCode", "CPC", "bool", "N");

            dtInsert.Rows.Add("Reports", "NumberOfItems", "int", "10");

            dtInsert.Rows.Add("Purchase", "TotalPriceIncludingVAT", "bool", "N");

            #endregion

            #region Oct-2020 to Dec-2020

            #region Entry Process
            dtInsert.Rows.Add("BOM", "IssueRequired", "bool", "Y");
            dtInsert.Rows.Add("EntryProcess", "UpdateOnPost", "bool", "N");
            dtInsert.Rows.Add("VATTypeVAT", "AutoChange", "bool", "Y");
            dtInsert.Rows.Add("IssueFromBOM", "TollFGReceive", "bool", "Y");
            dtInsert.Rows.Add("Sale", "VehicleRequiredForService", "bool", "N");
            dtInsert.Rows.Add("Sale", "InvoiceDateChange", "bool", "Y");
            dtInsert.Rows.Add("Sale", "ChassisTracking", "bool", "N");
            //dtInsert.Rows.Add("ContractorFGProduction", "IssueFrom6_1", "bool", "N");



            #endregion

            #endregion Sep-2020 to Nov-2020

            #region 01/Aug/2020

            #region New Process 16-Sep-2020

            #region Data Delete

            sqlResultssettings = settingDal.settingsDataDeleteBulk(null, null, connVM);

            dtDelete.Rows.Add("Sale", "ExportVATAutoCalculation");
            dtDelete.Rows.Add("VAT18", "Company");
            dtDelete.Rows.Add("Sale", "ContinueInvoiceNo");
            dtDelete.Rows.Add("Purchase", "ContinueInvoiceNo");
            dtDelete.Rows.Add("Sale", "CommercialImporter");
            dtDelete.Rows.Add("BOM(VAT1)", "ItemNature");
            dtDelete.Rows.Add("BOM(VAT1)", "IntermediateProduction");
            dtDelete.Rows.Add("Sale", "InvoiceDate");
            dtDelete.Rows.Add("Sale", "CustomerName");
            dtDelete.Rows.Add("Sale", "ReportSaveLocation");
            dtDelete.Rows.Add("BOM(VAT1)", "ItemNature");
            dtDelete.Rows.Add("Purchase", "RateChangePromotPercent");
            dtDelete.Rows.Add("Purchase", "ImportCostingIncludeVDS");
            dtDelete.Rows.Add("Purchase", "ImportCostingIncludATV");
            dtDelete.Rows.Add("Reports", "VAT6_1English");
            dtDelete.Rows.Add("Reports", "VAT6_2English");
            dtDelete.Rows.Add("Issue", "DayEndProcessPurchase");
            dtDelete.Rows.Add("Issue", "DayEndProcessPurchase");
            dtDelete.Rows.Add("Issue", "DayEndProcessAVGPrice");
            dtDelete.Rows.Add("Issue", "DayEndProcess");
            dtDelete.Rows.Add("VAT6_10", "ChallanRange");
            dtDelete.Rows.Add("DayEnd", "OldProcess");
            //dtDelete.Rows.Add("DayEnd", "DayEndProcess");

            dtDelete.Rows.Add("Product", "AVGStockNewMethod");
            #endregion

            #region Data Insert

            dtInsert.Rows.Add("Receive", "AnnexureBOMIssue", "bool", "N");
            dtInsert.Rows.Add("Receive", "WIPBOMIssue", "bool", "N");
            dtInsert.Rows.Add("Receive", "AutoPrice", "bool", "N");


            dtInsert.Rows.Add("VAT9_1", "VAT18_6Adjustment", "int", "30");
            dtInsert.Rows.Add("Purchase", "ProcessAVGPrice", "bool", "Y");
            dtInsert.Rows.Add("Purchase", "DefaultProductGroup", "string", "Raw");
            dtInsert.Rows.Add("Purchase", "DefaultProductType", "string", "Raw");
            dtInsert.Rows.Add("Purchase", "ExpireDateTracking", "bool", "N");
            dtInsert.Rows.Add("Purchase", "ProductExpireDay", "string", "30");


            #region Toll

            dtInsert.Rows.Add("Toll", "NewRegister", "bool", "N");

            #endregion

            #region Process

            dtInsert.Rows.Add("DayEnd", "OldProcess", "bool", "N");

            #endregion

            #region Products and ByProduct

            dtInsert.Rows.Add("Products", "IsMappingCodeCheck", "bool", "N");
            dtInsert.Rows.Add("Products", "IsPharmaceutical", "bool", "N");
            dtInsert.Rows.Add("Product", "ProductDropDownWidth", "string", "300");
            dtInsert.Rows.Add("ByProduct", "ByProduct", "bool", "N");


            #endregion

            #region Sale
            dtInsert.Rows.Add("Sale", "DefaultProductGroup", "string", "Finish");
            dtInsert.Rows.Add("Sale", "DefaultProductType", "string", "Finish");
            dtInsert.Rows.Add("Sale", "LeaderPolicy", "bool", "N");
            dtInsert.Rows.Add("Sale", "DiscountInParcent", "bool", "Y");
            dtInsert.Rows.Add("Sale", "ExcludingVAT", "bool", "Y");
            dtInsert.Rows.Add("Sale", "SourcePaid", "bool", "N");
            dtInsert.Rows.Add("Sale", "ReportNumberOfCopiesPrint(Depo)", "int", "1");
            dtInsert.Rows.Add("Sale", "IsBlank", "bool", "N");
            dtInsert.Rows.Add("Sale", "DefaultCurrency", "string", "USD");
            dtInsert.Rows.Add("Sale", "CN_DN_PreviousInvocie", "bool", "N");
            dtInsert.Rows.Add("Sale", "AutoPartialRebateProcess", "bool", "N");
            dtInsert.Rows.Add("Sale", "LogXML", "bool", "N");
            dtInsert.Rows.Add("Sale", "AutoTransportBill", "bool", "N");
            dtInsert.Rows.Add("Sale", "PGroupInReport", "bool", "N");
            dtInsert.Rows.Add("Sale", "VehicleRequired", "bool", "N");
            dtInsert.Rows.Add("Sale", "MultipleItemInsert", "bool", "N");
            dtInsert.Rows.Add("Sale", "ShiftRequired", "bool", "N");
            dtInsert.Rows.Add("Sale", "SaleFromProduction", "bool", "N");
            dtInsert.Rows.Add("Sale", "TotalPrice", "bool", "N");
            dtInsert.Rows.Add("Sale", "TradeVATRate", "Decimal", "0.0");
            dtInsert.Rows.Add("Sale", "VDSRatio", "Decimal", "3.0");
            dtInsert.Rows.Add("Sale", "VATRateForVDSRatio", "Decimal", "15.0");
            dtInsert.Rows.Add("Sale", "MinimumGrandTotalForVDS", "Decimal", "10000.0");
            dtInsert.Rows.Add("Sale", "NBRPriceCall", "bool", "Y");
            dtInsert.Rows.Add("Sale", "PackingInExport", "bool", "N");
            dtInsert.Rows.Add("Sale", "CustomerWiseBOM", "bool", "N");
            dtInsert.Rows.Add("Sale", "CustomerWiseBOM", "bool", "N");
            dtInsert.Rows.Add("Sale", "ItemNature", "string", "-");
            dtInsert.Rows.Add("Sale", "ChangeableNBRPrice", "string", "N");
            dtInsert.Rows.Add("Sale", "ChangeableQuantity", "string", "N");
            dtInsert.Rows.Add("Sale", "PriceDeclarationForImport", "bool", "N");
            dtInsert.Rows.Add("Sale", "NumberOfItems", "int", "15");
            dtInsert.Rows.Add("Sale", "ReportNumberOfCopiesPrint", "int", "1");
            dtInsert.Rows.Add("Sale", "Page3Plyer", "bool", "N");
            dtInsert.Rows.Add("Sale", "CreditWithoutTransaction", "bool", "N");
            dtInsert.Rows.Add("Sale", "VAT6_3A4", "bool", "N");
            dtInsert.Rows.Add("Sale", "VAT6_3Letter", "bool", "N");
            dtInsert.Rows.Add("Sale", "VAT6_3Legal", "bool", "N");
            dtInsert.Rows.Add("Sale", "VAT6_3A5", "bool", "N");
            dtInsert.Rows.Add("Sale", "VAT6_3English", "bool", "N");
            dtInsert.Rows.Add("Sale", "TenderSaleFromBOM", "bool", "N");
            dtInsert.Rows.Add("Sale", "ExcludingVAT", "bool", "N");
            dtInsert.Rows.Add("Sale", "ZipRead", "bool", "N");
            dtInsert.Rows.Add("Sale", "ATVRate", "Decimal", "0.0");
            dtInsert.Rows.Add("Sale", "WareHouseRentPerQuantity", "Decimal", "0.0");
            dtInsert.Rows.Add("Sale", "DefualtForeignCurrency", "string", "USD");
            dtInsert.Rows.Add("Sale", "AutoCurrencyConv", "string", "Y");
            dtInsert.Rows.Add("Sale", "CustomerNameCheck", "string", "Y");
            dtInsert.Rows.Add("Sale", "RefRequired", "string", "N");
            dtInsert.Rows.Add("Sale", "AutoType", "string", "N");

            #endregion

            #region Version

            dtInsert.Rows.Add("Version", "VAT2012V2", "string", "01-Jul-2020");
            dtInsert.Rows.Add("Version", "VAT2022V2", "string", "01-Jul-2022");

            #endregion

            #region Session and Session Date

            dtInsert.Rows.Add("Session", "TimeOut", "int", "0");
            dtInsert.Rows.Add("SessionDate", "AutoSessionDate", "bool", "Y");

            #endregion

            #region Integration

            dtInsert.Rows.Add("Integration", "FromDBSaleAutoPost", "bool", "Y");
            dtInsert.Rows.Add("Integration", "FromDBCreditAutoPost", "bool", "Y");
            dtInsert.Rows.Add("Integration", "FromDBTransferAutoPost", "bool", "Y");
            dtInsert.Rows.Add("Integration", "UOM", "bool", "N");
            dtInsert.Rows.Add("Integration", "AllowMultipleSave", "bool", "Y");
            dtInsert.Rows.Add("Integration", "PostWithDateTime", "bool", "N");
            dtInsert.Rows.Add("Integration", "6_5AutoVATRate", "bool", "Y");
            dtInsert.Rows.Add("Integration", "OracleServiceName", "bool", "N");

            #endregion

            #region Type Of Purchase VAT

            dtInsert.Rows.Add("TypeOfPurchaseVAT", "VAT", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "NonVAT", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "Exempted", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "FixedVAT", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "OtherRate", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "Truncated", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "Ternover", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "UnRegister", "bool", "Y");
            dtInsert.Rows.Add("TypeOfPurchaseVAT", "NonRebate", "bool", "Y");


            #endregion

            #region Type Of Local Sale VAT

            dtInsert.Rows.Add("TypeOfLocalSaleVAT", "VAT", "bool", "Y");
            dtInsert.Rows.Add("TypeOfLocalSaleVAT", "NonVAT", "bool", "Y");
            dtInsert.Rows.Add("TypeOfLocalSaleVAT", "MRPRate", "bool", "Y");
            dtInsert.Rows.Add("TypeOfLocalSaleVAT", "FixedVAT", "bool", "Y");
            dtInsert.Rows.Add("TypeOfLocalSaleVAT", "OtherRate", "bool", "Y");
            dtInsert.Rows.Add("TypeOfLocalSaleVAT", "Retail", "bool", "Y");
            dtInsert.Rows.Add("TypeOfLocalSaleVAT", "MRPRate(SC)", "bool", "Y");


            #endregion

            #region Type Of Export Sale VAT

            dtInsert.Rows.Add("TypeOfExportSaleVAT", "Export", "bool", "Y");
            dtInsert.Rows.Add("TypeOfExportSaleVAT", "DeemExport", "bool", "Y");

            #endregion

            #region VAT6_1

            dtInsert.Rows.Add("VAT6_1", "TotalIncludeSD", "bool", "N");
            dtInsert.Rows.Add("VAT6_1", "Report3Digits", "bool", "N");
            dtInsert.Rows.Add("VAT6_1", "AutoAdjustment", "string", "N");
            dtInsert.Rows.Add("VAT6_1", "IncludeOtherAMT", "string", "N");
            dtInsert.Rows.Add("VAT6_1", "6_1Permanent", "string", "N");

            #endregion

            #region VAT6_2

            dtInsert.Rows.Add("VAT6_2", "ProductDescription", "bool", "N");
            dtInsert.Rows.Add("VAT6_2", "Report3Digits", "bool", "N");
            dtInsert.Rows.Add("VAT6_2", "AutoAdjustment", "string", "N");
            dtInsert.Rows.Add("VAT6_2", "6_2Permanent", "string", "N");
            dtInsert.Rows.Add("VAT6_2", "DefaultRef", "string", "NA");

            #endregion

            #region Toll6_4

            dtInsert.Rows.Add("Toll6_4", "IssueFrom6_1", "bool", "N");

            #endregion

            #region VAT6_10

            dtInsert.Rows.Add("VAT6_10", "ChallanRange", "Decimal", "200000");

            #endregion

            #region VAT9_1

            dtInsert.Rows.Add("VAT9_1", "Note27Description", "bool", "N");
            dtInsert.Rows.Add("VAT9_1", "Note32Description", "bool", "N");
            dtInsert.Rows.Add("VAT9_1", "ExportInBDT", "bool", "Y");


            #endregion

            #region Issue From BOM

            dtInsert.Rows.Add("IssueFromBOM", "TollReceive-NotWIP", "bool", "N");
            dtInsert.Rows.Add("IssueFromBOM", "TollReceive-NotWIP", "bool", "N");
            dtInsert.Rows.Add("IssueFromBOM", "IssueAutoPost", "bool", "N");

            #endregion

            #region Menu

            dtInsert.Rows.Add("Menu", "ClassicalMenu", "bool", "N");
            dtInsert.Rows.Add("Menu", "ExtraRequiredField", "bool", "Y");

            #endregion

            #region Reports

            dtInsert.Rows.Add("Reports", "VAT6_5OrderByProductName", "bool", "N");
            dtInsert.Rows.Add("Reports", "RptTR_Landscape", "bool", "N");
            dtInsert.Rows.Add("Reports", "VAT6_3English", "bool", "N");
            dtInsert.Rows.Add("Reports", "VAT6_5English", "bool", "N");
            dtInsert.Rows.Add("Reports", "VAT6_7English", "bool", "N");
            dtInsert.Rows.Add("Reports", "VAT6_8English", "bool", "N");
            dtInsert.Rows.Add("Reports", "VAT9_1SubFormEnglish", "bool", "N");
            dtInsert.Rows.Add("Reports", "VAT6_3", "string", "-");
            dtInsert.Rows.Add("Reports", "VAT6_3OrderByProduct", "bool", "N");
            dtInsert.Rows.Add("Reports", "TR6", "string", "-");
            dtInsert.Rows.Add("Reports", "VAT6_3SCBLA5", "bool", "N");
            dtInsert.Rows.Add("Reports", "VAT4.3", "string", "-");
            dtInsert.Rows.Add("Reports", "PreviewOnly", "bool", "Y");



            #endregion

            #region Branch

            dtInsert.Rows.Add("Branch", "BranchDropDownWidth", "string", "150");

            #endregion

            #region Transfer Issue

            dtInsert.Rows.Add("TransferIssue", "NegStockAllow", "bool", "N");
            dtInsert.Rows.Add("TransferIssue", "MultipleProduct", "bool", "N");
            dtInsert.Rows.Add("TransferIssue", "PriceCallDoubleClick", "bool", "Y");
            dtInsert.Rows.Add("TransferIssue", "LogXML", "bool", "N");

            #endregion

            #region Trading

            dtInsert.Rows.Add("Trading", "TradingWithSale", "bool", "N");

            #endregion

            #region Setup

            dtInsert.Rows.Add("Setup", "ShowAllCustomer", "bool", "Y");
            dtInsert.Rows.Add("Setup", "ShowAllVendor", "bool", "Y");
            dtInsert.Rows.Add("Setup", "ShowAllProduct", "bool", "Y");

            #endregion

            #region Auto Code

            dtInsert.Rows.Add("AutoCode", "MultipleBranch", "bool", "N");

            #endregion

            #region Entry Process

            dtInsert.Rows.Add("EntryProcess", "BackDateEntry", "bool", "Y");

            #endregion

            #region Code Generation Format

            dtInsert.Rows.Add("CodeGenerationFormat", "B/Y/N/", "bool", "Y");
            dtInsert.Rows.Add("CodeGenerationFormat", "B/N/Y/", "bool", "N");
            dtInsert.Rows.Add("CodeGenerationFormat", "N/B/Y/", "bool", "N");
            dtInsert.Rows.Add("CodeGenerationFormat", "N/Y/B/", "bool", "N");
            dtInsert.Rows.Add("CodeGenerationFormat", "Y/N/B/", "bool", "N");
            dtInsert.Rows.Add("CodeGenerationFormat", "Y/B/N/", "bool", "N");

            #endregion

            #region Code Generation Month Year Format

            dtInsert.Rows.Add("CodeGenerationMonthYearFormat", "MMYY", "bool", "Y");
            dtInsert.Rows.Add("CodeGenerationMonthYearFormat", "MMYYYY", "bool", "N");
            dtInsert.Rows.Add("CodeGenerationMonthYearFormat", "MMMYY", "bool", "N");
            dtInsert.Rows.Add("CodeGenerationMonthYearFormat", "MMMYYYY", "bool", "N");

            #endregion

            #region Default VAT Type

            dtInsert.Rows.Add("DefaultVATType", "LocalSale", "string", "VAT");
            dtInsert.Rows.Add("DefaultVATType", "ExportSale", "string", "Export");
            dtInsert.Rows.Add("DefaultVATType", "Purchase", "string", "VAT");

            #endregion

            #region Multiple Item Insert

            dtInsert.Rows.Add("MultipleItemInsert", "Sale", "bool", "N");
            dtInsert.Rows.Add("MultipleItemInsert", "Purchase", "bool", "N");

            #endregion

            #region Decimal Place

            dtInsert.Rows.Add("DecimalPlace", "UnitPrice6_3", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Quantity6_3", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Amount6_3", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "VATRate6_3", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "FormNumeric", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Quantity6_5", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Amount6_5", "Decimal", "2");
            //  dtInsert.Rows.Add("DecimalPlace", "FormNumeric", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Quantity6_2_1", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Amount6_2_1", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Quantity6_4", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Amount6_4", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Quantity4_3", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Amount4_3", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Quantity6_1", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Amount6_1", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Quantity6_2", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "Amount6_2", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "TollQuantity6_1", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "TollAmount6_1", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "TollQuantity6_2", "Decimal", "2");
            dtInsert.Rows.Add("DecimalPlace", "TollAmount6_2", "Decimal", "2");

            #endregion

            #region Font Size

            dtInsert.Rows.Add("FontSize", "VAT6_3", "Decimal", "9");
            dtInsert.Rows.Add("FontSize", "VAT6_5", "Decimal", "9");
            dtInsert.Rows.Add("FontSize", "VAT6_6", "Decimal", "9");
            dtInsert.Rows.Add("FontSize", "VAT6_7", "Decimal", "9");
            dtInsert.Rows.Add("FontSize", "VAT6_1", "Decimal", "8");
            dtInsert.Rows.Add("FontSize", "VAT6_2", "Decimal", "8");
            dtInsert.Rows.Add("FontSize", "VAT6_2_1", "Decimal", "8");

            #endregion

            #region DBBackup Location

            dtInsert.Rows.Add("DBBackupLocation", "DBBackupLocation", "string", @"D:\SymphonySofttect\DBBackup");

            #endregion

            #region Operational Code

            dtInsert.Rows.Add("OperationalCode", "TotalDepositVAT", "string", "1/1133/006/0311");
            dtInsert.Rows.Add("OperationalCode", "TotalDepositSD", "string", "1/1133/006/0711");
            dtInsert.Rows.Add("OperationalCode", "InterestOnOveredVATDeposit", "string", "1/1133/006/0311");
            dtInsert.Rows.Add("OperationalCode", "InterestOnOveredSDDeposit", "string", "1/1133/006/0711");
            dtInsert.Rows.Add("OperationalCode", "FineOrPenaltyDeposit", "string", "1/1103/006/1901");
            dtInsert.Rows.Add("OperationalCode", "ExciseDutyDeposit", "string", "1/1133/006/0610");
            dtInsert.Rows.Add("OperationalCode", "DevelopmentSurchargeDeposit", "string", "1/1103/006/2225");
            dtInsert.Rows.Add("OperationalCode", "ICTDevelopmentSurchargeDeposit", "string", "1/1103/006/2214");
            dtInsert.Rows.Add("OperationalCode", "HelthCareSurchargeDeposit", "string", "1/1103/006/2212");
            dtInsert.Rows.Add("OperationalCode", "EnvironmentProtectionSurchargeDeposit", "string", "1/1103/006/2213");

            #endregion

            #region Single File Import

            dtInsert.Rows.Add("SingleFileImport", "SaleImport", "bool", "N");
            dtInsert.Rows.Add("SingleFileImport", "PurchaseImport", "bool", "N");
            dtInsert.Rows.Add("SingleFileImport", "IssueImport", "bool", "N");
            dtInsert.Rows.Add("SingleFileImport", "ReceiveImport", "bool", "N");
            dtInsert.Rows.Add("SingleFileImport", "VDSImport", "bool", "N");
            dtInsert.Rows.Add("SingleFileImport", "BOM", "bool", "N");

            #endregion

            #region Auto Save

            dtInsert.Rows.Add("AutoSave", "SaleCustomers", "bool", "N");
            dtInsert.Rows.Add("AutoSave", "SaleProduct", "bool", "N");
            dtInsert.Rows.Add("AutoSave", "PurchaseVendor", "bool", "N");
            dtInsert.Rows.Add("AutoSave", "PurchaseProduct", "bool", "N");
            dtInsert.Rows.Add("AutoSave", "ReceiveProduct", "bool", "N");
            dtInsert.Rows.Add("AutoSave", "IssueProduct", "bool", "N");
            dtInsert.Rows.Add("AutoSave", "DefaultProductCategory", "string", "-");
            dtInsert.Rows.Add("AutoSave", "DefaultVendorGroup", "string", "-");
            dtInsert.Rows.Add("AutoSave", "DefaultCustomerGroup", "string", "-");

            #endregion

            #region Commercial Importer

            dtInsert.Rows.Add("CommercialImporter", "CommercialImporter", "bool", "N");

            #endregion

            #region Purchase and ImportPurchase

            dtInsert.Rows.Add("Purchase", "MultipleItemInsert", "bool", "N");

            dtInsert.Rows.Add("Purchase", "BankingChannelPayRange", "Decimal", "100000");

            dtInsert.Rows.Add("Purchase", "ContinueInvoiceNo", "bool", "N");
            dtInsert.Rows.Add("Purchase", "TrackingWithSale", "bool", "N");
            dtInsert.Rows.Add("Purchase", "TrackingWithSaleFIFO", "bool", "N");
            dtInsert.Rows.Add("Purchase", "ImportCostingIncludeATV", "bool", "N");
            dtInsert.Rows.Add("Purchase", "RebateWithGRN", "bool", "Y");
            dtInsert.Rows.Add("Purchase", "LogXML", "bool", "N");
            dtInsert.Rows.Add("Purchase", "EntryRealTime", "bool", "Y");
            dtInsert.Rows.Add("Purchase", "PurchaseSaleTracking", "bool", "N");

            dtInsert.Rows.Add("ImportPurchase", "ATVRebate", "bool", "N");

            #endregion

            #region Windows Location

            dtInsert.Rows.Add("WindowsLocation", "WindowsLocation", "string", "C");

            #endregion

            #region Receive and TollReceive

            dtInsert.Rows.Add("Receive", "ShiftRequired", "bool", "N");
            dtInsert.Rows.Add("Receive", "CustomerWiseBOM", "bool", "N");
            dtInsert.Rows.Add("Receive", "AutoUOM", "bool", "N");

            dtInsert.Rows.Add("Receive", "EntryRealTime", "bool", "Y");

            dtInsert.Rows.Add("TollReceive", "WithIssue", "bool", "N");

            #endregion

            #region BOM

            dtInsert.Rows.Add("BOM", "ReportName", "string", "-");
            dtInsert.Rows.Add("BOM", "VAT4_3(TollIssue)WithRaw", "bool", "N");
            dtInsert.Rows.Add("BOM", "TollIssueCostWithOthers", "bool", "N");
            dtInsert.Rows.Add("BOM", "RptBOMCostingA4", "bool", "N");
            dtInsert.Rows.Add("BOM", "ItemNature", "string", "-");
            dtInsert.Rows.Add("BOM", "InputServicePercent", "bool", "N");
            dtInsert.Rows.Add("BOM", "IntermediateProduction", "bool", "N");
            dtInsert.Rows.Add("BOM", "DefaultOverHeadCode", "string", "-");

            #endregion

            #region Import

            dtInsert.Rows.Add("Import", "SaleSingleFile", "bool", "N");
            dtInsert.Rows.Add("Import", "TransferExistContinue", "bool", "N");
            dtInsert.Rows.Add("Import", "SaleImportSelection", "string", "Excel");
            dtInsert.Rows.Add("Import", "TransferImportSelection", "string", "Excel");
            dtInsert.Rows.Add("Import", "SaleExistContinue", "bool", "N");
            dtInsert.Rows.Add("Import", "SaleDuplicateInsert", "bool", "Y");
            dtInsert.Rows.Add("Import", "PurchaseDuplicateInsert", "bool", "Y");
            dtInsert.Rows.Add("Import", "IssueDuplicateInsert", "bool", "Y");
            dtInsert.Rows.Add("Import", "ReceiveDuplicateInsert", "bool", "Y");
            dtInsert.Rows.Add("Import", "TransferIssueDuplicateInsert", "bool", "Y");
            dtInsert.Rows.Add("Import", "TransferReceiveDuplicateInsert", "bool", "Y");

            #endregion

            #region Database Name

            dtInsert.Rows.Add("DatabaseName", "DatabaseName", "string", "-");

            #endregion

            #region Production

            dtInsert.Rows.Add("Production", "ChangeableNBRPrice", "string", "N");

            #endregion

            #region Company Code

            dtInsert.Rows.Add("CompanyCode", "Code", "string", "-");

            #endregion

            #region Sale Web

            dtInsert.Rows.Add("SaleWeb", "Setps", "bool", "N");

            #endregion

            #region Integration Data Load

            dtInsert.Rows.Add("IntegrationDataLoad", "TopValue", "string", "7000");

            #endregion

            #region price Declaration

            dtInsert.Rows.Add("PriceDeclaration", "LocalInVAT4_3", "bool", "Y");
            dtInsert.Rows.Add("PriceDeclaration", "LocalInVAT4_3Ka(Tarrif)", "bool", "N");
            dtInsert.Rows.Add("PriceDeclaration", "TenderInVAT4_3", "bool", "N");
            dtInsert.Rows.Add("PriceDeclaration", "TenderInVAT4_3(Tender)", "bool", "N");
            dtInsert.Rows.Add("PriceDeclaration", "TenderPriceWithVAT", "bool", "N");
            dtInsert.Rows.Add("PriceDeclaration", "TradingProduct", "bool", "N");

            #endregion price Declaration

            #region Issue

            dtInsert.Rows.Add("Purchase", "DayEndProcess", "bool", "N");
            dtInsert.Rows.Add("Issue", "AutoUOM", "bool", "N");

            dtInsert.Rows.Add("Issue", "SkipItem", "bool", "N");


            //dtInsert.Rows.Add("Issue", "AVGPriceNewMethod", "bool", "N");

            dtInsert.Rows.Add("Product", "AVGStockNewMethod", "bool", "Y");

            //dtInsert.Rows.Add("Test", "Test", "bool", "N");


            #endregion

            dtInsert.Rows.Add("DayEnd", "DayEndProcess", "bool", "N");
            dtInsert.Rows.Add("DayEnd", "BigDataProcess", "bool", "N");

            dtInsert.Rows.Add("Purchase", "IsTDS", "bool", "Y");


            //dtInsert.Rows.Add("DayEnd", "BaseSet", "bool", "N");

            #endregion

            #endregion New Process 16-Sep-2020

            #region Comment 16-Sep-2020


            #region Data Delete

            ////sqlResultssettings = settingDal.settingsDataDelete("Sale", "ExportVATAutoCalculation", null, null);

            ////sqlResultssettings = settingDal.settingsDataDeleteBulk(null, null);

            ////sqlResultssettings = settingDal.settingsDataDelete("VAT18", "Company", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Sale", "ContinueInvoiceNo", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Purchase", "ContinueInvoiceNo", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Sale", "CommercialImporter", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("BOM(VAT1)", "ItemNature", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("BOM(VAT1)", "IntermediateProduction", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Sale", "InvoiceDate", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Sale", "CustomerName", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Sale", "ReportSaveLocation", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("BOM(VAT1)", "ItemNature", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Purchase", "RateChangePromotPercent", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Purchase", "ImportCostingIncludeVDS", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Purchase", "ImportCostingIncludATV", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Reports", "VAT6_1English", null, null);
            ////sqlResultssettings = settingDal.settingsDataDelete("Reports", "VAT6_2English", null, null);

            #endregion

            ////sqlResultssettings = settingDal.settingsDataInsert("Products", "IsPharmaceutical", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "LeaderPolicy", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "DiscountInParcent", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ExcludingVAT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "SourcePaid", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Version", "VAT2012V2", "string", "01-Jul-2020", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Integration", "FromDBSaleAutoPost", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Integration", "FromDBCreditAutoPost", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Integration", "FromDBTransferAutoPost", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "VAT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "NonVAT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "Exempted", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "FixedVAT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "OtherRate", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "Truncated", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "Ternover", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "UnRegister", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfPurchaseVAT", "NonRebate", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfLocalSaleVAT", "VAT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfLocalSaleVAT", "NonVAT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfLocalSaleVAT", "MRPRate", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfLocalSaleVAT", "FixedVAT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfLocalSaleVAT", "OtherRate", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfLocalSaleVAT", "Retail", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfLocalSaleVAT", "MRPRate(SC)", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfExportSaleVAT", "Export", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TypeOfExportSaleVAT", "DeemExport", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT6_1", "TotalIncludeSD", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT9_1", "Note27Description", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT9_1", "Note32Description", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ReportNumberOfCopiesPrint(Depo)", "int", "1", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "IsBlank", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("IssueFromBOM", "TollReceive-NotWIP", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("IssueFromBOM", "TollReceive-NotWIP", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "DefaultCurrency", "string", "USD", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Menu", "ClassicalMenu", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "RptTR_Landscape", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT6_3English", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT6_5English", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT6_7English", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT6_8English", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT9_1SubFormEnglish", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Product", "ProductDropDownWidth", "string", "300", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Branch", "BranchDropDownWidth", "string", "150", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TransferIssue", "NegStockAllow", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Session", "TimeOut", "int", "0", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "CN_DN_PreviousInvocie", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Trading", "TradingWithSale", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("ByProduct", "ByProduct", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Setup", "ShowAllCustomer", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Setup", "ShowAllVendor", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Setup", "ShowAllProduct", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT6_2", "ProductDescription", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoCode", "MultipleBranch", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("EntryProcess", "BackDateEntry", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "AutoPartialRebateProcess", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "LogXML", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationFormat", "B/Y/N/", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationFormat", "B/N/Y/", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationFormat", "N/B/Y/", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationFormat", "N/Y/B/", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationFormat", "Y/N/B/", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationFormat", "Y/B/N/", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationMonthYearFormat", "MMYY", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationMonthYearFormat", "MMYYYY", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationMonthYearFormat", "MMMYY", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CodeGenerationMonthYearFormat", "MMMYYYY", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TransferIssue", "MultipleProduct", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TransferIssue", "PriceCallDoubleClick", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Integration", "UOM", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DefaultVATType", "LocalSale", "string", "VAT", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DefaultVATType", "ExportSale", "string", "Export", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DefaultVATType", "Purchase", "string", "VAT", null, null);
            //////////sqlResultssettings = settingDal.settingsDataInsert("DefaultVATType", "ImportPurchase", "string", "VAT", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("MultipleItemInsert", "Sale", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("MultipleItemInsert", "Purchase", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT6_10", "ChallanRange", "Decimal", "20000", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Toll6_4", "IssueFrom6_1", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "UnitPrice6_3", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Quantity6_3", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Amount6_3", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "VATRate6_3", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "FormNumeric", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Quantity6_5", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Amount6_5", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("FontSize", "VAT6_3", "Decimal", "9", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("FontSize", "VAT6_6", "Decimal", "9", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("FontSize", "VAT6_7", "Decimal", "9", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("FontSize", "VAT6_1", "Decimal", "8", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("FontSize", "VAT6_2", "Decimal", "8", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("FontSize", "VAT6_2_1", "Decimal", "8", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "FormNumeric", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Quantity6_2_1", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Amount6_2_1", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Quantity6_4", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Amount6_4", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Quantity4_3", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Amount4_3", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Quantity6_1", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Amount6_1", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Quantity6_2", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "Amount6_2", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "TollQuantity6_1", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "TollAmount6_1", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "TollQuantity6_2", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DecimalPlace", "TollAmount6_2", "Decimal", "2", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DBBackupLocation", "DBBackupLocation", "string", @"D:\SymphonySofttect\DBBackup", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "TotalDepositVAT", "string", "1/1133/006/0311", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "TotalDepositSD", "string", "1/1133/006/0711", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "InterestOnOveredVATDeposit", "string", "1/1133/006/0311", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "InterestOnOveredSDDeposit", "string", "1/1133/006/0711", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "FineOrPenaltyDeposit", "string", "1/1103/006/1901", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "ExciseDutyDeposit", "string", "1/1133/006/0610", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "DevelopmentSurchargeDeposit", "string", "1/1103/006/2225", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "ICTDevelopmentSurchargeDeposit", "string", "1/1103/006/2214", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "HelthCareSurchargeDeposit", "string", "1/1103/006/2212", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("OperationalCode", "EnvironmentProtectionSurchargeDeposit", "string", "1/1103/006/2213", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("SingleFileImport", "SaleImport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("SingleFileImport", "PurchaseImport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("SingleFileImport", "IssueImport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("SingleFileImport", "ReceiveImport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("SingleFileImport", "VDSImport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("SingleFileImport", "BOM", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "SaleCustomers", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "SaleProduct", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "PurchaseVendor", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "PurchaseProduct", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "ReceiveProduct", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "IssueProduct", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "DefaultProductCategory", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "DefaultVendorGroup", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("AutoSave", "DefaultCustomerGroup", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "AutoTransportBill", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "PGroupInReport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VehicleRequired", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "MultipleItemInsert", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CommercialImporter", "CommercialImporter", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "TradeVATRate", "Decimal", "0.0", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VDSRatio", "Decimal", "3.0", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VATRateForVDSRatio", "Decimal", "15.0", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "MinimumGrandTotalForVDS", "Decimal", "10000.0", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("SessionDate", "AutoSessionDate", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Purchase", "ContinueInvoiceNo", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("WindowsLocation", "WindowsLocation", "string", "C", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("ImportPurchase", "ATVRebate", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ShiftRequired", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "SaleFromProduction", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Receive", "ShiftRequired", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "TotalPrice", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("BOM", "ReportName", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "SaleSingleFile", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "TransferExistContinue", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "SaleImportSelection", "string", "Excel", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "TransferImportSelection", "string", "Excel", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT6_1", "Report3Digits", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT6_2", "Report3Digits", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ATVRate", "Decimal", "0.0", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "WareHouseRentPerQuantity", "Decimal", "0.0", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("DatabaseName", "DatabaseName", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "SaleExistContinue", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "SaleDuplicateInsert", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "PurchaseDuplicateInsert", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "IssueDuplicateInsert", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "ReceiveDuplicateInsert", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "TransferIssueDuplicateInsert", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Import", "TransferReceiveDuplicateInsert", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Purchase", "TrackingWithSale", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Purchase", "TrackingWithSaleFIFO", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("BOM", "VAT4_3(TollIssue)WithRaw", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Purchase", "ImportCostingIncludeATV", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("TollReceive", "WithIssue", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT6_3", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT6_3OrderByProduct", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "NBRPriceCall", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "TR6", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Reports", "VAT6_3SCBLA5", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "PackingInExport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "CustomerWiseBOM", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Receive", "CustomerWiseBOM", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "CustomerWiseBOM", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("BOM", "TollIssueCostWithOthers", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("BOM", "RptBOMCostingA4", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT9_1", "ExportInBDT", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("BOM", "ItemNature", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("BOM", "InputServicePercent", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("BOM", "IntermediateProduction", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ItemNature", "string", "-", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ChangeableNBRPrice", "string", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ChangeableQuantity", "string", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Production", "ChangeableNBRPrice", "string", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT6_2", "AutoAdjustment", "string", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("VAT6_1", "AutoAdjustment", "string", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "PriceDeclarationForImport", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "NumberOfItems", "int", "15", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ReportNumberOfCopiesPrint", "int", "1", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "Page3Plyer", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "CreditWithoutTransaction", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("IssueFromBOM", "IssueAutoPost", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VAT6_3A4", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VAT6_3Letter", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VAT6_3Legal", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VAT6_3A5", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "VAT6_3English", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "TenderSaleFromBOM", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ExcludingVAT", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("CompanyCode", "Code", "string", "-", null, null);

            ////sqlResultssettings = settingDal.settingsDataInsert("SaleWeb", "Setps", "bool", "N", null, null);

            ////sqlResultssettings = settingDal.settingsDataInsert("IntegrationDataLoad", "TopValue", "string", "7000", null, null);

            ////sqlResultssettings = settingDal.settingsDataInsert("Purchase", "RebateWithGRN", "bool", "Y", null, null);

            ////sqlResultssettings = settingDal.settingsDataInsert("Sale", "ZipRead", "bool", "N", null, null);

            ////sqlResultssettings = settingDal.settingsDataInsert("Receive", "AutoUOM", "bool", "N", null, null);

            #region price Declaration

            ////sqlResultssettings = settingDal.settingsDataInsert("PriceDeclaration", "LocalInVAT4_3", "bool", "Y", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("PriceDeclaration", "LocalInVAT4_3Ka(Tarrif)", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("PriceDeclaration", "TenderInVAT4_3", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("PriceDeclaration", "TenderInVAT4_3(Tender)", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("PriceDeclaration", "TenderPriceWithVAT", "bool", "N", null, null);
            ////sqlResultssettings = settingDal.settingsDataInsert("PriceDeclaration", "TradingProduct", "bool", "N", null, null);

            #endregion price Declaration

            #endregion

            #endregion 01/Sep/1991

            #region settingsBulkUpdate

            settingsBulkUpdate(dtInsert, dtDelete, connVM);

            #endregion  settingsBulkUpdate

        }


        public void SettingChangeMaster(SysDBInfoVMTemp connVM = null)
        {
            string sqlResultssettings;
            SettingDAL settingDal = new SettingDAL();

            #region DataTable Insert

            DataTable dtInsert = new DataTable();
            dtInsert.Columns.Add("SettingGroup");
            dtInsert.Columns.Add("SettingName");
            dtInsert.Columns.Add("SettingType");
            dtInsert.Columns.Add("SettingValue");

            #endregion

            #region DataTable Delete

            DataTable dtDelete = new DataTable();
            dtDelete.Columns.Add("SettingGroup");
            dtDelete.Columns.Add("SettingName");

            #endregion
            #region APR-2021 to Dec-2021
            //dtInsert.Rows.Add("Integration", "DuplicateInvoiceSave", "bool", "N");
            //dtInsert.Rows.Add("Purchase", "DuplicateBECheck", "bool", "N");
            dtInsert.Rows.Add("DayEnd", "DayEndProcess", "bool", "Y");
            dtInsert.Rows.Add("DayEnd", "VAT6_1ProcessDate", "string", "2100-07-01");
            dtInsert.Rows.Add("DayEnd", "VAT6_2ProcessDate", "string", "2100-07-01");
            dtInsert.Rows.Add("DayEnd", "VAT6_2_1ProcessDate", "string", "2100-07-01");
            dtInsert.Rows.Add("Product", "CodeUpdate", "bool", "N");
            dtInsert.Rows.Add("Purchase", "IsTDSShow", "bool", "Y");
            dtInsert.Rows.Add("User", "IsAdCheck", "bool", "N");
            dtInsert.Rows.Add("User", "AdUrl", "string", "");
            dtInsert.Rows.Add("User", "AdAPI", "string", "");

            #endregion


            settingsBulkUpdateMaster(dtInsert, dtDelete, connVM);


        }
        #endregion  settingsBulkUpdate

        public string settingsCache(string SettingGroup, string SettingName, DataTable dt = null, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables
            string SettingValue = string.Empty;
            #endregion

            #region try

            try
            {

                #region sql statement
                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow[] settingRow = dt.Select("SettingGroup='" + SettingGroup + "' and SettingName='" + SettingName + "'");
                    SettingValue = settingRow[0]["SettingValue"].ToString();
                }
                else
                {
                    return settingValue(SettingGroup, SettingName, connVM);
                }
                #endregion

            }
            #endregion

            #region catch


            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "settingsCache", ex.ToString());

                ////FileLogger.Log(SettingGroup, this.GetType().Name, "SettingGroup:" + SettingGroup + Environment.NewLine + "SettingName:" + SettingName + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace);

                SettingValue = string.Empty;
            }

            #endregion

            #region finally
            finally
            {

            }
            #endregion

            return SettingValue;

        }
        //
        public string settings(string SettingGroup, string SettingName, SqlConnection VcurrConn = null
            , SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables
            string sqlText = "";
            string SettingValue = string.Empty;
            DataTable dataTable = new DataTable("SA");
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                sqlText = "  ";
                SqlCommand cmdExist = new SqlCommand(sqlText, currConn, transaction);

                //var tt = UserInfoVM.IsMainSetting;

                //cmdExist.CommandText =
                //    @"select isnull(IsMainSettings,'Y')IsMainSettings from UserInformations where UserID = @uid";

                //cmdExist.Parameters.AddWithValue("@uid", UserInfoVM.UserId);

                //var isMain = cmdExist.ExecuteScalar();

                string settingTable = "SettingsRole";

                if (UserInfoVM.IsMainSetting)
                {
                    settingTable = "Settings";
                }

                //sqlText += " SELECT SettingValue FROM " + settingTable;
                //sqlText += " WHERE SettingGroup='" + SettingGroup + "' AND SettingName='" + SettingName + "'";
                sqlText += " SELECT SettingValue FROM " + settingTable;
                sqlText += " WHERE SettingGroup = @SettingGroup  AND SettingName = @SettingName";

                if (!UserInfoVM.IsMainSetting)
                {
                    //sqlText += "  AND UserId='" + UserInfoVM.UserId + "'";
                    sqlText += "  AND UserId = @UserId";

                }

                cmdExist.CommandText = sqlText;

                //BugsBD
                //SqlParameter parameter = new SqlParameter("@settingTable", SqlDbType.VarChar, 250);
                //parameter.Value = settingTable;
                //cmdExist.Parameters.Add(parameter);

                SqlParameter parameter = new SqlParameter("@SettingGroup", SqlDbType.VarChar, 250);
                parameter.Value = SettingGroup;
                cmdExist.Parameters.Add(parameter);

                parameter = new SqlParameter("@SettingName", SqlDbType.VarChar, 250);
                parameter.Value = SettingName;
                cmdExist.Parameters.Add(parameter);

                if (!UserInfoVM.IsMainSetting)
                {
                    parameter = new SqlParameter("@UserId", SqlDbType.VarChar, 250);
                    parameter.Value = UserInfoVM.UserId;
                    cmdExist.Parameters.Add(parameter);
                }



                object objfoundId = cmdExist.ExecuteScalar();
                if (objfoundId == null)
                {
                    sqlText = "  ";
                    sqlText += " SELECT SettingValue FROM Settings";
                    //sqlText += " WHERE SettingGroup='" + SettingGroup + "' AND SettingName='" + SettingName + "'  ";
                    sqlText += " WHERE SettingGroup = @SettingGroup  AND SettingName = @SettingName";
                    cmdExist = new SqlCommand(sqlText, currConn, transaction);

                    //BugsBD                   
                    SqlParameter parameter2 = new SqlParameter("@SettingGroup", SqlDbType.VarChar, 250);
                    parameter2.Value = SettingGroup;
                    cmdExist.Parameters.Add(parameter2);

                    parameter2 = new SqlParameter("@SettingName", SqlDbType.VarChar, 250);
                    parameter2.Value = SettingName;
                    cmdExist.Parameters.Add(parameter2);

                    objfoundId = cmdExist.ExecuteScalar();
                    SettingValue = objfoundId.ToString();

                }
                else
                {
                    SettingValue = objfoundId.ToString();
                }
                #endregion
            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                ////throw new ArgumentNullException("Setting", "SQL:" + sqlText + FieldDelimeter + "Please Update the Setting");

                FileLogger.Log("CommonDAL", "settings", ex.ToString() + "\n" + sqlText, "settings");

                SettingValue = string.Empty;
            }

            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            return SettingValue;

        }

        public string settingsMaster(string SettingGroup, string SettingName, SqlConnection VcurrConn = null
            , SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables
            string sqlText = "";
            string SettingValue = string.Empty;
            DataTable dataTable = new DataTable("SA");
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                sqlText = "  ";
                SqlCommand cmdExist = new SqlCommand(sqlText, currConn, transaction);

                string settingTable = "SettingsMaster";

                sqlText += " SELECT SettingValue FROM " + settingTable;
                //sqlText += " WHERE SettingGroup='" + SettingGroup + "' AND SettingName='" + SettingName + "'";
                sqlText += " WHERE SettingGroup = @SettingGroup AND SettingName = @SettingName";

                cmdExist.CommandText = sqlText;

                //BugsBD
                SqlParameter parameter = new SqlParameter("@SettingGroup", SqlDbType.VarChar, 250);
                parameter.Value = SettingGroup;
                cmdExist.Parameters.Add(parameter);

                parameter = new SqlParameter("@SettingName", SqlDbType.VarChar, 250);
                parameter.Value = SettingName;
                cmdExist.Parameters.Add(parameter);


                object objfoundId = cmdExist.ExecuteScalar();
                if (objfoundId == null)
                {
                    sqlText = "  ";
                    sqlText += " SELECT SettingValue FROM SettingsMaster";
                    //sqlText += " WHERE SettingGroup='" + SettingGroup + "' AND SettingName='" + SettingName + "'  ";
                    sqlText += " WHERE SettingGroup = @SettingGroup AND SettingName = @SettingName";
                    cmdExist = new SqlCommand(sqlText, currConn, transaction);

                    //BugsBD
                    SqlParameter parameter2 = new SqlParameter("@SettingGroup", SqlDbType.VarChar, 250);
                    parameter2.Value = SettingGroup;
                    cmdExist.Parameters.Add(parameter2);

                    parameter2 = new SqlParameter("@SettingName", SqlDbType.VarChar, 250);
                    parameter2.Value = SettingName;
                    cmdExist.Parameters.Add(parameter2);


                    objfoundId = cmdExist.ExecuteScalar();
                    if (objfoundId != null)
                    {
                        SettingValue = objfoundId.ToString();

                    }

                }
                else
                {
                    SettingValue = objfoundId.ToString();
                }
                #endregion
            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                ////throw new ArgumentNullException("Setting", "SQL:" + sqlText + FieldDelimeter + "Please Update the Setting");

                FileLogger.Log("CommonDAL", "settingsMaster", ex.ToString() + "\n" + sqlText, "settings");

                SettingValue = string.Empty;
            }

            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            return SettingValue;

        }

        public void settingsUpdate(string SettingGroup, string SettingName, string settingValue, SqlConnection VcurrConn = null
          , SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables
            string sqlText = "";
            string SettingValue = string.Empty;
            DataTable dataTable = new DataTable("SA");
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                sqlText = "  ";
                SqlCommand cmdExist = new SqlCommand(sqlText, currConn, transaction);


                string settingTable = "SettingsRole";

                if (UserInfoVM.IsMainSetting)
                {
                    settingTable = "Settings";
                }

                //sqlText += " UPDATE " + settingTable + " SET SettingValue='" + settingValue + "'";
                //sqlText += " WHERE SettingGroup='" + SettingGroup + "' AND SettingName='" + SettingName + "'";
                sqlText += " UPDATE " + settingTable + " SET SettingValue = @settingValue";
                sqlText += " WHERE SettingGroup = @SettingGroup AND SettingName = @SettingName";

                if (!UserInfoVM.IsMainSetting)
                {
                    //sqlText += "  AND UserId='" + UserInfoVM.UserId + "'";
                    sqlText += "  AND UserId = @UserId";
                }

                cmdExist.CommandText = sqlText;


                //BugsBD
                SqlParameter parameter = new SqlParameter("@settingValue", SqlDbType.VarChar, 250);
                parameter.Value = settingValue;
                cmdExist.Parameters.Add(parameter);

                parameter = new SqlParameter("@SettingGroup", SqlDbType.VarChar, 250);
                parameter.Value = SettingGroup;
                cmdExist.Parameters.Add(parameter);

                parameter = new SqlParameter("@SettingName", SqlDbType.VarChar, 250);
                parameter.Value = SettingName;
                cmdExist.Parameters.Add(parameter);

                if (!UserInfoVM.IsMainSetting)
                {
                    parameter = new SqlParameter("@UserId", SqlDbType.VarChar, 250);
                    parameter.Value = UserInfoVM.UserId;
                    cmdExist.Parameters.Add(parameter);
                }


                cmdExist.ExecuteNonQuery();

                #endregion
            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                ////throw new ArgumentNullException("Setting", "SQL:" + sqlText + FieldDelimeter + "Please Update the Setting");

                FileLogger.Log("CommonDAL", "settings", ex.ToString() + "\n" + sqlText);

            }

            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion



        }

        public void settingsUpdateMaster(string SettingGroup, string SettingName, string settingValue, SqlConnection VcurrConn = null
          , SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables
            string sqlText = "";
            string SettingValue = string.Empty;
            DataTable dataTable = new DataTable("SA");
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                sqlText = "  ";
                SqlCommand cmdExist = new SqlCommand(sqlText, currConn, transaction);

                string settingTable = "SettingsMaster";

                //sqlText += " UPDATE " + settingTable + " SET SettingValue='" + settingValue + "'";
                //sqlText += " WHERE SettingGroup='" + SettingGroup + "' AND SettingName='" + SettingName + "'";
                sqlText += " UPDATE " + settingTable + " SET SettingValue = @settingValue";
                sqlText += " WHERE SettingGroup = @SettingGroup AND SettingName = @SettingName";

                //if (!UserInfoVM.IsMainSetting)
                //{
                //    sqlText += "  AND UserId='" + UserInfoVM.UserId + "'";
                //}

                cmdExist.CommandText = sqlText;


                //BugsBD
                SqlParameter parameter = new SqlParameter("@settingValue", SqlDbType.VarChar, 250);
                parameter.Value = settingValue;
                cmdExist.Parameters.Add(parameter);

                parameter = new SqlParameter("@SettingGroup", SqlDbType.VarChar, 250);
                parameter.Value = SettingGroup;
                cmdExist.Parameters.Add(parameter);

                parameter = new SqlParameter("@SettingName", SqlDbType.VarChar, 250);
                parameter.Value = SettingName;
                cmdExist.Parameters.Add(parameter);

                cmdExist.ExecuteNonQuery();

                TransactionCommit(ref Vtransaction, ref transaction, connVM);

                #endregion
            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                ////throw new ArgumentNullException("Setting", "SQL:" + sqlText + FieldDelimeter + "Please Update the Setting");

                TransactionRollBack(ref Vtransaction, ref transaction);

                FileLogger.Log("CommonDAL", "settings", ex.ToString() + "\n" + sqlText);

            }

            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion



        }

        public string settingValue(string settingGroup, string settingName, SysDBInfoVMTemp connVM = null, SqlConnection VcurrConn = null
            , SqlTransaction Vtransaction = null)
        {
            #region Initializ

            string retResults = string.Empty;
            string sqlText = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(settingGroup))
                {
                    throw new ArgumentNullException("settingValue", "Code system not find");
                }
                else if (string.IsNullOrEmpty(settingName))
                {
                    throw new ArgumentNullException("settingValue", "Code system not find");
                }


                #endregion Validation

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Settings

                sqlText = "  ";

                sqlText = " SELECT SettingValue FROM Settings ";
                sqlText += " where ";
                //sqlText += " SettingGroup='" + settingGroup + "' ";
                //sqlText += " and SettingName='" + settingName + "'";
                sqlText += " SettingGroup = @settingGroup";
                sqlText += " and SettingName = @settingName";

                SqlCommand cmdGetLastNBRPriceFromBOM = new SqlCommand(sqlText, currConn, transaction);
                cmdGetLastNBRPriceFromBOM.CommandTimeout = 500;


                //BugsBD
                SqlParameter parameter = new SqlParameter("@settingGroup", SqlDbType.VarChar, 250);
                parameter.Value = settingGroup;
                cmdGetLastNBRPriceFromBOM.Parameters.Add(parameter);

                parameter = new SqlParameter("@settingName", SqlDbType.VarChar, 250);
                parameter.Value = settingName;
                cmdGetLastNBRPriceFromBOM.Parameters.Add(parameter);


                if (cmdGetLastNBRPriceFromBOM.ExecuteScalar() == null)
                {
                    retResults = string.Empty;
                }
                else
                {
                    retResults = (string)cmdGetLastNBRPriceFromBOM.ExecuteScalar();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "settingValue", ex.ToString() + "\n" + sqlText, "settings");

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }



        public string settingsDesktop(string SettingGroup, string SettingName, DataTable dt = null, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables
            string SettingValue = string.Empty;
            #endregion

            #region try

            try
            {
                #region sql statement


                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow[] settingRow = dt.Select("SettingGroup='" + SettingGroup + "' and SettingName='" + SettingName + "'");
                    SettingValue = settingRow[0]["SettingValue"].ToString();
                }
                else
                {
                    DataRow[] settingRow = settingVM.SettingsDTUser.Select("SettingGroup='" + SettingGroup + "' and SettingName='" + SettingName + "'");

                    if (settingRow == null)
                    {
                        settingRow = settingVM.SettingsDT.Select("SettingGroup='" + SettingGroup + "' and SettingName='" + SettingName + "'");
                        SettingValue = settingRow[0]["SettingValue"].ToString();
                    }
                    else
                    {
                        SettingValue = settingRow[0]["SettingValue"].ToString();
                    }
                }
                #endregion

            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                ////FileLogger.Log(SettingGroup, this.GetType().Name, "SettingGroup:" + SettingGroup + Environment.NewLine + "SettingName:" + SettingName + Environment.NewLine + ex.Message + Environment.NewLine + ex.StackTrace);
                FileLogger.Log("CommonDAL", "settingsDesktop", ex.ToString(), "settings");

                SettingValue = string.Empty;
            }

            #endregion
            #region finally
            finally
            {

            }
            #endregion

            return SettingValue;

        }

        public Dictionary<string, string> TypeOfPurchaseVAT()
        {
            Dictionary<string, string> dicVATType = new Dictionary<string, string>();
            if (settingsDesktop("TypeOfPurchaseVAT", "VAT").ToString().ToLower() == "y")
                dicVATType.Add("VAT", "vat");
            if (settingsDesktop("TypeOfPurchaseVAT", "NonVAT").ToString().ToLower() == "y")
                dicVATType.Add("Non VAT", "nonvat");
            if (settingsDesktop("TypeOfPurchaseVAT", "exempted").ToString().ToLower() == "y")
                dicVATType.Add("Exempted", "exempted");
            if (settingsDesktop("TypeOfPurchaseVAT", "fixedvat").ToString().ToLower() == "y")
                dicVATType.Add("Fixed VAT", "fixedvat");
            if (settingsDesktop("TypeOfPurchaseVAT", "otherrate").ToString().ToLower() == "y")
                dicVATType.Add("Other Rate", "otherrate");
            if (settingsDesktop("TypeOfPurchaseVAT", "truncated").ToString().ToLower() == "y")
                dicVATType.Add("Truncated", "truncated");
            if (settingsDesktop("TypeOfPurchaseVAT", "ternover").ToString().ToLower() == "y")
                dicVATType.Add("Ternover", "ternover");
            if (settingsDesktop("TypeOfPurchaseVAT", "unregister").ToString().ToLower() == "y")
                dicVATType.Add("Un Register", "unregister");
            if (settingsDesktop("TypeOfPurchaseVAT", "nonrebate").ToString().ToLower() == "y")
                dicVATType.Add("Non Rebate", "nonrebate");
            if (settingsDesktop("TypeOfPurchaseVAT", "fixedvat").ToString().ToLower() == "y")
                dicVATType.Add("Fixed VAT(Rebate)", "fixedvat(rebate)");
            return dicVATType;
        }

        public Dictionary<string, string> VATReturnPartName()
        {
            Dictionary<string, string> PartName = new Dictionary<string, string>();
            PartName.Add("Part-3: SUPPLY - OUTPUT TAX", "part3");
            PartName.Add("Part-4: SUPPLY - INPPUT TAX", "part4");
            PartName.Add("Part-5: INCREASING ADJUSTMENTS (VAT)", "part5");
            PartName.Add("Part - 6: DECREASING ADJUSTMENTS (VAT)", "part6");
            return PartName;

        }

        public Dictionary<string, string> VATReturnValue(string PartNmae)
        {
            Dictionary<string, string> ReturnValue = new Dictionary<string, string>();
            if (PartNmae == "part3")
            {
                ReturnValue.Add("Value", "LineA");
                ReturnValue.Add("SD", "LineB");
                ReturnValue.Add("VAT", "LineC");

            }
            else if (PartNmae == "part4")
            {
                ReturnValue.Add("Value", "LineA");
                ReturnValue.Add("SD", "LineB");

            }
            else if (PartNmae == "part5")
            {
                ReturnValue.Add("VAT", "LineC");

            }
            else if (PartNmae == "part6")
            {
                ReturnValue.Add("VAT", "LineC");

            }

            return ReturnValue;

        }

        public Dictionary<string, string> TypeOfSaleVAT(bool Export)
        {
            Dictionary<string, string> dicVATType = new Dictionary<string, string>();
            if (Export)
            {
                if (settingsDesktop("TypeOfExportSaleVAT", "Export").ToString().ToLower() == "y")
                    dicVATType.Add("Export", "export");
                if (settingsDesktop("TypeOfExportSaleVAT", "deemexport").ToString().ToLower() == "y")
                    dicVATType.Add("Deem Export", "deemexport");
            }
            else
            {
                if (settingsDesktop("TypeOfLocalSaleVAT", "vat").ToString().ToLower() == "y")
                    dicVATType.Add("VAT", "vat");
                if (settingsDesktop("TypeOfLocalSaleVAT", "nonvat").ToString().ToLower() == "y")
                    dicVATType.Add("Non VAT", "nonvat");
                if (settingsDesktop("TypeOfLocalSaleVAT", "mrprate").ToString().ToLower() == "y")
                    dicVATType.Add("MRP Rate", "mrprate");
                if (settingsDesktop("TypeOfLocalSaleVAT", "fixedvat").ToString().ToLower() == "y")
                    dicVATType.Add("Fixed VAT", "fixedvat");
                if (settingsDesktop("TypeOfLocalSaleVAT", "otherrate").ToString().ToLower() == "y")
                    dicVATType.Add("Other Rate", "otherrate");
                if (settingsDesktop("TypeOfLocalSaleVAT", "retail").ToString().ToLower() == "y")
                    dicVATType.Add("Retail", "retail");
                if (settingsDesktop("TypeOfLocalSaleVAT", "mrprate(sc)").ToString().ToLower() == "y")
                    dicVATType.Add("MRP Rate (SC)", "mrprate(sc)");

                dicVATType.Add("Exempted (80 %)", "Exempted80");

            }

            return dicVATType;
        }

        public Dictionary<string, string> DepositType(string TransactionType)
        {
            Dictionary<string, string> dicDepositType = new Dictionary<string, string>();


            dicDepositType.Add("Select", "Select");
            dicDepositType.Add("Cash", "Cash");
            dicDepositType.Add("Cheque", "Cheque");
            dicDepositType.Add("Fund Transfer", "FundTransfer");
            dicDepositType.Add("Not Deposited", "NotDeposited");

            switch (TransactionType)
            {
                case "Purchase":
                case "Sale":
                    break;
                case "Treasury":
                    dicDepositType.Add("Opening", "Opening");
                    dicDepositType.Add("Opening Adjustment", "OpeningAdjustment");
                    dicDepositType.Add("Closing Balance VAT(18.6)", "ClosingBalanceVAT(18.6)");
                    dicDepositType.Add("Requested Amount For Refund VAT", "RequestedAmountForRefundVAT");

                    break;
                case "SD":
                    dicDepositType.Add("Opening", "Opening");
                    dicDepositType.Add("Closing Balance SD(18.6)", "ClosingBalanceSD(18.6)");
                    dicDepositType.Add("Requested Amount For Refund SD", "RequestedAmountForRefundSD");
                    break;
                default:
                    break;
            }


            return dicDepositType;
        }

        public Dictionary<string, string> AdjustmentType()
        {
            Dictionary<string, string> dicAdjustmentType = new Dictionary<string, string>();

            dicAdjustmentType.Add("Select", "Select");
            dicAdjustmentType.Add("Development Surcharge", "DevelopmentSurcharge");
            dicAdjustmentType.Add("Environment Protection Surcharge", "EnvironmentProtectionSurcharge");
            dicAdjustmentType.Add("Excise Duty", "ExciseDuty");
            dicAdjustmentType.Add("Fine Or Penalty", "FineOrPenalty");
            dicAdjustmentType.Add("Fine Penalty For Non Submission Of Return", "FinePenaltyForNonSubmissionOfReturn");
            dicAdjustmentType.Add("Helth Care Surcharge", "HelthCareSurcharge");
            dicAdjustmentType.Add("ICT Development Surcharge", "ICTDevelopmentSurcharge");
            dicAdjustmentType.Add("Interest On Overed SD", "InterestOnOveredSD");
            dicAdjustmentType.Add("Interest On Overed VAT", "InterestOnOveredVAT");
            dicAdjustmentType.Add("Without Bank Pay", "WithoutBankPay");

            return dicAdjustmentType;
        }

        public Dictionary<string, string> ReportType()
        {
            Dictionary<string, string> dicReportType = new Dictionary<string, string>();

            //dicReportType.Add("Select", "Select");
            dicReportType.Add("VAT6_1_And_6_2", "VAT6_1_And_6_2");
            dicReportType.Add("VAT6_1", "VAT6_1");
            dicReportType.Add("VAT6_2", "VAT6_2");
            dicReportType.Add("VAT6_2_1", "VAT6_2_1");


            return dicReportType;
        }

        public DataTable SettingDataAll(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";
            DataTable settings = new DataTable("MultipleSearch");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                string getSettings =
                      @"SELECT SettingGroup,SettingName,SettingValue  FROM Settings WHERE ActiveStatus='Y' ORDER BY SettingGroup";

                SqlCommand cmd1 = new SqlCommand(getSettings, currConn, transaction);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd1);
                adapter.Fill(settings);
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "SettingDataAll", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "SettingDataAll", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #region finally
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            #endregion

            return settings;

        }

        public string ServerDateTime(SysDBInfoVMTemp connVM = null)
        {
            string result = "19800101";
            SqlConnection currConn = null;
            string sqlText = "";
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                sqlText = @"use master";
                sqlText += @" SELECT CONVERT(VARCHAR(8), SYSDATETIME(), 112)";
                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                result = cmdIdExist.ExecuteScalar().ToString();

            }
            #region Catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "ServerDateTime", ex.ToString() + "\n" + sqlText);
            }
            #endregion
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            return result;

        }

        public string ServerDateWithTime(SysDBInfoVMTemp connVM = null)
        {
            string result = "19800101";
            SqlConnection currConn = null;
            string sqlText = "";
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                sqlText = @"use master";
                sqlText += @" SELECT format(SYSDATETIME(), 'yyyy-MM-dd HH:mm:ss')SysTemDateTime";
                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                result = cmdIdExist.ExecuteScalar().ToString();

            }
            #region Catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "ServerDateWithTime", ex.ToString() + "\n" + sqlText);
            }
            #endregion
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            return result;

        }

        //#endregion

        //#endregion

        #region Methods 01

        public DataTable Select(ParameterVM paramVM, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement


                #region SqlText

                string SelectFields = " * ";

                if (paramVM.selectFields != null && paramVM.selectFields.Length > 0)
                {
                    SelectFields = string.Join(",", paramVM.selectFields);
                }

                sqlText = @"SELECT  " + SelectFields + " From " + paramVM.TableName + paramVM.JoinClause + " WHERE 1=1 ";

                sqlText = sqlText + paramVM.AdditionalWhereClause;

                string cField = "";
                if (paramVM.conditionFields != null && paramVM.conditionValues != null && paramVM.conditionFields.Length == paramVM.conditionValues.Length)
                {
                    for (int i = 0; i < paramVM.conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(paramVM.conditionFields[i]) || string.IsNullOrEmpty(paramVM.conditionValues[i]) || paramVM.conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = paramVM.conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (paramVM.conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlTextParameter += " AND " + paramVM.conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (paramVM.conditionFields[i].Contains(">") || paramVM.conditionFields[i].Contains("<"))
                        {
                            sqlTextParameter += " AND " + paramVM.conditionFields[i] + " @" + cField;

                        }
                        else if (paramVM.conditionFields[i].ToLower().Contains("isnull"))
                        {
                            sqlText += " AND " + "isnull(" + cField + ",'Y')=" + " @" + cField + "";
                        }
                        else
                        {
                            sqlTextParameter += " AND " + paramVM.conditionFields[i] + "= @" + cField;
                        }
                    }
                }


                #endregion SqlText

                if (!string.IsNullOrWhiteSpace(paramVM.OrderBy))
                {
                    sqlTextOrderBy += " order by " + paramVM.OrderBy;
                }

                #region SqlExecution

                sqlText = sqlText + " " + sqlTextParameter + " " + sqlTextOrderBy;


                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (paramVM.conditionFields != null && paramVM.conditionValues != null && paramVM.conditionFields.Length == paramVM.conditionValues.Length)
                {
                    for (int j = 0; j < paramVM.conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(paramVM.conditionFields[j]) || string.IsNullOrEmpty(paramVM.conditionValues[j]) || paramVM.conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = paramVM.conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (paramVM.conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), paramVM.conditionValues[j]);
                        }

                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, paramVM.conditionValues[j]);
                        }
                    }
                }


                da.Fill(dt);

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "Select", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "Select", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public ComboBox ComboBoxLoad(ComboBox comboBox, string tableName, string valueMember, string displayMember, string[] Condition, string OrderType, bool IsAssending = true, bool IsAll = true, SysDBInfoVMTemp connVM = null, bool IsSelect = false)
        {
            //string OrderType="int";
            #region try

            try
            {
                string Assending = IsAssending == true ? "Asc" : "Desc";
                SqlConnection currConn = null;

                SqlDataAdapter sqlAdpt = null;
                System.Data.DataTable dt = new System.Data.DataTable("ComboDt");

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                    currConn.Open();


                string sql = "";
                sql = sql + @"  select * from( ";
                sql = sql + @" select distinct RTRIM( LTRIM( " + valueMember + ")) valueMember, RTRIM( LTRIM( " + displayMember + ")) displayMember  from " + tableName + "";
                if (Condition.Count() > 0)
                    sql = sql + @" where ";
                for (int i = 0; i < Condition.Length; i++)
                {
                    if (i > 0)
                        sql = sql + @" and ";
                    sql = sql + Condition[i];
                }
                sql = sql + @"  ) as a  order by convert(" + OrderType + ", displayMember) " + Assending;


                sqlAdpt = new SqlDataAdapter(sql, currConn);
                sqlAdpt.Fill(dt);

                if (IsAll)
                {
                    DataRow dr = dt.NewRow();
                    dr["valueMember"] = "0";
                    dr["displayMember"] = "= All =";
                    dt.Rows.InsertAt(dr, 0);
                }

                if (IsSelect)
                {
                    DataRow dr = dt.NewRow();
                    dr["valueMember"] = "0";
                    dr["displayMember"] = "Select";
                    dt.Rows.InsertAt(dr, 0);
                }


                if (dt.Rows.Count > 0)
                {
                    comboBox.DataSource = dt;
                    comboBox.DisplayMember = "displayMember";// displayMember.Replace("[", "").Replace("]", "").Trim();
                    comboBox.ValueMember = "valueMember";// valueMember.Trim();
                }

                return comboBox;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                //Get a StackTrace object for the exception
                StackTrace st = new StackTrace(ex, true);

                //Get the first stack frame
                StackFrame frame = st.GetFrame(0);

                //Get the file name
                string fileName = frame.GetFileName();

                //Get the method name
                string methodName = frame.GetMethod().Name;

                //Get the line number from the stack frame
                int line = frame.GetFileLineNumber();

                //Get the column number
                int col = frame.GetFileColumnNumber();


                MessageBox.Show("There have some error Please Contact Administrator ");
                FileLogger.Log("Error", DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss"), ex.Message.ToString());
            }
            #endregion

            return comboBox;

        }

        public ComboBox ComboBoxLoadNew(ComboBox comboBox, string Condition, bool IsAll = true, SysDBInfoVMTemp connVM = null)
        {
            //string OrderType="int";
            #region try

            try
            {
                SqlConnection currConn = null;

                SqlDataAdapter sqlAdpt = null;
                System.Data.DataTable dt = new System.Data.DataTable("ComboDt");



                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                    currConn.Open();


                string sql = "";
                sql = sql + @"Select* from ( ";
                sql += @"SELECT UOM FROM Products";
                sql += @" Where ItemNo =@Condition ";
                sql += @" Union ";
                sql += @"SELECT(CASE
                        WHEN UOM2 IS NULL THEN UOM
                        ELSE UOM2
	                    END) FROM Products";
                sql += @" Where ItemNo =@Condition ";
                sql += @")as UOM order by UOM DESC ";



                SqlCommand cmd = new SqlCommand(sql, currConn);
                cmd.Parameters.AddWithValue("@Condition", Condition);


                sqlAdpt = new SqlDataAdapter(cmd);

                sqlAdpt.Fill(dt);

                //if (IsAll)
                //{
                //    DataRow dr = dt.NewRow();
                //    //dr["valueMember"] = "0";
                //    //dr["displayMember"] = "= Select =";
                //    dt.Rows.InsertAt(dr, 0);
                //}


                if (dt.Rows.Count > 0)
                {
                    comboBox.DataSource = dt;
                    comboBox.DisplayMember = "UOM";// displayMember.Replace("[", "").Replace("]", "").Trim();
                    comboBox.ValueMember = "UOM";

                }

                return comboBox;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                //Get a StackTrace object for the exception
                StackTrace st = new StackTrace(ex, true);

                //Get the first stack frame
                StackFrame frame = st.GetFrame(0);

                //Get the file name
                string fileName = frame.GetFileName();

                //Get the method name
                string methodName = frame.GetMethod().Name;

                //Get the line number from the stack frame
                int line = frame.GetFileLineNumber();

                //Get the column number
                int col = frame.GetFileColumnNumber();


                MessageBox.Show("There have some error Please Contact Administrator ");
                FileLogger.Log("Error", DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss"), ex.Message.ToString());
            }
            #endregion

            return comboBox;

        }

        public string[] GenericUpdate(string tableName, string[] fields, string[] values, string[] CFields, string[] CVals, SysDBInfoVMTemp connVM = null)
        {
            #region variables
            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[1] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            int nextId = 0;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();

                transaction = currConn.BeginTransaction("InsertToCurrencyInformation");

                #endregion open connection and transaction

                #region Update
                sqlText = "";
                sqlText = "UPDATE " + tableName + " SET ";
                if (fields.Length == values.Length)
                {
                    for (int i = 0; i < fields.Length; i++)
                    {
                        if (i == 0 && !string.IsNullOrWhiteSpace(fields[0]))
                        {
                            sqlText += fields[i] + " = @" + fields[i];
                            continue;
                        }
                        if (string.IsNullOrWhiteSpace(fields[i]) || string.IsNullOrWhiteSpace(values[i]))
                        {
                            continue;
                        }
                        else
                        {
                            sqlText += " ," + fields[i] + " = @" + fields[i];
                        }
                    }
                }
                ////adding conditions to sql text
                sqlText += " where 1=1 ";
                for (int k = 0; k < CFields.Length; k++)
                {
                    if (string.IsNullOrWhiteSpace(CFields[k]) || string.IsNullOrWhiteSpace(CVals[k]))
                    {
                        continue;
                    }
                    sqlText += " and " + CFields[k] + "=@c" + CFields[k];
                }

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                ////providing normal parameters
                if (fields.Length == values.Length)
                {
                    for (int j = 0; j < fields.Length; j++)
                    {
                        if (string.IsNullOrWhiteSpace(fields[j]) || string.IsNullOrWhiteSpace(values[j]))
                        {
                            continue;
                        }
                        cmdUpdate.Parameters.AddWithValue("@" + fields[j], values[j]);
                    }
                }
                ////providing conditional parameters
                for (int l = 0; l < CFields.Length; l++)
                {
                    if (string.IsNullOrWhiteSpace(CFields[l]) || string.IsNullOrWhiteSpace(CVals[l]))
                    {
                        continue;
                    }
                    cmdUpdate.Parameters.AddWithValue("@c" + CFields[l], CVals[l]);
                }
                transResult = (int)cmdUpdate.ExecuteNonQuery();

                #endregion Update Currency Information

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Currency Information successfully Updated";
                        retResults[2] = "Generic Method";

                    }

                }

                #endregion Commit
            }
            #endregion

            #region Catch
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.Split(new[] { '\r', '\n' }).FirstOrDefault(); //catch ex
                retResults[2] = nextId.ToString(); //catch ex

                transaction.Rollback();

                ////FileLogger.Log(MethodBase.GetCurrentMethod().Name, this.GetType().Name, ex.Message + Environment.NewLine + ex.StackTrace + Environment.NewLine + sqlText);

                FileLogger.Log("CommonDAL", "GenericUpdate", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            #endregion
            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion

            return retResults;
        }

        public DataTable GenericSelection(string tableName, string databaseName, string[] cFields = null, string[] cVals = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            DataTable resultTable = new DataTable();
            SqlConnection connection = new SqlConnection();
            string sqlText = "";

            #endregion

            #region try

            try
            {
                #region connection

                connection = new DBSQLConnection().GetConnectionForLogin(databaseName);
                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }
                #endregion

                #region old strategy


                //switch (tableName)
                //{
                //    case "Customers":
                //        resultTable = new CustomerDAL().SelectAll(null, null, null, connection, null, true);
                //        break;
                //    case "ProductCategories":
                //        resultTable = new ProductCategoryDAL().SelectAll(0, null, null, connection, null, true);
                //        break;
                //    case "Products":
                //        resultTable = new ProductDAL().SearchProductDT(
                //    ""//txtItemNo.Text.Trim()
                //    , ""// txtProductName.Text.Trim()
                //    , ""//txtCategoryID.Text.Trim()
                //    , ""//category
                //    , ""//uom
                //    , ""//type
                //    , ""//txtSerialNo.Text.Trim()
                //    , ""//txtHSCodeNo.Text.Trim()
                //    , ""//activeStatus
                //    , "" //trading
                //    , ""//
                //    , ""//txtPCode.Text.Trim()
                //    , databaseName);
                //        break;
                //    case "VendorGroups":
                //        resultTable = new VendorGroupDAL().SelectAll(0,null,null,connection,null,true);
                //        break;
                //    case "Vendors":
                //        resultTable = new VendorDAL().SelectAll(0, null, null, connection, null, true);
                //        break;
                //    case "CustomerGroups":
                //        resultTable = new CustomerGroupDAL().SelectAll(0, null, null, connection, null, true);
                //        break;
                //    default:
                //        break;
                //}
                #endregion

                #region sqlText

                sqlText = "select * from " + tableName + " where 1=1 ";
                #endregion

                #region conditional statement

                if (cFields != null && cVals != null && cFields.Length == cVals.Length)
                {
                    for (int i = 0; i < cFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(cFields[i]) || string.IsNullOrEmpty(cVals[i]))
                        {
                            continue;
                        }
                        var cField = cFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (cFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + cFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (cFields[i].Contains(">") || cFields[i].Contains("<"))
                        {
                            sqlText += " AND " + cFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + cFields[i] + "= @" + cField;
                        }
                    }
                }
                #endregion

                #region SqlCommand

                SqlCommand objCommand = new SqlCommand();
                objCommand.Connection = connection;
                objCommand.CommandText = sqlText;

                #endregion

                #region conditional execution
                if (cFields != null && cVals != null && cFields.Length == cVals.Length)
                {
                    for (int j = 0; j < cFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(cFields[j]) || string.IsNullOrEmpty(cVals[j]))
                        {
                            continue;
                        }
                        var cField = cFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (cFields[j].ToLower().Contains("like"))
                        {
                            objCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), cVals[j]);
                        }
                        else
                        {
                            objCommand.Parameters.AddWithValue("@" + cField, cVals[j]);
                        }
                    }
                }
                #endregion

                #region Sql Data Adapter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommand);
                dataAdapter.Fill(resultTable);
                #endregion

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "GenericSelection", ex.ToString());

                throw;
            }
            #endregion

            #region finally

            finally
            {
                if (connection.State == ConnectionState.Open)
                {
                    connection.Close();
                }
            }
            #endregion

            return resultTable;
        }

        public DataTable GenericSelectionNotSync(string tableName, string databaseName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            DataTable resultTable = new DataTable();
            SqlConnection connection = new SqlConnection();
            string sqlText = "";

            #endregion

            #region try

            try
            {
                connection = new DBSQLConnection().GetConnectionForLogin(databaseName);
                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }
                sqlText = "select * from " + tableName + " where isnull(IsSynced,'N')!='Y'";
                SqlCommand objCommand = new SqlCommand();
                objCommand.Connection = connection;
                objCommand.CommandText = sqlText;
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommand);
                dataAdapter.Fill(resultTable);

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "GenericSelectionNotSync", ex.ToString() + "\n" + sqlText);

                throw;
            }
            #endregion

            #region finally

            finally
            {
                if (connection.State == ConnectionState.Open)
                {
                    connection.Close();
                }
            }
            #endregion

            return resultTable;
        }

        public string[] UpdateIsVATComplete(String TableName, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                currConn.ChangeDatabase("VATImport_DB");
                #endregion open connection and transaction
                #region Update
                sqlText = "";
                sqlText += "update " + TableName + " set IsVATComplete='Y'";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;

                var transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult < 0)
                {
                    throw new Exception("Could not set Is VAT complete to 'Y'");
                }
                #endregion
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Synchronized Successfully.";
                retResults[2] = "";
                #endregion SuccessResult
            }
            #endregion try

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("CommonDAL", "UpdateIsVATComplete", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        public string[] Synchronize(String TableName, DataTable dt, string IdName, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            string updateSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion
            #region Try
            try
            {
                #region Validation
                #endregion Validation
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region Save

                if (dt != null && dt.Rows.Count > 0)
                {
                    #region INSERT SQL Query

                    ////sqlText += @" INSERT INTO GLCustomers(Id,Code) VALUES (@Id,@Code)";

                    string insertingFields = "";
                    string insertingParameters = "";
                    //////string insertingValues = "";
                    foreach (DataColumn col in dt.Columns)
                    {
                        insertingFields += col.ColumnName + ",";
                        insertingParameters += "@" + col.ColumnName + ",";
                    }
                    insertingFields = insertingFields.Trim(',');
                    insertingParameters = insertingParameters.Trim(',');

                    insertSQLText = "  ";

                    insertSQLText += @" INSERT INTO " + TableName + "(" + insertingFields + ") VALUES (" + insertingParameters + ")";

                    #endregion
                    #region UPDATE SQL Query

                    string updatingFieldsParameters = "";
                    //int i = 0;
                    foreach (DataColumn col in dt.Columns)
                    {
                        //i++;
                        //if (i == 1)
                        //{
                        //    continue;
                        //}
                        updatingFieldsParameters += col.ColumnName + "=@" + col.ColumnName + ",";
                    }
                    updatingFieldsParameters = updatingFieldsParameters.Trim(',');

                    updateSQLText = "  ";

                    updateSQLText = @"UPDATE " + TableName + " SET  " + updatingFieldsParameters + " WHERE 1=1 AND " + IdName + "=@" + IdName;

                    #endregion
                    #region INSERT/UPDATE

                    foreach (DataRow dr in dt.Rows)
                    {
                        bool exist = false;
                        exist = CheckExistence(IdName, dr[IdName].ToString(), TableName, currConn, transaction, connVM);

                        if (exist == false)
                        {
                            #region Data Insert
                            {
                                SqlCommand cmdInsert = new SqlCommand(insertSQLText, currConn, transaction);
                                foreach (DataColumn col in dt.Columns)
                                {
                                    cmdInsert.Parameters.AddWithValue("@" + col.ColumnName, dr[col.ColumnName] ?? Convert.DBNull);
                                }
                                cmdInsert.ExecuteNonQuery();
                            }
                            #endregion
                        }
                        else if (exist == true)
                        {
                            if (TableName == "Products")
                            {
                                #region try generic update


                                //string[] fieldNames = new string[] { "ProductCode"
                                //                                    , "ProductName"
                                //                                    , "ProductDescription"
                                //                                    , "CategoryID"
                                //                                    , "UOM"
                                //                                    , "CostPrice"
                                //                                    , "SalesPrice"
                                //                                    , "NBRPrice"
                                //                                    , "OpeningBalance"
                                //                                    , "SerialNo"
                                //                                    , "HSCodeNo"
                                //                                    , "VATRate"
                                //                                    , "Comments"
                                //                                    , "SD"
                                //                                    , "QuantityInHand"
                                //                                    , "OpeningDate"
                                //                                    , "RebatePercent"
                                //                                    , "TVBRate"
                                //                                    , "CDRate"
                                //                                    , "RDRate"
                                //                                    , "TVARate"
                                //                                    , "ATVRate"
                                //                                    , "ActiveStatus"
                                //                                    , "OpeningTotalCost"
                                //                                    , "TollProduct"
                                //                                    , "VATRate2"
                                //                                    , "VDSRate"
                                //                                    , "IsArchive"
                                //                                    , "IsVATRate"
                                //                                    , "IsSDRate"
                                //                                    , "IsExempted"
                                //                                    , "IsZeroVAT" };
                                //string[] fieldValues = new string[] { dr["ProductCode"].ToString()
                                //                                    , dr["ProductName"].ToString()
                                //                                    , dr["ProductDescription"].ToString()
                                //                                    , dr["CategoryID"].ToString()
                                //                                    , dr["UOM"].ToString()
                                //                                    , dr["CostPrice"].ToString()
                                //                                    , dr["SalesPrice"].ToString()
                                //                                    , dr["NBRPrice"].ToString()
                                //                                    , dr["OpeningBalance"].ToString()
                                //                                    , dr["SerialNo"].ToString()
                                //                                    , dr["HSCodeNo"].ToString()
                                //                                    , dr["VATRate"].ToString()
                                //                                    , dr["Comments"].ToString()
                                //                                    , dr["SD"].ToString()
                                //                                    , dr["QuantityInHand"].ToString()
                                //                                    , dr["OpeningDate"].ToString()
                                //                                    , dr["RebatePercent"].ToString()
                                //                                    , dr["TVBRate"].ToString()
                                //                                    , dr["CDRate"].ToString()
                                //                                    , dr["RDRate"].ToString()
                                //                                    , dr["TVARate"].ToString()
                                //                                    , dr["ATVRate"].ToString()
                                //                                    , dr["ActiveStatus"].ToString()
                                //                                    , dr["OpeningTotalCost"].ToString()
                                //                                    , dr["TollProduct"].ToString()
                                //                                    , dr["VATRate2"].ToString()
                                //                                    , dr["VDSRate"].ToString()
                                //                                    , dr["IsArchive"].ToString()
                                //                                    , dr["IsVATRate"].ToString()
                                //                                    , dr["IsSDRate"].ToString()
                                //                                    , dr["IsExempted"].ToString()
                                //                                    , dr["IsZeroVAT" ].ToString()  };

                                //string[] cFields = new string[] {"ItemNo" };
                                //string[] cVals = new string[] { dr["ItemNo"].ToString()};
                                //string[] upresult = GenericUpdate("Products", fieldNames, fieldValues, cFields, cVals);
                                #endregion
                                #region Model binding approach
                                //string itemNo=dr["ItemNo"].ToString();
                                //ProductVM pVm = new ProductDAL().SelectAll(itemNo, null, null, currConn, transaction, null).FirstOrDefault();
                                //pVm.ProductCode=dr["ProductCode"].ToString();
                                //pVm.ProductName=dr["ProductName"].ToString();
                                //pVm.ProductDescription=dr["ProductDescription"].ToString();
                                //pVm.CategoryID=dr["CategoryID"].ToString();
                                //pVm.UOM=dr["UOM"].ToString();
                                //pVm.CostPrice = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["CostPrice"].ToString()) ? "0" : dr["CostPrice"].ToString());
                                //pVm.SalesPrice = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["SalesPrice"].ToString()) ? "0" : dr["SalesPrice"].ToString());
                                //pVm.NBRPrice = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["NBRPrice"].ToString()) ? "0" : dr["NBRPrice"].ToString());
                                //pVm.TollCharge = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["TollCharge"].ToString()) ? "0" : dr["TollCharge"].ToString());
                                //pVm.OpeningBalance = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["OpeningBalance"].ToString()) ? "0" : dr["OpeningBalance"].ToString());
                                //pVm.SerialNo=dr["SerialNo"].ToString();
                                //pVm.HSCodeNo=dr["HSCodeNo"].ToString();
                                //pVm.VATRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["VATRate"].ToString()) ? "0" : dr["VATRate"].ToString());
                                //pVm.Comments=dr["Comments"].ToString();
                                //pVm.SD = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["SD"].ToString()) ? "0" : dr["SD"].ToString());
                                //pVm.Trading=dr["Trading"].ToString();
                                //pVm.TradingMarkUp = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["TradingMarkUp"].ToString()) ? "0" : dr["TradingMarkUp"].ToString());
                                //pVm.NonStock=dr["NonStock"].ToString();
                                //pVm.OpeningDate=dr["OpeningDate"].ToString();
                                //pVm.RebatePercent = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["RebatePercent"].ToString()) ? "0" : dr["RebatePercent"].ToString());
                                //pVm.TVBRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["TVBRate"].ToString()) ? "0" : dr["TVBRate"].ToString());
                                //pVm.CnFRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["CnFRate"].ToString()) ? "0" : dr["CnFRate"].ToString());
                                //pVm.CDRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["CDRate"].ToString()) ? "0" : dr["CDRate"].ToString());
                                //pVm.RDRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["RDRate"].ToString()) ? "0" : dr["RDRate"].ToString());
                                //pVm.AITRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["AITRate"].ToString()) ? "0" : dr["AITRate"].ToString()); 
                                //pVm.TVARate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["TVARate"].ToString()) ? "0" : dr["TVARate"].ToString());
                                //pVm.ATVRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["ATVRate"].ToString()) ? "0" : dr["ATVRate"].ToString());
                                //pVm.ActiveStatus=dr["ActiveStatus"].ToString();
                                //pVm.CreatedBy = dr["CreatedBy"].ToString();
                                //pVm.CreatedOn = dr["CreatedOn"].ToString();
                                //pVm.LastModifiedBy = dr["LastModifiedBy"].ToString();
                                //pVm.LastModifiedOn = dr["LastModifiedOn"].ToString();
                                //pVm.OpeningTotalCost = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["OpeningTotalCost"].ToString()) ? "0" : dr["OpeningTotalCost"].ToString());
                                //pVm.Banderol=dr["Banderol"].ToString();
                                //pVm.TollProduct=dr["TollProduct"].ToString();
                                //pVm.VATRate2 = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["VATRate2"].ToString()) ? "0" : dr["VATRate2"].ToString());
                                //pVm.VDSRate = Convert.ToDecimal(string.IsNullOrWhiteSpace(dr["VDSRate"].ToString()) ? "0" : dr["VDSRate"].ToString());
                                //pVm.IsExempted=dr["IsExempted"].ToString();
                                //pVm.IsZeroVAT=dr["IsZeroVAT"].ToString();
                                //var updateResults = new ProductDAL().UpdateProduct(pVm, new List<TrackingVM>(), null);
                                //if (updateResults[0].ToLower() != "success")
                                //{
                                //    throw new Exception();
                                //}
                                #endregion
                                #region update sql text

                                string productSql = "update Products set ";
                                productSql += " ProductCode       =@ProductCode";
                                productSql += " ,ProductName       =@ProductName";
                                productSql += " ,ProductDescription=@ProductDescription";
                                productSql += " ,CategoryID        =@CategoryID";
                                productSql += " ,UOM               =@UOM";
                                productSql += " ,CostPrice         =@CostPrice";
                                productSql += " ,SalesPrice        =@SalesPrice";
                                productSql += " ,NBRPrice          =@NBRPrice";
                                productSql += " ,ReceivePrice      =@ReceivePrice";
                                productSql += " ,IssuePrice        =@IssuePrice";
                                productSql += " ,TenderPrice       =@TenderPrice";
                                productSql += " ,ExportPrice       =@ExportPrice";
                                productSql += " ,InternalIssuePrice=@InternalIssuePrice";
                                productSql += " ,TollIssuePrice    =@TollIssuePrice";
                                productSql += " ,TollCharge        =@TollCharge";
                                productSql += " ,OpeningBalance    =@OpeningBalance";
                                productSql += " ,SerialNo          =@SerialNo";
                                productSql += " ,HSCodeNo          =@HSCodeNo";
                                productSql += " ,VATRate           =@VATRate";
                                productSql += " ,Comments          =@Comments";
                                productSql += " ,SD                =@SD";
                                productSql += " ,PacketPrice       =@PacketPrice";
                                productSql += " ,Trading           =@Trading";
                                productSql += " ,TradingMarkUp     =@TradingMarkUp";
                                productSql += " ,NonStock          =@NonStock";
                                productSql += " ,QuantityInHand    =@QuantityInHand";
                                productSql += " ,OpeningDate       =@OpeningDate";
                                productSql += " ,RebatePercent     =@RebatePercent";
                                productSql += " ,TVBRate           =@TVBRate";
                                productSql += " ,CnFRate           =@CnFRate";
                                productSql += " ,InsuranceRate     =@InsuranceRate";
                                productSql += " ,CDRate            =@CDRate";
                                productSql += " ,RDRate            =@RDRate";
                                productSql += " ,AITRate           =@AITRate";
                                productSql += " ,TVARate           =@TVARate";
                                productSql += " ,ATVRate           =@ATVRate";
                                productSql += " ,ActiveStatus      =@ActiveStatus";
                                productSql += " ,CreatedBy         =@CreatedBy";
                                productSql += " ,CreatedOn         =@CreatedOn";
                                productSql += " ,LastModifiedBy    =@LastModifiedBy";
                                productSql += " ,LastModifiedOn    =@LastModifiedOn";
                                productSql += " ,OpeningTotalCost  =@OpeningTotalCost";
                                productSql += " ,Banderol          =@Banderol";
                                productSql += " ,TollProduct       =@TollProduct";
                                productSql += " ,VATRate2          =@VATRate2";
                                productSql += " ,VDSRate           =@VDSRate";
                                productSql += " ,IsArchive         =@IsArchive";
                                productSql += " ,IsVATRate         =@IsVATRate";
                                productSql += " ,IsSDRate          =@IsSDRate";
                                productSql += " ,IsExempted        =@IsExempted";
                                productSql += " ,IsZeroVAT         =@IsZeroVAT";
                                productSql += " where ItemNo       =@ItemNo";
                                #endregion
                                SqlCommand cmdUpdate = new SqlCommand(productSql, currConn, transaction);
                                #region parameters

                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ProductCode", dr["ProductCode"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ProductName", dr["ProductName"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ProductDescription", dr["ProductDescription"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CategoryID", dr["CategoryID"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOM", dr["UOM"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CostPrice", dr["CostPrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SalesPrice", dr["SalesPrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@NBRPrice", dr["NBRPrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceivePrice", dr["ReceivePrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IssuePrice", dr["IssuePrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TenderPrice", dr["TenderPrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ExportPrice", dr["ExportPrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InternalIssuePrice", dr["InternalIssuePrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TollIssuePrice", dr["TollIssuePrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TollCharge", dr["TollCharge"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@OpeningBalance", dr["OpeningBalance"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SerialNo", dr["SerialNo"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@HSCodeNo", dr["HSCodeNo"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRate", dr["VATRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", dr["Comments"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SD", dr["SD"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PacketPrice", dr["PacketPrice"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Trading", dr["Trading"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TradingMarkUp", dr["TradingMarkUp"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@NonStock", dr["NonStock"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@QuantityInHand", dr["QuantityInHand"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@OpeningDate", dr["OpeningDate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RebatePercent", dr["RebatePercent"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVBRate", dr["TVBRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CnFRate", dr["CnFRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InsuranceRate", dr["InsuranceRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CDRate", dr["CDRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RDRate", dr["RDRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@AITRate", dr["AITRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVARate", dr["TVARate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ATVRate", dr["ATVRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ActiveStatus", dr["ActiveStatus"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", dr["CreatedBy"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", dr["CreatedOn"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", dr["LastModifiedBy"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", dr["LastModifiedOn"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@OpeningTotalCost", dr["OpeningTotalCost"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Banderol", dr["Banderol"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TollProduct", dr["TollProduct"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRate2", dr["VATRate2"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VDSRate", dr["VDSRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsArchive", dr["IsArchive"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsVATRate", dr["IsVATRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsSDRate", dr["IsSDRate"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsExempted", dr["IsExempted"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsZeroVAT", dr["IsZeroVAT"]);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNo", dr["ItemNo"]);
                                #endregion

                                cmdUpdate.ExecuteNonQuery();

                            }
                            else
                            {
                                SqlCommand cmdUpdate = new SqlCommand(updateSQLText, currConn, transaction);
                                foreach (DataColumn col in dt.Columns)
                                {
                                    cmdUpdate.Parameters.AddWithValue("@" + col.ColumnName, dr[col.ColumnName] ?? Convert.DBNull);
                                }
                                cmdUpdate.ExecuteNonQuery();
                            }
                        }
                    }
                    #endregion
                }
                else
                {
                    retResults[1] = "Found No Data";
                    throw new ArgumentNullException(retResults[1], "");
                }
                #endregion Save
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Synchronized Successfully.";
                retResults[2] = "";
                #endregion SuccessResult
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("CommonDAL", "Synchronize", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        public string[] GenericInsert(String TableName, DataTable dt, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, bool id = true, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region Save

                if (dt != null && dt.Rows.Count > 0)
                {
                    #region INSERT SQL Query
                    if (id)
                    {
                        dt.Columns.Remove("Id");
                    }
                    string insertingFields = "";
                    string insertingParameters = "";
                    foreach (DataColumn col in dt.Columns)
                    {
                        insertingFields += col.ColumnName + ",";
                        insertingParameters += "@" + col.ColumnName + ",";
                    }
                    insertingFields = insertingFields.Trim(',');
                    insertingParameters = insertingParameters.Trim(',');

                    insertSQLText = "  ";

                    insertSQLText += @" INSERT INTO " + TableName + "(" + insertingFields + ") VALUES (" + insertingParameters + ")";

                    #endregion

                    #region INSERT

                    foreach (DataRow dr in dt.Rows)
                    {
                        #region Data Insert
                        {
                            SqlCommand cmdInsert = new SqlCommand(insertSQLText, currConn, transaction);
                            foreach (DataColumn col in dt.Columns)
                            {
                                cmdInsert.Parameters.AddWithValue("@" + col.ColumnName, dr[col.ColumnName] ?? Convert.DBNull);
                            }
                            cmdInsert.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    #endregion
                }
                else
                {
                    retResults[1] = "Found No Data";
                    throw new ArgumentNullException(retResults[1], "");
                }
                #endregion Save
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Synchronized Successfully.";
                retResults[2] = "";
                #endregion SuccessResult
            }
            #endregion try

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("CommonDAL", "GenericInsert", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        public string[] BulkInsert(string tableName, DataTable data, SqlConnection VcurrConn = null,
            SqlTransaction Vtransaction = null, int batchSize = 10000,
            SqlRowsCopiedEventHandler rowsCopiedCallBack = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initialize
            string sqlText = "";

            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                List<ColumnDetails> columnDetails = ValidateColumnNames(tableName, data, currConn, transaction);

                using (var sqlBulkCopy = new SqlBulkCopy(currConn, SqlBulkCopyOptions.Default, transaction))
                {
                    sqlBulkCopy.BulkCopyTimeout = 0;
                    sqlBulkCopy.DestinationTableName = tableName;

                    if (batchSize > 0)
                        sqlBulkCopy.BatchSize = batchSize;

                    if (rowsCopiedCallBack != null)
                    {
                        sqlBulkCopy.NotifyAfter = 500;
                        sqlBulkCopy.SqlRowsCopied += rowsCopiedCallBack;
                    }

                    foreach (DataColumn column in data.Columns)
                    {
                        sqlBulkCopy.ColumnMappings.Add(column.ColumnName, column.ColumnName);
                    }

                    sqlBulkCopy.WriteToServer(data);
                }

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Imported Successfully.";
                retResults[2] = "";
                #endregion SuccessResult
            }
            #endregion

            #region Catch and Finally
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "BulkInsert", ex.ToString() + "\n" + sqlText);

                //if (ex.Message.Contains("Received an invalid column length from the bcp client for colid"))
                //{
                //    string errorMessage = GetBulkCopyColumnException(ex, sqlBulkCopy);
                //    Exception exInvlidColumn = new Exception(errorMessage, ex);
                //}

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            #region Results
            return retResults;
            #endregion
        }

        private List<ColumnDetails> ValidateColumnNames(string tableName, DataTable data, SqlConnection currConn, SqlTransaction transaction)
        {
            if (tableName.Contains("#"))
            {
                return new List<ColumnDetails>();
            }


            string sqlText = @"SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = N'" + tableName + "'";
            ;

            SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
            DataTable dtcolumnNames = new DataTable();
            adapter.Fill(dtcolumnNames);

            List<ColumnDetails> columnDetails = dtcolumnNames.ToList<ColumnDetails>();

            foreach (DataColumn dataColumn in data.Columns)
            {
                ColumnDetails vm = columnDetails.SingleOrDefault(x => x.COLUMN_NAME == dataColumn.ColumnName);

                if (vm == null)
                {
                    throw new Exception(
                        "'" + dataColumn.ColumnName + "' Column Does Not Match With the Given Table");
                }
            }

            return columnDetails;
        }

        public string[] BulkInsertOracle(string TableName, DataTable dataTable, DataTable BranchFrofile, OracleConnection VcurrConn = null,
            OracleTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initialize
            string sqlText = "";

            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            OracleConnection currConn = null;
            OracleTransaction transaction = null;

            #endregion

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDBHConnection(BranchFrofile); ;
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                //if (transaction == null)
                //{
                //    transaction = currConn.BeginTransaction();
                //}
                #endregion open connection and transaction


                using (OracleBulkCopy bulkCopy = new OracleBulkCopy(currConn))
                {
                    bulkCopy.DestinationTableName = TableName;

                    foreach (DataColumn column in dataTable.Columns)
                    {
                        bulkCopy.ColumnMappings.Add(column.ColumnName, column.ColumnName);
                    }

                    bulkCopy.WriteToServer(dataTable);
                }

                #region Commit
                //if (Vtransaction == null)
                //{
                //    if (transaction != null)
                //    {
                //        transaction.Commit();
                //    }
                //}
                #endregion Commit
                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Imported Successfully.";
                retResults[2] = "";
                #endregion SuccessResult
            }
            #region Catch and Finally
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "BulkInsertOracle", ex.ToString() + "\n" + sqlText);

                //if (ex.Message.Contains("Received an invalid column length from the bcp client for colid"))
                //{
                //    string errorMessage = GetBulkCopyColumnException(ex, sqlBulkCopy);
                //    Exception exInvlidColumn = new Exception(errorMessage, ex);
                //}

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            #region Results
            return retResults;
            #endregion
        }

        private string GetBulkCopyColumnException(Exception ex, SqlBulkCopy bulkcopy, SysDBInfoVMTemp connVM = null)
        {
            string message = string.Empty;
            if (ex.Message.Contains("Received an invalid column length from the bcp client for colid"))
            {
                string pattern = @"\d+";
                Match match = Regex.Match(ex.Message.ToString(), pattern);
                var index = Convert.ToInt32(match.Value) - 1;

                FieldInfo fi = typeof(SqlBulkCopy).GetField("_sortedColumnMappings", BindingFlags.NonPublic | BindingFlags.Instance);
                var sortedColumns = fi.GetValue(bulkcopy);
                var items = (Object[])sortedColumns.GetType().GetField("_items", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(sortedColumns);

                FieldInfo itemdata = items[index].GetType().GetField("_metadata", BindingFlags.NonPublic | BindingFlags.Instance);
                var metadata = itemdata.GetValue(items[index]);
                var column = metadata.GetType().GetField("column", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetValue(metadata);
                var length = metadata.GetType().GetField("length", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetValue(metadata);
                message = (String.Format("Column: {0} contains data with a length greater than: {1}", column, length));
            }
            return message;
        }
        public string[] BomSynchronize(DataTable dtBOMs, DataTable dtBOMRaws, DataTable dtBOMOverhead, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion
            #region try

            try
            {
                #region Open connection transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion
                retResults = Synchronize("BOMs", dtBOMs, "BOMId", currConn, transaction, connVM);
                if (retResults[0] != "Success")
                {
                    throw new Exception();
                }
                retResults = Synchronize("BOMRaws", dtBOMRaws, "BOMRawId", currConn, transaction, connVM);
                if (retResults[0] != "Success")
                {
                    throw new Exception();
                }
                retResults = Synchronize("BOMCompanyOverhead", dtBOMOverhead, "BOMOverHeadId", currConn, transaction, connVM);
                if (retResults[0] != "Success")
                {
                    throw new Exception();
                }
                #region commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("CommonDAL", "BomSynchronize", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion

            #region Results
            return retResults;
            #endregion
        }

        public string[] TransactionSync(string TableName, DataSet ds, string loadedDatabase, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region Open connection transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion
                #region Purchase
                if (TableName == "PurchaseInvoiceHeaders")
                {
                    retResults = GenericInsert("PurchaseInvoiceHeaders", ds.Tables["PurchaseInvoiceHeaders"], currConn, transaction, true, connVM);
                    if (retResults[0] == "Success")
                    {
                        retResults = GenericInsert("PurchaseInvoiceDetails", ds.Tables["PurchaseInvoiceDetails"], currConn, transaction, true, connVM);
                        if (retResults[0] == "Success")
                        {
                            sqlText = "";
                            sqlText += @"update PurchaseInvoiceHeaders set IsSynced='Y';
                                        update PurchaseInvoiceDetails set IsSynced='Y';";
                            currConn.ChangeDatabase(loadedDatabase);
                            SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn, transaction);
                            int result = cmdUpdate.ExecuteNonQuery();
                            if (result <= 0)
                            {
                                throw new Exception();
                            }
                        }
                    }

                }
                #endregion
                else if (TableName == "SalesInvoiceHeaders")
                {
                    retResults = GenericInsert("SalesInvoiceHeaders", ds.Tables["SalesInvoiceHeaders"], currConn, transaction, true, connVM);
                    if (retResults[0] == "Success")
                    {
                        retResults = GenericInsert("SalesInvoiceDetails", ds.Tables["SalesInvoiceDetails"], currConn, transaction, true, connVM);
                        if (retResults[0] == "Success")
                        {
                            sqlText = "";
                            sqlText += @"update SalesInvoiceHeaders set IsSynced='Y';
                                        update SalesInvoiceDetails set IsSynced='Y';";
                            currConn.ChangeDatabase(loadedDatabase);
                            SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn, transaction);
                            int result = cmdUpdate.ExecuteNonQuery();
                            if (result <= 0)
                            {
                                throw new Exception();
                            }
                        }
                    }
                }


                if (retResults[0] != "Success")
                {
                    throw new Exception();
                }
                #region commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("CommonDAL", "TransactionSync", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion

            #region Results
            return retResults;
            #endregion
        }

        public bool CheckExistence(string IdName, string IdValue, string tableName, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            bool result = false;

            string sqlText = "";

            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                sqlText = sqlText + "select COUNT(" + IdName + ") from " + tableName + " WHERE " + IdName + "=@IdValue";
                SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                cmdExistTran.Transaction = transaction;
                cmdExistTran.Parameters.AddWithValueAndNullHandle("@IdName", IdName);
                cmdExistTran.Parameters.AddWithValueAndNullHandle("@IdValue", IdValue);
                //cmdExistTran.Parameters.AddWithValueAndNullHandle("@tableName", tableName);
                transResult = (int)cmdExistTran.ExecuteScalar();

                if (transResult > 0)
                {
                    result = true;
                }
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "CheckExistence", ex.ToString() + "\n" + sqlText);

                return result;
            }
            #endregion

            return result;
        }

        public int NextId(string tableName, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int nextId = 0;
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion
            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region Save
                sqlText = "select isnull(max(cast(id as int)),0)+1 FROM  " + tableName + "";
                SqlCommand cmd2 = new SqlCommand(sqlText, currConn);
                cmd2.Transaction = transaction;
                var exeRes = cmd2.ExecuteScalar();
                nextId = Convert.ToInt32(exeRes);
                if (nextId <= 0)
                {
                    throw new ArgumentNullException("InsertToCustomer",
                                                    "Unable to create new Customer No");
                }
                #endregion Save
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                if (Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "NextId", ex.ToString() + "\n" + sqlText);

                return nextId;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return nextId;
            #endregion
        }

        public DataTable SearchTransanctionHistoryNew(string TransactionNo, string TransactionType, string TransactionDateFrom, string TransactionDateTo, string ProductName, string databaseName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("Search Transaction History");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT     dbo.TransactionHistorys.TransactionNo,
                            dbo.TransactionHistorys.TransactionType,
                            convert(varchar,dbo.TransactionHistorys.TransactionDate,120)TransactionDate,
                            dbo.Products.ProductName, 
                            dbo.TransactionHistorys.UOM,
                            dbo.TransactionHistorys.Quantity,
                            dbo.TransactionHistorys.UPrice, 
                            dbo.TransactionHistorys.TradingMarkup,
                            dbo.TransactionHistorys.SDRate,
                            dbo.TransactionHistorys.VATRate,
                            dbo.TransactionHistorys.TCost, 
                            dbo.TransactionHistorys.CreatedBy,
                            convert (varchar,dbo.TransactionHistorys.CreatedOn,120)CreatedOn,
                            dbo.TransactionHistorys.LastModifiedBy,
                            convert (varchar,dbo.TransactionHistorys.LastModifiedOn,120)LastModifiedOn
                            FROM         dbo.TransactionHistorys LEFT OUTER JOIN
                                                    dbo.Products ON dbo.TransactionHistorys.ItemNo = dbo.Products.ItemNo
                                       
                            WHERE 
                                (TransactionNo  =  @TransactionNo OR @TransactionNo IS NULL) 
                            AND (TransactionType = @TransactionType  OR @TransactionType IS NULL)
                            AND (TransactionDate >= @TransactionDateFrom OR @TransactionDateFrom IS NULL)
                            AND (TransactionDate < dateadd(d,1, @TransactionDateTo)  OR @TransactionDateTo IS NULL)
                            AND (ProductName = @ProductName  OR @ProductName IS NULL)
                            and TransactionType is not null
                            order by TransactionDate desc ,TransactionNo asc,ProductName asc
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommTransanctionHistory = new SqlCommand();
                objCommTransanctionHistory.Connection = currConn;

                objCommTransanctionHistory.CommandText = sqlText;
                objCommTransanctionHistory.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (TransactionNo == "")
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@TransactionNo"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionNo", System.DBNull.Value); }
                    else { objCommTransanctionHistory.Parameters["@TransactionNo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@TransactionNo"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionNo", TransactionNo); }
                    else { objCommTransanctionHistory.Parameters["@TransactionNo"].Value = TransactionNo; }
                }
                if (TransactionType == "")
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@TransactionType"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionType", System.DBNull.Value); }
                    else { objCommTransanctionHistory.Parameters["@TransactionType"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (TransactionType == "DebitNote")
                    {
                        if (!objCommTransanctionHistory.Parameters.Contains("@TransactionType"))
                        { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionType", "Debit"); }
                        else { objCommTransanctionHistory.Parameters["@TransactionType"].Value = "Debit"; }
                    }
                    else if (TransactionType == "CreditNote")
                    {
                        if (!objCommTransanctionHistory.Parameters.Contains("@TransactionType"))
                        { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionType", "Credit"); }
                        else { objCommTransanctionHistory.Parameters["@TransactionType"].Value = "Credit"; }
                    }
                    else if (TransactionType == "Sale")
                    {
                        if (!objCommTransanctionHistory.Parameters.Contains("@TransactionType"))
                        { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionType", "New"); }
                        else { objCommTransanctionHistory.Parameters["@TransactionType"].Value = "New"; }
                    }
                    else
                    {
                        if (!objCommTransanctionHistory.Parameters.Contains("@TransactionType"))
                        { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionType", TransactionType); }
                        else { objCommTransanctionHistory.Parameters["@TransactionType"].Value = TransactionType; }
                    }
                }
                if (TransactionDateFrom == "")
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@TransactionDateFrom"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionDateFrom", System.DBNull.Value); }
                    else { objCommTransanctionHistory.Parameters["@TransactionDateFrom"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@TransactionDateFrom"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionDateFrom", TransactionDateFrom); }
                    else { objCommTransanctionHistory.Parameters["@TransactionDateFrom"].Value = TransactionDateFrom; }
                    // Common Filed

                }
                if (TransactionDateTo == "")
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@TransactionDateTo"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionDateTo", System.DBNull.Value); }
                    else { objCommTransanctionHistory.Parameters["@TransactionDateTo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@TransactionDateTo"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@TransactionDateTo", TransactionDateTo); }
                    else { objCommTransanctionHistory.Parameters["@TransactionDateTo"].Value = TransactionDateTo; }

                }
                if (ProductName == "")
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@ProductName"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@ProductName", System.DBNull.Value); }
                    else { objCommTransanctionHistory.Parameters["@ProductName"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommTransanctionHistory.Parameters.Contains("@ProductName"))
                    { objCommTransanctionHistory.Parameters.AddWithValue("@ProductName", ProductName); }
                    else { objCommTransanctionHistory.Parameters["@ProductName"].Value = ProductName; }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommTransanctionHistory);
                dataAdapter.Fill(dataTable);
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "SearchTransanctionHistoryNew", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "SearchTransanctionHistoryNew", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }

        #endregion

        #region Methods 02

        public bool TestConnection(string userName, string Password, string Datasource, bool IsWindowsAuthentication = false, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            bool result = false;
            SqlConnection conn = null;
            string ConnectionString = "";

            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (IsWindowsAuthentication)
                {
                    ConnectionString = "Data Source=" + Datasource + ";Trusted_Connection=True;" +
                             ";connect Timeout=120;";
                }
                else
                {
                    ConnectionString = "Data Source=" + Datasource + ";" +
                                "user id=" + userName + ";password=" + Password + ";connect Timeout=120;";
                }

                conn = new SqlConnection(ConnectionString);

                if (conn.State != ConnectionState.Open)
                {
                    conn.Open();
                    result = true;
                }


                #endregion open connection and transaction

            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TestConnection", sqlex.ToString());

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TestConnection", ex.ToString());

                throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                    {
                        conn.Close();
                    }
                }

            }
            #endregion

            return result;

        }

        public DataSet CompanyList(string ActiveStatus, SysDBInfoVMTemp connVM = null, string CompanyList = "")
        {

            #region Initializ

            string SysVersion = "1991";

            if (VATServer.Ordinary.DBConstant.IsProjectVersion2012)
            {
                SysVersion = "2012";
            }

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataTable = new DataSet();

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                sqlText = @"

    SELECT 
    CompanySl,
    CompanyID,
    CompanyName,
    DatabaseName,
    ActiveStatus,
    Serial
    FROM CompanyInformations
    where (ActiveStatus = @ActiveStatus)	
     and  (SysVersion = @SysVersion)	
    and (CompanyName<>'NA')

";

                if (CompanyList.ToLower() != "all")
                {
                    List<string> result = CompanyList.Split(',').ToList();

                    sqlText += " and DatabaseName in (";

                    foreach (string Company in result)
                    {
                        sqlText += "'" + Converter.DESEncrypt(DBConstant.PassPhrase, DBConstant.EnKey, Company) + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                }

                sqlText += @" 
    ORDER BY ISNULl(serial,CompanySL) asc;

";

                //SysVersion = "2020";

                SqlCommand objCommCompanyList = new SqlCommand();
                objCommCompanyList.Connection = currConn;
                objCommCompanyList.CommandText = sqlText;
                objCommCompanyList.CommandType = CommandType.Text;


                if (!objCommCompanyList.Parameters.Contains("@ActiveStatus"))
                { objCommCompanyList.Parameters.AddWithValue("@ActiveStatus", ActiveStatus); }
                else { objCommCompanyList.Parameters["@ActiveStatus"].Value = ActiveStatus; }

                if (!objCommCompanyList.Parameters.Contains("@SysVersion"))
                { objCommCompanyList.Parameters.AddWithValue("@SysVersion", SysVersion); }
                else { objCommCompanyList.Parameters["@SysVersion"].Value = SysVersion; }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCompanyList);

                dataAdapter.Fill(dataTable);

            }
            #endregion

            #region Catch
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "CompanyList", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "CompanyList", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion

            return dataTable;
        }

        public DataTable SuperAdministrator(SysDBInfoVMTemp connVM = null)
        {

            #region Objects & Variables

            string Description = "";

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            DataTable dataTable = new DataTable("SA");
            #endregion
            #region try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction
                #region sql statement
                sqlText = @"
                            SELECT miki as [user],mouse as [pwd]
FROM SuperAdministrator";

                SqlCommand objCommProductType = new SqlCommand();
                objCommProductType.Connection = currConn;
                objCommProductType.CommandText = sqlText;
                objCommProductType.CommandType = CommandType.Text;



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProductType);
                dataAdapter.Fill(dataTable);
                #endregion
            }
            #endregion
            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "SuperAdministrator", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "SuperAdministrator", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            #endregion
            #region finally
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return dataTable;
        }

        public DataSet SuperDBInformation(SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            DataSet superDs = new DataSet();

            #endregion

            #region try

            try
            {
                string filePath = AppDomain.CurrentDomain.BaseDirectory + "/SuperInformation.xml";
                if (!File.Exists(filePath))
                {
                    return superDs;
                }

                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.Load(AppDomain.CurrentDomain.BaseDirectory + "/SuperInformation.xml");
                superDs.ReadXml(AppDomain.CurrentDomain.BaseDirectory + "/SuperInformation.xml");

            }

            #endregion

            #region catch

            catch (Exception exp)
            {
                FileLogger.Log("CommonDAL", "SuperDBInformation", exp.ToString());

                throw exp;
            }
            #endregion

            return superDs;
        }

        public DataSet SettingInformation(SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            DataSet superDs = new DataSet();

            #endregion

            #region try

            try
            {
                string filePath = AppDomain.CurrentDomain.BaseDirectory + "/SettingInformation.xml";
                if (!File.Exists(filePath))
                {
                    return superDs;
                }

                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.Load(AppDomain.CurrentDomain.BaseDirectory + "/SettingInformation.xml");
                superDs.ReadXml(AppDomain.CurrentDomain.BaseDirectory + "/SettingInformation.xml");

            }

            #endregion

            #region catch

            catch (Exception exp)
            {
                FileLogger.Log("CommonDAL", "SuperDBInformation", exp.ToString());

                throw exp;
            }
            #endregion

            return superDs;
        }


        public bool SuperInformationFileExist(SysDBInfoVMTemp connVM = null)
        {
            /// firstly check user in settingsrole ,if not exist then check settings table
            #region Objects & Variablessule
            bool result = false;
            string SettingValue = string.Empty;
            string rootDirectory = "";
            #endregion

            #region try

            try
            {
                rootDirectory = AppDomain.CurrentDomain.BaseDirectory + "SuperInformation.xml";
                if (System.IO.File.Exists(rootDirectory))
                {
                    System.Xml.XmlDocument doc = new System.Xml.XmlDocument();

                    doc.Load(rootDirectory);
                    DataSet ds = new DataSet();

                    ds.ReadXml(rootDirectory);
                    string Tom = ds.Tables[0].Rows[0]["Tom"].ToString();
                    string jery = ds.Tables[0].Rows[0]["jery"].ToString();
                    string mini = ds.Tables[0].Rows[0]["mini"].ToString();
                    if (ds.Tables[0].Columns.Contains("doremon"))
                    {
                        string doremon = ds.Tables[0].Rows[0]["doremon"].ToString();
                        SysDBInfoVM.IsWindowsAuthentication = Converter.DESDecrypt(PassPhrase, EnKey, doremon) == "Y" ? true : false;

                    }

                    SysDBInfoVM.SysUserName = Converter.DESDecrypt(PassPhrase, EnKey, ds.Tables[0].Rows[0]["Tom"].ToString());
                    SysDBInfoVM.SysPassword = Converter.DESDecrypt(PassPhrase, EnKey, ds.Tables[0].Rows[0]["jery"].ToString());
                    SysDBInfoVM.SysdataSource = Converter.DESDecrypt(PassPhrase, EnKey, ds.Tables[0].Rows[0]["mini"].ToString());

                    //doc.Load("");
                    ds.Clear();
                    result = true;
                }

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "SuperInformationFileExist", ex.ToString());

                return result;
            }

            #endregion


            return result;

        }

        public bool SuperInformationFileExist(string path, SysDBInfoVMTemp connVM = null)
        {
            //// firstly check user in settingsrole ,if not exist then check settings table

            #region Objects & Variablessule
            bool result = false;
            string SettingValue = string.Empty;
            string rootDirectory = "";
            #endregion

            #region try

            try
            {
                rootDirectory = path + "SuperInformation.xml";
                if (System.IO.File.Exists(rootDirectory))
                {
                    System.Xml.XmlDocument doc = new System.Xml.XmlDocument();

                    doc.Load(rootDirectory);
                    DataSet ds = new DataSet();

                    ds.ReadXml(rootDirectory);

                    SysDBInfoVM.SysUserName = Converter.DESDecrypt(PassPhrase, EnKey, ds.Tables[0].Rows[0]["Tom"].ToString());
                    SysDBInfoVM.SysPassword = Converter.DESDecrypt(PassPhrase, EnKey, ds.Tables[0].Rows[0]["jery"].ToString());
                    SysDBInfoVM.SysdataSource = Converter.DESDecrypt(PassPhrase, EnKey, ds.Tables[0].Rows[0]["mini"].ToString());
                    //doc.Load("");
                    ds.Clear();
                    result = true;
                }

            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "SuperInformationFileExist", ex.ToString());

                return result;
            }

            #endregion

            return result;

        }

        //public List<Database> GetDatabases()
        //{
        //    SqlConnection sqlConn = null;
        //    try
        //    {
        //        DBSQLConnection _dbsqlConnection = new DBSQLConnection(); 
        //        sqlConn = _dbsqlConnection.GetConnection();
        //        var sqlServer = new Server(new ServerConnection(sqlConn));

        //        var dbList = new List<Database>();
        //        foreach (Database db in sqlServer.Databases)
        //        {
        //            dbList.Add(db);
        //        }

        //        return dbList;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        sqlConn.Close();
        //    }
        //}

        public string GetDevPass(SysDBInfoVMTemp connVM = null)
        {
            DataSet superDs = new DataSet();
            var pass = "";
            #region try

            try
            {
                //  AppDomain.CurrentDomain.BaseDirectory + "/dev.xml";
                string filePath = Path.Combine(Environment.CurrentDirectory.Substring(0, Environment.CurrentDirectory.Length - 10), @"dev.xml");

                if (!File.Exists(filePath))
                {
                    return pass;
                }

                // System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                //  doc.Load(AppDomain.CurrentDomain.BaseDirectory + "/dev.xml");
                superDs.ReadXml(filePath);

                pass = superDs.Tables[0].Rows[0][0].ToString();
            }

            #endregion

            #region catch

            catch (Exception exp)
            {
                FileLogger.Log("CommonDAL", "GetDevPass", exp.ToString());

                return "";
            }

            #endregion

            return pass;
        }

        public bool LoginSuccess(string DatabaseName, SysDBInfoVMTemp connVM = null)
        {
            /// firstly check user in settingsrole ,if not exist then check settings table
            #region Objects & Variablessule
            bool result = false;
            string SettingValue = string.Empty;
            string rootDirectory = "";
            #endregion

            #region try

            try
            {
                rootDirectory = AppDomain.CurrentDomain.BaseDirectory;
                if (!string.IsNullOrWhiteSpace(DatabaseName))
                {
                    DatabaseInfoVM.DatabaseName = DatabaseName;
                    result = true;
                }

            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "LoginSuccess", ex.ToString());

                return result;
            }

            #endregion

            return result;

        }

        //public string settings(string SettingGroup, string SettingName)
        //{
        //    string SettingValue = string.Empty;
        //    try
        //    {

        //        DataRow[] settingRow =
        //            settingVM.SettingsDT.Select("SettingGroup='" + SettingGroup + "' and SettingName='" + SettingName +
        //                                        "'");
        //        SettingValue = settingRow[0]["SettingValue"].ToString();
        //    }
        //    catch (Exception ex)
        //    {

        //        SettingValue = string.Empty;
        //    }
        //    //finally
        //    //{
        //    return SettingValue;
        //    //}
        //}


        public string SysDBCreate(string Uname, string Pwd, string DBSource, SysDBInfoVMTemp connVM = null)
        {
            string result = string.Empty;
            return result;
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string nextId = "";
            string newID = "";

            #endregion Initializ

            #region Validation

            //if (string.IsNullOrEmpty(databaseName))
            //{
            //    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoCompanyName);
            //}
            #endregion Validation

            #region open connection and transaction sys / Master

            SysDBInfoVM.SysDatabaseName = "SymphonyVATSys";

            currConn = _dbsqlConnection.GetConnectionSys(connVM);//start
            if (currConn.State != ConnectionState.Open)
            {
                currConn.Open();
            }

            #endregion open connection and transaction

        }

        public string[] NewDBCreateOld(CompanyProfileVM companyProfiles, string databaseName, List<FiscalYearVM> fiscalDetails, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string nextId = "";
            string newID = "";

            #endregion Initializ

            #region Try
            try
            {
                #region Validation

                if (string.IsNullOrEmpty(databaseName))
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoCompanyName);
                }
                if (fiscalDetails.Count() <= 0)
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoFiscalYear);
                }
                if (companyProfiles == null)
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoCompanyInformation);
                }

                #endregion Validation

                #region open connection and transaction sys / Master

                SysDBInfoVM.SysDatabaseName = "SymphonyVATSys";

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//start
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region check Database

                sqlText = "";
                sqlText += " USE [master]";
                //sqlText += " select COUNT(NAME) from sys.databases where name = '" + databaseName + "'";
                sqlText += " select COUNT(NAME) from sys.databases where name = @databaseName";

                SqlCommand cmdDBExist = new SqlCommand(sqlText, currConn);

                //BugsBD
                SqlParameter parameter = new SqlParameter("@databaseName", SqlDbType.VarChar, 250);
                parameter.Value = databaseName;
                cmdDBExist.Parameters.Add(parameter);


                transResult = (int)cmdDBExist.ExecuteScalar();
                if (transResult > 0)
                {
                    throw new ArgumentNullException("DeleteDB", MessageVM.dbMsgDBExist);
                }

                #endregion check Database

                #region CreateDatabase

                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " CREATE DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                transResult = (int)cmdIdExist.ExecuteNonQuery();
                if (transResult != -1)
                {
                    throw new ArgumentNullException("Create Database('" + databaseName + "')", MessageVM.dbMsgDBNotCreate);
                }

                #endregion CreateDatabase

                #region Change Database for New DB
                currConn.ChangeDatabase(databaseName);
                transaction = currConn.BeginTransaction(MessageVM.dbMsgMethodName);
                #endregion open connection and transaction

                #region TableCreate
                string top1;

                #region CreateTable Back
                //              sqlText = @"
                //
                //"; 

                #endregion CreateTable
                #region CreateTable Back
                sqlText = @"
                
CREATE TABLE [dbo].[AdjustmentHistorys](
	[AdjHistoryID] [varchar](50) NULL,
	[AdjHistoryNo] [varchar](50) NULL,
	[AdjId] [varchar](50) NULL,
	[AdjDate] [datetime] NULL,
	[AdjInputAmount] [decimal](25, 9) NULL,
	[AdjInputPercent] [decimal](25, 9) NULL,
	[AdjAmount] [decimal](25, 9) NULL,
	[AdjVATRate] [decimal](25, 9) NULL,
	[AdjVATAmount] [decimal](25, 9) NULL,
	[AdjSD] [decimal](25, 9) NULL,
	[AdjSDAmount] [decimal](25, 9) NULL,
	[AdjOtherAmount] [decimal](25, 9) NULL,
	[AdjType] [varchar](50) NULL,
	[AdjDescription] [varchar](500) NULL,
	[AdjReferance] [varchar](500) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AdjustmentName]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[AdjustmentName](
	[AdjId] [varchar](50) NULL,
	[AdjName] [varchar](500) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BankInformations]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BankInformations](
	[BankID] [varchar](20) NOT NULL,
	[BankCode] [varchar](50) NULL,
	[BankName] [varchar](120) NULL,
	[BranchName] [varchar](120) NULL,
	[AccountNumber] [varchar](120) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
 CONSTRAINT [PK_BankInformations] PRIMARY KEY CLUSTERED 
(
	[BankID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMCompanyOverhead]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMCompanyOverhead](
	[BOMOverHeadId] [varchar](20) NOT NULL,
	[BOMId] [varchar](20) NOT NULL,
	[OHLineNo] [int] NULL,
	[HeadName] [varchar](150) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[HeadAmount] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info5] [varchar](200) NULL,
	[RebatePercent] [decimal](25, 9) NULL,
	[RebateAmount] [decimal](25, 9) NULL,
	[AdditionalCost] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[HeadID] [varchar](20) NULL,
 CONSTRAINT [PK_BOMCompanyOverhead] PRIMARY KEY CLUSTERED 
(
	[BOMOverHeadId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMRaws]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMRaws](
	[BOMRawId] [varchar](20) NOT NULL,
	[BOMId] [varchar](20) NOT NULL,
	[BOMLineNo] [int] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[RawItemNo] [varchar](20) NOT NULL,
	[RawItemType] [varchar](50) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[UseQuantity] [decimal](25, 9) NULL,
	[WastageQuantity] [decimal](25, 9) NULL,
	[Cost] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[MarkUpValue] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMUQty] [decimal](25, 9) NULL,
	[UOMWQty] [decimal](25, 9) NULL,
	[TotalQuantity] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[PBOMId] [varchar](20) NULL,
	[PInvoiceNo] [varchar](20) NULL,
 CONSTRAINT [PK_BOMRaws] PRIMARY KEY CLUSTERED 
(
	[BOMRawId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMs]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMs](
	[BOMId] [varchar](20) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[RawTotal] [decimal](25, 9) NULL,
	[PackingTotal] [decimal](25, 9) NULL,
	[RebateTotal] [decimal](25, 9) NULL,
	[AdditionalTotal] [decimal](25, 9) NULL,
	[RebateAdditionTotal] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[PacketPrice] [decimal](25, 9) NULL,
	[RawOHCost] [decimal](25, 9) NULL,
	[LastNBRPrice] [decimal](25, 9) NULL,
	[LastNBRWithSDAmount] [decimal](25, 9) NULL,
	[TotalQuantity] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[WholeSalePrice] [decimal](25, 9) NULL,
	[NBRWithSDAmount] [decimal](25, 9) NULL,
	[MarkUpValue] [decimal](25, 9) NULL,
	[LastMarkUpValue] [decimal](25, 9) NULL,
	[LastSDAmount] [decimal](25, 9) NULL,
	[LastAmount] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[UOM] [varchar](120) NULL,
 CONSTRAINT [PK_BOMs] PRIMARY KEY CLUSTERED 
(
	[BOMId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMsMas]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMsMas](
	[BOMId] [varchar](20) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[NBRPrice] [decimal](18, 5) NULL,
	[PacketPrice] [decimal](18, 5) NULL,
	[RawOHCost] [decimal](18, 5) NULL,
	[LastNBRPrice] [decimal](18, 5) NULL,
	[LastNBRWithSDAmount] [decimal](18, 5) NULL,
	[TotalQuantity] [decimal](18, 5) NULL,
	[SDAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[WholeSalePrice] [decimal](18, 5) NULL,
	[NBRWithSDAmount] [decimal](18, 5) NULL,
	[MarkUpValue] [decimal](18, 5) NULL,
	[LastMarkUpValue] [decimal](18, 5) NULL,
	[LastSDAmount] [decimal](18, 5) NULL,
	[LastAmount] [decimal](18, 5) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Codes]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Codes](
	[CodeId] [int] IDENTITY(1,1) NOT NULL,
	[CodeGroup] [varchar](120) NULL,
	[CodeName] [varchar](120) NULL,
	[prefix] [varchar](120) NULL,
	[Lenth] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyOverheads]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyOverheads](
	[HeadID] [varchar](20) NULL,
	[HeadName] [varchar](150) NOT NULL,
	[HeadAmount] [decimal](25, 9) NULL,
	[Description] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [nchar](10) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[OHCode] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[RebatePercent] [decimal](25, 9) NULL,
 CONSTRAINT [PK_CompanyOverheads] PRIMARY KEY CLUSTERED 
(
	[HeadName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyOverheadVAT]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyOverheadVAT](
	[HeadName] [varchar](150) NOT NULL,
	[HeadAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[EffectMonth] [datetime] NOT NULL,
 CONSTRAINT [PK_CompanyOverheadVAT] PRIMARY KEY CLUSTERED 
(
	[HeadName] ASC,
	[EffectMonth] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyProfiles]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyProfiles](
	[CompanyID] [varchar](20) NOT NULL,
	[CompanyName] [varchar](120) NULL,
	[CompanyLegalName] [varchar](120) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[ZipCode] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[VatRegistrationNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[StartDateTime] [datetime] NULL,
	[FYearStart] [datetime] NULL,
	[FYearEnd] [datetime] NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
    [Tom] [varchar](200) NULL,
	[Jary] [varchar](200) NULL,
    [Miki] [varchar](200) NULL,
	[Mouse] [varchar](200) NULL,
 CONSTRAINT [PK_CompanyProfile] PRIMARY KEY CLUSTERED 
(
	[CompanyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Costing]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Costing](
	[ItemNo] [varchar](20) NULL,
	[InputDate] [datetime] NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[AV] [decimal](25, 9) NULL,
	[CD] [decimal](25, 9) NULL,
	[RD] [decimal](25, 9) NULL,
	[TVB] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVA] [decimal](25, 9) NULL,
	[ATV] [decimal](25, 9) NULL,
	[Other] [decimal](25, 9) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Currencies]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Currencies](
	[CurrencyId] [int] IDENTITY(1,1) NOT NULL,
	[CurrencyName] [varchar](500) NULL,
	[CurrencyCode] [varchar](50) NULL,
	[Country] [varchar](500) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CurrencyConversion]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CurrencyConversion](
	[CurrencyConversionId] [varchar](20) NULL,
	[CurrencyCodeFrom] [varchar](50) NOT NULL,
	[CurrencyCodeTo] [varchar](50) NULL,
	[CurrencyRate] [decimal](18, 10) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ConversionDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CustomerGroups]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CustomerGroups](
	[CustomerGroupID] [varchar](20) NOT NULL,
	[CustomerGroupName] [varchar](120) NULL,
	[CustomerGroupDescription] [varchar](120) NULL,
	[GroupType] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
 CONSTRAINT [PK_CustomerGroup] PRIMARY KEY CLUSTERED 
(
	[CustomerGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Customers]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Customers](
	[CustomerID] [varchar](20) NOT NULL,
	[CustomerCode] [varchar](50) NULL,
	[CustomerName] [varchar](120) NULL,
	[CustomerGroupID] [varchar](20) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Country] [varchar](200) NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[BusinessType] [varchar](120) NULL,
	[BusinessCode] [varchar](20) NULL,
 CONSTRAINT [PK_CustomerInformation] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DDBDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DDBDetails](
	[DDBDetailsNo] [varchar](20) NOT NULL,
	[DDBNo] [varchar](20) NOT NULL,
	[DDBDateTime] [datetime] NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[BENumber] [varchar](200) NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[PurcahseItemNo] [varchar](20) NOT NULL,
	[SaleItemNo] [varchar](20) NOT NULL,
	[DDBLineNo] [int] NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UseQuantity] [decimal](18, 5) NULL,
	[CostPrice] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](18, 5) NULL,
	[CnFAmount] [decimal](18, 9) NULL,
	[InsuranceAmount] [decimal](18, 9) NULL,
	[AssessableValue] [decimal](18, 9) NULL,
	[CDAmount] [decimal](18, 9) NULL,
	[RDAmount] [decimal](18, 9) NULL,
	[SD] [decimal](18, 2) NULL,
	[SDAmount] [decimal](18, 9) NULL,
	[TVBAmount] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 2) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[TVAAmount] [decimal](18, 9) NULL,
	[ATVAmount] [decimal](18, 9) NULL,
	[OthersAmount] [decimal](18, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DDBHeader]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DDBHeader](
	[DDBNo] [varchar](20) NOT NULL,
	[DDBDateTime] [datetime] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[TotalAmount] [decimal](18, 5) NULL,
	[CnFAmount] [decimal](18, 9) NULL,
	[InsuranceAmount] [decimal](18, 9) NULL,
	[AssessableValue] [decimal](18, 9) NULL,
	[CDAmount] [decimal](18, 9) NULL,
	[RDAmount] [decimal](18, 9) NULL,
	[SD] [decimal](18, 2) NULL,
	[SDAmount] [decimal](18, 9) NULL,
	[TVBAmount] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 2) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[TVAAmount] [decimal](18, 9) NULL,
	[ATVAmount] [decimal](18, 9) NULL,
	[OthersAmount] [decimal](18, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Deposits]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Deposits](
	[DepositId] [varchar](20) NOT NULL,
	[TreasuryNo] [varchar](50) NULL,
	[DepositDateTime] [datetime] NULL,
	[DepositType] [varchar](50) NULL,
	[DepositAmount] [decimal](25, 9) NULL,
	[ChequeNo] [varchar](50) NULL,
	[ChequeBank] [varchar](120) NULL,
	[ChequeBankBranch] [varchar](120) NULL,
	[ChequeDate] [datetime] NULL,
	[BankID] [varchar](20) NULL,
	[TreasuryCopy] [varchar](20) NULL,
	[DepositPerson] [varchar](120) NULL,
	[DepositPersonDesignation] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_Deposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DisposeDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DisposeDetails](
	[DisposeNumber] [varchar](20) NOT NULL,
	[LineNumber] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[UOM] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[RealPrice] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SaleNumber] [varchar](120) NULL,
	[PurchaseNumber] [varchar](120) NOT NULL,
	[PresentPrice] [decimal](25, 9) NULL,
	[Remarks] [varchar](120) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DisposeDate] [datetime] NULL,
	[QuantityImport] [decimal](25, 9) NULL,
	[TransactionType] [varchar](120) NULL,
	[FromStock] [varchar](1) NULL,
	[DollarPrice] [decimal](25, 9) NULL,
 CONSTRAINT [PK_DisposeDetails] PRIMARY KEY CLUSTERED 
(
	[DisposeNumber] ASC,
	[ItemNo] ASC,
	[PurchaseNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DisposeHeaders]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DisposeHeaders](
	[DisposeNumber] [varchar](20) NOT NULL,
	[DisposeDate] [datetime] NULL,
	[RefNumber] [varchar](120) NULL,
	[Remarks] [varchar](120) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](120) NULL,
	[Post] [varchar](1) NULL,
	[FromStock] [varchar](1) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[ImportVATAmount] [decimal](25, 9) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[TotalPriceImport] [decimal](25, 9) NULL,
	[AppVATAmount] [decimal](25, 9) NULL,
	[AppTotalPrice] [decimal](25, 9) NULL,
	[AppVATAmountImport] [decimal](25, 9) NULL,
	[AppTotalPriceImport] [decimal](25, 9) NULL,
	[AppDate] [datetime] NULL,
	[AppRefNumber] [varchar](120) NULL,
	[AppRemarks] [varchar](120) NULL,
 CONSTRAINT [PK_DisposeHeaders] PRIMARY KEY CLUSTERED 
(
	[DisposeNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Duties]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Duties](
	[DutyID] [varchar](50) NOT NULL,
	[DutyName] [varchar](120) NULL,
	[DutyRate] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[DutyType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Duties] PRIMARY KEY CLUSTERED 
(
	[DutyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBackDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBackDetails](
	[DDBackNo] [varchar](20) NOT NULL,
	[DDBackDate] [datetime] NULL,
	[DDLineNo] [int] NULL,
	[SalesInvoiceNo] [varchar](20) NULL,
	[PurchaseInvoiceNo] [varchar](20) NULL,
	[PurchaseDate] [datetime] NULL,
	[FgItemNo] [varchar](20) NULL,
	[FgQty] [decimal](25, 9) NULL,
	[ItemNo] [varchar](20) NULL,
	[BillOfEntry] [varchar](50) NULL,
	[PurchaseUom] [varchar](10) NULL,
	[PurchaseQuantity] [decimal](25, 9) NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[AV] [decimal](25, 9) NULL,
	[CD] [decimal](25, 9) NULL,
	[RD] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[VAT] [decimal](25, 9) NULL,
	[CnF] [decimal](25, 9) NULL,
	[Insurance] [decimal](25, 9) NULL,
	[TVB] [decimal](25, 9) NULL,
	[TVA] [decimal](25, 9) NULL,
	[ATV] [decimal](25, 9) NULL,
	[Others] [decimal](25, 9) NULL,
	[UseQuantity] [decimal](25, 9) NULL,
	[ClaimCD] [decimal](25, 9) NULL,
	[ClaimRD] [decimal](25, 9) NULL,
	[ClaimSD] [decimal](25, 9) NULL,
	[ClaimVAT] [decimal](25, 9) NULL,
	[ClaimCnF] [decimal](25, 9) NULL,
	[ClaimInsurance] [decimal](25, 9) NULL,
	[ClaimTVB] [decimal](25, 9) NULL,
	[ClaimTVA] [decimal](25, 9) NULL,
	[ClaimATV] [decimal](25, 9) NULL,
	[ClaimOthers] [decimal](25, 9) NULL,
	[SubTotalDDB] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[UOMCD] [decimal](25, 9) NULL,
	[UOMRD] [decimal](25, 9) NULL,
	[UOMSD] [decimal](25, 9) NULL,
	[UOMVAT] [decimal](25, 9) NULL,
	[UOMCnF] [decimal](25, 9) NULL,
	[UOMInsurance] [decimal](25, 9) NULL,
	[UOMTVB] [decimal](25, 9) NULL,
	[UOMTVA] [decimal](25, 9) NULL,
	[UOMATV] [decimal](25, 9) NULL,
	[UOMOthers] [decimal](25, 9) NULL,
	[UOMSubTotalDDB] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](50) NULL,
	[LastModifiedOn] [datetime] NULL,
	[PurchasetransactionType] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBackHeader]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBackHeader](
	[DDBackNo] [varchar](20) NOT NULL,
	[DDBackDate] [datetime] NOT NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SalesDate] [datetime] NOT NULL,
	[CustormerID] [varchar](20) NOT NULL,
	[CurrencyId] [int] NOT NULL,
	[ExpCurrency] [decimal](25, 9) NULL,
	[BDTCurrency] [decimal](25, 9) NULL,
	[FgItemNo] [varchar](20) NOT NULL,
	[TotalClaimCD] [decimal](25, 9) NULL,
	[TotalClaimRD] [decimal](25, 9) NULL,
	[TotalClaimSD] [decimal](25, 9) NULL,
	[TotalDDBack] [decimal](25, 9) NULL,
	[TotalClaimVAT] [decimal](25, 9) NULL,
	[TotalClaimCnFAmount] [decimal](25, 9) NULL,
	[TotalClaimInsuranceAmount] [decimal](25, 9) NULL,
	[TotalClaimTVBAmount] [decimal](25, 9) NULL,
	[TotalClaimTVAAmount] [decimal](25, 9) NULL,
	[TotalClaimATVAmount] [decimal](25, 9) NULL,
	[TotalClaimOthersAmount] [decimal](25, 9) NULL,
	[Comments] [varchar](250) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](20) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_DutyDrawBackHeader] PRIMARY KEY CLUSTERED 
(
	[DDBackNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBacks]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBacks](
	[DrawBackID] [varchar](20) NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[BENumber] [varchar](200) NULL,
	[PurchaseDateTime] [datetime] NULL,
	[PurchaseReceiveDate] [datetime] NULL,
	[PurchaseItemNo] [varchar](20) NOT NULL,
	[PurchaseDutyAmount] [decimal](18, 6) NULL,
	[DrawBackDutyPercent] [decimal](18, 6) NULL,
	[DrawBackDutyAmount] [decimal](18, 6) NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SaleDateTime] [datetime] NULL,
	[SaleDeliveryDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[FiscalYear]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[FiscalYear](
	[FiscalYearName] [varchar](30) NULL,
	[CurrentYear] [varchar](4) NOT NULL,
	[PeriodID] [varchar](6) NOT NULL,
	[PeriodName] [varchar](50) NULL,
	[PeriodStart] [datetime] NULL,
	[PeriodEnd] [datetime] NULL,
	[PeriodLock] [varchar](1) NULL,
	[GLLock] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_FiscalYear] PRIMARY KEY CLUSTERED 
(
	[CurrentYear] ASC,
	[PeriodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ImagesStore]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ImagesStore](
	[OriginalPath] [varchar](500) NULL,
	[ImageData] [binary](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueDetails](
	[IssueNo] [varchar](20) NOT NULL,
	[IssueLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IssueDateTime] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[Wastage] [decimal](25, 9) NULL,
	[BOMDate] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[BOMId] [varchar](20) NULL,
	[UOMWastage] [decimal](25, 9) NULL,
	[IsProcess] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueHeaders]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueHeaders](
	[IssueNo] [varchar](20) NOT NULL,
	[IssueDateTime] [datetime] NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[ImportIDExcel] [varchar](30) NULL,
 CONSTRAINT [PK_IssueHeader] PRIMARY KEY CLUSTERED 
(
	[IssueNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PriceService]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PriceService](
	[ItemNo] [varchar](20) NOT NULL,
	[Cost] [decimal](25, 9) NULL,
	[BasePrice] [decimal](25, 9) NULL,
	[OtherRate] [decimal](25, 9) NULL,
	[OtherType] [decimal](25, 9) NULL,
	[OtherAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SalePrice] [decimal](25, 9) NULL,
	[EffectDate] [datetime] NOT NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ProductCategories]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ProductCategories](
	[CategoryID] [varchar](20) NOT NULL,
	[CategoryName] [varchar](120) NULL,
	[Description] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[IsRaw] [varchar](50) NOT NULL,
	[HSCodeNo] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[PropergatingRate] [varchar](1) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[Trading] [varchar](1) NULL,
	[NonStock] [varchar](1) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
 CONSTRAINT [PK_ProductCategory] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Products]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Products](
	[ItemNo] [varchar](20) NOT NULL,
	[ProductCode] [varchar](50) NULL,
	[ProductName] [varchar](120) NULL,
	[ProductDescription] [varchar](120) NULL,
	[CategoryID] [varchar](20) NULL,
	[UOM] [varchar](120) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[ReceivePrice] [decimal](25, 9) NULL,
	[IssuePrice] [decimal](25, 9) NULL,
	[TenderPrice] [decimal](25, 9) NULL,
	[ExportPrice] [decimal](25, 9) NULL,
	[InternalIssuePrice] [decimal](25, 9) NULL,
	[TollIssuePrice] [decimal](25, 9) NULL,
	[TollCharge] [decimal](25, 9) NULL,
	[OpeningBalance] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[HSCodeNo] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[SD] [decimal](25, 9) NULL,
	[PacketPrice] [decimal](25, 9) NULL,
	[Trading] [varchar](1) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[NonStock] [varchar](1) NULL,
	[QuantityInHand] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
	[RebatePercent] [decimal](25, 9) NULL,
	[TVBRate] [decimal](25, 9) NULL,
	[CnFRate] [decimal](25, 9) NULL,
	[InsuranceRate] [decimal](25, 9) NULL,
	[CDRate] [decimal](25, 9) NULL,
	[RDRate] [decimal](25, 9) NULL,
	[AITRate] [decimal](25, 9) NULL,
	[TVARate] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[OpeningTotalCost] [decimal](25, 9) NULL,
 CONSTRAINT [PK_ItemInformation] PRIMARY KEY CLUSTERED 
(
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceDetails](
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[POLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Type] [varchar](200) NULL,
	[ProductType] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[RebateAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[CnFAmount] [decimal](25, 9) NULL,
	[InsuranceAmount] [decimal](25, 9) NULL,
	[AssessableValue] [decimal](25, 9) NULL,
	[CDAmount] [decimal](25, 9) NULL,
	[RDAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TVBAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVAAmount] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[OthersAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[PurchaseReturnId] [varchar](20) NULL,
 CONSTRAINT [PK_PurchaseInvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[PurchaseInvoiceNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceDuties]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceDuties](
	[PIDutyID] [varchar](50) NOT NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[CnFInp] [decimal](25, 9) NULL,
	[CnFRate] [decimal](25, 9) NULL,
	[CnFAmount] [decimal](25, 9) NULL,
	[InsuranceInp] [decimal](25, 9) NULL,
	[InsuranceRate] [decimal](25, 9) NULL,
	[InsuranceAmount] [decimal](25, 9) NULL,
	[AssessableInp] [decimal](25, 9) NULL,
	[AssessableValue] [decimal](25, 9) NULL,
	[CDInp] [decimal](25, 9) NULL,
	[CDRate] [decimal](25, 9) NULL,
	[CDAmount] [decimal](25, 9) NULL,
	[RDInp] [decimal](25, 9) NULL,
	[RDRate] [decimal](25, 9) NULL,
	[RDAmount] [decimal](25, 9) NULL,
	[TVBInp] [decimal](25, 9) NULL,
	[TVBRate] [decimal](25, 9) NULL,
	[TVBAmount] [decimal](25, 9) NULL,
	[SDInp] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATInp] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVAInp] [decimal](25, 9) NULL,
	[TVARate] [decimal](25, 9) NULL,
	[TVAAmount] [decimal](25, 9) NULL,
	[ATVInp] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[OthersInp] [decimal](25, 9) NULL,
	[OthersRate] [decimal](25, 9) NULL,
	[OthersAmount] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[Remarks] [varchar](200) NULL,
	[ItemNo] [varchar](20) NULL,
	[DutyCompleteQuantity] [decimal](25, 9) NULL,
	[DutyCompleteQuantityPercent] [decimal](25, 9) NULL,
	[LineCost] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceHeaders]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceHeaders](
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[VendorID] [varchar](20) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[BENumber] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[ProductType] [varchar](100) NULL,
	[TransactionType] [varchar](50) NULL,
	[ReceiveDate] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[CurrencyID] [varchar](50) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[WithVDS] [varchar](1) NULL,
	[PurchaseReturnId] [varchar](20) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[SerialNo1] [varchar](50) NULL,
 CONSTRAINT [PK_ProductInvoiceHead] PRIMARY KEY CLUSTERED 
(
	[PurchaseInvoiceNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReceiveDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReceiveDetails](
	[ReceiveNo] [varchar](20) NOT NULL,
	[ReceiveLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[ReceiveDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[VATName] [varchar](100) NULL,
	[ReceiveReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[BOMId] [varchar](20) NULL,
	[BOMId1] [varchar](20) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[DollerValue] [decimal](25, 9) NULL,
 CONSTRAINT [PK_ReceiveDetails] PRIMARY KEY CLUSTERED 
(
	[ReceiveNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReceiveHeaders]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReceiveHeaders](
	[ReceiveNo] [varchar](20) NOT NULL,
	[ReceiveDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReceiveReturnId] [varchar](20) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[ReferenceNo] [varchar](50) NULL,
 CONSTRAINT [PK_ReceiveHead] PRIMARY KEY CLUSTERED 
(
	[ReceiveNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReportSales]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReportSales](
	[AuditUser] [varchar](10) NULL,
	[OpeQty] [money] NULL,
	[PrdQty] [money] NULL,
	[InvoiceNo] [varchar](20) NULL,
	[CustomerName] [varchar](120) NULL,
	[Address] [varchar](200) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[InvoiceDate] [datetime] NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductName] [varchar](120) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[SalesPrice] [decimal](18, 5) NULL,
	[ClosingQuantity] [decimal](18, 5) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceDetails](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[InvoiceLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[AVGPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SaleType] [varchar](10) NULL,
	[PreviousSalesInvoiceNo] [varchar](200) NULL,
	[Trading] [varchar](1) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[NonStock] [varchar](1) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[Type] [varchar](10) NULL,
	[BENumber] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[VATName] [varchar](100) NULL,
	[SaleReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[PromotionalQuantity] [decimal](25, 9) NULL,
	[FinishItemNo] [varchar](20) NULL,
 CONSTRAINT [PK_SalesInvoiceDetails_1] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceHeaders]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceHeaders](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[CustomerID] [varchar](20) NOT NULL,
	[DeliveryAddress1] [varchar](200) NULL,
	[DeliveryAddress2] [varchar](200) NULL,
	[DeliveryAddress3] [varchar](200) NULL,
	[VehicleID] [varchar](20) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SaleType] [varchar](20) NULL,
	[PreviousSalesInvoiceNo] [varchar](20) NULL,
	[Trading] [varchar](1) NULL,
	[IsPrint] [varchar](1) NULL,
	[TenderId] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[LCNumber] [varchar](50) NULL,
	[CurrencyID] [varchar](50) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[SaleReturnId] [varchar](20) NULL,
	[IsVDS] [varchar](1) NULL,
	[GetVDSCertificate] [varchar](1) NULL,
	[VDSCertificateDate] [datetime] NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[AlReadyPrint] [int] NULL,
 CONSTRAINT [PK_SalesInvoiceHead] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceHeadersExport]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceHeadersExport](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SaleLineNo] [int] NULL,
	[RefNo] [varchar](200) NULL,
	[Description] [varchar](200) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[GrossWeight] [decimal](25, 9) NULL,
	[NetWeight] [decimal](25, 9) NULL,
	[NumberFrom] [varchar](120) NULL,
	[NumberTo] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[PortFrom] [varchar](500) NULL,
	[PortTo] [varchar](500) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SDDeposits]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SDDeposits](
	[DepositId] [varchar](20) NOT NULL,
	[TreasuryNo] [varchar](50) NULL,
	[DepositDateTime] [datetime] NULL,
	[DepositType] [varchar](50) NULL,
	[DepositAmount] [decimal](25, 9) NULL,
	[ChequeNo] [varchar](50) NULL,
	[ChequeBank] [varchar](120) NULL,
	[ChequeBankBranch] [varchar](120) NULL,
	[ChequeDate] [datetime] NULL,
	[BankID] [varchar](20) NULL,
	[TreasuryCopy] [varchar](20) NULL,
	[DepositPerson] [varchar](120) NULL,
	[DepositPersonDesignation] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_SDDeposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Settings]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Settings](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Setup]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Setup](
	[PurchaseP] [varchar](3) NULL,
	[PurchaseIDL] [numeric](10, 0) NULL,
	[PurchaseCID] [numeric](10, 0) NULL,
	[PurchaseNYID] [varchar](1) NULL,
	[PurchaseTradingP] [varchar](3) NULL,
	[PurchaseTradingIDL] [numeric](10, 0) NULL,
	[PurchaseTradingCID] [numeric](10, 0) NULL,
	[PurchaseTradingNYID] [varchar](1) NULL,
	[IssueP] [varchar](3) NULL,
	[IssueIDL] [numeric](10, 0) NULL,
	[IssueCID] [numeric](10, 0) NULL,
	[IssueNYID] [varchar](1) NULL,
	[IssueReturnP] [varchar](3) NULL,
	[IssueReturnIDL] [numeric](10, 0) NULL,
	[IssueReturnCID] [numeric](10, 0) NULL,
	[IssueReturnNYID] [varchar](1) NULL,
	[ReceiveP] [varchar](3) NULL,
	[ReceiveIDL] [numeric](10, 0) NULL,
	[ReceiveCID] [numeric](10, 0) NULL,
	[ReceiveNYID] [varchar](1) NULL,
	[TransferP] [varchar](3) NULL,
	[TransferIDL] [numeric](10, 0) NULL,
	[TransferCID] [numeric](10, 0) NULL,
	[TransferNYID] [varchar](1) NULL,
	[SaleP] [varchar](3) NULL,
	[SaleIDL] [numeric](10, 0) NULL,
	[SaleCID] [numeric](10, 0) NULL,
	[SaleNYID] [varchar](1) NULL,
	[SaleServiceP] [varchar](3) NULL,
	[SaleServiceIDL] [numeric](10, 0) NULL,
	[SaleServiceCID] [numeric](10, 0) NULL,
	[SaleServiceNYID] [varchar](1) NULL,
	[SaleTradingP] [varchar](3) NULL,
	[SaleTradingIDL] [numeric](10, 0) NULL,
	[SaleTradingCID] [numeric](10, 0) NULL,
	[SaleTradingNYID] [varchar](1) NULL,
	[SaleExportP] [varchar](3) NULL,
	[SaleExportIDL] [numeric](10, 0) NULL,
	[SaleExportCID] [numeric](10, 0) NULL,
	[SaleExportNYID] [varchar](1) NULL,
	[SaleTenderP] [varchar](3) NULL,
	[SaleTenderIDL] [numeric](10, 0) NULL,
	[SaleTenderCID] [numeric](10, 0) NULL,
	[SaleTenderNYID] [varchar](1) NULL,
	[DNP] [varchar](3) NULL,
	[DNIDL] [numeric](10, 0) NULL,
	[DNCID] [numeric](10, 0) NULL,
	[DNNYID] [varchar](1) NULL,
	[CNP] [varchar](3) NULL,
	[CNIDL] [numeric](10, 0) NULL,
	[CNCID] [numeric](10, 0) NULL,
	[CNNYID] [varchar](1) NULL,
	[DepositP] [varchar](3) NULL,
	[DepositIDL] [numeric](10, 0) NULL,
	[DepositCID] [numeric](10, 0) NULL,
	[DepositNYID] [varchar](1) NULL,
	[VDSP] [varchar](3) NULL,
	[VDSIDL] [numeric](10, 0) NULL,
	[VDSCID] [numeric](10, 0) NULL,
	[VDSNYID] [varchar](1) NULL,
	[TollIssueP] [varchar](3) NULL,
	[TollIssueIDL] [numeric](10, 0) NULL,
	[TollIssueCID] [numeric](10, 0) NULL,
	[TollIssueNYID] [varchar](1) NULL,
	[TollReceiveP] [varchar](3) NULL,
	[TollReceiveIDL] [numeric](10, 0) NULL,
	[TollReceiveCID] [numeric](10, 0) NULL,
	[TollReceiveNYID] [varchar](1) NULL,
	[DSFP] [varchar](3) NULL,
	[DSFIDL] [numeric](10, 0) NULL,
	[DSFCID] [numeric](10, 0) NULL,
	[DSFNYID] [varchar](1) NULL,
	[DSRP] [varchar](3) NULL,
	[DSRIDL] [numeric](10, 0) NULL,
	[DSRCID] [numeric](10, 0) NULL,
	[DSRNYID] [varchar](1) NULL,
	[IssueFromBOM] [varchar](1) NULL,
	[PrepaidVAT] [varchar](1) NULL,
	[CYear] [varchar](4) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TenderDetails]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TenderDetails](
	[TenderId] [varchar](20) NOT NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[TenderQty] [decimal](25, 9) NULL,
	[SaleQty] [decimal](25, 9) NULL,
	[TenderPrice] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[BOMId] [varchar](20) NULL,
 CONSTRAINT [PK_TenderDetails] PRIMARY KEY CLUSTERED 
(
	[TenderId] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TenderHeaders]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TenderHeaders](
	[TenderId] [varchar](20) NOT NULL,
	[RefNo] [varchar](200) NOT NULL,
	[CustomerId] [varchar](20) NULL,
	[TenderDate] [datetime] NULL,
	[DeleveryDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_TenderHeaders] PRIMARY KEY CLUSTERED 
(
	[TenderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransactionHistorys]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransactionHistorys](
	[TransactionNo] [varchar](20) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDate] [datetime] NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[TradingMarkup] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[TCost] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Transactions]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Transactions](
	[TransactionID] [varchar](20) NULL,
	[TransactionType] [varchar](200) NULL,
	[TransactionDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UOMName]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UOMName](
	[UOMId] [int] IDENTITY(1,1) NOT NULL,
	[UOMName] [varchar](500) NULL,
	[UOMCode] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UOMs]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UOMs](
	[UOMId] [varchar](50) NULL,
	[UOMFrom] [varchar](50) NULL,
	[UOMTo] [varchar](50) NULL,
	[Convertion] [decimal](25, 9) NULL,
	[CTypes] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ActiveStatus] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserAuditLogs]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserAuditLogs](
	[LogID] [varchar](50) NULL,
	[ComputerName] [varchar](200) NULL,
	[ComputerLoginUserName] [varchar](200) NULL,
	[ComputerIPAddress] [varchar](200) NULL,
	[SoftwareUserId] [varchar](200) NULL,
	[SessionDate] [datetime] NULL,
	[LogInDateTime] [datetime] NULL,
	[LogOutDateTime] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserGroups]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[UserGroups](
	[GroupID] [varchar](20) NULL,
	[GroupName] [varchar](120) NOT NULL,
	[Comments] [varchar](200) NOT NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_UserGroups] PRIMARY KEY CLUSTERED 
(
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserInformations]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserInformations](
	[UserID] [varchar](20) NULL,
	[UserName] [varchar](120) NOT NULL,
	[UserPassword] [varchar](20) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[LastLoginDateTime] [datetime] NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[GroupID] [varchar](20) NULL,
 CONSTRAINT [PK_UserInformations] PRIMARY KEY CLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserLogs]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserLogs](
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[LoginTime] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserRolls]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserRolls](
	[LineID] [numeric](18, 0) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[FormID] [varchar](5) NOT NULL,
	[Access] [varchar](1) NULL,
	[PostAccess] [varchar](1) NULL,
	[FormName] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_UserRolls] PRIMARY KEY CLUSTERED 
(
	[LineID] ASC,
	[UserID] ASC,
	[FormID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VDS]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VDS](
	[VDSId] [varchar](20) NULL,
	[VendorId] [varchar](20) NULL,
	[BillAmount] [decimal](25, 9) NULL,
	[BillDate] [datetime] NULL,
	[BillDeductAmount] [decimal](25, 9) NULL,
	[DepositNumber] [varchar](30) NULL,
	[DepositDate] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[IssueDate] [datetime] NULL,
	[PurchaseNumber] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[VDSPercent] [decimal](25, 9) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Vehicles]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Vehicles](
	[VehicleID] [varchar](20) NOT NULL,
	[VehicleCode] [varchar](50) NULL,
	[VehicleType] [varchar](50) NULL,
	[VehicleNo] [varchar](50) NULL,
	[Description] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
 CONSTRAINT [PK_Vehicles] PRIMARY KEY CLUSTERED 
(
	[VehicleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VendorGroups]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VendorGroups](
	[VendorGroupID] [varchar](20) NOT NULL,
	[VendorGroupName] [varchar](120) NULL,
	[VendorGroupDescription] [varchar](120) NULL,
	[GroupType] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Info2] [varchar](10) NULL,
 CONSTRAINT [PK_VendorGroup] PRIMARY KEY CLUSTERED 
(
	[VendorGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Vendors]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Vendors](
	[VendorID] [varchar](20) NOT NULL,
	[VendorCode] [varchar](50) NULL,
	[VendorName] [varchar](120) NULL,
	[VendorGroupID] [varchar](20) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[ContactPerson] [varchar](150) NULL,
	[ContactPersonDesignation] [varchar](150) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Country] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[BusinessType] [varchar](120) NULL,
	[BusinessCode] [varchar](20) NULL,
 CONSTRAINT [PK_Vendor] PRIMARY KEY CLUSTERED 
(
	[VendorID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[YourTable]    Script Date: 12/23/2013 5:23:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[YourTable](
	[BOMId] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
ALTER TABLE [dbo].[Duties] ADD  CONSTRAINT [DF_Duties_Comments]  DEFAULT ('NA') FOR [Comments]
GO
ALTER TABLE [dbo].[PurchaseInvoiceDuties] ADD  CONSTRAINT [DF_Table_1_Comments_1]  DEFAULT ('NA') FOR [Remarks]
GO
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD  CONSTRAINT [DF_SalesInvoiceDetails_AVGPrice]  DEFAULT ((0)) FOR [AVGPrice]
GO
ALTER TABLE [dbo].[BOMCompanyOverhead]  WITH CHECK ADD  CONSTRAINT [FK_BOMCompanyOverhead_BOMId] FOREIGN KEY([BOMId])
REFERENCES [dbo].[BOMs] ([BOMId])
GO
ALTER TABLE [dbo].[BOMCompanyOverhead] CHECK CONSTRAINT [FK_BOMCompanyOverhead_BOMId]
GO
ALTER TABLE [dbo].[BOMRaws]  WITH CHECK ADD  CONSTRAINT [FK_BOMRaws_BOMId] FOREIGN KEY([BOMId])
REFERENCES [dbo].[BOMs] ([BOMId])
GO
ALTER TABLE [dbo].[BOMRaws] CHECK CONSTRAINT [FK_BOMRaws_BOMId]
GO
ALTER TABLE [dbo].[BOMs]  WITH CHECK ADD  CONSTRAINT [FK_BOMs_FinishItemNo] FOREIGN KEY([FinishItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[BOMs] CHECK CONSTRAINT [FK_BOMs_FinishItemNo]
GO
ALTER TABLE [dbo].[CompanyOverheadVAT]  WITH CHECK ADD  CONSTRAINT [FK_CompanyOverheadVAT_CompanyOverheads] FOREIGN KEY([HeadName])
REFERENCES [dbo].[CompanyOverheads] ([HeadName])
GO
ALTER TABLE [dbo].[CompanyOverheadVAT] CHECK CONSTRAINT [FK_CompanyOverheadVAT_CompanyOverheads]
GO
ALTER TABLE [dbo].[Customers]  WITH CHECK ADD  CONSTRAINT [FK_Customers_CustomerGroups1] FOREIGN KEY([CustomerGroupID])
REFERENCES [dbo].[CustomerGroups] ([CustomerGroupID])
GO
ALTER TABLE [dbo].[Customers] CHECK CONSTRAINT [FK_Customers_CustomerGroups1]
GO
ALTER TABLE [dbo].[DisposeDetails]  WITH CHECK ADD  CONSTRAINT [FK_DisposeDetails_DisposeHeaders] FOREIGN KEY([DisposeNumber])
REFERENCES [dbo].[DisposeHeaders] ([DisposeNumber])
GO
ALTER TABLE [dbo].[DisposeDetails] CHECK CONSTRAINT [FK_DisposeDetails_DisposeHeaders]
GO
ALTER TABLE [dbo].[DisposeDetails]  WITH CHECK ADD  CONSTRAINT [FK_DisposeDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[DisposeDetails] CHECK CONSTRAINT [FK_DisposeDetails_Products]
GO
ALTER TABLE [dbo].[IssueDetails]  WITH CHECK ADD  CONSTRAINT [FK_IssueDetails_IssueHeaders] FOREIGN KEY([IssueNo])
REFERENCES [dbo].[IssueHeaders] ([IssueNo])
GO
ALTER TABLE [dbo].[IssueDetails] CHECK CONSTRAINT [FK_IssueDetails_IssueHeaders]
GO
ALTER TABLE [dbo].[IssueDetails]  WITH CHECK ADD  CONSTRAINT [FK_IssueDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[IssueDetails] CHECK CONSTRAINT [FK_IssueDetails_Products]
GO
ALTER TABLE [dbo].[Products]  WITH CHECK ADD  CONSTRAINT [FK_Products_ProductCategories1] FOREIGN KEY([CategoryID])
REFERENCES [dbo].[ProductCategories] ([CategoryID])
GO
ALTER TABLE [dbo].[Products] CHECK CONSTRAINT [FK_Products_ProductCategories1]
GO
ALTER TABLE [dbo].[PurchaseInvoiceDuties]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDuties_PurchaseInvoiceHeaders] FOREIGN KEY([PurchaseInvoiceNo])
REFERENCES [dbo].[PurchaseInvoiceHeaders] ([PurchaseInvoiceNo])
GO
ALTER TABLE [dbo].[PurchaseInvoiceDuties] CHECK CONSTRAINT [FK_PurchaseInvoiceDuties_PurchaseInvoiceHeaders]
GO
ALTER TABLE [dbo].[PurchaseInvoiceHeaders]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceHeaders_Vendors] FOREIGN KEY([VendorID])
REFERENCES [dbo].[Vendors] ([VendorID])
GO
ALTER TABLE [dbo].[PurchaseInvoiceHeaders] CHECK CONSTRAINT [FK_PurchaseInvoiceHeaders_Vendors]
GO
ALTER TABLE [dbo].[ReceiveDetails]  WITH CHECK ADD  CONSTRAINT [FK_ReceiveDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[ReceiveDetails] CHECK CONSTRAINT [FK_ReceiveDetails_Products]
GO
ALTER TABLE [dbo].[ReceiveDetails]  WITH CHECK ADD  CONSTRAINT [FK_ReceiveDetails_ReceiveHeaders] FOREIGN KEY([ReceiveNo])
REFERENCES [dbo].[ReceiveHeaders] ([ReceiveNo])
GO
ALTER TABLE [dbo].[ReceiveDetails] CHECK CONSTRAINT [FK_ReceiveDetails_ReceiveHeaders]
GO
ALTER TABLE [dbo].[SalesInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceDetails_Products1] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[SalesInvoiceDetails] CHECK CONSTRAINT [FK_SalesInvoiceDetails_Products1]
GO
ALTER TABLE [dbo].[SalesInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceDetails_SalesInvoiceHeaders1] FOREIGN KEY([SalesInvoiceNo])
REFERENCES [dbo].[SalesInvoiceHeaders] ([SalesInvoiceNo])
GO
ALTER TABLE [dbo].[SalesInvoiceDetails] CHECK CONSTRAINT [FK_SalesInvoiceDetails_SalesInvoiceHeaders1]
GO
ALTER TABLE [dbo].[SalesInvoiceHeaders]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceHeaders_Customers] FOREIGN KEY([CustomerID])
REFERENCES [dbo].[Customers] ([CustomerID])
GO
ALTER TABLE [dbo].[SalesInvoiceHeaders] CHECK CONSTRAINT [FK_SalesInvoiceHeaders_Customers]
GO
ALTER TABLE [dbo].[SalesInvoiceHeadersExport]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceHeadersExport_SalesInvoiceHeaders] FOREIGN KEY([SalesInvoiceNo])
REFERENCES [dbo].[SalesInvoiceHeaders] ([SalesInvoiceNo])
GO
ALTER TABLE [dbo].[SalesInvoiceHeadersExport] CHECK CONSTRAINT [FK_SalesInvoiceHeadersExport_SalesInvoiceHeaders]
GO
ALTER TABLE [dbo].[TenderDetails]  WITH CHECK ADD  CONSTRAINT [FK_TenderDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[TenderDetails] CHECK CONSTRAINT [FK_TenderDetails_Products]
GO
ALTER TABLE [dbo].[TenderDetails]  WITH CHECK ADD  CONSTRAINT [FK_TenderDetails_TenderHeaders] FOREIGN KEY([TenderId])
REFERENCES [dbo].[TenderHeaders] ([TenderId])
GO
ALTER TABLE [dbo].[TenderDetails] CHECK CONSTRAINT [FK_TenderDetails_TenderHeaders]
GO
ALTER TABLE [dbo].[TenderHeaders]  WITH CHECK ADD  CONSTRAINT [FK_TenderHeaders_Customers] FOREIGN KEY([CustomerId])
REFERENCES [dbo].[Customers] ([CustomerID])
GO
ALTER TABLE [dbo].[TenderHeaders] CHECK CONSTRAINT [FK_TenderHeaders_Customers]
GO
ALTER TABLE [dbo].[UserLogs]  WITH CHECK ADD  CONSTRAINT [FK_UserLogs_UserInformations] FOREIGN KEY([UserName])
REFERENCES [dbo].[UserInformations] ([UserName])
GO
ALTER TABLE [dbo].[UserLogs] CHECK CONSTRAINT [FK_UserLogs_UserInformations]
GO
ALTER TABLE [dbo].[Vendors]  WITH CHECK ADD  CONSTRAINT [FK_Vendors_VendorGroups1] FOREIGN KEY([VendorGroupID])
REFERENCES [dbo].[VendorGroups] ([VendorGroupID])
GO
ALTER TABLE [dbo].[Vendors] CHECK CONSTRAINT [FK_Vendors_VendorGroups1]
GO
                ";
                //25-2-2014 User Settings and Banderol
                sqlText += @"
/****** Object:  Table [dbo].[SettingsRole]    Script Date: 12/02/14 10:24:55 AM ******/
CREATE TABLE [dbo].[SettingsRole](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

";

                #endregion CreateTable

                top1 = "go";

                IEnumerable<string> commandStrings = Regex.Split(sqlText, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                foreach (string commandString in commandStrings)
                {
                    if (commandString.Trim() != "")
                    {
                        SqlCommand cmdIdExist1 = new SqlCommand(commandString, currConn);

                        //new SqlCommand(commandString, currConn).ExecuteNonQuery();
                        cmdIdExist1.Transaction = transaction;
                        transResult = (int)cmdIdExist1.ExecuteNonQuery();
                        if (transResult != -1)
                        {
                            throw new ArgumentNullException("Create Tables to database('" + databaseName + "')", MessageVM.dbMsgTableNotCreate);
                        }
                    }
                }

                #endregion TableCreate

                #region TableDefaultData
                string top2;
                // vendor group, vehicle,UserInformations,CustomerGroups,Vendors,Customers
                //userroll,,settings,ProductTypes,codes,Currencies,CurrencyConversion
                #region TableDefaultData Back
                //             sqlText = @"
                //INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A''N/A', N'N/A', NULL)
                //INSERT [dbo].[Vehicles] ([VehicleID], [VehicleCode], [VehicleType], [VehicleNo], [Description], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', NULL, N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
                //INSERT [dbo].[UserInformations] ([UserID], [UserName], [UserPassword], [ActiveStatus], [LastLoginDateTime], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'10', N'admin', N'J7LJ8+qT64o=', N'Y', CAST(0x0000A04D00B82888 AS DateTime), N'KamrulInsert', CAST(0x0000A01400EF44BC AS DateTime), N'admin', CAST(0x0000A08400D5C30C AS DateTime), N'Info1', N'Info2', N'Info3', N'Info4', N'Info5')
                //INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'N/A', N'N/A', N'Local', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A17500C8DF0C AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
                //INSERT [dbo].[Vendors] ([VendorID], [VendorCode], [VendorName], [VendorGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [VATRegistrationNo], [TINNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Country], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
                //INSERT [dbo].[Customers] ([CustomerID], [CustomerCode], [CustomerName], [CustomerGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [TINNo], [VATRegistrationNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info2], [Info3], [Info4], [Info5], [Country]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', NULL)


                //";
                #endregion TableDefaultData Back

                #region TableDefaultData Back
                sqlText = @"
INSERT [BankInformations] ([BankID], [BankCode], [BankName], [BranchName], [AccountNumber], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'0', N'NA', N'NA', N'NA', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'Y', N'admin', CAST(0x0000A19A00C0D9EC AS DateTime), N'admin', CAST(0x0000A19A00C0D9EC AS DateTime), NULL, NULL, NULL, NULL, NULL)
INSERT [dbo].[UserInformations] ([UserID], [UserName], [UserPassword], [ActiveStatus], [LastLoginDateTime], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'10', N'admin', N'J7LJ8+qT64o=', N'Y', CAST(0x0000A04D00B82888 AS DateTime), N'KamrulInsert', CAST(0x0000A01400EF44BC AS DateTime), N'admin', CAST(0x0000A08400D5C30C AS DateTime), N'Info1', N'Info2', N'Info3', N'Info4', N'Info5')
INSERT [dbo].[Vehicles] ([VehicleID], [VehicleCode], [VehicleType], [VehicleNo], [Description], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', NULL, N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')

INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A''N/A', N'N/A', NULL)
INSERT [dbo].[Vendors] ([VendorID], [VendorCode], [VendorName], [VendorGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [VATRegistrationNo], [TINNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Country], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'N/A', N'N/A', N'Local', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A17500C8DF0C AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
INSERT [dbo].[Customers] ([CustomerID], [CustomerCode], [CustomerName], [CustomerGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [TINNo], [VATRegistrationNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info2], [Info3], [Info4], [Info5], [Country]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', NULL)


INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'0', N'NA', N'NA', N'NA', N'Overhead', N'0.00', CAST(30.000000000 AS Decimal(25, 9)), N'N', N'N', N'admin', CAST(0x0000A16400F8CA3C AS DateTime), N'admin', CAST(0x0000A1A30106ECFC AS DateTime), CAST(30.000000000 AS Decimal(25, 9)), N'N', N'N', N'NA', N'NA')

INSERT [dbo].[Products] ([ItemNo], [ProductCode], [ProductName], [ProductDescription], [CategoryID], [UOM], [CostPrice], [SalesPrice], [NBRPrice], [ReceivePrice], [IssuePrice], [TenderPrice], [ExportPrice], [InternalIssuePrice], [TollIssuePrice], [TollCharge], [OpeningBalance], [SerialNo], [HSCodeNo], [VATRate], [Comments], [SD], [PacketPrice], [Trading], [TradingMarkUp], [NonStock], [QuantityInHand], [OpeningDate], [RebatePercent], [TVBRate], [CnFRate], [InsuranceRate], [CDRate], [RDRate], [AITRate], [TVARate], [ATVRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [OpeningTotalCost]) VALUES (N'ovh0', N'ovh0', N'Margin', N'-', N'0', N'-', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'-', N'', CAST(0.000000000 AS Decimal(25, 9)), N'', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), CAST(0x0000A1A40105ED84 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'Y', N'admin', CAST(0x0000A1A401060044 AS DateTime), N'admin', CAST(0x0000A1A401224A74 AS DateTime), NULL)


INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(1 AS Numeric(18, 0)), N'10', N'1101', N'Y', N'Y', N'Setup/ItemInformation/Group', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(2 AS Numeric(18, 0)), N'10', N'1102', N'Y', N'Y', N'Setup/ItemInformation/Product', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(3 AS Numeric(18, 0)), N'10', N'1103', N'Y', N'Y', N'Setup/ItemInformation/Overhead', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(4 AS Numeric(18, 0)), N'10', N'1201', N'Y', N'Y', N'Setup/Vedor/Group', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(5 AS Numeric(18, 0)), N'10', N'1202', N'Y', N'Y', N'Setup/Vedor/Vendor', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(6 AS Numeric(18, 0)), N'10', N'1301', N'Y', N'Y', N'Setup/Customer/Group', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(7 AS Numeric(18, 0)), N'10', N'1302', N'Y', N'Y', N'Setup/Customer/Customer', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(8 AS Numeric(18, 0)), N'10', N'1401', N'Y', N'Y', N'Setup/Bank/Bank', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(9 AS Numeric(18, 0)), N'10', N'1501', N'Y', N'Y', N'Setup/Vehicle/Vehicle', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(10 AS Numeric(18, 0)), N'10', N'1601', N'Y', N'Y', N'Setup/PriceDeclaration/VAT-1', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(11 AS Numeric(18, 0)), N'10', N'1602', N'Y', N'Y', N'Setup/PriceDeclaration/Service', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(12 AS Numeric(18, 0)), N'10', N'1603', N'Y', N'Y', N'Setup/PriceDeclaration/Tender', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(13 AS Numeric(18, 0)), N'10', N'1701', N'Y', N'Y', N'Setup/Company/Commpany', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(14 AS Numeric(18, 0)), N'10', N'1801', N'Y', N'Y', N'Setup/FiscalYear/FiscalYear', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(15 AS Numeric(18, 0)), N'10', N'1901', N'Y', N'Y', N'Setup/Configuration/Settings', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(16 AS Numeric(18, 0)), N'10', N'1902', N'Y', N'Y', N'Setup/Configuration/Prefix', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(17 AS Numeric(18, 0)), N'10', N'11001', N'Y', N'Y', N'Setup/Import/Import', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(18 AS Numeric(18, 0)), N'10', N'11101', N'Y', N'Y', N'Setup/Conversion/Conversion', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(19 AS Numeric(18, 0)), N'10', N'11201', N'Y', N'Y', N'Setup/Currency/Currency', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(20 AS Numeric(18, 0)), N'10', N'11202', N'Y', N'Y', N'Setup/Currency/Conversion', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(21 AS Numeric(18, 0)), N'10', N'2101', N'Y', N'Y', N'Purchase/Purchase/Local', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(22 AS Numeric(18, 0)), N'10', N'2102', N'Y', N'Y', N'Purchase/Purchase/Trading', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(23 AS Numeric(18, 0)), N'10', N'2103', N'Y', N'Y', N'Purchase/Purchase/Import', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(24 AS Numeric(18, 0)), N'10', N'2104', N'Y', N'Y', N'Purchase/Purchase/InputService', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(25 AS Numeric(18, 0)), N'10', N'2105', N'Y', N'Y', N'Purchase/Purchase/PurchaseReturn', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(26 AS Numeric(18, 0)), N'10', N'3101', N'Y', N'Y', N'Production/Issue/Issue', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(27 AS Numeric(18, 0)), N'10', N'3102', N'Y', N'Y', N'Production/Issue/Return', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(28 AS Numeric(18, 0)), N'10', N'3201', N'Y', N'Y', N'Production/Receive/WIP', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(29 AS Numeric(18, 0)), N'10', N'3202', N'Y', N'Y', N'Production/Receive/FGReceive', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(30 AS Numeric(18, 0)), N'10', N'3203', N'Y', N'Y', N'Production/Receive/Return', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(31 AS Numeric(18, 0)), N'10', N'4101', N'Y', N'Y', N'Sale/Sale/Local', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(32 AS Numeric(18, 0)), N'10', N'4102', N'Y', N'Y', N'Sale/Sale/Service', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(33 AS Numeric(18, 0)), N'10', N'4103', N'Y', N'Y', N'Sale/Sale/Trading', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(34 AS Numeric(18, 0)), N'10', N'4104', N'Y', N'Y', N'Sale/Sale/Export', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(35 AS Numeric(18, 0)), N'10', N'4105', N'Y', N'Y', N'Sale/Sale/Tender', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(36 AS Numeric(18, 0)), N'10', N'4201', N'Y', N'Y', N'Sale/Transfer/Transfer', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(37 AS Numeric(18, 0)), N'10', N'5101', N'Y', N'Y', N'Deposit/Treasury/Treasury', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(38 AS Numeric(18, 0)), N'10', N'5201', N'Y', N'Y', N'Deposit/VDS/VDS', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(39 AS Numeric(18, 0)), N'10', N'5301', N'Y', N'Y', N'Deposit/SD/SD', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(40 AS Numeric(18, 0)), N'10', N'6101', N'Y', N'Y', N'Toll/Client/RawIssue', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(41 AS Numeric(18, 0)), N'10', N'6102', N'Y', N'Y', N'Toll/Client/FGReceive', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(42 AS Numeric(18, 0)), N'10', N'6201', N'Y', N'Y', N'Toll/Contractor/RawReceive', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(43 AS Numeric(18, 0)), N'10', N'6202', N'Y', N'Y', N'Toll/Contractor/FGProduction', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(44 AS Numeric(18, 0)), N'10', N'6203', N'Y', N'Y', N'Toll/Contractor/FGIssue', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(45 AS Numeric(18, 0)), N'10', N'7101', N'Y', N'Y', N'Adjustment/AdjustmentHead/Head', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(46 AS Numeric(18, 0)), N'10', N'7102', N'Y', N'Y', N'Adjustment/AdjustmentHead/Transaction', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(47 AS Numeric(18, 0)), N'10', N'7201', N'Y', N'Y', N'Adjustment/Purchase/DN', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(48 AS Numeric(18, 0)), N'10', N'7202', N'Y', N'Y', N'Adjustment/Purchase/CN', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(49 AS Numeric(18, 0)), N'10', N'7301', N'Y', N'Y', N'Adjustment/Sale/CN', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(50 AS Numeric(18, 0)), N'10', N'7302', N'Y', N'Y', N'Adjustment/Sale/DN', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(51 AS Numeric(18, 0)), N'10', N'7401', N'Y', N'Y', N'Adjustment/Dispose/26', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(52 AS Numeric(18, 0)), N'10', N'7402', N'Y', N'Y', N'Adjustment/Dispose/27', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(53 AS Numeric(18, 0)), N'10', N'7501', N'Y', N'Y', N'Adjustment/DDB/DDB', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(54 AS Numeric(18, 0)), N'10', N'8101', N'Y', N'Y', N'NBRReport/VAT1/BOM', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(55 AS Numeric(18, 0)), N'10', N'8201', N'Y', N'Y', N'NBRReport/VAT16/VAT16', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(56 AS Numeric(18, 0)), N'10', N'8301', N'Y', N'Y', N'NBRReport/VAT17/VAT17', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(57 AS Numeric(18, 0)), N'10', N'8401', N'Y', N'Y', N'NBRReport/VAT18/VAT18', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(58 AS Numeric(18, 0)), N'10', N'8501', N'Y', N'Y', N'NBRReport/VAT19/VAT19', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(59 AS Numeric(18, 0)), N'10', N'8601', N'Y', N'Y', N'NBRReport/SDReport/SDReport', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(60 AS Numeric(18, 0)), N'10', N'9101', N'Y', N'Y', N'MISReport/Purchase/Purchase', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(61 AS Numeric(18, 0)), N'10', N'9102', N'Y', N'Y', N'MISReport/Purchase/Trading', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(62 AS Numeric(18, 0)), N'10', N'9201', N'Y', N'Y', N'MISReport/Production/Issue', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(63 AS Numeric(18, 0)), N'10', N'9202', N'Y', N'Y', N'MISReport/Production/IssueReturn', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(64 AS Numeric(18, 0)), N'10', N'9203', N'Y', N'Y', N'MISReport/Production/Receive', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(65 AS Numeric(18, 0)), N'10', N'9204', N'Y', N'Y', N'MISReport/Production/InnerIssue', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(66 AS Numeric(18, 0)), N'10', N'9301', N'Y', N'Y', N'MISReport/Toll/Issue', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(67 AS Numeric(18, 0)), N'10', N'9302', N'Y', N'Y', N'MISReport/Toll/Receive', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(68 AS Numeric(18, 0)), N'10', N'9401', N'Y', N'Y', N'MISReport/Sale/Local', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(69 AS Numeric(18, 0)), N'10', N'9402', N'Y', N'Y', N'MISReport/Sale/Service', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(70 AS Numeric(18, 0)), N'10', N'9403', N'Y', N'Y', N'MISReport/Sale/Trading', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(71 AS Numeric(18, 0)), N'10', N'9404', N'Y', N'Y', N'MISReport/Sale/Export', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(72 AS Numeric(18, 0)), N'10', N'9501', N'Y', N'Y', N'MISReport/Stock/Stock', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(73 AS Numeric(18, 0)), N'10', N'9601', N'Y', N'Y', N'MISReport/Deposit/Deposit', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(74 AS Numeric(18, 0)), N'10', N'9701', N'Y', N'Y', N'MISReport/VAT16/VAT16', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(75 AS Numeric(18, 0)), N'10', N'9801', N'Y', N'Y', N'MISReport/VAT17/VAT17', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(76 AS Numeric(18, 0)), N'10', N'9901', N'Y', N'Y', N'MISReport/VAT18/VAT18', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(77 AS Numeric(18, 0)), N'10', N'91001', N'Y', N'Y', N'MISReport/SDDeposit/SDDeposit', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(78 AS Numeric(18, 0)), N'10', N'10101', N'Y', N'Y', N'SetupReport/Product/Type', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(79 AS Numeric(18, 0)), N'10', N'10102', N'Y', N'Y', N'SetupReport/Product/Group', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(80 AS Numeric(18, 0)), N'10', N'10103', N'Y', N'Y', N'SetupReport/Product/Product', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(81 AS Numeric(18, 0)), N'10', N'10201', N'Y', N'Y', N'SetupReport/Customer/Group', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(82 AS Numeric(18, 0)), N'10', N'10202', N'Y', N'Y', N'SetupReport/Customer/Customer', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(83 AS Numeric(18, 0)), N'10', N'10301', N'Y', N'Y', N'SetupReport/Vendor/Group', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(84 AS Numeric(18, 0)), N'10', N'10302', N'Y', N'Y', N'SetupReport/Vendor/Vendor', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(85 AS Numeric(18, 0)), N'10', N'10401', N'Y', N'Y', N'SetupReport/Bank/Bank', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(86 AS Numeric(18, 0)), N'10', N'10501', N'Y', N'Y', N'SetupReport/Vehicle/Vehicle', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(87 AS Numeric(18, 0)), N'10', N'20101', N'Y', N'Y', N'UserAccount/NewAccount/NewAccount', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(88 AS Numeric(18, 0)), N'10', N'20201', N'Y', N'Y', N'UserAccount/PasswordChange/PasswordChange', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))
INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (CAST(89 AS Numeric(18, 0)), N'10', N'43', N'Y', N'Y', N'UserAccount/UserRole/UserRole', N'admin', CAST(0x0000A1E700BBA328 AS DateTime), N'admin', CAST(0x0000A1E700BBA328 AS DateTime))

/****** Object:  Table [dbo].[Settings]    Script Date: 04/18/2013 12:35:04 ******/
SET IDENTITY_INSERT [dbo].[Settings] ON
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Purchase', N'TotalPrice', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'Purchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (3, N'Sale', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'Issue', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'Sale', N'QuantityDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'Sale', N'TakaDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'Sale', N'DollerDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'Sale', N'RateDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'Sale', N'InvoiceDate', N'2013-01-04', N'date', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'Sale', N'CustomerName', N'-', N'string', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'ImportPurchase', N'FixedCnF', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'ImportPurchase', N'FixedInsurance', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'ImportPurchase', N'CalculativeAV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'ImportPurchase', N'FixedCD', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'ImportPurchase', N'FixedRD', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'ImportPurchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'ImportPurchase', N'FixedTVB', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'ImportPurchase', N'FixedTVA', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'ImportPurchase', N'FixedATV', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'ImportPurchase', N'FixedOthers', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'ImportPurchase', N'FixedSD', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'AutoCode', N'Item', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'AutoCode', N'Customer', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'AutoCode', N'Vendor', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'AutoCode', N'Bank', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'AutoCode', N'OverHead', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'IssueFromBOM', N'IssueFromBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'PrepaidVAT', N'PrepaidVAT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'Sale', N'ItemNature', N'ELECTRIC WIRE/CABLE', N'string', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'BOM', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'BOM', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (39, N'BOM', N'ItemNature', N'SHAFIQKAMRUL', N'string', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (40, N'BOM', N'IntermediateProduction', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (42, N'Sale', N'NumberOfItems', N'15', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (43, N'Production', N'ProductionWithoutBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (44, N'IssueFromBOM', N'IssueAutoPost', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
SET IDENTITY_INSERT [dbo].[Settings] OFF


/****** Object:  Table [dbo].[CurrencyConversion]    Script Date: 04/18/2013 12:35:04 ******/
INSERT [dbo].[CurrencyConversion] ([CurrencyConversionId], [CurrencyCodeFrom], [CurrencyCodeTo], [CurrencyRate], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ConversionDate]) VALUES (N'1', N'249', N'260', CAST(80.0000000000 AS Decimal(18, 10)), N'NA', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime), CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[CurrencyConversion] ([CurrencyConversionId], [CurrencyCodeFrom], [CurrencyCodeTo], [CurrencyRate], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ConversionDate]) VALUES (N'2', N'260', N'260', CAST(1.0000000000 AS Decimal(18, 10)), N'NA', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime), CAST(0x0000000000000000 AS DateTime))
/****** Object:  Table [dbo].[Currencies]    Script Date: 04/18/2013 12:35:04 ******/
SET IDENTITY_INSERT [dbo].[Currencies] ON
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (246, N'Afghanistan Afghani', N'AFN', N'Afghanistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (247, N'Albanian Lek', N'ALL', N'Albania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (248, N'Algerian Dinar', N'DZD', N'Algeria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (249, N'US Dollar', N'USD', N'American Samoa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (250, N'Euro', N'EUR', N'Andorra', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (251, N'Angolan Kwanza', N'AOA', N'Angola', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (252, N'East Caribbean Dollar', N'XCD', N'Anguilla', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (253, N'Argentine Peso', N'ARS', N'Argentina', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (254, N'Armenian Dram', N'AMD', N'Armenia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (255, N'Aruban Guilder', N'AWG', N'Aruba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (256, N'Australian Dollar', N'AUD', N'Australia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (257, N'Azerbaijan New Manat', N'AZN', N'Azerbaijan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (258, N'Bahamian Dollar', N'BSD', N'Bahamas', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (259, N'Bahraini Dinar', N'BHD', N'Bahrain', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (260, N'Bangladeshi Taka', N'BDT', N'Bangladesh', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (261, N'Barbados Dollar', N'BBD', N'Barbados', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (262, N'Belarussian Ruble', N'BYR', N'Belarus', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (263, N'Belize Dollar', N'BZD', N'Belize', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (264, N'CFA Franc BCEAO', N'XOF', N'Benin', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (265, N'Bermudian Dollar', N'BMD', N'Bermuda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (266, N'Bhutan Ngultrum', N'BTN', N'Bhutan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (267, N'Boliviano', N'BOB', N'Bolivia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (268, N'Marka', N'BAM', N'Bosnia-Herzegovina', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (269, N'Botswana Pula', N'BWP', N'Botswana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (270, N'Norwegian Krone', N'NOK', N'Bouvet Island', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (271, N'Brazilian Real', N'BRL', N'Brazil', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (272, N'Brunei Dollar', N'BND', N'Brunei Darussalam', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (273, N'Bulgarian Lev', N'BGN', N'Bulgaria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (274, N'Burundi Franc', N'BIF', N'Burundi', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (275, N'Kampuchean Riel', N'KHR', N'Cambodia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (276, N'CFA Franc BEAC', N'XAF', N'Cameroon', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (277, N'Canadian Dollar', N'CAD', N'Canada', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (278, N'Cape Verde Escudo', N'CVE', N'Cape Verde', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (279, N'Cayman Islands Dollar', N'KYD', N'Cayman Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (280, N'Chilean Peso', N'CLP', N'Chile', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (281, N'Yuan Renminbi', N'CNY', N'China', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (282, N'Colombian Peso', N'COP', N'Colombia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (283, N'Comoros Franc', N'KMF', N'Comoros', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (284, N'Francs', N'CDF', N'Congo, Dem. Republic', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (285, N'New Zealand Dollar', N'NZD', N'Cook Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (286, N'Costa Rican Colon', N'CRC', N'Costa Rica', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (287, N'Croatian Kuna', N'HRK', N'Croatia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (288, N'Cuban Peso', N'CUP', N'Cuba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (289, N'Czech Koruna', N'CZK', N'Czech Rep.', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (290, N'Danish Krone', N'DKK', N'Denmark', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (291, N'Djibouti Franc', N'DJF', N'Djibouti', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (292, N'Dominican Peso', N'DOP', N'Dominican Republic', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (293, N'Ecuador Sucre', N'ECS', N'Ecuador', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (294, N'Egyptian Pound', N'EGP', N'Egypt', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (295, N'El Salvador Colon', N'SVC', N'El Salvador', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (296, N'Eritrean Nakfa', N'ERN', N'Eritrea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (297, N'Ethiopian Birr', N'ETB', N'Ethiopia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (298, N'Falkland Islands Pound', N'FKP', N'Falkland Islands (Malvinas)', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (299, N'Fiji Dollar', N'FJD', N'Fiji', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (300, N'Gambian Dalasi', N'GMD', N'Gambia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (301, N'Georgian Lari', N'GEL', N'Georgia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (302, N'Ghanaian Cedi', N'GHS', N'Ghana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (303, N'Gibraltar Pound', N'GIP', N'Gibraltar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (304, N'Pound Sterling', N'GBP', N'Great Britain', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (305, N'East Carribean Dollar', N'XCD', N'Grenada', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (306, N'Guatemalan Quetzal', N'QTQ', N'Guatemala', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (307, N'Pound Sterling', N'GGP', N'Guernsey', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (308, N'Guinea Franc', N'GNF', N'Guinea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (309, N'Guinea-Bissau Peso', N'GWP', N'Guinea Bissau', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (310, N'Guyana Dollar', N'GYD', N'Guyana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (311, N'Haitian Gourde', N'HTG', N'Haiti', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (312, N'Honduran Lempira', N'HNL', N'Honduras', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (313, N'Hong Kong Dollar', N'HKD', N'Hong Kong', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (314, N'Hungarian Forint', N'HUF', N'Hungary', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (315, N'Iceland Krona', N'ISK', N'Iceland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (316, N'Indian Rupee', N'INR', N'India', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (317, N'Indonesian Rupiah', N'IDR', N'Indonesia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (318, N'Iranian Rial', N'IRR', N'Iran', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (319, N'Iraqi Dinar', N'IQD', N'Iraq', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (320, N'Israeli New Shekel', N'ILS', N'Israel', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (321, N'Jamaican Dollar', N'JMD', N'Jamaica', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (322, N'Japanese Yen', N'JPY', N'Japan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (323, N'Jordanian Dinar', N'JOD', N'Jordan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (324, N'Kazakhstan Tenge', N'KZT', N'Kazakhstan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (325, N'Kenyan Shilling', N'KES', N'Kenya', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (326, N'North Korean Won', N'KPW', N'Korea-North', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (327, N'Korean Won', N'KRW', N'Korea-South', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (328, N'Kuwaiti Dinar', N'KWD', N'Kuwait', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (329, N'Som', N'KGS', N'Kyrgyzstan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (330, N'Lao Kip', N'LAK', N'Laos', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (331, N'Latvian Lats', N'LVL', N'Latvia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (332, N'Lebanese Pound', N'LBP', N'Lebanon', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (333, N'Lesotho Loti', N'LSL', N'Lesotho', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (334, N'Liberian Dollar', N'LRD', N'Liberia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (335, N'Libyan Dinar', N'LYD', N'Libya', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (336, N'Swiss Franc', N'CHF', N'Liechtenstein', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (337, N'Lithuanian Litas', N'LTL', N'Lithuania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (338, N'Macau Pataca', N'MOP', N'Macau', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (339, N'Denar', N'MKD', N'Macedonia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (340, N'Malagasy Franc', N'MGF', N'Madagascar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (341, N'Malawi Kwacha', N'MWK', N'Malawi', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (342, N'Malaysian Ringgit', N'MYR', N'Malaysia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (343, N'Maldive Rufiyaa', N'MVR', N'Maldives', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (344, N'Mauritanian Ouguiya', N'MRO', N'Mauritania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (345, N'Mauritius Rupee', N'MUR', N'Mauritius', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
GO
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (346, N'Mexican Nuevo Peso', N'MXN', N'Mexico', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (347, N'Moldovan Leu', N'MDL', N'Moldova', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (348, N'Mongolian Tugrik', N'MNT', N'Mongolia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (349, N'Moroccan Dirham', N'MAD', N'Morocco', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (350, N'Mozambique Metical', N'MZN', N'Mozambique', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (351, N'Myanmar Kyat', N'MMK', N'Myanmar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (352, N'Namibian Dollar', N'NAD', N'Namibia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (353, N'Nepalese Rupee', N'NPR', N'Nepal', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (354, N'Netherlands Antillean Guilder', N'ANG', N'Netherlands Antilles', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (355, N'CFP Franc', N'XPF', N'New Caledonia (French)', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (356, N'Nicaraguan Cordoba Oro', N'NIO', N'Nicaragua', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (357, N'Nigerian Naira', N'NGN', N'Nigeria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (358, N'Omani Rial', N'OMR', N'Oman', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (359, N'Pakistan Rupee', N'PKR', N'Pakistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (360, N'Panamanian Balboa', N'PAB', N'Panama', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (361, N'Papua New Guinea Kina', N'PGK', N'Papua New Guinea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (362, N'Paraguay Guarani', N'PYG', N'Paraguay', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (363, N'Peruvian Nuevo Sol', N'PEN', N'Peru', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (364, N'Philippine Peso', N'PHP', N'Philippines', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (365, N'Polish Zloty', N'PLN', N'Poland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (366, N'Qatari Rial', N'QAR', N'Qatar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (367, N'Romanian New Leu', N'RON', N'Romania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (368, N'Russian Ruble', N'RUB', N'Russia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (369, N'Rwanda Franc', N'RWF', N'Rwanda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (370, N'St. Helena Pound', N'SHP', N'Saint Helena', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (371, N'Samoan Tala', N'WST', N'Samoa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (372, N'Dobra', N'STD', N'Sao Tome and Principe', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (373, N'Saudi Riyal', N'SAR', N'Saudi Arabia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (374, N'Dinar', N'RSD', N'Serbia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (375, N'Seychelles Rupee', N'SCR', N'Seychelles', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (376, N'Sierra Leone Leone', N'SLL', N'Sierra Leone', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (377, N'Singapore Dollar', N'SGD', N'Singapore', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (378, N'Solomon Islands Dollar', N'SBD', N'Solomon Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (379, N'Somali Shilling', N'SOS', N'Somalia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (380, N'South African Rand', N'ZAR', N'South Africa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (381, N'South Sudan Pound', N'SSP', N'South Sudan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (382, N'Sri Lanka Rupee', N'LKR', N'Sri Lanka', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (383, N'Sudanese Pound', N'SDG', N'Sudan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (384, N'Surinam Dollar', N'SRD', N'Suriname', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (385, N'Swaziland Lilangeni', N'SZL', N'Swaziland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (386, N'Swedish Krona', N'SEK', N'Sweden', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (387, N'Syrian Pound', N'SYP', N'Syria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (388, N'Taiwan Dollar', N'TWD', N'Taiwan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (389, N'Tajik Somoni', N'TJS', N'Tajikistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (390, N'Tanzanian Shilling', N'TZS', N'Tanzania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (391, N'Thai Baht', N'THB', N'Thailand', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (392, N'Tongan Paanga', N'TOP', N'Tonga', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (393, N'Trinidad and Tobago Dollar', N'TTD', N'Trinidad and Tobago', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (394, N'Tunisian Dollar', N'TND', N'Tunisia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (395, N'Turkish Lira', N'TRY', N'Turkey', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (396, N'Manat', N'TMT', N'Turkmenistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (397, N'Uganda Shilling', N'UGX', N'Uganda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (398, N'Ukraine Hryvnia', N'UAH', N'Ukraine', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (399, N'Arab Emirates Dirham', N'AED', N'United Arab Emirates', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (400, N'Uruguayan Peso', N'UYU', N'Uruguay', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (401, N'Uzbekistan Sum', N'UZS', N'Uzbekistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (402, N'Vanuatu Vatu', N'VUV', N'Vanuatu', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (403, N'Venezuelan Bolivar', N'VEF', N'Venezuela', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (404, N'Vietnamese Dong', N'VND', N'Vietnam', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (405, N'Yemeni Rial', N'YER', N'Yemen', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (406, N'Zambian Kwacha', N'ZMW', N'Zambia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (407, N'Zimbabwe Dollar', N'ZWD', N'Zimbabwe', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime))
SET IDENTITY_INSERT [dbo].[Currencies] OFF
/****** Object:  Table [dbo].[Codes]    Script Date: 04/18/2013 12:35:04 ******/
SET IDENTITY_INSERT [dbo].[Codes] ON
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Purchase', N'Other', N'PUR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'Purchase', N'Trading', N'PTD', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'Receive', N'Other', N'REC', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'TollReceive', N'TollReceive', N'TOR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'Purchase', N'PurchaseReturn', N'PRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'Purchase', N'InputService', N'PIS', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'Purchase', N'Import', N'IMP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'TollReceiveRaw', N'TollReceiveRaw', N'TRW', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'Issue', N'Other', N'ISU', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'Issue', N'IssueReturn', N'ISR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'Receive', N'ReceiveReturn', N'RER', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'Receive', N'WIP', N'WIP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'TollFinishReceive', N'TollFinishReceive', N'TFR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'Sale', N'Other', N'INV', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'Sale', N'Trading', N'STP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (17, N'Sale', N'Debit', N'DEN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'Sale', N'Credit', N'CRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'Sale', N'Export', N'STR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'InternalIssue', N'InternalIssue', N'TRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (21, N'Sale', N'Service', N'SER', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (22, N'Sale', N'Tender', N'STN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'TollIssue', N'TollIssue', N'EDF', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'TollFinishIssue', N'TollFinishIssue', N'TFI', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'Deposit', N'Treasury', N'DEP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'Deposit', N'VDS', N'VDS', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'Dispose', N'Raw', N'DSR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'Dispose', N'Finish', N'DSF', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'Adjustment', N'Both', N'ADJ', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'SDDeposit', N'Treasury', N'SDP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'DDB', N'DDB', N'DDB', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'Purchase', N'PurchaseDN', N'PDN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'Purchase', N'PurchaseCN', N'PCN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'Sale', N'ServiceNS', N'SNS', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (35, N'Purchase', N'ServiceNS', N'PSN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (36, N'Purchase', N'Service', N'PSE', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))
SET IDENTITY_INSERT [dbo].[Codes] OFF


           
                ";
                #endregion TableDefaultData Back


                top2 = "go";

                IEnumerable<string> commandStringsDefaultData = Regex.Split(sqlText, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                foreach (string commandString in commandStringsDefaultData)
                {
                    if (commandString.Trim() != "")
                    {
                        SqlCommand cmdIdExist1 = new SqlCommand(commandString, currConn);

                        cmdIdExist1.Transaction = transaction;
                        transResult = (int)cmdIdExist1.ExecuteNonQuery();
                        if (transResult < 0)
                        {
                            throw new ArgumentNullException("Insert Default Data to Database'" + databaseName + "'", MessageVM.dbMsgTableDefaultData);
                        }
                    }
                }

                #endregion TableCreate

                #region Insert Company Profile

                //string NewCompanyID = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyID);
                string tom = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyName);
                string jary = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyLegalName);
                string miki = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.VatRegistrationNo);
                //string mouse = Converter.DESEncrypt(PassPhrase, EnKey, GetHardwareID());
                string mouse = Converter.DESEncrypt(PassPhrase, EnKey, GetServerHardwareId(connVM));


                sqlText = "";
                sqlText += " insert into CompanyProfiles(";
                sqlText += " CompanyID,";
                sqlText += " CompanyName,";
                sqlText += " CompanyLegalName,";
                sqlText += " Address1,";
                sqlText += " Address2,";
                sqlText += " Address3,";
                sqlText += " City,";
                sqlText += " ZipCode,";
                sqlText += " TelephoneNo,";
                sqlText += " FaxNo,";
                sqlText += " Email,";
                sqlText += " ContactPerson,";
                sqlText += " ContactPersonDesignation,";
                sqlText += " ContactPersonTelephone,";
                sqlText += " ContactPersonEmail,";
                sqlText += " TINNo,";
                sqlText += " VatRegistrationNo,";
                sqlText += " Comments,";
                sqlText += " ActiveStatus,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " StartDateTime,";
                sqlText += " FYearStart,";
                sqlText += " FYearEnd,";
                sqlText += " Tom,";
                sqlText += " Jary,";
                sqlText += " Miki,";
                sqlText += " Mouse)";

                sqlText += " values(";
                //sqlText += "'" + companyProfiles.CompanyID + "' ,";
                sqlText += "@CompanyID,";
                //sqlText += "'" + companyProfiles.CompanyName + "' ,";
                sqlText += "@CompanyName,";
                //sqlText += "'" + companyProfiles.CompanyLegalName + "' ,";
                sqlText += "@CompanyLegalName,";
                //sqlText += "'" + companyProfiles.Address1 + "' ,";
                sqlText += "@Address1,";
                //sqlText += "'" + companyProfiles.Address2 + "' ,";
                sqlText += "@Address2,";
                //sqlText += "'" + companyProfiles.Address3 + "' ,";
                sqlText += "@Address3,";
                //sqlText += "'" + companyProfiles.City + "' ,";
                sqlText += "@City,";
                //sqlText += "'" + companyProfiles.ZipCode + "' ,";
                sqlText += "@ZipCode,";
                //sqlText += "'" + companyProfiles.TelephoneNo + "' ,";
                sqlText += "@TelephoneNo,";
                //sqlText += "'" + companyProfiles.FaxNo + "' ,";
                sqlText += "@FaxNo,";
                //sqlText += "'" + companyProfiles.Email + "' ,";
                sqlText += "@Email,";
                //sqlText += "'" + companyProfiles.ContactPerson + "' ,";
                sqlText += "@ContactPerson,";
                //sqlText += "'" + companyProfiles.ContactPersonDesignation + "' ,";
                sqlText += "@ContactPersonDesignation,";
                //sqlText += "'" + companyProfiles.ContactPersonTelephone + "' ,";
                sqlText += "@ContactPersonTelephone,";
                //sqlText += "'" + companyProfiles.ContactPersonEmail + "' ,";
                sqlText += "@ContactPersonEmail,";
                //sqlText += "'" + companyProfiles.TINNo + "' ,";
                sqlText += "@TINNo,";
                //sqlText += "'" + companyProfiles.VatRegistrationNo + "' ,";
                sqlText += "@VatRegistrationNo,";
                //sqlText += "'" + companyProfiles.Comments + "' ,";
                sqlText += "@Comments,";
                //sqlText += "'" + companyProfiles.ActiveStatus + "' ,";
                sqlText += "@ActiveStatus,";
                sqlText += "'SuperAdmin' ,";
                sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' ,";
                sqlText += "'SuperAdmin' ,";
                sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' ,";
                //sqlText += "'" + companyProfiles.StartDateTime + "' ,";
                sqlText += "@StartDateTime,";
                //sqlText += "'" + companyProfiles.FYearStart + "' ,";
                sqlText += "@FYearStart,";
                //sqlText += "'" + companyProfiles.FYearEnd + "' , ";
                sqlText += "@FYearEnd,";
                //sqlText += "'" + tom + "' , ";
                sqlText += "@tom,";
                //sqlText += "'" + jary + "' , ";
                sqlText += "@jary,";
                //sqlText += "'" + miki + "' , ";
                sqlText += "@miki,";
                //sqlText += "'" + mouse + "' ";
                sqlText += "@mouse";

                sqlText += " )";

                //try
                //{


                SqlCommand cmdCompanyProfile = new SqlCommand(sqlText, currConn);

                //BugsBD
                SqlParameter parameter2 = new SqlParameter("@CompanyID", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.CompanyID;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@CompanyName", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.CompanyName;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@CompanyLegalName", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.CompanyLegalName;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@Address1", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.Address1;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@Address2", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.Address2;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@Address3", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.Address3;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@City", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.City;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@ZipCode", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.ZipCode;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@TelephoneNo", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.TelephoneNo;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@FaxNo", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.FaxNo;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@Email", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.Email;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@ContactPerson", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.ContactPerson;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@ContactPersonDesignation", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.ContactPersonDesignation;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@ContactPersonTelephone", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.ContactPersonTelephone;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@ContactPersonEmail", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.ContactPersonEmail;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@TINNo", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.TINNo;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@VatRegistrationNo", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.VatRegistrationNo;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@Comments", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.Comments;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@ActiveStatus", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.ActiveStatus;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@StartDateTime", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.StartDateTime;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@FYearStart", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.FYearStart;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@FYearEnd", SqlDbType.VarChar, 250);
                parameter2.Value = companyProfiles.FYearEnd;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@tom", SqlDbType.VarChar, 250);
                parameter2.Value = tom;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@jary", SqlDbType.VarChar, 250);
                parameter2.Value = jary;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@miki", SqlDbType.VarChar, 250);
                parameter2.Value = miki;
                cmdCompanyProfile.Parameters.Add(parameter2);

                parameter2 = new SqlParameter("@mouse", SqlDbType.VarChar, 250);
                parameter2.Value = mouse;
                cmdCompanyProfile.Parameters.Add(parameter2);

                cmdCompanyProfile.Transaction = transaction;

                transResult = (int)cmdCompanyProfile.ExecuteNonQuery();
                if (transResult < 0)
                {

                    throw new ArgumentNullException("Insert company Profile data to Database('" + databaseName + "')", MessageVM.dbMsgCompanyInformationNotSave);
                }
                newID = companyProfiles.CompanyID;


                #endregion Insert Company Profile

                #region Insert Fiscal Year
                foreach (var Item in fiscalDetails.ToList())
                {

                    #region Insert only DetailTable

                    sqlText = "";
                    sqlText += " insert into FiscalYear(";
                    sqlText += " FiscalYearName,";
                    sqlText += " CurrentYear,";
                    sqlText += " PeriodID,";
                    sqlText += " PeriodName,";
                    sqlText += " PeriodStart,";
                    sqlText += " PeriodEnd,";
                    sqlText += " PeriodLock,";
                    sqlText += " GLLock,";
                    sqlText += " CreatedBy,";
                    sqlText += " CreatedOn,";
                    sqlText += " LastModifiedBy,";
                    sqlText += " LastModifiedOn";

                    sqlText += " )";
                    sqlText += " values(	";

                    sqlText += "'" + Item.FiscalYearName + "',";
                    sqlText += "'" + Item.CurrentYear + "',";
                    sqlText += "'" + Item.PeriodID + "',";
                    sqlText += "'" + Item.PeriodName + "',";
                    sqlText += "'" + Item.PeriodStart + "',";
                    sqlText += "'" + Item.PeriodEnd + "',";
                    sqlText += "'" + Item.PeriodLock + "',";
                    sqlText += "'" + Item.GLLock + "',";
                    sqlText += "'SuperAdmin',";
                    sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    sqlText += "'SuperAdmin',";
                    sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'";

                    sqlText += ")	";


                    SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                    cmdInsDetail.Transaction = transaction;
                    transResult = (int)cmdInsDetail.ExecuteNonQuery();

                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException("Insert Fiscal Year data to Database('" + databaseName + "')", MessageVM.dbMsgCFiscalYearNotSave);
                    }
                    #endregion Insert only DetailTable
                }



                #endregion Insert Fiscal Year

                #region Insert Sys DB Information

                string CompanyID = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyID);
                string CompanyName = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyName);
                string DatabaseName = Converter.DESEncrypt(PassPhrase, EnKey, databaseName);
                string ActiveStatus = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.ActiveStatus);
                //string CompanyLegalName = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyLegalName);
                sqlText = "";
                sqlText += " INSERT INTO CompanyInformations (CompanyID,CompanyName,DatabaseName,ActiveStatus,Serial)";
                sqlText += " VALUES(" +
                           "'" + CompanyID + "'," +
                           "'" + CompanyName + "'," +
                           "'" + DatabaseName + "'," +
                           "'" + ActiveStatus + "'," +
                    //"'" + CompanyLegalName + "'," +
                           "(select isnull(max(Serial ),0)+1 FROM  CompanyInformations)" +

                           ")";
                currConn.ChangeDatabase("SymphonyVATSys");
                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                cmdPrefetch.Transaction = transaction;

                transResult = (int)cmdPrefetch.ExecuteNonQuery();
                if (transResult < 0)
                {
                    throw new ArgumentNullException("Insert Company List Information", MessageVM.dbMsgDBInfoInsert);
                }
                #endregion Insert Sys DB Information

                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        #region SuccessResult

                        retResults[0] = "Success";
                        retResults[1] = "Requested Company Created successfully.";
                        retResults[2] = newID;
                        #endregion SuccessResult

                    }

                }

                #endregion Commit
            }
            #endregion Try

            #region Catch and Finall
            catch (ArgumentNullException arg)
            {
                if (arg.ParamName.ToLower() != "deletedb")
                {
                    currConn.Close();
                    currConn.Open();
                    currConn.ChangeDatabase("master");
                    #region check Database and delete
                    sqlText = "";
                    sqlText += " USE [master]";
                    sqlText += " drop DATABASE " + databaseName + "";

                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    cmdIdExist.ExecuteNonQuery();
                    #endregion check Database
                }
                FileLogger.Log("CommonDAL", "NewDBCreateOld", arg.ToString() + "\n" + sqlText);

                throw arg;
            }
            catch (SqlException sqlex)
            {

                currConn.Close();
                currConn.Open();
                currConn.ChangeDatabase("master");

                #region check Database and delete


                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " drop DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                cmdIdExist.Transaction = transaction;
                cmdIdExist.ExecuteNonQuery();


                #endregion check Database

                FileLogger.Log("CommonDAL", "NewDBCreateOld", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }

            catch (Exception ex)
            {

                currConn.Close();
                currConn.Open();
                currConn.ChangeDatabase("master");
                #region check Database and delete


                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " drop DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                cmdIdExist.Transaction = transaction;
                cmdIdExist.ExecuteNonQuery();

                #endregion check Database

                FileLogger.Log("CommonDAL", "NewDBCreateOld", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result
        }

        public string[] NewDBCreate24082019(CompanyProfileVM companyProfiles, string databaseName, List<FiscalYearVM> fiscalDetails, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string nextId = "";
            string newID = "";

            #endregion Initializ

            #region Try
            try
            {
                #region Validation

                if (string.IsNullOrEmpty(databaseName))
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoCompanyName);
                }
                if (fiscalDetails.Count() <= 0)
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoFiscalYear);
                }
                if (companyProfiles == null)
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoCompanyInformation);
                }

                #endregion Validation

                #region open connection and transaction sys / Master

                SysDBInfoVM.SysDatabaseName = "SymphonyVATSys";

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//start
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region check Database

                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " select COUNT(NAME) from sys.databases where name = '" + databaseName + "'";

                SqlCommand cmdDBExist = new SqlCommand(sqlText, currConn);
                transResult = (int)cmdDBExist.ExecuteScalar();
                if (transResult > 0)
                {
                    throw new ArgumentNullException("DeleteDB", MessageVM.dbMsgDBExist);
                }

                #endregion check Database

                #region CreateDatabase

                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " CREATE DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                transResult = (int)cmdIdExist.ExecuteNonQuery();
                if (transResult != -1)
                {
                    throw new ArgumentNullException("Create Database('" + databaseName + "')", MessageVM.dbMsgDBNotCreate);
                }

                #endregion CreateDatabase

                #region Change Database for New DB
                currConn.ChangeDatabase(databaseName);
                transaction = currConn.BeginTransaction(MessageVM.dbMsgMethodName);
                #endregion open connection and transaction

                #region TableCreate
                string top1;

                #region CreateTable Back
                //              sqlText = @"
                //
                //";
                #endregion CreateTable
                #region CreateTable Back
                sqlText = @"
                
CREATE TABLE [dbo].[AdjustmentHistorys](
	[AdjHistoryID] [varchar](50) NULL,
	[AdjHistoryNo] [varchar](50) NULL,
	[AdjId] [varchar](50) NULL,
	[AdjDate] [datetime] NULL,
	[AdjInputAmount] [decimal](25, 9) NULL,
	[AdjInputPercent] [decimal](25, 9) NULL,
	[AdjAmount] [decimal](25, 9) NULL,
	[AdjVATRate] [decimal](25, 9) NULL,
	[AdjVATAmount] [decimal](25, 9) NULL,
	[AdjSD] [decimal](25, 9) NULL,
	[AdjSDAmount] [decimal](25, 9) NULL,
	[AdjOtherAmount] [decimal](25, 9) NULL,
	[AdjType] [varchar](50) NULL,
	[AdjDescription] [varchar](500) NULL,
	[AdjReferance] [varchar](500) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReverseAdjHistoryNo] [varchar](20) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AdjustmentName]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[AdjustmentName](
	[AdjId] [varchar](50) NULL,
	[AdjName] [varchar](500) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BanderolProducts]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BanderolProducts](
	[BandProductId] [varchar](20) NOT NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[BanderolId] [varchar](50) NULL,
	[PackagingId] [varchar](50) NULL,
	[BUsedQty] [decimal](25, 9) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[WastageQty] [decimal](25, 9) NULL,
	[OpeningQty] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
 CONSTRAINT [PK_BanderolProducts] PRIMARY KEY CLUSTERED 
(
	[BandProductId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Banderols]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Banderols](
	[BanderolID] [varchar](50) NOT NULL,
	[BanderolName] [varchar](120) NULL,
	[BanderolSize] [varchar](50) NULL,
	[UOM] [varchar](120) NULL,
	[OpeningQty] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
	[Description] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Banderols] PRIMARY KEY CLUSTERED 
(
	[BanderolID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BankInformations]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BankInformations](
	[BankID] [varchar](20) NOT NULL,
	[BankCode] [varchar](50) NULL,
	[BankName] [varchar](120) NULL,
	[BranchName] [varchar](120) NULL,
	[AccountNumber] [varchar](120) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
 CONSTRAINT [PK_BankInformations] PRIMARY KEY CLUSTERED 
(
	[BankID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMCompanyOverhead]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMCompanyOverhead](
	[BOMOverHeadId] [varchar](20) NOT NULL,
	[BOMId] [varchar](20) NOT NULL,
	[OHLineNo] [int] NULL,
	[HeadName] [varchar](150) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[HeadAmount] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info5] [varchar](200) NULL,
	[RebatePercent] [decimal](25, 9) NULL,
	[RebateAmount] [decimal](25, 9) NULL,
	[AdditionalCost] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[HeadID] [varchar](20) NULL,
	[CustomerID] [varchar](20) NULL,
 CONSTRAINT [PK_BOMCompanyOverhead] PRIMARY KEY CLUSTERED 
(
	[BOMOverHeadId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMRaws]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMRaws](
	[BOMRawId] [varchar](20) NOT NULL,
	[BOMId] [varchar](20) NOT NULL,
	[BOMLineNo] [int] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[RawItemNo] [varchar](20) NOT NULL,
	[RawItemType] [varchar](50) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[UseQuantity] [decimal](25, 9) NULL,
	[WastageQuantity] [decimal](25, 9) NULL,
	[Cost] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[MarkUpValue] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMUQty] [decimal](25, 9) NULL,
	[UOMWQty] [decimal](25, 9) NULL,
	[TotalQuantity] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[PBOMId] [varchar](20) NULL,
	[PInvoiceNo] [varchar](20) NULL,
	[IssueOnProduction] [varchar](1) NULL,
	[CustomerID] [varchar](20) NULL,
	[TransactionType] [varchar](50) NULL,
 CONSTRAINT [PK_BOMRaws] PRIMARY KEY CLUSTERED 
(
	[BOMRawId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMs]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMs](
	[BOMId] [varchar](20) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[RawTotal] [decimal](25, 9) NULL,
	[PackingTotal] [decimal](25, 9) NULL,
	[RebateTotal] [decimal](25, 9) NULL,
	[AdditionalTotal] [decimal](25, 9) NULL,
	[RebateAdditionTotal] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[PacketPrice] [decimal](25, 9) NULL,
	[RawOHCost] [decimal](25, 9) NULL,
	[LastNBRPrice] [decimal](25, 9) NULL,
	[LastNBRWithSDAmount] [decimal](25, 9) NULL,
	[TotalQuantity] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[WholeSalePrice] [decimal](25, 9) NULL,
	[NBRWithSDAmount] [decimal](25, 9) NULL,
	[MarkUpValue] [decimal](25, 9) NULL,
	[LastMarkUpValue] [decimal](25, 9) NULL,
	[LastSDAmount] [decimal](25, 9) NULL,
	[LastAmount] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[UOM] [varchar](120) NULL,
	[CustomerID] [varchar](20) NULL,
 CONSTRAINT [PK_BOMs] PRIMARY KEY CLUSTERED 
(
	[BOMId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMsMas]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMsMas](
	[BOMId] [varchar](20) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[NBRPrice] [decimal](18, 5) NULL,
	[PacketPrice] [decimal](18, 5) NULL,
	[RawOHCost] [decimal](18, 5) NULL,
	[LastNBRPrice] [decimal](18, 5) NULL,
	[LastNBRWithSDAmount] [decimal](18, 5) NULL,
	[TotalQuantity] [decimal](18, 5) NULL,
	[SDAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[WholeSalePrice] [decimal](18, 5) NULL,
	[NBRWithSDAmount] [decimal](18, 5) NULL,
	[MarkUpValue] [decimal](18, 5) NULL,
	[LastMarkUpValue] [decimal](18, 5) NULL,
	[LastSDAmount] [decimal](18, 5) NULL,
	[LastAmount] [decimal](18, 5) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Codes]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Codes](
	[CodeId] [int] IDENTITY(1,1) NOT NULL,
	[CodeGroup] [varchar](120) NULL,
	[CodeName] [varchar](120) NULL,
	[prefix] [varchar](120) NULL,
	[Lenth] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyOverheads]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyOverheads](
	[HeadID] [varchar](20) NULL,
	[HeadName] [varchar](150) NOT NULL,
	[HeadAmount] [decimal](25, 9) NULL,
	[Description] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [nchar](10) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[OHCode] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[RebatePercent] [decimal](25, 9) NULL,
 CONSTRAINT [PK_CompanyOverheads] PRIMARY KEY CLUSTERED 
(
	[HeadName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyOverheadVAT]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyOverheadVAT](
	[HeadName] [varchar](150) NOT NULL,
	[HeadAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[EffectMonth] [datetime] NOT NULL,
 CONSTRAINT [PK_CompanyOverheadVAT] PRIMARY KEY CLUSTERED 
(
	[HeadName] ASC,
	[EffectMonth] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyProfiles]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyProfiles](
	[CompanyID] [varchar](20) NOT NULL,
	[CompanyName] [varchar](120) NULL,
	[CompanyLegalName] [varchar](120) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[ZipCode] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[VatRegistrationNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[StartDateTime] [datetime] NULL,
	[FYearStart] [datetime] NULL,
	[FYearEnd] [datetime] NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Tom] [varchar](200) NULL,
	[Jary] [varchar](200) NULL,
	[Miki] [varchar](200) NULL,
	[Mouse] [varchar](200) NULL,
 CONSTRAINT [PK_CompanyProfile] PRIMARY KEY CLUSTERED 
(
	[CompanyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Costing]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Costing](
	[ItemNo] [varchar](20) NULL,
	[InputDate] [datetime] NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[AV] [decimal](25, 9) NULL,
	[CD] [decimal](25, 9) NULL,
	[RD] [decimal](25, 9) NULL,
	[TVB] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVA] [decimal](25, 9) NULL,
	[ATV] [decimal](25, 9) NULL,
	[Other] [decimal](25, 9) NULL,
	[Id] [int] NULL,
	[BENumber] [varchar](200) NULL,
	[RefNo] [varchar](200) NULL,
	[SD] [decimal](25, 9) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Currencies]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Currencies](
	[CurrencyId] [int] IDENTITY(1,1) NOT NULL,
	[CurrencyName] [varchar](500) NULL,
	[CurrencyCode] [varchar](50) NULL,
	[Country] [varchar](500) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[CurrencyMajor] [varchar](50) NULL,
	[CurrencyMinor] [varchar](50) NULL,
	[CurrencySymbol] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CurrencyConversion]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CurrencyConversion](
	[CurrencyConversionId] [varchar](20) NULL,
	[CurrencyCodeFrom] [varchar](50) NOT NULL,
	[CurrencyCodeTo] [varchar](50) NULL,
	[CurrencyRate] [decimal](18, 10) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ConversionDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CustomerGroups]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CustomerGroups](
	[CustomerGroupID] [varchar](20) NOT NULL,
	[CustomerGroupName] [varchar](120) NULL,
	[CustomerGroupDescription] [varchar](120) NULL,
	[GroupType] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
 CONSTRAINT [PK_CustomerGroup] PRIMARY KEY CLUSTERED 
(
	[CustomerGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Customers]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Customers](
	[CustomerID] [varchar](20) NOT NULL,
	[CustomerCode] [varchar](50) NULL,
	[CustomerName] [varchar](120) NULL,
	[CustomerGroupID] [varchar](20) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Country] [varchar](200) NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[BusinessType] [varchar](120) NULL,
	[BusinessCode] [varchar](20) NULL,
 CONSTRAINT [PK_CustomerInformation] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CustomersAddress]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CustomersAddress](
	[Id] [int] NULL,
	[CustomerID] [varchar](20) NULL,
	[CustomerVATRegNo] [varchar](20) NULL,
	[CustomerAddress] [varchar](500) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DDBDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DDBDetails](
	[DDBDetailsNo] [varchar](20) NOT NULL,
	[DDBNo] [varchar](20) NOT NULL,
	[DDBDateTime] [datetime] NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[BENumber] [varchar](200) NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[PurcahseItemNo] [varchar](20) NOT NULL,
	[SaleItemNo] [varchar](20) NOT NULL,
	[DDBLineNo] [int] NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UseQuantity] [decimal](18, 5) NULL,
	[CostPrice] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](18, 5) NULL,
	[CnFAmount] [decimal](18, 9) NULL,
	[InsuranceAmount] [decimal](18, 9) NULL,
	[AssessableValue] [decimal](18, 9) NULL,
	[CDAmount] [decimal](18, 9) NULL,
	[RDAmount] [decimal](18, 9) NULL,
	[SD] [decimal](18, 2) NULL,
	[SDAmount] [decimal](18, 9) NULL,
	[TVBAmount] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 2) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[TVAAmount] [decimal](18, 9) NULL,
	[ATVAmount] [decimal](18, 9) NULL,
	[OthersAmount] [decimal](18, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DDBHeader]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DDBHeader](
	[DDBNo] [varchar](20) NOT NULL,
	[DDBDateTime] [datetime] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[TotalAmount] [decimal](18, 5) NULL,
	[CnFAmount] [decimal](18, 9) NULL,
	[InsuranceAmount] [decimal](18, 9) NULL,
	[AssessableValue] [decimal](18, 9) NULL,
	[CDAmount] [decimal](18, 9) NULL,
	[RDAmount] [decimal](18, 9) NULL,
	[SD] [decimal](18, 2) NULL,
	[SDAmount] [decimal](18, 9) NULL,
	[TVBAmount] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 2) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[TVAAmount] [decimal](18, 9) NULL,
	[ATVAmount] [decimal](18, 9) NULL,
	[OthersAmount] [decimal](18, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DemandDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DemandDetails](
	[DemandNo] [varchar](20) NOT NULL,
	[DemandLineNo] [int] NULL,
	[BandProductId] [varchar](20) NOT NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[DemandQty] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[TransactionDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[DemandReceiveID] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[VehicleID] [varchar](20) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DemandHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DemandHeaders](
	[DemandNo] [varchar](20) NOT NULL,
	[DemandDateTime] [datetime] NULL,
	[FiscalYear] [varchar](30) NULL,
	[MonthFrom] [varchar](50) NULL,
	[MonthTo] [varchar](50) NULL,
	[TotalQty] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[DemandReceiveID] [varchar](20) NULL,
	[VehicleID] [varchar](20) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DemandReceiveDate] [datetime] NULL,
	[RefNo] [varchar](20) NULL,
	[RefDate] [datetime] NULL,
 CONSTRAINT [PK_DemandHeaders] PRIMARY KEY CLUSTERED 
(
	[DemandNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Deposits]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Deposits](
	[DepositId] [varchar](20) NOT NULL,
	[TreasuryNo] [varchar](50) NULL,
	[DepositDateTime] [datetime] NULL,
	[DepositType] [varchar](50) NULL,
	[DepositAmount] [decimal](25, 9) NULL,
	[ChequeNo] [varchar](50) NULL,
	[ChequeBank] [varchar](120) NULL,
	[ChequeBankBranch] [varchar](120) NULL,
	[ChequeDate] [datetime] NULL,
	[BankID] [varchar](20) NULL,
	[TreasuryCopy] [varchar](20) NULL,
	[DepositPerson] [varchar](120) NULL,
	[DepositPersonDesignation] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReverseDepositId] [varchar](20) NULL,
 CONSTRAINT [PK_Deposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DisposeDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DisposeDetails](
	[DisposeNumber] [varchar](20) NOT NULL,
	[LineNumber] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[UOM] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[RealPrice] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SaleNumber] [varchar](120) NULL,
	[PurchaseNumber] [varchar](120) NOT NULL,
	[PresentPrice] [decimal](25, 9) NULL,
	[Remarks] [varchar](120) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DisposeDate] [datetime] NULL,
	[QuantityImport] [decimal](25, 9) NULL,
	[TransactionType] [varchar](120) NULL,
	[FromStock] [varchar](1) NULL,
	[DollarPrice] [decimal](25, 9) NULL,
 CONSTRAINT [PK_DisposeDetails] PRIMARY KEY CLUSTERED 
(
	[DisposeNumber] ASC,
	[ItemNo] ASC,
	[PurchaseNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DisposeHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DisposeHeaders](
	[DisposeNumber] [varchar](20) NOT NULL,
	[DisposeDate] [datetime] NULL,
	[RefNumber] [varchar](120) NULL,
	[Remarks] [varchar](120) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](120) NULL,
	[Post] [varchar](1) NULL,
	[FromStock] [varchar](1) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[ImportVATAmount] [decimal](25, 9) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[TotalPriceImport] [decimal](25, 9) NULL,
	[AppVATAmount] [decimal](25, 9) NULL,
	[AppTotalPrice] [decimal](25, 9) NULL,
	[AppVATAmountImport] [decimal](25, 9) NULL,
	[AppTotalPriceImport] [decimal](25, 9) NULL,
	[AppDate] [datetime] NULL,
	[AppRefNumber] [varchar](120) NULL,
	[AppRemarks] [varchar](120) NULL,
 CONSTRAINT [PK_DisposeHeaders] PRIMARY KEY CLUSTERED 
(
	[DisposeNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Duties]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Duties](
	[DutyID] [varchar](50) NOT NULL,
	[DutyName] [varchar](120) NULL,
	[DutyRate] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[DutyType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Duties] PRIMARY KEY CLUSTERED 
(
	[DutyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBackDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBackDetails](
	[DDBackNo] [varchar](20) NOT NULL,
	[DDBackDate] [datetime] NULL,
	[DDLineNo] [int] NULL,
	[SalesInvoiceNo] [varchar](20) NULL,
	[PurchaseInvoiceNo] [varchar](20) NULL,
	[PurchaseDate] [datetime] NULL,
	[FgItemNo] [varchar](20) NULL,
	[FgQty] [decimal](25, 9) NULL,
	[ItemNo] [varchar](20) NULL,
	[BillOfEntry] [varchar](50) NULL,
	[PurchaseUom] [varchar](10) NULL,
	[PurchaseQuantity] [decimal](25, 9) NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[AV] [decimal](25, 9) NULL,
	[CD] [decimal](25, 9) NULL,
	[RD] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[VAT] [decimal](25, 9) NULL,
	[CnF] [decimal](25, 9) NULL,
	[Insurance] [decimal](25, 9) NULL,
	[TVB] [decimal](25, 9) NULL,
	[TVA] [decimal](25, 9) NULL,
	[ATV] [decimal](25, 9) NULL,
	[Others] [decimal](25, 9) NULL,
	[UseQuantity] [decimal](25, 9) NULL,
	[ClaimCD] [decimal](25, 9) NULL,
	[ClaimRD] [decimal](25, 9) NULL,
	[ClaimSD] [decimal](25, 9) NULL,
	[ClaimVAT] [decimal](25, 9) NULL,
	[ClaimCnF] [decimal](25, 9) NULL,
	[ClaimInsurance] [decimal](25, 9) NULL,
	[ClaimTVB] [decimal](25, 9) NULL,
	[ClaimTVA] [decimal](25, 9) NULL,
	[ClaimATV] [decimal](25, 9) NULL,
	[ClaimOthers] [decimal](25, 9) NULL,
	[SubTotalDDB] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[UOMCD] [decimal](25, 9) NULL,
	[UOMRD] [decimal](25, 9) NULL,
	[UOMSD] [decimal](25, 9) NULL,
	[UOMVAT] [decimal](25, 9) NULL,
	[UOMCnF] [decimal](25, 9) NULL,
	[UOMInsurance] [decimal](25, 9) NULL,
	[UOMTVB] [decimal](25, 9) NULL,
	[UOMTVA] [decimal](25, 9) NULL,
	[UOMATV] [decimal](25, 9) NULL,
	[UOMOthers] [decimal](25, 9) NULL,
	[UOMSubTotalDDB] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](50) NULL,
	[LastModifiedOn] [datetime] NULL,
	[PurchasetransactionType] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBackHeader]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBackHeader](
	[DDBackNo] [varchar](20) NOT NULL,
	[DDBackDate] [datetime] NOT NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SalesDate] [datetime] NOT NULL,
	[CustormerID] [varchar](20) NOT NULL,
	[CurrencyId] [int] NOT NULL,
	[ExpCurrency] [decimal](25, 9) NULL,
	[BDTCurrency] [decimal](25, 9) NULL,
	[FgItemNo] [varchar](20) NOT NULL,
	[TotalClaimCD] [decimal](25, 9) NULL,
	[TotalClaimRD] [decimal](25, 9) NULL,
	[TotalClaimSD] [decimal](25, 9) NULL,
	[TotalDDBack] [decimal](25, 9) NULL,
	[TotalClaimVAT] [decimal](25, 9) NULL,
	[TotalClaimCnFAmount] [decimal](25, 9) NULL,
	[TotalClaimInsuranceAmount] [decimal](25, 9) NULL,
	[TotalClaimTVBAmount] [decimal](25, 9) NULL,
	[TotalClaimTVAAmount] [decimal](25, 9) NULL,
	[TotalClaimATVAmount] [decimal](25, 9) NULL,
	[TotalClaimOthersAmount] [decimal](25, 9) NULL,
	[Comments] [varchar](250) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](20) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_DutyDrawBackHeader] PRIMARY KEY CLUSTERED 
(
	[DDBackNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBacks]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBacks](
	[DrawBackID] [varchar](20) NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[BENumber] [varchar](200) NULL,
	[PurchaseDateTime] [datetime] NULL,
	[PurchaseReceiveDate] [datetime] NULL,
	[PurchaseItemNo] [varchar](20) NOT NULL,
	[PurchaseDutyAmount] [decimal](18, 6) NULL,
	[DrawBackDutyPercent] [decimal](18, 6) NULL,
	[DrawBackDutyAmount] [decimal](18, 6) NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SaleDateTime] [datetime] NULL,
	[SaleDeliveryDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[FiscalYear]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[FiscalYear](
	[FiscalYearName] [varchar](30) NULL,
	[CurrentYear] [varchar](4) NOT NULL,
	[PeriodID] [varchar](6) NOT NULL,
	[PeriodName] [varchar](50) NULL,
	[PeriodStart] [datetime] NULL,
	[PeriodEnd] [datetime] NULL,
	[PeriodLock] [varchar](1) NULL,
	[GLLock] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_FiscalYear] PRIMARY KEY CLUSTERED 
(
	[CurrentYear] ASC,
	[PeriodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ImagesStore]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ImagesStore](
	[OriginalPath] [varchar](500) NULL,
	[ImageData] [binary](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueDetails](
	[IssueNo] [varchar](20) NOT NULL,
	[IssueLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IssueDateTime] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[Wastage] [decimal](25, 9) NULL,
	[BOMDate] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[BOMId] [varchar](20) NULL,
	[UOMWastage] [decimal](25, 9) NULL,
	[IsProcess] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueHeaders](
	[IssueNo] [varchar](20) NOT NULL,
	[IssueDateTime] [datetime] NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[ImportIDExcel] [varchar](30) NULL,
 CONSTRAINT [PK_IssueHeader] PRIMARY KEY CLUSTERED 
(
	[IssueNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PackagingInformations]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PackagingInformations](
	[PackagingID] [varchar](50) NOT NULL,
	[PackagingNature] [varchar](120) NULL,
	[PackagingCapacity] [varchar](50) NULL,
	[UOM] [varchar](120) NULL,
	[Description] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PackagingInformations] PRIMARY KEY CLUSTERED 
(
	[PackagingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PriceService]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PriceService](
	[ItemNo] [varchar](20) NOT NULL,
	[Cost] [decimal](25, 9) NULL,
	[BasePrice] [decimal](25, 9) NULL,
	[OtherRate] [decimal](25, 9) NULL,
	[OtherType] [decimal](25, 9) NULL,
	[OtherAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SalePrice] [decimal](25, 9) NULL,
	[EffectDate] [datetime] NOT NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ProductCategories]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ProductCategories](
	[CategoryID] [varchar](20) NOT NULL,
	[CategoryName] [varchar](120) NULL,
	[Description] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[IsRaw] [varchar](50) NOT NULL,
	[HSCodeNo] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[PropergatingRate] [varchar](1) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[Trading] [varchar](1) NULL,
	[NonStock] [varchar](1) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
 CONSTRAINT [PK_ProductCategory] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Products]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Products](
	[ItemNo] [varchar](20) NOT NULL,
	[ProductCode] [varchar](50) NULL,
	[ProductName] [varchar](120) NULL,
	[ProductDescription] [varchar](120) NULL,
	[CategoryID] [varchar](20) NULL,
	[UOM] [varchar](120) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[ReceivePrice] [decimal](25, 9) NULL,
	[IssuePrice] [decimal](25, 9) NULL,
	[TenderPrice] [decimal](25, 9) NULL,
	[ExportPrice] [decimal](25, 9) NULL,
	[InternalIssuePrice] [decimal](25, 9) NULL,
	[TollIssuePrice] [decimal](25, 9) NULL,
	[TollCharge] [decimal](25, 9) NULL,
	[OpeningBalance] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[HSCodeNo] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[SD] [decimal](25, 9) NULL,
	[PacketPrice] [decimal](25, 9) NULL,
	[Trading] [varchar](1) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[NonStock] [varchar](1) NULL,
	[QuantityInHand] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
	[RebatePercent] [decimal](25, 9) NULL,
	[TVBRate] [decimal](25, 9) NULL,
	[CnFRate] [decimal](25, 9) NULL,
	[InsuranceRate] [decimal](25, 9) NULL,
	[CDRate] [decimal](25, 9) NULL,
	[RDRate] [decimal](25, 9) NULL,
	[AITRate] [decimal](25, 9) NULL,
	[TVARate] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[OpeningTotalCost] [decimal](25, 9) NULL,
	[TollProduct] [varchar](1) NULL,
	[Banderol] [varchar](1) NULL,
 CONSTRAINT [PK_ItemInformation] PRIMARY KEY CLUSTERED 
(
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceDetails](
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[POLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Type] [varchar](200) NULL,
	[ProductType] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[RebateAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[CnFAmount] [decimal](25, 9) NULL,
	[InsuranceAmount] [decimal](25, 9) NULL,
	[AssessableValue] [decimal](25, 9) NULL,
	[CDAmount] [decimal](25, 9) NULL,
	[RDAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TVBAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVAAmount] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[OthersAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[PurchaseReturnId] [varchar](20) NULL,
	[ReturnTransactionType] [varchar](50) NULL,
 CONSTRAINT [PK_PurchaseInvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[PurchaseInvoiceNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceDuties]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceDuties](
	[PIDutyID] [varchar](50) NOT NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[CnFInp] [decimal](25, 9) NULL,
	[CnFRate] [decimal](25, 9) NULL,
	[CnFAmount] [decimal](25, 9) NULL,
	[InsuranceInp] [decimal](25, 9) NULL,
	[InsuranceRate] [decimal](25, 9) NULL,
	[InsuranceAmount] [decimal](25, 9) NULL,
	[AssessableInp] [decimal](25, 9) NULL,
	[AssessableValue] [decimal](25, 9) NULL,
	[CDInp] [decimal](25, 9) NULL,
	[CDRate] [decimal](25, 9) NULL,
	[CDAmount] [decimal](25, 9) NULL,
	[RDInp] [decimal](25, 9) NULL,
	[RDRate] [decimal](25, 9) NULL,
	[RDAmount] [decimal](25, 9) NULL,
	[TVBInp] [decimal](25, 9) NULL,
	[TVBRate] [decimal](25, 9) NULL,
	[TVBAmount] [decimal](25, 9) NULL,
	[SDInp] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATInp] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVAInp] [decimal](25, 9) NULL,
	[TVARate] [decimal](25, 9) NULL,
	[TVAAmount] [decimal](25, 9) NULL,
	[ATVInp] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[OthersInp] [decimal](25, 9) NULL,
	[OthersRate] [decimal](25, 9) NULL,
	[OthersAmount] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[Remarks] [varchar](200) NULL,
	[ItemNo] [varchar](20) NULL,
	[DutyCompleteQuantity] [decimal](25, 9) NULL,
	[DutyCompleteQuantityPercent] [decimal](25, 9) NULL,
	[LineCost] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceHeaders](
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[VendorID] [varchar](20) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[BENumber] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[ProductType] [varchar](100) NULL,
	[TransactionType] [varchar](50) NULL,
	[ReceiveDate] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[CurrencyID] [varchar](50) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[WithVDS] [varchar](1) NULL,
	[PurchaseReturnId] [varchar](20) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[SerialNo1] [varchar](50) NULL,
	[CustomHouse] [varchar](500) NULL,
	[LCNumber] [varchar](50) NULL,
	[LCDate] [datetime] NULL,
	[LandedCost] [decimal](25, 9) NULL,
 CONSTRAINT [PK_ProductInvoiceHead] PRIMARY KEY CLUSTERED 
(
	[PurchaseInvoiceNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReceiveDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReceiveDetails](
	[ReceiveNo] [varchar](20) NOT NULL,
	[ReceiveLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[ReceiveDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[VATName] [varchar](100) NULL,
	[ReceiveReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[BOMId] [varchar](20) NULL,
	[BOMId1] [varchar](20) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[ReturnTransactionType] [varchar](50) NULL,
 CONSTRAINT [PK_ReceiveDetails] PRIMARY KEY CLUSTERED 
(
	[ReceiveNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReceiveHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReceiveHeaders](
	[ReceiveNo] [varchar](20) NOT NULL,
	[ReceiveDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReceiveReturnId] [varchar](20) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[WithToll] [varchar](1) NULL,
	[CustomerID] [varchar](20) NULL,
 CONSTRAINT [PK_ReceiveHead] PRIMARY KEY CLUSTERED 
(
	[ReceiveNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReportSales]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReportSales](
	[AuditUser] [varchar](10) NULL,
	[OpeQty] [money] NULL,
	[PrdQty] [money] NULL,
	[InvoiceNo] [varchar](20) NULL,
	[CustomerName] [varchar](120) NULL,
	[Address] [varchar](200) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[InvoiceDate] [datetime] NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductName] [varchar](120) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[SalesPrice] [decimal](18, 5) NULL,
	[ClosingQuantity] [decimal](18, 5) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceDetails](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[InvoiceLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[AVGPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SaleType] [varchar](10) NULL,
	[PreviousSalesInvoiceNo] [varchar](200) NULL,
	[Trading] [varchar](1) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[NonStock] [varchar](1) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[Type] [varchar](50) NULL,
	[BENumber] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[VATName] [varchar](100) NULL,
	[SaleReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[PromotionalQuantity] [decimal](25, 9) NULL,
	[FinishItemNo] [varchar](20) NULL,
	[ValueOnly] [varchar](1) NULL,
	[CConversionDate] [datetime] NULL,
	[ReturnTransactionType] [varchar](50) NULL,
	[Weight] [varchar](120) NULL,
 CONSTRAINT [PK_SalesInvoiceDetails_1] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceHeaders](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[CustomerID] [varchar](20) NOT NULL,
	[DeliveryAddress1] [varchar](200) NULL,
	[DeliveryAddress2] [varchar](200) NULL,
	[DeliveryAddress3] [varchar](200) NULL,
	[VehicleID] [varchar](20) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SaleType] [varchar](20) NULL,
	[PreviousSalesInvoiceNo] [varchar](20) NULL,
	[Trading] [varchar](1) NULL,
	[IsPrint] [varchar](1) NULL,
	[TenderId] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[LCNumber] [varchar](50) NULL,
	[CurrencyID] [varchar](50) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[SaleReturnId] [varchar](20) NULL,
	[IsVDS] [varchar](1) NULL,
	[GetVDSCertificate] [varchar](1) NULL,
	[VDSCertificateDate] [datetime] NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[AlReadyPrint] [int] NULL,
	[LCBank] [varchar](200) NULL,
	[LCDate] [datetime] NULL,
	[DeliveryChallanNo] [varchar](50) NULL,
	[IsGatePass] [varchar](3) NULL,
	[CompInvoiceNo] [varchar](50) NULL,
 CONSTRAINT [PK_SalesInvoiceHead] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceHeadersExport]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceHeadersExport](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SaleLineNo] [int] NULL,
	[RefNo] [varchar](200) NULL,
	[Description] [varchar](200) NULL,
	[Quantity] [varchar](120) NULL,
	[GrossWeight] [varchar](120) NULL,
	[NetWeight] [varchar](120) NULL,
	[NumberFrom] [varchar](120) NULL,
	[NumberTo] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[PortFrom] [varchar](500) NULL,
	[PortTo] [varchar](500) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SDDeposits]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SDDeposits](
	[DepositId] [varchar](20) NOT NULL,
	[TreasuryNo] [varchar](50) NULL,
	[DepositDateTime] [datetime] NULL,
	[DepositType] [varchar](50) NULL,
	[DepositAmount] [decimal](25, 9) NULL,
	[ChequeNo] [varchar](50) NULL,
	[ChequeBank] [varchar](120) NULL,
	[ChequeBankBranch] [varchar](120) NULL,
	[ChequeDate] [datetime] NULL,
	[BankID] [varchar](20) NULL,
	[TreasuryCopy] [varchar](20) NULL,
	[DepositPerson] [varchar](120) NULL,
	[DepositPersonDesignation] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReverseDepositId] [varchar](20) NULL,
 CONSTRAINT [PK_SDDeposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Settings]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Settings](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SettingsRole]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[SettingsRole](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Setup]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Setup](
	[PurchaseP] [varchar](3) NULL,
	[PurchaseIDL] [numeric](10, 0) NULL,
	[PurchaseCID] [numeric](10, 0) NULL,
	[PurchaseNYID] [varchar](1) NULL,
	[PurchaseTradingP] [varchar](3) NULL,
	[PurchaseTradingIDL] [numeric](10, 0) NULL,
	[PurchaseTradingCID] [numeric](10, 0) NULL,
	[PurchaseTradingNYID] [varchar](1) NULL,
	[IssueP] [varchar](3) NULL,
	[IssueIDL] [numeric](10, 0) NULL,
	[IssueCID] [numeric](10, 0) NULL,
	[IssueNYID] [varchar](1) NULL,
	[IssueReturnP] [varchar](3) NULL,
	[IssueReturnIDL] [numeric](10, 0) NULL,
	[IssueReturnCID] [numeric](10, 0) NULL,
	[IssueReturnNYID] [varchar](1) NULL,
	[ReceiveP] [varchar](3) NULL,
	[ReceiveIDL] [numeric](10, 0) NULL,
	[ReceiveCID] [numeric](10, 0) NULL,
	[ReceiveNYID] [varchar](1) NULL,
	[TransferP] [varchar](3) NULL,
	[TransferIDL] [numeric](10, 0) NULL,
	[TransferCID] [numeric](10, 0) NULL,
	[TransferNYID] [varchar](1) NULL,
	[SaleP] [varchar](3) NULL,
	[SaleIDL] [numeric](10, 0) NULL,
	[SaleCID] [numeric](10, 0) NULL,
	[SaleNYID] [varchar](1) NULL,
	[SaleServiceP] [varchar](3) NULL,
	[SaleServiceIDL] [numeric](10, 0) NULL,
	[SaleServiceCID] [numeric](10, 0) NULL,
	[SaleServiceNYID] [varchar](1) NULL,
	[SaleTradingP] [varchar](3) NULL,
	[SaleTradingIDL] [numeric](10, 0) NULL,
	[SaleTradingCID] [numeric](10, 0) NULL,
	[SaleTradingNYID] [varchar](1) NULL,
	[SaleExportP] [varchar](3) NULL,
	[SaleExportIDL] [numeric](10, 0) NULL,
	[SaleExportCID] [numeric](10, 0) NULL,
	[SaleExportNYID] [varchar](1) NULL,
	[SaleTenderP] [varchar](3) NULL,
	[SaleTenderIDL] [numeric](10, 0) NULL,
	[SaleTenderCID] [numeric](10, 0) NULL,
	[SaleTenderNYID] [varchar](1) NULL,
	[DNP] [varchar](3) NULL,
	[DNIDL] [numeric](10, 0) NULL,
	[DNCID] [numeric](10, 0) NULL,
	[DNNYID] [varchar](1) NULL,
	[CNP] [varchar](3) NULL,
	[CNIDL] [numeric](10, 0) NULL,
	[CNCID] [numeric](10, 0) NULL,
	[CNNYID] [varchar](1) NULL,
	[DepositP] [varchar](3) NULL,
	[DepositIDL] [numeric](10, 0) NULL,
	[DepositCID] [numeric](10, 0) NULL,
	[DepositNYID] [varchar](1) NULL,
	[VDSP] [varchar](3) NULL,
	[VDSIDL] [numeric](10, 0) NULL,
	[VDSCID] [numeric](10, 0) NULL,
	[VDSNYID] [varchar](1) NULL,
	[TollIssueP] [varchar](3) NULL,
	[TollIssueIDL] [numeric](10, 0) NULL,
	[TollIssueCID] [numeric](10, 0) NULL,
	[TollIssueNYID] [varchar](1) NULL,
	[TollReceiveP] [varchar](3) NULL,
	[TollReceiveIDL] [numeric](10, 0) NULL,
	[TollReceiveCID] [numeric](10, 0) NULL,
	[TollReceiveNYID] [varchar](1) NULL,
	[DSFP] [varchar](3) NULL,
	[DSFIDL] [numeric](10, 0) NULL,
	[DSFCID] [numeric](10, 0) NULL,
	[DSFNYID] [varchar](1) NULL,
	[DSRP] [varchar](3) NULL,
	[DSRIDL] [numeric](10, 0) NULL,
	[DSRCID] [numeric](10, 0) NULL,
	[DSRNYID] [varchar](1) NULL,
	[IssueFromBOM] [varchar](1) NULL,
	[PrepaidVAT] [varchar](1) NULL,
	[CYear] [varchar](4) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TenderDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TenderDetails](
	[TenderId] [varchar](20) NOT NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[TenderQty] [decimal](25, 9) NULL,
	[SaleQty] [decimal](25, 9) NULL,
	[TenderPrice] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[BOMId] [varchar](20) NULL,
 CONSTRAINT [PK_TenderDetails] PRIMARY KEY CLUSTERED 
(
	[TenderId] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TenderHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TenderHeaders](
	[TenderId] [varchar](20) NOT NULL,
	[RefNo] [varchar](200) NOT NULL,
	[CustomerId] [varchar](20) NULL,
	[TenderDate] [datetime] NULL,
	[DeleveryDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[CustomerGroupID] [varchar](20) NULL,
 CONSTRAINT [PK_TenderHeaders] PRIMARY KEY CLUSTERED 
(
	[TenderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Trackings]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Trackings](
	[ItemNo] [varchar](20) NOT NULL,
	[TrackLineNo] [int] NULL,
	[Heading1] [varchar](200) NOT NULL,
	[Heading2] [varchar](200) NULL,
	[Quantity] [int] NULL,
	[IsPurchase] [varchar](1) NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[IsIssue] [varchar](1) NULL,
	[IssueNo] [varchar](20) NULL,
	[IsReceive] [varchar](1) NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IsSale] [varchar](1) NULL,
	[SaleInvoiceNo] [varchar](20) NULL,
	[FinishItemNo] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceivePost] [varchar](1) NULL,
	[SalePost] [varchar](1) NULL,
	[IssuePost] [varchar](1) NULL,
	[ReceiveDate] [datetime] NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[ReturnType] [varchar](50) NULL,
	[ReturnPurchase] [varchar](1) NULL,
	[ReturnPurchaseID] [varchar](50) NULL,
	[ReturnReceive] [varchar](1) NULL,
	[ReturnReceiveID] [varchar](50) NULL,
	[ReturnSale] [varchar](1) NULL,
	[ReturnSaleID] [varchar](50) NULL,
	[ReturnPurDate] [datetime] NULL,
	[ReturnReceiveDate] [datetime] NULL,
 CONSTRAINT [PK_Trackings] PRIMARY KEY CLUSTERED 
(
	[Heading1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransactionHistorys]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransactionHistorys](
	[TransactionNo] [varchar](20) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDate] [datetime] NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[TradingMarkup] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[TCost] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Transactions]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Transactions](
	[TransactionID] [varchar](20) NULL,
	[TransactionType] [varchar](200) NULL,
	[TransactionDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferRawDetails]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferRawDetails](
	[TransferId] [varchar](20) NOT NULL,
	[TransLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[TransFromItemNo] [varchar](20) NOT NULL,
	[TransferDateTime] [datetime] NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferRawHeaders]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferRawHeaders](
	[TransferId] [varchar](20) NOT NULL,
	[TransferDateTime] [datetime] NULL,
	[TransFromItemNo] [varchar](20) NOT NULL,
	[UOM] [varchar](50) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[TransferedQty] [decimal](25, 9) NULL,
	[TransferedAmt] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_TransferRawHeaders] PRIMARY KEY CLUSTERED 
(
	[TransferId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UOMName]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UOMName](
	[UOMId] [int] IDENTITY(1,1) NOT NULL,
	[UOMName] [varchar](500) NULL,
	[UOMCode] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UOMs]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UOMs](
	[UOMId] [varchar](50) NULL,
	[UOMFrom] [varchar](50) NULL,
	[UOMTo] [varchar](50) NULL,
	[Convertion] [decimal](25, 9) NULL,
	[CTypes] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ActiveStatus] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserAuditLogs]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserAuditLogs](
	[LogID] [varchar](50) NULL,
	[ComputerName] [varchar](200) NULL,
	[ComputerLoginUserName] [varchar](200) NULL,
	[ComputerIPAddress] [varchar](200) NULL,
	[SoftwareUserId] [varchar](200) NULL,
	[SessionDate] [datetime] NULL,
	[LogInDateTime] [datetime] NULL,
	[LogOutDateTime] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserGroups]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[UserGroups](
	[GroupID] [varchar](20) NULL,
	[GroupName] [varchar](120) NOT NULL,
	[Comments] [varchar](200) NOT NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_UserGroups] PRIMARY KEY CLUSTERED 
(
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserInformations]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserInformations](
	[UserID] [varchar](20) NULL,
	[UserName] [varchar](120) NOT NULL,
	[UserPassword] [varchar](20) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[LastLoginDateTime] [datetime] NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[GroupID] [varchar](20) NULL,
 CONSTRAINT [PK_UserInformations] PRIMARY KEY CLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserLogs]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserLogs](
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[LoginTime] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserRolls]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserRolls](
	[LineID] [numeric](18, 0) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[FormID] [varchar](5) NOT NULL,
	[Access] [varchar](1) NULL,
	[PostAccess] [varchar](1) NULL,
	[FormName] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[AddAccess] [varchar](1) NULL,
	[EditAccess] [varchar](1) NULL,
 CONSTRAINT [PK_UserRolls] PRIMARY KEY CLUSTERED 
(
	[LineID] ASC,
	[UserID] ASC,
	[FormID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VAT7]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VAT7](
	[VAT7No] [varchar](20) NOT NULL,
	[Vat7Date] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[FinishUOM] [varchar](50) NULL,
	[Vat7LineNo] [int] NULL,
	[ItemNo] [varchar](20) NULL,
	[UOM] [varchar](50) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VDS]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VDS](
	[VDSId] [varchar](20) NULL,
	[VendorId] [varchar](20) NULL,
	[BillAmount] [decimal](25, 9) NULL,
	[BillDate] [datetime] NULL,
	[BillDeductAmount] [decimal](25, 9) NULL,
	[DepositNumber] [varchar](30) NULL,
	[DepositDate] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[IssueDate] [datetime] NULL,
	[PurchaseNumber] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[IsPurchase] [varchar](20) NULL,
	[IsPercent] [varchar](1) NULL,
	[ReverseVDSId] [varchar](20) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Vehicles]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Vehicles](
	[VehicleID] [varchar](20) NOT NULL,
	[VehicleCode] [varchar](50) NULL,
	[VehicleType] [varchar](50) NULL,
	[VehicleNo] [varchar](50) NULL,
	[Description] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[DriverName] [varchar](100) NULL,
 CONSTRAINT [PK_Vehicles] PRIMARY KEY CLUSTERED 
(
	[VehicleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VendorGroups]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VendorGroups](
	[VendorGroupID] [varchar](20) NOT NULL,
	[VendorGroupName] [varchar](120) NULL,
	[VendorGroupDescription] [varchar](120) NULL,
	[GroupType] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Info2] [varchar](10) NULL,
 CONSTRAINT [PK_VendorGroup] PRIMARY KEY CLUSTERED 
(
	[VendorGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Vendors]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Vendors](
	[VendorID] [varchar](20) NOT NULL,
	[VendorCode] [varchar](50) NULL,
	[VendorName] [varchar](120) NULL,
	[VendorGroupID] [varchar](20) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[ContactPerson] [varchar](150) NULL,
	[ContactPersonDesignation] [varchar](150) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Country] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[BusinessType] [varchar](120) NULL,
	[BusinessCode] [varchar](20) NULL,
 CONSTRAINT [PK_Vendor] PRIMARY KEY CLUSTERED 
(
	[VendorID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[YourTable]    Script Date: 09/13/2018 11:48:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[YourTable](
	[BOMId] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
ALTER TABLE [dbo].[Duties] ADD  CONSTRAINT [DF_Duties_Comments]  DEFAULT ('NA') FOR [Comments]
GO
ALTER TABLE [dbo].[PurchaseInvoiceDuties] ADD  CONSTRAINT [DF_Table_1_Comments_1]  DEFAULT ('NA') FOR [Remarks]
GO
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD  CONSTRAINT [DF_SalesInvoiceDetails_AVGPrice]  DEFAULT ((0)) FOR [AVGPrice]
GO
ALTER TABLE [dbo].[BOMCompanyOverhead]  WITH CHECK ADD  CONSTRAINT [FK_BOMCompanyOverhead_BOMId] FOREIGN KEY([BOMId])
REFERENCES [dbo].[BOMs] ([BOMId])
GO
ALTER TABLE [dbo].[BOMCompanyOverhead] CHECK CONSTRAINT [FK_BOMCompanyOverhead_BOMId]
GO
ALTER TABLE [dbo].[BOMRaws]  WITH CHECK ADD  CONSTRAINT [FK_BOMRaws_BOMId] FOREIGN KEY([BOMId])
REFERENCES [dbo].[BOMs] ([BOMId])
GO
ALTER TABLE [dbo].[BOMRaws] CHECK CONSTRAINT [FK_BOMRaws_BOMId]
GO
ALTER TABLE [dbo].[BOMs]  WITH CHECK ADD  CONSTRAINT [FK_BOMs_FinishItemNo] FOREIGN KEY([FinishItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[BOMs] CHECK CONSTRAINT [FK_BOMs_FinishItemNo]
GO
ALTER TABLE [dbo].[CompanyOverheadVAT]  WITH CHECK ADD  CONSTRAINT [FK_CompanyOverheadVAT_CompanyOverheads] FOREIGN KEY([HeadName])
REFERENCES [dbo].[CompanyOverheads] ([HeadName])
GO
ALTER TABLE [dbo].[CompanyOverheadVAT] CHECK CONSTRAINT [FK_CompanyOverheadVAT_CompanyOverheads]
GO
ALTER TABLE [dbo].[Customers]  WITH CHECK ADD  CONSTRAINT [FK_Customers_CustomerGroups1] FOREIGN KEY([CustomerGroupID])
REFERENCES [dbo].[CustomerGroups] ([CustomerGroupID])
GO
ALTER TABLE [dbo].[Customers] CHECK CONSTRAINT [FK_Customers_CustomerGroups1]
GO
ALTER TABLE [dbo].[DisposeDetails]  WITH CHECK ADD  CONSTRAINT [FK_DisposeDetails_DisposeHeaders] FOREIGN KEY([DisposeNumber])
REFERENCES [dbo].[DisposeHeaders] ([DisposeNumber])
GO
ALTER TABLE [dbo].[DisposeDetails] CHECK CONSTRAINT [FK_DisposeDetails_DisposeHeaders]
GO
ALTER TABLE [dbo].[DisposeDetails]  WITH CHECK ADD  CONSTRAINT [FK_DisposeDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[DisposeDetails] CHECK CONSTRAINT [FK_DisposeDetails_Products]
GO
ALTER TABLE [dbo].[IssueDetails]  WITH CHECK ADD  CONSTRAINT [FK_IssueDetails_IssueHeaders] FOREIGN KEY([IssueNo])
REFERENCES [dbo].[IssueHeaders] ([IssueNo])
GO
ALTER TABLE [dbo].[IssueDetails] CHECK CONSTRAINT [FK_IssueDetails_IssueHeaders]
GO
ALTER TABLE [dbo].[IssueDetails]  WITH CHECK ADD  CONSTRAINT [FK_IssueDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[IssueDetails] CHECK CONSTRAINT [FK_IssueDetails_Products]
GO
ALTER TABLE [dbo].[Products]  WITH CHECK ADD  CONSTRAINT [FK_Products_ProductCategories1] FOREIGN KEY([CategoryID])
REFERENCES [dbo].[ProductCategories] ([CategoryID])
GO
ALTER TABLE [dbo].[Products] CHECK CONSTRAINT [FK_Products_ProductCategories1]
GO
ALTER TABLE [dbo].[PurchaseInvoiceDuties]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceDuties_PurchaseInvoiceHeaders] FOREIGN KEY([PurchaseInvoiceNo])
REFERENCES [dbo].[PurchaseInvoiceHeaders] ([PurchaseInvoiceNo])
GO
ALTER TABLE [dbo].[PurchaseInvoiceDuties] CHECK CONSTRAINT [FK_PurchaseInvoiceDuties_PurchaseInvoiceHeaders]
GO
ALTER TABLE [dbo].[PurchaseInvoiceHeaders]  WITH CHECK ADD  CONSTRAINT [FK_PurchaseInvoiceHeaders_Vendors] FOREIGN KEY([VendorID])
REFERENCES [dbo].[Vendors] ([VendorID])
GO
ALTER TABLE [dbo].[PurchaseInvoiceHeaders] CHECK CONSTRAINT [FK_PurchaseInvoiceHeaders_Vendors]
GO
ALTER TABLE [dbo].[ReceiveDetails]  WITH CHECK ADD  CONSTRAINT [FK_ReceiveDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[ReceiveDetails] CHECK CONSTRAINT [FK_ReceiveDetails_Products]
GO
ALTER TABLE [dbo].[ReceiveDetails]  WITH CHECK ADD  CONSTRAINT [FK_ReceiveDetails_ReceiveHeaders] FOREIGN KEY([ReceiveNo])
REFERENCES [dbo].[ReceiveHeaders] ([ReceiveNo])
GO
ALTER TABLE [dbo].[ReceiveDetails] CHECK CONSTRAINT [FK_ReceiveDetails_ReceiveHeaders]
GO
ALTER TABLE [dbo].[SalesInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceDetails_Products1] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[SalesInvoiceDetails] CHECK CONSTRAINT [FK_SalesInvoiceDetails_Products1]
GO
ALTER TABLE [dbo].[SalesInvoiceDetails]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceDetails_SalesInvoiceHeaders1] FOREIGN KEY([SalesInvoiceNo])
REFERENCES [dbo].[SalesInvoiceHeaders] ([SalesInvoiceNo])
GO
ALTER TABLE [dbo].[SalesInvoiceDetails] CHECK CONSTRAINT [FK_SalesInvoiceDetails_SalesInvoiceHeaders1]
GO
ALTER TABLE [dbo].[SalesInvoiceHeaders]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceHeaders_Customers] FOREIGN KEY([CustomerID])
REFERENCES [dbo].[Customers] ([CustomerID])
GO
ALTER TABLE [dbo].[SalesInvoiceHeaders] CHECK CONSTRAINT [FK_SalesInvoiceHeaders_Customers]
GO
ALTER TABLE [dbo].[SalesInvoiceHeadersExport]  WITH CHECK ADD  CONSTRAINT [FK_SalesInvoiceHeadersExport_SalesInvoiceHeaders] FOREIGN KEY([SalesInvoiceNo])
REFERENCES [dbo].[SalesInvoiceHeaders] ([SalesInvoiceNo])
GO
ALTER TABLE [dbo].[SalesInvoiceHeadersExport] CHECK CONSTRAINT [FK_SalesInvoiceHeadersExport_SalesInvoiceHeaders]
GO
ALTER TABLE [dbo].[TenderDetails]  WITH CHECK ADD  CONSTRAINT [FK_TenderDetails_Products] FOREIGN KEY([ItemNo])
REFERENCES [dbo].[Products] ([ItemNo])
GO
ALTER TABLE [dbo].[TenderDetails] CHECK CONSTRAINT [FK_TenderDetails_Products]
GO
ALTER TABLE [dbo].[TenderDetails]  WITH CHECK ADD  CONSTRAINT [FK_TenderDetails_TenderHeaders] FOREIGN KEY([TenderId])
REFERENCES [dbo].[TenderHeaders] ([TenderId])
GO
ALTER TABLE [dbo].[TenderDetails] CHECK CONSTRAINT [FK_TenderDetails_TenderHeaders]
GO
ALTER TABLE [dbo].[TenderHeaders]  WITH CHECK ADD  CONSTRAINT [FK_TenderHeaders_Customers] FOREIGN KEY([CustomerId])
REFERENCES [dbo].[Customers] ([CustomerID])
GO
ALTER TABLE [dbo].[TenderHeaders] CHECK CONSTRAINT [FK_TenderHeaders_Customers]
GO
ALTER TABLE [dbo].[UserLogs]  WITH CHECK ADD  CONSTRAINT [FK_UserLogs_UserInformations] FOREIGN KEY([UserName])
REFERENCES [dbo].[UserInformations] ([UserName])
GO
ALTER TABLE [dbo].[UserLogs] CHECK CONSTRAINT [FK_UserLogs_UserInformations]
GO
ALTER TABLE [dbo].[Vendors]  WITH CHECK ADD  CONSTRAINT [FK_Vendors_VendorGroups1] FOREIGN KEY([VendorGroupID])
REFERENCES [dbo].[VendorGroups] ([VendorGroupID])
GO
ALTER TABLE [dbo].[Vendors] CHECK CONSTRAINT [FK_Vendors_VendorGroups1]
GO

                ";
                #endregion CreateTable

                top1 = "go";

                IEnumerable<string> commandStrings = Regex.Split(sqlText, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                foreach (string commandString in commandStrings)
                {
                    if (commandString.Trim() != "")
                    {
                        SqlCommand cmdIdExist1 = new SqlCommand(commandString, currConn);

                        //new SqlCommand(commandString, currConn).ExecuteNonQuery();
                        cmdIdExist1.Transaction = transaction;
                        transResult = (int)cmdIdExist1.ExecuteNonQuery();
                        if (transResult != -1)
                        {
                            throw new ArgumentNullException("Create Tables to database('" + databaseName + "')", MessageVM.dbMsgTableNotCreate);
                        }
                    }
                }

                #endregion TableCreate

                #region TableDefaultData
                string top2;
                // vendor group, vehicle,UserInformations,CustomerGroups,Vendors,Customers
                //userroll,,settings,ProductTypes,codes,Currencies,CurrencyConversion
                #region TableDefaultData Back
                //             sqlText = @"
                //INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A''N/A', N'N/A', NULL)
                //INSERT [dbo].[Vehicles] ([VehicleID], [VehicleCode], [VehicleType], [VehicleNo], [Description], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', NULL, N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
                //INSERT [dbo].[UserInformations] ([UserID], [UserName], [UserPassword], [ActiveStatus], [LastLoginDateTime], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'10', N'admin', N'J7LJ8+qT64o=', N'Y', CAST(0x0000A04D00B82888 AS DateTime), N'KamrulInsert', CAST(0x0000A01400EF44BC AS DateTime), N'admin', CAST(0x0000A08400D5C30C AS DateTime), N'Info1', N'Info2', N'Info3', N'Info4', N'Info5')
                //INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'N/A', N'N/A', N'Local', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A17500C8DF0C AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
                //INSERT [dbo].[Vendors] ([VendorID], [VendorCode], [VendorName], [VendorGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [VATRegistrationNo], [TINNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Country], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')
                //INSERT [dbo].[Customers] ([CustomerID], [CustomerCode], [CustomerName], [CustomerGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [TINNo], [VATRegistrationNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info2], [Info3], [Info4], [Info5], [Country]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', NULL)


                //";
                #endregion TableDefaultData Back

                #region TableDefaultData Back
                sqlText = @"
               
INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'0', N'NA', N'NA', N'NA', N'Overhead', N'0.00', CAST(30.000000000 AS Decimal(25, 9)), N'N', N'N', N'admin', CAST(0x0000A16400F8CA3C AS DateTime), N'admin', CAST(0x0000A1A30106ECFC AS DateTime), CAST(30.000000000 AS Decimal(25, 9)), N'N', N'N', N'NA', N'NA')

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'1', N'Finish', N'-', N'-', N'Finish', N'0.00', CAST(15.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A0185F808 AS DateTime), N'admin', CAST(0x0000A95A0185F808 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'N', N'N', NULL, NULL)

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'2', N'Admin Expense', N'-', N'-', N'Overhead', N'0.00', CAST(0.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A0186DDB8 AS DateTime), N'admin', CAST(0x0000A95A0186DDB8 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'N', N'N', NULL, NULL)

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'3', N'Raw', N'-', N'-', N'Raw', N'0.00', CAST(15.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A01870914 AS DateTime), N'admin', CAST(0x0000A95A01870DC4 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'N', N'N', NULL, NULL)



INSERT [dbo].[Products] ([ItemNo], [ProductCode], [ProductName], [ProductDescription], [CategoryID], [UOM], [CostPrice], [SalesPrice], [NBRPrice], [ReceivePrice], [IssuePrice], [TenderPrice], [ExportPrice], [InternalIssuePrice], [TollIssuePrice], [TollCharge], [OpeningBalance], [SerialNo], [HSCodeNo], [VATRate], [Comments], [SD], [PacketPrice], [Trading], [TradingMarkUp], [NonStock], [QuantityInHand], [OpeningDate], [RebatePercent], [TVBRate], [CnFRate], [InsuranceRate], [CDRate], [RDRate], [AITRate], [TVARate], [ATVRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [OpeningTotalCost], [TollProduct], [Banderol]) VALUES (N'ovh0', N'ovh0', N'Margin', N'-', N'0', N'-', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'-', N'', CAST(0.000000000 AS Decimal(25, 9)), N'', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), CAST(0x0000A1A40105ED84 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'Y', N'admin', CAST(0x0000A1A401060044 AS DateTime), N'admin', CAST(0x0000A1A401224A74 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'N/A', N'N/A', N'Local', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A17500C8DF0C AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')

INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'1', N'Local', N'-', N'Local', N'-', N'Y', N'admin', CAST(0x0000A95A01865820 AS DateTime), N'admin', CAST(0x0000A95A01865820 AS DateTime), NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'2', N'Export', N'-', N'Export', N'-', N'Y', N'admin', CAST(0x0000A95A01865F28 AS DateTime), N'admin', CAST(0x0000A95A01865F28 AS DateTime), NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[Customers] ([CustomerID], [CustomerCode], [CustomerName], [CustomerGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [TINNo], [VATRegistrationNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info2], [Info3], [Info4], [Info5], [Country], [VDSPercent], [BusinessType], [BusinessCode]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', NULL, NULL, NULL, NULL)

INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A''N/A', N'N/A', NULL)

INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'1', N'Local', N'-', N'Local', N'-', N'Y', N'admin', CAST(0x0000A95A01863F84 AS DateTime), N'admin', CAST(0x0000A95A01863F84 AS DateTime), NULL, NULL, NULL, NULL)

INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'2', N'Import', N'-', N'Import', N'-', N'Y', N'admin', CAST(0x0000A95A018647B8 AS DateTime), N'admin', CAST(0x0000A95A018647B8 AS DateTime), NULL, NULL, NULL, NULL)

INSERT [dbo].[Vendors] ([VendorID], [VendorCode], [VendorName], [VendorGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [VATRegistrationNo], [TINNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Country], [Info2], [Info3], [Info4], [Info5], [VDSPercent], [BusinessType], [BusinessCode]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', NULL, NULL, NULL)

INSERT [dbo].[UserInformations] ([UserID], [UserName], [UserPassword], [ActiveStatus], [LastLoginDateTime], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5], [GroupID]) VALUES (N'10', N'admin', N'J7LJ8+qT64o=', N'Y', CAST(0x0000A04D00B82888 AS DateTime), N'KamrulInsert', CAST(0x0000A01400EF44BC AS DateTime), N'admin', CAST(0x0000A08400D5C30C AS DateTime), N'Info1', N'Info2', N'Info3', N'Info4', N'Info5', NULL)

INSERT [dbo].[BankInformations] ([BankID], [BankCode], [BankName], [BranchName], [AccountNumber], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'0', N'NA', N'NA', N'NA', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'Y', N'admin', CAST(0x0000A19A00C0D9EC AS DateTime), N'admin', CAST(0x0000A19A00C0D9EC AS DateTime), NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[BankInformations] ([BankID], [BankCode], [BankName], [BranchName], [AccountNumber], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'1', N'SB', N'Sonali Bank Bangladesh', N'Motijhil', N'----', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'Y', N'admin', CAST(0x0000A95A01876B84 AS DateTime), N'admin', CAST(0x0000A95A01876B84 AS DateTime), NULL, NULL, NULL, NULL, NULL)

SET IDENTITY_INSERT [dbo].[Codes] ON 


INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Purchase', N'Other', N'PUR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'Purchase', N'Trading', N'PTD', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'Receive', N'Other', N'REC', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'TollReceive', N'TollReceive', N'TOR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'Purchase', N'PurchaseReturn', N'PRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'Purchase', N'InputService', N'PIS', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'Purchase', N'Import', N'IMP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'TollReceiveRaw', N'TollReceiveRaw', N'TRW', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'Issue', N'Other', N'ISU', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'Issue', N'IssueReturn', N'ISR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'Receive', N'ReceiveReturn', N'RER', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'Receive', N'WIP', N'WIP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'TollFinishReceive', N'TollFinishReceive', N'TFR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'Sale', N'Other', N'INV', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'Sale', N'Trading', N'STP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (17, N'Sale', N'Debit', N'DEN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'Sale', N'Credit', N'CRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'Sale', N'Export', N'STR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'InternalIssue', N'InternalIssue', N'TRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (21, N'Sale', N'Service', N'SER', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (22, N'Sale', N'Tender', N'STN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'TollIssue', N'TollIssue', N'EDF', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'TollFinishIssue', N'TollFinishIssue', N'TFI', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'Deposit', N'Treasury', N'DEP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'Deposit', N'VDS', N'VDS', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'Dispose', N'Raw', N'DSR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'Dispose', N'Finish', N'DSF', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'Adjustment', N'Both', N'ADJ', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'SDDeposit', N'Treasury', N'SDP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'DDB', N'DDB', N'DDB', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'Purchase', N'PurchaseDN', N'PDN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'Purchase', N'PurchaseCN', N'PCN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'Sale', N'ServiceNS', N'SNS', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (35, N'Purchase', N'ServiceNS', N'PSN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (36, N'Purchase', N'Service', N'PSE', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

SET IDENTITY_INSERT [dbo].[Codes] OFF

SET IDENTITY_INSERT [dbo].[Currencies] ON 


INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (246, N'Afghanistan Afghani', N'AFN', N'Afghanistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'afghani', N'Pul', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (247, N'Albanian Lek', N'ALL', N'Albania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lek', N'Qindarkë', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (248, N'Algerian Dinar', N'DZD', N'Algeria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Santeem', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (249, N'US Dollar', N'USD', N'American Samoa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (250, N'Euro', N'EUR', N'Andorra', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Euro', N'Cent', N'€')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (251, N'Anlan Kwanza', N'AOA', N'Anla', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kwanza', N'Cêntimo', N'Kz')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (252, N'East Caribbean Dollar', N'XCD', N'Anguilla', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (253, N'Argentine Peso', N'ARS', N'Argentina', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (254, N'Armenian Dram', N'AMD', N'Armenia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dram', N'Luma', N'')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (255, N'Aruban Guilder', N'AWG', N'Aruba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'florin', N'Cent', N'ƒ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (256, N'Australian Dollar', N'AUD', N'Australia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (257, N'Azerbaijan New Manat', N'AZN', N'Azerbaijan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'manat', N'Q?pik', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (258, N'Bahamian Dollar', N'BSD', N'Bahamas', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (259, N'Bahraini Dinar', N'BHD', N'Bahrain', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Fils', N'.?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (260, N'Bangladeshi Taka', N'BDT', N'Bangladesh', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'taka', N'Paisa', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (261, N'Barbados Dollar', N'BBD', N'Barbados', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (262, N'Belarussian Ruble', N'BYR', N'Belarus', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ruble', N'Kapyeyka', N'Br')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (263, N'Belize Dollar', N'BZD', N'Belize', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (264, N'CFA Franc BCEAO', N'XOF', N'Benin', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (265, N'Bermudian Dollar', N'BMD', N'Bermuda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (266, N'Bhutan Ngultrum', N'BTN', N'Bhutan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ngultrum', N'Chetrum', N'Nu.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (267, N'Boliviano', N'BOB', N'Bolivia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'boliviano', N'Centavo', N'Bs.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (268, N'Marka', N'BAM', N'Bosnia-Herzevina', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'mark', N'Fening', N'KM')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (269, N'Botswana Pula', N'BWP', N'Botswana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pula', N'Thebe', N'P')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (270, N'Norwegian Krone', N'NOK', N'Bouvet Island', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'krone', N'Øre', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (271, N'Brazilian Real', N'BRL', N'Brazil', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'real', N'Centavo', N'R$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (272, N'Brunei Dollar', N'BND', N'Brunei Darussalam', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Sen', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (273, N'Bulgarian Lev', N'BGN', N'Bulgaria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lev', N'Stotinka', N'??')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (274, N'Burundi Franc', N'BIF', N'Burundi', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (275, N'Kampuchean Riel', N'KHR', N'Cambodia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'riel', N'Sen', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (276, N'CFA Franc BEAC', N'XAF', N'Cameroon', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (277, N'Canadian Dollar', N'CAD', N'Canada', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (278, N'Cape Verde Escudo', N'CVE', N'Cape Verde', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'escudo', N'Centavo', N' $')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (279, N'Cayman Islands Dollar', N'KYD', N'Cayman Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (280, N'Chilean Peso', N'CLP', N'Chile', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (281, N'Yuan Renminbi', N'CNY', N'China', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'yuan', N'Fen', N'¥ ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (282, N'Colombian Peso', N'COP', N'Colombia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (283, N'Comoros Franc', N'KMF', N'Comoros', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (284, N'Francs', N'CDF', N'Con, Dem. Republic', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (285, N'New Zealand Dollar', N'NZD', N'Cook Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (286, N'Costa Rican Colon', N'CRC', N'Costa Rica', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'colón', N'Céntimo', N'¢')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (287, N'Croatian Kuna', N'HRK', N'Croatia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kuna', N'Lipa', N'kn')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (288, N'Cuban Peso', N'CUP', N'Cuba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (289, N'Czech Koruna', N'CZK', N'Czech Rep.', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'koruna', N'Halér', N'Kc')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (290, N'Danish Krone', N'DKK', N'Denmark', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'krone', N'Øre', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (291, N'Djibouti Franc', N'DJF', N'Djibouti', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (292, N'Dominican Peso', N'DOP', N'Dominican Republic', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (293, N'Ecuador Sucre', N'ECS', N'Ecuador', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (294, N'Egyptian Pound', N'EGP', N'Egypt', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£ ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (295, N'El Salvador Colon', N'SVC', N'El Salvador', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (296, N'Eritrean Nakfa', N'ERN', N'Eritrea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'nakfa', N'Cent', N'Nfk')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (297, N'Ethiopian Birr', N'ETB', N'Ethiopia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'birr', N'Santim', N'Br')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (298, N'Falkland Islands Pound', N'FKP', N'Falkland Islands (Malvinas)', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (299, N'Fiji Dollar', N'FJD', N'Fiji', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (300, N'Gambian Dalasi', N'GMD', N'Gambia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dalasi', N'Butut', N'D')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (301, N'Georgian Lari', N'GEL', N'Georgia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lari', N'Tetri', N'.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (302, N'Ghanaian Cedi', N'GHS', N'Ghana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'cedi', N'Pesewa', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (303, N'Gibraltar Pound', N'GIP', N'Gibraltar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (304, N'Pound Sterling', N'GBP', N'Great Britain', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (305, N'East Carribean Dollar', N'XCD', N'Grenada', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (306, N'Guatemalan Quetzal', N'QTQ', N'Guatemala', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (307, N'Pound Sterling', N'GGP', N'Guernsey', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (308, N'Guinea Franc', N'GNF', N'Guinea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (309, N'Guinea-Bissau Peso', N'GWP', N'Guinea Bissau', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (310, N'Guyana Dollar', N'GYD', N'Guyana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (311, N'Haitian urde', N'HTG', N'Haiti', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'urde', N'Centime', N'G')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (312, N'Honduran Lempira', N'HNL', N'Honduras', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lempira', N'Centavo', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (313, N'Hong Kong Dollar', N'HKD', N'Hong Kong', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (314, N'Hungarian Forint', N'HUF', N'Hungary', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'forint', N'Fillér', N'Ft')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (315, N'Iceland Krona', N'ISK', N'Iceland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'króna', N'Eyrir', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (316, N'Indian Rupee', N'INR', N'India', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Paisa', N'INR')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (317, N'Indonesian Rupiah', N'IDR', N'Indonesia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupiah', N'Sen', N'Rp')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (318, N'Iranian Rial', N'IRR', N'Iran', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rial', N'Dinar', N'')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (319, N'Iraqi Dinar', N'IQD', N'Iraq', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Fils', N'?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (320, N'Israeli New Shekel', N'ILS', N'Israel', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shekel', N'Ara', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (321, N'Jamaican Dollar', N'JMD', N'Jamaica', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (322, N'Japanese Yen', N'JPY', N'Japan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'yen', N'Sen', N'¥')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (323, N'Jordanian Dinar', N'JOD', N'Jordan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Piastre', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (324, N'Kazakhstan Tenge', N'KZT', N'Kazakhstan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'tenge', N'Tïin', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (325, N'Kenyan Shilling', N'KES', N'Kenya', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (326, N'North Korean Won', N'KPW', N'Korea-North', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'won', N'Chon', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (327, N'Korean Won', N'KRW', N'Korea-South', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'won', N'Jeon', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (328, N'Kuwaiti Dinar', N'KWD', N'Kuwait', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Fils', N'? or K.D')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (329, N'Som', N'KGS', N'Kyrgyzstan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'som', N'Tyiyn', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (330, N'Lao Kip', N'LAK', N'Laos', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kip', N'Att', N'? or ?N')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (331, N'Latvian Lats', N'LVL', N'Latvia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lats', N'Santims', N'Ls')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (332, N'Lebanese Pound', N'LBP', N'Lebanon', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (333, N'Lesotho Loti', N'LSL', N'Lesotho', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'loti', N'Sente', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (334, N'Liberian Dollar', N'LRD', N'Liberia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (335, N'Libyan Dinar', N'LYD', N'Libya', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Dirham', N'LD')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (336, N'Swiss Franc', N'CHF', N'Liechtenstein', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Rappen', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (337, N'Lithuanian Litas', N'LTL', N'Lithuania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'litas', N'Centas', N'Lt')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (338, N'Macau Pataca', N'MOP', N'Macau', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pataca', N'Avo', N'P')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (339, N'Denar', N'MKD', N'Macedonia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'denar', N'Deni', N'???')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (340, N'Malagasy Franc', N'MGF', N'Madagascar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (341, N'Malawi Kwacha', N'MWK', N'Malawi', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kwacha', N'Tambala', N'MK')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (342, N'Malaysian Ringgit', N'MYR', N'Malaysia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ringgit', N'Sen', N'RM')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (343, N'Maldive Rufiyaa', N'MVR', N'Maldives', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rufiyaa', N'Laari', N'MVR')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (344, N'Mauritanian Ouguiya', N'MRO', N'Mauritania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ouguiya', N'Khoums', N'UM')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (345, N'Mauritius Rupee', N'MUR', N'Mauritius', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Cent', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (346, N'Mexican Nuevo Peso', N'MXN', N'Mexico', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (347, N'Moldovan Leu', N'MDL', N'Moldova', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'leu', N'Ban', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (348, N'Monlian Tugrik', N'MNT', N'Monlia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'tögrög', N'Möngö', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (349, N'Moroccan Dirham', N'MAD', N'Morocco', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dirham', N'Centime', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (350, N'Mozambique Metical', N'MZN', N'Mozambique', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'metical', N'Centavo', N'MT')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (351, N'Myanmar Kyat', N'MMK', N'Myanmar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kyat', N'Pya', N'Ks')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (352, N'Namibian Dollar', N'NAD', N'Namibia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (353, N'Nepalese Rupee', N'NPR', N'Nepal', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Paisa', N'Rs')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (354, N'Netherlands Antillean Guilder', N'ANG', N'Netherlands Antilles', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'guilder', N'Cent', N'ƒ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (355, N'CFP Franc', N'XPF', N'New Caledonia (French)', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (356, N'Nicaraguan Cordoba Oro', N'NIO', N'Nicaragua', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'córdoba', N'Centavo', N'C$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (357, N'Nigerian Naira', N'NGN', N'Nigeria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'naira', N'Kobo', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (358, N'Omani Rial', N'OMR', N'Oman', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rial', N'Baisa', N'?.?.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (359, N'Pakistan Rupee', N'PKR', N'Pakistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Paisa', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (360, N'Panamanian Balboa', N'PAB', N'Panama', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'balboa', N'Centésimo', N'B/.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (361, N'Papua New Guinea Kina', N'PGK', N'Papua New Guinea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kina', N'Toea', N'K')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (362, N'Paraguay Guarani', N'PYG', N'Paraguay', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'guaraní', N'Céntimo', N' (? in unicode)')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (363, N'Peruvian Nuevo Sol', N'PEN', N'Peru', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'sol', N'Céntimo', N'S/.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (364, N'Philippine Peso', N'PHP', N'Philippines', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (365, N'Polish Zloty', N'PLN', N'Poland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'zloty', N'Grosz', N'zl')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (366, N'Qatari Rial', N'QAR', N'Qatar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'riyal', N'Dirham', N'QR or ?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (367, N'Romanian New Leu', N'RON', N'Romania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'leu', N'Ban', N'lei')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (368, N'Russian Ruble', N'RUB', N'Russia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ruble', N'Kopek', N'')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (369, N'Rwanda Franc', N'RWF', N'Rwanda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (370, N'St. Helena Pound', N'SHP', N'Saint Helena', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (371, N'Samoan Tala', N'WST', N'Samoa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'tala', N'Sene', N'T')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (372, N'Dobra', N'STD', N'Sao Tome and Principe', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dobra', N'Cêntimo', N'Db')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (373, N'Saudi Riyal', N'SAR', N'Saudi Arabia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'riyal', N'Halala', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (374, N'Dinar', N'RSD', N'Serbia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Para', N'din.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (375, N'Seychelles Rupee', N'SCR', N'Seychelles', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Cent', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (376, N'Sierra Leone Leone', N'SLL', N'Sierra Leone', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'leone', N'Cent', N'Le')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (377, N'Singapore Dollar', N'SGD', N'Singapore', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (378, N'Solomon Islands Dollar', N'SBD', N'Solomon Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (379, N'Somali Shilling', N'SOS', N'Somalia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (380, N'South African Rand', N'ZAR', N'South Africa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rand', N'Cent', N'R')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (381, N'South Sudan Pound', N'SSP', N'South Sudan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (382, N'Sri Lanka Rupee', N'LKR', N'Sri Lanka', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Cent', N'Rs')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (383, N'Sudanese Pound', N'SDG', N'Sudan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (384, N'Surinam Dollar', N'SRD', N'Suriname', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (385, N'Swaziland Lilangeni', N'SZL', N'Swaziland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lilangeni', N'Cent', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (386, N'Swedish Krona', N'SEK', N'Sweden', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'krona', N'Öre', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (387, N'Syrian Pound', N'SYP', N'Syria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£ ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (388, N'Taiwan Dollar', N'TWD', N'Taiwan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (389, N'Tajik Somoni', N'TJS', N'Tajikistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'somoni', N'Diram', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (390, N'Tanzanian Shilling', N'TZS', N'Tanzania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (391, N'Thai Baht', N'THB', N'Thailand', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'baht', N'Satang', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (392, N'Tongan Paanga', N'TOP', N'Tonga', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pa?anga', N'Seniti', N'T$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (393, N'Trinidad and Toba Dollar', N'TTD', N'Trinidad and Toba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (394, N'Tunisian Dollar', N'TND', N'Tunisia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Millime', N'DT')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (395, N'Turkish Lira', N'TRY', N'Turkey', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lira', N'Kurus', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (396, N'Manat', N'TMT', N'Turkmenistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'manat', N'Tennesi', N'm')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (397, N'Uganda Shilling', N'UGX', N'Uganda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (398, N'Ukraine Hryvnia', N'UAH', N'Ukraine', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'hryvnia', N'Kopiyka', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (399, N'Arab Emirates Dirham', N'AED', N'United Arab Emirates', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dirham', N'Fils', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (400, N'Uruguayan Peso', N'UYU', N'Uruguay', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centésimo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (401, N'Uzbekistan Sum', N'UZS', N'Uzbekistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'som', N'Tiyin', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (402, N'Vanuatu Vatu', N'VUV', N'Vanuatu', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'vatu', N'None', N'Vt')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (403, N'Venezuelan Bolivar', N'VEF', N'Venezuela', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'bolívar', N'Céntimo', N'Bs F')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (404, N'Vietnamese Dong', N'VND', N'Vietnam', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'd?ng', N'Hào', N'.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (405, N'Yemeni Rial', N'YER', N'Yemen', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rial', N'Fils', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (406, N'Zambian Kwacha', N'ZMW', N'Zambia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kwacha', N'Ngwee', N'ZK')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (407, N'Zimbabwe Dollar', N'ZWD', N'Zimbabwe', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

SET IDENTITY_INSERT [dbo].[Currencies] OFF

INSERT [dbo].[CurrencyConversion] ([CurrencyConversionId], [CurrencyCodeFrom], [CurrencyCodeTo], [CurrencyRate], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ConversionDate]) VALUES (N'1', N'249', N'260', CAST(80.0000000000 AS Decimal(18, 10)), N'NA', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime), CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[CurrencyConversion] ([CurrencyConversionId], [CurrencyCodeFrom], [CurrencyCodeTo], [CurrencyRate], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ConversionDate]) VALUES (N'2', N'260', N'260', CAST(1.0000000000 AS Decimal(18, 10)), N'NA', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime), CAST(0x0000000000000000 AS DateTime))

SET IDENTITY_INSERT [dbo].[Settings] ON 


INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Purchase', N'TotalPrice', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'Purchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (3, N'Sale', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'Issue', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'Sale', N'QuantityDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'Sale', N'TakaDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'Sale', N'DollerDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'Sale', N'RateDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (54, N'PriceDeclaration', N'LocalInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (55, N'PriceDeclaration', N'LocalInVAT4_3Ka(Tarrif)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'ImportPurchase', N'FixedCnF', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'ImportPurchase', N'FixedInsurance', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'ImportPurchase', N'CalculativeAV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'ImportPurchase', N'FixedCD', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'ImportPurchase', N'FixedRD', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'ImportPurchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'ImportPurchase', N'FixedTVB', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'ImportPurchase', N'FixedTVA', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'ImportPurchase', N'FixedATV', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'ImportPurchase', N'FixedOthers', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'ImportPurchase', N'FixedSD', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'AutoCode', N'Item', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'AutoCode', N'Customer', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'AutoCode', N'Vendor', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'AutoCode', N'Bank', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'AutoCode', N'OverHead', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'IssueFromBOM', N'IssueFromBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'PrepaidVAT', N'PrepaidVAT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'Sale', N'ItemNature', N'ELECTRIC WIRE/CABLE', N'string', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'BOM', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'BOM', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (39, N'BOM', N'ItemNature', N'SHAFIQKAMRUL', N'string', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (40, N'BOM', N'IntermediateProduction', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (42, N'Sale', N'NumberOfItems', N'15', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (43, N'Production', N'ProductionWithoutBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (44, N'IssueFromBOM', N'IssueAutoPost', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (45, N'Sale', N'ATVRate', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (46, N'Sale', N'WareHouseRentPerQuantity', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (47, N'Sale', N'CommercialImporter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (48, N'DatabaseName', N'DatabaseName', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (49, N'Import', N'SaleExistContinue', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (50, N'Purchase', N'TrackingWithSale', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (51, N'Purchase', N'TrackingWithSaleFIFO', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (52, N'BOM', N'VAT4_3(TollIssue)WithRaw', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (56, N'PriceDeclaration', N'TenderInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (78, N'Sale', N'Page3Plyer', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (79, N'Sale', N'CreditWithoutTransaction', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (80, N'Sale', N'VAT6_3A4', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (81, N'Sale', N'VAT6_3Letter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (82, N'Sale', N'VAT6_3Legal', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (83, N'Sale', N'TenderSaleFromBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (84, N'Issue', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (85, N'Issue', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (86, N'Purchase', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (87, N'Purchase', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (88, N'Receive', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (89, N'Receive', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (90, N'Receive', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (91, N'Purchase', N'RateChangePromote', N'7.5', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (92, N'Banderol', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (93, N'Printer', N'DefaultPrinter', N' ', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (94, N'Printer', N'MaxNoOfPrint', N'10', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (95, N'Printer', N'EmployeeSalary(BDE)', N'Y', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (96, N'BOM', N'NetCost', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (97, N'TollItemReceive', N'AttachedWithVAT6_1', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (98, N'ImportTender', N'CustomerGroup', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (99, N'TrackingTrace', N'Tracking', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (100, N'TrackingTrace', N'TrackingNo', N'2', N'int', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (101, N'TrackingTrace', N'TrackingHead_1', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (102, N'TrackingTrace', N'TrackingHead_2', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (103, N'CompanyCode', N'Code', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (57, N'PriceDeclaration', N'TenderInVAT4_3(Tender)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (58, N'PriceDeclaration', N'TenderPriceWithVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (59, N'Purchase', N'ImportCostingIncludeATV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (60, N'TollReceive', N'WithIssue', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (61, N'Reports', N'VAT6_3', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (65, N'Sale', N'PackingInExport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (66, N'Sale', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (67, N'Receive', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (68, N'BOM', N'TollIssueCostWithOthers', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (69, N'BOM', N'RptBOMCostingA4', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (70, N'VAT19', N'ExportInBDT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (71, N'BOM', N'InputServicePercent', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (72, N'Sale', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (73, N'Production', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (74, N'VAT17', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (75, N'VAT16', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (76, N'Sale', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (77, N'Sale', N'ReportNumberOfCopiesPrint', N'1', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

SET IDENTITY_INSERT [dbo].[Settings] OFF

SET IDENTITY_INSERT [dbo].[SettingsRole] ON 


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'10', N'AutoCode', N'Bank', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'10', N'AutoCode', N'Customer', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (3, N'10', N'AutoCode', N'Item', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'10', N'AutoCode', N'OverHead', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'10', N'AutoCode', N'Vendor', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'10', N'Banderol', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'10', N'BOM', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'10', N'BOM', N'InputServicePercent', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'10', N'BOM', N'IntermediateProduction', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'10', N'BOM', N'ItemNature', N'SHAFIQKAMRUL', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'10', N'BOM', N'NetCost', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'10', N'BOM', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'10', N'BOM', N'RptBOMCostingA4', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'10', N'BOM', N'TollIssueCostWithOthers', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (17, N'10', N'BOM', N'VAT4_3(TollIssue)WithRaw', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'10', N'CompanyCode', N'Code', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'10', N'DatabaseName', N'DatabaseName', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (21, N'10', N'Import', N'SaleExistContinue', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (22, N'10', N'ImportPurchase', N'CalculativeAV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'10', N'ImportPurchase', N'FixedATV', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'10', N'ImportPurchase', N'FixedCD', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'10', N'ImportPurchase', N'FixedCnF', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'10', N'ImportPurchase', N'FixedInsurance', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'10', N'ImportPurchase', N'FixedOthers', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'10', N'ImportPurchase', N'FixedRD', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'10', N'ImportPurchase', N'FixedSD', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'10', N'ImportPurchase', N'FixedTVA', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'10', N'ImportPurchase', N'FixedTVB', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'10', N'ImportPurchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'10', N'ImportTender', N'CustomerGroup', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'10', N'Issue', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (35, N'10', N'Issue', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (36, N'10', N'Issue', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (37, N'10', N'IssueFromBOM', N'IssueAutoPost', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (38, N'10', N'IssueFromBOM', N'IssueFromBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (39, N'10', N'PrepaidVAT', N'PrepaidVAT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (40, N'10', N'PriceDeclaration', N'LocalInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (41, N'10', N'PriceDeclaration', N'LocalInVAT4_3Ka(Tarrif)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (42, N'10', N'PriceDeclaration', N'TenderInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (43, N'10', N'PriceDeclaration', N'TenderInVAT4_3(Tender)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (44, N'10', N'PriceDeclaration', N'TenderPriceWithVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (45, N'10', N'Printer', N'DefaultPrinter', N' ', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (46, N'10', N'Printer', N'EmployeeSalary(BDE)', N'Y', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (47, N'10', N'Printer', N'MaxNoOfPrint', N'10', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (48, N'10', N'Production', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (49, N'10', N'Production', N'ProductionWithoutBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (50, N'10', N'Purchase', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (51, N'10', N'Purchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (52, N'10', N'Purchase', N'ImportCostingIncludeATV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (53, N'10', N'Purchase', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (54, N'10', N'Purchase', N'RateChangePromote', N'7.5', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (55, N'10', N'Purchase', N'TotalPrice', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (56, N'10', N'Purchase', N'TrackingWithSale', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (57, N'10', N'Purchase', N'TrackingWithSaleFIFO', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (58, N'10', N'Receive', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (59, N'10', N'Receive', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (60, N'10', N'Receive', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (61, N'10', N'Receive', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (62, N'10', N'Reports', N'VAT6_3', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (63, N'10', N'Sale', N'ATVRate', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (64, N'10', N'Sale', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (65, N'10', N'Sale', N'CommercialImporter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (66, N'10', N'Sale', N'CreditWithoutTransaction', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (67, N'10', N'Sale', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (68, N'10', N'Sale', N'DollerDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (69, N'10', N'Sale', N'ItemNature', N'ELECTRIC WIRE/CABLE', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (70, N'10', N'Sale', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (71, N'10', N'Sale', N'NumberOfItems', N'15', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (72, N'10', N'Sale', N'PackingInExport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (73, N'10', N'Sale', N'Page3Plyer', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (74, N'10', N'Sale', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (75, N'10', N'Sale', N'QuantityDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (76, N'10', N'Sale', N'RateDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (77, N'10', N'Sale', N'ReportNumberOfCopiesPrint', N'1', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (78, N'10', N'Sale', N'TakaDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (79, N'10', N'Sale', N'TenderSaleFromBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (80, N'10', N'Sale', N'VAT6_3A4', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (81, N'10', N'Sale', N'VAT6_3Legal', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (82, N'10', N'Sale', N'VAT6_3Letter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (83, N'10', N'Sale', N'WareHouseRentPerQuantity', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (84, N'10', N'TollItemReceive', N'AttachedWithVAT6_1', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (85, N'10', N'TollReceive', N'WithIssue', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (86, N'10', N'TrackingTrace', N'Tracking', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (87, N'10', N'TrackingTrace', N'TrackingHead_1', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (88, N'10', N'TrackingTrace', N'TrackingHead_2', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (89, N'10', N'TrackingTrace', N'TrackingNo', N'2', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (90, N'10', N'VAT16', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (91, N'10', N'VAT17', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (93, N'10', N'VAT19', N'ExportInBDT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

SET IDENTITY_INSERT [dbo].[SettingsRole] OFF

SET IDENTITY_INSERT [dbo].[UOMName] ON 


INSERT [dbo].[UOMName] ([UOMId], [UOMName], [UOMCode], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Pcs', N'Pcs', N'-', N'Y', N'admin', CAST(0x0000A95A018611D0 AS DateTime), N'admin', CAST(0x0000A95A018611D0 AS DateTime))

SET IDENTITY_INSERT [dbo].[UOMName] OFF

INSERT [dbo].[UOMs] ([UOMId], [UOMFrom], [UOMTo], [Convertion], [CTypes], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ActiveStatus]) VALUES (N'1', N'pcs', N'pcs', CAST(1.000000000 AS Decimal(25, 9)), N'-', N'admin', CAST(0x0000A95A01861B30 AS DateTime), N'admin', CAST(0x0000A95A01861B30 AS DateTime), N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(1 AS Numeric(18, 0)), N'10', N'1101', N'Y', N'Y', N'Setup/ItemInformation/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(2 AS Numeric(18, 0)), N'10', N'1102', N'Y', N'Y', N'Setup/ItemInformation/Product', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(3 AS Numeric(18, 0)), N'10', N'1103', N'Y', N'Y', N'Setup/ItemInformation/Overhead', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(4 AS Numeric(18, 0)), N'10', N'1201', N'Y', N'Y', N'Setup/Vedor/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(5 AS Numeric(18, 0)), N'10', N'1202', N'Y', N'Y', N'Setup/Vedor/Vendor', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(6 AS Numeric(18, 0)), N'10', N'1301', N'Y', N'Y', N'Setup/Customer/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(7 AS Numeric(18, 0)), N'10', N'1302', N'Y', N'Y', N'Setup/Customer/Customer', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(8 AS Numeric(18, 0)), N'10', N'1401', N'Y', N'Y', N'Setup/Bank/Bank', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(9 AS Numeric(18, 0)), N'10', N'1501', N'Y', N'Y', N'Setup/Vehicle/Vehicle', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(10 AS Numeric(18, 0)), N'10', N'1601', N'Y', N'Y', N'Setup/PriceDeclaration/VAT-1', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(11 AS Numeric(18, 0)), N'10', N'1602', N'Y', N'Y', N'Setup/PriceDeclaration/Service', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(12 AS Numeric(18, 0)), N'10', N'1603', N'Y', N'Y', N'Setup/PriceDeclaration/Tender', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(13 AS Numeric(18, 0)), N'10', N'1701', N'Y', N'Y', N'Setup/Company/Commpany', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(14 AS Numeric(18, 0)), N'10', N'1801', N'Y', N'Y', N'Setup/FiscalYear/FiscalYear', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(15 AS Numeric(18, 0)), N'10', N'1901', N'Y', N'Y', N'Setup/Configuration/Settings', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(16 AS Numeric(18, 0)), N'10', N'1902', N'Y', N'Y', N'Setup/Configuration/Prefix', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(17 AS Numeric(18, 0)), N'10', N'11001', N'Y', N'Y', N'Setup/Import/Import', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(18 AS Numeric(18, 0)), N'10', N'11101', N'Y', N'Y', N'Setup/Conversion/Conversion', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(19 AS Numeric(18, 0)), N'10', N'11201', N'Y', N'Y', N'Setup/Currency/Currency', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(20 AS Numeric(18, 0)), N'10', N'11202', N'Y', N'Y', N'Setup/Currency/Conversion', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(21 AS Numeric(18, 0)), N'10', N'11301', N'Y', N'Y', N'Setup/Banderol/Banderol', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(22 AS Numeric(18, 0)), N'10', N'11302', N'Y', N'Y', N'Setup/Banderol/Packaging', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(23 AS Numeric(18, 0)), N'10', N'11303', N'Y', N'Y', N'Setup/Banderol/Product', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(24 AS Numeric(18, 0)), N'10', N'2101', N'Y', N'Y', N'Purchase/Purchase/Local', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(25 AS Numeric(18, 0)), N'10', N'2102', N'Y', N'Y', N'Purchase/Purchase/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(26 AS Numeric(18, 0)), N'10', N'2103', N'Y', N'Y', N'Purchase/Purchase/Import', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(27 AS Numeric(18, 0)), N'10', N'2104', N'Y', N'Y', N'Purchase/Purchase/InputService', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(28 AS Numeric(18, 0)), N'10', N'2105', N'Y', N'Y', N'Purchase/Purchase/PurchaseReturn', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(29 AS Numeric(18, 0)), N'10', N'2106', N'Y', N'Y', N'Purchase/Purchase/Service Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(30 AS Numeric(18, 0)), N'10', N'2107', N'Y', N'Y', N'Purchase/Purchase/Service Non Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(31 AS Numeric(18, 0)), N'10', N'3101', N'Y', N'Y', N'Production/Issue/Issue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(32 AS Numeric(18, 0)), N'10', N'3102', N'Y', N'Y', N'Production/Issue/Return', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(33 AS Numeric(18, 0)), N'10', N'3201', N'Y', N'Y', N'Production/Receive/WIP', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(34 AS Numeric(18, 0)), N'10', N'3202', N'Y', N'Y', N'Production/Receive/FGReceive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(35 AS Numeric(18, 0)), N'10', N'3203', N'Y', N'Y', N'Production/Receive/Return', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(36 AS Numeric(18, 0)), N'10', N'3301', N'Y', N'Y', N'Production/Receive/Package', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(37 AS Numeric(18, 0)), N'10', N'4101', N'Y', N'Y', N'Sale/Sale/Local', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(38 AS Numeric(18, 0)), N'10', N'4102', N'Y', N'Y', N'Sale/Sale/Service Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(39 AS Numeric(18, 0)), N'10', N'41021', N'Y', N'Y', N'Sale/Sale/Service Non Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(40 AS Numeric(18, 0)), N'10', N'4103', N'Y', N'Y', N'Sale/Sale/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(41 AS Numeric(18, 0)), N'10', N'4104', N'Y', N'Y', N'Sale/Sale/Export', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(42 AS Numeric(18, 0)), N'10', N'4105', N'Y', N'Y', N'Sale/Sale/Tender', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(43 AS Numeric(18, 0)), N'10', N'4201', N'Y', N'Y', N'Sale/Transfer/Transfer', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(44 AS Numeric(18, 0)), N'10', N'5101', N'Y', N'Y', N'Deposit/Treasury/Treasury', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(45 AS Numeric(18, 0)), N'10', N'5201', N'Y', N'Y', N'Deposit/VDS/VDS', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(46 AS Numeric(18, 0)), N'10', N'5301', N'Y', N'Y', N'Deposit/SD/SD', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(47 AS Numeric(18, 0)), N'10', N'5401', N'Y', N'Y', N'Deposit/Reverse/Adjustment', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(48 AS Numeric(18, 0)), N'10', N'6101', N'Y', N'Y', N'Toll/Client/RawIssue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(49 AS Numeric(18, 0)), N'10', N'6102', N'Y', N'Y', N'Toll/Client/FGReceive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(50 AS Numeric(18, 0)), N'10', N'6201', N'Y', N'Y', N'Toll/Contractor/RawReceive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(51 AS Numeric(18, 0)), N'10', N'6202', N'Y', N'Y', N'Toll/Contractor/FGProduction', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(52 AS Numeric(18, 0)), N'10', N'6203', N'Y', N'Y', N'Toll/Contractor/FGIssue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(53 AS Numeric(18, 0)), N'10', N'7101', N'Y', N'Y', N'Adjustment/AdjustmentHead/Head', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(54 AS Numeric(18, 0)), N'10', N'7102', N'Y', N'Y', N'Adjustment/AdjustmentHead/Transaction', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(55 AS Numeric(18, 0)), N'10', N'7201', N'Y', N'Y', N'Adjustment/Purchase/DN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(56 AS Numeric(18, 0)), N'10', N'7202', N'Y', N'Y', N'Adjustment/Purchase/CN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(57 AS Numeric(18, 0)), N'10', N'7301', N'Y', N'Y', N'Adjustment/Sale/CN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(58 AS Numeric(18, 0)), N'10', N'7302', N'Y', N'Y', N'Adjustment/Sale/DN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(59 AS Numeric(18, 0)), N'10', N'7401', N'Y', N'Y', N'Adjustment/Dispose/26', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(60 AS Numeric(18, 0)), N'10', N'7402', N'Y', N'Y', N'Adjustment/Dispose/27', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(61 AS Numeric(18, 0)), N'10', N'7501', N'Y', N'Y', N'Adjustment/DDB/DDB', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(62 AS Numeric(18, 0)), N'10', N'8101', N'Y', N'Y', N'NBRReport/VAT1/BOM', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(63 AS Numeric(18, 0)), N'10', N'8201', N'Y', N'Y', N'NBRReport/VAT16/VAT16', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(64 AS Numeric(18, 0)), N'10', N'8301', N'Y', N'Y', N'NBRReport/VAT17/VAT17', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(65 AS Numeric(18, 0)), N'10', N'8401', N'Y', N'Y', N'NBRReport/VAT18/VAT18', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(66 AS Numeric(18, 0)), N'10', N'8501', N'Y', N'Y', N'NBRReport/VAT19/VAT19', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(67 AS Numeric(18, 0)), N'10', N'8601', N'Y', N'Y', N'NBRReport/SDReport/SDReport', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(68 AS Numeric(18, 0)), N'10', N'9101', N'Y', N'Y', N'MISReport/Purchase/Purchase', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(69 AS Numeric(18, 0)), N'10', N'9102', N'Y', N'Y', N'MISReport/Purchase/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(70 AS Numeric(18, 0)), N'10', N'9201', N'Y', N'Y', N'MISReport/Production/Issue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(71 AS Numeric(18, 0)), N'10', N'9202', N'Y', N'Y', N'MISReport/Production/IssueReturn', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(72 AS Numeric(18, 0)), N'10', N'9203', N'Y', N'Y', N'MISReport/Production/Receive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(73 AS Numeric(18, 0)), N'10', N'9204', N'Y', N'Y', N'MISReport/Production/InnerIssue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(74 AS Numeric(18, 0)), N'10', N'9301', N'Y', N'Y', N'MISReport/Toll/Issue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(75 AS Numeric(18, 0)), N'10', N'9302', N'Y', N'Y', N'MISReport/Toll/Receive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(76 AS Numeric(18, 0)), N'10', N'9401', N'Y', N'Y', N'MISReport/Sale/Local', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(77 AS Numeric(18, 0)), N'10', N'9402', N'Y', N'Y', N'MISReport/Sale/Service', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(78 AS Numeric(18, 0)), N'10', N'9403', N'Y', N'Y', N'MISReport/Sale/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(79 AS Numeric(18, 0)), N'10', N'9404', N'Y', N'Y', N'MISReport/Sale/Export', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(80 AS Numeric(18, 0)), N'10', N'9501', N'Y', N'Y', N'MISReport/Stock/Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(81 AS Numeric(18, 0)), N'10', N'9601', N'Y', N'Y', N'MISReport/Deposit/Deposit', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(82 AS Numeric(18, 0)), N'10', N'9701', N'Y', N'Y', N'MISReport/VAT16/VAT16', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(83 AS Numeric(18, 0)), N'10', N'9801', N'Y', N'Y', N'MISReport/VAT17/VAT17', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(84 AS Numeric(18, 0)), N'10', N'9901', N'Y', N'Y', N'MISReport/VAT18/VAT18', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(85 AS Numeric(18, 0)), N'10', N'91001', N'Y', N'Y', N'MISReport/SDDeposit/SDDeposit', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(86 AS Numeric(18, 0)), N'10', N'10101', N'Y', N'Y', N'SetupReport/Product/Type', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(87 AS Numeric(18, 0)), N'10', N'10102', N'Y', N'Y', N'SetupReport/Product/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(88 AS Numeric(18, 0)), N'10', N'10103', N'Y', N'Y', N'SetupReport/Product/Product', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(89 AS Numeric(18, 0)), N'10', N'10201', N'Y', N'Y', N'SetupReport/Customer/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(90 AS Numeric(18, 0)), N'10', N'10202', N'Y', N'Y', N'SetupReport/Customer/Customer', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(91 AS Numeric(18, 0)), N'10', N'10301', N'Y', N'Y', N'SetupReport/Vendor/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(92 AS Numeric(18, 0)), N'10', N'10302', N'Y', N'Y', N'SetupReport/Vendor/Vendor', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(93 AS Numeric(18, 0)), N'10', N'10401', N'Y', N'Y', N'SetupReport/Bank/Bank', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(94 AS Numeric(18, 0)), N'10', N'10501', N'Y', N'Y', N'SetupReport/Vehicle/Vehicle', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(95 AS Numeric(18, 0)), N'10', N'20101', N'Y', N'Y', N'UserAccount/NewAccount/NewAccount', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(96 AS Numeric(18, 0)), N'10', N'20201', N'Y', N'Y', N'UserAccount/PasswordChange/PasswordChange', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(97 AS Numeric(18, 0)), N'10', N'43', N'Y', N'Y', N'UserAccount/UserRole/UserRole', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(98 AS Numeric(18, 0)), N'10', N'44', N'Y', N'Y', N'UserAccount/SettingsRole/SettingsRole', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(99 AS Numeric(18, 0)), N'10', N'33101', N'Y', N'Y', N'Banderol/Demand/Demand', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(100 AS Numeric(18, 0)), N'10', N'33201', N'Y', N'Y', N'Banderol/Receive/Receive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[Vehicles] ([VehicleID], [VehicleCode], [VehicleType], [VehicleNo], [Description], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5], [DriverName]) VALUES (N'0', NULL, N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', NULL)

INSERT [dbo].[Vehicles] ([VehicleID], [VehicleCode], [VehicleType], [VehicleNo], [Description], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5], [DriverName]) VALUES (N'1', N'1', N'Truck', N'123', N'-', N'-', N'Y', N'admin', CAST(0x0000A95A0187854C AS DateTime), N'admin', CAST(0x0000A95A0187854C AS DateTime), NULL, NULL, NULL, NULL, NULL, N'')


                ";
                #endregion TableDefaultData Back


                top2 = "go";

                IEnumerable<string> commandStringsDefaultData = Regex.Split(sqlText, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                foreach (string commandString in commandStringsDefaultData)
                {
                    if (commandString.Trim() != "")
                    {
                        SqlCommand cmdIdExist1 = new SqlCommand(commandString, currConn);

                        cmdIdExist1.Transaction = transaction;
                        transResult = (int)cmdIdExist1.ExecuteNonQuery();
                        if (transResult < 0)
                        {
                            throw new ArgumentNullException("Insert Default Data to Database'" + databaseName + "'", MessageVM.dbMsgTableDefaultData);
                        }
                    }
                }

                #endregion TableCreate

                #region Insert Company Profile

                //string NewCompanyID = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyID);
                string tom = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyName);
                string jary = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyLegalName);
                string miki = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.VatRegistrationNo);
                //string mouse = Converter.DESEncrypt(PassPhrase, EnKey, GetHardwareID());
                string mouse = Converter.DESEncrypt(PassPhrase, EnKey, GetServerHardwareId(connVM));


                sqlText = "";
                sqlText += " insert into CompanyProfiles(";
                sqlText += " CompanyID,";
                sqlText += " CompanyName,";
                sqlText += " CompanyLegalName,";
                sqlText += " Address1,";
                sqlText += " Address2,";
                sqlText += " Address3,";
                sqlText += " City,";
                sqlText += " ZipCode,";
                sqlText += " TelephoneNo,";
                sqlText += " FaxNo,";
                sqlText += " Email,";
                sqlText += " ContactPerson,";
                sqlText += " ContactPersonDesignation,";
                sqlText += " ContactPersonTelephone,";
                sqlText += " ContactPersonEmail,";
                sqlText += " TINNo,";
                sqlText += " VatRegistrationNo,";
                sqlText += " Comments,";
                sqlText += " ActiveStatus,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " StartDateTime,";
                sqlText += " FYearStart,";
                sqlText += " FYearEnd,";
                sqlText += " Tom,";
                sqlText += " Jary,";
                sqlText += " Miki,";
                sqlText += " Mouse)";

                sqlText += " values(";
                sqlText += "'" + companyProfiles.CompanyID + "' ,";
                sqlText += "'" + companyProfiles.CompanyName + "' ,";
                sqlText += "'" + companyProfiles.CompanyLegalName + "' ,";
                sqlText += "'" + companyProfiles.Address1 + "' ,";
                sqlText += "'" + companyProfiles.Address2 + "' ,";
                sqlText += "'" + companyProfiles.Address3 + "' ,";
                sqlText += "'" + companyProfiles.City + "' ,";
                sqlText += "'" + companyProfiles.ZipCode + "' ,";
                sqlText += "'" + companyProfiles.TelephoneNo + "' ,";
                sqlText += "'" + companyProfiles.FaxNo + "' ,";
                sqlText += "'" + companyProfiles.Email + "' ,";
                sqlText += "'" + companyProfiles.ContactPerson + "' ,";
                sqlText += "'" + companyProfiles.ContactPersonDesignation + "' ,";
                sqlText += "'" + companyProfiles.ContactPersonTelephone + "' ,";
                sqlText += "'" + companyProfiles.ContactPersonEmail + "' ,";
                sqlText += "'" + companyProfiles.TINNo + "' ,";
                sqlText += "'" + companyProfiles.VatRegistrationNo + "' ,";
                sqlText += "'" + companyProfiles.Comments + "' ,";
                sqlText += "'" + companyProfiles.ActiveStatus + "' ,";
                sqlText += "'SuperAdmin' ,";
                sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' ,";
                sqlText += "'SuperAdmin' ,";
                sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' ,";
                sqlText += "'" + companyProfiles.StartDateTime + "' ,";
                sqlText += "'" + companyProfiles.FYearStart + "' ,";
                sqlText += "'" + companyProfiles.FYearEnd + "' , ";
                sqlText += "'" + tom + "' , ";
                sqlText += "'" + jary + "' , ";
                sqlText += "'" + miki + "' , ";
                sqlText += "'" + mouse + "' ";
                sqlText += " )";

                //try
                //{


                SqlCommand cmdCompanyProfile = new SqlCommand(sqlText, currConn);
                cmdCompanyProfile.Transaction = transaction;
                transResult = (int)cmdCompanyProfile.ExecuteNonQuery();
                if (transResult < 0)
                {

                    throw new ArgumentNullException("Insert company Profile data to Database('" + databaseName + "')", MessageVM.dbMsgCompanyInformationNotSave);
                }
                newID = companyProfiles.CompanyID;


                #endregion Insert Company Profile

                #region Insert Fiscal Year
                foreach (var Item in fiscalDetails.ToList())
                {

                    #region Insert only DetailTable

                    sqlText = "";
                    sqlText += " insert into FiscalYear(";
                    sqlText += " FiscalYearName,";
                    sqlText += " CurrentYear,";
                    sqlText += " PeriodID,";
                    sqlText += " PeriodName,";
                    sqlText += " PeriodStart,";
                    sqlText += " PeriodEnd,";
                    sqlText += " PeriodLock,";
                    sqlText += " GLLock,";
                    sqlText += " CreatedBy,";
                    sqlText += " CreatedOn,";
                    sqlText += " LastModifiedBy,";
                    sqlText += " LastModifiedOn";

                    sqlText += " )";
                    sqlText += " values(	";

                    sqlText += "'" + Item.FiscalYearName + "',";
                    sqlText += "'" + Item.CurrentYear + "',";
                    sqlText += "'" + Item.PeriodID + "',";
                    sqlText += "'" + Item.PeriodName + "',";
                    sqlText += "'" + Item.PeriodStart + "',";
                    sqlText += "'" + Item.PeriodEnd + "',";
                    sqlText += "'" + Item.PeriodLock + "',";
                    sqlText += "'" + Item.GLLock + "',";
                    sqlText += "'SuperAdmin',";
                    sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    sqlText += "'SuperAdmin',";
                    sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'";

                    sqlText += ")	";


                    SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                    cmdInsDetail.Transaction = transaction;
                    transResult = (int)cmdInsDetail.ExecuteNonQuery();

                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException("Insert Fiscal Year data to Database('" + databaseName + "')", MessageVM.dbMsgCFiscalYearNotSave);
                    }
                    #endregion Insert only DetailTable
                }



                #endregion Insert Fiscal Year

                #region Insert Sys DB Information

                string CompanyID = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyID);
                string CompanyName = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyName);
                string DatabaseName = Converter.DESEncrypt(PassPhrase, EnKey, databaseName);
                string ActiveStatus = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.ActiveStatus);
                //string CompanyLegalName = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyLegalName);
                sqlText = "";
                sqlText += " INSERT INTO CompanyInformations (CompanyID,CompanyName,DatabaseName,ActiveStatus,Serial, SysVersion)";
                sqlText += " VALUES(" +
                           "'" + CompanyID + "'," +
                           "'" + CompanyName + "'," +
                           "'" + DatabaseName + "'," +
                           "'" + ActiveStatus + "'," +
                    //"'" + CompanyLegalName + "'," +
                           "(select isnull(max(Serial ),0)+1 FROM  CompanyInformations), '2012'" +

                           ")";
                currConn.ChangeDatabase("SymphonyVATSys");
                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                cmdPrefetch.Transaction = transaction;

                transResult = (int)cmdPrefetch.ExecuteNonQuery();
                if (transResult < 0)
                {
                    throw new ArgumentNullException("Insert Company List Information", MessageVM.dbMsgDBInfoInsert);
                }
                #endregion Insert Sys DB Information

                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        #region SuccessResult

                        retResults[0] = "Success";
                        retResults[1] = "Requested Company Created successfully.";
                        retResults[2] = newID;
                        #endregion SuccessResult

                    }

                }

                #endregion Commit
            }
            #endregion Try

            #region Catch and Finall
            catch (ArgumentNullException arg)
            {
                if (arg.ParamName.ToLower() != "deletedb")
                {
                    currConn.Close();
                    currConn.Open();
                    currConn.ChangeDatabase("master");
                    #region check Database and delete
                    sqlText = "";
                    sqlText += " USE [master]";
                    sqlText += " drop DATABASE " + databaseName + "";

                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    cmdIdExist.ExecuteNonQuery();
                    #endregion check Database
                }

                FileLogger.Log("CommonDAL", "NewDBCreate24082019", arg.ToString() + "\n" + sqlText);

                throw arg;
            }
            catch (SqlException sqlex)
            {

                currConn.Close();
                currConn.Open();
                currConn.ChangeDatabase("master");

                #region check Database and delete


                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " drop DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                cmdIdExist.Transaction = transaction;
                cmdIdExist.ExecuteNonQuery();


                #endregion check Database

                FileLogger.Log("CommonDAL", "NewDBCreate24082019", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }

            catch (Exception ex)
            {

                currConn.Close();
                currConn.Open();
                currConn.ChangeDatabase("master");
                #region check Database and delete


                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " drop DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                cmdIdExist.Transaction = transaction;
                cmdIdExist.ExecuteNonQuery();

                #endregion check Database

                FileLogger.Log("CommonDAL", "NewDBCreate24082019", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result
        }

        #endregion

        #region Methods 03

        public string[] NewDBCreate(CompanyProfileVM companyProfiles, string databaseName, List<FiscalYearVM> fiscalDetails, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string nextId = "";
            string newID = "";

            #endregion Initializ

            #region Try
            try
            {
                #region Validation

                if (string.IsNullOrEmpty(databaseName))
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoCompanyName);
                }
                if (fiscalDetails.Count() <= 0)
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoFiscalYear);
                }
                if (companyProfiles == null)
                {
                    throw new ArgumentNullException(MessageVM.dbMsgMethodName, MessageVM.dbMsgNoCompanyInformation);
                }

                #endregion Validation

                #region open connection and transaction sys / Master

                SysDBInfoVM.SysDatabaseName = "SymphonyVATSys";

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//start
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region check Database

                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " select COUNT(NAME) from sys.databases where name = '" + databaseName + "'";

                SqlCommand cmdDBExist = new SqlCommand(sqlText, currConn);
                transResult = (int)cmdDBExist.ExecuteScalar();
                if (transResult > 0)
                {
                    throw new ArgumentNullException("DeleteDB", MessageVM.dbMsgDBExist);
                }

                #endregion check Database

                #region CreateDatabase

                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " CREATE DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                transResult = (int)cmdIdExist.ExecuteNonQuery();
                if (transResult != -1)
                {
                    throw new ArgumentNullException("Create Database('" + databaseName + "')", MessageVM.dbMsgDBNotCreate);
                }

                #endregion CreateDatabase

                #region Change Database for New DB
                currConn.ChangeDatabase(databaseName);
                transaction = currConn.BeginTransaction(MessageVM.dbMsgMethodName);
                #endregion open connection and transaction

                #region TableCreate
                string top1;

                #region CreateTable Back
                //              sqlText = @"
                //
                //";
                #endregion CreateTable
                #region CreateTable Back
                sqlText = @"
                
CREATE TABLE [dbo].[AdjustmentHistorys](
	[AdjHistoryID] [varchar](50) NULL,
	[BranchId] [int] NULL,
	[AdjHistoryNo] [varchar](50) NULL,
	[AdjId] [varchar](50) NULL,
	[AdjDate] [datetime] NULL,
	[AdjInputAmount] [decimal](25, 9) NULL,
	[AdjInputPercent] [decimal](25, 9) NULL,
	[AdjAmount] [decimal](25, 9) NULL,
	[AdjVATRate] [decimal](25, 9) NULL,
	[AdjVATAmount] [decimal](25, 9) NULL,
	[AdjSD] [decimal](25, 9) NULL,
	[AdjSDAmount] [decimal](25, 9) NULL,
	[AdjOtherAmount] [decimal](25, 9) NULL,
	[AdjType] [varchar](50) NULL,
	[AdjDescription] [varchar](500) NULL,
	[AdjReferance] [varchar](500) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReverseAdjHistoryNo] [varchar](20) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AdjustmentName]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[AdjustmentName](
	[AdjId] [varchar](50) NULL,
	[BranchId] [int] NULL,
	[AdjName] [varchar](500) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]


GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AdjustmentName]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BranchProfiles](
	[BranchID] [int] NOT NULL,
	[BranchCode] [varchar](120) NOT NULL,
	[BranchName] [varchar](120) NOT NULL,
	[BranchLegalName] [varchar](120) NULL,
	[Address] [varchar](500) NULL,
	[City] [varchar](50) NULL,
	[ZipCode] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[VatRegistrationNo] [varchar](50) NULL,
	[BIN] [nvarchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_BranchProfiles] PRIMARY KEY CLUSTERED 
(
	[BranchID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BanderolProducts]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BanderolProducts](
	[BandProductId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[BanderolId] [varchar](50) NULL,
	[PackagingId] [varchar](50) NULL,
	[BUsedQty] [decimal](25, 9) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[WastageQty] [decimal](25, 9) NULL,
	[OpeningQty] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
 CONSTRAINT [PK_BanderolProducts] PRIMARY KEY CLUSTERED 
(
	[BandProductId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Banderols]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Banderols](
	[BanderolID] [varchar](50) NOT NULL,
	[BranchId] [int] NULL,
	[BanderolName] [varchar](120) NULL,
	[BanderolSize] [varchar](50) NULL,
	[UOM] [varchar](120) NULL,
	[OpeningQty] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
	[Description] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Banderols] PRIMARY KEY CLUSTERED 
(
	[BanderolID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BankInformations]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BankInformations](
	[BankID] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[BankCode] [varchar](50) NULL,
	[BankName] [varchar](120) NULL,
	[BranchName] [varchar](120) NULL,
	[AccountNumber] [varchar](120) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_BankInformations] PRIMARY KEY CLUSTERED 
(
	[BankID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMCompanyOverhead]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMCompanyOverhead](
	[BOMOverHeadId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[BOMId] [varchar](20) NOT NULL,
	[OHLineNo] [int] NULL,
	[HeadName] [varchar](150) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[HeadAmount] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info5] [varchar](200) NULL,
	[RebatePercent] [decimal](25, 9) NULL,
	[RebateAmount] [decimal](25, 9) NULL,
	[AdditionalCost] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[HeadID] [varchar](20) NULL,
	[CustomerID] [varchar](20) NULL,
 CONSTRAINT [PK_BOMCompanyOverhead] PRIMARY KEY CLUSTERED 
(
	[BOMOverHeadId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMRaws]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMRaws](
	[BranchId] [int] NULL,
	[BOMRawId] [varchar](20) NOT NULL,
	[BOMId] [varchar](20) NOT NULL,
	[BOMLineNo] [int] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[RawItemNo] [varchar](20) NOT NULL,
	[RawItemType] [varchar](50) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[UseQuantity] [decimal](25, 9) NULL,
	[WastageQuantity] [decimal](25, 9) NULL,
	[Cost] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[MarkUpValue] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMUQty] [decimal](25, 9) NULL,
	[UOMWQty] [decimal](25, 9) NULL,
	[TotalQuantity] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[PBOMId] [varchar](20) NULL,
	[PInvoiceNo] [varchar](20) NULL,
	[IssueOnProduction] [varchar](1) NULL,
	[CustomerID] [varchar](20) NULL,
	[TransactionType] [varchar](50) NULL,
 CONSTRAINT [PK_BOMRaws] PRIMARY KEY CLUSTERED 
(
	[BOMRawId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMs](
	[BOMId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[RawTotal] [decimal](25, 9) NULL,
	[PackingTotal] [decimal](25, 9) NULL,
	[RebateTotal] [decimal](25, 9) NULL,
	[AdditionalTotal] [decimal](25, 9) NULL,
	[RebateAdditionTotal] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[PacketPrice] [decimal](25, 9) NULL,
	[RawOHCost] [decimal](25, 9) NULL,
	[LastNBRPrice] [decimal](25, 9) NULL,
	[LastNBRWithSDAmount] [decimal](25, 9) NULL,
	[TotalQuantity] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[WholeSalePrice] [decimal](25, 9) NULL,
	[NBRWithSDAmount] [decimal](25, 9) NULL,
	[MarkUpValue] [decimal](25, 9) NULL,
	[LastMarkUpValue] [decimal](25, 9) NULL,
	[LastSDAmount] [decimal](25, 9) NULL,
	[LastAmount] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[UOM] [varchar](120) NULL,
	[CustomerID] [varchar](20) NULL,
	[FirstSupplyDate] [datetime] NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[BOMs] ADD [BOMCode] [varchar](50) NULL
 CONSTRAINT [PK_BOMs] PRIMARY KEY CLUSTERED 
(
	[BOMId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BOMsMas]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BOMsMas](
	[BOMId] [varchar](20) NOT NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[EffectDate] [datetime] NOT NULL,
	[VATName] [varchar](50) NOT NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[NBRPrice] [decimal](18, 5) NULL,
	[PacketPrice] [decimal](18, 5) NULL,
	[RawOHCost] [decimal](18, 5) NULL,
	[LastNBRPrice] [decimal](18, 5) NULL,
	[LastNBRWithSDAmount] [decimal](18, 5) NULL,
	[TotalQuantity] [decimal](18, 5) NULL,
	[SDAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[WholeSalePrice] [decimal](18, 5) NULL,
	[NBRWithSDAmount] [decimal](18, 5) NULL,
	[MarkUpValue] [decimal](18, 5) NULL,
	[LastMarkUpValue] [decimal](18, 5) NULL,
	[LastSDAmount] [decimal](18, 5) NULL,
	[LastAmount] [decimal](18, 5) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BranchReports]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BranchReports](
	[Id] [int] NOT NULL,
	[Name] [varchar](500) NULL,
	[DBName] [varchar](50) NULL,
	[IsSelf] [varchar](1) NULL,
	[IsHeadOffice] [varchar](1) NULL,
 CONSTRAINT [PK_BranchReports] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Branchs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Branchs](
	[Id] [int] NOT NULL,
	[Name] [varchar](500) NULL,
	[BrAddress] [varchar](500) NULL,
	[DBName] [varchar](500) NULL,
 CONSTRAINT [PK_Branchs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[BureauSalesInvoiceDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BureauSalesInvoiceDetails](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[InvoiceLineNo] [int] NULL,
	[ItemNo] [varchar](20) NULL,
	[InvoiceName] [varchar](120) NOT NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Quantity] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[Type] [varchar](10) NULL,
	[PreviousSalesInvoiceNo] [varchar](200) NULL,
	[ChallanDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[InvoiceCurrency] [varchar](50) NULL,
	[TransactionType] [varchar](50) NULL,
	[CConversionDate] [datetime] NULL,
	[ReturnTransactionType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[CustomerId] [varchar](20) NULL,
	[BureauType] [varchar](50) NULL,
	[BureauId] [varchar](50) NULL,
	[ValueOnly] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
 CONSTRAINT [PK_BureauSalesInvoiceDetails_1] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC,
	[InvoiceName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Codes]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Codes](
	[CodeId] [int] IDENTITY(1,1) NOT NULL,
	[CodeGroup] [varchar](120) NULL,
	[CodeName] [varchar](120) NULL,
	[prefix] [varchar](120) NULL,
	[Lenth] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO

/****** Object:  Table [dbo].[CodeGenerations]    Script Date: 1/13/2024 3:16:23 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[CodeGenerations](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CurrentYear] [varchar](4) NULL,
	[BranchId] [int] NULL,
	[Prefix] [varchar](6) NULL,
	[LastId] [int] NULL,
 CONSTRAINT [PK_CodeGenerations] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO

/****** Object:  Table [dbo].[CompanyOverheads]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyOverheads](
	[HeadID] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[HeadName] [varchar](150) NOT NULL,
	[HeadAmount] [decimal](25, 9) NULL,
	[Description] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [nchar](10) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[OHCode] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[RebatePercent] [decimal](25, 9) NULL,
 CONSTRAINT [PK_CompanyOverheads] PRIMARY KEY CLUSTERED 
(
	[HeadName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyOverheadVAT]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyOverheadVAT](
	[HeadName] [varchar](150) NOT NULL,
	[BranchId] [int] NULL,
	[HeadAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[EffectMonth] [datetime] NOT NULL,
 CONSTRAINT [PK_CompanyOverheadVAT] PRIMARY KEY CLUSTERED 
(
	[HeadName] ASC,
	[EffectMonth] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CompanyProfiles]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CompanyProfiles](
	[CompanyID] [varchar](20) NOT NULL,
	[CompanyName] [varchar](120) NULL,
	[CompanyLegalName] [varchar](120) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[ZipCode] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[VatRegistrationNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[StartDateTime] [datetime] NULL,
	[FYearStart] [datetime] NULL,
	[FYearEnd] [datetime] NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Tom] [varchar](200) NULL,
	[Jary] [varchar](200) NULL,
	[Miki] [varchar](200) NULL,
	[Mouse] [varchar](200) NULL,
	[BusinessNature] [nvarchar](50) NULL,
	[AccountingNature] [nvarchar](50) NULL,
	[CompanyType] [varchar](100) NULL,
	[Section] [varchar](200) NULL,
	[BIN] [nvarchar](50) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[CompanyProfiles] ADD [IsVDSWithHolder] [varchar](1) NULL
 CONSTRAINT [PK_CompanyProfile] PRIMARY KEY CLUSTERED 
(
	[CompanyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Costing]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Costing](
	[ItemNo] [varchar](20) NULL,
	[InputDate] [datetime] NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[AV] [decimal](25, 9) NULL,
	[CD] [decimal](25, 9) NULL,
	[RD] [decimal](25, 9) NULL,
	[TVB] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVA] [decimal](25, 9) NULL,
	[ATV] [decimal](25, 9) NULL,
	[Other] [decimal](25, 9) NULL,
	[Id] [int] NULL,
	[BENumber] [varchar](200) NULL,
	[RefNo] [varchar](200) NULL,
	[SD] [decimal](25, 9) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Currencies]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Currencies](
	[CurrencyId] [int] IDENTITY(1,1) NOT NULL,
	[CurrencyName] [varchar](500) NULL,
	[CurrencyCode] [varchar](50) NULL,
	[Country] [varchar](500) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[CurrencyMajor] [varchar](50) NULL,
	[CurrencyMinor] [varchar](50) NULL,
	[CurrencySymbol] [varchar](50) NULL,
	[IsArchive] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CurrencyConversion]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CurrencyConversion](
	[CurrencyConversionId] [varchar](20) NULL,
	[CurrencyCodeFrom] [varchar](50) NOT NULL,
	[CurrencyCodeTo] [varchar](50) NULL,
	[CurrencyRate] [decimal](18, 10) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ConversionDate] [datetime] NULL,
	[IsArchive] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CustomerGroups]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CustomerGroups](
	[CustomerGroupID] [varchar](20) NOT NULL,
	[CustomerGroupName] [varchar](120) NULL,
	[CustomerGroupDescription] [varchar](120) NULL,
	[GroupType] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_CustomerGroup] PRIMARY KEY CLUSTERED 
(
	[CustomerGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Customers]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Customers](
	[CustomerID] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[CustomerCode] [varchar](50) NULL,
	[CustomerName] [varchar](120) NULL,
	[CustomerGroupID] [varchar](20) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Country] [varchar](200) NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[BusinessType] [varchar](120) NULL,
	[BusinessCode] [varchar](20) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[Customers] ADD [IsVDSWithHolder] [varchar](1) NULL
ALTER TABLE [dbo].[Customers] ADD [IsArchive] [bit] NULL
 CONSTRAINT [PK_CustomerInformation] PRIMARY KEY CLUSTERED 
(
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[CustomersAddress]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CustomersAddress](
	[Id] [int] NULL,
	[CustomerID] [varchar](20) NULL,
	[CustomerVATRegNo] [varchar](20) NULL,
	[CustomerAddress] [varchar](500) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DDBDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DDBDetails](
	[DDBDetailsNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[DDBNo] [varchar](20) NOT NULL,
	[DDBDateTime] [datetime] NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[BENumber] [varchar](200) NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[PurcahseItemNo] [varchar](20) NOT NULL,
	[SaleItemNo] [varchar](20) NOT NULL,
	[DDBLineNo] [int] NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UseQuantity] [decimal](18, 5) NULL,
	[CostPrice] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](18, 5) NULL,
	[CnFAmount] [decimal](18, 9) NULL,
	[InsuranceAmount] [decimal](18, 9) NULL,
	[AssessableValue] [decimal](18, 9) NULL,
	[CDAmount] [decimal](18, 9) NULL,
	[RDAmount] [decimal](18, 9) NULL,
	[SD] [decimal](18, 2) NULL,
	[SDAmount] [decimal](18, 9) NULL,
	[TVBAmount] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 2) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[TVAAmount] [decimal](18, 9) NULL,
	[ATVAmount] [decimal](18, 9) NULL,
	[OthersAmount] [decimal](18, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DDBHeader]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DDBHeader](
	[DDBNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[DDBDateTime] [datetime] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](18, 5) NULL,
	[UOM] [varchar](120) NULL,
	[TotalAmount] [decimal](18, 5) NULL,
	[CnFAmount] [decimal](18, 9) NULL,
	[InsuranceAmount] [decimal](18, 9) NULL,
	[AssessableValue] [decimal](18, 9) NULL,
	[CDAmount] [decimal](18, 9) NULL,
	[RDAmount] [decimal](18, 9) NULL,
	[SD] [decimal](18, 2) NULL,
	[SDAmount] [decimal](18, 9) NULL,
	[TVBAmount] [decimal](18, 9) NULL,
	[VATRate] [decimal](18, 2) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[TVAAmount] [decimal](18, 9) NULL,
	[ATVAmount] [decimal](18, 9) NULL,
	[OthersAmount] [decimal](18, 9) NULL,
	[Remarks] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DemandDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DemandDetails](
	[DemandNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[DemandLineNo] [int] NULL,
	[BandProductId] [varchar](20) NOT NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[DemandQty] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[TransactionDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[DemandReceiveID] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[VehicleID] [varchar](20) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DemandHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DemandHeaders](
	[DemandNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[DemandDateTime] [datetime] NULL,
	[FiscalYear] [varchar](30) NULL,
	[MonthFrom] [varchar](50) NULL,
	[MonthTo] [varchar](50) NULL,
	[TotalQty] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[DemandReceiveID] [varchar](20) NULL,
	[VehicleID] [varchar](20) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DemandReceiveDate] [datetime] NULL,
	[RefNo] [varchar](20) NULL,
	[RefDate] [datetime] NULL,
 CONSTRAINT [PK_DemandHeaders] PRIMARY KEY CLUSTERED 
(
	[DemandNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Deposits]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Deposits](
	[DepositId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TreasuryNo] [varchar](50) NULL,
	[DepositDateTime] [datetime] NULL,
	[DepositType] [varchar](50) NULL,
	[DepositAmount] [decimal](25, 9) NULL,
	[ChequeNo] [varchar](50) NULL,
	[ChequeBank] [varchar](120) NULL,
	[ChequeBankBranch] [varchar](120) NULL,
	[ChequeDate] [datetime] NULL,
	[BankID] [varchar](20) NULL,
	[TreasuryCopy] [varchar](20) NULL,
	[DepositPerson] [varchar](120) NULL,
	[DepositPersonDesignation] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReverseDepositId] [varchar](20) NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BankDepositDate] [datetime] NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[Deposits] ADD [SaleExportNo] [varchar](50) NULL
ALTER TABLE [dbo].[Deposits] ADD [DepositPersonContactNo] [varchar](500) NULL
ALTER TABLE [dbo].[Deposits] ADD [DepositPersonAddress] [varchar](500) NULL
 CONSTRAINT [PK_Deposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DisposeDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DisposeDetails](
	[DisposeNumber] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[LineNumber] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[UOM] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[RealPrice] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SaleNumber] [varchar](120) NULL,
	[PurchaseNumber] [varchar](120) NOT NULL,
	[PresentPrice] [decimal](25, 9) NULL,
	[Remarks] [varchar](120) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[DisposeDate] [datetime] NULL,
	[QuantityImport] [decimal](25, 9) NULL,
	[TransactionType] [varchar](120) NULL,
	[FromStock] [varchar](1) NULL,
	[DollarPrice] [decimal](25, 9) NULL,
 CONSTRAINT [PK_DisposeDetails] PRIMARY KEY CLUSTERED 
(
	[DisposeNumber] ASC,
	[ItemNo] ASC,
	[PurchaseNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DisposeHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DisposeHeaders](
	[DisposeNumber] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[DisposeDate] [datetime] NULL,
	[RefNumber] [varchar](120) NULL,
	[Remarks] [varchar](120) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](120) NULL,
	[Post] [varchar](1) NULL,
	[FromStock] [varchar](1) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[ImportVATAmount] [decimal](25, 9) NULL,
	[TotalPrice] [decimal](25, 9) NULL,
	[TotalPriceImport] [decimal](25, 9) NULL,
	[AppVATAmount] [decimal](25, 9) NULL,
	[AppTotalPrice] [decimal](25, 9) NULL,
	[AppVATAmountImport] [decimal](25, 9) NULL,
	[AppTotalPriceImport] [decimal](25, 9) NULL,
	[AppDate] [datetime] NULL,
	[AppRefNumber] [varchar](120) NULL,
	[AppRemarks] [varchar](120) NULL,
 CONSTRAINT [PK_DisposeHeaders] PRIMARY KEY CLUSTERED 
(
	[DisposeNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Duties]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Duties](
	[DutyID] [varchar](50) NOT NULL,
	[BranchId] [int] NULL,
	[DutyName] [varchar](120) NULL,
	[DutyRate] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[DutyType] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_Duties] PRIMARY KEY CLUSTERED 
(
	[DutyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBackDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBackDetails](
	[DDBackNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[DDBackDate] [datetime] NULL,
	[DDLineNo] [int] NULL,
	[SalesInvoiceNo] [varchar](20) NULL,
	[PurchaseInvoiceNo] [varchar](20) NULL,
	[PurchaseDate] [datetime] NULL,
	[FgItemNo] [varchar](20) NULL,
	[FgQty] [decimal](25, 9) NULL,
	[ItemNo] [varchar](20) NULL,
	[BillOfEntry] [varchar](50) NULL,
	[PurchaseUom] [varchar](10) NULL,
	[PurchaseQuantity] [decimal](25, 9) NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[AV] [decimal](25, 9) NULL,
	[CD] [decimal](25, 9) NULL,
	[RD] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[VAT] [decimal](25, 9) NULL,
	[CnF] [decimal](25, 9) NULL,
	[Insurance] [decimal](25, 9) NULL,
	[TVB] [decimal](25, 9) NULL,
	[TVA] [decimal](25, 9) NULL,
	[ATV] [decimal](25, 9) NULL,
	[Others] [decimal](25, 9) NULL,
	[UseQuantity] [decimal](25, 9) NULL,
	[ClaimCD] [decimal](25, 9) NULL,
	[ClaimRD] [decimal](25, 9) NULL,
	[ClaimSD] [decimal](25, 9) NULL,
	[ClaimVAT] [decimal](25, 9) NULL,
	[ClaimCnF] [decimal](25, 9) NULL,
	[ClaimInsurance] [decimal](25, 9) NULL,
	[ClaimTVB] [decimal](25, 9) NULL,
	[ClaimTVA] [decimal](25, 9) NULL,
	[ClaimATV] [decimal](25, 9) NULL,
	[ClaimOthers] [decimal](25, 9) NULL,
	[SubTotalDDB] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[UOMCD] [decimal](25, 9) NULL,
	[UOMRD] [decimal](25, 9) NULL,
	[UOMSD] [decimal](25, 9) NULL,
	[UOMVAT] [decimal](25, 9) NULL,
	[UOMCnF] [decimal](25, 9) NULL,
	[UOMInsurance] [decimal](25, 9) NULL,
	[UOMTVB] [decimal](25, 9) NULL,
	[UOMTVA] [decimal](25, 9) NULL,
	[UOMATV] [decimal](25, 9) NULL,
	[UOMOthers] [decimal](25, 9) NULL,
	[UOMSubTotalDDB] [decimal](25, 9) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](200) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](50) NULL,
	[LastModifiedOn] [datetime] NULL,
	[PurchasetransactionType] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBackHeader]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBackHeader](
	[DDBackNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[DDBackDate] [datetime] NOT NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SalesDate] [datetime] NOT NULL,
	[CustormerID] [varchar](20) NOT NULL,
	[CurrencyId] [int] NOT NULL,
	[ExpCurrency] [decimal](25, 9) NULL,
	[BDTCurrency] [decimal](25, 9) NULL,
	[FgItemNo] [varchar](20) NOT NULL,
	[TotalClaimCD] [decimal](25, 9) NULL,
	[TotalClaimRD] [decimal](25, 9) NULL,
	[TotalClaimSD] [decimal](25, 9) NULL,
	[TotalDDBack] [decimal](25, 9) NULL,
	[TotalClaimVAT] [decimal](25, 9) NULL,
	[TotalClaimCnFAmount] [decimal](25, 9) NULL,
	[TotalClaimInsuranceAmount] [decimal](25, 9) NULL,
	[TotalClaimTVBAmount] [decimal](25, 9) NULL,
	[TotalClaimTVAAmount] [decimal](25, 9) NULL,
	[TotalClaimATVAmount] [decimal](25, 9) NULL,
	[TotalClaimOthersAmount] [decimal](25, 9) NULL,
	[Comments] [varchar](250) NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](20) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
 CONSTRAINT [PK_DutyDrawBackHeader] PRIMARY KEY CLUSTERED 
(
	[DDBackNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBacks]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBacks](
	[DrawBackID] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[BENumber] [varchar](200) NULL,
	[PurchaseDateTime] [datetime] NULL,
	[PurchaseReceiveDate] [datetime] NULL,
	[PurchaseItemNo] [varchar](20) NOT NULL,
	[PurchaseDutyAmount] [decimal](18, 6) NULL,
	[DrawBackDutyPercent] [decimal](18, 6) NULL,
	[DrawBackDutyAmount] [decimal](18, 6) NULL,
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[SaleDateTime] [datetime] NULL,
	[SaleDeliveryDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DutyDrawBackSaleInvoices]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DutyDrawBackSaleInvoices](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[SalesInvoiceNo] [varchar](50) NULL,
	[SL] [int] NULL,
	[DDBackNo] [varchar](50) NULL,
	[SalesDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[FiscalYear]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[FiscalYear](
	[FiscalYearName] [varchar](30) NULL,
	[CurrentYear] [varchar](4) NOT NULL,
	[PeriodID] [varchar](6) NOT NULL,
	[PeriodName] [varchar](50) NULL,
	[PeriodStart] [datetime] NULL,
	[PeriodEnd] [datetime] NULL,
	[PeriodLock] [varchar](1) NULL,
	[GLLock] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_FiscalYear] PRIMARY KEY CLUSTERED 
(
	[CurrentYear] ASC,
	[PeriodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ImagesStore]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ImagesStore](
	[OriginalPath] [varchar](500) NULL,
	[ImageData] [binary](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueDetailBOMs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueDetailBOMs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[IssueNo] [varchar](20) NOT NULL,
	[IssueLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IssueDateTime] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[Wastage] [decimal](25, 9) NULL,
	[BOMDate] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[BOMId] [varchar](20) NULL,
	[UOMWastage] [decimal](25, 9) NULL,
	[IsProcess] [varchar](1) NULL,
 CONSTRAINT [PK_IssueDetailBOMs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueDetails](
	[IssueNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[IssueLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IssueDateTime] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[Wastage] [decimal](25, 9) NULL,
	[BOMDate] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[Post] [varchar](1) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[BOMId] [varchar](20) NULL,
	[UOMWastage] [decimal](25, 9) NULL,
	[IsProcess] [varchar](1) NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[IssueDetails] ADD [IsSynced] [varchar](1) NULL

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueHeaderBOMs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueHeaderBOMs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[IssueNo] [varchar](20) NOT NULL,
	[IssueDateTime] [datetime] NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[ShiftId] [int] NULL,
 CONSTRAINT [PK_IssueHeaderBOM] PRIMARY KEY CLUSTERED 
(
	[IssueNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[IssueHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IssueHeaders](
	[IssueNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[IssueDateTime] [datetime] NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceiveNo] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[IssueReturnId] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[ImportIDExcel] [varchar](30) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[IssueHeaders] ADD [IsSynced] [varchar](1) NULL
ALTER TABLE [dbo].[IssueHeaders] ADD [ShiftId] [int] NULL
 CONSTRAINT [PK_IssueHeader] PRIMARY KEY CLUSTERED 
(
	[IssueNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PackagingInformations]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PackagingInformations](
	[PackagingID] [varchar](50) NOT NULL,
	[BranchId] [int] NULL,
	[PackagingNature] [varchar](120) NULL,
	[PackagingCapacity] [varchar](50) NULL,
	[UOM] [varchar](120) NULL,
	[Description] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_PackagingInformations] PRIMARY KEY CLUSTERED 
(
	[PackagingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PriceService]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PriceService](
	[ItemNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[Cost] [decimal](25, 9) NULL,
	[BasePrice] [decimal](25, 9) NULL,
	[OtherRate] [decimal](25, 9) NULL,
	[OtherType] [decimal](25, 9) NULL,
	[OtherAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SalePrice] [decimal](25, 9) NULL,
	[EffectDate] [datetime] NOT NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ProductCategories]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ProductCategories](
	[CategoryID] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[CategoryName] [varchar](120) NULL,
	[Description] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[IsRaw] [varchar](50) NOT NULL,
	[HSCodeNo] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[PropergatingRate] [varchar](1) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[Trading] [varchar](1) NULL,
	[NonStock] [varchar](1) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_ProductCategory] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Products]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Products](
	[ItemNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[ProductCode] [varchar](50) NULL,
	[ProductName] [varchar](120) NULL,
	[ProductDescription] [varchar](120) NULL,
	[CategoryID] [varchar](20) NULL,
	[UOM] [varchar](120) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[ReceivePrice] [decimal](25, 9) NULL,
	[IssuePrice] [decimal](25, 9) NULL,
	[TenderPrice] [decimal](25, 9) NULL,
	[ExportPrice] [decimal](25, 9) NULL,
	[InternalIssuePrice] [decimal](25, 9) NULL,
	[TollIssuePrice] [decimal](25, 9) NULL,
	[TollCharge] [decimal](25, 9) NULL,
	[OpeningBalance] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[HSCodeNo] [varchar](50) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[SD] [decimal](25, 9) NULL,
	[PacketPrice] [decimal](25, 9) NULL,
	[Trading] [varchar](1) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[NonStock] [varchar](1) NULL,
	[QuantityInHand] [decimal](25, 9) NULL,
	[OpeningDate] [datetime] NULL,
	[RebatePercent] [decimal](25, 9) NULL,
	[TVBRate] [decimal](25, 9) NULL,
	[CnFRate] [decimal](25, 9) NULL,
	[InsuranceRate] [decimal](25, 9) NULL,
	[CDRate] [decimal](25, 9) NULL,
	[RDRate] [decimal](25, 9) NULL,
	[AITRate] [decimal](25, 9) NULL,
	[TVARate] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[OpeningTotalCost] [decimal](25, 9) NULL,
	[TollProduct] [varchar](1) NULL,
	[Banderol] [varchar](1) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[Products] ADD [IsTransport] [varchar](1) NULL
ALTER TABLE [dbo].[Products] ADD [IsExempted] [varchar](1) NULL
ALTER TABLE [dbo].[Products] ADD [IsZeroVAT] [varchar](1) NULL
ALTER TABLE [dbo].[Products] ADD [IsVATRate] [varchar](1) NULL
ALTER TABLE [dbo].[Products] ADD [IsSDRate] [varchar](1) NULL
ALTER TABLE [dbo].[Products] ADD [IsArchive] [bit] NULL
ALTER TABLE [dbo].[Products] ADD [VATRate2] [decimal](25, 2) NULL
ALTER TABLE [dbo].[Products] ADD [VDSRate] [decimal](25, 2) NULL
 CONSTRAINT [PK_ItemInformation] PRIMARY KEY CLUSTERED 
(
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceDetails](
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[POLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Type] [varchar](200) NULL,
	[ProductType] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[RebateRate] [decimal](25, 9) NULL,
	[RebateAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[CnFAmount] [decimal](25, 9) NULL,
	[InsuranceAmount] [decimal](25, 9) NULL,
	[AssessableValue] [decimal](25, 9) NULL,
	[CDAmount] [decimal](25, 9) NULL,
	[RDAmount] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TVBAmount] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVAAmount] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[OthersAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[PurchaseReturnId] [varchar](20) NULL,
	[ReturnTransactionType] [varchar](50) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[PurchaseInvoiceDetails] ADD [IsSynced] [varchar](1) NULL
ALTER TABLE [dbo].[PurchaseInvoiceDetails] ADD [USDValue] [decimal](25, 2) NULL
ALTER TABLE [dbo].[PurchaseInvoiceDetails] ADD [USDVAT] [decimal](25, 2) NULL
ALTER TABLE [dbo].[PurchaseInvoiceDetails] ADD [VATableValue] [decimal](25, 2) NULL
ALTER TABLE [dbo].[PurchaseInvoiceDetails] ADD [VDSRate] [decimal](25, 2) NULL
ALTER TABLE [dbo].[PurchaseInvoiceDetails] ADD [VDSAmount] [decimal](25, 2) NULL
 CONSTRAINT [PK_PurchaseInvoiceDetails] PRIMARY KEY CLUSTERED 
(
	[PurchaseInvoiceNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceDuties]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceDuties](
	[PIDutyID] [varchar](50) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[CnFInp] [decimal](25, 9) NULL,
	[CnFRate] [decimal](25, 9) NULL,
	[CnFAmount] [decimal](25, 9) NULL,
	[InsuranceInp] [decimal](25, 9) NULL,
	[InsuranceRate] [decimal](25, 9) NULL,
	[InsuranceAmount] [decimal](25, 9) NULL,
	[AssessableInp] [decimal](25, 9) NULL,
	[AssessableValue] [decimal](25, 9) NULL,
	[CDInp] [decimal](25, 9) NULL,
	[CDRate] [decimal](25, 9) NULL,
	[CDAmount] [decimal](25, 9) NULL,
	[RDInp] [decimal](25, 9) NULL,
	[RDRate] [decimal](25, 9) NULL,
	[RDAmount] [decimal](25, 9) NULL,
	[TVBInp] [decimal](25, 9) NULL,
	[TVBRate] [decimal](25, 9) NULL,
	[TVBAmount] [decimal](25, 9) NULL,
	[SDInp] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[VATInp] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[TVAInp] [decimal](25, 9) NULL,
	[TVARate] [decimal](25, 9) NULL,
	[TVAAmount] [decimal](25, 9) NULL,
	[ATVInp] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[OthersInp] [decimal](25, 9) NULL,
	[OthersRate] [decimal](25, 9) NULL,
	[OthersAmount] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[Remarks] [varchar](200) NULL,
	[ItemNo] [varchar](20) NULL,
	[DutyCompleteQuantity] [decimal](25, 9) NULL,
	[DutyCompleteQuantityPercent] [decimal](25, 9) NULL,
	[LineCost] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseInvoiceHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseInvoiceHeaders](
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[VendorID] [varchar](20) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[BENumber] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[ProductType] [varchar](100) NULL,
	[TransactionType] [varchar](50) NULL,
	[ReceiveDate] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[CurrencyID] [varchar](50) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[WithVDS] [varchar](1) NULL,
	[PurchaseReturnId] [varchar](20) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[SerialNo1] [varchar](50) NULL,
	[CustomHouse] [varchar](500) NULL,
	[LCNumber] [varchar](50) NULL,
	[LCDate] [datetime] NULL,
	[LandedCost] [decimal](25, 9) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[PurchaseInvoiceHeaders] ADD [IsSynced] [varchar](1) NULL
ALTER TABLE [dbo].[PurchaseInvoiceHeaders] ADD [USDInvoiceValue] [decimal](25, 2) NULL
 CONSTRAINT [PK_ProductInvoiceHead] PRIMARY KEY CLUSTERED 
(
	[PurchaseInvoiceNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[PurchaseSaleTrackings]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[PurchaseSaleTrackings](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[PurchaseInvoiceNo] [varchar](50) NULL,
	[PurchaseInvoiceDateTime] [datetime] NULL,
	[ReceiveDate] [datetime] NULL,
	[ItemNo] [varchar](50) NULL,
	[BENumber] [varchar](500) NULL,
	[SalesInvoiceNo] [varchar](50) NULL,
	[CustomHouse] [varchar](500) NULL,
	[SaleInvoiceDateTime] [datetime] NULL,
	[IsSold] [bit] NULL,
	[VATableValue] [decimal](25, 2) NULL,
	[VATAmount] [decimal](25, 2) NULL,
	[TradeVATableValue] [decimal](25, 5) NULL,
	[TradeVATAmount] [decimal](25, 5) NULL,
	[TradeVATRate] [decimal](25, 5) NULL,
	[TotalValue] [decimal](25, 5) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReceiveDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReceiveDetails](
	[ReceiveNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[ReceiveLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[ReceiveDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[VATName] [varchar](100) NULL,
	[ReceiveReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[BOMId] [varchar](20) NULL,
	[BOMId1] [varchar](20) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[ReturnTransactionType] [varchar](50) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[ReceiveDetails] ADD [IsSynced] [varchar](1) NULL
 CONSTRAINT [PK_ReceiveDetails] PRIMARY KEY CLUSTERED 
(
	[ReceiveNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReceiveHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReceiveHeaders](
	[ReceiveNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[ReceiveDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReceiveReturnId] [varchar](20) NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[WithToll] [varchar](1) NULL,
	[CustomerID] [varchar](20) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[ReceiveHeaders] ADD [IsSynced] [varchar](1) NULL
ALTER TABLE [dbo].[ReceiveHeaders] ADD [ShiftId] [int] NULL
 CONSTRAINT [PK_ReceiveHead] PRIMARY KEY CLUSTERED 
(
	[ReceiveNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReportPurchaseRegister]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[ReportPurchaseRegister](
	[SerialNo] [varchar](2) NULL,
	[BranchId] [int] NULL,
	[StartDateTime] [datetime] NULL,
	[StartingQuantity] [decimal](25, 9) NULL,
	[StartingAmount] [decimal](25, 9) NULL,
	[TransID] [varchar](200) NULL,
	[TransType] [varchar](200) NULL,
	[VendorName] [varchar](200) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[VATRegistrationNo] [varchar](200) NULL,
	[ProductName] [varchar](200) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[SD] [decimal](25, 9) NULL,
	[UnitCost] [decimal](25, 9) NULL,
	[HSCodeNo] [varchar](200) NULL,
	[BENumber] [varchar](200) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[CreateDateTime] [datetime] NULL,
	[UserName] [nvarchar](120) NOT NULL,
	[BranchName] [nvarchar](200) NOT NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReportSales]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReportSales](
	[AuditUser] [varchar](10) NULL,
	[OpeQty] [money] NULL,
	[PrdQty] [money] NULL,
	[InvoiceNo] [varchar](20) NULL,
	[CustomerName] [varchar](120) NULL,
	[Address] [varchar](200) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[InvoiceDate] [datetime] NULL,
	[ItemNo] [varchar](20) NULL,
	[ProductName] [varchar](120) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[SalesPrice] [decimal](18, 5) NULL,
	[ClosingQuantity] [decimal](18, 5) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SaleExportInvoices]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SaleExportInvoices](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[SaleExportNo] [varchar](50) NULL,
	[SL] [int] NULL,
	[SalesInvoiceNo] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SaleExports]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SaleExports](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[SaleExportNo] [varchar](50) NULL,
	[SaleExportDate] [varchar](50) NULL,
	[Description] [varchar](1000) NULL,
	[Comments] [varchar](100) NULL,
	[Quantity] [varchar](50) NULL,
	[GrossWeight] [varchar](50) NULL,
	[NetWeight] [varchar](50) NULL,
	[NumberFrom] [varchar](50) NULL,
	[NumberTo] [varchar](50) NULL,
	[PortFrom] [varchar](100) NULL,
	[PortTo] [varchar](100) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](50) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](50) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceDetails](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[InvoiceLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[NBRPrice] [decimal](25, 9) NULL,
	[AVGPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SD] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[SaleType] [varchar](10) NULL,
	[PreviousSalesInvoiceNo] [varchar](200) NULL,
	[Trading] [varchar](1) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[NonStock] [varchar](1) NULL,
	[TradingMarkUp] [decimal](25, 9) NULL,
	[Type] [varchar](50) NULL,
	[BENumber] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[VATName] [varchar](100) NULL,
	[SaleReturnId] [varchar](20) NULL,
	[DiscountAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[PromotionalQuantity] [decimal](25, 9) NULL,
	[FinishItemNo] [varchar](20) NULL,
	[ValueOnly] [varchar](1) NULL,
	[CConversionDate] [datetime] NULL,
	[ReturnTransactionType] [varchar](50) NULL,
	[Weight] [varchar](120) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [IsSynced] [varchar](1) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [VDSAmount] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [IsSample] [varchar](1) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [TradeVATRate] [decimal](25, 5) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [TradeVATAmount] [decimal](25, 5) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [TradeVATableValue] [decimal](25, 5) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [TotalValue] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [WareHouseRent] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [WareHouseVAT] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [ATVRate] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [ATVablePrice] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [ATVAmount] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceDetails] ADD [IsCommercialImporter] [varchar](1) NULL
 CONSTRAINT [PK_SalesInvoiceDetails_1] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceHeaders](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[CustomerID] [varchar](20) NOT NULL,
	[DeliveryAddress1] [varchar](200) NULL,
	[DeliveryAddress2] [varchar](200) NULL,
	[DeliveryAddress3] [varchar](200) NULL,
	[VehicleID] [varchar](20) NULL,
	[InvoiceDateTime] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[SaleType] [varchar](20) NULL,
	[PreviousSalesInvoiceNo] [varchar](20) NULL,
	[Trading] [varchar](1) NULL,
	[IsPrint] [varchar](1) NULL,
	[TenderId] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[LCNumber] [varchar](50) NULL,
	[CurrencyID] [varchar](50) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[SaleReturnId] [varchar](20) NULL,
	[IsVDS] [varchar](1) NULL,
	[GetVDSCertificate] [varchar](1) NULL,
	[VDSCertificateDate] [datetime] NULL,
	[ImportIDExcel] [varchar](30) NULL,
	[AlReadyPrint] [int] NULL,
	[LCBank] [varchar](200) NULL,
	[LCDate] [datetime] NULL,
	[DeliveryChallanNo] [varchar](50) NULL,
	[IsGatePass] [varchar](3) NULL,
	[CompInvoiceNo] [varchar](50) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [IsSynced] [varchar](1) NULL
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [IsDeemedExport] [varchar](1) NULL
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [VDSAmount] [decimal](25, 9) NULL
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [PINo] [varchar](500) NULL
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [PIDate] [datetime] NULL
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [EXPFormNo] [varchar](500) NULL
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [EXPFormDate] [datetime] NULL
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [ShiftId] [int] NULL
SET ANSI_PADDING ON
ALTER TABLE [dbo].[SalesInvoiceHeaders] ADD [ValueOnly] [varchar](1) NULL
 CONSTRAINT [PK_SalesInvoiceHead] PRIMARY KEY CLUSTERED 
(
	[SalesInvoiceNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SalesInvoiceHeadersExport]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SalesInvoiceHeadersExport](
	[SalesInvoiceNo] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[SaleLineNo] [int] NULL,
	[RefNo] [varchar](200) NULL,
	[Description] [varchar](200) NULL,
	[Quantity] [varchar](120) NULL,
	[GrossWeight] [varchar](120) NULL,
	[NetWeight] [varchar](120) NULL,
	[NumberFrom] [varchar](120) NULL,
	[NumberTo] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[PortFrom] [varchar](500) NULL,
	[PortTo] [varchar](500) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SDDeposits]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SDDeposits](
	[DepositId] [varchar](20) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BranchId] [int] NULL,
	[TreasuryNo] [varchar](50) NULL,
	[DepositDateTime] [datetime] NULL,
	[DepositType] [varchar](50) NULL,
	[DepositAmount] [decimal](25, 9) NULL,
	[ChequeNo] [varchar](50) NULL,
	[ChequeBank] [varchar](120) NULL,
	[ChequeBankBranch] [varchar](120) NULL,
	[ChequeDate] [datetime] NULL,
	[BankID] [varchar](20) NULL,
	[TreasuryCopy] [varchar](20) NULL,
	[DepositPerson] [varchar](120) NULL,
	[DepositPersonDesignation] [varchar](120) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[ReverseDepositId] [varchar](20) NULL,
 CONSTRAINT [PK_SDDeposit] PRIMARY KEY CLUSTERED 
(
	[DepositId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Settings]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Settings](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SettingsRole]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[SettingsRole](
	[SettingId] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[SettingGroup] [varchar](120) NULL,
	[SettingName] [varchar](120) NULL,
	[SettingValue] [varchar](120) NULL,
	[SettingType] [varchar](120) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Setup]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Setup](
	[PurchaseP] [varchar](3) NULL,
	[PurchaseIDL] [numeric](10, 0) NULL,
	[PurchaseCID] [numeric](10, 0) NULL,
	[PurchaseNYID] [varchar](1) NULL,
	[PurchaseTradingP] [varchar](3) NULL,
	[PurchaseTradingIDL] [numeric](10, 0) NULL,
	[PurchaseTradingCID] [numeric](10, 0) NULL,
	[PurchaseTradingNYID] [varchar](1) NULL,
	[IssueP] [varchar](3) NULL,
	[IssueIDL] [numeric](10, 0) NULL,
	[IssueCID] [numeric](10, 0) NULL,
	[IssueNYID] [varchar](1) NULL,
	[IssueReturnP] [varchar](3) NULL,
	[IssueReturnIDL] [numeric](10, 0) NULL,
	[IssueReturnCID] [numeric](10, 0) NULL,
	[IssueReturnNYID] [varchar](1) NULL,
	[ReceiveP] [varchar](3) NULL,
	[ReceiveIDL] [numeric](10, 0) NULL,
	[ReceiveCID] [numeric](10, 0) NULL,
	[ReceiveNYID] [varchar](1) NULL,
	[TransferP] [varchar](3) NULL,
	[TransferIDL] [numeric](10, 0) NULL,
	[TransferCID] [numeric](10, 0) NULL,
	[TransferNYID] [varchar](1) NULL,
	[SaleP] [varchar](3) NULL,
	[SaleIDL] [numeric](10, 0) NULL,
	[SaleCID] [numeric](10, 0) NULL,
	[SaleNYID] [varchar](1) NULL,
	[SaleServiceP] [varchar](3) NULL,
	[SaleServiceIDL] [numeric](10, 0) NULL,
	[SaleServiceCID] [numeric](10, 0) NULL,
	[SaleServiceNYID] [varchar](1) NULL,
	[SaleTradingP] [varchar](3) NULL,
	[SaleTradingIDL] [numeric](10, 0) NULL,
	[SaleTradingCID] [numeric](10, 0) NULL,
	[SaleTradingNYID] [varchar](1) NULL,
	[SaleExportP] [varchar](3) NULL,
	[SaleExportIDL] [numeric](10, 0) NULL,
	[SaleExportCID] [numeric](10, 0) NULL,
	[SaleExportNYID] [varchar](1) NULL,
	[SaleTenderP] [varchar](3) NULL,
	[SaleTenderIDL] [numeric](10, 0) NULL,
	[SaleTenderCID] [numeric](10, 0) NULL,
	[SaleTenderNYID] [varchar](1) NULL,
	[DNP] [varchar](3) NULL,
	[DNIDL] [numeric](10, 0) NULL,
	[DNCID] [numeric](10, 0) NULL,
	[DNNYID] [varchar](1) NULL,
	[CNP] [varchar](3) NULL,
	[CNIDL] [numeric](10, 0) NULL,
	[CNCID] [numeric](10, 0) NULL,
	[CNNYID] [varchar](1) NULL,
	[DepositP] [varchar](3) NULL,
	[DepositIDL] [numeric](10, 0) NULL,
	[DepositCID] [numeric](10, 0) NULL,
	[DepositNYID] [varchar](1) NULL,
	[VDSP] [varchar](3) NULL,
	[VDSIDL] [numeric](10, 0) NULL,
	[VDSCID] [numeric](10, 0) NULL,
	[VDSNYID] [varchar](1) NULL,
	[TollIssueP] [varchar](3) NULL,
	[TollIssueIDL] [numeric](10, 0) NULL,
	[TollIssueCID] [numeric](10, 0) NULL,
	[TollIssueNYID] [varchar](1) NULL,
	[TollReceiveP] [varchar](3) NULL,
	[TollReceiveIDL] [numeric](10, 0) NULL,
	[TollReceiveCID] [numeric](10, 0) NULL,
	[TollReceiveNYID] [varchar](1) NULL,
	[DSFP] [varchar](3) NULL,
	[DSFIDL] [numeric](10, 0) NULL,
	[DSFCID] [numeric](10, 0) NULL,
	[DSFNYID] [varchar](1) NULL,
	[DSRP] [varchar](3) NULL,
	[DSRIDL] [numeric](10, 0) NULL,
	[DSRCID] [numeric](10, 0) NULL,
	[DSRNYID] [varchar](1) NULL,
	[IssueFromBOM] [varchar](1) NULL,
	[PrepaidVAT] [varchar](1) NULL,
	[CYear] [varchar](4) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Shifts]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[Shifts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ShiftName] [varchar](50) NULL,
	[ShiftStart] [time](7) NULL,
	[ShiftEnd] [time](7) NULL,
	[Remarks] [varchar](500) NULL,
	[Sl] [int] NULL,
	[NextDay] [varchar](1) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TDSs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TDSs](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Section] [varchar](500) NULL,
	[Code] [varchar](500) NULL,
	[Description] [varchar](500) NULL,
	[MinValue] [decimal](18, 2) NULL,
	[MaxValue] [decimal](18, 2) NULL,
	[Rate] [decimal](18, 2) NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,

 CONSTRAINT [PK_TDS_52_AAs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TenderDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TenderDetails](
	[TenderId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[TenderQty] [decimal](25, 9) NULL,
	[SaleQty] [decimal](25, 9) NULL,
	[TenderPrice] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[BOMId] [varchar](20) NULL,
 CONSTRAINT [PK_TenderDetails] PRIMARY KEY CLUSTERED 
(
	[TenderId] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TenderHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TenderHeaders](
	[TenderId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[RefNo] [varchar](200) NOT NULL,
	[CustomerId] [varchar](20) NULL,
	[TenderDate] [datetime] NULL,
	[DeleveryDate] [datetime] NULL,
	[Comments] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[CustomerGroupID] [varchar](20) NULL,
 CONSTRAINT [PK_TenderHeaders] PRIMARY KEY CLUSTERED 
(
	[TenderId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Trackings]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Trackings](
	[ItemNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TrackLineNo] [int] NULL,
	[Heading1] [varchar](200) NOT NULL,
	[Heading2] [varchar](200) NULL,
	[Quantity] [int] NULL,
	[IsPurchase] [varchar](1) NULL,
	[PurchaseInvoiceNo] [varchar](20) NOT NULL,
	[IsIssue] [varchar](1) NULL,
	[IssueNo] [varchar](20) NULL,
	[IsReceive] [varchar](1) NULL,
	[ReceiveNo] [varchar](20) NULL,
	[IsSale] [varchar](1) NULL,
	[SaleInvoiceNo] [varchar](20) NULL,
	[FinishItemNo] [varchar](20) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ReceivePost] [varchar](1) NULL,
	[SalePost] [varchar](1) NULL,
	[IssuePost] [varchar](1) NULL,
	[ReceiveDate] [datetime] NULL,
	[UnitPrice] [decimal](25, 9) NULL,
	[ReturnType] [varchar](50) NULL,
	[ReturnPurchase] [varchar](1) NULL,
	[ReturnPurchaseID] [varchar](50) NULL,
	[ReturnReceive] [varchar](1) NULL,
	[ReturnReceiveID] [varchar](50) NULL,
	[ReturnSale] [varchar](1) NULL,
	[ReturnSaleID] [varchar](50) NULL,
	[ReturnPurDate] [datetime] NULL,
	[ReturnReceiveDate] [datetime] NULL,
 CONSTRAINT [PK_Trackings] PRIMARY KEY CLUSTERED 
(
	[Heading1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransactionHistorys]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransactionHistorys](
	[TransactionNo] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDate] [datetime] NULL,
	[ItemNo] [varchar](20) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[TradingMarkup] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[TCost] [decimal](25, 9) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Transactions]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Transactions](
	[TransactionID] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[TransactionType] [varchar](200) NULL,
	[TransactionDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferDetails](
	[TransferNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TransferLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[TransferFrom] [varchar](50) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransferFromNo] [varchar](20) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
 CONSTRAINT [PK_TransferDetails] PRIMARY KEY CLUSTERED 
(
	[TransferNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferIssueDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferIssueDetails](
	[TransferIssueNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[IssueLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDateTime] [datetime] NULL,
	[TransferTo] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
 CONSTRAINT [PK_TransferIssueDetails] PRIMARY KEY CLUSTERED 
(
	[TransferIssueNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferIssues]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferIssues](
	[TransferIssueNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TransactionDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[TransferTo] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalSDAmount] [decimal](25, 9) NULL,
 CONSTRAINT [PK_TransferIssues] PRIMARY KEY CLUSTERED 
(
	[TransferIssueNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferRawDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferRawDetails](
	[TransferId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TransLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[TransFromItemNo] [varchar](20) NOT NULL,
	[TransferDateTime] [datetime] NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferRawHeaders]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferRawHeaders](
	[TransferId] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TransferDateTime] [datetime] NULL,
	[TransFromItemNo] [varchar](20) NOT NULL,
	[UOM] [varchar](50) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[TransferedQty] [decimal](25, 9) NULL,
	[TransferedAmt] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_TransferRawHeaders] PRIMARY KEY CLUSTERED 
(
	[TransferId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferReceiveDetails]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferReceiveDetails](
	[TransferReceiveNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[ReceiveLineNo] [int] NULL,
	[ItemNo] [varchar](20) NOT NULL,
	[Quantity] [decimal](25, 9) NULL,
	[CostPrice] [decimal](25, 9) NULL,
	[UOM] [varchar](120) NULL,
	[TransferFrom] [varchar](50) NULL,
	[SubTotal] [decimal](25, 9) NULL,
	[Comments] [varchar](200) NULL,
	[TransactionType] [varchar](50) NULL,
	[TransactionDateTime] [datetime] NULL,
	[Post] [varchar](1) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransferFromNo] [varchar](20) NULL,
	[VATRate] [decimal](25, 9) NULL,
	[VATAmount] [decimal](25, 9) NULL,
	[SDRate] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
 CONSTRAINT [PK_TransferReceiveDetails] PRIMARY KEY CLUSTERED 
(
	[TransferReceiveNo] ASC,
	[ItemNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TransferReceives]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TransferReceives](
	[TransferReceiveNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TransactionDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[TransferNo] [varchar](20) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[TransferFrom] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TransferFromNo] [varchar](20) NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalSDAmount] [decimal](25, 9) NULL,
 CONSTRAINT [PK_TransferReceives] PRIMARY KEY CLUSTERED 
(
	[TransferReceiveNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Transfers]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Transfers](
	[TransferNo] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[TransferFromNo] [varchar](20) NOT NULL,
	[TransactionDateTime] [datetime] NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TransactionType] [varchar](50) NULL,
	[SerialNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[Post] [varchar](1) NULL,
	[ReferenceNo] [varchar](50) NULL,
	[TransferFrom] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[TotalSDAmount] [decimal](25, 9) NULL,
 CONSTRAINT [PK_Transfers] PRIMARY KEY CLUSTERED 
(
	[TransferNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UOMName]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UOMName](
	[UOMId] [int] IDENTITY(1,1) NOT NULL,
	[UOMName] [varchar](500) NULL,
	[UOMCode] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UOMs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UOMs](
	[UOMId] [varchar](50) NULL,
	[UOMFrom] [varchar](50) NULL,
	[UOMTo] [varchar](50) NULL,
	[Convertion] [decimal](25, 9) NULL,
	[CTypes] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[ActiveStatus] [varchar](1) NULL,
	[IsArchive] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserAuditLogs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserAuditLogs](
	[LogID] [varchar](50) NULL,
	[ComputerName] [varchar](200) NULL,
	[ComputerLoginUserName] [varchar](200) NULL,
	[ComputerIPAddress] [varchar](200) NULL,
	[SoftwareUserId] [varchar](200) NULL,
	[SessionDate] [datetime] NULL,
	[LogInDateTime] [datetime] NULL,
	[LogOutDateTime] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserGroups]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[UserGroups](
	[GroupID] [varchar](20) NULL,
	[GroupName] [varchar](120) NOT NULL,
	[Comments] [varchar](200) NOT NULL,
	[ActiveStatus] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_UserGroups] PRIMARY KEY CLUSTERED 
(
	[GroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserInformations]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserInformations](
	[UserID] [varchar](20) NULL,
	[UserName] [varchar](120) NOT NULL,
	[UserPassword] [varchar](20) NULL,
	[ActiveStatus] [varchar](1) NULL,
	[LastLoginDateTime] [datetime] NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[GroupID] [varchar](20) NULL,
	[Email] [nvarchar](100) NULL,
	[Mobile] [nvarchar](50) NULL,
	[VerificationCode] [nvarchar](50) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[UserInformations] ADD [IsVerified] [varchar](1) NULL
ALTER TABLE [dbo].[UserInformations] ADD [IsAdmin] [varchar](1) NULL
ALTER TABLE [dbo].[UserInformations] ADD [LastPasswordChangeDate] [varchar](20) NULL
ALTER TABLE [dbo].[UserInformations] ADD [FullName] [varchar](500) NULL
ALTER TABLE [dbo].[UserInformations] ADD [Designation] [varchar](500) NULL
ALTER TABLE [dbo].[UserInformations] ADD [ContactNo] [varchar](500) NULL
ALTER TABLE [dbo].[UserInformations] ADD [Address] [varchar](500) NULL
 CONSTRAINT [PK_UserInformations] PRIMARY KEY CLUSTERED 
(
	[UserName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserLogs]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserLogs](
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](120) NULL,
	[LoginTime] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserRolls]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UserRolls](
	[LineID] [numeric](18, 0) NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[FormID] [varchar](5) NOT NULL,
	[Access] [varchar](1) NULL,
	[PostAccess] [varchar](1) NULL,
	[FormName] [varchar](200) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[AddAccess] [varchar](1) NULL,
	[EditAccess] [varchar](1) NULL,
 CONSTRAINT [PK_UserRolls] PRIMARY KEY CLUSTERED 
(
	[LineID] ASC,
	[UserID] ASC,
	[FormID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VAT7]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VAT7](
	[VAT7No] [varchar](20) NOT NULL,
	[Vat7Date] [datetime] NULL,
	[FinishItemNo] [varchar](20) NOT NULL,
	[FinishUOM] [varchar](50) NULL,
	[Vat7LineNo] [int] NULL,
	[ItemNo] [varchar](20) NULL,
	[UOM] [varchar](50) NULL,
	[Quantity] [decimal](25, 9) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](50) NULL,
	[Post] [varchar](1) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VATReturns]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[VATReturns](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [varchar](500) NULL,
	[Branch] [varchar](500) NULL,
	[NoteNo] [int] NULL,
	[SubNoteNo] [int] NULL,
	[LineA] [decimal](18, 5) NULL,
	[LineB] [decimal](18, 5) NULL,
	[LineC] [decimal](18, 5) NULL,
	[SubFormName] [varchar](500) NULL,
	[Remarks] [varchar](500) NULL,
 CONSTRAINT [PK_VATReturn] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VATReturnSubFormA]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VATReturnSubFormA](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ProductCode] [nvarchar](500) NULL,
	[ProductName] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL,
	[SDAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormA] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[VATReturnSubFormB]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VATReturnSubFormB](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductCategorey] [nvarchar](500) NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ProductCode] [nvarchar](500) NULL,
	[ProductName] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL,
	[SDAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormB] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[VATReturnSubFormC]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VATReturnSubFormC](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProductDescription] [nvarchar](500) NULL,
	[ProductCode] [nvarchar](500) NULL,
	[ProductName] [nvarchar](500) NULL,
	[UOM] [nvarchar](100) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[TotalPrice] [decimal](18, 5) NULL,
	[SDAmount] [decimal](18, 5) NULL,
	[VATAmount] [decimal](18, 5) NULL,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormC] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[VATReturnSubFormD]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VATReturnSubFormD](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VendorBIN] [nvarchar](500) NULL,
	[VendorName] [nvarchar](500) NULL,
	[VendorAddress] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL,
	[VDSAmount] [decimal](18, 5) NULL,
	[InvoiceNo] [nvarchar](500) NULL,
	[InvoiceDate] [datetime] NULL,
	[AccountCode] [nvarchar](500) NULL,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormD] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[VATReturnSubFormE]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VATReturnSubFormE](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CustomerBIN] [nvarchar](500) NULL,
	[CustomerName] [nvarchar](500) NULL,
	[CustomerAddress] [nvarchar](500) NULL,
	[TotalPrice] [decimal](18, 5) NULL,
	[VDSAmount] [decimal](18, 5) NULL,
	[InvoiceNo] [nvarchar](500) NULL,
	[InvoiceDate] [datetime] NULL,
	[AccountCode] [nvarchar](500) NULL,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormE] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[VATReturnSubFormF]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VATReturnSubFormF](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BENumber] [nvarchar](500) NULL,
	[Date] [datetime] NULL,
	[CustomHouse] [nvarchar](500) NULL,
	[ATAmount] [decimal](18, 5) NULL,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormF] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[VATReturnSubFormG]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VATReturnSubFormG](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChallanNumber] [nvarchar](500) NULL,
	[BankName] [nvarchar](500) NULL,
	[BankBranch] [nvarchar](500) NULL,
	[Date] [datetime] NULL,
	[AccountCode] [nvarchar](500) NULL,
	[Quantity] [decimal](18, 5) NULL,
	[Remarks] [nvarchar](500) NULL,
 CONSTRAINT [PK_VATReturnSubFormG] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[VDS]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VDS](
	[VDSId] [varchar](20) NULL,
	[BranchId] [int] NULL,
	[VendorId] [varchar](20) NULL,
	[BillAmount] [decimal](25, 9) NULL,
	[BillDate] [datetime] NULL,
	[BillDeductAmount] [decimal](25, 9) NULL,
	[DepositNumber] [varchar](30) NULL,
	[DepositDate] [datetime] NULL,
	[Remarks] [varchar](200) NULL,
	[IssueDate] [datetime] NULL,
	[PurchaseNumber] [varchar](50) NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[IsPurchase] [varchar](20) NULL,
	[IsPercent] [varchar](1) NULL,
	[ReverseVDSId] [varchar](20) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[VDS] ADD [POST] [varchar](1) NULL
ALTER TABLE [dbo].[VDS] ADD [VATAmount] [decimal](25, 9) NULL

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Vehicles]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Vehicles](
	[VehicleID] [varchar](20) NOT NULL,
	[VehicleCode] [varchar](50) NULL,
	[VehicleType] [varchar](50) NULL,
	[VehicleNo] [varchar](50) NULL,
	[Description] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info1] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[DriverName] [varchar](100) NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_Vehicles] PRIMARY KEY CLUSTERED 
(
	[VehicleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[VendorGroups]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[VendorGroups](
	[VendorGroupID] [varchar](20) NOT NULL,
	[VendorGroupName] [varchar](120) NULL,
	[VendorGroupDescription] [varchar](120) NULL,
	[GroupType] [varchar](200) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[Info2] [varchar](10) NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_VendorGroup] PRIMARY KEY CLUSTERED 
(
	[VendorGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Vendors]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Vendors](
	[VendorID] [varchar](20) NOT NULL,
	[BranchId] [int] NULL,
	[VendorCode] [varchar](50) NULL,
	[VendorName] [varchar](120) NULL,
	[VendorGroupID] [varchar](20) NULL,
	[Address1] [varchar](200) NULL,
	[Address2] [varchar](200) NULL,
	[Address3] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[StartDateTime] [datetime] NULL,
	[ContactPerson] [varchar](150) NULL,
	[ContactPersonDesignation] [varchar](150) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[VATRegistrationNo] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[Country] [varchar](200) NULL,
	[Info2] [varchar](200) NULL,
	[Info3] [varchar](200) NULL,
	[Info4] [varchar](200) NULL,
	[Info5] [varchar](200) NULL,
	[VDSPercent] [decimal](25, 9) NULL,
	[BusinessType] [varchar](120) NULL,
	[BusinessCode] [varchar](20) NULL
) ON [PRIMARY]
SET ANSI_PADDING OFF
ALTER TABLE [dbo].[Vendors] ADD [TDSCode] [varchar](20) NULL
ALTER TABLE [dbo].[Vendors] ADD [IsRegister] [varchar](1) NULL
ALTER TABLE [dbo].[Vendors] ADD [IsTurnover] [varchar](1) NULL
ALTER TABLE [dbo].[Vendors] ADD [IsVDSWithHolder] [varchar](1) NULL
ALTER TABLE [dbo].[Vendors] ADD [IsArchive] [bit] NULL
 CONSTRAINT [PK_Vendor] PRIMARY KEY CLUSTERED 
(
	[VendorID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[YourTable]    Script Date: 8/24/2019 2:34:08 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[YourTable](
	[BOMId] [varchar](50) NULL
) ON [PRIMARY]

                ";
                #endregion CreateTable

                top1 = "go";

                IEnumerable<string> commandStrings = Regex.Split(sqlText, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                foreach (string commandString in commandStrings)
                {
                    if (commandString.Trim() != "")
                    {
                        SqlCommand cmdIdExist1 = new SqlCommand(commandString, currConn);

                        //new SqlCommand(commandString, currConn).ExecuteNonQuery();
                        cmdIdExist1.Transaction = transaction;
                        transResult = (int)cmdIdExist1.ExecuteNonQuery();
                        if (transResult != -1)
                        {
                            throw new ArgumentNullException("Create Tables to database('" + databaseName + "')", MessageVM.dbMsgTableNotCreate);
                        }
                    }
                }

                #endregion TableCreate

                #region TableDefaultData
                string top2;
                #region TableDefaultData Back
                sqlText = @"

                ";
                #endregion TableDefaultData Back

                #region TableDefaultData Back
                sqlText = @"
               
INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'0', N'NA', N'NA', N'NA', N'Overhead', N'0.00', CAST(30.000000000 AS Decimal(25, 9)), N'N', N'N', N'admin', CAST(0x0000A16400F8CA3C AS DateTime), N'admin', CAST(0x0000A1A30106ECFC AS DateTime), CAST(30.000000000 AS Decimal(25, 9)), N'N', N'N', N'NA', N'NA')

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'1', N'Finish', N'-', N'-', N'Finish', N'0.00', CAST(15.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A0185F808 AS DateTime), N'admin', CAST(0x0000A95A0185F808 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'N', N'N', NULL, NULL)

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'2', N'Admin Expense', N'-', N'-', N'Overhead', N'0.00', CAST(0.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A0186DDB8 AS DateTime), N'admin', CAST(0x0000A95A0186DDB8 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'N', N'N', NULL, NULL)

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'3', N'Raw', N'-', N'-', N'Raw', N'0.00', CAST(15.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A01870914 AS DateTime), N'admin', CAST(0x0000A95A01870DC4 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'N', N'N', NULL, NULL)

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'4', N'Trading', N'-', N'-', N'Trading', N'0.00', CAST(15.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A01870914 AS DateTime), N'admin', CAST(0x0000A95A01870DC4 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'N', N'N', NULL, NULL)

INSERT [dbo].[ProductCategories] ([CategoryID], [CategoryName], [Description], [Comments], [IsRaw], [HSCodeNo], [VATRate], [PropergatingRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [SD], [Trading], [NonStock], [Info4], [Info5]) VALUES (N'5', N'NonInventory', N'-', N'-', N'NonInventory', N'0.00', CAST(15.000000000 AS Decimal(25, 9)), N'N', N'Y', N'admin', CAST(0x0000A95A01870914 AS DateTime), N'admin', CAST(0x0000A95A01870DC4 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), N'Y', N'N', NULL, NULL)

INSERT [dbo].[Products] ([ItemNo], [ProductCode], [ProductName], [ProductDescription], [CategoryID], [UOM], [CostPrice], [SalesPrice], [NBRPrice], [ReceivePrice], [IssuePrice], [TenderPrice], [ExportPrice], [InternalIssuePrice], [TollIssuePrice], [TollCharge], [OpeningBalance], [SerialNo], [HSCodeNo], [VATRate], [Comments], [SD], [PacketPrice], [Trading], [TradingMarkUp], [NonStock], [QuantityInHand], [OpeningDate], [RebatePercent], [TVBRate], [CnFRate], [InsuranceRate], [CDRate], [RDRate], [AITRate], [TVARate], [ATVRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [OpeningTotalCost], [TollProduct], [Banderol]) VALUES (N'ovh0', N'ovh0', N'Margin', N'-', N'0', N'-', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'-', N'', CAST(0.000000000 AS Decimal(25, 9)), N'', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), CAST(0x0000A1A40105ED84 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'Y', N'admin', CAST(0x0000A1A401060044 AS DateTime), N'admin', CAST(0x0000A1A401224A74 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'N/A', N'N/A', N'Local', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A17500C8DF0C AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A')

INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'1', N'Local', N'-', N'Local', N'-', N'Y', N'admin', CAST(0x0000A95A01865820 AS DateTime), N'admin', CAST(0x0000A95A01865820 AS DateTime), NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[CustomerGroups] ([CustomerGroupID], [CustomerGroupName], [CustomerGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'2', N'Export', N'-', N'Export', N'-', N'Y', N'admin', CAST(0x0000A95A01865F28 AS DateTime), N'admin', CAST(0x0000A95A01865F28 AS DateTime), NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[Customers] ([CustomerID], [CustomerCode], [CustomerName], [CustomerGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [TINNo], [VATRegistrationNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info2], [Info3], [Info4], [Info5], [Country], [VDSPercent], [BusinessType], [BusinessCode]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', NULL, NULL, NULL, NULL)

INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A''N/A', N'N/A', NULL)

INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'1', N'Local', N'-', N'Local', N'-', N'Y', N'admin', CAST(0x0000A95A01863F84 AS DateTime), N'admin', CAST(0x0000A95A01863F84 AS DateTime), NULL, NULL, NULL, NULL)

INSERT [dbo].[VendorGroups] ([VendorGroupID], [VendorGroupName], [VendorGroupDescription], [GroupType], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info3], [Info4], [Info5], [Info2]) VALUES (N'2', N'Import', N'-', N'Import', N'-', N'Y', N'admin', CAST(0x0000A95A018647B8 AS DateTime), N'admin', CAST(0x0000A95A018647B8 AS DateTime), NULL, NULL, NULL, NULL)

INSERT [dbo].[Vendors] ([VendorID], [VendorCode], [VendorName], [VendorGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [VATRegistrationNo], [TINNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Country], [Info2], [Info3], [Info4], [Info5], [VDSPercent], [BusinessType], [BusinessCode]) VALUES (N'0', NULL, N'N/A', N'0', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', NULL, NULL, NULL)

INSERT [dbo].[Vendors] ([VendorID], [VendorCode], [VendorName], [VendorGroupID], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [StartDateTime], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [VATRegistrationNo], [TINNo], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Country], [Info2], [Info3], [Info4], [Info5], [VDSPercent], [BusinessType], [BusinessCode]) VALUES (N'1',  N'NBL', N'Nestle Bangladesh Limited', N'1', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'000000442-0001', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', NULL, NULL, NULL)

INSERT [dbo].[UserInformations] ([UserID], [UserName], [UserPassword], [ActiveStatus], [LastLoginDateTime], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5], [GroupID]) VALUES (N'10', N'admin', N'J7LJ8+qT64o=', N'Y', CAST(0x0000A04D00B82888 AS DateTime), N'KamrulInsert', CAST(0x0000A01400EF44BC AS DateTime), N'admin', CAST(0x0000A08400D5C30C AS DateTime), N'Info1', N'Info2', N'Info3', N'Info4', N'Info5', NULL)

INSERT [dbo].[BankInformations] ([BankID], [BankCode], [BankName], [BranchName], [AccountNumber], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'0', N'0', N'NA', N'NA', N'NA', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'Y', N'admin', CAST(0x0000A19A00C0D9EC AS DateTime), N'admin', CAST(0x0000A19A00C0D9EC AS DateTime), NULL, NULL, NULL, NULL, NULL)

INSERT [dbo].[BankInformations] ([BankID], [BankCode], [BankName], [BranchName], [AccountNumber], [Address1], [Address2], [Address3], [City], [TelephoneNo], [FaxNo], [Email], [ContactPerson], [ContactPersonDesignation], [ContactPersonTelephone], [ContactPersonEmail], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5]) VALUES (N'1', N'SB', N'Sonali Bank Bangladesh', N'Motijhil', N'----', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'-', N'Y', N'admin', CAST(0x0000A95A01876B84 AS DateTime), N'admin', CAST(0x0000A95A01876B84 AS DateTime), NULL, NULL, NULL, NULL, NULL)

SET IDENTITY_INSERT [dbo].[Codes] ON 


INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Purchase', N'Other', N'PUR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'Purchase', N'Trading', N'PTD', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'Receive', N'Other', N'REC', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'TollReceive', N'TollReceive', N'TOR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'Purchase', N'PurchaseReturn', N'PRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'Purchase', N'InputService', N'PIS', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'Purchase', N'Import', N'IMP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'TollReceiveRaw', N'TollReceiveRaw', N'TRW', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'Issue', N'Other', N'ISU', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'Issue', N'IssueReturn', N'ISR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'Receive', N'ReceiveReturn', N'RER', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'Receive', N'WIP', N'WIP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'TollFinishReceive', N'TollFinishReceive', N'TFR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'Sale', N'Other', N'INV', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'Sale', N'Trading', N'STP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (17, N'Sale', N'Debit', N'DEN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'Sale', N'Credit', N'CRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'Sale', N'Export', N'STR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'InternalIssue', N'InternalIssue', N'TRN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (21, N'Sale', N'Service', N'SER', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (22, N'Sale', N'Tender', N'STN', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'TollIssue', N'TollIssue', N'EDF', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'TollFinishIssue', N'TollFinishIssue', N'TFI', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'Deposit', N'Treasury', N'DEP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'Deposit', N'VDS', N'VDS', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'Dispose', N'Raw', N'DSR', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'Dispose', N'Finish', N'DSF', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'Adjustment', N'Both', N'ADJ', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'SDDeposit', N'Treasury', N'SDP', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'DDB', N'DDB', N'DDB', N'4', N'Y', N'admin', CAST(0x00009FCB00000000 AS DateTime), N'admin', CAST(0x00009FCB00000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'Purchase', N'PurchaseDN', N'PDN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'Purchase', N'PurchaseCN', N'PCN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'Sale', N'ServiceNS', N'SNS', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (35, N'Purchase', N'ServiceNS', N'PSN', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[Codes] ([CodeId], [CodeGroup], [CodeName], [prefix], [Lenth], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (36, N'Purchase', N'Service', N'PSE', N'4', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime))

SET IDENTITY_INSERT [dbo].[Codes] OFF

SET IDENTITY_INSERT [dbo].[Currencies] ON 


INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (246, N'Afghanistan Afghani', N'AFN', N'Afghanistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'afghani', N'Pul', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (247, N'Albanian Lek', N'ALL', N'Albania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lek', N'Qindarkë', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (248, N'Algerian Dinar', N'DZD', N'Algeria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Santeem', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (249, N'US Dollar', N'USD', N'American Samoa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (250, N'Euro', N'EUR', N'Andorra', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Euro', N'Cent', N'€')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (251, N'Anlan Kwanza', N'AOA', N'Anla', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kwanza', N'Cêntimo', N'Kz')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (252, N'East Caribbean Dollar', N'XCD', N'Anguilla', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (253, N'Argentine Peso', N'ARS', N'Argentina', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (254, N'Armenian Dram', N'AMD', N'Armenia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dram', N'Luma', N'')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (255, N'Aruban Guilder', N'AWG', N'Aruba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'florin', N'Cent', N'ƒ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (256, N'Australian Dollar', N'AUD', N'Australia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (257, N'Azerbaijan New Manat', N'AZN', N'Azerbaijan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'manat', N'Q?pik', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (258, N'Bahamian Dollar', N'BSD', N'Bahamas', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (259, N'Bahraini Dinar', N'BHD', N'Bahrain', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Fils', N'.?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (260, N'Bangladeshi Taka', N'BDT', N'Bangladesh', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'taka', N'Paisa', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (261, N'Barbados Dollar', N'BBD', N'Barbados', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (262, N'Belarussian Ruble', N'BYR', N'Belarus', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ruble', N'Kapyeyka', N'Br')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (263, N'Belize Dollar', N'BZD', N'Belize', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (264, N'CFA Franc BCEAO', N'XOF', N'Benin', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (265, N'Bermudian Dollar', N'BMD', N'Bermuda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (266, N'Bhutan Ngultrum', N'BTN', N'Bhutan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ngultrum', N'Chetrum', N'Nu.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (267, N'Boliviano', N'BOB', N'Bolivia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'boliviano', N'Centavo', N'Bs.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (268, N'Marka', N'BAM', N'Bosnia-Herzevina', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'mark', N'Fening', N'KM')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (269, N'Botswana Pula', N'BWP', N'Botswana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pula', N'Thebe', N'P')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (270, N'Norwegian Krone', N'NOK', N'Bouvet Island', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'krone', N'Øre', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (271, N'Brazilian Real', N'BRL', N'Brazil', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'real', N'Centavo', N'R$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (272, N'Brunei Dollar', N'BND', N'Brunei Darussalam', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Sen', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (273, N'Bulgarian Lev', N'BGN', N'Bulgaria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lev', N'Stotinka', N'??')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (274, N'Burundi Franc', N'BIF', N'Burundi', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (275, N'Kampuchean Riel', N'KHR', N'Cambodia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'riel', N'Sen', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (276, N'CFA Franc BEAC', N'XAF', N'Cameroon', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (277, N'Canadian Dollar', N'CAD', N'Canada', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (278, N'Cape Verde Escudo', N'CVE', N'Cape Verde', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'escudo', N'Centavo', N' $')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (279, N'Cayman Islands Dollar', N'KYD', N'Cayman Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (280, N'Chilean Peso', N'CLP', N'Chile', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (281, N'Yuan Renminbi', N'CNY', N'China', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'yuan', N'Fen', N'¥ ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (282, N'Colombian Peso', N'COP', N'Colombia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (283, N'Comoros Franc', N'KMF', N'Comoros', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (284, N'Francs', N'CDF', N'Con, Dem. Republic', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (285, N'New Zealand Dollar', N'NZD', N'Cook Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (286, N'Costa Rican Colon', N'CRC', N'Costa Rica', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'colón', N'Céntimo', N'¢')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (287, N'Croatian Kuna', N'HRK', N'Croatia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kuna', N'Lipa', N'kn')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (288, N'Cuban Peso', N'CUP', N'Cuba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (289, N'Czech Koruna', N'CZK', N'Czech Rep.', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'koruna', N'Halér', N'Kc')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (290, N'Danish Krone', N'DKK', N'Denmark', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'krone', N'Øre', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (291, N'Djibouti Franc', N'DJF', N'Djibouti', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (292, N'Dominican Peso', N'DOP', N'Dominican Republic', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (293, N'Ecuador Sucre', N'ECS', N'Ecuador', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (294, N'Egyptian Pound', N'EGP', N'Egypt', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£ ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (295, N'El Salvador Colon', N'SVC', N'El Salvador', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (296, N'Eritrean Nakfa', N'ERN', N'Eritrea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'nakfa', N'Cent', N'Nfk')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (297, N'Ethiopian Birr', N'ETB', N'Ethiopia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'birr', N'Santim', N'Br')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (298, N'Falkland Islands Pound', N'FKP', N'Falkland Islands (Malvinas)', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (299, N'Fiji Dollar', N'FJD', N'Fiji', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (300, N'Gambian Dalasi', N'GMD', N'Gambia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dalasi', N'Butut', N'D')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (301, N'Georgian Lari', N'GEL', N'Georgia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lari', N'Tetri', N'.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (302, N'Ghanaian Cedi', N'GHS', N'Ghana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'cedi', N'Pesewa', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (303, N'Gibraltar Pound', N'GIP', N'Gibraltar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (304, N'Pound Sterling', N'GBP', N'Great Britain', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (305, N'East Carribean Dollar', N'XCD', N'Grenada', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (306, N'Guatemalan Quetzal', N'QTQ', N'Guatemala', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (307, N'Pound Sterling', N'GGP', N'Guernsey', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (308, N'Guinea Franc', N'GNF', N'Guinea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (309, N'Guinea-Bissau Peso', N'GWP', N'Guinea Bissau', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (310, N'Guyana Dollar', N'GYD', N'Guyana', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (311, N'Haitian urde', N'HTG', N'Haiti', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'urde', N'Centime', N'G')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (312, N'Honduran Lempira', N'HNL', N'Honduras', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lempira', N'Centavo', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (313, N'Hong Kong Dollar', N'HKD', N'Hong Kong', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (314, N'Hungarian Forint', N'HUF', N'Hungary', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'forint', N'Fillér', N'Ft')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (315, N'Iceland Krona', N'ISK', N'Iceland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'króna', N'Eyrir', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (316, N'Indian Rupee', N'INR', N'India', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Paisa', N'INR')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (317, N'Indonesian Rupiah', N'IDR', N'Indonesia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupiah', N'Sen', N'Rp')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (318, N'Iranian Rial', N'IRR', N'Iran', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rial', N'Dinar', N'')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (319, N'Iraqi Dinar', N'IQD', N'Iraq', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Fils', N'?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (320, N'Israeli New Shekel', N'ILS', N'Israel', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shekel', N'Ara', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (321, N'Jamaican Dollar', N'JMD', N'Jamaica', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (322, N'Japanese Yen', N'JPY', N'Japan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'yen', N'Sen', N'¥')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (323, N'Jordanian Dinar', N'JOD', N'Jordan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Piastre', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (324, N'Kazakhstan Tenge', N'KZT', N'Kazakhstan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'tenge', N'Tïin', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (325, N'Kenyan Shilling', N'KES', N'Kenya', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (326, N'North Korean Won', N'KPW', N'Korea-North', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'won', N'Chon', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (327, N'Korean Won', N'KRW', N'Korea-South', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'won', N'Jeon', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (328, N'Kuwaiti Dinar', N'KWD', N'Kuwait', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Fils', N'? or K.D')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (329, N'Som', N'KGS', N'Kyrgyzstan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'som', N'Tyiyn', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (330, N'Lao Kip', N'LAK', N'Laos', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kip', N'Att', N'? or ?N')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (331, N'Latvian Lats', N'LVL', N'Latvia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lats', N'Santims', N'Ls')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (332, N'Lebanese Pound', N'LBP', N'Lebanon', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (333, N'Lesotho Loti', N'LSL', N'Lesotho', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'loti', N'Sente', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (334, N'Liberian Dollar', N'LRD', N'Liberia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (335, N'Libyan Dinar', N'LYD', N'Libya', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Dirham', N'LD')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (336, N'Swiss Franc', N'CHF', N'Liechtenstein', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Rappen', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (337, N'Lithuanian Litas', N'LTL', N'Lithuania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'litas', N'Centas', N'Lt')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (338, N'Macau Pataca', N'MOP', N'Macau', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pataca', N'Avo', N'P')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (339, N'Denar', N'MKD', N'Macedonia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'denar', N'Deni', N'???')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (340, N'Malagasy Franc', N'MGF', N'Madagascar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (341, N'Malawi Kwacha', N'MWK', N'Malawi', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kwacha', N'Tambala', N'MK')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (342, N'Malaysian Ringgit', N'MYR', N'Malaysia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ringgit', N'Sen', N'RM')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (343, N'Maldive Rufiyaa', N'MVR', N'Maldives', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rufiyaa', N'Laari', N'MVR')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (344, N'Mauritanian Ouguiya', N'MRO', N'Mauritania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ouguiya', N'Khoums', N'UM')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (345, N'Mauritius Rupee', N'MUR', N'Mauritius', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Cent', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (346, N'Mexican Nuevo Peso', N'MXN', N'Mexico', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (347, N'Moldovan Leu', N'MDL', N'Moldova', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'leu', N'Ban', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (348, N'Monlian Tugrik', N'MNT', N'Monlia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'tögrög', N'Möngö', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (349, N'Moroccan Dirham', N'MAD', N'Morocco', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dirham', N'Centime', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (350, N'Mozambique Metical', N'MZN', N'Mozambique', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'metical', N'Centavo', N'MT')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (351, N'Myanmar Kyat', N'MMK', N'Myanmar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kyat', N'Pya', N'Ks')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (352, N'Namibian Dollar', N'NAD', N'Namibia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (353, N'Nepalese Rupee', N'NPR', N'Nepal', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Paisa', N'Rs')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (354, N'Netherlands Antillean Guilder', N'ANG', N'Netherlands Antilles', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'guilder', N'Cent', N'ƒ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (355, N'CFP Franc', N'XPF', N'New Caledonia (French)', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (356, N'Nicaraguan Cordoba Oro', N'NIO', N'Nicaragua', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'córdoba', N'Centavo', N'C$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (357, N'Nigerian Naira', N'NGN', N'Nigeria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'naira', N'Kobo', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (358, N'Omani Rial', N'OMR', N'Oman', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rial', N'Baisa', N'?.?.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (359, N'Pakistan Rupee', N'PKR', N'Pakistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Paisa', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (360, N'Panamanian Balboa', N'PAB', N'Panama', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'balboa', N'Centésimo', N'B/.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (361, N'Papua New Guinea Kina', N'PGK', N'Papua New Guinea', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kina', N'Toea', N'K')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (362, N'Paraguay Guarani', N'PYG', N'Paraguay', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'guaraní', N'Céntimo', N' (? in unicode)')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (363, N'Peruvian Nuevo Sol', N'PEN', N'Peru', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'sol', N'Céntimo', N'S/.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (364, N'Philippine Peso', N'PHP', N'Philippines', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centavo', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (365, N'Polish Zloty', N'PLN', N'Poland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'zloty', N'Grosz', N'zl')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (366, N'Qatari Rial', N'QAR', N'Qatar', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'riyal', N'Dirham', N'QR or ?.?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (367, N'Romanian New Leu', N'RON', N'Romania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'leu', N'Ban', N'lei')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (368, N'Russian Ruble', N'RUB', N'Russia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'ruble', N'Kopek', N'')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (369, N'Rwanda Franc', N'RWF', N'Rwanda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'franc', N'Centime', N'Fr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (370, N'St. Helena Pound', N'SHP', N'Saint Helena', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Penny', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (371, N'Samoan Tala', N'WST', N'Samoa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'tala', N'Sene', N'T')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (372, N'Dobra', N'STD', N'Sao Tome and Principe', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dobra', N'Cêntimo', N'Db')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (373, N'Saudi Riyal', N'SAR', N'Saudi Arabia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'riyal', N'Halala', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (374, N'Dinar', N'RSD', N'Serbia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Para', N'din.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (375, N'Seychelles Rupee', N'SCR', N'Seychelles', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Cent', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (376, N'Sierra Leone Leone', N'SLL', N'Sierra Leone', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'leone', N'Cent', N'Le')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (377, N'Singapore Dollar', N'SGD', N'Singapore', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (378, N'Solomon Islands Dollar', N'SBD', N'Solomon Islands', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (379, N'Somali Shilling', N'SOS', N'Somalia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (380, N'South African Rand', N'ZAR', N'South Africa', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rand', N'Cent', N'R')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (381, N'South Sudan Pound', N'SSP', N'South Sudan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (382, N'Sri Lanka Rupee', N'LKR', N'Sri Lanka', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rupee', N'Cent', N'Rs')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (383, N'Sudanese Pound', N'SDG', N'Sudan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (384, N'Surinam Dollar', N'SRD', N'Suriname', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (385, N'Swaziland Lilangeni', N'SZL', N'Swaziland', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lilangeni', N'Cent', N'L')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (386, N'Swedish Krona', N'SEK', N'Sweden', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'krona', N'Öre', N'kr')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (387, N'Syrian Pound', N'SYP', N'Syria', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pound', N'Piastre', N'£ ')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (388, N'Taiwan Dollar', N'TWD', N'Taiwan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (389, N'Tajik Somoni', N'TJS', N'Tajikistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'somoni', N'Diram', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (390, N'Tanzanian Shilling', N'TZS', N'Tanzania', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (391, N'Thai Baht', N'THB', N'Thailand', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'baht', N'Satang', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (392, N'Tongan Paanga', N'TOP', N'Tonga', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'pa?anga', N'Seniti', N'T$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (393, N'Trinidad and Toba Dollar', N'TTD', N'Trinidad and Toba', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dollar', N'Cent', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (394, N'Tunisian Dollar', N'TND', N'Tunisia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dinar', N'Millime', N'DT')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (395, N'Turkish Lira', N'TRY', N'Turkey', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'lira', N'Kurus', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (396, N'Manat', N'TMT', N'Turkmenistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'manat', N'Tennesi', N'm')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (397, N'Uganda Shilling', N'UGX', N'Uganda', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'shilling', N'Cent', N'Sh')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (398, N'Ukraine Hryvnia', N'UAH', N'Ukraine', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'hryvnia', N'Kopiyka', N'?')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (399, N'Arab Emirates Dirham', N'AED', N'United Arab Emirates', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'dirham', N'Fils', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (400, N'Uruguayan Peso', N'UYU', N'Uruguay', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'peso', N'Centésimo', N'$')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (401, N'Uzbekistan Sum', N'UZS', N'Uzbekistan', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'som', N'Tiyin', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (402, N'Vanuatu Vatu', N'VUV', N'Vanuatu', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'vatu', N'None', N'Vt')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (403, N'Venezuelan Bolivar', N'VEF', N'Venezuela', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'bolívar', N'Céntimo', N'Bs F')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (404, N'Vietnamese Dong', N'VND', N'Vietnam', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'd?ng', N'Hào', N'.')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (405, N'Yemeni Rial', N'YER', N'Yemen', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'rial', N'Fils', N'None')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (406, N'Zambian Kwacha', N'ZMW', N'Zambia', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'kwacha', N'Ngwee', N'ZK')

INSERT [dbo].[Currencies] ([CurrencyId], [CurrencyName], [CurrencyCode], [Country], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [CurrencyMajor], [CurrencyMinor], [CurrencySymbol]) VALUES (407, N'Zimbabwe Dollar', N'ZWD', N'Zimbabwe', N'N/A', N'Y', N'Admin', CAST(0x00009FCB00000000 AS DateTime), N'Admin', CAST(0x00009FCB00000000 AS DateTime), NULL, NULL, NULL)

SET IDENTITY_INSERT [dbo].[Currencies] OFF

INSERT [dbo].[CurrencyConversion] ([CurrencyConversionId], [CurrencyCodeFrom], [CurrencyCodeTo], [CurrencyRate], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ConversionDate]) VALUES (N'1', N'249', N'260', CAST(80.0000000000 AS Decimal(18, 10)), N'NA', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime), CAST(0x0000000000000000 AS DateTime))

INSERT [dbo].[CurrencyConversion] ([CurrencyConversionId], [CurrencyCodeFrom], [CurrencyCodeTo], [CurrencyRate], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ConversionDate]) VALUES (N'2', N'260', N'260', CAST(1.0000000000 AS Decimal(18, 10)), N'NA', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000000000000000 AS DateTime), CAST(0x0000000000000000 AS DateTime))

SET IDENTITY_INSERT [dbo].[Settings] ON 


INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Purchase', N'TotalPrice', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'Purchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (3, N'Sale', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'Issue', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'Sale', N'QuantityDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'Sale', N'TakaDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'Sale', N'DollerDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'Sale', N'RateDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (54, N'PriceDeclaration', N'LocalInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (55, N'PriceDeclaration', N'LocalInVAT4_3Ka(Tarrif)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'ImportPurchase', N'FixedCnF', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'ImportPurchase', N'FixedInsurance', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'ImportPurchase', N'CalculativeAV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'ImportPurchase', N'FixedCD', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'ImportPurchase', N'FixedRD', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'ImportPurchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'ImportPurchase', N'FixedTVB', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'ImportPurchase', N'FixedTVA', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'ImportPurchase', N'FixedATV', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'ImportPurchase', N'FixedOthers', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'ImportPurchase', N'FixedSD', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'AutoCode', N'Item', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'AutoCode', N'Customer', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'AutoCode', N'Vendor', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'AutoCode', N'Bank', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'AutoCode', N'OverHead', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'IssueFromBOM', N'IssueFromBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'PrepaidVAT', N'PrepaidVAT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'Sale', N'ItemNature', N'ELECTRIC WIRE/CABLE', N'string', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'BOM', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'BOM', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (39, N'BOM', N'ItemNature', N'SHAFIQKAMRUL', N'string', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (40, N'BOM', N'IntermediateProduction', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (42, N'Sale', N'NumberOfItems', N'15', N'int', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (43, N'Production', N'ProductionWithoutBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (44, N'IssueFromBOM', N'IssueAutoPost', N'N', N'bool', N'Y', N'admin', CAST(0x0000000000000000 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (45, N'Sale', N'ATVRate', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (46, N'Sale', N'WareHouseRentPerQuantity', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (47, N'Sale', N'CommercialImporter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (48, N'DatabaseName', N'DatabaseName', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (49, N'Import', N'SaleExistContinue', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (50, N'Purchase', N'TrackingWithSale', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (51, N'Purchase', N'TrackingWithSaleFIFO', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (52, N'BOM', N'VAT4_3(TollIssue)WithRaw', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (56, N'PriceDeclaration', N'TenderInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (78, N'Sale', N'Page3Plyer', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (79, N'Sale', N'CreditWithoutTransaction', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (80, N'Sale', N'VAT6_3A4', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (81, N'Sale', N'VAT6_3Letter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (82, N'Sale', N'VAT6_3Legal', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (83, N'Sale', N'TenderSaleFromBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (84, N'Issue', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (85, N'Issue', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (86, N'Purchase', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (87, N'Purchase', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (88, N'Receive', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (89, N'Receive', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (90, N'Receive', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (91, N'Purchase', N'RateChangePromote', N'7.5', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (92, N'Banderol', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (93, N'Printer', N'DefaultPrinter', N' ', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (94, N'Printer', N'MaxNoOfPrint', N'10', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (95, N'Printer', N'EmployeeSalary(BDE)', N'Y', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (96, N'BOM', N'NetCost', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (97, N'TollItemReceive', N'AttachedWithVAT6_1', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (98, N'ImportTender', N'CustomerGroup', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (99, N'TrackingTrace', N'Tracking', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (100, N'TrackingTrace', N'TrackingNo', N'2', N'int', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (101, N'TrackingTrace', N'TrackingHead_1', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (102, N'TrackingTrace', N'TrackingHead_2', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (103, N'CompanyCode', N'Code', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A0187197C AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (57, N'PriceDeclaration', N'TenderInVAT4_3(Tender)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (58, N'PriceDeclaration', N'TenderPriceWithVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (59, N'Purchase', N'ImportCostingIncludeATV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (60, N'TollReceive', N'WithIssue', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (61, N'Reports', N'VAT6_3', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))




INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (65, N'Sale', N'PackingInExport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (66, N'Sale', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (67, N'Receive', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (68, N'BOM', N'TollIssueCostWithOthers', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (69, N'BOM', N'RptBOMCostingA4', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (70, N'VAT19', N'ExportInBDT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (71, N'BOM', N'InputServicePercent', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (72, N'Sale', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (73, N'Production', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (74, N'VAT17', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (75, N'VAT16', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (76, N'Sale', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (77, N'Sale', N'ReportNumberOfCopiesPrint', N'1', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (104, N'Password', N'MinimumLengthCheck', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (105, N'Password', N'MinimumLength', N'8', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (106, N'Password', N'MixPasswordCheck', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (107, N'Password', N'MaxWrongLoginCheck', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (108, N'Password', N'MaxWrongLoginTime', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[Settings] ([SettingId], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (109, N'Password', N'ChangeDate', N'120', N'int', N'Y', N'admin', CAST(0x0000A95A01871850 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

SET IDENTITY_INSERT [dbo].[Settings] OFF

SET IDENTITY_INSERT [dbo].[SettingsRole] ON 


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'10', N'AutoCode', N'Bank', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'10', N'AutoCode', N'Customer', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (3, N'10', N'AutoCode', N'Item', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'10', N'AutoCode', N'OverHead', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'10', N'AutoCode', N'Vendor', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'10', N'Banderol', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'10', N'BOM', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'10', N'BOM', N'InputServicePercent', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'10', N'BOM', N'IntermediateProduction', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'10', N'BOM', N'ItemNature', N'SHAFIQKAMRUL', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'10', N'BOM', N'NetCost', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'10', N'BOM', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'10', N'BOM', N'RptBOMCostingA4', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'10', N'BOM', N'TollIssueCostWithOthers', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (17, N'10', N'BOM', N'VAT4_3(TollIssue)WithRaw', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'10', N'CompanyCode', N'Code', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'10', N'DatabaseName', N'DatabaseName', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (21, N'10', N'Import', N'SaleExistContinue', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (22, N'10', N'ImportPurchase', N'CalculativeAV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'10', N'ImportPurchase', N'FixedATV', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'10', N'ImportPurchase', N'FixedCD', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'10', N'ImportPurchase', N'FixedCnF', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'10', N'ImportPurchase', N'FixedInsurance', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'10', N'ImportPurchase', N'FixedOthers', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'10', N'ImportPurchase', N'FixedRD', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'10', N'ImportPurchase', N'FixedSD', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'10', N'ImportPurchase', N'FixedTVA', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'10', N'ImportPurchase', N'FixedTVB', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'10', N'ImportPurchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'10', N'ImportTender', N'CustomerGroup', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'10', N'Issue', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (35, N'10', N'Issue', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (36, N'10', N'Issue', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (37, N'10', N'IssueFromBOM', N'IssueAutoPost', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (38, N'10', N'IssueFromBOM', N'IssueFromBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (39, N'10', N'PrepaidVAT', N'PrepaidVAT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (40, N'10', N'PriceDeclaration', N'LocalInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (41, N'10', N'PriceDeclaration', N'LocalInVAT4_3Ka(Tarrif)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (42, N'10', N'PriceDeclaration', N'TenderInVAT4_3', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (43, N'10', N'PriceDeclaration', N'TenderInVAT4_3(Tender)', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (44, N'10', N'PriceDeclaration', N'TenderPriceWithVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (45, N'10', N'Printer', N'DefaultPrinter', N' ', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (46, N'10', N'Printer', N'EmployeeSalary(BDE)', N'Y', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (47, N'10', N'Printer', N'MaxNoOfPrint', N'10', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (48, N'10', N'Production', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (49, N'10', N'Production', N'ProductionWithoutBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (50, N'10', N'Purchase', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (51, N'10', N'Purchase', N'FixedVAT', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (52, N'10', N'Purchase', N'ImportCostingIncludeATV', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (53, N'10', N'Purchase', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (54, N'10', N'Purchase', N'RateChangePromote', N'7.5', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (55, N'10', N'Purchase', N'TotalPrice', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (56, N'10', N'Purchase', N'TrackingWithSale', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (57, N'10', N'Purchase', N'TrackingWithSaleFIFO', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (58, N'10', N'Receive', N'Amount', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (59, N'10', N'Receive', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (60, N'10', N'Receive', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (61, N'10', N'Receive', N'Quantity', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (62, N'10', N'Reports', N'VAT6_3', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (63, N'10', N'Sale', N'ATVRate', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (64, N'10', N'Sale', N'ChangeableNBRPrice', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (65, N'10', N'Sale', N'CommercialImporter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (66, N'10', N'Sale', N'CreditWithoutTransaction', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (67, N'10', N'Sale', N'CustomerWiseBOM', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (68, N'10', N'Sale', N'DollerDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (69, N'10', N'Sale', N'ItemNature', N'ELECTRIC WIRE/CABLE', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (70, N'10', N'Sale', N'NegStockAllow', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (71, N'10', N'Sale', N'NumberOfItems', N'15', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (72, N'10', N'Sale', N'PackingInExport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (73, N'10', N'Sale', N'Page3Plyer', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (74, N'10', N'Sale', N'PriceDeclarationForImport', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (75, N'10', N'Sale', N'QuantityDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (76, N'10', N'Sale', N'RateDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (77, N'10', N'Sale', N'ReportNumberOfCopiesPrint', N'1', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (78, N'10', N'Sale', N'TakaDecimalPlace', N'4', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (79, N'10', N'Sale', N'TenderSaleFromBOM', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (80, N'10', N'Sale', N'VAT6_3A4', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (81, N'10', N'Sale', N'VAT6_3Legal', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (82, N'10', N'Sale', N'VAT6_3Letter', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (83, N'10', N'Sale', N'WareHouseRentPerQuantity', N'0.0', N'Decimal', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (84, N'10', N'TollItemReceive', N'AttachedWithVAT6_1', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (85, N'10', N'TollReceive', N'WithIssue', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (86, N'10', N'TrackingTrace', N'Tracking', N'N', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (87, N'10', N'TrackingTrace', N'TrackingHead_1', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (88, N'10', N'TrackingTrace', N'TrackingHead_2', N'-', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (89, N'10', N'TrackingTrace', N'TrackingNo', N'2', N'int', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (90, N'10', N'VAT16', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (91, N'10', N'VAT17', N'AutoAdjustment', N'N', N'string', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))


INSERT [dbo].[SettingsRole] ([SettingId], [UserID], [SettingGroup], [SettingName], [SettingValue], [SettingType], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (93, N'10', N'VAT19', N'ExportInBDT', N'Y', N'bool', N'Y', N'admin', CAST(0x0000A95A01871AA8 AS DateTime), N'admin', CAST(0x0000A95A01871AA8 AS DateTime))

SET IDENTITY_INSERT [dbo].[SettingsRole] OFF

SET IDENTITY_INSERT [dbo].[UOMName] ON 


INSERT [dbo].[UOMName] ([UOMId], [UOMName], [UOMCode], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'Pcs', N'Pcs', N'-', N'Y', N'admin', CAST(0x0000A95A018611D0 AS DateTime), N'admin', CAST(0x0000A95A018611D0 AS DateTime))

SET IDENTITY_INSERT [dbo].[UOMName] OFF

INSERT [dbo].[UOMs] ([UOMId], [UOMFrom], [UOMTo], [Convertion], [CTypes], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [ActiveStatus]) VALUES (N'1', N'pcs', N'pcs', CAST(1.000000000 AS Decimal(25, 9)), N'-', N'admin', CAST(0x0000A95A01861B30 AS DateTime), N'admin', CAST(0x0000A95A01861B30 AS DateTime), N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(1 AS Numeric(18, 0)), N'10', N'1101', N'Y', N'Y', N'Setup/ItemInformation/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(2 AS Numeric(18, 0)), N'10', N'1102', N'Y', N'Y', N'Setup/ItemInformation/Product', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(3 AS Numeric(18, 0)), N'10', N'1103', N'Y', N'Y', N'Setup/ItemInformation/Overhead', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(4 AS Numeric(18, 0)), N'10', N'1201', N'Y', N'Y', N'Setup/Vedor/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(5 AS Numeric(18, 0)), N'10', N'1202', N'Y', N'Y', N'Setup/Vedor/Vendor', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(6 AS Numeric(18, 0)), N'10', N'1301', N'Y', N'Y', N'Setup/Customer/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(7 AS Numeric(18, 0)), N'10', N'1302', N'Y', N'Y', N'Setup/Customer/Customer', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(8 AS Numeric(18, 0)), N'10', N'1401', N'Y', N'Y', N'Setup/Bank/Bank', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(9 AS Numeric(18, 0)), N'10', N'1501', N'Y', N'Y', N'Setup/Vehicle/Vehicle', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(10 AS Numeric(18, 0)), N'10', N'1601', N'Y', N'Y', N'Setup/PriceDeclaration/VAT-1', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(11 AS Numeric(18, 0)), N'10', N'1602', N'Y', N'Y', N'Setup/PriceDeclaration/Service', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(12 AS Numeric(18, 0)), N'10', N'1603', N'Y', N'Y', N'Setup/PriceDeclaration/Tender', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(13 AS Numeric(18, 0)), N'10', N'1701', N'Y', N'Y', N'Setup/Company/Commpany', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(14 AS Numeric(18, 0)), N'10', N'1801', N'Y', N'Y', N'Setup/FiscalYear/FiscalYear', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(15 AS Numeric(18, 0)), N'10', N'1901', N'Y', N'Y', N'Setup/Configuration/Settings', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(16 AS Numeric(18, 0)), N'10', N'1902', N'Y', N'Y', N'Setup/Configuration/Prefix', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(17 AS Numeric(18, 0)), N'10', N'11001', N'Y', N'Y', N'Setup/Import/Import', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(18 AS Numeric(18, 0)), N'10', N'11101', N'Y', N'Y', N'Setup/Conversion/Conversion', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(19 AS Numeric(18, 0)), N'10', N'11201', N'Y', N'Y', N'Setup/Currency/Currency', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(20 AS Numeric(18, 0)), N'10', N'11202', N'Y', N'Y', N'Setup/Currency/Conversion', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(21 AS Numeric(18, 0)), N'10', N'11301', N'Y', N'Y', N'Setup/Banderol/Banderol', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(22 AS Numeric(18, 0)), N'10', N'11302', N'Y', N'Y', N'Setup/Banderol/Packaging', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(23 AS Numeric(18, 0)), N'10', N'11303', N'Y', N'Y', N'Setup/Banderol/Product', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(24 AS Numeric(18, 0)), N'10', N'2101', N'Y', N'Y', N'Purchase/Purchase/Local', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(25 AS Numeric(18, 0)), N'10', N'2102', N'Y', N'Y', N'Purchase/Purchase/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(26 AS Numeric(18, 0)), N'10', N'2103', N'Y', N'Y', N'Purchase/Purchase/Import', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(27 AS Numeric(18, 0)), N'10', N'2104', N'Y', N'Y', N'Purchase/Purchase/InputService', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(28 AS Numeric(18, 0)), N'10', N'2105', N'Y', N'Y', N'Purchase/Purchase/PurchaseReturn', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(29 AS Numeric(18, 0)), N'10', N'2106', N'Y', N'Y', N'Purchase/Purchase/Service Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(30 AS Numeric(18, 0)), N'10', N'2107', N'Y', N'Y', N'Purchase/Purchase/Service Non Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(31 AS Numeric(18, 0)), N'10', N'3101', N'Y', N'Y', N'Production/Issue/Issue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(32 AS Numeric(18, 0)), N'10', N'3102', N'Y', N'Y', N'Production/Issue/Return', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(33 AS Numeric(18, 0)), N'10', N'3201', N'Y', N'Y', N'Production/Receive/WIP', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(34 AS Numeric(18, 0)), N'10', N'3202', N'Y', N'Y', N'Production/Receive/FGReceive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(35 AS Numeric(18, 0)), N'10', N'3203', N'Y', N'Y', N'Production/Receive/Return', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(36 AS Numeric(18, 0)), N'10', N'3301', N'Y', N'Y', N'Production/Receive/Package', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(37 AS Numeric(18, 0)), N'10', N'4101', N'Y', N'Y', N'Sale/Sale/Local', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(38 AS Numeric(18, 0)), N'10', N'4102', N'Y', N'Y', N'Sale/Sale/Service Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(39 AS Numeric(18, 0)), N'10', N'41021', N'Y', N'Y', N'Sale/Sale/Service Non Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(40 AS Numeric(18, 0)), N'10', N'4103', N'Y', N'Y', N'Sale/Sale/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(41 AS Numeric(18, 0)), N'10', N'4104', N'Y', N'Y', N'Sale/Sale/Export', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(42 AS Numeric(18, 0)), N'10', N'4105', N'Y', N'Y', N'Sale/Sale/Tender', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(43 AS Numeric(18, 0)), N'10', N'4201', N'Y', N'Y', N'Sale/Transfer/Transfer', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(44 AS Numeric(18, 0)), N'10', N'5101', N'Y', N'Y', N'Deposit/Treasury/Treasury', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(45 AS Numeric(18, 0)), N'10', N'5201', N'Y', N'Y', N'Deposit/VDS/VDS', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(46 AS Numeric(18, 0)), N'10', N'5301', N'Y', N'Y', N'Deposit/SD/SD', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(47 AS Numeric(18, 0)), N'10', N'5401', N'Y', N'Y', N'Deposit/Reverse/Adjustment', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(48 AS Numeric(18, 0)), N'10', N'6101', N'Y', N'Y', N'Toll/Client/RawIssue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(49 AS Numeric(18, 0)), N'10', N'6102', N'Y', N'Y', N'Toll/Client/FGReceive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(50 AS Numeric(18, 0)), N'10', N'6201', N'Y', N'Y', N'Toll/Contractor/RawReceive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(51 AS Numeric(18, 0)), N'10', N'6202', N'Y', N'Y', N'Toll/Contractor/FGProduction', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(52 AS Numeric(18, 0)), N'10', N'6203', N'Y', N'Y', N'Toll/Contractor/FGIssue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(53 AS Numeric(18, 0)), N'10', N'7101', N'Y', N'Y', N'Adjustment/AdjustmentHead/Head', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(54 AS Numeric(18, 0)), N'10', N'7102', N'Y', N'Y', N'Adjustment/AdjustmentHead/Transaction', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(55 AS Numeric(18, 0)), N'10', N'7201', N'Y', N'Y', N'Adjustment/Purchase/DN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(56 AS Numeric(18, 0)), N'10', N'7202', N'Y', N'Y', N'Adjustment/Purchase/CN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(57 AS Numeric(18, 0)), N'10', N'7301', N'Y', N'Y', N'Adjustment/Sale/CN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(58 AS Numeric(18, 0)), N'10', N'7302', N'Y', N'Y', N'Adjustment/Sale/DN', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(59 AS Numeric(18, 0)), N'10', N'7401', N'Y', N'Y', N'Adjustment/Dispose/26', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(60 AS Numeric(18, 0)), N'10', N'7402', N'Y', N'Y', N'Adjustment/Dispose/27', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(61 AS Numeric(18, 0)), N'10', N'7501', N'Y', N'Y', N'Adjustment/DDB/DDB', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(62 AS Numeric(18, 0)), N'10', N'8101', N'Y', N'Y', N'NBRReport/VAT1/BOM', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(63 AS Numeric(18, 0)), N'10', N'8201', N'Y', N'Y', N'NBRReport/VAT16/VAT16', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(64 AS Numeric(18, 0)), N'10', N'8301', N'Y', N'Y', N'NBRReport/VAT17/VAT17', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(65 AS Numeric(18, 0)), N'10', N'8401', N'Y', N'Y', N'NBRReport/VAT18/VAT18', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(66 AS Numeric(18, 0)), N'10', N'8501', N'Y', N'Y', N'NBRReport/VAT19/VAT19', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(67 AS Numeric(18, 0)), N'10', N'8601', N'Y', N'Y', N'NBRReport/SDReport/SDReport', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(68 AS Numeric(18, 0)), N'10', N'9101', N'Y', N'Y', N'MISReport/Purchase/Purchase', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(69 AS Numeric(18, 0)), N'10', N'9102', N'Y', N'Y', N'MISReport/Purchase/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(70 AS Numeric(18, 0)), N'10', N'9201', N'Y', N'Y', N'MISReport/Production/Issue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(71 AS Numeric(18, 0)), N'10', N'9202', N'Y', N'Y', N'MISReport/Production/IssueReturn', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(72 AS Numeric(18, 0)), N'10', N'9203', N'Y', N'Y', N'MISReport/Production/Receive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(73 AS Numeric(18, 0)), N'10', N'9204', N'Y', N'Y', N'MISReport/Production/InnerIssue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(74 AS Numeric(18, 0)), N'10', N'9301', N'Y', N'Y', N'MISReport/Toll/Issue', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(75 AS Numeric(18, 0)), N'10', N'9302', N'Y', N'Y', N'MISReport/Toll/Receive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(76 AS Numeric(18, 0)), N'10', N'9401', N'Y', N'Y', N'MISReport/Sale/Local', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(77 AS Numeric(18, 0)), N'10', N'9402', N'Y', N'Y', N'MISReport/Sale/Service', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(78 AS Numeric(18, 0)), N'10', N'9403', N'Y', N'Y', N'MISReport/Sale/Trading', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(79 AS Numeric(18, 0)), N'10', N'9404', N'Y', N'Y', N'MISReport/Sale/Export', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(80 AS Numeric(18, 0)), N'10', N'9501', N'Y', N'Y', N'MISReport/Stock/Stock', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(81 AS Numeric(18, 0)), N'10', N'9601', N'Y', N'Y', N'MISReport/Deposit/Deposit', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(82 AS Numeric(18, 0)), N'10', N'9701', N'Y', N'Y', N'MISReport/VAT16/VAT16', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(83 AS Numeric(18, 0)), N'10', N'9801', N'Y', N'Y', N'MISReport/VAT17/VAT17', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(84 AS Numeric(18, 0)), N'10', N'9901', N'Y', N'Y', N'MISReport/VAT18/VAT18', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(85 AS Numeric(18, 0)), N'10', N'91001', N'Y', N'Y', N'MISReport/SDDeposit/SDDeposit', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(86 AS Numeric(18, 0)), N'10', N'10101', N'Y', N'Y', N'SetupReport/Product/Type', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(87 AS Numeric(18, 0)), N'10', N'10102', N'Y', N'Y', N'SetupReport/Product/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(88 AS Numeric(18, 0)), N'10', N'10103', N'Y', N'Y', N'SetupReport/Product/Product', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(89 AS Numeric(18, 0)), N'10', N'10201', N'Y', N'Y', N'SetupReport/Customer/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(90 AS Numeric(18, 0)), N'10', N'10202', N'Y', N'Y', N'SetupReport/Customer/Customer', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(91 AS Numeric(18, 0)), N'10', N'10301', N'Y', N'Y', N'SetupReport/Vendor/Group', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(92 AS Numeric(18, 0)), N'10', N'10302', N'Y', N'Y', N'SetupReport/Vendor/Vendor', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(93 AS Numeric(18, 0)), N'10', N'10401', N'Y', N'Y', N'SetupReport/Bank/Bank', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(94 AS Numeric(18, 0)), N'10', N'10501', N'Y', N'Y', N'SetupReport/Vehicle/Vehicle', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(95 AS Numeric(18, 0)), N'10', N'20101', N'Y', N'Y', N'UserAccount/NewAccount/NewAccount', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(96 AS Numeric(18, 0)), N'10', N'20201', N'Y', N'Y', N'UserAccount/PasswordChange/PasswordChange', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(97 AS Numeric(18, 0)), N'10', N'43', N'Y', N'Y', N'UserAccount/UserRole/UserRole', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(98 AS Numeric(18, 0)), N'10', N'44', N'Y', N'Y', N'UserAccount/SettingsRole/SettingsRole', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(99 AS Numeric(18, 0)), N'10', N'33101', N'Y', N'Y', N'Banderol/Demand/Demand', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[UserRolls] ([LineID], [UserID], [FormID], [Access], [PostAccess], [FormName], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [AddAccess], [EditAccess]) VALUES (CAST(100 AS Numeric(18, 0)), N'10', N'33201', N'Y', N'Y', N'Banderol/Receive/Receive', N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'admin', CAST(0x0000A95A0187A874 AS DateTime), N'Y', N'Y')

INSERT [dbo].[Vehicles] ([VehicleID], [VehicleCode], [VehicleType], [VehicleNo], [Description], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5], [DriverName]) VALUES (N'0', NULL, N'N/A', N'N/A', N'N/A', N'N/A', N'Y', N'Admin', CAST(0x0000000000000000 AS DateTime), N'Admin', CAST(0x0000000000000000 AS DateTime), N'N/A', N'N/A', N'N/A', N'N/A', N'N/A', NULL)

INSERT [dbo].[Vehicles] ([VehicleID], [VehicleCode], [VehicleType], [VehicleNo], [Description], [Comments], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [Info1], [Info2], [Info3], [Info4], [Info5], [DriverName]) VALUES (N'1', N'1', N'Truck', N'123', N'-', N'-', N'Y', N'admin', CAST(0x0000A95A0187854C AS DateTime), N'admin', CAST(0x0000A95A0187854C AS DateTime), NULL, NULL, NULL, NULL, NULL, N'')

 
SET IDENTITY_INSERT [dbo].[Shifts] ON 

 
INSERT [dbo].[Shifts] ([Id], [ShiftName], [ShiftStart], [ShiftEnd], [Remarks], [Sl], [NextDay]) VALUES (1, N'A.General', NULL, NULL, NULL, NULL, NULL)
 
SET IDENTITY_INSERT [dbo].[Shifts] OFF
 
SET IDENTITY_INSERT [dbo].[TDSs] ON 

INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'52A', N'52A', N'52A', CAST(1.00 AS Decimal(18, 2)), CAST(1500000.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'52A', N'52A', N'52A', CAST(1500000.10 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(3.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (3, N'52A', N'52A', N'52A', CAST(2500000.10 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(5.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'52AA', N'52AA_1', N'Advisory or Consultancy Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'52AA', N'52AA_2', N'Professional Service, Technical Services Fee, or Technical Assistance Fee', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'52AA', N'52AA_3_1', N'Catering Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'52AA', N'52AA_3_2', N'Cleaning Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'52AA', N'52AA_3_3', N'Collection and Recovery Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'52AA', N'52AA_3_4', N'Private Security Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'52AA', N'52AA_3_5', N'Manpower Supply Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'52AA', N'52AA_3_6', N'Creative Media Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'52AA', N'52AA_3_7', N'Public Relations Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'52AA', N'52AA_3_8', N'Event Management Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'52AA', N'52AA_3_9', N'Training, Workshop, etc. Organization and Management Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'52AA', N'52AA_3_10', N'Courier Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'52AA', N'52AA_3_11', N'Packing and Shifting Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (17, N'52AA', N'52AA_3_12', N'Any Other Service of Similar Nature                                                   ', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(1.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'52AA', N'52AA_4', N'Media Buying Agency Service                                                                                                     ', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(0.50 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'52AA', N'52AA_5', N'Indenting Commission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'52AA', N'52AA_6', N'Meeting Fees, Training Fees or Honorarium', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (21, N'52AA', N'52AA_7', N'Mobile Network Operator, Technical Support Service Provider or Service Delivery Agents Engaged in Mobile Banking Operations', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (22, N'52AA', N'52AA_8', N'Credit Rating Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'52AA', N'52AA_9', N'Motor Garage Or Workshop', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'52AA', N'52AA_10', N'Private Container Port Or Dockyard Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'52AA', N'52AA_11', N'Shipping Agency Commission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(6.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'52AA', N'52AA_12', N'Stevedoring/Berth Operation Commission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'52AA', N'52AA_13', N'Transport Service, Carrying Service, Vehicle Rental Service Or Ride Sharing Service', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(3.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'52AA', N'52AA_13A', N'Wheeling Charge For Electricity Transmission', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(4.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'52AA', N'52AA_14', N'Any Other Service Which is not Mentioned in Chapter VII of this Ordinance And is not a Service provided by any Bank, Insurance or Financial Institutions', CAST(1.00 AS Decimal(18, 2)), CAST(2500000.00 AS Decimal(18, 2)), CAST(10.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'52AA', N'52AA_1', N'Advisory or Consultancy Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'52AA', N'52AA_2', N'Professional Service, Technical Services Fee, or Technical Assistance Fee', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'52AA', N'52AA_3_1', N'Catering Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'52AA', N'52AA_3_2', N'Cleaning Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'52AA', N'52AA_3_3', N'Collection and Recovery Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (35, N'52AA', N'52AA_3_4', N'Private Security Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (36, N'52AA', N'52AA_3_5', N'Manpower Supply Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (37, N'52AA', N'52AA_3_6', N'Creative Media Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (38, N'52AA', N'52AA_3_7', N'Public Relations Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (39, N'52AA', N'52AA_3_8', N'Event Management Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (40, N'52AA', N'52AA_3_9', N'Training, Workshop, etc. Organization and Management Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (41, N'52AA', N'52AA_3_10', N'Courier Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (42, N'52AA', N'52AA_3_11', N'Packing and Shifting Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (43, N'52AA', N'52AA_3_12', N'Any Other Service of Similar Nature                                                   ', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(2.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (44, N'52AA', N'52AA_4', N'Media Buying Agency Service                                                                                                     ', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(0.65 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (45, N'52AA', N'52AA_5', N'Indenting Commission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (46, N'52AA', N'52AA_6', N'Meeting Fees, Training Fees or Honorarium', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (47, N'52AA', N'52AA_7', N'Mobile Network Operator, Technical Support Service Provider or Service Delivery Agents Engaged in Mobile Banking Operations', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (48, N'52AA', N'52AA_8', N'Credit Rating Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (49, N'52AA', N'52AA_9', N'Motor Garage Or Workshop', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (50, N'52AA', N'52AA_10', N'Private Container Port Or Dockyard Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (51, N'52AA', N'52AA_11', N'Shipping Agency Commission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(8.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (52, N'52AA', N'52AA_12', N'Stevedoring/Berth Operation Commission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (53, N'52AA', N'52AA_13', N'Transport Service, Carrying Service, Vehicle Rental Service Or Ride Sharing Service', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(4.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (54, N'52AA', N'52AA_13A', N'Wheeling Charge For Electricity Transmission', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(5.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 
INSERT [dbo].[TDSs] ([Id], [Section], [Code], [Description], [MinValue], [MaxValue], [Rate], [Comments], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (55, N'52AA', N'52AA_14', N'Any Other Service Which is not Mentioned in Chapter VII of this Ordinance And is not a Service provided by any Bank, Insurance or Financial Institutions', CAST(2500000.01 AS Decimal(18, 2)), CAST(9999999999999.00 AS Decimal(18, 2)), CAST(12.00 AS Decimal(18, 2)), NULL, NULL, NULL, NULL, NULL)
 

SET IDENTITY_INSERT [dbo].[TDSs] OFF
 


                ";
                #endregion TableDefaultData Back


                top2 = "go";

                IEnumerable<string> commandStringsDefaultData = Regex.Split(sqlText, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
                foreach (string commandString in commandStringsDefaultData)
                {
                    if (commandString.Trim() != "")
                    {
                        SqlCommand cmdIdExist1 = new SqlCommand(commandString, currConn);

                        cmdIdExist1.Transaction = transaction;
                        transResult = (int)cmdIdExist1.ExecuteNonQuery();
                        if (transResult < 0)
                        {
                            throw new ArgumentNullException("Insert Default Data to Database'" + databaseName + "'", MessageVM.dbMsgTableDefaultData);
                        }
                    }
                }

                #endregion TableCreate

                #region Insert Company Profile

                //string NewCompanyID = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyID);
                string tom = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyName);
                string jary = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyLegalName);
                string miki = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.VatRegistrationNo);
                string bin = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.BIN);
                //string mouse = Converter.DESEncrypt(PassPhrase, EnKey, GetHardwareID());
                string mouse = Converter.DESEncrypt(PassPhrase, EnKey, GetServerHardwareId(connVM));


                sqlText = "";
                sqlText += " insert into CompanyProfiles(";
                sqlText += " CompanyID,";
                sqlText += " CompanyName,";
                sqlText += " CompanyLegalName,";
                sqlText += " Address1,";
                sqlText += " Address2,";
                sqlText += " Address3,";
                sqlText += " City,";
                sqlText += " ZipCode,";
                sqlText += " TelephoneNo,";
                sqlText += " FaxNo,";
                sqlText += " Email,";
                sqlText += " ContactPerson,";
                sqlText += " ContactPersonDesignation,";
                sqlText += " ContactPersonTelephone,";
                sqlText += " ContactPersonEmail,";
                sqlText += " TINNo,";
                sqlText += " VatRegistrationNo,";
                sqlText += " Section,";
                sqlText += " Comments,";
                sqlText += " ActiveStatus,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " StartDateTime,";
                sqlText += " FYearStart,";
                sqlText += " FYearEnd,";
                sqlText += " Tom,";
                sqlText += " Jary,";
                sqlText += " Miki,";
                sqlText += " Bin,";
                sqlText += " Mouse)";

                sqlText += " values(";
                sqlText += "'" + companyProfiles.CompanyID + "' ,";
                sqlText += "'" + companyProfiles.CompanyName + "' ,";
                sqlText += "'" + companyProfiles.CompanyLegalName + "' ,";
                sqlText += "'" + companyProfiles.Address1 + "' ,";
                sqlText += "'" + companyProfiles.Address2 + "' ,";
                sqlText += "'" + companyProfiles.Address3 + "' ,";
                sqlText += "'" + companyProfiles.City + "' ,";
                sqlText += "'" + companyProfiles.ZipCode + "' ,";
                sqlText += "'" + companyProfiles.TelephoneNo + "' ,";
                sqlText += "'" + companyProfiles.FaxNo + "' ,";
                sqlText += "'" + companyProfiles.Email + "' ,";
                sqlText += "'" + companyProfiles.ContactPerson + "' ,";
                sqlText += "'" + companyProfiles.ContactPersonDesignation + "' ,";
                sqlText += "'" + companyProfiles.ContactPersonTelephone + "' ,";
                sqlText += "'" + companyProfiles.ContactPersonEmail + "' ,";
                sqlText += "'" + companyProfiles.TINNo + "' ,";
                sqlText += "'" + companyProfiles.VatRegistrationNo + "' ,";
                sqlText += "'" + companyProfiles.Section + "' ,";
                sqlText += "'" + companyProfiles.Comments + "' ,";
                sqlText += "'" + companyProfiles.ActiveStatus + "' ,";
                sqlText += "'SuperAdmin' ,";
                sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' ,";
                sqlText += "'SuperAdmin' ,";
                sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' ,";
                sqlText += "'" + companyProfiles.StartDateTime + "' ,";
                sqlText += "'" + companyProfiles.FYearStart + "' ,";
                sqlText += "'" + companyProfiles.FYearEnd + "' , ";
                sqlText += "'" + tom + "' , ";
                sqlText += "'" + jary + "' , ";
                sqlText += "'" + miki + "' , ";
                sqlText += "'" + bin + "' ,";
                sqlText += "'" + mouse + "' ";
                sqlText += " )";

                //try
                //{


                SqlCommand cmdCompanyProfile = new SqlCommand(sqlText, currConn);
                cmdCompanyProfile.Transaction = transaction;
                transResult = (int)cmdCompanyProfile.ExecuteNonQuery();
                if (transResult < 0)
                {

                    throw new ArgumentNullException("Insert company Profile data to Database('" + databaseName + "')", MessageVM.dbMsgCompanyInformationNotSave);
                }
                newID = companyProfiles.CompanyID;

                sqlText = "";
                sqlText += @" insert into BranchProfiles(BranchID,BranchCode,BranchName,BranchLegalName,Address,City,ZipCode,TelephoneNo,FaxNo,Email,ContactPerson,ContactPersonDesignation,ContactPersonTelephone,ContactPersonEmail,VatRegistrationNo,BIN,TINNo,Comments,ActiveStatus,CreatedBy,CreatedOn,LastModifiedBy,LastModifiedOn,IsArchive)
select '1','001',CompanyName,CompanyLegalName,Address1,City,ZipCode,TelephoneNo,FaxNo,Email,ContactPerson,ContactPersonDesignation,ContactPersonTelephone,ContactPersonEmail,VatRegistrationNo,BIN,TINNo,Comments,ActiveStatus,CreatedBy,CreatedOn,LastModifiedBy,LastModifiedOn,0 from CompanyProfiles
";

                //try
                //{


                cmdCompanyProfile = new SqlCommand(sqlText, currConn);
                cmdCompanyProfile.Transaction = transaction;
                transResult = (int)cmdCompanyProfile.ExecuteNonQuery();
                if (transResult < 0)
                {

                    throw new ArgumentNullException("Insert company Profile data to Database('" + databaseName + "')", MessageVM.dbMsgCompanyInformationNotSave);
                }

                #endregion Insert Company Profile

                #region Insert Fiscal Year
                foreach (var Item in fiscalDetails.ToList())
                {

                    #region Insert only DetailTable

                    sqlText = "";
                    sqlText += " insert into FiscalYear(";
                    sqlText += " FiscalYearName,";
                    sqlText += " CurrentYear,";
                    sqlText += " PeriodID,";
                    sqlText += " PeriodName,";
                    sqlText += " PeriodStart,";
                    sqlText += " PeriodEnd,";
                    sqlText += " PeriodLock,";
                    sqlText += " GLLock,";
                    sqlText += " CreatedBy,";
                    sqlText += " CreatedOn,";
                    sqlText += " LastModifiedBy,";
                    sqlText += " LastModifiedOn";

                    sqlText += " )";
                    sqlText += " values(	";

                    sqlText += "'" + Item.FiscalYearName + "',";
                    sqlText += "'" + Item.CurrentYear + "',";
                    sqlText += "'" + Item.PeriodID + "',";
                    sqlText += "'" + Item.PeriodName + "',";
                    sqlText += "'" + Item.PeriodStart + "',";
                    sqlText += "'" + Item.PeriodEnd + "',";
                    sqlText += "'" + Item.PeriodLock + "',";
                    sqlText += "'" + Item.GLLock + "',";
                    sqlText += "'SuperAdmin',";
                    sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',";
                    sqlText += "'SuperAdmin',";
                    sqlText += "'" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'";

                    sqlText += ")	";


                    SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                    cmdInsDetail.Transaction = transaction;
                    transResult = (int)cmdInsDetail.ExecuteNonQuery();

                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException("Insert Fiscal Year data to Database('" + databaseName + "')", MessageVM.dbMsgCFiscalYearNotSave);
                    }
                    #endregion Insert only DetailTable
                }



                #endregion Insert Fiscal Year

                #region BranchProfiles,UserInformations,CompanyProfiles TableField add

                transResult = TableFieldAdd("UserInformations", "IsLock", "bit", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("UserInformations", "WromgAttempt", "int", currConn, transaction, "", connVM);

                transResult = TableFieldAdd("BranchProfiles", "IP", "varchar(100)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("BranchProfiles", "DbName", "varchar(100)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("BranchProfiles", "Id", "varchar(100)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("BranchProfiles", "Pass", "varchar(100)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("BranchProfiles", "DbType", "varchar(100)", currConn, transaction, "'oracle'", connVM);
                transResult = TableFieldAdd("BranchProfiles", "IsWCF", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = TableFieldAdd("BranchProfiles", "IntegrationCode", "varchar(100)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("BranchProfiles", "IsCentral", "varchar(1)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("BranchProfiles", "BranchBanglaLegalName", "nvarchar(250)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("BranchProfiles", "BanglaAddress", "nvarchar(500)", currConn, transaction, "", connVM);


                transResult = TableFieldAdd("UserInformations", "IsMainSettings", "varchar(1)", currConn, transaction, "'Y'", connVM);

                transResult = TableFieldAdd("CompanyProfiles", "AppVersion", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("CompanyProfiles", "License", "varchar(1000)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("CompanyProfiles", "Section", "varchar(200)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("CompanyProfiles", "IsVDSWithHolder", "varchar(1)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("CompanyProfiles", "BusinessNature", "varchar(300)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("CompanyProfiles", "BIN", "varchar(50)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("CompanyProfiles", "AccountingNature", "varchar(300)", currConn, transaction, "", connVM);
                transResult = TableFieldAdd("CompanyProfiles", "CompanyType", "varchar(100)", currConn, transaction, "", connVM);

                #endregion

                #region Table Field Alter
                TableFieldAlter("UserInformations", "LastPasswordChangeDate", "datetime", currConn, transaction, connVM);
                #endregion

                #region UserMenuAllFinalRolls ,UserMenuRolls table add
                if (NewTableExistCheck("UserMenuAllFinalRolls", currConn, transaction, connVM) == 0)
                {
                    #region UserMenuAllFinalRolls
                    string UserMenuAllFinalRolls = @"
CREATE TABLE [dbo].[UserMenuAllFinalRolls](
	[LineID] [int] IDENTITY(1,1) NOT NULL,
	[FormId] [nvarchar](255) NOT NULL,
	[FormName] [nvarchar](255) NULL,
	[RibbonName] [nvarchar](255) NULL,
	[Access] [varchar](1) NULL,
	[AccessRoll] [nvarchar](255) NULL,
	[AccessType] [nvarchar](255) NULL,
	[Len] [float] NULL,
	[TabName] [nvarchar](255) NULL,
	[PanelName] [nvarchar](255) NULL,
	[ButtonName] [nvarchar](255) NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_UserMenuAllFinalRollTemps] PRIMARY KEY CLUSTERED 
(
	[LineID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


SET IDENTITY_INSERT [dbo].[UserMenuAllFinalRolls] ON 
INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (1, N'110', N'Setup', N'rTabSetup', N'1', N'o8bQC0by0vs=', N'Tab', 3, N'rTabSetup', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (2, N'110110', N'Setup/ItemInformation', N'rpItemInformation', N'1', N'uxKoIJMe/MCafr/f1Ml2mQ==', N'Panel', 6, N'rTabSetup', N'rpItemInformation', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (3, N'110110110', N'Setup/ItemInformation/Group', N'ribbonButton10', N'1', N'Pq75PBbVpfM1NgGVt3WerQ==', N'Button', 9, N'rTabSetup', N'rpItemInformation', N'ribbonButton10', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (4, N'110110120', N'Setup/ItemInformation/Product', N'ribbonButton81', N'1', N'8l6la5IH2L/c4/h9n9arYw==', N'Button', 9, N'rTabSetup', N'rpItemInformation', N'ribbonButton81', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (5, N'110110130', N'Setup/ItemInformation/Overhead', N'ribbonButton93', N'1', N'eO1tDdj79rQuemidi6PdVg==', N'Button', 9, N'rTabSetup', N'rpItemInformation', N'ribbonButton93', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (6, N'110110140', N'Setup/ItemInformation/TDS', N'rbtnTDS1', N'0', N'+3NaEDhvrQdeM90rLW4lcw==', N'Button', 9, N'rTabSetup', N'rpItemInformation', N'rbtnTDS1', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (7, N'110110150', N'Setup/ItemInformation/HSCode', N'rbtnHSCode', N'1', N'KpnrUCGugmMnIWPfgzt2IA==', N'Button', 9, N'rTabSetup', N'rpItemInformation', N'rbtnHSCode', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (8, N'110120', N'Setup/Vedor', N'rpVendor', N'1', N'CVHdra/bVswdwxkFw/li0w==', N'Panel', 6, N'rTabSetup', N'rpVendor', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (9, N'110120110', N'Setup/Vedor/Group', N'ribbonButton11', N'1', N'fLT6daM06K/s01pvBCKqNQ==', N'Button', 9, N'rTabSetup', N'rpVendor', N'ribbonButton11', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (10, N'110120120', N'Setup/Vedor/Vendor', N'ribbonButton12', N'1', N'nQtAx9guxNSS/R+Hy+h3mw==', N'Button', 9, N'rTabSetup', N'rpVendor', N'ribbonButton12', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (11, N'110130', N'Setup/Customer', N'rpCustomer', N'1', N'59KPcZnxguJZjFuaggebZQ==', N'Panel', 6, N'rTabSetup', N'rpCustomer', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (12, N'110130110', N'Setup/Customer/Group', N'ribbonButton13', N'1', N'UErYaX744hCwBuXditZA4g==', N'Button', 9, N'rTabSetup', N'rpCustomer', N'ribbonButton13', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (13, N'110130120', N'Setup/Customer/Customer', N'ribbonButton80', N'1', N'BRUOdumXveI9Vv8Kb3aMqg==', N'Button', 9, N'rTabSetup', N'rpCustomer', N'ribbonButton80', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (14, N'110140', N'Setup/BankVehicle', N'rpBankVehicle', N'1', N'XpLm5quTHooCvmSQBjIANg==', N'Panel', 6, N'rTabSetup', N'rpBankVehicle', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (15, N'110140110', N'Setup/BankVehicle/Bank', N'ribbonButton14', N'1', N'5PIz6jcia9o3XezAMTjtSA==', N'Button', 9, N'rTabSetup', N'rpBankVehicle', N'ribbonButton14', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (16, N'110140120', N'Setup/BankVehicle/Vehicle', N'rbtnVehicle', N'1', N'D5djpihaBP51me6H+V8Nbg==', N'Button', 9, N'rTabSetup', N'rpBankVehicle', N'rbtnVehicle', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (17, N'110150', N'Setup/PriceDeclaration', N'rpPriceDeclaration', N'1', N'A6d4YaouECUlsH05Vdncbg==', N'Panel', 6, N'rTabSetup', N'rpPriceDeclaration', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (18, N'110150110', N'Setup/PriceDeclaration/BOM', N'ribbonButton17', N'1', N'4n8ALrqOFwQhVEaJ/Kxf5Q==', N'Button', 9, N'rTabSetup', N'rpPriceDeclaration', N'ribbonButton17', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (19, N'110150120', N'Setup/PriceDeclaration/Service', N'ribbonButton96', N'1', N'nd8tx3oGgyRshfn2wFsYeg==', N'Button', 9, N'rTabSetup', N'rpPriceDeclaration', N'ribbonButton96', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (20, N'110150130', N'Setup/PriceDeclaration/Tender', N'ribbonButton89', N'1', N'4PXk75GDvVBJ54e3MtUoyA==', N'Button', 9, N'rTabSetup', N'rpPriceDeclaration', N'ribbonButton89', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (21, N'110160', N'Setup/Company', N'rpCompany', N'1', N'hvL1yIIuen+QVF0QfbCDiQ==', N'Panel', 6, N'rTabSetup', N'rpCompany', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (22, N'110160110', N'Setup/Company/CommpanyProfile', N'ribbonButton18', N'1', N'j1GkdAIkOBcpMilTuniA8g==', N'Button', 9, N'rTabSetup', N'rpCompany', N'ribbonButton18', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (23, N'110160120', N'Setup/Company/BranchProfile', N'rbtnBranchTransfer', N'1', N'mK8RMts2up+q+KdGruyolQ==', N'Button', 9, N'rTabSetup', N'rpCompany', N'rbtnBranchTransfer', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (24, N'110170', N'Setup/FiscalYear', N'rpFiscalYear', N'1', N'tjlr3aNtCAv5f2Bvpuyswg==', N'Panel', 6, N'rTabSetup', N'rpFiscalYear', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (25, N'110170110', N'Setup/FiscalYear/FiscalYear', N'ribbonButton75', N'1', N'IrhOuTwPDyM0X1Sxv4xWpw==', N'Button', 9, N'rTabSetup', N'rpFiscalYear', N'ribbonButton75', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (26, N'110180', N'Setup/Configuration', N'rpConfiguration', N'1', N'HcwjdUOQ6SuY1KPew9sKGg==', N'Panel', 6, N'rTabSetup', N'rpConfiguration', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (27, N'110180110', N'Setup/Configuration/Settings', N'rbtnSettings', N'1', N'EC+4cor6Iys0DEOAngXbYg==', N'Button', 9, N'rTabSetup', N'rpConfiguration', N'rbtnSettings', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (28, N'110180120', N'Setup/Configuration/Prefix', N'ribbonButton47', N'1', N'RvyoBUo+igA1nPrFG5HK5w==', N'Button', 9, N'rTabSetup', N'rpConfiguration', N'ribbonButton47', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (29, N'110180130', N'Setup/Configuration/Shift', N'rbtnShift', N'1', N'hHu0S8m+9n85Zvb2IYTHCw==', N'Button', 9, N'rTabSetup', N'rpConfiguration', N'rbtnShift', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (30, N'110190', N'Setup/ImportSync', N'rpImportSync', N'1', N'S6DCf3+ASffKd1wc0KzHcw==', N'Panel', 6, N'rTabSetup', N'rpImportSync', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (31, N'110190110', N'Setup/ImportSync/Import', N'ribbonButton46', N'1', N'G8/bO9JI360p6d4NMUu8lA==', N'Button', 9, N'rTabSetup', N'rpImportSync', N'ribbonButton46', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (32, N'110190120', N'Setup/ImportSync/Sync', N'ribbonButton35', N'1', N'7KtQzDU3R+AotV7eIrwszw==', N'Button', 9, N'rTabSetup', N'rpImportSync', N'ribbonButton35', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (33, N'110190130', N'Setup/ImportSync/Update/Delete query', N'rbtnExecute', N'1', N'KzHfm/ontlWKWLdBfCEnxw==', N'Button', 9, N'rTabSetup', N'rpImportSync', N'rbtnExecute', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (34, N'110200', N'Setup/Measurment', N'rpMeasurement', N'1', N'YGo+zvqkJT9EJbfwFWdW0Q==', N'Panel', 6, N'rTabSetup', N'rpMeasurement', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (35, N'110200110', N'Setup/Measurment/Name', N'ribbonButton16', N'1', N'Dww2usM9AdjF6jH97ejlxA==', N'Button', 9, N'rTabSetup', N'rpMeasurement', N'ribbonButton16', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (36, N'110200120', N'Setup/Measurment/Conversion', N'ribbonButton65', N'1', N'6e6IZ30lBmi5wjgw3G3DnQ==', N'Button', 9, N'rTabSetup', N'rpMeasurement', N'ribbonButton65', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (37, N'110210', N'Setup/Currency', N'rpCurrency', N'1', N'vUQq4ZgZUe9/pqxRAXlS4Q==', N'Panel', 6, N'rTabSetup', N'rpCurrency', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (38, N'110210110', N'Setup/Currency/Currency', N'ribbonButton98', N'1', N'R95QeG0s34MPX79lVdV4WA==', N'Button', 9, N'rTabSetup', N'rpCurrency', N'ribbonButton98', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (39, N'110210120', N'Setup/Currency/Conversion', N'ribbonButton120', N'1', N'srXR7VgEtiJiDIw5h4zujg==', N'Button', 9, N'rTabSetup', N'rpCurrency', N'ribbonButton120', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (40, N'110220', N'Setup/Banderol', N'rpBanderol', N'0', N'aYoDS3TkmbaDXlIFmzsTSw==', N'Panel', 6, N'rTabSetup', N'rpBanderol', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (41, N'110220110', N'Setup/Banderol/Banderol', N'ribBtnBanderol', N'0', N'HZc75p7V6LmTvXAhZlDkcQ==', N'Button', 9, N'rTabSetup', N'rpBanderol', N'ribBtnBanderol', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (42, N'110220120', N'Setup/Banderol/Packaging', N'ribBtnPackage', N'0', N'dJWhpN4HcqEbAhqn/A60aQ==', N'Button', 9, N'rTabSetup', N'rpBanderol', N'ribBtnPackage', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (43, N'110220130', N'Setup/Banderol/Product', N'rbnBtnProduct', N'0', N'uGDMthxVoRTSOj2q7exDnw==', N'Button', 9, N'rTabSetup', N'rpBanderol', N'rbnBtnProduct', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (44, N'120', N'Purchase', N'rTabPurchase', N'1', N'IFiVJVdgVHk=', N'Tab', 3, N'rTabPurchase', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (45, N'120110', N'Purchase/Purchase', N'rpPurchase', N'1', N'KZ4NQRlP+QFJi2n2ZTj9gw==', N'Panel', 6, N'rTabPurchase', N'rpPurchase', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (46, N'120110110', N'Purchase/Purchase/Local', N'ribbonButton68', N'1', N'p+Wc/fnvfs6WlGmJG2lVQQ==', N'Button', 9, N'rTabPurchase', N'rpPurchase', N'ribbonButton68', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (47, N'120110120', N'Purchase/Purchase/Import', N'rbtnImport', N'1', N'r9TFW2m8RwyKOSj+UqGiEQ==', N'Button', 9, N'rTabPurchase', N'rpPurchase', N'rbtnImport', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (48, N'120110130', N'Purchase/Purchase/InputService', N'rbtnInputService', N'1', N'5HlT7bXxf9Anhbd6v/HKwA==', N'Button', 9, N'rTabPurchase', N'rpPurchase', N'rbtnInputService', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (49, N'120110140', N'Purchase/Purchase/PurchaseReturn', N'ribbonButton50', N'1', N'dl/RuTL+qT+0/4uR6X3F3A==', N'Button', 9, N'rTabPurchase', N'rpPurchase', N'ribbonButton50', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (50, N'120110150', N'Purchase/Purchase/Service Stock', N'ribbonButton53', N'1', N'prmxTLNOnwwdksV7T6O/Tw==', N'Button', 9, N'rTabPurchase', N'rpPurchase', N'ribbonButton53', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (51, N'120110160', N'Purchase/Purchase/Service Non Stock', N'ribbonButton64', N'1', N'5sf2my4bmnh0V9TAfCiC7w==', N'Button', 9, N'rTabPurchase', N'rpPurchase', N'ribbonButton64', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (52, N'130', N'Production', N'rTabProduction', N'1', N'SKyJOMPJNTM=', N'Tab', 3, N'rTabProduction', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (53, N'130110', N'Production/Issue', N'rpIssue', N'1', N'4cqpjylke1OSlpmpBkxNgA==', N'Panel', 6, N'rTabProduction', N'rpIssue', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (54, N'130110110', N'Production/Issue/Issue', N'ribbonButton130', N'1', N'oPuX7ZR7A/9eRuThFbcNXw==', N'Button', 9, N'rTabProduction', N'rpIssue', N'ribbonButton130', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (55, N'130110120', N'Production/Issue/Return', N'ribbonButton131', N'1', N'Wdy3QaY4mWsxn4q4xs+FXg==', N'Button', 9, N'rTabProduction', N'rpIssue', N'ribbonButton131', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (56, N'130110130', N'Production/Issue/Issue WithOut BOM', N'rbtnIssueWOBom', N'1', N'VHufu575mjYcZ7QxpMz6NQ==', N'Button', 9, N'rTabProduction', N'rpIssue', N'rbtnIssueWOBom', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (57, N'130110140', N'Production/Issue/Wastage', N'rbtnWastageIssue', N'1', N'KoL5YDECaJmUGQ0rrBC8rQ==', N'Button', 9, N'rTabProduction', N'rpIssue', N'rbtnWastageIssue', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (58, N'130110150', N'Production/Issue/Transfer', N'ribBtnTransfer', N'1', N'XByXiDSM6KlSRIO4mJllSA==', N'Button', 9, N'rTabProduction', N'rpIssue', N'ribBtnTransfer', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (59, N'130120', N'Production/Receive', N'rpReceive', N'1', N'BVGUQDSBTUfZrZeH5s2Nyg==', N'Panel', 6, N'rTabProduction', N'rpReceive', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (60, N'130120110', N'Production/Receive/WIP', N'ribbonButton133', N'1', N'+XGjiZrVX65AacnK/gc1jQ==', N'Button', 9, N'rTabProduction', N'rpReceive', N'ribbonButton133', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (61, N'130120120', N'Production/Receive/FGReceive', N'ribbonButton135', N'1', N'818iP6dlw39EyIm6wbNEPQ==', N'Button', 9, N'rTabProduction', N'rpReceive', N'ribbonButton135', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (62, N'130120130', N'Production/Receive/Return', N'ribbonButton132', N'1', N'rAbp5cUoQM5mqHxQfbNpSQ==', N'Button', 9, N'rTabProduction', N'rpReceive', N'ribbonButton132', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (63, N'130120140', N'Production/Receive/Package', N'ribbonBtnpackage', N'1', N'OSWshlKUEA3rNgzlXVPZTw==', N'Button', 9, N'rTabProduction', N'rpReceive', N'ribbonBtnpackage', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (64, N'140', N'Sale', N'rTabSale', N'1', N'+gLobR/Ob7w=', N'Tab', 3, N'rTabSale', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (65, N'140110', N'Sale/Sale', N'rpSale', N'1', N'5I1Cq1qSfo2N8xgDvInPHw==', N'Panel', 6, N'rTabSale', N'rpSale', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (66, N'140110110', N'Sale/Sale/Local', N'ribbonButton134', N'1', N'ewwYaOW7Svq2LF7K8iqgDQ==', N'Button', 9, N'rTabSale', N'rpSale', N'ribbonButton134', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (67, N'140110120', N'Sale/Sale/Export', N'ribbonButton138', N'1', N'9gV4VHKtVm246yC+8xyeLw==', N'Button', 9, N'rTabSale', N'rpSale', N'ribbonButton138', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (68, N'140110130', N'Sale/Sale/Tender', N'ribbonButton139', N'1', N'uRW48PGjrM8XvSsoMaB2Ag==', N'Button', 9, N'rTabSale', N'rpSale', N'ribbonButton139', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (69, N'140110140', N'Sale/Sale/Trading', N'rbnTenderTrading', N'1', N'KEd95grrvH+RGPIUvJeX9w==', N'Button', 9, N'rTabSale', N'rpSale', N'rbnTenderTrading', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (70, N'140110150', N'Sale/Sale/Service Stock', N'ribbonButton136', N'1', N'rsskOQkadeHvDlM1M2Tz9g==', N'Button', 9, N'rTabSale', N'rpSale', N'ribbonButton136', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (71, N'140110160', N'Sale/Sale/Service Non Stock', N'ribbonButton19', N'1', N'sh8L5H+zjEymaBqXN7c5yw==', N'Button', 9, N'rTabSale', N'rpSale', N'ribbonButton19', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (72, N'140110170', N'Sale/Sale/RawSale', N'rbtnRawSale', N'1', N'L5DG2UM6ZqlSZ75D9aTMfg==', N'Button', 9, N'rTabSale', N'rpSale', N'rbtnRawSale', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (73, N'140110180', N'Sale/Sale/Wastage', N'rbtnWastageSale', N'1', N'9El+L1Sqqt5MKngfL6SeHQ==', N'Button', 9, N'rTabSale', N'rpSale', N'rbtnWastageSale', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (74, N'140120', N'Sale/package', N'rpPackage', N'1', N'WIOPMZIKquRrCuW6mVxlyg==', N'Panel', 6, N'rTabSale', N'rpPackage', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (75, N'140120110', N'Sale/package/package', N'ribbonButton23', N'1', N'50u57WTn6anaRxWQl/a/EA==', N'Button', 9, N'rTabSale', N'rpPackage', N'ribbonButton23', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (76, N'140130', N'Sale/Transfer  IssueRecieve', N'rpTReceive', N'1', N'vbzH9ST6YctkJTyE3PKXOw==', N'Panel', 6, N'rTabSale', N'rpTReceive', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (77, N'140130110', N'Sale/Transfer  IssueRecieve/RM In', N'rbtn61In', N'1', N'Ra/xxJFyZEJKuMs2hr+qtg==', N'Button', 9, N'rTabSale', N'rpTReceive', N'rbtn61In', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (78, N'140130120', N'Sale/Transfer  IssueRecieve/FG In', N'rbtn62In', N'1', N'4w+i1oZjFbLL/2rLWhQrog==', N'Button', 9, N'rTabSale', N'rpTReceive', N'rbtn62In', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (79, N'140130130', N'Sale/Transfer IssueRecieve/RM  Out', N'rbtn61Out1', N'1', N'4WEbudSocKnpXfpAUNrpBg==', N'Button', 9, N'rTabSale', N'rpTReceive', N'rbtn61Out1', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (80, N'140130140', N'Sale/Transfer IssueRecieve/FG Out', N'rbtn62Out1', N'1', N'z4883CUeI3tZNmBKmzKypw==', N'Button', 9, N'rTabSale', N'rpTReceive', N'rbtn62Out1', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (81, N'140140', N'Sale/EXP', N'rpExp', N'1', N'TzHxQtqfYnallkSRx8TyBA==', N'Panel', 6, N'rTabSale', N'rpExp', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (82, N'140140110', N'Sale/EXP/EXP', N'ribbonButton15', N'1', N'WERtXl3SnwuhgI6AVRkxcg==', N'Button', 9, N'rTabSale', N'rpExp', N'ribbonButton15', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (83, N'150', N'Deposit', N'rTabDeposit', N'1', N'AYXvLiKmfRY=', N'Tab', 3, N'rTabDeposit', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (84, N'150110', N'Deposit/Treasury', N'rpDeposit', N'1', N'xV6CFU5FbPlWgMfBbX5x0Q==', N'Panel', 6, N'rTabDeposit', N'rpDeposit', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (85, N'150110110', N'Deposit/Treasury/Treasury', N'ribbonButton140', N'1', N'xQWxdMxy7WNiFoJxdzSX3A==', N'Button', 9, N'rTabDeposit', N'rpDeposit', N'ribbonButton140', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (86, N'150120', N'Deposit/VDS', N'rpVDS', N'1', N'msgxArPF38UWE+xhP1jJMA==', N'Panel', 6, N'rTabDeposit', N'rpVDS', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (87, N'150120110', N'Deposit/VDS/Purchage', N'ribbonButton141', N'1', N'uDoWnjKRXSbNGHNvVnq6dw==', N'Button', 9, N'rTabDeposit', N'rpVDS', N'ribbonButton141', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (88, N'150120120', N'Deposit/VDS/Sale', N'rbtnSaleVDS', N'1', N'n55XIflLe0xv1oe+NjXlcA==', N'Button', 9, N'rTabDeposit', N'rpVDS', N'rbtnSaleVDS', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (89, N'150130', N'Deposit/SD', N'rpSD', N'1', N'pZSSGL6mOz8NJO5c9Nyt8g==', N'Panel', 6, N'rTabDeposit', N'rpSD', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (90, N'150130110', N'Deposit/SD/SD', N'ribbonButton143', N'1', N'F4r5z5z0ZzNvk85E6SgGoQ==', N'Button', 9, N'rTabDeposit', N'rpSD', N'ribbonButton143', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (91, N'150140', N'Deposit/CashPayble', N'rpCashPayble', N'1', N'N5y5wnPaoTgrySl1wNJy5Q==', N'Panel', 6, N'rTabDeposit', N'rpCashPayble', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (92, N'150140110', N'Deposit/CashPayble/CashPayble', N'rbtnCashPayble', N'1', N'TV1nzjMefVWWG5KylBj8XQ==', N'Button', 9, N'rTabDeposit', N'rpCashPayble', N'rbtnCashPayble', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (93, N'150150', N'Deposit/Reverse', N'rpReverse', N'1', N'N8e72DKXMDzXf1t57/uGtg==', N'Panel', 6, N'rTabDeposit', N'rpReverse', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (94, N'150150110', N'Deposit/Reverse/Reverse', N'ribBtnReverse', N'1', N'wAPpRusUbb+putnO8KSuHA==', N'Button', 9, N'rTabDeposit', N'rpReverse', N'ribBtnReverse', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (95, N'150160', N'Deposit/TDS', N'rpTDS', N'0', N'ajROjgiTky7Nl6twTQlQLg==', N'Panel', 6, N'rTabDeposit', N'rpTDS', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (96, N'150160110', N'Deposit/TDS/TDS', N'rbtnTDS', N'0', N'cAwWLZ/t7kHzys7PbLnZ6w==', N'Button', 9, N'rTabDeposit', N'rpTDS', N'rbtnTDS', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (97, N'160', N'Toll', N'rTabToll', N'1', N'WSMUMkokCeI=', N'Tab', 3, N'rTabToll', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (98, N'160110', N'Toll/Client', N'rpClient', N'1', N'oLOUf5DmbdTuwYha0hAcKA==', N'Panel', 6, N'rTabToll', N'rpClient', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (99, N'160110110', N'Toll/Client/Issue 6.4', N'ribbonButton94', N'1', N'vvBvMMzh0R4Dv839wPYc9w==', N'Button', 9, N'rTabToll', N'rpClient', N'ribbonButton94', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (100, N'160110120', N'Toll/Client/FGReceive', N'ribbonButton95', N'1', N'2Bk1n8/GnxGVWmehjM0bRQ==', N'Button', 9, N'rTabToll', N'rpClient', N'ribbonButton95', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (101, N'160110130', N'Toll/Client/VAT11GAGA', N'ribbonButton145', N'1', N'qdINTSEWt6WXBI5nPV8/4g==', N'Button', 9, N'rTabToll', N'rpClient', N'ribbonButton145', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (102, N'160120', N'Toll/Contractor', N'rpContractor', N'1', N'RT+Qq4J6NspHoBUPUUDgXw==', N'Panel', 6, N'rTabToll', N'rpContractor', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (103, N'160120110', N'Toll/Contractor/RawReceive', N'ribbonButton116', N'1', N'15V+l0gVIWVMDaVzBzKZ7A==', N'Button', 9, N'rTabToll', N'rpContractor', N'ribbonButton116', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (104, N'160120120', N'Toll/Contractor/FGProduction', N'ribbonButton117', N'1', N'Uy6ZN4H6WjTeP8CVWLwZIA==', N'Button', 9, N'rTabToll', N'rpContractor', N'ribbonButton117', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (105, N'160120130', N'Toll/Contractor/FGIssue', N'ribbonButton118', N'1', N'gD4RlkJifS2WtWkRyEvIwA==', N'Button', 9, N'rTabToll', N'rpContractor', N'ribbonButton118', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (106, N'160120140', N'Toll/Contractor/Toll 6.3', N'rbtnToll6_3', N'1', N'1HUJ6kZD7ztyiTsTHVApbg==', N'Button', 9, N'rTabToll', N'rpContractor', N'rbtnToll6_3', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (107, N'160130', N'Toll/Toll Register', N'rpTollRegister', N'1', N'w6Waj7QBB5E4HwsJhKQn6A==', N'Panel', 6, N'rTabToll', N'rpTollRegister', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (108, N'160130110', N'Toll/Toll Register/Toll 6.1', N'rbtnToll6_1', N'1', N'u7Dgq9GiiygFMnSGiJkg8Q==', N'Button', 9, N'rTabToll', N'rpTollRegister', N'rbtnToll6_1', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (109, N'160130120', N'Toll/Toll Register/Toll 6.2', N'rbtnToll6_2', N'1', N'cCCC8uDnYwBICv7gNXFnYg==', N'Button', 9, N'rTabToll', N'rpTollRegister', N'rbtnToll6_2', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (110, N'170', N'Adjustment', N'rTabAdjustment', N'1', N'ZpelHmGbKLo=', N'Tab', 3, N'rTabAdjustment', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (111, N'170110', N'Adjustment/AdjustmentHead', N'rpOtherAdjustment', N'1', N'5f7OqmGghwlFA5gzmKOg+w==', N'Panel', 6, N'rTabAdjustment', N'rpOtherAdjustment', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (112, N'170110110', N'Adjustment/AdjustmentHead/Head', N'ribbonButton78', N'1', N'p3kQPg0OAcrZghDO2alcsg==', N'Button', 9, N'rTabAdjustment', N'rpOtherAdjustment', N'ribbonButton78', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (113, N'170110120', N'Adjustment/AdjustmentHead/Transaction', N'ribbonButton129', N'1', N'gUxx53wzGszVMHrIinlZjQ==', N'Button', 9, N'rTabAdjustment', N'rpOtherAdjustment', N'ribbonButton129', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (114, N'170120', N'Adjustment/Purchase', N'rpnPurchase', N'1', N'VB3NtkhmLu9j8R4wCtq5yQ==', N'Panel', 6, N'rTabAdjustment', N'rpnPurchase', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (115, N'170120110', N'Adjustment/Purchase/DN', N'ribbonButton122', N'1', N'vMzt/LwS47sZvSAk43V44A==', N'Button', 9, N'rTabAdjustment', N'rpnPurchase', N'ribbonButton122', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (116, N'170120120', N'Adjustment/Purchase/CN', N'ribbonButton123', N'1', N'WiQ1GOi2PXtZgxPazvfIwQ==', N'Button', 9, N'rTabAdjustment', N'rpnPurchase', N'ribbonButton123', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (117, N'170130', N'Adjustment/Sale', N'rplSale', N'1', N'tgwiz+jHYcPPvJFVG0IFQw==', N'Panel', 6, N'rTabAdjustment', N'rplSale', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (118, N'170130110', N'Adjustment/Sale/CN', N'ribbonButton124', N'1', N'n9A2hrajFSPBdmKpMd8alA==', N'Button', 9, N'rTabAdjustment', N'rplSale', N'ribbonButton124', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (119, N'170130120', N'Adjustment/Sale/DN', N'ribbonButton125', N'1', N'mA9MUoMS1aQ/V82m2L/bkA==', N'Button', 9, N'rTabAdjustment', N'rplSale', N'ribbonButton125', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (120, N'170140', N'Adjustment/Dispose', N'rpDispose', N'0', N'G/tcVZInBS3sbavZZEhlTw==', N'Panel', 6, N'rTabAdjustment', N'rpDispose', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (121, N'170140110', N'Adjustment/Dispose/26', N'ribbonButton51', N'0', N'8AyX/Ja3/C+Q0rzTkORJZQ==', N'Button', 9, N'rTabAdjustment', N'rpDispose', N'ribbonButton51', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (122, N'170140120', N'Adjustment/Dispose/27', N'ribbonButton52', N'0', N'EMoQnZpih6ncw05eW/Sjnw==', N'Button', 9, N'rTabAdjustment', N'rpDispose', N'ribbonButton52', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (123, N'170150', N'Adjustment/DDB', N'rpDrawBack', N'1', N'15jzQQrb4s4ZUupKQxgdiQ==', N'Panel', 6, N'rTabAdjustment', N'rpDrawBack', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (124, N'170150110', N'Adjustment/DDB/DDB', N'ribbonButton40', N'1', N'2G2xcclE1nWt7kRdImx+Lw==', N'Button', 9, N'rTabAdjustment', N'rpDrawBack', N'ribbonButton40', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (125, N'170160', N'Adjustment/VAT & SD Adjutment', N'rpVATAdjustment', N'1', N'77VoOJErHvpwM2nTE23z7w==', N'Panel', 6, N'rTabAdjustment', N'rpVATAdjustment', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (126, N'170160110', N'Adjustment/VAT & SD Adjutment/VAT', N'rbtnVATAdjustment', N'1', N'km9xivlQVyQWVgjk7SSSpg==', N'Button', 9, N'rTabAdjustment', N'rpVATAdjustment', N'rbtnVATAdjustment', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (127, N'170160120', N'Adjustment/VAT & SD Adjutment/SD', N'rbtnSDAdjustment', N'1', N'd+dtT+eHCbc3WoHLgy43Xw==', N'Button', 9, N'rTabAdjustment', N'rpVATAdjustment', N'rbtnSDAdjustment', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (128, N'180', N'NBRReport', N'rTabNBRReport', N'1', N'aXrcr+om/mQ=', N'Tab', 3, N'rTabNBRReport', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (129, N'180110', N'NBRReport/VAT4.3', N'rp43', N'1', N'oGz9wLiEiZP8s7/dKm7HFQ==', N'Panel', 6, N'rTabNBRReport', N'rp43', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (130, N'180110110', N'NBRReport/VAT4.3/VAT4.3', N'ribbonButton49', N'1', N'AY+f62ffFT7PKp1SDQME4g==', N'Button', 9, N'rTabNBRReport', N'rp43', N'ribbonButton49', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (131, N'180120', N'NBRReport/VAT 6.1', N'rp61', N'1', N'd9AhOb8shnaChPEirL5/lA==', N'Panel', 6, N'rTabNBRReport', N'rp61', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (132, N'180120110', N'NBRReport/VAT 6.1/VAT 6.1', N'ribbonButton48', N'1', N'JyqHXL1YVKR9I3LVcHKFag==', N'Button', 9, N'rTabNBRReport', N'rp61', N'ribbonButton48', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (133, N'180130', N'NBRReport/VAT 6.2', N'rp62', N'1', N'e5J41Z+rtshBDjhUgRQyMA==', N'Panel', 6, N'rTabNBRReport', N'rp62', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (134, N'180130110', N'NBRReport/VAT 6.2/VAT 6.2', N'ribbonButton45', N'1', N'iaMYtr4HDjFZT5bLdDLlQg==', N'Button', 9, N'rTabNBRReport', N'rp62', N'ribbonButton45', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (135, N'180140', N'NBRReport/VAT 9.1', N'rp91', N'1', N'3nTN89bt5MnsJNCMiiT9Ew==', N'Panel', 6, N'rTabNBRReport', N'rp91', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (136, N'180140110', N'NBRReport/VAT 9.1/VAT 9.1', N'ribbonButton43', N'1', N'5CgNvEuSC4RE0sM+UpqKvw==', N'Button', 9, N'rTabNBRReport', N'rp91', N'ribbonButton43', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (137, N'180150', N'NBRReport/VAT 6.10', N'rp610', N'1', N'hAEf35dJFWM1ZpUHdZBEEw==', N'Panel', 6, N'rTabNBRReport', N'rp610', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (138, N'180150110', N'NBRReport/VAT 6.10/VAT 6.10', N'rbtn6_10', N'1', N'7qAS8FcpsS0ghxHRQ0GJpA==', N'Button', 9, N'rTabNBRReport', N'rp610', N'rbtn6_10', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (139, N'180160', N'NBRReport/SDReport', N'rpSDReport', N'1', N'8BNn4BB63XfJKh8ki4QdKA==', N'Panel', 6, N'rTabNBRReport', N'rpSDReport', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (140, N'180160110', N'NBRReport/SDReport/SDReport', N'ribbonButton9', N'1', N'v5lS3VAWCLPTiKtABpxNrw==', N'Button', 9, N'rTabNBRReport', N'rpSDReport', N'ribbonButton9', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (141, N'180170', N'NBRReport/VAT 6.3', N'rp63', N'1', N'8+Y+HVY9S5d5c4ClivFoMw==', N'Panel', 6, N'rTabNBRReport', N'rp63', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (142, N'180170110', N'NBRReport/VAT 6.3/VAT 6.3', N'ribBtnVAT11', N'1', N'2V05hH9AObQwF+6XrUELrQ==', N'Button', 9, N'rTabNBRReport', N'rp63', N'ribBtnVAT11', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (143, N'180180', N'NBRReport/VAT 6.5', N'rp65', N'1', N'vRJhKLanexcwymd7/8ZTWg==', N'Panel', 6, N'rTabNBRReport', N'rp65', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (144, N'180180110', N'NBRReport/VAT 6.5/VAT 6.5', N'rbtn65', N'1', N'F4ZxDS9s3hrJx1oST9hDOg==', N'Button', 9, N'rTabNBRReport', N'rp65', N'rbtn65', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (145, N'180190', N'NBRReport/VAT 7', N'rp7', N'0', N'XyfE14bs6Zb4LPbDNs9sEw==', N'Panel', 6, N'rTabNBRReport', N'rp7', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (146, N'180190110', N'NBRReport/VAT 7/VAT 7', N'ribBtnVAT7', N'1', N'fopIvHS/bTvni21SykIS9A==', N'Button', 9, N'rTabNBRReport', N'rp7', N'ribBtnVAT7', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (147, N'180200', N'NBRReport/VAT 20', N'rp20', N'0', N'SQgPclHAqgIZYYIvp2nnpQ==', N'Panel', 6, N'rTabNBRReport', N'rp20', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (148, N'180200110', N'NBRReport/VAT 20/VAT 20', N'ribbonButton26', N'1', N'WOGORDgc7kDePypSJYKOIA==', N'Button', 9, N'rTabNBRReport', N'rp20', N'ribbonButton26', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (149, N'180210', N'NBRReport/Banderol', N'rpBandRoll', N'0', N'1Fi/FdzklXPGh5xVa5+MLw==', N'Panel', 6, N'rTabNBRReport', N'rpBandRoll', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (150, N'180210110', N'NBRReport/Banderol/Form 4', N'ribBtnForm4', N'1', N'7MeFnHgSqhNQkC6wYaV8aw==', N'Button', 9, N'rTabNBRReport', N'rpBandRoll', N'ribBtnForm4', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (151, N'180210120', N'NBRReport/Banderol/Form 5', N'rbtnRecForm5', N'1', N'8G96W1/vZIExL331nlLzoQ==', N'Button', 9, N'rTabNBRReport', N'rpBandRoll', N'rbtnRecForm5', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (152, N'180220', N'NBRReport/Summery-Current Account', N'rpSumCurAcc', N'0', N'kXSyM/Cc3L9341vIkFkhaA==', N'Panel', 6, N'rTabNBRReport', N'rpSumCurAcc', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (153, N'180220110', N'NBRReport/Summery-Current Account/Summery-Current Account', N'ribbonButtonCVAT18', N'1', N'59itlHIJuYGoGojbh9YOKA==', N'Button', 9, N'rTabNBRReport', N'rpSumCurAcc', N'ribbonButtonCVAT18', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (154, N'180220120', N'NBRReport/Summery-Current Account/Breakdwon-Current Account', N'rbtnBrakDown', N'1', N'YBMVlGsjuTfNfVzkf94JMg==', N'Button', 9, N'rTabNBRReport', N'rpSumCurAcc', N'rbtnBrakDown', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (155, N'180230', N'NBRReport/Chak', N'rpKaKha', N'1', N'devnSDmj0blWuKhRjUxhRA==', N'Panel', 6, N'rTabNBRReport', N'rpKaKha', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (156, N'180230110', N'NBRReport/Chak/Chak Ka', N'ribbonButtonChakKa', N'1', N'kkrI11YutrvIPDg2rIcz3w==', N'Button', 9, N'rTabNBRReport', N'rpKaKha', N'ribbonButtonChakKa', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (157, N'180230120', N'NBRReport/Chak/Chak kha', N'ribbonButtonChakKha', N'1', N'Gm5wFuVDVbomB/Cc4+N/FQ==', N'Button', 9, N'rTabNBRReport', N'rpKaKha', N'ribbonButtonChakKha', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (158, N'190', N'MISReport', N'rTabMISReport', N'1', N'fJRLa/oU/0c=', N'Tab', 3, N'rTabMISReport', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (159, N'190110', N'MISReport/Purchase', N'rbpPurchase', N'1', N'I5GOx2Yoa1SUW4FcXqpMQw==', N'Panel', 6, N'rTabMISReport', N'rbpPurchase', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (160, N'190110110', N'MISReport/Purchase/Purchase', N'ribbonButton57', N'1', N'aV8ytmfDXy4VGnX7OXAa9Q==', N'Button', 9, N'rTabMISReport', N'rbpPurchase', N'ribbonButton57', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (161, N'190120', N'MISReport/Production', N'rbpProduction', N'1', N'gi2w0Umb+Rhm3Vds1OGOtw==', N'Panel', 6, N'rTabMISReport', N'rbpProduction', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (162, N'190120110', N'MISReport/Production/Issue', N'ribbonButton56', N'1', N'riefdnszTMdFrC9xAQ2CTQ==', N'Button', 9, N'rTabMISReport', N'rbpProduction', N'ribbonButton56', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (163, N'190120120', N'MISReport/Production/Receive', N'ribbonButton92', N'1', N'7nliQSq0Ee7Ncz1HOkhLpw==', N'Button', 9, N'rTabMISReport', N'rbpProduction', N'ribbonButton92', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (164, N'190130', N'MISReport/Sale', N'rbpSale', N'1', N'1W0qoo4RwUGWYuXr1IaX3Q==', N'Panel', 6, N'rTabMISReport', N'rbpSale', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (165, N'190130110', N'MISReport/Sale/Sale', N'ribbonButton60', N'1', N'FeM1adm4VK6It9ZIJQ37ow==', N'Button', 9, N'rTabMISReport', N'rbpSale', N'ribbonButton60', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (166, N'190140', N'MISReport/Stock', N'rpStock', N'1', N'o5vIbP6ieT7cUOb3+exE9Q==', N'Panel', 6, N'rTabMISReport', N'rpStock', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (167, N'190140110', N'MISReport/Stock/Stock', N'ribbonButton87', N'1', N'5Kvq4AbF8nukOitMAhoNlQ==', N'Button', 9, N'rTabMISReport', N'rpStock', N'ribbonButton87', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (168, N'190140120', N'MISReport/Stock/Receive Sale', N'rbtnReceiveSale', N'1', N'+8B+OkyppvSuhmVLce3H/w==', N'Button', 9, N'rTabMISReport', N'rpStock', N'rbtnReceiveSale', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (169, N'190140130', N'MISReport/Stock/Reconsciliation', N'rbtnReconsciliation', N'1', N'AU0egEvMAnqoFuUe2n9Q0w==', N'Button', 9, N'rTabMISReport', N'rpStock', N'rbtnReconsciliation', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (170, N'190140140', N'MISReport/Stock/Branch Stock Movement', N'rbtnBranchStockMovement', N'1', N'x86FMl0UCz5k33zTpBJQXQ==', N'Button', 9, N'rTabMISReport', N'rpStock', N'rbtnBranchStockMovement', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (171, N'190150', N'MISReport/Deposit', N'rbpDeposit', N'1', N'jVvfcreXE+TEH6bDh+YePQ==', N'Panel', 6, N'rTabMISReport', N'rbpDeposit', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (172, N'190150110', N'MISReport/Deposit/Deposit', N'ribbonButton88', N'1', N'xq/ZqVIFusd8ZaD2wJIKiA==', N'Button', 9, N'rTabMISReport', N'rbpDeposit', N'ribbonButton88', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (173, N'190150120', N'MISReport/Deposit/Current Account', N'rbtnCurrentAccount', N'0', N'8HRNgiHyR7VekzwCFOw5qA==', N'Button', 9, N'rTabMISReport', N'rbpDeposit', N'rbtnCurrentAccount', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (174, N'190160', N'MISReport/Other', N'rpOthers', N'1', N'+Y2LLUWNe1ZW87lQIeUYdA==', N'Panel', 6, N'rTabMISReport', N'rpOthers', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (175, N'190160110', N'MISReport/Other/Adjustment', N'ribbonButton20', N'1', N'A7wx54ZcSuYJFVoEoQ6DoQ==', N'Button', 9, N'rTabMISReport', N'rpOthers', N'ribbonButton20', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (176, N'190160120', N'MISReport/Other/Co-Efficient', N'ribbonButtonCoEfficient', N'1', N'3C143qohDV9j83o8A41rBw==', N'Button', 9, N'rTabMISReport', N'rpOthers', N'ribbonButtonCoEfficient', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (177, N'190160130', N'MISReport/Other/Wastage', N'ribbonButtonWastage', N'1', N'oaoPs0YBz70Nnc95Ht1UQA==', N'Button', 9, N'rTabMISReport', N'rpOthers', N'ribbonButtonWastage', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (178, N'190160140', N'MISReport/Other/Value Change', N'ribbonButtonValueChange', N'1', N'HfeUi4kGfbz9M0cQ2loqDg==', N'Button', 9, N'rTabMISReport', N'rpOthers', N'ribbonButtonValueChange', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (179, N'190160150', N'MISReport/Other/Serial Stock', N'ribbonButtonSerStock', N'1', N'Ep1E+o4bgDjL+B6ULd9AdQ==', N'Button', 9, N'rTabMISReport', N'rpOthers', N'ribbonButtonSerStock', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (180, N'190160160', N'MISReport/Other/Purchage LC', N'ribbonButtonPurchaseLC', N'1', N'DZkzzbhZDw8yqKwwYbjK7g==', N'Button', 9, N'rTabMISReport', N'rpOthers', N'ribbonButtonPurchaseLC', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (181, N'190170', N'MISReport/Sale C/E', N'rpSaleCE', N'1', N'JHanP2K+QaYDvsDqbFJuCw==', N'Panel', 6, N'rTabMISReport', N'rpSaleCE', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (182, N'190170110', N'MISReport/Sale C/E/Sale C/E', N'ribbonButton27', N'1', N'TRYVH8KaBwYJPLWyBLsVkg==', N'Button', 9, N'rTabMISReport', N'rpSaleCE', N'ribbonButton27', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (183, N'190180', N'MISReport/Comparision Satement', N'rpMIS19', N'1', N'T3dqxU5vOrbSK0ZOnOa90A==', N'Panel', 6, N'rTabMISReport', N'rpMIS19', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (184, N'190180110', N'MISReport/Comparision Satement', N'rbtnMIS19', N'1', N'mvjIUA/u4aElEwdZy4OH7g==', N'Button', 9, N'rTabMISReport', N'rpMIS19', N'rbtnMIS19', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (185, N'200', N'UserAccount', N'rTabUserAccount', N'1', N'0FLpNLqK2po=', N'Tab', 3, N'rTabUserAccount', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (186, N'200110', N'UserAccount/NewAccount', N'rpNewAccount', N'1', N'KrxuVeNcznK44dRdoPrTRw==', N'Panel', 6, N'rTabUserAccount', N'rpNewAccount', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (187, N'200110110', N'UserAccount/NewAccount/NewAccount', N'ribbonButton63', N'1', N'KcbIBsaO+59IgN085c+QKQ==', N'Button', 9, N'rTabUserAccount', N'rpNewAccount', N'ribbonButton63', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (188, N'200120', N'UserAccount/PasswordChange', N'rpPasswordChange', N'1', N'DYZFSbkEic5QrljsVprZxw==', N'Panel', 6, N'rTabUserAccount', N'rpPasswordChange', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (189, N'200120110', N'UserAccount/PasswordChange/PasswordChange', N'ribbonButton62', N'1', N'UH+YKQlycIBxNpERqd8ohg==', N'Button', 9, N'rTabUserAccount', N'rpPasswordChange', N'ribbonButton62', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (190, N'200130', N'UserAccount/UserRole', N'rpUserRole', N'1', N'UlShmtxsH+grASimklyFjA==', N'Panel', 6, N'rTabUserAccount', N'rpUserRole', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (191, N'200130110', N'UserAccount/UserRole/UserRole', N'ribbonButton61', N'1', N'Rq7gZiP8sXsFm94p6cvMjQ==', N'Button', 9, N'rTabUserAccount', N'rpUserRole', N'ribbonButton61', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (192, N'200140', N'UserAccount/SettingsRole', N'rpSettingsRole', N'1', N'xQNcU79rzkyK4VxI/eeP/Q==', N'Panel', 6, N'rTabUserAccount', N'rpSettingsRole', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (193, N'200140110', N'UserAccount/SettingsRole/SettingsRole', N'ribBtnSettingRole', N'1', N'LZ4q/3jFJTWDbmetoxsR4Q==', N'Button', 9, N'rTabUserAccount', N'rpSettingsRole', N'ribBtnSettingRole', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (194, N'200150', N'UserAccount/Log Out', N'rpLout', N'1', N'Z/NG8A0wmt9P7YQSBInabw==', N'Panel', 6, N'rTabUserAccount', N'rpLout', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (195, N'200150110', N'UserAccount/Log Out/Log Out', N'ribbonButton7', N'1', N'I9CPejABG7glGEW7kg9Qxg==', N'Button', 9, N'rTabUserAccount', N'rpLout', N'ribbonButton7', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (196, N'200160', N'UserAccount/Log In', N'rpLogin', N'1', N'xWQzB6Smbwn7gK9W4BeZJg==', N'Panel', 6, N'rTabUserAccount', N'rpLogin', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (197, N'200160110', N'UserAccount/Log In/Log In', N'ribbonButton66', N'1', N'0Lk5fCnJCEyOY0oQXQxIFA==', N'Button', 9, N'rTabUserAccount', N'rpLogin', N'ribbonButton66', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (198, N'200170', N'UserAccount/Logs', N'rpLogs', N'1', N'LrpPJoQZNW4V/Doazt0iXg==', N'Panel', 6, N'rTabUserAccount', N'rpLogs', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (199, N'200170110', N'UserAccount/Logs/Logs', N'ribbonButton21', N'1', N'pO9CE+iVK5m2ATy9UnfsmQ==', N'Button', 9, N'rTabUserAccount', N'rpLogs', N'ribbonButton21', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (200, N'200180', N'UserAccount/Close All', N'rpCloseAll', N'1', N'e+Zl/y3iI8XGfpS9WaLO0g==', N'Panel', 6, N'rTabUserAccount', N'rpCloseAll', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (201, N'200180110', N'UserAccount/Close All/Close All', N'ribbonButton144', N'1', N'e1ETm43+psnqdmnTSD9zMQ==', N'Button', 9, N'rTabUserAccount', N'rpCloseAll', N'ribbonButton144', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (202, N'200190', N'UserAccount/User Branch', N'rpUserBranch', N'1', N'SWyp/VgcqpLRr/iPe7jUmQ==', N'Panel', 6, N'rTabUserAccount', N'rpUserBranch', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (203, N'200190110', N'UserAccount/User Branch/User Branch', N'ribbonButton36', N'1', N'FCm2tgQjHBBVD0PiQvYJ0A==', N'Button', 9, N'rTabUserAccount', N'rpUserBranch', N'ribbonButton36', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (204, N'200200', N'UserAccount/User Menu', N'rpnlUserMenu', N'1', N'B79/onxeVkWRybB/A82w+Q==', N'Panel', 6, N'rTabUserAccount', N'rpnlUserMenu', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (205, N'200200110', N'UserAccount/User Menu/All', N'rbtnMenuAll', N'1', N'0Sp2HJMO1R0CgwDqHZ3SMw==', N'Button', 9, N'rTabUserAccount', N'rpnlUserMenu', N'rbtnMenuAll', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (206, N'200200120', N'UserAccount/User Manu/User ', N'rbtnUserMenu', N'1', N'scHKIfuJVQX6hMqo7G037A==', N'Button', 9, N'rTabUserAccount', N'rpnlUserMenu', N'rbtnUserMenu', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (207, N'210', N'Banderol', N'rTabBanderol', N'0', N'7m3OliNu3U8=', N'Tab', 3, N'rTabBanderol', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (208, N'210110', N'Banderol/Demand', N'rpDemand', N'1', N'WkJcIG/fBbWK9gyOovGTmw==', N'Panel', 6, N'rTabBanderol', N'rpDemand', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (209, N'210110110', N'Banderol/Demand/Demand', N'ribBtnDemand', N'1', N'6kmtsH/4imDL//HaLe1x4A==', N'Button', 9, N'rTabBanderol', N'rpDemand', N'ribBtnDemand', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (210, N'210120', N'Banderol/Receive', N'rbpReceive', N'1', N'FET143Lar1Qn3lW56Od3Rg==', N'Panel', 6, N'rTabBanderol', N'rbpReceive', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (211, N'210120110', N'Banderol/Receive/Receive', N'rbnBtnBandReceive', N'1', N'yKFc6/tju7NbcLjbrN77zQ==', N'Button', 9, N'rTabBanderol', N'rbpReceive', N'rbnBtnBandReceive', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (212, N'220', N'SCBL', N'ribbonTabSCBL', N'0', N'aKuVzjghLLk=', N'Tab', 3, N'ribbonTabSCBL', N'NA', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (213, N'220110', N'SCBL/SCBLMIS', N'rpScbl', N'0', N'pT6uR1DVUjmtEHwUbADVUg==', N'Panel', 6, N'ribbonTabSCBL', N'rpScbl', N'NA', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (214, N'220110110', N'SCBL/SCBLMIS/Local Purchase', N'ribbonButtonLocalPurcchase', N'0', N'GZIS/64CHRPMDFnXN2AY4Q==', N'Button', 9, N'ribbonTabSCBL', N'rpScbl', N'ribbonButtonLocalPurcchase', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (215, N'220110120', N'SCBL/SCBLMIS/Local Sale', N'ribbonButtonLocalSales', N'0', N'm0GnNhS0zy/B5Bd5BXmicA==', N'Button', 9, N'ribbonTabSCBL', N'rpScbl', N'ribbonButtonLocalSales', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

INSERT [dbo].[UserMenuAllFinalRolls] ([LineID], [FormId], [FormName], [RibbonName], [Access], [AccessRoll], [AccessType], [Len], [TabName], [PanelName], [ButtonName], [LastModifiedBy], [LastModifiedOn]) VALUES (216, N'220110130', N'SCBL/SCBLMIS/Receive Sale', N'rbtnReceiveSales', N'0', N'XBC+zAmARC27amd+2zA7dg==', N'Button', 9, N'ribbonTabSCBL', N'rpScbl', N'rbtnReceiveSales', N'admin', CAST(N'2020-02-16T19:56:58.000' AS DateTime))

SET IDENTITY_INSERT [dbo].[UserMenuAllFinalRolls] OFF
";

                    transResult = NewTableAdd("UserMenuAllFinalRolls", UserMenuAllFinalRolls, currConn, transaction, connVM);
                    #endregion UserMenuAllFinalRolls

                }
                if (NewTableExistCheck("UserMenuRolls", currConn, transaction, connVM) == 0)
                {
                    #region UserMenuRolls
                    string UserMenuRolls = @"

CREATE TABLE [dbo].[UserMenuRolls](
	[LineID] [int] IDENTITY(1,1) NOT NULL,
	[FormID] [int] NOT NULL,
	[UserID] [varchar](20) NOT NULL,
	[FormName] [varchar](300) NOT NULL,
	[Access] [int] NOT NULL,
	[PostAccess] [int] NOT NULL,
	[AddAccess] [int] NOT NULL,
	[EditAccess] [int] NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
 CONSTRAINT [PK_UserMenuRolls] PRIMARY KEY CLUSTERED 
(
	[FormID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]


SET IDENTITY_INSERT [dbo].[UserMenuRolls] ON 

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (1, 110110110, N'10', N'Setup/ItemInformation/Group', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (2, 110110120, N'10', N'Setup/ItemInformation/Product', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (3, 110110130, N'10', N'Setup/ItemInformation/Overhead', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (4, 110110140, N'10', N'Setup/ItemInformation/TDS', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (5, 110110150, N'10', N'Setup/ItemInformation/HSCode', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (6, 110120110, N'10', N'Setup/Vedor/Group', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (7, 110120120, N'10', N'Setup/Vedor/Vendor', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (8, 110130110, N'10', N'Setup/Customer/Group', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (9, 110130120, N'10', N'Setup/Customer/Customer', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (10, 110140110, N'10', N'Setup/BankVehicle/Bank', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (11, 110140120, N'10', N'Setup/BankVehicle/Vehicle', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (12, 110150110, N'10', N'Setup/PriceDeclaration/BOM', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (13, 110150120, N'10', N'Setup/PriceDeclaration/Service', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (14, 110150130, N'10', N'Setup/PriceDeclaration/Tender', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (15, 110160110, N'10', N'Setup/Company/CommpanyProfile', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (16, 110160120, N'10', N'Setup/Company/BranchProfile', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (17, 110170110, N'10', N'Setup/FiscalYear/FiscalYear', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (18, 110180110, N'10', N'Setup/Configuration/Settings', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (19, 110180120, N'10', N'Setup/Configuration/Prefix', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (20, 110180130, N'10', N'Setup/Configuration/Shift', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (21, 110190110, N'10', N'Setup/ImportSync/Import', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (22, 110190120, N'10', N'Setup/ImportSync/Sync', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (23, 110190130, N'10', N'Setup/ImportSync/Update/Delete query', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (24, 110200110, N'10', N'Setup/Measurment/Name', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (25, 110200120, N'10', N'Setup/Measurment/Conversion', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (26, 110210110, N'10', N'Setup/Currency/Currency', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (27, 110210120, N'10', N'Setup/Currency/Conversion', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (28, 110220110, N'10', N'Setup/Banderol/Banderol', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (29, 110220120, N'10', N'Setup/Banderol/Packaging', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (30, 110220130, N'10', N'Setup/Banderol/Product', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (31, 120110110, N'10', N'Purchase/Purchase/Local', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (32, 120110120, N'10', N'Purchase/Purchase/Import', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (33, 120110130, N'10', N'Purchase/Purchase/InputService', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (34, 120110140, N'10', N'Purchase/Purchase/PurchaseReturn', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (35, 120110150, N'10', N'Purchase/Purchase/Service Stock', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (36, 120110160, N'10', N'Purchase/Purchase/Service Non Stock', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (37, 130110110, N'10', N'Production/Issue/Issue', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (38, 130110120, N'10', N'Production/Issue/Return', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (39, 130110130, N'10', N'Production/Issue/Issue WithOut BOM', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (40, 130110140, N'10', N'Production/Issue/Wastage', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (41, 130110150, N'10', N'Production/Issue/Transfer', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (42, 130120110, N'10', N'Production/Receive/WIP', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (43, 130120120, N'10', N'Production/Receive/FGReceive', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (44, 130120130, N'10', N'Production/Receive/Return', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (45, 130120140, N'10', N'Production/Receive/Package', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (46, 140110110, N'10', N'Sale/Sale/Local', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (47, 140110120, N'10', N'Sale/Sale/Export', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (48, 140110130, N'10', N'Sale/Sale/Tender', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (49, 140110140, N'10', N'Sale/Sale/Trading', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (50, 140110150, N'10', N'Sale/Sale/Service Stock', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (51, 140110160, N'10', N'Sale/Sale/Service Non Stock', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (52, 140110170, N'10', N'Sale/Sale/RawSale', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (53, 140110180, N'10', N'Sale/Sale/Wastage', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (54, 140120110, N'10', N'Sale/package/package', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (55, 140130110, N'10', N'Sale/Transfer  IssueRecieve/RM In', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (56, 140130120, N'10', N'Sale/Transfer  IssueRecieve/FG In', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (57, 140130130, N'10', N'Sale/Transfer IssueRecieve/RM  Out', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (58, 140130140, N'10', N'Sale/Transfer IssueRecieve/FG Out', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (59, 140140110, N'10', N'Sale/EXP/EXP', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (60, 150110110, N'10', N'Deposit/Treasury/Treasury', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (61, 150120110, N'10', N'Deposit/VDS/Purchage', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (62, 150120120, N'10', N'Deposit/VDS/Sale', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (63, 150130110, N'10', N'Deposit/SD/SD', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (64, 150140110, N'10', N'Deposit/CashPayble/CashPayble', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (65, 150150110, N'10', N'Deposit/Reverse/Reverse', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (66, 150160110, N'10', N'Deposit/TDS/TDS', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (67, 160110110, N'10', N'Toll/Client/Issue 6.4', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (68, 160110120, N'10', N'Toll/Client/FGReceive', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (69, 160110130, N'10', N'Toll/Client/VAT11GAGA', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (70, 160120110, N'10', N'Toll/Contractor/RawReceive', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (71, 160120120, N'10', N'Toll/Contractor/FGProduction', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (72, 160120130, N'10', N'Toll/Contractor/FGIssue', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (73, 160120140, N'10', N'Toll/Contractor/Toll 6.3', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (74, 160130110, N'10', N'Toll/Toll Register/Toll 6.1', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (75, 160130120, N'10', N'Toll/Toll Register/Toll 6.2', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (76, 170110110, N'10', N'Adjustment/AdjustmentHead/Head', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (77, 170110120, N'10', N'Adjustment/AdjustmentHead/Transaction', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (78, 170120110, N'10', N'Adjustment/Purchase/DN', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (79, 170120120, N'10', N'Adjustment/Purchase/CN', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (80, 170130110, N'10', N'Adjustment/Sale/CN', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (81, 170130120, N'10', N'Adjustment/Sale/DN', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (82, 170140110, N'10', N'Adjustment/Dispose/26', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (83, 170140120, N'10', N'Adjustment/Dispose/27', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (84, 170150110, N'10', N'Adjustment/DDB/DDB', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (85, 170160110, N'10', N'Adjustment/VAT & SD Adjutment/VAT', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (86, 170160120, N'10', N'Adjustment/VAT & SD Adjutment/SD', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (87, 180110110, N'10', N'NBRReport/VAT4.3/VAT4.3', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (88, 180120110, N'10', N'NBRReport/VAT 6.1/VAT 6.1', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (89, 180130110, N'10', N'NBRReport/VAT 6.2/VAT 6.2', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (90, 180140110, N'10', N'NBRReport/VAT 9.1/VAT 9.1', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (91, 180150110, N'10', N'NBRReport/VAT 6.10/VAT 6.10', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (92, 180160110, N'10', N'NBRReport/SDReport/SDReport', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (93, 180170110, N'10', N'NBRReport/VAT 6.3/VAT 6.3', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (94, 180180110, N'10', N'NBRReport/VAT 6.5/VAT 6.5', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (95, 180190110, N'10', N'NBRReport/VAT 7/VAT 7', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (96, 180200110, N'10', N'NBRReport/VAT 20/VAT 20', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (97, 180210110, N'10', N'NBRReport/Banderol/Form 4', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (98, 180210120, N'10', N'NBRReport/Banderol/Form 5', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (99, 180220110, N'10', N'NBRReport/Summery-Current Account/Summery-Current Account', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (100, 180220120, N'10', N'NBRReport/Summery-Current Account/Breakdwon-Current Account', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (101, 180230110, N'10', N'NBRReport/Chak/Chak Ka', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (102, 180230120, N'10', N'NBRReport/Chak/Chak kha', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (103, 190110110, N'10', N'MISReport/Purchase/Purchase', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (104, 190120110, N'10', N'MISReport/Production/Issue', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (105, 190120120, N'10', N'MISReport/Production/Receive', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (106, 190130110, N'10', N'MISReport/Sale/Sale', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (107, 190140110, N'10', N'MISReport/Stock/Stock', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (108, 190140120, N'10', N'MISReport/Stock/Receive Sale', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (109, 190140130, N'10', N'MISReport/Stock/Reconsciliation', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (110, 190140140, N'10', N'MISReport/Stock/Branch Stock Movement', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (111, 190150110, N'10', N'MISReport/Deposit/Deposit', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (112, 190150120, N'10', N'MISReport/Deposit/Current Account', 0, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (113, 190160110, N'10', N'MISReport/Other/Adjustment', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (114, 190160120, N'10', N'MISReport/Other/Co-Efficient', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (115, 190160130, N'10', N'MISReport/Other/Wastage', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (116, 190160140, N'10', N'MISReport/Other/Value Change', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (117, 190160150, N'10', N'MISReport/Other/Serial Stock', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (118, 190160160, N'10', N'MISReport/Other/Purchage LC', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (119, 190170110, N'10', N'MISReport/Sale C/E/Sale C/E', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (120, 190180110, N'10', N'MISReport/Comparision Satement', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (121, 200110110, N'10', N'UserAccount/NewAccount/NewAccount', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (122, 200120110, N'10', N'UserAccount/PasswordChange/PasswordChange', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (123, 200130110, N'10', N'UserAccount/UserRole/UserRole', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (124, 200140110, N'10', N'UserAccount/SettingsRole/SettingsRole', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (125, 200150110, N'10', N'UserAccount/Log Out/Log Out', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (126, 200160110, N'10', N'UserAccount/Log In/Log In', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (127, 200170110, N'10', N'UserAccount/Logs/Logs', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (128, 200180110, N'10', N'UserAccount/Close All/Close All', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (129, 200190110, N'10', N'UserAccount/User Branch/User Branch', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (130, 200200110, N'10', N'UserAccount/User Menu/All', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (131, 200200120, N'10', N'UserAccount/User Manu/User ', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (132, 210110110, N'10', N'Banderol/Demand/Demand', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (133, 210120110, N'10', N'Banderol/Receive/Receive', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (134, 220110110, N'10', N'SCBL/SCBLMIS/Local Purchase', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (135, 220110120, N'10', N'SCBL/SCBLMIS/Local Sale', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

INSERT [dbo].[UserMenuRolls] ([LineID], [FormID], [UserID], [FormName], [Access], [PostAccess], [AddAccess], [EditAccess], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn]) VALUES (136, 220110130, N'10', N'SCBL/SCBLMIS/Receive Sale', 1, 1, 1, 1, N'Admin', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'admin', CAST(N'2020-02-16T17:17:58.000' AS DateTime))

SET IDENTITY_INSERT [dbo].[UserMenuRolls] OFF
";

                    transResult = NewTableAdd("UserMenuRolls", UserMenuRolls, currConn, transaction, connVM);

                    #endregion UserMenuRolls
                }
                if (NewTableExistCheck("VATReturnV2Notes", currConn, transaction, connVM) == 0)
                {
                    #region VATReturnV2Notes
                    string VATReturnV2Notes = @"

CREATE TABLE [dbo].[VATReturnV2Notes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NoteNo] [int] NOT NULL,
	[Description] [nvarchar](3000) NOT NULL,
 CONSTRAINT [PK_VATReturnV2Notes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

SET IDENTITY_INSERT [dbo].[VATReturnV2Notes] ON 

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (1, 1, N'Zero Rated Goods/Service (Direct Export)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (2, 2, N'Zero Rated Goods/Service (Deemd Export)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (3, 3, N'Exempted Goods/Service')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (4, 4, N'Standard Rated Goods/Service')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (5, 5, N'Goods Based on MRP')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (6, 6, N'Goods/Service Based on Specific VAT')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (7, 7, N'Goods/Service Other than Standard Rate')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (8, 8, N'Retail/Wholesale/Trade Based Supply')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (9, 9, N'Total Sales Value & Total Payable Taxes')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (10, 10, N'Zero Rated Goods/Service (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (11, 11, N'Zero Rated Goods/Service (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (12, 12, N'Exempted Goods/Service (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (13, 13, N'Exempted Goods/Service (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (14, 14, N'Standard Rated Goods/Service (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (15, 15, N'Standard Rated Goods/Service (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (16, 16, N'Goods/Service Other than Standard Rate (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (17, 17, N'Goods/Service Other than Standard Rate (Import)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (18, 18, N'Goods/Service Based on Specific VAT (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (19, 19, N'Goods/Service Not Admissible for Credit (Local Purchase) (From Turnover Tax Units)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (20, 20, N'Goods/Service Not Admissible for Credit (Local Purchase) (From Unregistered Entities)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (21, 21, N'Goods/Service Not Admissible for Credit (Taxpayers who sell ONLY Exempted/ Specific VAT and Goods/Service Other than Standard Rate/Credits not taken within stipulated time) (Local Purchase)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (22, 22, N'Goods/Service Not Admissible for Credit (Taxpayers who sell ONLY Exempted/ Specific VAT and Goods/Service Other than Standard Rate/Credits not taken within stipulated time) (Import )')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (23, 23, N'Total Input Tax Credit')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (24, 24, N'VAT Deducted at Source from Suppliers')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (25, 25, N'Payment Not Made Through Banking Channel')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (26, 26, N'Issuance of Debit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (27, 27, N'Any Other Adjustments (please specify below)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (28, 28, N'Total Increasing Adjustment')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (29, 29, N'Due to VAT Deducted at Source from the Suppliers delivered')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (30, 30, N'Advance Tax Paid at Import Stage')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (31, 31, N'Issuance of Credit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (32, 32, N'Any Other Adjustments (please specify below)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (33, 33, N'Total Decreasing Adjustment')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (34, 34, N'Net Payable VAT for the Tax Period (Section- 45)(9C+23B+28-33)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (35, 35, N'Net Payable VAT for the Tax Period after Adjusted with Closing Balance and Balance of from 18.6 [34+(52+56)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (36, 36, N'Net Payable Supplementary Duty for the Tax Period (Before adjustment with Closing Balance) [9B+38-(39+40)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (37, 37, N'Net Payable Supplementary Duty for the Tax Period after Adjusted with Closing Balance and Balance of from 18.6 [36-(53+57)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (38, 38, N'Supplementary Duty Against Issuance of Debit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (39, 39, N'Supplementary Duty Against Issuance of Credit Note')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (40, 40, N'Supplementary Duty Paid on Inputs Against Exports')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (41, 41, N'Interest on Overdue VAT (Based on note -35)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (42, 42, N'Interest on Overdue SD  (Based on note -37)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (43, 43, N'Fine/Penalty for Non-submission of Return')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (44, 44, N'Other Fine/Penalty/Interest')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (45, 45, N'Payable Excise Duty')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (46, 46, N'Payable Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (47, 47, N'Payable ICT Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (48, 48, N'Payable Health Care Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (49, 49, N'Payable Environmental Protection Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (50, 50, N'Net Payable VAT for treasury Deposit (35+41+43+44)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (51, 51, N'Net Payable SD for treasury Deposit (37+42)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (52, 52, N'Closing Balance of Last Tax Period (VAT)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (53, 53, N'Closing Balance of Last Tax Period (SD)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (54, 54, N'Closing Balance (VAT) up to 30th June, 2019 from Mushak-18.6,[Rule 118(5)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (55, 55, N'Closing Balance (SD) up to 30th June, 2019 from Mushak-18.6,[Rule 118(5)]')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (56, 56, N'Decreasing Adjustment for Note 54 (up to 10% of Note 34)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (57, 57, N'Decreasing Adjustment for Note 55 (up to 10% of Note 36)')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (58, 58, N'VAT Deposit for the Current Tax Period')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (59, 59, N'SD Deposit for the Current Tax Period')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (60, 60, N'Excise Duty')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (61, 61, N'Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (62, 62, N'ICT Development Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (63, 63, N'Health Care Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (64, 64, N'Environmental Protection Surcharge')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (65, 65, N'Closing Balance (VAT)  [58-(50+67)+ the refund amount not approved')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (66, 66, N'Closing Balance (SD) [59-(51+68)+ the refund amount not approved')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (67, 67, N'I am interested to get refund of my Closing Balance (Requested Amount for Refund (VAT))')

INSERT [dbo].[VATReturnV2Notes] ([Id], [NoteNo], [Description]) VALUES (68, 68, N'I am interested to get refund of my Closing Balance (Requested Amount for Refund (SD))')

SET IDENTITY_INSERT [dbo].[VATReturnV2Notes] OFF
";

                    transResult = NewTableAdd("VATReturnV2Notes", VATReturnV2Notes, currConn, transaction, connVM);

                    #endregion VATReturnV2Notes
                }

                #endregion
                #region Insert Sys DB Information

                string CompanyID = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyID);
                string CompanyName = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyName);
                string DatabaseName = Converter.DESEncrypt(PassPhrase, EnKey, databaseName);
                string ActiveStatus = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.ActiveStatus);
                //string CompanyLegalName = Converter.DESEncrypt(PassPhrase, EnKey, companyProfiles.CompanyLegalName);
                sqlText = "";
                sqlText += " INSERT INTO CompanyInformations (CompanyID,CompanyName,DatabaseName,ActiveStatus,Serial, SysVersion)";
                sqlText += " VALUES(" +
                           "'" + CompanyID + "'," +
                           "'" + CompanyName + "'," +
                           "'" + DatabaseName + "'," +
                           "'" + ActiveStatus + "'," +
                    //"'" + CompanyLegalName + "'," +
                           "(select isnull(max(Serial ),0)+1 FROM  CompanyInformations), '2012'" +

                           ")";
                currConn.ChangeDatabase("SymphonyVATSys");
                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                cmdPrefetch.Transaction = transaction;

                transResult = (int)cmdPrefetch.ExecuteNonQuery();
                if (transResult < 0)
                {
                    throw new ArgumentNullException("Insert Company List Information", MessageVM.dbMsgDBInfoInsert);
                }
                #endregion Insert Sys DB Information

                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        #region SuccessResult

                        retResults[0] = "Success";
                        retResults[1] = "Requested Company Created successfully.";
                        retResults[2] = newID;
                        #endregion SuccessResult

                    }

                }

                #endregion Commit
            }
            #endregion Try

            #region Catch and Finall
            catch (ArgumentNullException arg)
            {
                if (arg.ParamName.ToLower() != "deletedb")
                {
                    currConn.Close();
                    currConn.Open();
                    currConn.ChangeDatabase("master");
                    #region check Database and delete
                    sqlText = "";
                    sqlText += " USE [master]";
                    sqlText += " drop DATABASE " + databaseName + "";

                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    cmdIdExist.ExecuteNonQuery();
                    #endregion check Database
                }

                FileLogger.Log("CommonDAL", "NewDBCreate", arg.ToString() + "\n" + sqlText);

                throw arg;
            }
            catch (SqlException sqlex)
            {

                currConn.Close();
                currConn.Open();
                currConn.ChangeDatabase("master");

                #region check Database and delete


                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " drop DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                cmdIdExist.Transaction = transaction;
                cmdIdExist.ExecuteNonQuery();


                #endregion check Database

                FileLogger.Log("CommonDAL", "NewDBCreate", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }

            catch (Exception ex)
            {

                currConn.Close();
                currConn.Open();
                currConn.ChangeDatabase("master");
                #region check Database and delete


                sqlText = "";
                sqlText += " USE [master]";
                sqlText += " drop DATABASE " + databaseName + "";

                SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                cmdIdExist.Transaction = transaction;
                cmdIdExist.ExecuteNonQuery();

                #endregion check Database

                FileLogger.Log("CommonDAL", "NewDBCreate", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result
        }

        #region Old Methods

        public static string CompanyListUpdate1(SqlCommand objCommCustomerGroup, string CompanyID, string CompanyName, string DatabaseName, string ActiveStatus)
        {
            string result = "-1";

            string strSQL = @"
declare @Present numeric;

select @Present = count(CompanyID) from CompanyInformations 
where (CompanyID=@CompanyID)


if(@Present <=0 )
BEGIN

INSERT INTO CompanyInformations
(CompanyID,CompanyName,DatabaseName,ActiveStatus)
VALUES(@CompanyID,@CompanyName,@DatabaseName,@ActiveStatus)

end
else
begin
update CompanyInformations set 

CompanyName=@CompanyName,
ActiveStatus=@ActiveStatus

where (CompanyID=@CompanyID)
;
end


";
            objCommCustomerGroup.CommandText = strSQL;
            objCommCustomerGroup.CommandType = CommandType.Text;

            if (!objCommCustomerGroup.Parameters.Contains("@CompanyID"))
            { objCommCustomerGroup.Parameters.AddWithValue("@CompanyID", CompanyID); }
            else { objCommCustomerGroup.Parameters["@CompanyID"].Value = CompanyID; }
            if (!objCommCustomerGroup.Parameters.Contains("@CompanyName"))
            { objCommCustomerGroup.Parameters.AddWithValue("@CompanyName", CompanyName); }
            else { objCommCustomerGroup.Parameters["@CompanyName"].Value = CompanyName; }

            if (!objCommCustomerGroup.Parameters.Contains("@DatabaseName"))
            { objCommCustomerGroup.Parameters.AddWithValue("@DatabaseName", DatabaseName); }
            else { objCommCustomerGroup.Parameters["@DatabaseName"].Value = DatabaseName; }

            if (!objCommCustomerGroup.Parameters.Contains("@ActiveStatus"))
            { objCommCustomerGroup.Parameters.AddWithValue("@ActiveStatus", ActiveStatus); }
            else { objCommCustomerGroup.Parameters["@ActiveStatus"].Value = ActiveStatus; }


            try
            {
                result = objCommCustomerGroup.ExecuteNonQuery().ToString();
            }
            catch (SqlException ex)
            {
                if (ex.Number == 2627)
                {
                    return "-99";
                }
                else if (ex.Number == 266)
                {
                    return "-266";
                }
                else
                {
                    return "-1";
                }
            }
            catch (Exception ex) { Trace.WriteLine(ex.Message); }
            finally { }

            return result;

        }

        public string[] SuperAdministratorUpdate(string miki, string mouse, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            #endregion

            #region try
            try
            {
                #region Validation

                if (string.IsNullOrEmpty(miki))
                {
                    throw new ArgumentNullException("SuperAdministratorUpdate", "unable to find Username");
                }
                else if (string.IsNullOrEmpty(mouse))
                {
                    throw new ArgumentNullException("SuperAdministratorUpdate",
                                                    "unable to find password");
                }


                #endregion Validation

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("SA");

                #endregion open connection and transaction




                #region update existing row to table

                if (miki == "ADMINISTRATOR")
                {
                    #region Find Transaction Exist

                    sqlText = "";
                    sqlText += "select COUNT(miki) from SuperAdministrator ";
                    sqlText += " where miki='zTvrNxNvP08='";
                    SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                    cmdExistTran.Transaction = transaction;
                    int IDExist = (int)cmdExistTran.ExecuteScalar();

                    if (IDExist <= 0)
                    {
                        sqlText = "";
                        sqlText += " INSERT INTO SuperAdministrator(	miki,	mouse) VALUES('zTvrNxNvP08=','" + mouse +
                                   "')";

                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;
                        transResult = (int)cmdUpdate.ExecuteNonQuery();
                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException("SuperAdministratorUpdate",
                                                            "Super Administrator information not Updated");
                        }
                    }
                    else
                    {
                        #region sql statement

                        sqlText = "";
                        sqlText += " update SuperAdministrator set mouse='" + mouse + "'";
                        sqlText += " where miki='zTvrNxNvP08='";

                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;
                        transResult = (int)cmdUpdate.ExecuteNonQuery();
                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException("SuperAdministratorUpdate",
                                                            "Super Administrator information not Updated");
                        }

                        #endregion
                    }

                    #endregion Find Transaction Exist
                }
                else if (miki == "SYMPHONY")
                {
                    #region Find Transaction Exist

                    sqlText = "";
                    sqlText += "select COUNT(miki) from SuperAdministrator ";
                    sqlText += " where miki='hV9vFF0OUsptxqpZlnEhrA=='";
                    SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                    cmdExistTran.Transaction = transaction;
                    int IDExist = (int)cmdExistTran.ExecuteScalar();

                    if (IDExist <= 0)
                    {
                        sqlText = "";
                        sqlText += " INSERT INTO SuperAdministrator(	miki,	mouse) VALUES('hV9vFF0OUsptxqpZlnEhrA==','" + mouse +
                                   "')";

                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;
                        transResult = (int)cmdUpdate.ExecuteNonQuery();
                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException("SuperAdministratorUpdate",
                                                            "Super Administrator information not Updated");
                        }
                    }
                    else
                    {
                        #region sql statement

                        sqlText = "";
                        sqlText += " update SuperAdministrator set mouse='" + mouse + "'";
                        sqlText += " where miki='hV9vFF0OUsptxqpZlnEhrA=='";

                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;
                        transResult = (int)cmdUpdate.ExecuteNonQuery();
                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException("SuperAdministratorUpdate",
                                                            "Super Administrator information not Updated");
                        }

                        #endregion
                    }

                    #endregion Find Transaction Exist
                }

                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Information successfully Updated";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected error to Update Requested Information";

                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected error to Requested Informatioe";

                }

                #endregion Commit

                #endregion
            }
            #endregion try

            #region catch

            catch (SqlException sqlex)
            {
                if (transaction != null)
                    transaction.Rollback();
                throw sqlex;
            }
            catch (Exception ex)
            {
                if (transaction != null)
                    transaction.Rollback();
                throw ex;
            }

            #endregion catch

            #region Finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion

            return retResults;
        }
        public string[] SuperAdministratorUpdatebACKUP(string mouse, SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            #endregion

            #region try
            try
            {
                #region Validation

                if (string.IsNullOrEmpty(mouse))
                {
                    throw new ArgumentNullException("SuperAdministratorUpdate",
                                                    "unable to find password");
                }


                #endregion Validation

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("SA");

                #endregion open connection and transaction




                #region update existing row to table
                #region Find Transaction Exist




                #region sql statement

                sqlText = "";
                sqlText += " update SuperAdministrator set mouse='" + mouse + "'";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException("SuperAdministratorUpdate", "Super Administrator information not Updated");
                }
                #endregion

                #endregion Find Transaction Exist


                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Information successfully Updated";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected error to Update Requested Information";

                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected error to Requested Informatioe";

                }

                #endregion Commit

                #endregion
            }
            #endregion try

            #region catch

            catch (SqlException sqlex)
            {
                if (transaction != null)
                    transaction.Rollback();
                throw sqlex;
            }
            catch (Exception ex)
            {
                if (transaction != null)
                    transaction.Rollback();
                throw ex;
            }

            #endregion catch

            #region Finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion

            return retResults;
        }

        public string[] DatabaseInformationUpdate(string Tom, string jary, string mini, SysDBInfoVMTemp connVM = null)
        {

            #region Objects & Variables

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            #endregion

            #region try
            try
            {
                #region Validation

                if (string.IsNullOrEmpty(Tom))
                {
                    throw new ArgumentNullException("DatabaseInformationUpdate", "unable to find Username");
                }
                else if (string.IsNullOrEmpty(jary))
                {
                    throw new ArgumentNullException("DatabaseInformationUpdate",
                                                    "unable to find password");
                }
                else if (string.IsNullOrEmpty(mini))
                {
                    throw new ArgumentNullException("DatabaseInformationUpdate", "unable to find Source");
                }


                #endregion Validation

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("SA");

                #endregion open connection and transaction

                #region update existing row to table
                #region Find Transaction Exist

                sqlText = "";
                sqlText = sqlText + "select COUNT(Tom) from DBInformation ";
                SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                cmdExistTran.Transaction = transaction;
                int IDExist = (int)cmdExistTran.ExecuteScalar();

                if (IDExist <= 0)
                {
                    sqlText = "";
                    sqlText += " INSERT INTO DBInformation(	Tom,	jary,mini) VALUES('" + Tom + "','" + jary + "','" + mini + "')";

                    SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                    cmdUpdate.Transaction = transaction;
                    transResult = (int)cmdUpdate.ExecuteNonQuery();
                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException("DatabaseInformationUpdate", "Database Information not update");
                    }
                }
                else
                {
                    #region sql statement

                    sqlText = "";
                    sqlText += " update DBInformation set Tom= '" + Tom + "',jary='" + jary + "',mini='" + mini + "'";

                    SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                    cmdUpdate.Transaction = transaction;
                    transResult = (int)cmdUpdate.ExecuteNonQuery();
                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException("DatabaseInformationUpdate", "Database Information not update");
                    }
                    #endregion
                }
                #endregion Find Transaction Exist


                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Information successfully Updated";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected error to Update Requested Information";

                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected error to Requested Informatioe";

                }

                #endregion Commit

                #endregion
            }
            #endregion try

            #region catch

            catch (SqlException sqlex)
            {
                if (transaction != null)
                    transaction.Rollback();
                throw sqlex;
            }
            catch (Exception ex)
            {
                if (transaction != null)
                    transaction.Rollback();
                throw ex;
            }

            #endregion catch

            #region Finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion

            return retResults;
        }

        public bool UpdateSystemData(string userName, string password, string source, SysDBInfoVMTemp connVM = null)
        {
            bool success = false;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";


            try
            {
                #region Validation
                //if (string.IsNullOrEmpty(""))
                //{
                //    throw new ArgumentNullException("InsertToBankInformation",
                //                "Could not find requested Bank Id.");
                //}
                #endregion Validation

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnectionSys(connVM);//
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("sysdb");
                #endregion open connection and transaction


                sqlText = "delete from DBInformation";
                SqlCommand cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;
                object objDel = cmdExist.ExecuteScalar();

                sqlText = "";
                sqlText += "insert into DBInformation";
                sqlText += "(";
                sqlText += "Tom,";
                sqlText += "jary,";
                sqlText += "mini";
                sqlText += ")";
                sqlText += " values(";
                sqlText += "'" + userName + "',";
                sqlText += "'" + password + "',";
                sqlText += "'" + source + "'";
                sqlText += ")";
                SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                cmdInsert.Transaction = transaction;
                transResult = (int)cmdInsert.ExecuteNonQuery();

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();

                    }

                }


            }
            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }

            return success;
        }

        #endregion

        //currConn to VcurrConn 25-Aug-2020
        public string TransactionCodeX(string CodeGroup, string CodeName, string tableName,
            string tableIdField, string tableDateField, string tranDate, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            decimal retResults = 0;
            int countId = 0;
            string sqlText = "";
            string Prefetch = "";
            int CurrentID = 0;
            int SetupLen = 0;
            string newID = "";
            string n = "";
            int Len = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;


            #endregion

            #region Try

            try
            {

                #region open connection and transaction
                //if (currConn == null)
                //{
                //    currConn = _dbsqlConnection.GetConnection();
                //    if (currConn.State != ConnectionState.Open)
                //    {
                //        currConn.Open();
                //    }
                //}

                #endregion open connection and transaction

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Validation
                if (string.IsNullOrEmpty(CodeGroup))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(CodeName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                else if (string.IsNullOrEmpty(tableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                }
                else if (string.IsNullOrEmpty(tableIdField))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                }
                else if (Convert.ToDateTime(tranDate) < DateTime.MinValue || Convert.ToDateTime(tranDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException("TransactionCode", "Transaction Date not Valid");

                }
                #endregion Validation

                #region Prefetch

                sqlText = "";
                sqlText = sqlText + " SELECT     prefix FROM Codes";
                sqlText = sqlText + " WHERE     (CodeGroup = '" + CodeGroup + "') AND (CodeName = '" + CodeName + "')";
                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                cmdPrefetch.Transaction = transaction;
                var exec = cmdPrefetch.ExecuteScalar();

                Prefetch = Convert.ToString(exec);

                if (string.IsNullOrEmpty(Prefetch))
                {
                    throw new ArgumentNullException("TransactionCode", "Could not find prefix.");
                }

                #endregion Prefetch

                #region F year Start Date
                var tranYear = Convert.ToDateTime(tranDate).ToString("yyyy-MM-dd");
                sqlText = "";
                sqlText = sqlText + " SELECT MIN(fy1.PeriodStart) FROM FiscalYear fy1 WHERE fy1.CurrentYear= (";
                sqlText = sqlText + " SELECT fy.CurrentYear FROM FiscalYear fy WHERE '" + tranYear + "'";
                sqlText = sqlText + " between fy.PeriodStart AND fy.PeriodEnd) ";
                SqlCommand cmdFsDate = new SqlCommand(sqlText, currConn);
                cmdFsDate.Transaction = transaction;
                var objFsDate = cmdFsDate.ExecuteScalar();

                if (objFsDate == null || string.IsNullOrWhiteSpace(objFsDate.ToString()))
                {
                    throw new ArgumentNullException("TransactionCode", "Fyscal year not found for Date: " + tranDate);
                }


                var FsDate = Convert.ToDateTime(objFsDate).ToString("yyyy-MM-dd HH:mm:ss");
                if (objFsDate == null || FsDate == null)
                {
                    throw new ArgumentNullException("TransactionCode", "Fyscal year Stardate not found");
                }

                #endregion F year Start Date

                #region F year End Date

                sqlText = "";
                sqlText = sqlText + " SELECT  MAX(fy1.PeriodEnd) FROM FiscalYear fy1 WHERE fy1.CurrentYear= (";
                sqlText = sqlText + " SELECT fy.CurrentYear FROM FiscalYear fy WHERE '" + tranYear + "'";
                sqlText = sqlText + " between fy.PeriodStart AND fy.PeriodEnd) ";

                SqlCommand cmdFeDate = new SqlCommand(sqlText, currConn);
                cmdFeDate.Transaction = transaction;
                object objFeDate = cmdFeDate.ExecuteScalar();
                var FeDate = Convert.ToDateTime(objFeDate).ToString("yyyy-MM-dd HH:mm:ss");

                if (FeDate == null || objFeDate == null)
                {
                    throw new ArgumentNullException("TransactionCode", "Fyscal year Enddate not found");
                }

                #endregion F year End Date
                #region CurrentID

                sqlText = "";
                sqlText += "  SELECT isnull(max(cast(SUBSTRING ( ih." + tableIdField + " ,5 , CHARINDEX('/',ih." + tableIdField + ")-5 ) AS INT)),0)+1";
                sqlText += " FROM " + tableName + " ih";
                sqlText += " WHERE SUBSTRING ( ih." + tableIdField + " ,1 , 3 )='" + Prefetch + "'";
                sqlText +=
                    " AND ih." + tableDateField + " >= '" + FsDate + "' and ih." + tableDateField + " <= DATEADD(d,1,'" + FeDate + "' )";
                sqlText += " AND ih." + tableDateField + " BETWEEN '" + FsDate + "' and DATEADD(d,1,'" + FeDate + "' ) ";


                SqlCommand cmdCurrentID = new SqlCommand(sqlText, currConn);
                cmdCurrentID.Transaction = transaction;
                CurrentID = Convert.ToInt32(cmdCurrentID.ExecuteScalar());

                if (CurrentID < 0)
                {

                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgUnableCreatID);
                }

                #endregion CurrentID
                #region SetupLen

                sqlText = "";
                sqlText = sqlText + " SELECT     Lenth FROM Codes";
                sqlText = sqlText + " WHERE     (CodeGroup = '" + CodeGroup + "') AND (CodeName = '" + CodeName + "')";
                SqlCommand cmdSetupLen = new SqlCommand(sqlText, currConn);
                cmdSetupLen.Transaction = transaction;
                SetupLen = Convert.ToInt32(cmdSetupLen.ExecuteScalar());
                if (SetupLen < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgUnableCreatID);
                }

                #endregion SetupLen
                #region ID Create

                n = "";
                Len = Convert.ToString(CurrentID).Length;
                for (int i = 0; i < SetupLen - Len; i++)
                {
                    n = n + "0";
                }
                var idYear = Convert.ToDateTime(tranDate);
                //newID = Prefetch + "-" + n + Convert.ToString(CurrentID) + "/" +
                //        Convert.ToString(tranDate.ToString("MMyy"));

                newID = Prefetch + "-" + n + Convert.ToString(CurrentID) + "/" +
                       Convert.ToString(idYear.ToString("MMyy"));

                if (string.IsNullOrEmpty(newID))
                {
                    throw new ArgumentNullException("TransactionCodeGenerator", "Unable to Create ID");
                }
                #endregion ID Create

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            #region Catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TransactionCodeX", ex.ToString() + "\n" + sqlText);

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                throw ex;
            }

            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

                //if (currConn.State == ConnectionState.Open)
                //{
                //    currConn.Close();

                //}

            }

            #endregion

            #endregion Catch and Finall

            #region Results

            return newID;

            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public string TransactionCode(string CodeGroup, string CodeName, string tableName,
    string tableIdField, string tableDateField, string tranDate, string BranchId, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            decimal retResults = 0;
            int countId = 0;
            string sqlText = "";
            string Prefetch = "";
            int CurrentID = 0;
            int SetupLen = 0;
            string newID = "";
            string n = "";
            int Len = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                if (!string.IsNullOrWhiteSpace(BranchId))
                {
                    newID = CodeGeneration(CodeGroup, CodeName, tranDate, BranchId, currConn, transaction, false, connVM);

                }
                else
                {
                    #region MyRegion

                    //#region Validation
                    //if (string.IsNullOrEmpty(CodeGroup))
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                    //}
                    //else if (string.IsNullOrEmpty(CodeName))
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                    //}
                    //else if (string.IsNullOrEmpty(tableName))
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                    //}
                    //else if (string.IsNullOrEmpty(tableIdField))
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                    //}
                    //else if (Convert.ToDateTime(tranDate) < DateTime.MinValue || Convert.ToDateTime(tranDate) > DateTime.MaxValue)
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Transaction Date not Valid");

                    //}
                    //#endregion Validation

                    //#region Prefetch

                    //sqlText = "";
                    //sqlText = sqlText + " SELECT     prefix FROM Codes";
                    //sqlText = sqlText + " WHERE     (CodeGroup = '" + CodeGroup + "') AND (CodeName = '" + CodeName + "')";
                    //SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                    //cmdPrefetch.Transaction = transaction;
                    //var exec = cmdPrefetch.ExecuteScalar();

                    //Prefetch = Convert.ToString(exec);

                    //if (string.IsNullOrEmpty(Prefetch))
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Could not find prefix.");
                    //}

                    //#endregion Prefetch

                    //#region F year Start Date
                    //var tranYear = Convert.ToDateTime(tranDate).ToString("yyyy-MM-dd");
                    //sqlText = "";
                    //sqlText = sqlText + " SELECT MIN(fy1.PeriodStart) FROM FiscalYear fy1 WHERE fy1.CurrentYear= (";
                    //////sqlText = sqlText + " SELECT fy.CurrentYear FROM FiscalYear fy WHERE convert (date, '" + tranDate + "',101)";
                    ////sqlText = sqlText + " SELECT fy.CurrentYear FROM FiscalYear fy WHERE CONVERT(date,'" + tranDate + "', 101)";
                    //sqlText = sqlText + " SELECT fy.CurrentYear FROM FiscalYear fy WHERE '" + tranYear + "'";
                    //sqlText = sqlText + " between fy.PeriodStart AND fy.PeriodEnd) ";
                    //SqlCommand cmdFsDate = new SqlCommand(sqlText, currConn);
                    //cmdFsDate.Transaction = transaction;
                    //object objFsDate = cmdFsDate.ExecuteScalar();
                    ////DateTime FsDate = Convert.ToDateTime(objFsDate);
                    //var FsDate = Convert.ToDateTime(objFsDate).ToString("yyyy-MM-dd HH:mm:ss");
                    //if (objFsDate == null || FsDate == null)
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Fyscal year Stardate not found");
                    //}

                    //#endregion F year Start Date

                    //#region F year End Date

                    //sqlText = "";
                    //sqlText = sqlText + " SELECT  MAX(fy1.PeriodEnd) FROM FiscalYear fy1 WHERE fy1.CurrentYear= (";
                    //////sqlText = sqlText + " SELECT fy.CurrentYear FROM FiscalYear fy WHERE convert (date, '" + tranDate + "',101)";
                    //sqlText = sqlText + " SELECT fy.CurrentYear FROM FiscalYear fy WHERE '" + tranYear + "'";
                    //sqlText = sqlText + " between fy.PeriodStart AND fy.PeriodEnd) ";

                    //SqlCommand cmdFeDate = new SqlCommand(sqlText, currConn);
                    //cmdFeDate.Transaction = transaction;
                    //object objFeDate = cmdFeDate.ExecuteScalar();
                    //var FeDate = Convert.ToDateTime(objFeDate).ToString("yyyy-MM-dd HH:mm:ss");

                    //if (FeDate == null || objFeDate == null)
                    //{
                    //    throw new ArgumentNullException("TransactionCode", "Fyscal year Enddate not found");
                    //}

                    //#endregion F year End Date

                    //#region CurrentID

                    //sqlText = "";
                    //sqlText += "  SELECT isnull(max(cast(SUBSTRING ( ih." + tableIdField + " ,5 , LEN(ih." + tableIdField + ")-9 ) AS INT)),0)+1";
                    //sqlText += " FROM " + tableName + " ih";
                    //sqlText += " WHERE SUBSTRING ( ih." + tableIdField + " ,1 , 3 )='" + Prefetch + "'";
                    //sqlText +=
                    //    " AND ih." + tableDateField + " >= '" + FsDate + "' and ih." + tableDateField + " <= DATEADD(d,1,'" + FeDate + "' )";
                    //sqlText += " AND ih." + tableDateField + " BETWEEN '" + FsDate + "' and DATEADD(d,1,'" + FeDate + "' ) ";



                    //SqlCommand cmdCurrentID = new SqlCommand(sqlText, currConn);
                    //cmdCurrentID.Transaction = transaction;
                    //CurrentID = Convert.ToInt32(cmdCurrentID.ExecuteScalar());

                    //if (CurrentID < 0)
                    //{

                    //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgUnableCreatID);
                    //}

                    //#endregion CurrentID
                    //#region SetupLen

                    //sqlText = "";
                    //sqlText = sqlText + " SELECT     Lenth FROM Codes";
                    //sqlText = sqlText + " WHERE     (CodeGroup = '" + CodeGroup + "') AND (CodeName = '" + CodeName + "')";
                    //SqlCommand cmdSetupLen = new SqlCommand(sqlText, currConn);
                    //cmdSetupLen.Transaction = transaction;
                    //SetupLen = Convert.ToInt32(cmdSetupLen.ExecuteScalar());
                    //if (SetupLen < 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgUnableCreatID);
                    //}

                    //#endregion SetupLen
                    //#region ID Create

                    //n = "";
                    //Len = Convert.ToString(CurrentID).Length;
                    //for (int i = 0; i < SetupLen - Len; i++)
                    //{
                    //    n = n + "0";
                    //}
                    //var idYear = Convert.ToDateTime(tranDate);
                    ////newID = Prefetch + "-" + n + Convert.ToString(CurrentID) + "/" +
                    ////        Convert.ToString(tranDate.ToString("MMyy"));

                    //newID = Prefetch + "-" + n + Convert.ToString(CurrentID) + "/" +
                    //       Convert.ToString(idYear.ToString("MMyy"));

                    //if (string.IsNullOrEmpty(newID))
                    //{
                    //    throw new ArgumentNullException("TransactionCodeGenerator", "Unable to Create ID");
                    //}
                    //#endregion ID Create
                    #endregion

                }

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TransactionCode", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TransactionCode", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion Catch and Finall

            #region Results

            return newID;

            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public string CodeGeneration(string CodeGroup, string CodeName, string TransactionDate, string BranchId, SqlConnection VcurrConn, SqlTransaction Vtransaction, bool WithNumber = false, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string NewCode = "";
            string CodePreFix = "";
            string CodeGenerationFormat = "B/N/Y";
            string CodeGenerationMonthYearFormat = "MMYY";
            string BranchCode = "001";
            string CurrentYear = "2020";
            string BranchNumber = "1";
            int CodeLength = 0;
            int nextNumber = 0;
            string sqlText = "";
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            DataSet ds = new DataSet();
            string year = Convert.ToDateTime(TransactionDate).ToString("yyyy");

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region SettingsExist

                sqlText = "  ";

                sqlText += " SELECT   top 1  SettingName FROM Settings";
                sqlText += " WHERE     (SettingGroup ='CodeGenerationFormat') and   (SettingValue ='Y')  ";

                sqlText += " SELECT   top 1  SettingName FROM Settings";
                sqlText += " WHERE     (SettingGroup ='CodeGenerationMonthYearFormat') and   (SettingValue ='Y')  ";

                sqlText += " SELECT   top 1  BranchCode FROM BranchProfiles";
                sqlText += " WHERE     (BranchID ='" + BranchId + "')   ";

                sqlText += " SELECT   count(BranchCode) BranchNumber FROM BranchProfiles where IsArchive='0' and ActiveStatus='Y'";

                sqlText += "  SELECT   * from  CodeGenerations where CurrentYear<='2020' ";
                sqlText += "  select CurrentYear from FiscalYear where '" + Convert.ToDateTime(TransactionDate).ToString("dd/MMM/yyyy") + "' between PeriodStart and PeriodEnd ";

                SqlCommand cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmdExist);
                dataAdapter.Fill(ds);


                if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                    CodeGenerationFormat = ds.Tables[0].Rows[0][0].ToString();

                if (ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
                    CodeGenerationMonthYearFormat = ds.Tables[1].Rows[0][0].ToString();
                if (ds.Tables[2] != null && ds.Tables[2].Rows.Count > 0)
                    BranchCode = ds.Tables[2].Rows[0][0].ToString();

                if (ds.Tables[3] != null && ds.Tables[3].Rows.Count > 0)
                    BranchNumber = ds.Tables[3].Rows[0][0].ToString();

                #endregion

                #region CodeGenerations

                sqlText = "  ";
                sqlText += "  update CodeGenerations set CurrentYear ='2020'  where CurrentYear <='2020'";

                cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;
                cmdExist.ExecuteNonQuery();

                if (ds.Tables[5] != null && ds.Tables[5].Rows.Count > 0)
                    CurrentYear = ds.Tables[5].Rows[0][0].ToString();

                sqlText = "  ";

                sqlText += " SELECT     * FROM Codes";
                sqlText += " WHERE     (CodeGroup =@CodeGroup) AND (CodeName = @CodeName)";

                cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;


                cmdExist.Parameters.AddWithValue("@CodeGroup", CodeGroup);
                cmdExist.Parameters.AddWithValue("@CodeName", CodeName);

                //FileLogger.Log("CommonDAL", "CodeGeneration", "CodeGroup : " + CodeGroup + " CodeName : " + CodeName);


                dataAdapter = new SqlDataAdapter(cmdExist);
                dataAdapter.Fill(dt1);
                if (dt1 == null || dt1.Rows.Count <= 0)
                {
                    throw new ArgumentNullException(MessageVM.CodeNotFound, "CodeNotFound");
                }
                else
                {
                    CodePreFix = dt1.Rows[0]["prefix"].ToString();
                    CodeLength = Convert.ToInt32(dt1.Rows[0]["Lenth"]);
                }

                sqlText = "  ";
                sqlText += @" 
SELECT top 1 
Id
,CurrentYear
,BranchId
,Prefix
,ISNULL(LastId,0) LastId
FROM CodeGenerations 
WHERE CurrentYear=@CurrentYear AND BranchId=@BranchId AND Prefix=@Prefix order by LastId Desc
";


                cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;

                cmdExist.Parameters.AddWithValue("@BranchId", BranchId);
                cmdExist.Parameters.AddWithValue("@CurrentYear", CurrentYear);
                cmdExist.Parameters.AddWithValue("@Prefix", CodePreFix);


                dataAdapter = new SqlDataAdapter(cmdExist);
                dataAdapter.Fill(dt2);

                if (dt2 == null || dt2.Rows.Count <= 0)
                {
                    sqlText = "  ";
                    sqlText +=
                        " INSERT INTO CodeGenerations(	CurrentYear,BranchId,Prefix,LastId)";
                    sqlText += " VALUES(";
                    sqlText += " @CurrentYear,";
                    sqlText += " @BranchId,";
                    sqlText += " @Prefix,";
                    sqlText += " 1";
                    sqlText += " )";

                    SqlCommand cmdExist1 = new SqlCommand(sqlText, currConn);
                    cmdExist1.Transaction = transaction;

                    cmdExist1.Parameters.AddWithValue("@BranchId", BranchId);
                    cmdExist1.Parameters.AddWithValue("@CurrentYear", CurrentYear);
                    cmdExist1.Parameters.AddWithValue("@Prefix", CodePreFix);

                    object objfoundId1 = cmdExist1.ExecuteNonQuery();

                    nextNumber = 1;
                }
                else
                {
                    if (nextNumber != 1)
                    {
                        nextNumber = dt2.Rows[0]["LastId"] == null ? 1 : Convert.ToInt32(dt2.Rows[0]["LastId"]) + 1;
                    }

                    sqlText = "  ";
                    sqlText += " update  CodeGenerations set LastId='" + nextNumber + "'";
                    sqlText += " WHERE CurrentYear=@CurrentYear AND BranchId=@BranchId AND Prefix=@Prefix";


                    cmdExist = new SqlCommand(sqlText, currConn);
                    cmdExist.Transaction = transaction;

                    cmdExist.Parameters.AddWithValue("@BranchId", BranchId);
                    cmdExist.Parameters.AddWithValue("@CurrentYear", CurrentYear);
                    cmdExist.Parameters.AddWithValue("@Prefix", CodePreFix);
                    cmdExist.ExecuteNonQuery();

                }
                #endregion

                NewCode = CodeGeneration1(CodeGenerationMonthYearFormat, BranchNumber, CodeGenerationFormat, BranchCode, CodeLength, nextNumber, CodePreFix, TransactionDate, connVM);

                if (WithNumber)
                {
                    NewCode = CodeGenerationMonthYearFormat + "~" + BranchNumber + "~" + CodeGenerationFormat + "~" + BranchCode + "~" + CodeLength + "~" + nextNumber + "~" + CodePreFix + "~" + TransactionDate + "~" + CurrentYear;
                }

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }
            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "CodeGeneration", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }


            #endregion

            #region Results

            return NewCode;
            #endregion

        }

        public string CodeGeneration1(string CodeGenerationMonthYearFormat, string BranchNumber, string CodeGenerationFormat, string BranchCode, int CodeLength
            , int nextNumber, string CodePreFix, string TransactionDate, SysDBInfoVMTemp connVM = null)
        {
            string NewCode = "";

            #region try

            try
            {
                CodeGenerationMonthYearFormat = CodeGenerationMonthYearFormat.Replace("Y", "y");
                if (Convert.ToInt32(BranchNumber) <= 1)
                {
                    CodeGenerationFormat = CodeGenerationFormat.Replace("B/", "");
                }

                CodeGenerationFormat = CodeGenerationFormat.Substring(0, CodeGenerationFormat.Length - 1);

                var my = Convert.ToDateTime(TransactionDate).ToString(CodeGenerationMonthYearFormat);
                var nextNumb = nextNumber.ToString().PadLeft(CodeLength, '0');
                CodeGenerationFormat = CodeGenerationFormat.Replace("N", nextNumb);
                CodeGenerationFormat = CodeGenerationFormat.Replace("Y", my);
                CodeGenerationFormat = CodeGenerationFormat.Replace("B", BranchCode);

                NewCode = CodePreFix + "-" + CodeGenerationFormat;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "CodeGeneration1", ex.ToString());

                throw ex;
            }
            #endregion

            return NewCode;

        }

        //currConn to VcurrConn 25-Aug-2020
        public string GetCurrentCode(string CodeGroup, string CodeName, string TransactionDate, string BranchId, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string NewCode = "";
            string CodePreFix = "";
            string CodeGenerationFormat = "B/N/Y";
            string CodeGenerationMonthYearFormat = "MMYY";
            string BranchCode = "001";
            string CurrentYear = "2020";
            string BranchNumber = "1";
            int CodeLength = 0;
            string sqlText = "";
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            DataSet ds = new DataSet();
            string year = Convert.ToDateTime(TransactionDate).ToString("yyyy");

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region try

            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region SettingsExist

                sqlText = "  ";

                sqlText += " SELECT   top 1  SettingName FROM Settings";
                sqlText += " WHERE     (SettingGroup ='CodeGenerationFormat') and   (SettingValue ='Y')  ";

                sqlText += " SELECT   top 1  SettingName FROM Settings";
                sqlText += " WHERE     (SettingGroup ='CodeGenerationMonthYearFormat') and   (SettingValue ='Y')  ";

                sqlText += " SELECT   top 1  BranchCode FROM BranchProfiles";
                sqlText += " WHERE     (BranchID ='" + BranchId + "')   ";

                sqlText += " SELECT   count(BranchCode) BranchNumber FROM BranchProfiles where IsArchive='0' and ActiveStatus='Y'";

                sqlText += "  SELECT   * from  CodeGenerations where CurrentYear<='2020' ";
                sqlText += "  select CurrentYear from FiscalYear where '" + Convert.ToDateTime(TransactionDate).ToString("dd/MMM/yyyy") + "' between PeriodStart and PeriodEnd ";

                SqlCommand cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmdExist);
                dataAdapter.Fill(ds);


                if (ds.Tables[0] != null || ds.Tables[0].Rows.Count > 0)
                    CodeGenerationFormat = ds.Tables[0].Rows[0][0].ToString();

                if (ds.Tables[1] != null || ds.Tables[1].Rows.Count > 0)
                    CodeGenerationMonthYearFormat = ds.Tables[1].Rows[0][0].ToString();
                if (ds.Tables[2] != null || ds.Tables[2].Rows.Count > 0)
                    BranchCode = ds.Tables[2].Rows[0][0].ToString();

                if (ds.Tables[3] != null || ds.Tables[3].Rows.Count > 0)
                    BranchNumber = ds.Tables[3].Rows[0][0].ToString();

                //if (ds.Tables[4] == null || ds.Tables[4].Rows.Count <= 0)
                //{
                sqlText = "  ";
                sqlText += "  update CodeGenerations set CurrentYear ='2020'  where CurrentYear <='2020'";

                cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;
                cmdExist.ExecuteNonQuery();
                //}
                if (ds.Tables[5] != null || ds.Tables[5].Rows.Count > 0)
                    CurrentYear = ds.Tables[5].Rows[0][0].ToString();

                sqlText = "  ";

                sqlText += " SELECT     * FROM Codes";
                sqlText += " WHERE     (CodeGroup =@CodeGroup) AND (CodeName = @CodeName)";

                cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;


                cmdExist.Parameters.AddWithValue("@CodeGroup", CodeGroup);
                cmdExist.Parameters.AddWithValue("@CodeName", CodeName);

                dataAdapter = new SqlDataAdapter(cmdExist);
                dataAdapter.Fill(dt1);
                if (dt1 == null || dt1.Rows.Count <= 0)
                {
                    throw new ArgumentNullException(MessageVM.CodeNotFound, "CodeNotFound");
                }
                else
                {
                    CodePreFix = dt1.Rows[0]["prefix"].ToString();
                    CodeLength = Convert.ToInt32(dt1.Rows[0]["Lenth"]);
                }

                sqlText = "  ";
                sqlText += " SELECT top 1 * FROM CodeGenerations ";
                sqlText += " WHERE CurrentYear=@CurrentYear AND BranchId=@BranchId AND Prefix=@Prefix order by LastId Desc";


                cmdExist = new SqlCommand(sqlText, currConn);
                cmdExist.Transaction = transaction;

                cmdExist.Parameters.AddWithValue("@BranchId", BranchId);
                cmdExist.Parameters.AddWithValue("@CurrentYear", CurrentYear);
                cmdExist.Parameters.AddWithValue("@Prefix", CodePreFix);


                dataAdapter = new SqlDataAdapter(cmdExist);
                dataAdapter.Fill(dt2);


                if (dt2.Rows.Count > 0)
                {
                    NewCode = dt2.Rows[0]["LastId"].ToString();
                }


                #endregion try

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion


                return NewCode + "~" + CurrentYear;

            }

            #endregion

            #region Catch and Finall

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "UpdateIntialAvgPrice", ex.ToString() + "\n" + sqlText);
                FileLogger.LogWeb("CommonDAL", "UpdateIntialAvgPrice", ex.ToString() + "\n" + sqlText);

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }


            #endregion

            #region Results

            return NewCode;
            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public string TransactionCodeBom(string VATName, string Year, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            decimal retResults = 0;
            int countId = 0;
            string sqlText = "";
            int CurrentID = 0;
            string newID = "";
            string postFix;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(VATName))
                {
                    throw new ArgumentNullException("VATName", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(Year))
                {
                    throw new ArgumentNullException("Year", "Unable to Create ID(2)");

                }

                #endregion Validation

                #region open connection and transaction
                //if (VcurrConn == null)
                //{
                //    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                //    if (VcurrConn.State != ConnectionState.Open)
                //    {
                //        VcurrConn.Open();
                //    }
                //}

                #endregion open connection and transaction

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region SetupLen

                sqlText = "";
                sqlText = sqlText + @"
                                    declare @VATName as varchar(100)
                                    declare @Year as varchar(100)";

                sqlText = sqlText + @"set @Year='" + Year + "'";
                sqlText = sqlText + @" set @VATName='" + VATName + "'";

                sqlText = sqlText + @" select  Count(Bomid)+1 Number from BOMs
                                    where VATName=@VATName
                                    and YEAR( EffectDate)=YEAR(@Year)";

                SqlCommand cmdSetupLen = new SqlCommand(sqlText, currConn);
                cmdSetupLen.Transaction = transaction;
                CurrentID = Convert.ToInt32(cmdSetupLen.ExecuteScalar());
                if (CurrentID < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgUnableCreatID);
                }

                #endregion SetupLen

                #region ID Create
                postFix = CurrentID.ToString().PadLeft(4, '0');


                newID = Year.ToString() + "/" + postFix;

                if (string.IsNullOrEmpty(newID))
                {
                    throw new ArgumentNullException("TransactionCodeGenerator", "Unable to Create ID");
                }
                #endregion ID Create

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion


            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TransactionCodeBom", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TransactionCodeBom", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }
            }

            #endregion Catch and Finall

            #region Results

            return newID;

            #endregion

        }

        public void BranchCheck(SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;

            string stringSQL = "";

            #endregion

            #region try

            try
            {
                currConn = _dbsqlConnection.GetConnectionNoTimeOut(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction(MessageVM.issueMsgMethodNameInsert);

                #region BranchProfiles
                string BranchPofileSql = @"IF OBJECT_ID (N'BranchProfiles', N'U') IS NOT NULL 
                                    SELECT 1 AS res ELSE SELECT 0 AS res";
                SqlCommand cmdExist = new SqlCommand(BranchPofileSql, currConn, transaction);
                //cmdExist.Transaction = transaction;
                transResult = (int)cmdExist.ExecuteScalar();

                if (transResult <= 0)
                {
                    #region branch create

                    BranchPofileSql = @"CREATE TABLE [dbo].[BranchProfiles](
	[BranchID] [int] NOT NULL,
	[BranchCode] [varchar](120) NOT NULL,
	[BranchName] [varchar](120) NOT NULL,
	[BranchLegalName] [varchar](120) NULL,
	[Address] [varchar](500) NULL,
	[City] [varchar](50) NULL,
	[ZipCode] [varchar](50) NULL,
	[TelephoneNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ContactPerson] [varchar](120) NULL,
	[ContactPersonDesignation] [varchar](120) NULL,
	[ContactPersonTelephone] [varchar](50) NULL,
	[ContactPersonEmail] [varchar](50) NULL,
	[VatRegistrationNo] [varchar](50) NULL,
	[BIN] [varchar](50) NULL,
	[TINNo] [varchar](50) NULL,
	[Comments] [varchar](200) NULL,
	[ActiveStatus] [varchar](1) NOT NULL,
	[CreatedBy] [varchar](120) NULL,
	[CreatedOn] [datetime] NULL,
	[LastModifiedBy] [varchar](120) NULL,
	[LastModifiedOn] [datetime] NULL,
	[IsArchive] [bit] NULL,
 CONSTRAINT [PK_BranchProfiles] PRIMARY KEY CLUSTERED 
(
	[BranchID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

--insert into BranchProfiles(BranchID,BranchCode,BranchName,BranchLegalName,Address
--,City,ZipCode,TelephoneNo,FaxNo,Email,ContactPerson,ContactPersonDesignation,ContactPersonTelephone,ContactPersonEmail
--,VatRegistrationNo,BIN,TINNo,Comments,ActiveStatus,CreatedBy,CreatedOn,LastModifiedBy,LastModifiedOn,IsArchive)
--select '1','001',CompanyName,CompanyLegalName,Address1,City,ZipCode,TelephoneNo,FaxNo,Email,ContactPerson,
--ContactPersonDesignation,ContactPersonTelephone,ContactPersonEmail,VatRegistrationNo,'-',TINNo,Comments,ActiveStatus
--,CreatedBy,CreatedOn,LastModifiedBy,LastModifiedOn,0 from CompanyProfiles
";

                    transResult = commonDal.NewTableAdd("BranchProfiles", BranchPofileSql, currConn, transaction, connVM);

                    stringSQL = "";
                    stringSQL = @" insert into BranchProfiles(BranchID,BranchCode,BranchName,BranchLegalName,Address
,City,ZipCode,TelephoneNo,FaxNo,Email,ContactPerson,ContactPersonDesignation,ContactPersonTelephone,ContactPersonEmail
,VatRegistrationNo,BIN,TINNo,Comments,ActiveStatus,CreatedBy,CreatedOn,LastModifiedBy,LastModifiedOn,IsArchive)
select '1','001',CompanyName,CompanyLegalName,Address1,City,ZipCode,TelephoneNo,FaxNo,Email,ContactPerson,
ContactPersonDesignation,ContactPersonTelephone,ContactPersonEmail,VatRegistrationNo,'-',TINNo,Comments,ActiveStatus
,CreatedBy,CreatedOn,LastModifiedBy,LastModifiedOn,0 from CompanyProfiles";

                    ExecuteQuery(stringSQL, currConn, transaction, connVM);
                    #endregion
                }


                #endregion

                #region UserBranch Details
                string UserBranchDetailsSql = @"IF OBJECT_ID (N'UserBranchDetails', N'U') IS NOT NULL 
                                    SELECT 1 AS res ELSE SELECT 0 AS res";
                cmdExist = new SqlCommand(UserBranchDetailsSql, currConn, transaction);
                //cmdExist.Transaction = transaction;
                transResult = (int)cmdExist.ExecuteScalar();
                #region UserBranchCreate
                if (transResult <= 0)
                {
                    UserBranchDetailsSql = @"CREATE TABLE [dbo].[UserBranchDetails](
	                [Id] [int] IDENTITY(1,1) NOT NULL,
	                [UserId] [int] NOT NULL,
	                [BranchId] [int] NOT NULL,
	                [Comments] [varchar](50) NULL,
	                [CreatedBy] [varchar](50) NULL,
	                [CreatedOn] [datetime] NULL,
	                [LasatModifiedBy] [varchar](50) NULL,
	                [LastModifiedOn] [datetime] NULL,
                         CONSTRAINT [PK_UserBranchDetails] PRIMARY KEY CLUSTERED 
                        (
	                    [Id] ASC
                        )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                        ) ON [PRIMARY];
                --insert into UserBranchDetails(UserId,BranchId) select UserId,1 from UserInformations where UserName='admin'
                    ";
                    transResult = commonDal.NewTableAdd("UserBranchDetails", UserBranchDetailsSql, currConn, transaction, connVM);
                    stringSQL = "";
                    stringSQL = @" insert into UserBranchDetails(UserId,BranchId) select UserId,1 from UserInformations where UserName='admin'";

                    ExecuteQuery(stringSQL, currConn, transaction, connVM);

                }


                #endregion
                #endregion

                //if (transResult > 0)
                //{
                transaction.Commit();
                //}
            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                transaction.Rollback();

                FileLogger.Log("CommonDAL", "UpdateIntialAvgPrice", ex.ToString());

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + "sqlText" + FieldDelimeter + ex.Message.ToString());
            }

            #endregion

            #region finally

            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

        }
        public void AddUserInfo(SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();

            int transResult = 0;

            #endregion

            #region try

            try
            {
                currConn = _dbsqlConnection.GetConnectionNoTimeOut(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction(MessageVM.issueMsgMethodNameInsert);
                transResult = commonDal.TableFieldAdd("UserInformations", "IsLock", "bit", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "WromgAttempt", "int", currConn, transaction, "", connVM);
                commonDal.TableFieldAlter("UserInformations", "LastPasswordChangeDate", "datetime", currConn, transaction, connVM);
                SettingDAL settingDal = new SettingDAL();

                #region DataTable Insert

                DataTable dtInsert = new DataTable();
                dtInsert.Columns.Add("SettingGroup");
                dtInsert.Columns.Add("SettingName");
                dtInsert.Columns.Add("SettingType");
                dtInsert.Columns.Add("SettingValue");

                #endregion

                #region DataTable Delete

                DataTable dtDelete = new DataTable();
                dtDelete.Columns.Add("SettingGroup");
                dtDelete.Columns.Add("SettingName");

                #endregion



                dtInsert.Rows.Add("Password", "MinimumLengthCheck", "bool", "N");
                dtInsert.Rows.Add("Password", "MinimumLength", "int", "4");
                dtInsert.Rows.Add("Password", "MixPasswordCheck", "bool", "N");
                dtInsert.Rows.Add("Password", "MaxWrongLoginCheck", "bool", "N");
                dtInsert.Rows.Add("Password", "MaxWrongLoginTime", "int", "10");
                dtInsert.Rows.Add("Password", "ChangePolicyCheck", "bool", "N");
                dtInsert.Rows.Add("Password", "ChangeDate", "int", "120");
                dtInsert.Rows.Add("Password", "CaptureCheck", "bool", "N");
                settingsBulkUpdate(dtInsert, dtDelete, connVM);


                if (transaction != null)
                {
                    transaction.Commit();
                }
            }
            #endregion

            #region catch
            catch (Exception ex)
            {
                transaction.Rollback();

                FileLogger.Log("CommonDAL", "AddBranchInfo", ex.ToString());

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + "sqlText" + FieldDelimeter + ex.Message.ToString());

                //////throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

        }

        public void AddBranchInfo(SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();

            int transResult = 0;

            #endregion

            #region try

            try
            {
                currConn = _dbsqlConnection.GetConnectionNoTimeOut(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction(MessageVM.issueMsgMethodNameInsert);
                transResult = commonDal.TableFieldAdd("UserInformations", "IsLock", "bit", currConn, transaction, "'Y'", connVM);
                transResult = commonDal.TableFieldAdd("UserInformations", "WromgAttempt", "int", currConn, transaction, "", connVM);

                transResult = commonDal.TableFieldAdd("BranchProfiles", "IP", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "DbName", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "Id", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "Pass", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "DbType", "varchar(100)", currConn, transaction, "'oracle'", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "IsWCF", "varchar(1)", currConn, transaction, "'N'", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "IntegrationCode", "varchar(100)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "IsCentral", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "BranchBanglaLegalName", "nvarchar(250)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("BranchProfiles", "BanglaAddress", "nvarchar(500)", currConn, transaction, "", connVM);


                transResult = commonDal.TableFieldAdd("UserInformations", "IsMainSettings", "varchar(1)", currConn, transaction, "'Y'", connVM);

                transResult = commonDal.TableFieldAdd("CompanyProfiles", "AppVersion", "nvarchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "License", "varchar(1000)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "Section", "varchar(200)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "IsVDSWithHolder", "varchar(1)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "BusinessNature", "varchar(300)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "BIN", "varchar(50)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "AccountingNature", "varchar(300)", currConn, transaction, "", connVM);
                transResult = commonDal.TableFieldAdd("CompanyProfiles", "CompanyType", "varchar(100)", currConn, transaction, "", connVM);

                if (transaction != null)
                {
                    transaction.Commit();
                }
            }
            #endregion

            #region catch
            catch (Exception ex)
            {
                transaction.Rollback();

                FileLogger.Log("CommonDAL", "AddBranchInfo", ex.ToString());

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + "sqlText" + FieldDelimeter + ex.Message.ToString());

                //////throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        private void UpdateSalesDetails(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            string sqlText;
            sqlText = @"If exists( SELECT  K.TABLE_NAME ,
    K.COLUMN_NAME ,
    K.CONSTRAINT_NAME
FROM    INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K ON C.TABLE_NAME = K.TABLE_NAME
                                                         AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG
                                                         AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA
                                                         AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME
WHERE  K.CONSTRAINT_NAME = 'PK_SalesInvoiceDetails_1' 

		AND K.TABLE_NAME = 'SalesInvoiceDetails')
begin
	ALTER TABLE [dbo].[SalesInvoiceDetails] DROP CONSTRAINT [PK_SalesInvoiceDetails_1]
end


If exists( SELECT  K.TABLE_NAME ,
    K.COLUMN_NAME ,
    K.CONSTRAINT_NAME
FROM    INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K ON C.TABLE_NAME = K.TABLE_NAME
                                                         AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG
                                                         AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA
                                                         AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME
WHERE    K.CONSTRAINT_NAME = 'FK_SalesInvoiceDetails_Products1'  

		AND K.TABLE_NAME = 'SalesInvoiceDetails')
begin
		ALTER TABLE [dbo].[SalesInvoiceDetails] DROP CONSTRAINT [FK_SalesInvoiceDetails_Products1]

end

If exists( SELECT  K.TABLE_NAME ,
    K.COLUMN_NAME ,
    K.CONSTRAINT_NAME
FROM    INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K ON C.TABLE_NAME = K.TABLE_NAME
                                                         AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG
                                                         AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA
                                                         AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME
WHERE    K.CONSTRAINT_NAME = 'FK_SalesInvoiceDetails_SalesInvoiceHeaders1'  

		AND K.TABLE_NAME = 'SalesInvoiceDetails')
begin
		ALTER TABLE [dbo].[SalesInvoiceDetails] DROP CONSTRAINT [FK_SalesInvoiceDetails_SalesInvoiceHeaders1]

end

If not exists( SELECT  K.TABLE_NAME ,
    K.COLUMN_NAME ,
    K.CONSTRAINT_NAME
FROM    INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C
        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K ON C.TABLE_NAME = K.TABLE_NAME
                                                         AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG
                                                         AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA
                                                         AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME
WHERE   C.CONSTRAINT_TYPE = 'Primary KEY'

		AND K.TABLE_NAME = 'SalesInvoiceDetails')
begin
	ALTER TABLE SalesInvoiceDetails
	ADD PRIMARY KEY (Id);
end";
            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM);
        }

        //currConn to VcurrConn 25-Aug-2020
        private void UpdateSalesDetailsPK(Dictionary<string, string> tableColumns, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            string sqlText;
            sqlText = @"
declare @con as varchar(1000)
declare @com as varchar(1000)
declare @key as varchar(1000)

SELECT     @con =   K.CONSTRAINT_NAME
FROM      INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K  
	where K.TABLE_NAME = @tableName and K.COLUMN_NAME = @columnName;

if @con is not null or @con != ''
begin
 set @com = 'ALTER TABLE dbo.'+@tableName+' DROP CONSTRAINT ' + @con

 execute(@com)
end

 set @key = 'ALTER TABLE '+@tableName+'
	ADD PRIMARY KEY (Id)';

	execute(@key)
";

            var cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);


            foreach (var key in tableColumns.Keys)
            {
                try
                {
                    cmd.Parameters.AddWithValue("@tableName", key);
                    cmd.Parameters.AddWithValue("@columnName", tableColumns[key]);

                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters.Count > 0)
                    {
                        cmd.Parameters.Clear();

                    }

                }
                catch (Exception e)
                {
                    if (cmd.Parameters.Count > 0)
                    {
                        cmd.Parameters.Clear();

                    }

                }
            }


        }

        #endregion

        #region Methods 04

        public void Update_Fields(string sqlText, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            //string sqlText = "";

            #region SQL Text

            #endregion

            #region Execution

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM);

            #endregion

        }

        public void Update_AppVersion(Version version, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text

            //Version version = Assembly.GetExecutingAssembly().GetName().Version;

            CompanyprofileDAL companyprofileDAL = new CompanyprofileDAL();


            DataTable dtCompany = companyprofileDAL.SelectAll();
            string VersionMinor = Convert.ToString(version.Minor);
            string VersionBuild = Convert.ToString(version.Build);

            if (version.Minor < 10)
            {
                VersionMinor = "0" + version.Minor;

            }
            if (version.Build < 10)
            {
                VersionBuild = "0" + version.Build;
            }
            string appVersion = "" + version.Major + VersionMinor + VersionBuild + version.Revision;

            sqlText = @"

update CompanyProfiles set AppVersion = '" + appVersion + "'";


            if (dtCompany.Rows[0]["AppVersion"].ToString() == "-")
            {
                ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction);
            }
            else
            {
                int dbVersion = Convert.ToInt32(dtCompany.Rows[0]["AppVersion"]);
                int currentVersion = Convert.ToInt32(appVersion);

                if (dbVersion < currentVersion)
                {
                    ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM);
                }
            }



            #endregion

            #region Execution


            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public void Update_PeriodId(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text

            sqlText = @"

update  DisposeRaws                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(TransactionDateTime)) +  CONVERT(VARCHAR(4),YEAR(TransactionDateTime)),6)
where PeriodId is null or PeriodId = ''

update  DisposeRawDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(TransactionDateTime)) +  CONVERT(VARCHAR(4),YEAR(TransactionDateTime)),6)
where PeriodId is null or PeriodId = ''



update  AdjustmentHistorys                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(AdjDate)) +  CONVERT(VARCHAR(4),YEAR(AdjDate)),6)
where PeriodId is null or PeriodId = ''


update  DutyDrawBackDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(DDBackDate)) +  CONVERT(VARCHAR(4),YEAR(DDBackDate)),6)
where PeriodId is null or PeriodId = ''


update  DutyDrawBackHeader                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(DDBackDate)) +  CONVERT(VARCHAR(4),YEAR(DDBackDate)),6)
where PeriodId is null or PeriodId = ''


update  PurchaseInvoiceHeaders                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDate)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDate)),6)
where PeriodId is null or PeriodId = ''


update  PurchaseInvoiceDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDate)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDate)),6)
where PeriodId is null or PeriodId = ''


update  SalesInvoiceHeaders                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(InvoiceDateTime)) +  CONVERT(VARCHAR(4),YEAR(InvoiceDateTime)),6)
where PeriodId is null or PeriodId = ''


update  BureauSalesInvoiceDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(InvoiceDateTime)) +  CONVERT(VARCHAR(4),YEAR(InvoiceDateTime)),6)
where PeriodId is null or PeriodId = ''


update  SalesInvoiceDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(InvoiceDateTime)) +  CONVERT(VARCHAR(4),YEAR(InvoiceDateTime)),6)
where PeriodId is null or PeriodId = ''


update  Deposits                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(DepositDateTime)) +  CONVERT(VARCHAR(4),YEAR(DepositDateTime)),6)
where PeriodId is null or PeriodId = ''


update  VDS                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(DepositDate)) +  CONVERT(VARCHAR(4),YEAR(DepositDate)),6)
where PeriodId is null or PeriodId = ''



update  TransferIssues                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(TransactionDateTime)) +  CONVERT(VARCHAR(4),YEAR(TransactionDateTime)),6)
where PeriodId is null or PeriodId = ''

update  TransferIssueDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(TransactionDateTime)) +  CONVERT(VARCHAR(4),YEAR(TransactionDateTime)),6)
where PeriodId is null or PeriodId = ''


update  ReceiveHeaders                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDateTime)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDateTime)),6)
where PeriodId is null or PeriodId = ''

update  ReceiveDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDateTime)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDateTime)),6)
where PeriodId is null or PeriodId = ''

update  IssueHeaders                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(IssueDateTime)) +  CONVERT(VARCHAR(4),YEAR(IssueDateTime)),6)
where PeriodId is null or PeriodId = ''


update  IssueDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(IssueDateTime)) +  CONVERT(VARCHAR(4),YEAR(IssueDateTime)),6)
where PeriodId is null or PeriodId = ''



update  TransferReceives                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(TransactionDateTime)) +  CONVERT(VARCHAR(4),YEAR(TransactionDateTime)),6)
where PeriodId is null or PeriodId = ''


update  TransferReceiveDetails                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(TransactionDateTime)) +  CONVERT(VARCHAR(4),YEAR(TransactionDateTime)),6)
where PeriodId is null or PeriodId = ''

update  Toll6_3Invoices                             
set PeriodID=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(TollDateTime)) +  CONVERT(VARCHAR(4),YEAR(TollDateTime)),6)
where PeriodID is null or PeriodID = ''

";

            #endregion

            #region Execution

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM, 500);

            #endregion

        }

        public void Update_RebatePeriodID(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text

            sqlText = @"

Update PurchaseInvoiceDetails set RebatePeriodID=PeriodID
where RebatePeriodID=0 and IsRebate='Y'

";

            #endregion

            #region Execution

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM);

            #endregion

        }


        public void Update_FiscalYear(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text

            sqlText = @"

update PurchaseInvoiceHeaders set FiscalYear=fyr.CurrentYear
From PurchaseInvoiceHeaders pih
left outer join  FiscalYear fyr on pih.PeriodID=fyr.PeriodID
where 1=1 and pih.FiscalYear is null


update SalesInvoiceHeaders set FiscalYear=fyr.CurrentYear
From SalesInvoiceHeaders sih
left outer join  FiscalYear fyr on sih.PeriodID=fyr.PeriodID
where 1=1 and sih.FiscalYear is null


update ReceiveHeaders set FiscalYear=fyr.CurrentYear
From ReceiveHeaders rhr
left outer join  FiscalYear fyr on rhr.PeriodID=fyr.PeriodID
where 1=1 and rhr.FiscalYear is null


update IssueHeaders set FiscalYear=fyr.CurrentYear
From IssueHeaders ihr
left outer join  FiscalYear fyr on ihr.PeriodID=fyr.PeriodID
where 1=1 and ihr.FiscalYear is null




update TransferIssues set FiscalYear=fyr.CurrentYear
From TransferIssues inv
left outer join  FiscalYear fyr on inv.PeriodID=fyr.PeriodID
where 1=1 and inv.FiscalYear is null


update TransferReceives set FiscalYear=fyr.CurrentYear
From TransferReceives inv
left outer join  FiscalYear fyr on inv.PeriodID=fyr.PeriodID
where 1=1 and inv.FiscalYear is null



update Deposits set FiscalYear=fyr.CurrentYear
From Deposits inv
left outer join  FiscalYear fyr on inv.PeriodID=fyr.PeriodID
where 1=1 and inv.FiscalYear is null


";

            #endregion

            #region Execution

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM, 600);

            #endregion

        }

        public void Update_AVGPriceTable(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text


            sqlText = "select count(SL) from ProductAvgPrice";



            SqlCommand cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);

            int rows = Convert.ToInt32(cmd.ExecuteScalar());

            if (rows > 0)
                return;


            sqlText = @"

--select min(PeriodStart) from FiscalYear
--where CurrentYear in (select CurrentYear from FiscalYear
--where GETDATE() >= PeriodStart and GETDATE() <= PeriodEnd)

select StartDateTime from CompanyProfiles

";

            cmd.CommandText = sqlText;



            DateTime agvDateTime = Convert.ToDateTime(cmd.ExecuteScalar());


            ProductDAL productDal = new ProductDAL();
            CommonDAL commonDal = new CommonDAL();

            List<ProductVM> allProdcuts = productDal.SelectAll("0", new[] { "Pc.IsRaw!=" }, new[] { "OverHead" }, VcurrConn, Vtransaction, null, connVM, null);


            var ProductAvgPriceRows = allProdcuts.Select(x => new
            {
                x.ItemNo,
                AgvPriceDate = agvDateTime,
                PurchaseQty = 0,
                PurchaseValue = 0,
                RuntimeQty = 0,
                RuntimeTotal = 0,
                AvgPrice = 0
            });


            DataTable dtAvgPrices = JsonConvert.DeserializeObject<DataTable>(JsonConvert.SerializeObject(ProductAvgPriceRows));

            string[] results = commonDal.BulkInsert("ProductAvgPrice", dtAvgPrices, VcurrConn, Vtransaction, 10000, null, connVM);



            #endregion


        }

        public void Update_ChannelTable(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text


            sqlText = "select count(Id) from Channel";



            SqlCommand cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);

            int rows = Convert.ToInt32(cmd.ExecuteScalar());

            if (rows > 0)
                return;


            sqlText = @"

INSERT INTO Channel (Code, Name)
Select distinct  DataSource,DataSource From SalesInvoiceHeaders
where DataSource  is not null 

";

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM, 600);



            #endregion


        }

        public void Update_CodeToCode_TransactionType(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text


            sqlText = @"

update ProductTransfers set 
TransactionType= 
(CASE
when IsWastage = 'Y' then 'WastageCTC' else 'RawCTC'
END)
where TransactionType is null


update ProductTransfersDetails set TransactionType = pt.TransactionType
from ProductTransfersDetails pd join ProductTransfers pt on pd.ProductTransferId = pt.Id
where pd.transactionType  is null

";

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM);


            #endregion


        }


        public void Update_ProductType(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text


            sqlText = @"

update ProductCategories set ReportType='VAT6_2'
where IsRaw in ( 'Finish','Export')
and nullif(ReportType,'') is null
update ProductCategories set ReportType='VAT6_1'
where IsRaw in ('Raw','packing','pack')
and  nullif(ReportType,'')  is null
update ProductCategories set ReportType='VAT6_1_And_6_2'
where IsRaw in ('Overhead','Service','Service(NonStock)','NonInventory')
and  nullif(ReportType,'')  is null
update ProductCategories set ReportType='VAT6_2_1'
where IsRaw in ('Trading')
and  nullif(ReportType,'')  is null
update ProductCategories set ReportType='VAT6_1_And_6_2'
where IsRaw in ('WIP')
and  nullif(ReportType,'')  is null

update products set ReportType = ProductCategories.ReportType 
from ProductCategories
where ProductCategories.CategoryID=products.CategoryID
and nullif( products.ReportType,'')  is null

";

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction);


            #endregion


        }

        public void Update_OpeningStock(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            string sqlText = "";

            #region SQL Text


            sqlText = @"

update products set OpeningTotalCost = stock.StockValue, OpeningBalance = stock.StockQuantity
from (
select ItemNo, sum(StockQuantity)StockQuantity, sum(StockValue)StockValue from ProductStocks
group by ItemNo
) stock

where products.ItemNo = stock.ItemNo
and isnull(products.OpeningBalance,0) =0
and isnull(products.OpeningTotalCost,0) =0

";

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM);

            #endregion


        }

        public void Update_CompanyCategoryTable(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                string sqlText = "";

                #region SQL Text

                sqlText = "select count(Id) from CompanyCategory";

                SqlCommand cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);

                int rows = Convert.ToInt32(cmd.ExecuteScalar());

                if (rows <= 0)
                {
                    //return;

                    GetCompanyCategory();

                    ApiDt = ApiDt.DefaultView.ToTable(true, "CATEGORY_ID", "CATEGORY");

                    BulkInsert("CompanyCategory", ApiDt, VcurrConn, Vtransaction, 10000, null, connVM);

                }


                #region Check & Add Other

                sqlText = "select count(Id) from CompanyCategory  where CATEGORY='Other'";

                cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);

                int other = Convert.ToInt32(cmd.ExecuteScalar());

                if (other > 0)
                    return;

                sqlText = @" insert into CompanyCategory(CATEGORY_ID,CATEGORY) values('00','Other')";

                cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);
                cmd.ExecuteNonQuery();

                #endregion

                #endregion
            }
            catch (Exception ex)
            {
                FileLogger.Log("DatabaseTableChanges", "Update_CompanyCategoryTable", ex.Message.ToString() + "\n" + ex.StackTrace.ToString());

            }

        }
        public void Update_ProductAvgTable(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                string sqlText = "";

                #region SQL Text

                sqlText = @"declare @startDatetime datetime

                select @startDatetime=StartDateTime from CompanyProfiles

                update ProductAvgPrice set AgvPriceDate = '1990-01-01 00:00:00'
                where AgvPriceDate = @startDatetime and PurchaseNo is null";

                SqlCommand cmd = new SqlCommand(sqlText, VcurrConn, Vtransaction);
                cmd.ExecuteScalar();



                #endregion
            }
            catch (Exception ex)
            {
                FileLogger.Log("DatabaseTableChanges", "Update_ProductAvgTable", ex.Message.ToString() + "\n" + ex.StackTrace.ToString());

            }

        }

        public void Update_CalcAVGPrice(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                string sqlText = "";

                #region SQL Text

                string value = settings("Purchase", "ProcessAVGPrice", VcurrConn, Vtransaction, connVM);

                if (value == "Y")
                {
                    IssueDAL issueDAL = new IssueDAL();

                    ResultVM vm =
                        issueDAL.UpdateAvgPrice_New_Refresh(new AVGPriceVm() { AvgDateTime = "1990-01-01 00:00:00" },
                            VcurrConn, Vtransaction, connVM);

                    settingsUpdate("Purchase", "ProcessAVGPrice", "N", VcurrConn, Vtransaction, connVM);
                }



                #endregion
            }
            catch (Exception ex)
            {
                FileLogger.Log("DatabaseTableChanges", "Update_ProductAvgTable", ex.Message.ToString() + "\n" + ex.StackTrace.ToString());

            }

        }

        public void GetCompanyCategory()
        {
            try
            {
                string requestMesg = @"<soap:Envelope xmlns:soap=""http://www.w3.org/2003/05/soap-envelope"" xmlns:tem=""http://tempuri.org/"">
   <soap:Header/>
   <soap:Body>
      <tem:Action>
         <!--Optional:-->
         <tem:json>{
""auth"": {
    ""username"":""nbr"",
    ""password"":""nbr@return""
 },
""body"": {
 ""api"":""get_categoryNote8"",
 ""method"":""get"",
 ""list"": [

 ]
 }     
} 
</tem:json>
      </tem:Action>
   </soap:Body>
</soap:Envelope>";

                WebRequest request = (HttpWebRequest)WebRequest.Create(@"http://175.29.140.41:5677/IvasWebService.asmx?op=Action");
                request.Method = "POST";

                byte[] byteArray = Encoding.UTF8.GetBytes(requestMesg);
                request.ContentLength = byteArray.Length;

                request.ContentType = "text/xml;charset=UTF-8";


                Stream datastream = request.GetRequestStream();
                datastream.Write(byteArray, 0, byteArray.Length);
                datastream.Close();

                WebResponse response = request.GetResponse();
                datastream = response.GetResponseStream();

                StreamReader reader = new StreamReader(datastream);
                string responseMessage = reader.ReadToEnd();
                reader.Close();


                XmlDocument soapEnvelopeDocument = new XmlDocument();
                soapEnvelopeDocument.LoadXml(responseMessage);

                XmlNamespaceManager manager = new XmlNamespaceManager(soapEnvelopeDocument.NameTable);

                manager.AddNamespace("soap", "http://schemas.xmlsoap.org/soap/envelope/");
                manager.AddNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                manager.AddNamespace("xsd", "http://www.w3.org/2001/XMLSchema");
                manager.AddNamespace("ar", "http://tempuri.org/");

                XmlNode ITEM = soapEnvelopeDocument.SelectSingleNode("//ar:ActionResult", manager);

                string resultJson = ITEM.InnerText;

                APIresultVM root = JsonConvert.DeserializeObject<APIresultVM>(resultJson);
                List<CompanyCategoryVM> myList = root.response.items.ToList();
                string json = JsonConvert.SerializeObject(myList);
                ApiDt = JsonConvert.DeserializeObject<DataTable>(json);


            }
            catch (Exception ex)
            {
                FileLogger.Log("DatabaseTableChanges", "getCompanyCategory", ex.Message.ToString() + "\n" + ex.StackTrace.ToString());

            }
        }
        //currConn to VcurrConn 25-Aug-2020
        private void UpdateQueryForBranchId(SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            string sqlText = "";
            sqlText = @"
 update  Vendors                             set BranchId=1 where BranchId is null    or BranchId = 0
 update AdjustmentHistorys 					 set BranchId=1 where BranchId is null    or BranchId = 0
 update AdjustmentName						 set BranchId=1 where BranchId is null    or BranchId = 0
 update BanderolProducts					 set BranchId=1 where BranchId is null    or BranchId = 0
 update Banderols							 set BranchId=1 where BranchId is null    or BranchId = 0
 update BankInformations					 set BranchId=1 where BranchId is null    or BranchId = 0
 update BOMCompanyOverhead					 set BranchId=1 where BranchId is null    or BranchId = 0
 update BOMRaws								 set BranchId=1 where BranchId is null    or BranchId = 0
 update BOMs								 set BranchId=1 where BranchId is null    or BranchId = 0
 update BureauSalesInvoiceDetails			 set BranchId=1 where BranchId is null    or BranchId = 0
 update CompanyOverheads					 set BranchId=1 where BranchId is null    or BranchId = 0
 update CompanyOverheadVAT					 set BranchId=1 where BranchId is null    or BranchId = 0
 update Customers							 set BranchId=1 where BranchId is null    or BranchId = 0
 ------update DDBDetails							 set BranchId=1 where BranchId is null    or BranchId = 0
 ------update DDBHeader							 set BranchId=1 where BranchId is null    or BranchId = 0
 update DemandDetails						 set BranchId=1 where BranchId is null    or BranchId = 0
 update DemandHeaders						 set BranchId=1 where BranchId is null    or BranchId = 0
 update Deposits							 set BranchId=1 where BranchId is null    or BranchId = 0
 update DisposeDetails						 set BranchId=1 where BranchId is null    or BranchId = 0
 update DisposeHeaders						 set BranchId=1 where BranchId is null    or BranchId = 0
 update Duties								 set BranchId=1 where BranchId is null    or BranchId = 0
 update DutyDrawBackDetails					 set BranchId=1 where BranchId is null    or BranchId = 0
 update DutyDrawBackHeader					 set BranchId=1 where BranchId is null    or BranchId = 0
 update DutyDrawBacks						 set BranchId=1 where BranchId is null    or BranchId = 0
 update DutyDrawBackSaleInvoices			 set BranchId=1 where BranchId is null    or BranchId = 0
 update IssueDetailBOMs						 set BranchId=1 where BranchId is null    or BranchId = 0
 update IssueDetails						 set BranchId=1 where BranchId is null    or BranchId = 0
 update IssueHeaderBOMs						 set BranchId=1 where BranchId is null    or BranchId = 0
 update IssueHeaders						 set BranchId=1 where BranchId is null    or BranchId = 0
 update PackagingInformations				 set BranchId=1 where BranchId is null    or BranchId = 0
 update PriceService						 set BranchId=1 where BranchId is null    or BranchId = 0
 update Products							 set BranchId=1 where BranchId is null    or BranchId = 0
 update PurchaseInvoiceDetails				 set BranchId=1 where BranchId is null    or BranchId = 0
 update PurchaseInvoiceDuties				 set BranchId=1 where BranchId is null    or BranchId = 0
 update PurchaseInvoiceHeaders				 set BranchId=1 where BranchId is null    or BranchId = 0
 update PurchaseSaleTrackings				 set BranchId=1 where BranchId is null    or BranchId = 0
 update ReceiveDetails						 set BranchId=1 where BranchId is null    or BranchId = 0
 update ReceiveHeaders						 set BranchId=1 where BranchId is null    or BranchId = 0
 update ReportPurchaseRegister				 set BranchId=1 where BranchId is null    or BranchId = 0
 update ProductCategories					 set BranchId=1 where BranchId is null    or BranchId = 0
 update SaleExportInvoices					 set BranchId=1 where BranchId is null    or BranchId = 0
 update SaleExports							 set BranchId=1 where BranchId is null    or BranchId = 0
 update SalesInvoiceDetails					 set BranchId=1 where BranchId is null    or BranchId = 0
 update SalesInvoiceHeaders					 set BranchId=1 where BranchId is null    or BranchId = 0
 update SalesInvoiceHeadersExport			 set BranchId=1 where BranchId is null    or BranchId = 0
 update SDDeposits							 set BranchId=1 where BranchId is null    or BranchId = 0
 update TenderDetails						 set BranchId=1 where BranchId is null    or BranchId = 0
 update TenderHeaders						 set BranchId=1 where BranchId is null    or BranchId = 0
 update Trackings							 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransactionHistorys					 set BranchId=1 where BranchId is null    or BranchId = 0
 update Transactions						 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransferDetails						 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransferIssueDetails				 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransferIssues						 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransferRawDetails					 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransferRawHeaders					 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransferReceiveDetails				 set BranchId=1 where BranchId is null    or BranchId = 0
 update TransferReceives					 set BranchId=1 where BranchId is null    or BranchId = 0
 update Transfers							 set BranchId=1 where BranchId is null    or BranchId = 0
 update VDS									 set BranchId=1 where BranchId is null    or BranchId = 0
 update Vendors								 set BranchId=1 where BranchId is null    or BranchId = 0
";

            ExecuteUpdateQuery(sqlText, VcurrConn, Vtransaction, connVM, 500);
        }

        //currConn to VcurrConn 25-Aug-2020
        public int TableAdd(string TableName, string FieldName, string DataType, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation

                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(FieldName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                else if (string.IsNullOrEmpty(DataType))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                }

                #endregion Validation

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Prefetch

                sqlText = "";

                sqlText += " IF  NOT EXISTS (SELECT * FROM sys.objects ";
                sqlText += " WHERE object_id = OBJECT_ID(N'" + TableName + "') AND type in (N'U'))";

                sqlText += " BEGIN";
                sqlText += " CREATE TABLE " + TableName + "( Id int IDENTITY(1,1)) ";
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);

                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TableAdd", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "UpdateIntialAvgPrice", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int TableFieldIdAdd(string TableName, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }


                #endregion Validation

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction


                #region if exist and not identity
                ////if exist but not identity then deleting the column
                transResult = IsIdIdentity(TableName, currConn, transaction);
                if (transResult == 0)
                {
                    transResult = TableFieldDelete(TableName, "Id", currConn, transaction, connVM);
                }
                #endregion

                #region Prefetch

                sqlText = "";
                sqlText += " if not exists(select * from sys.columns ";
                sqlText += " where Name = N'Id' and Object_ID = Object_ID(N'" + TableName + "'))   ";
                sqlText += " begin";
                sqlText += " ALTER TABLE " + TableName + " ADD Id  int IDENTITY(1,1) ;";
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TableFieldIdAdd", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TableFieldIdAdd", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int IsIdIdentity(string TableName, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }


                #endregion Validation


                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Prefetch

                sqlText = "";
                sqlText = @"if exists(select * from sys.columns 
                    where Name = N'Id' and Object_ID = Object_ID(N'" + TableName + "'))" +
                " select columnproperty(object_id('" + TableName + "'),'Id','IsIdentity') col1 else select 0 col1";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteScalar();

                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "IsIdIdentity", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "IsIdIdentity", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int TableFieldAdd(string TableName, string FieldName, string DataType, SqlConnection VcurrConn, SqlTransaction Vtransaction, string defaultValue = "", SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(FieldName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                else if (string.IsNullOrEmpty(DataType))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                }

                #endregion Validation

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Prefetch

                sqlText = "";
                sqlText += " if not exists(select * from sys.columns ";
                sqlText += " where Name = N'" + FieldName.Replace("[", "").Replace("]", "") + "' and Object_ID = Object_ID(N'" + TableName + "'))   ";
                sqlText += " begin";
                sqlText += " ALTER TABLE " + TableName + " ADD " + FieldName + " " + DataType + "";
                if (!string.IsNullOrWhiteSpace(defaultValue))
                {
                    if (!defaultValue.Contains("'"))
                    {
                        defaultValue = "'" + defaultValue + "'";
                    }
                    sqlText += "  default " + defaultValue + " WITH VALUES";

                }
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);

                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.CommandTimeout = 500;
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion


            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TableFieldAdd", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TableFieldAdd", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int TableFieldDelete(string TableName, string FieldName, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string sqlText = "";
            int transResult = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(FieldName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }


                #endregion Validation

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Prefetch

                sqlText = "";
                sqlText += " if  exists(select * from sys.columns ";
                sqlText += " where Name = N'" + FieldName + "' and Object_ID = Object_ID(N'" + TableName + "'))   ";
                sqlText += " begin";
                sqlText += " ALTER TABLE " + TableName + " DROP COLUMN " + FieldName + ";";
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {

                FileLogger.Log("CommonDAL", "TableFieldDelete", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TableFieldDelete", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public void TableFieldAlter(string TableName, string FieldName, string DataType, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(FieldName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                else if (string.IsNullOrEmpty(DataType))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                }

                #endregion Validation


                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction


                #region Prefetch

                sqlText = "";
                sqlText += " ALTER TABLE " + TableName + " ALTER COLUMN " + FieldName + "   " + DataType + "";
                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                cmdPrefetch.CommandTimeout = 500;
                cmdPrefetch.Transaction = transaction;
                cmdPrefetch.ExecuteScalar();
                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TableFieldAlter", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TableFieldAlter", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }


        //currConn to VcurrConn 25-Aug-2020
        public bool TransactionUsed(string tableName, string tableIdField, string FieldValue, SqlConnection VcurrConn, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            bool sqlResult = false;
            string sqlText = "";
            int CurrentID = 0;



            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(FieldValue))
                {
                    throw new ArgumentNullException("TransactionUsed", "Unable to find FieldValue");

                }
                else if (string.IsNullOrEmpty(tableIdField))
                {
                    throw new ArgumentNullException("TransactionUsed", "Unable to find FieldValue");

                }
                else if (string.IsNullOrEmpty(FieldValue))
                {
                    throw new ArgumentNullException("TransactionUsed", "Unable to find FieldValue");

                }

                #endregion Validation
                #region open connection and transaction
                if (VcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }
                }

                #endregion open connection and transaction

                #region CurrentID
                sqlText = "";
                sqlText += "  SELECT COUNT(" + tableIdField + ") FROM " + tableName + "  ";
                sqlText += " WHERE " + tableIdField + "='" + FieldValue + "'";
                SqlCommand cmdCurrentID = new SqlCommand(sqlText, VcurrConn);
                CurrentID = Convert.ToInt32(cmdCurrentID.ExecuteScalar());

                if (CurrentID > 0)
                {
                    sqlResult = true;
                }
                #endregion CurrentID
            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TransactionUsed", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TransactionUsed", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (VcurrConn.State == ConnectionState.Open)
                    {
                        VcurrConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return sqlResult;

            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public int DataAlreadyUsed(string CompareTable, String CompareField, String CompareWith, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            int retResults = 0;
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {


                #region open connection and transaction
                //if (VcurrConn == null)
                //{
                //    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                //    if (VcurrConn.State != ConnectionState.Open)
                //    {
                //        VcurrConn.Open();
                //    }
                //}

                #endregion open connection and transaction

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction


                #region AvgPrice

                sqlText = "  ";
                sqlText += "  SELECT isnull(COUNT(" + CompareField + "),0) FROM " + CompareTable + "";
                sqlText += "  WHERE " + CompareField + "='" + CompareWith + "'";

                SqlCommand cmdDAU = new SqlCommand(sqlText, currConn);
                cmdDAU.Transaction = transaction;
                if (cmdDAU.ExecuteScalar() == null)
                {
                    retResults = 0;
                }
                else
                {
                    retResults = (int)cmdDAU.ExecuteScalar();
                    //object objDel = cmdDelete.ExecuteScalar();

                }

                #endregion Stock

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion


            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "DataAlreadyUsed", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "DataAlreadyUsed", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

                //if (VcurrConn != null)
                //{
                //    if (VcurrConn.State == ConnectionState.Open)
                //    {
                //        VcurrConn.Close();

                //    }
                //}
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public int DataAlreadyUsedWithoutThis(string CompareTable, String CompareField, String CompareWith, string IdField, string IdValue, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            int retResults = 0;
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {


                #region open connection and transaction
                if (VcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }
                }

                #endregion open connection and transaction

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region AvgPrice

                sqlText = "  ";
                sqlText += "  SELECT isnull(COUNT(" + CompareField + "),0) FROM " + CompareTable + "";
                sqlText += "  WHERE " + CompareField + "='" + CompareWith + "'";
                sqlText += "  and " + IdField + "<>'" + IdValue + "'";


                SqlCommand cmdDAU = new SqlCommand(sqlText, currConn);
                cmdDAU.Transaction = transaction;
                if (cmdDAU.ExecuteScalar() == null)
                {
                    retResults = 0;
                }
                else
                {
                    retResults = (int)cmdDAU.ExecuteScalar();
                    //object objDel = cmdDelete.ExecuteScalar();

                }

                #endregion Stock

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion


            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "DataAlreadyUsedWithoutThis", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "DataAlreadyUsedWithoutThis", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

                //if (VcurrConn != null)
                //{
                //    if (VcurrConn.State == ConnectionState.Open)
                //    {
                //        VcurrConn.Close();

                //    }
                //}
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public string decimal259(object input, SysDBInfoVMTemp connVM = null)
        {
            string result = "0";
            int index;
            string tmp = "0", prefetct = "0", postfix = "0";
            if (string.IsNullOrEmpty(input.ToString()))
            {
                prefetct = input.ToString();
                postfix = "0";
            }
            else if (input.ToString().IndexOf('.') == -1)
            {
                prefetct = input.ToString();
                postfix = "0";
            }
            else
            {
                index = input.ToString().IndexOf('.');
                tmp = input.ToString().Substring(index + 1);
                prefetct = input.ToString().Substring(0, index);

                if (tmp.Length > 9)
                {
                    postfix = tmp.Substring(0, 9);

                }
                else
                {
                    postfix = tmp.Substring(0, tmp.Length);

                }

            }
            var tmpR = prefetct + "." + postfix;
            result = tmpR;
            return result;
        }

        public decimal FormatingDecimal(string input, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string inputValue = input;
            decimal outPutValue = 0;
            string decPointLen = "";
            int DecPlace = 9;

            #endregion

            #region try

            try
            {

                for (int i = 0; i < DecPlace; i++)
                {
                    decPointLen = decPointLen + "0";
                }

                if (Convert.ToDecimal(inputValue) < 1000)
                {
                    var a = "0." + decPointLen + "";
                    //outPutValue = Convert.ToDecimal(Convert.ToDecimal(inpQuantity).ToString("0.0000"));
                    outPutValue = Convert.ToDecimal(inputValue);

                }
                else
                {
                    var a = "0,0." + decPointLen + "";

                    //outPutValue = Convert.ToDecimal(Convert.ToDecimal(inpQuantity).ToString("0,0.0000"));
                    //outPutValue = Convert.ToDecimal(inputValue).ToString(a);
                    outPutValue = Convert.ToDecimal(inputValue);

                }


            }
            #endregion

            #region Catch
            catch (Exception ex)
            {
                string exMessage = ex.Message;
                if (ex.InnerException != null)
                {
                    exMessage = exMessage + Environment.NewLine + ex.InnerException.Message + Environment.NewLine +
                                ex.StackTrace;

                }
                FileLogger.Log("CommonDAL", "FormatingDecimal", ex.ToString());

                throw new Exception(ex.Message);
            }
            #endregion Catch

            return outPutValue;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int TableFieldAddInSys(string TableName, string FieldName, string DataType, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(FieldName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                else if (string.IsNullOrEmpty(DataType))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                }

                #endregion Validation

                #region open connection and transaction

                VcurrConn = _dbsqlConnection.GetConnectionSys(connVM);//

                if (VcurrConn.State != ConnectionState.Open)
                {
                    VcurrConn.Open();
                }

                #endregion open connection and transaction


                #region Prefetch

                sqlText = "";
                sqlText += " if not exists(select * from sys.columns ";
                sqlText += " where Name = N'" + FieldName + "' and Object_ID = Object_ID(N'" + TableName + "'))   ";
                sqlText += " begin";
                sqlText += " ALTER TABLE " + TableName + " ADD " + FieldName + " " + DataType + ";";
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, VcurrConn);
                //cmdPrefetch.ExecuteScalar();
                //cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch


            }

            #endregion try

            #region Catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "TableFieldAddInSys", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "TableFieldAddInSys", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            #endregion

            #region finally
            finally
            {
                if (VcurrConn != null)
                {
                    if (VcurrConn.State == ConnectionState.Open)
                    {
                        VcurrConn.Close();
                    }
                }
            }
            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int DeleteForeignKey(string TableName, string ForeignKeyName, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(ForeignKeyName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create Foreign Key");

                }


                #endregion Validation

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction


                #region Prefetch

                sqlText = "";
                sqlText += " if exists(select * from sys.foreign_keys ";
                sqlText += " where Name = '" + ForeignKeyName + "' )   ";
                sqlText += " begin";
                sqlText += " ALTER TABLE " + TableName + " DROP CONSTRAINT " + ForeignKeyName + " ";
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);

                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "DeleteForeignKey", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "DeleteForeignKey", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }



            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int ExecuteUpdateQuery(string SqlText, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null, int timeOut = 30)
        {
            #region Initializ

            string sqlText = SqlText;
            int transResult = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(SqlText))
                {
                    throw new ArgumentNullException("ExecuteUpdateQuery", "No data found for Update.");

                }

                #endregion Validation

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region SQL Execution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.CommandTimeout = timeOut;
                cmd.Transaction = transaction;
                cmd.ExecuteNonQuery();

                #endregion Prefetch

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "ExecuteUpdateQuery", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "ExecuteUpdateQuery", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return transResult;
        }

        #endregion

        #region Methods 05

        public string GetHardwareID(SysDBInfoVMTemp connVM = null)
        {
            ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from " + "Win32_Processor");
            string processorId = "";
            try
            {

                foreach (ManagementObject share in searcher.Get())
                {
                    if (share.Properties.Count > 0)
                    {
                        foreach (PropertyData PC in share.Properties)
                        {

                            if (PC.Name.ToLower() == "processorid")
                            {
                                processorId = PC.Value.ToString();
                                break;
                            }

                        }
                    }
                }
            }


            catch (Exception exp)
            {
                //MessageBox.Show("can't get data because of the followeing error \n" + exp.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            return processorId;
        }

        public void SetSecurity(string companyId, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";

            #endregion

            #region try

            try
            {
                ReportDSDAL reportDsdal = new ReportDSDAL();
                DataSet ReportResult = reportDsdal.ComapnyProfileSecurity(companyId);

                if (ReportResult.Tables[0].Rows.Count <= 0)
                {
                    return;
                }

                #region Retrive Data

                string cName = ReportResult.Tables[0].Rows[0]["CompanyName"].ToString();
                string cLegalName = ReportResult.Tables[0].Rows[0]["CompanyLegalName"].ToString();
                string vatNo = ReportResult.Tables[0].Rows[0]["VatRegistrationNo"].ToString();
                string hardwareInfo = ReportResult.Tables[0].Rows[0]["Mouse"].ToString();



                string tom = Converter.DESEncrypt(PassPhrase, EnKey, cName);
                string jary = Converter.DESEncrypt(PassPhrase, EnKey, cLegalName);
                string miki = Converter.DESEncrypt(PassPhrase, EnKey, vatNo);
                string mouse = "";

                if (string.IsNullOrEmpty(hardwareInfo))
                {
                    //mouse = GetHardwareID();
                    mouse = GetServerHardwareId(connVM);

                    mouse = Converter.DESEncrypt(PassPhrase, EnKey, mouse);
                }
                else
                {
                    return;

                }

                #endregion Retrive Data

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();

                }
                transaction = currConn.BeginTransaction(MessageVM.saleMsgPostNotSelect);

                if (string.IsNullOrEmpty(hardwareInfo))
                {
                    string updateQuer = "";
                    updateQuer += " Update CompanyProfiles set Tom ='" + tom + "',";
                    updateQuer += " Jary ='" + jary + "', Miki ='" + miki + "', Mouse ='" + mouse + "'";
                    updateQuer += "where CompanyID='" + companyId + "'";

                    transResult = ExecuteUpdateQuery(updateQuer, currConn, transaction, connVM);

                    if (transResult >= 0)
                    {
                        transaction.Commit();
                    }
                }

            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                transaction.Rollback();
                FileLogger.Log("CommonDAL", "SetSecurity", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (ArgumentNullException sqlex)
            {
                transaction.Rollback();
                FileLogger.Log("CommonDAL", "SetSecurity", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;

            }
            catch (Exception ex)
            {
                transaction.Rollback();
                FileLogger.Log("CommonDAL", "SetSecurity", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion


        }

        public string GetServerHardwareId(SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string retResults = string.Empty;
            SqlConnection currConn = null;
            string sqlText = @"EXEC xp_instance_regread
                                'HKEY_LOCAL_MACHINE',
                                'HARDWARE\DESCRIPTION\System\MultifunctionAdapter\0\DiskController\0\DiskPeripheral\0',
                                'Identifier'";
            #endregion Initializ

            #region Try
            try
            {
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                DataTable dt = new DataTable("ServerProcessor");

                //SqlCommand getHardware = new SqlCommand(sqlText, currConn);
                SqlDataAdapter adapter = new SqlDataAdapter(sqlText, currConn);
                adapter.Fill(dt);

                if (dt == null)
                {
                    retResults = string.Empty;
                }
                else if (dt.Columns.Count > 0)
                {
                    retResults = dt.Rows[0][1].ToString();
                }


            }
            #endregion Try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "GetServerHardwareId", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "GetServerHardwareId", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            finally
            {
                //if (currConn == null)
                //{
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
                //}
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }


        public int NewTableAdd(string TableName, string createQuery, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(createQuery))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                //else if (string.IsNullOrEmpty(DataType))
                //{
                //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                //}

                #endregion Validation
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region Prefetch

                sqlText = "";

                sqlText += " IF  NOT EXISTS (SELECT * FROM sys.objects ";
                sqlText += " WHERE object_id = OBJECT_ID(N'" + TableName + "') AND type in (N'U'))";

                sqlText += " BEGIN";
                sqlText += " " + createQuery;
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                cmdPrefetch.CommandTimeout = 500;
                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "NewTableAdd", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "NewTableAdd", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            return transResult;
        }


        public int NewStoredProc(string procName, string createQuery, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(procName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(createQuery))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                //else if (string.IsNullOrEmpty(DataType))
                //{
                //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                //}

                #endregion Validation
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region Prefetch

                sqlText = "";

                sqlText += @" IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('dbo." + procName + @"'))
                exec('CREATE PROCEDURE [dbo].[" + procName + "] AS BEGIN SET NOCOUNT ON; END')";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);
                cmdPrefetch.CommandTimeout = 500;
                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                cmdPrefetch.CommandText = createQuery;
                transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "NewTableAdd", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "NewTableAdd", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            return transResult;
        }


        public int NewTableExistCheck(string TableName, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }

                //else if (string.IsNullOrEmpty(DataType))
                //{
                //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                //}

                #endregion Validation
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region Prefetch

                sqlText = "";

                sqlText += " IF  EXISTS (SELECT * FROM sys.objects ";
                sqlText += " WHERE object_id = OBJECT_ID(N'" + TableName + "') AND type in (N'U'))";

                sqlText += " BEGIN Select 1 END";
                sqlText += " else BEGIN Select 0 END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, currConn);

                //cmdPrefetch.ExecuteScalar();
                cmdPrefetch.Transaction = transaction;
                transResult = (int)cmdPrefetch.ExecuteScalar();

                #endregion Prefetch
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "NewTableExistCheck", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("CommonDAL", "NewTableExistCheck", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            return transResult;
        }

        //currConn to VcurrConn 25-Aug-2020
        public int AddForeignKey(string TableName, string ForeignKeyName, string query, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int transResult = 0;


            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(TableName))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(1)");

                }
                else if (string.IsNullOrEmpty(query))
                {
                    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(2)");

                }
                //else if (string.IsNullOrEmpty(DataType))
                //{
                //    throw new ArgumentNullException("TransactionCode", "Unable to Create ID(3)");

                //}

                #endregion Validation

                #region Prefetch

                sqlText = "";

                sqlText = "";
                sqlText += " if NOT exists(select * from sys.foreign_keys ";
                //sqlText += " where Name = '" + ForeignKeyName + "' )   ";
                sqlText += " where Name = @ForeignKeyName )   ";

                sqlText += " BEGIN";
                sqlText += " " + query;
                sqlText += " END";

                SqlCommand cmdPrefetch = new SqlCommand(sqlText, VcurrConn);


                //BugsBD
                SqlParameter parameter = new SqlParameter("@ForeignKeyName", SqlDbType.VarChar, 250);
                parameter.Value = ForeignKeyName;
                cmdPrefetch.Parameters.Add(parameter);


                cmdPrefetch.ExecuteNonQuery();
                //cmdPrefetch.Transaction = transaction;
                //transResult = (int)cmdPrefetch.ExecuteNonQuery();

                #endregion Prefetch

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "AddForeignKey", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "AddForeignKey", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            #endregion

            return transResult;
        }

        public DataTable MultipleSearch(string tableName, string SearchValue, string[] ConditionFields = null, string FixedConditions = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataTable dataTable = new DataTable("MultipleSearch");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                string selectfields = "";
                for (int i = 0; i < ConditionFields.Length; i++)
                {
                    selectfields = selectfields + ConditionFields[i] + @",";
                }
                selectfields = selectfields.Substring(0, selectfields.Length - 1);
                sqlText = @"  SELECT   " + selectfields + " ";
                sqlText += @" FROM " + tableName + " where 1=1   ";
                if (!string.IsNullOrEmpty(FixedConditions))
                {
                    sqlText += @" and " + FixedConditions + "";

                }
                sqlText += @" and (";
                for (int i = 0; i < ConditionFields.Length; i++)
                {
                    if (i == 0)
                    {
                        sqlText = sqlText + @" " + ConditionFields[i] + " like '%" + SearchValue + "%'";
                    }
                    else
                    {
                        //sqlText = sqlText + @" and " + ConditionFields[i] + " like '%@SearchValue%'";
                        sqlText = sqlText + @" or " + ConditionFields[i] + " like '%" + SearchValue + "%'";
                    }
                }
                sqlText = sqlText + @" )";
                //if (ConditionFields.Count() > 0)
                //    sqlText = sqlText + @" where ";
                //for (int i = 0; i < ConditionFields.Length; i++)
                //{
                //    if (i > 0)
                //        sqlText = sqlText + @" and ";
                //    sqlText = sqlText + ConditionFields[i];

                //}
                //sqlText = @" FROM "+ tableName +" where 1=1";
                //for (int i = 0; i < ConditionFields.Length; i++)
                //{
                //        sqlText = sqlText + @" and " + ConditionFields[i];
                //}

                #endregion

                #region SQL Command


                SqlCommand objCommTransanctionHistory = new SqlCommand(sqlText, currConn);
                //objCommTransanctionHistory.Parameters.AddWithValue("@SearchValue", SearchValue);

                objCommTransanctionHistory.CommandText = sqlText;
                objCommTransanctionHistory.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommTransanctionHistory);
                dataAdapter.Fill(dataTable);
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "MultipleSearch", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "MultipleSearch", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }

        public DataTable MultipleSearchSQL(string sqlText, string SearchValue, string[] ConditionFields = null, string count = "", string SQLTextRecordCount = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            string sqlText1 = "";
            SqlConnection currConn = null;
            DataTable dataTable = new DataTable("MultipleSearch");
            DataSet ds = new DataSet("MultipleSearch");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                #region SqlText

                var find = OrdinaryVATDesktop.RemoveStringExpresion(sqlText);
                find = find.Split()[0];

                sqlText = OrdinaryVATDesktop.ReplaceFirstOccurrence(sqlText, find, "");

                if (sqlText.ToLower().Contains("distinct"))
                {
                    var findWord = OrdinaryVATDesktop.RemoveStringExpresion(sqlText);

                    findWord = findWord.Split()[0];
                    if (findWord.ToLower() == "distinct")
                    {
                        sqlText = sqlText.Replace(findWord, "");

                    }


                    sqlText1 = @"SELECT DISTINCT top " + count + " ";
                }
                else
                {
                    if (count == "All")
                    {
                        sqlText1 += @"SELECT";

                    }
                    else
                    {
                        sqlText1 = @"SELECT top " + count + " ";

                    }
                }
                #endregion

                sqlText += @"  and (";
                for (int i = 0; i < ConditionFields.Length; i++)
                {
                    if (i == 0)
                    {
                        sqlText = sqlText + @" " + ConditionFields[i] + " like '%" + SearchValue + "%'";
                    }
                    else
                    {
                        sqlText = sqlText + @" or " + ConditionFields[i] + " like '%" + SearchValue + "%'";
                    }
                }
                sqlText = sqlText + @" )";



                #endregion

                #region SQL Command

                sqlText = sqlText1 + " " + sqlText + " " + SQLTextRecordCount;

                SqlCommand objCommTransanctionHistory = new SqlCommand(sqlText, currConn);

                objCommTransanctionHistory.CommandText = sqlText;
                objCommTransanctionHistory.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommTransanctionHistory);

                dataAdapter.Fill(ds);
                dataTable = ds.Tables[0].Copy();

                if (ds.Tables.Count > 1 && ds.Tables[1] != null)
                {
                    dataTable.Rows.Add(ds.Tables[1].Rows[0][0]);
                }

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "MultipleSearchSQL", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "MultipleSearchSQL", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }
        public DataSet MultipleSearchSQLDs(string sqlText, string SearchValue, string[] ConditionFields = null, string count = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            string sqlText1 = "";
            string sqlText2 = "";
            string sqlTextCount = "";
            SqlConnection currConn = null;
            DataSet dataTable = new DataSet("MultipleSearch");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                #region SqlText
                sqlText = sqlText.ToLower().Replace("select", "");

                if (sqlText.ToLower().Contains("distinct"))
                {
                    sqlText = sqlText.ToLower().Replace("distinct", "");
                    sqlText1 = @"SELECT DISTINCT top " + count + " ";
                }
                else
                {
                    if (count == "All")
                    {
                        sqlText1 += @"SELECT";

                    }
                    else
                    {
                        sqlText1 = @"SELECT top " + count + " ";

                    }
                }
                #endregion
                string selectfields = "";


                sqlText += @"  and (";
                for (int i = 0; i < ConditionFields.Length; i++)
                {
                    if (i == 0)
                    {
                        sqlText = sqlText + @" " + ConditionFields[i] + " like '%" + SearchValue + "%'";
                    }
                    else
                    {
                        //sqlText = sqlText + @" and " + ConditionFields[i] + " like '%@SearchValue%'";
                        sqlText = sqlText + @" or " + ConditionFields[i] + " like '%" + SearchValue + "%'";
                    }
                }
                sqlText = sqlText + @" )";

                //                sqlTextCount += @" select count(sih.SalesInvoiceNo)RecordCount
                //                FROM SalesInvoiceHeaders sih ";
                //if (ConditionFields.Count() > 0)
                //    sqlText = sqlText + @" where ";
                //for (int i = 0; i < ConditionFields.Length; i++)
                //{
                //    if (i > 0)
                //        sqlText = sqlText + @" and ";
                //    sqlText = sqlText + ConditionFields[i];

                //}
                //sqlText = @" FROM "+ tableName +" where 1=1";
                //for (int i = 0; i < ConditionFields.Length; i++)
                //{
                //        sqlText = sqlText + @" and " + ConditionFields[i];
                //}

                #endregion

                #region SQL Command

                sqlText = sqlText1 + " " + sqlText;

                SqlCommand objCommTransanctionHistory = new SqlCommand(sqlText, currConn);
                //objCommTransanctionHistory.Parameters.AddWithValue("@SearchValue", SearchValue);

                objCommTransanctionHistory.CommandText = sqlText;
                objCommTransanctionHistory.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommTransanctionHistory);

                dataAdapter.Fill(dataTable);
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "MultipleSearchSQLDs", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "MultipleSearchSQLDs", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }

        public DataTable ExecuteQuerySelect(string sqlText = "", SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, bool Dt = true, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region sql statement

                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;
                da.Fill(dt);


                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "ExecuteQuerySelect", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "ExecuteQuerySelect", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

                //////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public string[] ExecuteQuery(string sqlText = "", SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "0";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;

            #endregion

            #region try

            try
            {

                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                if (string.IsNullOrWhiteSpace(sqlText))
                {
                    throw new ArgumentNullException("Execute Query", "There is no Query for Execute");

                }

                #region Update Bank Information

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                cmdUpdate.CommandTimeout = 500;
                transResult = cmdUpdate.ExecuteNonQuery();

                #endregion Update Bank Information

                #region Commit

                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                            retResults[0] = "Success";
                            retResults[1] = "Requested Information successfully Executed";
                            retResults[2] = "";
                            retResults[3] = "";
                        }
                    }
                }



                #endregion Commit

            }
            #endregion

            #region Catch
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message; //catch ex
                retResults[2] = "0"; //catch ex

                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////////FileLogger.Log(MethodBase.GetCurrentMethod().Name, this.GetType().Name, ex.Message + Environment.NewLine + ex.StackTrace + Environment.NewLine + sqlText);

                FileLogger.Log("CommonDAL", "ExecuteQuery", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            #endregion

            #region Initializ

            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return retResults;
        }

        public ComboBox ComboBoxLoad(ComboBox comboBox, string SQLQuery, SysDBInfoVMTemp connVM = null)
        {
            //string OrderType="int";
            try
            {
                SqlConnection currConn = null;
                SqlDataAdapter sqlAdpt = null;

                System.Data.DataTable dt = new System.Data.DataTable("ComboDt");


                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                    currConn.Open();

                string sql = "";
                sql = SQLQuery;

                sqlAdpt = new SqlDataAdapter(sql, currConn);
                sqlAdpt.Fill(dt);


                if (dt.Rows.Count > 0)
                {
                    comboBox.DataSource = dt;
                    comboBox.DisplayMember = "displayMember";// displayMember.Replace("[", "").Replace("]", "").Trim();
                    comboBox.ValueMember = "valueMember";// valueMember.Trim();
                }

                return comboBox;
            }
            catch (Exception ex)
            {
                //Get a StackTrace object for the exception
                StackTrace st = new StackTrace(ex, true);

                //Get the first stack frame
                StackFrame frame = st.GetFrame(0);

                //Get the file name
                string fileName = frame.GetFileName();

                //Get the method name
                string methodName = frame.GetMethod().Name;

                //Get the line number from the stack frame
                int line = frame.GetFileLineNumber();

                //Get the column number
                int col = frame.GetFileColumnNumber();


                MessageBox.Show("There have some error Please Contact Administrator ");
                FileLogger.Log("Error", DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss"), ex.Message.ToString());
            }
            return comboBox;

        }

        public string TextLoad(string tableName, string valueDisplay, string[] Condition, SysDBInfoVMTemp connVM = null)
        {
            string result = "";

            try
            {
                SqlConnection currConn = null;
                SqlCommand sqlCmd = null;
                SqlDataAdapter sqlAdpt = null;
                System.Data.DataTable dt = new System.Data.DataTable("ComboDt");


                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                    currConn.Open();
                string sql = "";
                sql = sql + @" select top 1  RTRIM( LTRIM( " + valueDisplay + "))" + valueDisplay + " from " + tableName + "";
                if (Condition.Count() > 0)
                    sql = sql + @" where ";
                for (int i = 0; i < Condition.Length; i++)
                {
                    if (i > 0)
                        sql = sql + @" and ";
                    sql = sql + Condition[i];

                }

                sqlAdpt = new SqlDataAdapter(sql, currConn);
                sqlAdpt.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    result = dt.Rows[0][0].ToString().Trim();
                }
                else
                {
                    result = "Wrong entry";
                }

                return result;
            }
            catch (Exception ex)
            {

                MessageBox.Show("There have some error Please Contact Administrator ");
                FileLogger.Log("Error", DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss"), ex.Message.ToString());
                return result;
            }

        }

        public string GetTargetId(string tableName, string columnName, string currentId, string btn, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int nextId = 0;
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion
            #region Try
            try
            {
                #region open connection and transaction

                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Save
                sqlText = @"SELECT top 1 " + columnName + " From " + tableName + " Where 1=1 ";

                if (btn.ToLower() == "current")
                {
                    sqlText += @" AND " + columnName + " = " + currentId + " ORDER BY " + columnName + " desc";
                }
                if (btn.ToLower() == "next")
                {
                    sqlText += @" AND " + columnName + " > " + currentId + " ORDER BY " + columnName;
                }
                else if (btn.ToLower() == "previous")
                {
                    sqlText += @" AND " + columnName + " < " + currentId + " ORDER BY " + columnName + " desc";
                }
                else if (btn.ToLower() == "first")
                {
                    sqlText += @" ORDER BY " + columnName;
                }
                else if (btn.ToLower() == "last")
                {
                    sqlText += @" ORDER BY " + columnName + " desc";
                }

                SqlCommand cmd2 = new SqlCommand(sqlText, currConn);
                cmd2.Transaction = transaction;
                var exeRes = cmd2.ExecuteScalar();
                nextId = Convert.ToInt32(exeRes);
                if (nextId == 0)
                {
                    nextId = Convert.ToInt32(currentId);
                }
                if (nextId <= 0)
                {
                    throw new ArgumentNullException("InsertToCustomer",
                                                    "Unable to create new Customer No");
                }
                #endregion Save
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                if (Vtransaction == null) { transaction.Rollback(); }
                FileLogger.Log("CommonDAL", "GetTargetId", ex.ToString() + "\n" + sqlText);

                return nextId.ToString();
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return nextId.ToString();
            #endregion
        }

        public string GetTargetIdForTtype(string tableName, string columnName, string currentId, string btn, string ttype, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int nextId = 0;
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion
            #region Try
            try
            {
                #region open connection and transaction

                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Save
                sqlText = @"SELECT top 1 " + columnName + " From " + tableName + " Where 1=1 and TransactionType='" + ttype + "' ";

                if (btn.ToLower() == "current")
                {
                    sqlText += @" AND " + columnName + " = " + currentId + " ORDER BY " + columnName + " desc";
                }
                if (btn.ToLower() == "next")
                {
                    sqlText += @" AND " + columnName + " > " + currentId + " ORDER BY " + columnName;
                }
                else if (btn.ToLower() == "previous")
                {
                    sqlText += @" AND " + columnName + " < " + currentId + " ORDER BY " + columnName + " desc";
                }
                else if (btn.ToLower() == "first")
                {
                    sqlText += @" ORDER BY " + columnName;
                }
                else if (btn.ToLower() == "last")
                {
                    sqlText += @" ORDER BY " + columnName + " desc";
                }

                SqlCommand cmd2 = new SqlCommand(sqlText, currConn);
                cmd2.Transaction = transaction;
                var exeRes = cmd2.ExecuteScalar();
                nextId = Convert.ToInt32(exeRes);
                if (nextId == 0)
                {
                    nextId = Convert.ToInt32(currentId);
                }
                if (nextId <= 0)
                {
                    throw new ArgumentNullException("InsertToCustomer",
                                                    "Unable to create new Customer No");
                }
                #endregion Save
                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                if (Vtransaction == null) { transaction.Rollback(); }
                FileLogger.Log("CommonDAL", "GetTargetIdForTtype", ex.ToString() + "\n" + sqlText);

                return nextId.ToString();
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return nextId.ToString();
            #endregion
        }

        public List<IdName> IdNameDropdownOverhead(string Id, string Name, string AllData, string code, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            string sqlText = "";
            List<IdName> VMs = new List<IdName>();
            IdName vm;
            #endregion
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region sql statement
                sqlText = @" SELECT p." + Id + ", p." + Name + ", p." + code + " from Products p left outer join ProductCategories pc on p.CategoryID=pc.CategoryID where pc.IsRaw='Overhead' ";

                SqlCommand objComm = new SqlCommand(sqlText, currConn);

                SqlDataReader dr;
                dr = objComm.ExecuteReader();
                while (dr.Read())
                {
                    vm = new IdName();
                    vm.Id = dr[Id].ToString();

                    var name = dr[Name].ToString();
                    var itemCode = dr[code].ToString();
                    if (AllData.ToLower() == "yes")
                    {
                        vm.Name = itemCode;
                    }
                    else
                    {
                        vm.Name = name + "-" + itemCode;
                    }

                    VMs.Add(vm);
                }
                dr.Close();
                #endregion

            }
            #region catch
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "IdNameDropdownOverhead", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "IdNameDropdownOverhead", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return VMs;
        }

        public List<IdName> IdNameDropdown(string tableName, string Id, string Name, string AllData, string code, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            string sqlText = "";
            List<IdName> VMs = new List<IdName>();
            IdName vm;
            #endregion
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region sql statement
                if (AllData.ToLower() == "yes")
                {
                    sqlText = @" SELECT " + Id + ", " + Name + ", " + code + " from " + tableName + " where 1=1";
                }
                else
                {
                    sqlText = @" SELECT " + Id + ", " + Name + ", " + code + " from " + tableName + " where 1=1 and ActiveStatus='Y'";
                }

                SqlCommand objComm = new SqlCommand(sqlText, currConn);

                SqlDataReader dr;
                dr = objComm.ExecuteReader();
                while (dr.Read())
                {
                    vm = new IdName();
                    vm.Id = dr[Id].ToString();

                    var name = dr[Name].ToString();
                    var itemCode = dr[code].ToString();
                    if (Name == code)
                    {
                        vm.Name = itemCode;
                    }
                    else
                    {
                        vm.Name = name + "-" + itemCode;
                    }

                    VMs.Add(vm);
                }
                dr.Close();
                #endregion

            }
            #region catch
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "IdNameDropdown", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "IdNameDropdown", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return VMs;
        }

        public List<IdName> IdNameTtype(string tableName, string Id, string Name, string type, string code, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            string sqlText = "";
            List<IdName> VMs = new List<IdName>();
            IdName vm;
            #endregion
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region sql statement

                sqlText = @" SELECT " + Id + ", " + Name + ", " + code + " from " + tableName + " where 1=1 and TransactionType='" + type + "'";

                SqlCommand objComm = new SqlCommand(sqlText, currConn);

                SqlDataReader dr;
                dr = objComm.ExecuteReader();
                while (dr.Read())
                {
                    vm = new IdName();
                    vm.Id = dr[Id].ToString();

                    var name = dr[Name].ToString();
                    var itemCode = dr[code].ToString();
                    if (Name == code)
                    {
                        vm.Name = itemCode;
                    }
                    else
                    {
                        vm.Name = name + "-" + itemCode;
                    }

                    VMs.Add(vm);
                }
                dr.Close();
                #endregion

            }
            #region catch
            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "IdNameTtype", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "IdNameTtype", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return VMs;
        }

        #endregion

        #region Methods 06



        #endregion price Declaration

        #region  Test Insert List

        public string[] SaveTempTest(List<SaleTempVM> vms, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            SqlTransaction transaction = null;
            SqlConnection connection = null;

            #endregion

            #region try

            try
            {
                connection = _dbsqlConnection.GetConnection(connVM);
                connection.Open();
                transaction = connection.BeginTransaction();

                var columns = vms[0].GetType().GetProperties().Select(x => x.Name).ToList();

                var sqlText = @"insert into SalesTempData (" + string.Join(",", columns) + ") values ";

                var len = vms.Count;
                var colLen = columns.Count;

                for (int i = 0; i < len; i++)
                {
                    sqlText += "(";


                    for (int j = 0; j < colLen; j++)
                    {
                        sqlText += "@" + columns[j] + i;

                        if (j != (colLen - 1))
                        {
                            sqlText += ",";
                        }
                    }


                    sqlText += ")";

                    if (i != (len - 1))
                    {
                        sqlText += ",";
                    }
                }

                var cmd = new SqlCommand(sqlText, connection);
                cmd.Transaction = transaction;


                for (int i = 0; i < len; i++)
                {

                    for (int j = 0; j < colLen; j++)
                    {
                        cmd.Parameters.AddWithValue("@" + columns[j] + i, vms[i].GetType().GetProperty(columns[j]).GetValue(vms[i], null));
                    }

                }

                var rows = (int)cmd.ExecuteNonQuery();
                transaction.Commit();

                return rows == len ? new[] { "success" } : new[] { "fail" };

            }
            #endregion

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("CommonDAL", "SaveTempTest", ex.ToString());

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
            }
            finally
            {
                if (connection != null)
                {
                    connection.Close();
                }
            }
        }

        #endregion

        public DataTable SearchTableFields(SysDBInfoVMTemp connVM = null, string TableName = "")
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            //DataTable dataTable = new DataTable("Search Codes");
            DataTable dataSet = new DataTable("Search Codes");
            if (string.IsNullOrWhiteSpace(TableName))
            {
                return dataSet;
            }
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @" select COLUMN_NAME Name
                from INFORMATION_SCHEMA.COLUMNS
                where TABLE_NAME=@TABLENAME
and COLUMN_NAME not in('CreatedBy',
'CreatedFrom',
'CreatedOn','UpdateBy',
'UpdateFrom',
'UpdateOn','LastModifiedBy',
'LastModifiedOn','CreatedBy',
'CreatedOn')
              --  order by COLUMN_NAME
";

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Parameters.AddWithValueAndNullHandle("@TABLENAME", TableName);

                da.Fill(dataSet);




                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "SearchTableFields", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());

                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "SearchTableFields", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                //////throw ex;
            }

            #endregion
            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] FiscalYearLockCheck(string year, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            string[] retResults = new string[4];
            string sqlText = "";
            //SqlConnection vcurrConn = VcurrConn;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                //if (vcurrConn == null)
                //{
                //    if (VcurrConn == null)
                //    {
                //        VcurrConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                //        if (VcurrConn.State != ConnectionState.Open)
                //        {
                //            VcurrConn.Open();
                //            Vtransaction = VcurrConn.BeginTransaction("Piscal Year");
                //        }
                //    }
                //}

                #endregion open connection and transaction

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction


                #region Validation

                #endregion Validation

                #region Find

                sqlText = " ";
                sqlText = @" select top 1 isnull(GLLock,'N')GLLock from FiscalYear
where 1=1 and CurrentYear=@CurrentYear";

                SqlCommand cmd1 = new SqlCommand(sqlText, currConn);
                cmd1.Transaction = transaction;
                cmd1.Parameters.AddWithValue("@CurrentYear", year);
                object obj1 = cmd1.ExecuteScalar();

                if (obj1 == null)
                {
                    retResults[0] = "";
                    retResults[1] = MessageVM.msgFiscalYearNotGenerate;
                }
                else if (obj1.ToString() == "N")
                {
                    retResults[0] = obj1.ToString();
                }
                else if (obj1.ToString() == "Y")
                {
                    retResults[1] = MessageVM.msgFiscalYearisLock;
                }


                #endregion Find

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion


            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "FiscalYearLockCheck", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "FiscalYearLockCheck", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }

            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }


                //if (vcurrConn == null)
                //{
                //    if (VcurrConn.State == ConnectionState.Open)
                //    {
                //        VcurrConn.Close();

                //    }
                //}
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] PeriodIdLockCheck(string PeriodId, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[4];
            string sqlText = "";
            //SqlConnection vcurrConn = VcurrConn;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                //if (vcurrConn == null)
                //{
                //    if (VcurrConn == null)
                //    {
                //        VcurrConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                //        if (VcurrConn.State != ConnectionState.Open)
                //        {
                //            VcurrConn.Open();
                //            Vtransaction = VcurrConn.BeginTransaction("PeriodId");
                //        }
                //    }
                //}

                #endregion open connection and transaction

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction


                #region Validation

                #endregion Validation
                #region Find

                sqlText = " ";
                sqlText = @" select top 1 isnull(PeriodLock,'N')PeriodLock from FiscalYear
where 1=1 and PeriodID=@PeriodID";

                SqlCommand cmd1 = new SqlCommand(sqlText, currConn);
                cmd1.Transaction = transaction;
                cmd1.Parameters.AddWithValue("@PeriodID", PeriodId);
                object obj1 = cmd1.ExecuteScalar();

                if (obj1 == null)
                {
                    retResults[0] = "";
                    retResults[1] = MessageVM.msgFiscalPeriodNotGenerate;
                }
                else if (obj1.ToString() == "N")
                {
                    retResults[0] = obj1.ToString();
                }
                else if (obj1.ToString() == "Y")
                {
                    retResults[1] = MessageVM.msgFiscalPeriodisLock;
                }

                #endregion Find

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {
                FileLogger.Log("CommonDAL", "PeriodIdLockCheck", sqlex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "PeriodIdLockCheck", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }


                //if (vcurrConn == null)
                //{
                //    if (VcurrConn.State == ConnectionState.Open)
                //    {
                //        VcurrConn.Close();

                //    }
                //}
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public object sqlTextParameter { get; set; }

        public string sqlTextOrderBy { get; set; }

        public DataTable GetCumulativeValue(DataTable data, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            string[] retResults = new string[4];
            string sqlText = "";
            //SqlConnection vcurrConn = VcurrConn;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            DataTable table = new DataTable();
            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction


                #region Delete Existing Data

                sqlText = "delete from SalesTempData";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.ExecuteNonQuery();

                #endregion


                string[] result = BulkInsert("SalesTempData", data, currConn, transaction, 10000, null, connVM);

                #region Get Group Data

                sqlText = @"select 
ID
,Customer_Code
,Customer_Name
,Invoice_Date_Time
,Reference_No
,Delivery_Address
,SD_Rate
,Non_Stock
,Trading_MarkUp
,Currency_Code
,VAT_Name
,Post
,Branch_Code
,DataSource
,UOM
,Item_Name
,Item_Code
,Quantity
,sum(ExtraCharge)ExtraCharge
,sum(VAT_Amount)VAT_Amount
,sum(SubTotal) SubTotal
,Sale_Type
,TransactionType
,VAT_Rate
,Type
,sum(LineTotal)LineTotal
,(sum(SubTotal)/Quantity)NBR_Price
--,Weight
,CommentsD
,FileName
--,OtherRef
,CustomerBIN
,ReasonOfReturn
from SalesTempdata

group by 
ID
,Customer_Code
,Customer_Name
,Invoice_Date_Time
,Reference_No
,Delivery_Address
,SD_Rate
,Non_Stock
,Trading_MarkUp
,Currency_Code
,VAT_Name
,Post
,Branch_Code
,DataSource
,UOM
,Item_Name
,Item_Code
,Quantity
,Sale_Type
,TransactionType
,VAT_Rate
,Type

--,Weight
,CommentsD
,FileName
--,OtherRef
,CustomerBIN
,ReasonOfReturn";

                cmd.CommandText = sqlText;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(table);


                #endregion


                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                return table;
            }

            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "FiscalYearLockCheck", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());


            }

            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }


                //if (vcurrConn == null)
                //{
                //    if (VcurrConn.State == ConnectionState.Open)
                //    {
                //        VcurrConn.Close();

                //    }
                //}
            }

            #endregion

            #region Results

            //return retResults;

            #endregion

        }

        public void ConnectionTransactionOpen(ref SqlConnection VcurrConn, ref SqlTransaction Vtransaction, ref SqlConnection currConn, ref SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {

            #region New open connection and transaction

            if (VcurrConn != null)
            {
                currConn = VcurrConn;
            }
            if (Vtransaction != null)
            {
                transaction = Vtransaction;
            }

            #endregion New open connection and transaction

            if (currConn == null)
            {
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
            }
            if (transaction == null)
            {
                transaction = currConn.BeginTransaction(DateTime.Now.ToString("ddMMyyyHH:mm:ss"));
            }
        }

        public void TransactionCommit(ref SqlTransaction Vtransaction, ref SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            if (Vtransaction == null && transaction != null)
            {
                transaction.Commit();
            }
        }

        public void TransactionRollBack(ref SqlTransaction Vtransaction, ref SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            if (Vtransaction == null && transaction != null)
            {
                transaction.Rollback();
            }
        }
        public void CloseConnection(ref SqlConnection VcurrConn, ref SqlConnection currConn, SysDBInfoVMTemp connVM = null)
        {
            if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
            {
                currConn.Close();
            }
        }

        public ResultVM UpdateProcessFlag(string invoiceNo, string transactionDate, SqlConnection connection, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            ResultVM resultVm = new ResultVM();
            resultVm.Status = "success";
            resultVm.Message = "success";
            try
            {

                // update the products 
                // update the time

                string sqlText = @"


update products set ProcessFlag = 'Y'
where ItemNo in (

select ItemNo from SalesInvoiceDetails where SalesInvoiceNo = @invoiceNo
union all 
select ItemNo from PurchaseInvoiceDetails where PurchaseInvoiceNo = @invoiceNo
union all
select itemno from issuedetails where IssueNo = @invoiceNo
union all 
select itemno from ReceiveDetails where ReceiveNo = @invoiceNo
union all 
select itemno from TransferIssueDetails where TransferIssueNo = @invoiceNo
union all 
select itemno from TransferReceiveDetails where TransferReceiveNo = @invoiceNo
union all 
select FinishItemNo from DisposeFinishs where DisposeNo = @invoiceNo
)

select distinct reporttype from Products where
 ItemNo in (

select ItemNo from SalesInvoiceDetails where SalesInvoiceNo = @invoiceNo
union all 
select ItemNo from PurchaseInvoiceDetails where PurchaseInvoiceNo = @invoiceNo
union all
select itemno from issuedetails where IssueNo = @invoiceNo
union all 
select itemno from ReceiveDetails where ReceiveNo = @invoiceNo
union all 
select itemno from TransferIssueDetails where TransferIssueNo = @invoiceNo
union all 
select itemno from TransferReceiveDetails where TransferReceiveNo = @invoiceNo
union all 
select FinishItemNo from DisposeFinishs where DisposeNo = @invoiceNo
)

";
                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.Parameters.AddWithValue("@invoiceNo", invoiceNo);

                DataTable dtresult = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtresult);

                string VAT6_2ProcessDate = settingsMaster("DayEnd", "VAT6_2ProcessDate", connection, transaction, connVM);
                string VAT6_1ProcessDate = settingsMaster("DayEnd", "VAT6_1ProcessDate", connection, transaction, connVM);
                string VAT6_2_1ProcessDate = settingsMaster("DayEnd", "VAT6_2_1ProcessDate", connection, transaction, connVM);

                if (dtresult.Rows.Count > 1)
                {
                    if (Convert.ToDateTime(transactionDate) < Convert.ToDateTime(VAT6_2ProcessDate))
                    {
                        settingsUpdateMaster("DayEnd", "VAT6_2ProcessDate", transactionDate, connection, transaction, connVM);
                    }

                    if (Convert.ToDateTime(transactionDate) < Convert.ToDateTime(VAT6_1ProcessDate))
                    {
                        settingsUpdateMaster("DayEnd", "VAT6_1ProcessDate", transactionDate, connection, transaction, connVM);
                    }
                    if (Convert.ToDateTime(transactionDate) < Convert.ToDateTime(VAT6_2_1ProcessDate))
                    {
                        settingsUpdateMaster("DayEnd", "VAT6_2_1ProcessDate", transactionDate, connection, transaction, connVM);
                    }
                }
                else if (dtresult.Rows.Count > 0)
                {
                    if (dtresult.Rows[0][0].ToString() == "VAT6_1")
                    {
                        if (Convert.ToDateTime(transactionDate) < Convert.ToDateTime(VAT6_1ProcessDate))
                        {
                            settingsUpdateMaster("DayEnd", "VAT6_1ProcessDate", transactionDate, connection, transaction, connVM);
                        }
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionDate) < Convert.ToDateTime(VAT6_2ProcessDate))
                        {
                            settingsUpdateMaster("DayEnd", "VAT6_2ProcessDate", transactionDate, connection, transaction, connVM);
                        }
                        if (Convert.ToDateTime(transactionDate) < Convert.ToDateTime(VAT6_2_1ProcessDate))
                        {
                            settingsUpdateMaster("DayEnd", "VAT6_2_1ProcessDate", transactionDate, connection, transaction, connVM);
                        }

                    }
                }

                settingsUpdateMaster("DayEnd", "DayEndProcess", "Y", connection, transaction, connVM);

            }
            catch (Exception exception)
            {
                FileLogger.Log("CommonDAL", "UpdateProcessFlag", exception.ToString() + "\n");

                //throw exception;
            }
            return resultVm;

        }

        public ResultVM UpdateProcessFlag(string flag = "N", SqlConnection currentConnection = null, SqlTransaction currentTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            SqlConnection connection = null;
            SqlTransaction transaction = null;
            try
            {
                ConnectionTransactionOpen(ref currentConnection, ref currentTransaction, ref connection,
                    ref transaction, connVM);


                string sqlText = "update Products set ProcessFlag=@ProcessFlag where ProcessFlag='Y'";

                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.Parameters.AddWithValue("@ProcessFlag", flag);
                cmd.ExecuteNonQuery();

                TransactionCommit(ref currentTransaction, ref transaction, connVM);

                return new ResultVM() { Status = "success", Message = "success" };
            }
            catch (Exception e)
            {
                TransactionRollBack(ref currentTransaction, ref transaction, connVM);

                throw e;
            }
            finally
            {
                CloseConnection(ref currentConnection, ref connection, connVM);
            }
        }

        public ResultVM CheckProcessFlag(string itemNo, string CategoryID, string type, SqlConnection currentConnection = null, SqlTransaction currentTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            SqlConnection connection = null;
            SqlTransaction transaction = null;
            try
            {
                ConnectionTransactionOpen(ref currentConnection, ref currentTransaction, ref connection,
                    ref transaction, connVM);

                string sqlText = @"select * from products p left outer join ProductCategories pc on p.CategoryID = pc.CategoryID
                where (ItemNo=@ItemNo or pc.CategoryID=@CategoryID or pc.IsRaw=@type ) and ProcessFlag='Y'";

                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.Parameters.AddWithValue("@ItemNo", itemNo ?? "");
                cmd.Parameters.AddWithValue("@CategoryID", CategoryID ?? "");
                cmd.Parameters.AddWithValue("@type", type ?? "");

                DataTable dtresult = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtresult);

                if (dtresult.Rows.Count > 0)
                {
                    throw new Exception("The day end process is remaining for this product");
                }

                TransactionCommit(ref currentTransaction, ref transaction, connVM);

                return new ResultVM() { Status = "success", Message = "success" };
            }
            catch (Exception e)
            {
                TransactionRollBack(ref currentTransaction, ref transaction, connVM);

                throw e;
            }
            finally
            {
                CloseConnection(ref currentConnection, ref connection, connVM);
            }
        }

        public DataTable FiscalYearLock(string fiscalYearStartDate = "", string fiscalYearEndDate = "", SqlConnection currentConnection = null, SqlTransaction currentTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            SqlConnection connection = null;
            SqlTransaction transaction = null;
            try
            {
                ConnectionTransactionOpen(ref currentConnection, ref currentTransaction, ref connection,
                    ref transaction, connVM);

                string sqlText = @"
                    select * from FiscalYear
                    where VATReturnPost = 'Y'
";
                if (!string.IsNullOrEmpty(fiscalYearStartDate))
                {
                    sqlText += " and PeriodStart >= @start";
                }
                if (!string.IsNullOrEmpty(fiscalYearEndDate))
                {
                    sqlText += " and PeriodStart <= @end";
                }

                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);

                if (!string.IsNullOrEmpty(fiscalYearStartDate))
                {
                    cmd.Parameters.AddWithValue("@start", fiscalYearStartDate);
                }
                if (!string.IsNullOrEmpty(fiscalYearEndDate))
                {
                    cmd.Parameters.AddWithValue("@end", fiscalYearEndDate);
                }

                DataTable dtresult = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtresult);


                TransactionCommit(ref currentTransaction, ref transaction, connVM);

                return dtresult;
            }
            catch (Exception e)
            {
                TransactionRollBack(ref currentTransaction, ref transaction, connVM);

                throw e;
            }
            finally
            {
                CloseConnection(ref currentConnection, ref connection, connVM);
            }
        }

        public ResultVM UpdateNestle(DataTable conInfo, SqlConnection currentConnection = null, SqlTransaction currentTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            SqlConnection connection = null;
            SqlTransaction transaction = null;
            try
            {
                ConnectionTransactionOpen(ref currentConnection, ref currentTransaction, ref connection,
                    ref transaction, connVM);

                string code = settingValue("BOM", "DefaultOverHeadCode");
                if (code.ToUpper() != "OVH2")
                {
                    string sqlText = @"Update  Settings set SettingValue=10
where SettingGroup ='FontSize' and SettingName='VAT6_3'

Update  Settings set SettingValue='Y'
where SettingGroup ='Integration' and SettingName='UOM'

update Products set ReportType='VAT6_2_1'

Update  Settings set SettingValue='NESTLE'
where SettingGroup ='Reports' and SettingName='VAT6_3'

Update  Settings set SettingValue='NESTLE'
where SettingGroup ='CompanyCode' and SettingName='Code'

Update  Settings set SettingValue='11'
where SettingGroup ='Reports' and SettingName='NumberOfItems'

Update  Settings set SettingValue='TRADING'
where SettingGroup ='AutoSave' and SettingName='DefaultProductCategory'


Update  Settings set SettingValue='LOCAL'
where SettingGroup ='AutoSave' and SettingName='DefaultVendorGroup'

Update  Settings set SettingValue='LOCAL'
where SettingGroup ='AutoSave' and SettingName='DefaultCustomerGroup'

Update  Settings set SettingValue='Y'
where SettingGroup ='SingleFileImport' and SettingName='BOM'

Update  Settings set SettingValue='OVH2'
where SettingGroup ='BOM' and SettingName='DefaultOverHeadCode'

Update  Settings set SettingValue='Y'
where SettingGroup ='Integration' and SettingName='UOM'

Update  Settings set SettingValue='Y'
where SettingGroup ='Sale' and SettingName='ExcludingVAT'


Update Settings set SettingValue='N'
where SettingGroup='Import' and SettingName='SaleDuplicateInsert'

INSERT [dbo].[Products] ([ItemNo],[BranchId], [ProductCode], [ProductName], [ProductDescription], [CategoryID], [UOM], [CostPrice], [SalesPrice], [NBRPrice], [ReceivePrice], [IssuePrice], [TenderPrice], [ExportPrice], [InternalIssuePrice], [TollIssuePrice], [TollCharge], [OpeningBalance], [SerialNo], [HSCodeNo], [VATRate], [Comments], [SD], [PacketPrice], [Trading], [TradingMarkUp], [NonStock], [QuantityInHand], [OpeningDate], [RebatePercent], [TVBRate], [CnFRate], [InsuranceRate], [CDRate], [RDRate], [AITRate], [TVARate], [ATVRate], [ActiveStatus], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [OpeningTotalCost]) VALUES (N'100000', N'1 ', N'Ovh2 ', N'Salary and wages, admin, selling and distribution, warehousing service, transportation, fuel, maintenance, banking service, general overhead and profit', N'-', N'2', N'-', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'-', N'', CAST(0.000000000 AS Decimal(25, 9)), N'', CAST(0.000000000 AS Decimal(25, 9)), CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), N'N', CAST(0.000000000 AS Decimal(25, 9)), CAST(0x0000A1A40105ED84 AS DateTime), CAST(0.000000000 AS Decimal(25, 9)), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'Y', N'admin', CAST(0x0000A1A401060044 AS DateTime), N'admin', CAST(0x0000A1A401224A74 AS DateTime), NULL)


";
                    SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                    cmd.ExecuteNonQuery();

                    TransactionCommit(ref currentTransaction, ref transaction, connVM);
                    NESTLEIntegrationDAL Nestle = new NESTLEIntegrationDAL();
                    Nestle.NestleCustomerScript(conInfo);
                }
                return new ResultVM() { Status = "success", Message = "success" };

            }
            catch (Exception e)
            {
                TransactionRollBack(ref currentTransaction, ref transaction, connVM);

                throw e;
            }
            finally
            {
                CloseConnection(ref currentConnection, ref connection, connVM);

            }
        }

        public ResultVM NestleIntermidateDBMigration(DataTable conInfo, SqlConnection currentConnection = null, SqlTransaction currentTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            SqlConnection connection = null;
            SqlTransaction transaction = null;
            try
            {
                NESTLEIntegrationDAL Nestle = new NESTLEIntegrationDAL();
                Nestle.NestleIntermididateScript(conInfo);
                //Nestle.DeleteDataNestle();
                return new ResultVM() { Status = "success", Message = "success" };

            }
            catch (Exception e)
            {
                TransactionRollBack(ref currentTransaction, ref transaction, connVM);

                throw e;
            }
            finally
            {
                CloseConnection(ref currentConnection, ref connection, connVM);

            }
        }

        public ResultVM FiscalYear(SqlConnection currentConnection = null, SqlTransaction currentTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            SqlConnection connection = null;
            SqlTransaction transaction = null;
            try
            {
                ConnectionTransactionOpen(ref currentConnection, ref currentTransaction, ref connection,
                    ref transaction, connVM);


                string sqlText = @"
                delete from FiscalYear where CurrentYear='2024'
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'012024', N'January-2024', CAST(N'2024-01-01T00:00:00.000' AS DateTime), CAST(N'2024-01-31T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'022024', N'February-2024', CAST(N'2024-02-01T00:00:00.000' AS DateTime), CAST(N'2024-02-29T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'032024', N'March-2024', CAST(N'2024-03-01T00:00:00.000' AS DateTime), CAST(N'2024-03-31T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'042024', N'April-2024', CAST(N'2024-04-01T00:00:00.000' AS DateTime), CAST(N'2024-04-30T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'052024', N'May-2024', CAST(N'2024-05-01T00:00:00.000' AS DateTime), CAST(N'2024-05-31T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'062024', N'June-2024', CAST(N'2024-06-01T00:00:00.000' AS DateTime), CAST(N'2024-06-30T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'072023', N'July-2023', CAST(N'2023-07-01T00:00:00.000' AS DateTime), CAST(N'2023-07-31T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'082023', N'August-2023', CAST(N'2023-08-01T00:00:00.000' AS DateTime), CAST(N'2023-08-31T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'092023', N'September-2023', CAST(N'2023-09-01T00:00:00.000' AS DateTime), CAST(N'2023-09-30T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'102023', N'October-2023', CAST(N'2023-10-01T00:00:00.000' AS DateTime), CAST(N'2023-10-31T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'112023', N'November-2023', CAST(N'2023-11-01T00:00:00.000' AS DateTime), CAST(N'2023-11-30T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
INSERT [dbo].[FiscalYear] ([FiscalYearName], [CurrentYear], [PeriodID], [PeriodName], [PeriodStart], [PeriodEnd], [PeriodLock], [GLLock], [CreatedBy], [CreatedOn], [LastModifiedBy], [LastModifiedOn], [VATReturnPost]) VALUES (N'01-Jul-2023 To 30-Jun-2024', N'2024', N'122023', N'December-2023', CAST(N'2023-12-01T00:00:00.000' AS DateTime), CAST(N'2023-12-31T00:00:00.000' AS DateTime), N'N', N'N', N'admin', CAST(N'2023-07-01T00:00:00.000' AS DateTime), N'10', CAST(N'2023-07-01T00:00:00.000' AS DateTime), NULL)
";
                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.ExecuteNonQuery();

                TransactionCommit(ref currentTransaction, ref transaction, connVM);


                return new ResultVM() { Status = "success", Message = "success" };

            }
            catch (Exception e)
            {
                TransactionRollBack(ref currentTransaction, ref transaction, connVM);

                throw e;
            }
            finally
            {
                CloseConnection(ref currentConnection, ref connection, connVM);

            }
        }

        public bool TestOracleConnection(DataTable dt)
        {
            Oracle.DataAccess.Client.OracleConnection currConn = null;

            try
            {

                currConn = _dbsqlConnection.GetOracleConnection(dt);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                return true;

            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }
        }

        public bool TestSqlConnection(DataTable dt)
        {
            SqlConnection currConn = null;
            try
            {

                currConn = _dbsqlConnection.GetDepoConnection(dt);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                return true;

            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }
        }

        public VATCalculationVM IncludedVATCalculation(VATCalculationVM vm)
        {
            VATCalculationVM _VATCalculationVM = new VATCalculationVM();
            try
            {
                decimal Subtotal = 0;
                decimal TempSubtotal = 0;
                decimal VATAmt = 0;
                decimal SDAmt = 0;

                TempSubtotal = vm.InpTotalAmount * 100 / (100 + vm.InpVAT_Rate);
                VATAmt = vm.InpTotalAmount - TempSubtotal;

                SDAmt = TempSubtotal - (TempSubtotal * 100 / (100 + vm.InpSD_Rate));

                Subtotal = (vm.InpTotalAmount - VATAmt) - SDAmt;

                _VATCalculationVM.OutSubTotal = Convert.ToDecimal(OrdinaryVATDesktop.FormatingNumeric(Subtotal.ToString(), "2"));
                _VATCalculationVM.OutVAT_Amount = Convert.ToDecimal(OrdinaryVATDesktop.FormatingNumeric(VATAmt.ToString(), "2"));
                _VATCalculationVM.OutSDAmount = Convert.ToDecimal(OrdinaryVATDesktop.FormatingNumeric(SDAmt.ToString(), "2"));

                return _VATCalculationVM;

            }
            catch (Exception e)
            {
                throw e;
            }

        }

        public string[] InsertErrorLogs(ErrorLogVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[4];
            string sqlText = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL _cdal = new CommonDAL();

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Find

                vm.ErrorMassage = vm.ErrorMassage.Replace("\r\n", " ");

                //ErrorLogVM vm = new ErrorLogVM();
                List<ErrorLogVM> vms = new List<ErrorLogVM>();

                ////vm.ImportId = importID;
                ////vm.FileName = WorkFile;
                ////vm.ErrorMassage = e.Message.ToString() + "\n" + e.StackTrace.ToString();
                ////vm.ErrorDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                ////vm.SourceName = "MARICO_PB23";
                ////vm.ActionName = "GetFileFactoryTransfer";
                ////vm.TransactionName = "FactoryTransfer";

                vms.Add(vm);

                DataTable dt = vms.ToList().ToDataTable();
                _cdal.BulkInsert("ErrorLogs", dt, null, null, 0, null, connVM);

                #endregion Find

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "PeriodIdLockCheck", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public string MailsettingValue(string settingGroup, string settingName, SysDBInfoVMTemp connVM = null, SqlConnection VcurrConn = null
            , SqlTransaction Vtransaction = null)
        {
            #region Initializ

            string retResults = string.Empty;
            string sqlText = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region Validation
                if (string.IsNullOrEmpty(settingGroup))
                {
                    throw new ArgumentNullException("settingValue", "Code system not find");
                }
                else if (string.IsNullOrEmpty(settingName))
                {
                    throw new ArgumentNullException("settingValue", "Code system not find");
                }

                #endregion Validation

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Settings

                sqlText = "  ";

                sqlText = " SELECT SettingValue FROM MailSettings ";
                sqlText += " where ";
                //sqlText += " SettingGroup='" + settingGroup + "' ";
                //sqlText += " and SettingName='" + settingName + "'";
                sqlText += " SettingGroup = @settingGroup";
                sqlText += " and SettingName = @settingName";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 500;

                //BugsBD
                SqlParameter parameter = new SqlParameter("@settingGroup", SqlDbType.VarChar, 250);
                parameter.Value = settingGroup;
                cmd.Parameters.Add(parameter);

                parameter = new SqlParameter("@settingName", SqlDbType.VarChar, 250);
                parameter.Value = settingName;
                cmd.Parameters.Add(parameter);

                if (cmd.ExecuteScalar() == null)
                {
                    retResults = string.Empty;
                }
                else
                {
                    retResults = (string)cmd.ExecuteScalar();
                }

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                try
                {
                    ErrorLogVM evm = new ErrorLogVM();

                    evm.ImportId = "0";
                    evm.FileName = "PDFGenerate";
                    evm.ErrorMassage = ex.Message;
                    evm.ErrorDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    evm.SourceName = "btnBulk_Click";
                    evm.ActionName = "FormSaleImportBC";
                    evm.TransactionName = "Sales";

                    CommonDAL _cDal = new CommonDAL();

                    string[] Logresult = _cDal.InsertErrorLogs(evm, currConn, transaction, connVM);

                }
                catch (Exception exc)
                {

                }

                FileLogger.Log("CommonDAL", "MailsettingValue", ex.ToString() + "\n" + sqlText, "settings");

                throw new ArgumentNullException(ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }


        public List<StaticCodeVM> GetStaticCodes(string[] conditionFields, string[] conditionValues, SysDBInfoVMTemp connVM = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null)
        {
            #region Initializ

            List<StaticCodeVM> staticCode = new List<StaticCodeVM>();
            string retResults = string.Empty;
            string sqlText = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("StaticCode");
                }

                #endregion open connection and transaction

                #region Settings

                sqlText += @" 
SELECT 
ISNULL(Id,0) Id
,ISNULL(Field_Name,'') Field_Name
,ISNULL(Field_Value,'') Field_Value
,ISNULL(Url,'') Url
,ISNULL(File_Name,'') File_Name
,ISNULL(Class_Name,'') Class_Name
,ISNULL(Method_Name,'') Method_Name

FROM 

StaticCode WHERE 1=1 

";
                #region conditionFields

                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }

                        else if (conditionFields[i].ToLower().Contains("isnull"))
                        {
                            sqlText += " AND " + "isnull(" + cField + ",'Y')=" + " @" + cField + "";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else if (conditionFields[i].ToLower().Contains("!="))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                #endregion



                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region conditionValues

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            cmd.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                adapter.Fill(dt);

                staticCode = dt.ToList<StaticCodeVM>();

                #endregion
            }

            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                FileLogger.Log("CommonDAL", "GetStaticCodes", ex.ToString() + "\n" + sqlText, "GetStaticCodes");
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }

            #endregion

            #region Results

            return staticCode;

            #endregion

        }



    }

}

