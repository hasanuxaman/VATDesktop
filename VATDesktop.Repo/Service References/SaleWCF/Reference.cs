//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.SaleWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SaleWCF.ISaleWCF")]
    public interface ISaleWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/DoWork", ReplyAction="http://tempuri.org/ISaleWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/DoWork", ReplyAction="http://tempuri.org/ISaleWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetCategoryName", ReplyAction="http://tempuri.org/ISaleWCF/GetCategoryNameResponse")]
        string GetCategoryName(string itemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetCategoryName", ReplyAction="http://tempuri.org/ISaleWCF/GetCategoryNameResponse")]
        System.Threading.Tasks.Task<string> GetCategoryNameAsync(string itemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SalesInsert", ReplyAction="http://tempuri.org/ISaleWCF/SalesInsertResponse")]
        string SalesInsert(string Master, string Details, string ExportDetail, string Tracking, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SalesInsert", ReplyAction="http://tempuri.org/ISaleWCF/SalesInsertResponse")]
        System.Threading.Tasks.Task<string> SalesInsertAsync(string Master, string Details, string ExportDetail, string Tracking, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SalesUpdate", ReplyAction="http://tempuri.org/ISaleWCF/SalesUpdateResponse")]
        string SalesUpdate(string wcfMaster, string wcfDetails, string wcfExportDetails, string wcfTrackings, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SalesUpdate", ReplyAction="http://tempuri.org/ISaleWCF/SalesUpdateResponse")]
        System.Threading.Tasks.Task<string> SalesUpdateAsync(string wcfMaster, string wcfDetails, string wcfExportDetails, string wcfTrackings, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SalesPost", ReplyAction="http://tempuri.org/ISaleWCF/SalesPostResponse")]
        string SalesPost(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SalesPost", ReplyAction="http://tempuri.org/ISaleWCF/SalesPostResponse")]
        System.Threading.Tasks.Task<string> SalesPostAsync(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/CurrencyInfo", ReplyAction="http://tempuri.org/ISaleWCF/CurrencyInfoResponse")]
        string CurrencyInfo(string salesInvoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/CurrencyInfo", ReplyAction="http://tempuri.org/ISaleWCF/CurrencyInfoResponse")]
        System.Threading.Tasks.Task<string> CurrencyInfoAsync(string salesInvoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SearchSalesHeaderDTNew", ReplyAction="http://tempuri.org/ISaleWCF/SearchSalesHeaderDTNewResponse")]
        string SearchSalesHeaderDTNew(string SalesInvoiceNo, string ImportIDExcel, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SearchSalesHeaderDTNew", ReplyAction="http://tempuri.org/ISaleWCF/SearchSalesHeaderDTNewResponse")]
        System.Threading.Tasks.Task<string> SearchSalesHeaderDTNewAsync(string SalesInvoiceNo, string ImportIDExcel, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SearchSaleDetailDTNew", ReplyAction="http://tempuri.org/ISaleWCF/SearchSaleDetailDTNewResponse")]
        string SearchSaleDetailDTNew(string SalesInvoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SearchSaleDetailDTNew", ReplyAction="http://tempuri.org/ISaleWCF/SearchSaleDetailDTNewResponse")]
        System.Threading.Tasks.Task<string> SearchSaleDetailDTNewAsync(string SalesInvoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ReturnSaleQty", ReplyAction="http://tempuri.org/ISaleWCF/ReturnSaleQtyResponse")]
        string ReturnSaleQty(string saleReturnId, string itemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ReturnSaleQty", ReplyAction="http://tempuri.org/ISaleWCF/ReturnSaleQtyResponse")]
        System.Threading.Tasks.Task<string> ReturnSaleQtyAsync(string saleReturnId, string itemNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SearchSaleExportDTNew", ReplyAction="http://tempuri.org/ISaleWCF/SearchSaleExportDTNewResponse")]
        string SearchSaleExportDTNew(string SalesInvoiceNo, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SearchSaleExportDTNew", ReplyAction="http://tempuri.org/ISaleWCF/SearchSaleExportDTNewResponse")]
        System.Threading.Tasks.Task<string> SearchSaleExportDTNewAsync(string SalesInvoiceNo, string databaseName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ImportData", ReplyAction="http://tempuri.org/ISaleWCF/ImportDataResponse")]
        string ImportData(string dtSaleMwcf, string dtSaleDwcf, string dtSaleEwcf, bool CommercialImporter, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ImportData", ReplyAction="http://tempuri.org/ISaleWCF/ImportDataResponse")]
        System.Threading.Tasks.Task<string> ImportDataAsync(string dtSaleMwcf, string dtSaleDwcf, string dtSaleEwcf, bool CommercialImporter, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SetDeliveryChallanNo", ReplyAction="http://tempuri.org/ISaleWCF/SetDeliveryChallanNoResponse")]
        void SetDeliveryChallanNo(string saleInvoiceNo, string challanDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SetDeliveryChallanNo", ReplyAction="http://tempuri.org/ISaleWCF/SetDeliveryChallanNoResponse")]
        System.Threading.Tasks.Task SetDeliveryChallanNoAsync(string saleInvoiceNo, string challanDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SetGatePass", ReplyAction="http://tempuri.org/ISaleWCF/SetGatePassResponse")]
        void SetGatePass(string saleInvoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SetGatePass", ReplyAction="http://tempuri.org/ISaleWCF/SetGatePassResponse")]
        System.Threading.Tasks.Task SetGatePassAsync(string saleInvoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SelectAllList", ReplyAction="http://tempuri.org/ISaleWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SelectAllList", ReplyAction="http://tempuri.org/ISaleWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SelectAll", ReplyAction="http://tempuri.org/ISaleWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SelectAll", ReplyAction="http://tempuri.org/ISaleWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetSaleExcelData", ReplyAction="http://tempuri.org/ISaleWCF/GetSaleExcelDataResponse")]
        string GetSaleExcelData(string invoiceListwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetSaleExcelData", ReplyAction="http://tempuri.org/ISaleWCF/GetSaleExcelDataResponse")]
        System.Threading.Tasks.Task<string> GetSaleExcelDataAsync(string invoiceListwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/MultiplePost", ReplyAction="http://tempuri.org/ISaleWCF/MultiplePostResponse")]
        string MultiplePost(string Idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/MultiplePost", ReplyAction="http://tempuri.org/ISaleWCF/MultiplePostResponse")]
        System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/PostSales", ReplyAction="http://tempuri.org/ISaleWCF/PostSalesResponse")]
        string PostSales(string tablewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/PostSales", ReplyAction="http://tempuri.org/ISaleWCF/PostSalesResponse")]
        System.Threading.Tasks.Task<string> PostSalesAsync(string tablewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/UpdatePrintNew", ReplyAction="http://tempuri.org/ISaleWCF/UpdatePrintNewResponse")]
        string UpdatePrintNew(string InvoiceNo, int PrintCopy, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/UpdatePrintNew", ReplyAction="http://tempuri.org/ISaleWCF/UpdatePrintNewResponse")]
        System.Threading.Tasks.Task<string> UpdatePrintNewAsync(string InvoiceNo, int PrintCopy, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveAndProcess", ReplyAction="http://tempuri.org/ISaleWCF/SaveAndProcessResponse")]
        string SaveAndProcess(string datawcf, int branchId, string app, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveAndProcess", ReplyAction="http://tempuri.org/ISaleWCF/SaveAndProcessResponse")]
        System.Threading.Tasks.Task<string> SaveAndProcessAsync(string datawcf, int branchId, string app, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetById", ReplyAction="http://tempuri.org/ISaleWCF/GetByIdResponse")]
        string GetById(string id, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetById", ReplyAction="http://tempuri.org/ISaleWCF/GetByIdResponse")]
        System.Threading.Tasks.Task<string> GetByIdAsync(string id, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetInvoiceNoFromTemp", ReplyAction="http://tempuri.org/ISaleWCF/GetInvoiceNoFromTempResponse")]
        string GetInvoiceNoFromTemp(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetInvoiceNoFromTemp", ReplyAction="http://tempuri.org/ISaleWCF/GetInvoiceNoFromTempResponse")]
        System.Threading.Tasks.Task<string> GetInvoiceNoFromTempAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetUnProcessedTempData", ReplyAction="http://tempuri.org/ISaleWCF/GetUnProcessedTempDataResponse")]
        string GetUnProcessedTempData(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetUnProcessedTempData", ReplyAction="http://tempuri.org/ISaleWCF/GetUnProcessedTempDataResponse")]
        System.Threading.Tasks.Task<string> GetUnProcessedTempDataAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetOldDbList", ReplyAction="http://tempuri.org/ISaleWCF/GetOldDbListResponse")]
        string GetOldDbList(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetOldDbList", ReplyAction="http://tempuri.org/ISaleWCF/GetOldDbListResponse")]
        System.Threading.Tasks.Task<string> GetOldDbListAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaleTempNoBranch", ReplyAction="http://tempuri.org/ISaleWCF/SaleTempNoBranchResponse")]
        string SaleTempNoBranch(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaleTempNoBranch", ReplyAction="http://tempuri.org/ISaleWCF/SaleTempNoBranchResponse")]
        System.Threading.Tasks.Task<string> SaleTempNoBranchAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/CheckInvoiceNoExist", ReplyAction="http://tempuri.org/ISaleWCF/CheckInvoiceNoExistResponse")]
        string CheckInvoiceNoExist(string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/CheckInvoiceNoExist", ReplyAction="http://tempuri.org/ISaleWCF/CheckInvoiceNoExistResponse")]
        System.Threading.Tasks.Task<string> CheckInvoiceNoExistAsync(string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetMasterData", ReplyAction="http://tempuri.org/ISaleWCF/GetMasterDataResponse")]
        string GetMasterData(string app, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetMasterData", ReplyAction="http://tempuri.org/ISaleWCF/GetMasterDataResponse")]
        System.Threading.Tasks.Task<string> GetMasterDataAsync(string app, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetSaleJoin", ReplyAction="http://tempuri.org/ISaleWCF/GetSaleJoinResponse")]
        string GetSaleJoin(string invoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetSaleJoin", ReplyAction="http://tempuri.org/ISaleWCF/GetSaleJoinResponse")]
        System.Threading.Tasks.Task<string> GetSaleJoinAsync(string invoiceNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetUnProcessedCount", ReplyAction="http://tempuri.org/ISaleWCF/GetUnProcessedCountResponse")]
        string GetUnProcessedCount(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetUnProcessedCount", ReplyAction="http://tempuri.org/ISaleWCF/GetUnProcessedCountResponse")]
        System.Threading.Tasks.Task<string> GetUnProcessedCountAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetUnProcessedCount_tempTable", ReplyAction="http://tempuri.org/ISaleWCF/GetUnProcessedCount_tempTableResponse")]
        string GetUnProcessedCount_tempTable(string tempTable, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetUnProcessedCount_tempTable", ReplyAction="http://tempuri.org/ISaleWCF/GetUnProcessedCount_tempTableResponse")]
        System.Threading.Tasks.Task<string> GetUnProcessedCount_tempTableAsync(string tempTable, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetTopUnProcessed", ReplyAction="http://tempuri.org/ISaleWCF/GetTopUnProcessedResponse")]
        string GetTopUnProcessed(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetTopUnProcessed", ReplyAction="http://tempuri.org/ISaleWCF/GetTopUnProcessedResponse")]
        System.Threading.Tasks.Task<string> GetTopUnProcessedAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ProccessTempData", ReplyAction="http://tempuri.org/ISaleWCF/ProccessTempDataResponse")]
        string ProccessTempData(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ProccessTempData", ReplyAction="http://tempuri.org/ISaleWCF/ProccessTempDataResponse")]
        System.Threading.Tasks.Task<string> ProccessTempDataAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveSalesToLink3", ReplyAction="http://tempuri.org/ISaleWCF/SaveSalesToLink3Response")]
        string SaveSalesToLink3(string tablewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveSalesToLink3", ReplyAction="http://tempuri.org/ISaleWCF/SaveSalesToLink3Response")]
        System.Threading.Tasks.Task<string> SaveSalesToLink3Async(string tablewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveSalesToKohinoor", ReplyAction="http://tempuri.org/ISaleWCF/SaveSalesToKohinoorResponse")]
        string SaveSalesToKohinoor(string tablewcf, string dbwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveSalesToKohinoor", ReplyAction="http://tempuri.org/ISaleWCF/SaveSalesToKohinoorResponse")]
        System.Threading.Tasks.Task<string> SaveSalesToKohinoorAsync(string tablewcf, string dbwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveTempTest", ReplyAction="http://tempuri.org/ISaleWCF/SaveTempTestResponse")]
        string SaveTempTest(string tablewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveTempTest", ReplyAction="http://tempuri.org/ISaleWCF/SaveTempTestResponse")]
        System.Threading.Tasks.Task<string> SaveTempTestAsync(string tablewcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/UpdateIsProcessed", ReplyAction="http://tempuri.org/ISaleWCF/UpdateIsProcessedResponse")]
        string UpdateIsProcessed(int flag, string Id, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/UpdateIsProcessed", ReplyAction="http://tempuri.org/ISaleWCF/UpdateIsProcessedResponse")]
        System.Threading.Tasks.Task<string> UpdateIsProcessedAsync(int flag, string Id, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetFisrtInvoiceId", ReplyAction="http://tempuri.org/ISaleWCF/GetFisrtInvoiceIdResponse")]
        string GetFisrtInvoiceId(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/GetFisrtInvoiceId", ReplyAction="http://tempuri.org/ISaleWCF/GetFisrtInvoiceIdResponse")]
        System.Threading.Tasks.Task<string> GetFisrtInvoiceIdAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ImportBigData", ReplyAction="http://tempuri.org/ISaleWCF/ImportBigDataResponse")]
        string ImportBigData(string salesDatawcf, bool deleteFlag, int branchId, string connVMwcf, bool IsDiscount, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ImportBigData", ReplyAction="http://tempuri.org/ISaleWCF/ImportBigDataResponse")]
        System.Threading.Tasks.Task<string> ImportBigDataAsync(string salesDatawcf, bool deleteFlag, int branchId, string connVMwcf, bool IsDiscount, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ImportSalesBigData", ReplyAction="http://tempuri.org/ISaleWCF/ImportSalesBigDataResponse")]
        string ImportSalesBigData(string salesDatawcf, bool deleteFlag, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/ImportSalesBigData", ReplyAction="http://tempuri.org/ISaleWCF/ImportSalesBigDataResponse")]
        System.Threading.Tasks.Task<string> ImportSalesBigDataAsync(string salesDatawcf, bool deleteFlag, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveAndProcessOtherDb", ReplyAction="http://tempuri.org/ISaleWCF/SaveAndProcessOtherDbResponse")]
        string SaveAndProcessOtherDb(string datawcf, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveAndProcessOtherDb", ReplyAction="http://tempuri.org/ISaleWCF/SaveAndProcessOtherDbResponse")]
        System.Threading.Tasks.Task<string> SaveAndProcessOtherDbAsync(string datawcf, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveAndProcessTempData", ReplyAction="http://tempuri.org/ISaleWCF/SaveAndProcessTempDataResponse")]
        string SaveAndProcessTempData(string datawcf, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveAndProcessTempData", ReplyAction="http://tempuri.org/ISaleWCF/SaveAndProcessTempDataResponse")]
        System.Threading.Tasks.Task<string> SaveAndProcessTempDataAsync(string datawcf, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveInvoiceIdSaleTemp", ReplyAction="http://tempuri.org/ISaleWCF/SaveInvoiceIdSaleTempResponse")]
        string SaveInvoiceIdSaleTemp(int firstId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISaleWCF/SaveInvoiceIdSaleTemp", ReplyAction="http://tempuri.org/ISaleWCF/SaveInvoiceIdSaleTempResponse")]
        System.Threading.Tasks.Task<string> SaveInvoiceIdSaleTempAsync(int firstId, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISaleWCFChannel : VATDesktop.Repo.SaleWCF.ISaleWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaleWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.SaleWCF.ISaleWCF>, VATDesktop.Repo.SaleWCF.ISaleWCF {
        
        public SaleWCFClient() {
        }
        
        public SaleWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SaleWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SaleWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SaleWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string GetCategoryName(string itemNo, string connVMwcf) {
            return base.Channel.GetCategoryName(itemNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetCategoryNameAsync(string itemNo, string connVMwcf) {
            return base.Channel.GetCategoryNameAsync(itemNo, connVMwcf);
        }
        
        public string SalesInsert(string Master, string Details, string ExportDetail, string Tracking, int branchId, string connVMwcf) {
            return base.Channel.SalesInsert(Master, Details, ExportDetail, Tracking, branchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SalesInsertAsync(string Master, string Details, string ExportDetail, string Tracking, int branchId, string connVMwcf) {
            return base.Channel.SalesInsertAsync(Master, Details, ExportDetail, Tracking, branchId, connVMwcf);
        }
        
        public string SalesUpdate(string wcfMaster, string wcfDetails, string wcfExportDetails, string wcfTrackings, string connVMwcf) {
            return base.Channel.SalesUpdate(wcfMaster, wcfDetails, wcfExportDetails, wcfTrackings, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SalesUpdateAsync(string wcfMaster, string wcfDetails, string wcfExportDetails, string wcfTrackings, string connVMwcf) {
            return base.Channel.SalesUpdateAsync(wcfMaster, wcfDetails, wcfExportDetails, wcfTrackings, connVMwcf);
        }
        
        public string SalesPost(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf) {
            return base.Channel.SalesPost(Masterwcf, Detailswcf, Trackingswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SalesPostAsync(string Masterwcf, string Detailswcf, string Trackingswcf, string connVMwcf) {
            return base.Channel.SalesPostAsync(Masterwcf, Detailswcf, Trackingswcf, connVMwcf);
        }
        
        public string CurrencyInfo(string salesInvoiceNo, string connVMwcf) {
            return base.Channel.CurrencyInfo(salesInvoiceNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyInfoAsync(string salesInvoiceNo, string connVMwcf) {
            return base.Channel.CurrencyInfoAsync(salesInvoiceNo, connVMwcf);
        }
        
        public string SearchSalesHeaderDTNew(string SalesInvoiceNo, string ImportIDExcel, string connVMwcf) {
            return base.Channel.SearchSalesHeaderDTNew(SalesInvoiceNo, ImportIDExcel, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchSalesHeaderDTNewAsync(string SalesInvoiceNo, string ImportIDExcel, string connVMwcf) {
            return base.Channel.SearchSalesHeaderDTNewAsync(SalesInvoiceNo, ImportIDExcel, connVMwcf);
        }
        
        public string SearchSaleDetailDTNew(string SalesInvoiceNo, string connVMwcf) {
            return base.Channel.SearchSaleDetailDTNew(SalesInvoiceNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchSaleDetailDTNewAsync(string SalesInvoiceNo, string connVMwcf) {
            return base.Channel.SearchSaleDetailDTNewAsync(SalesInvoiceNo, connVMwcf);
        }
        
        public string ReturnSaleQty(string saleReturnId, string itemNo, string connVMwcf) {
            return base.Channel.ReturnSaleQty(saleReturnId, itemNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ReturnSaleQtyAsync(string saleReturnId, string itemNo, string connVMwcf) {
            return base.Channel.ReturnSaleQtyAsync(saleReturnId, itemNo, connVMwcf);
        }
        
        public string SearchSaleExportDTNew(string SalesInvoiceNo, string databaseName, string connVMwcf) {
            return base.Channel.SearchSaleExportDTNew(SalesInvoiceNo, databaseName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchSaleExportDTNewAsync(string SalesInvoiceNo, string databaseName, string connVMwcf) {
            return base.Channel.SearchSaleExportDTNewAsync(SalesInvoiceNo, databaseName, connVMwcf);
        }
        
        public string ImportData(string dtSaleMwcf, string dtSaleDwcf, string dtSaleEwcf, bool CommercialImporter, int branchId, string connVMwcf) {
            return base.Channel.ImportData(dtSaleMwcf, dtSaleDwcf, dtSaleEwcf, CommercialImporter, branchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ImportDataAsync(string dtSaleMwcf, string dtSaleDwcf, string dtSaleEwcf, bool CommercialImporter, int branchId, string connVMwcf) {
            return base.Channel.ImportDataAsync(dtSaleMwcf, dtSaleDwcf, dtSaleEwcf, CommercialImporter, branchId, connVMwcf);
        }
        
        public void SetDeliveryChallanNo(string saleInvoiceNo, string challanDate, string connVMwcf) {
            base.Channel.SetDeliveryChallanNo(saleInvoiceNo, challanDate, connVMwcf);
        }
        
        public System.Threading.Tasks.Task SetDeliveryChallanNoAsync(string saleInvoiceNo, string challanDate, string connVMwcf) {
            return base.Channel.SetDeliveryChallanNoAsync(saleInvoiceNo, challanDate, connVMwcf);
        }
        
        public void SetGatePass(string saleInvoiceNo, string connVMwcf) {
            base.Channel.SetGatePass(saleInvoiceNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task SetGatePassAsync(string saleInvoiceNo, string connVMwcf) {
            return base.Channel.SetGatePassAsync(saleInvoiceNo, connVMwcf);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, string connVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, string connVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf, connVMwcf);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string likeVMwcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, likeVMwcf, Dt, connVMwcf);
        }
        
        public string GetSaleExcelData(string invoiceListwcf, string connVMwcf) {
            return base.Channel.GetSaleExcelData(invoiceListwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetSaleExcelDataAsync(string invoiceListwcf, string connVMwcf) {
            return base.Channel.GetSaleExcelDataAsync(invoiceListwcf, connVMwcf);
        }
        
        public string MultiplePost(string Idswcf, string connVMwcf) {
            return base.Channel.MultiplePost(Idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMwcf) {
            return base.Channel.MultiplePostAsync(Idswcf, connVMwcf);
        }
        
        public string PostSales(string tablewcf, string connVMwcf) {
            return base.Channel.PostSales(tablewcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> PostSalesAsync(string tablewcf, string connVMwcf) {
            return base.Channel.PostSalesAsync(tablewcf, connVMwcf);
        }
        
        public string UpdatePrintNew(string InvoiceNo, int PrintCopy, string connVMwcf) {
            return base.Channel.UpdatePrintNew(InvoiceNo, PrintCopy, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePrintNewAsync(string InvoiceNo, int PrintCopy, string connVMwcf) {
            return base.Channel.UpdatePrintNewAsync(InvoiceNo, PrintCopy, connVMwcf);
        }
        
        public string SaveAndProcess(string datawcf, int branchId, string app, string connVMwcf) {
            return base.Channel.SaveAndProcess(datawcf, branchId, app, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveAndProcessAsync(string datawcf, int branchId, string app, string connVMwcf) {
            return base.Channel.SaveAndProcessAsync(datawcf, branchId, app, connVMwcf);
        }
        
        public string GetById(string id, string connVMwcf) {
            return base.Channel.GetById(id, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetByIdAsync(string id, string connVMwcf) {
            return base.Channel.GetByIdAsync(id, connVMwcf);
        }
        
        public string GetInvoiceNoFromTemp(string connVMwcf) {
            return base.Channel.GetInvoiceNoFromTemp(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetInvoiceNoFromTempAsync(string connVMwcf) {
            return base.Channel.GetInvoiceNoFromTempAsync(connVMwcf);
        }
        
        public string GetUnProcessedTempData(string connVMwcf) {
            return base.Channel.GetUnProcessedTempData(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetUnProcessedTempDataAsync(string connVMwcf) {
            return base.Channel.GetUnProcessedTempDataAsync(connVMwcf);
        }
        
        public string GetOldDbList(string connVMwcf) {
            return base.Channel.GetOldDbList(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetOldDbListAsync(string connVMwcf) {
            return base.Channel.GetOldDbListAsync(connVMwcf);
        }
        
        public string SaleTempNoBranch(string connVMwcf) {
            return base.Channel.SaleTempNoBranch(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaleTempNoBranchAsync(string connVMwcf) {
            return base.Channel.SaleTempNoBranchAsync(connVMwcf);
        }
        
        public string CheckInvoiceNoExist(string idswcf, string connVMwcf) {
            return base.Channel.CheckInvoiceNoExist(idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> CheckInvoiceNoExistAsync(string idswcf, string connVMwcf) {
            return base.Channel.CheckInvoiceNoExistAsync(idswcf, connVMwcf);
        }
        
        public string GetMasterData(string app, string connVMwcf) {
            return base.Channel.GetMasterData(app, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetMasterDataAsync(string app, string connVMwcf) {
            return base.Channel.GetMasterDataAsync(app, connVMwcf);
        }
        
        public string GetSaleJoin(string invoiceNo, string connVMwcf) {
            return base.Channel.GetSaleJoin(invoiceNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetSaleJoinAsync(string invoiceNo, string connVMwcf) {
            return base.Channel.GetSaleJoinAsync(invoiceNo, connVMwcf);
        }
        
        public string GetUnProcessedCount(string connVMwcf) {
            return base.Channel.GetUnProcessedCount(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetUnProcessedCountAsync(string connVMwcf) {
            return base.Channel.GetUnProcessedCountAsync(connVMwcf);
        }
        
        public string GetUnProcessedCount_tempTable(string tempTable, string connVMwcf) {
            return base.Channel.GetUnProcessedCount_tempTable(tempTable, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetUnProcessedCount_tempTableAsync(string tempTable, string connVMwcf) {
            return base.Channel.GetUnProcessedCount_tempTableAsync(tempTable, connVMwcf);
        }
        
        public string GetTopUnProcessed(string connVMwcf) {
            return base.Channel.GetTopUnProcessed(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetTopUnProcessedAsync(string connVMwcf) {
            return base.Channel.GetTopUnProcessedAsync(connVMwcf);
        }
        
        public string ProccessTempData(string connVMwcf) {
            return base.Channel.ProccessTempData(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ProccessTempDataAsync(string connVMwcf) {
            return base.Channel.ProccessTempDataAsync(connVMwcf);
        }
        
        public string SaveSalesToLink3(string tablewcf, string connVMwcf) {
            return base.Channel.SaveSalesToLink3(tablewcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveSalesToLink3Async(string tablewcf, string connVMwcf) {
            return base.Channel.SaveSalesToLink3Async(tablewcf, connVMwcf);
        }
        
        public string SaveSalesToKohinoor(string tablewcf, string dbwcf, string connVMwcf) {
            return base.Channel.SaveSalesToKohinoor(tablewcf, dbwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveSalesToKohinoorAsync(string tablewcf, string dbwcf, string connVMwcf) {
            return base.Channel.SaveSalesToKohinoorAsync(tablewcf, dbwcf, connVMwcf);
        }
        
        public string SaveTempTest(string tablewcf, string connVMwcf) {
            return base.Channel.SaveTempTest(tablewcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveTempTestAsync(string tablewcf, string connVMwcf) {
            return base.Channel.SaveTempTestAsync(tablewcf, connVMwcf);
        }
        
        public string UpdateIsProcessed(int flag, string Id, string connVMwcf) {
            return base.Channel.UpdateIsProcessed(flag, Id, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateIsProcessedAsync(int flag, string Id, string connVMwcf) {
            return base.Channel.UpdateIsProcessedAsync(flag, Id, connVMwcf);
        }
        
        public string GetFisrtInvoiceId(string connVMwcf) {
            return base.Channel.GetFisrtInvoiceId(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetFisrtInvoiceIdAsync(string connVMwcf) {
            return base.Channel.GetFisrtInvoiceIdAsync(connVMwcf);
        }
        
        public string ImportBigData(string salesDatawcf, bool deleteFlag, int branchId, string connVMwcf, bool IsDiscount, string userId) {
            return base.Channel.ImportBigData(salesDatawcf, deleteFlag, branchId, connVMwcf, IsDiscount, userId);
        }
        
        public System.Threading.Tasks.Task<string> ImportBigDataAsync(string salesDatawcf, bool deleteFlag, int branchId, string connVMwcf, bool IsDiscount, string userId) {
            return base.Channel.ImportBigDataAsync(salesDatawcf, deleteFlag, branchId, connVMwcf, IsDiscount, userId);
        }
        
        public string ImportSalesBigData(string salesDatawcf, bool deleteFlag, string connVMwcf) {
            return base.Channel.ImportSalesBigData(salesDatawcf, deleteFlag, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ImportSalesBigDataAsync(string salesDatawcf, bool deleteFlag, string connVMwcf) {
            return base.Channel.ImportSalesBigDataAsync(salesDatawcf, deleteFlag, connVMwcf);
        }
        
        public string SaveAndProcessOtherDb(string datawcf, int branchId, string connVMwcf) {
            return base.Channel.SaveAndProcessOtherDb(datawcf, branchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveAndProcessOtherDbAsync(string datawcf, int branchId, string connVMwcf) {
            return base.Channel.SaveAndProcessOtherDbAsync(datawcf, branchId, connVMwcf);
        }
        
        public string SaveAndProcessTempData(string datawcf, int branchId, string connVMwcf) {
            return base.Channel.SaveAndProcessTempData(datawcf, branchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveAndProcessTempDataAsync(string datawcf, int branchId, string connVMwcf) {
            return base.Channel.SaveAndProcessTempDataAsync(datawcf, branchId, connVMwcf);
        }
        
        public string SaveInvoiceIdSaleTemp(int firstId, string connVMwcf) {
            return base.Channel.SaveInvoiceIdSaleTemp(firstId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveInvoiceIdSaleTempAsync(int firstId, string connVMwcf) {
            return base.Channel.SaveInvoiceIdSaleTempAsync(firstId, connVMwcf);
        }
    }
}
