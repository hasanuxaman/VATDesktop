//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.TenderWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TenderWCF.ITenderWCF")]
    public interface ITenderWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/DoWork", ReplyAction="http://tempuri.org/ITenderWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/DoWork", ReplyAction="http://tempuri.org/ITenderWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderDetailSaleNew", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderDetailSaleNewResponse")]
        string SearchTenderDetailSaleNew(string TenderId, string transactiondate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderDetailSaleNew", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderDetailSaleNewResponse")]
        System.Threading.Tasks.Task<string> SearchTenderDetailSaleNewAsync(string TenderId, string transactiondate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderDetailSale", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderDetailSaleResponse")]
        string SearchTenderDetailSale(string TenderId, string transactiondate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderDetailSale", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderDetailSaleResponse")]
        System.Threading.Tasks.Task<string> SearchTenderDetailSaleAsync(string TenderId, string transactiondate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/ImportData", ReplyAction="http://tempuri.org/ITenderWCF/ImportDataResponse")]
        string ImportData(string dtTenderMwcf, string dtTenderDwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/ImportData", ReplyAction="http://tempuri.org/ITenderWCF/ImportDataResponse")]
        System.Threading.Tasks.Task<string> ImportDataAsync(string dtTenderMwcf, string dtTenderDwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderDetail", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderDetailResponse")]
        string SearchTenderDetail(string TenderId, string transactionDate, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderDetail", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderDetailResponse")]
        System.Threading.Tasks.Task<string> SearchTenderDetailAsync(string TenderId, string transactionDate, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderHeaderByCustomerGrp", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderHeaderByCustomerGrpResponse")]
        string SearchTenderHeaderByCustomerGrp(string TenderId, string RefNo, string CustomerGrpID, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SearchTenderHeaderByCustomerGrp", ReplyAction="http://tempuri.org/ITenderWCF/SearchTenderHeaderByCustomerGrpResponse")]
        System.Threading.Tasks.Task<string> SearchTenderHeaderByCustomerGrpAsync(string TenderId, string RefNo, string CustomerGrpID, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SelectAll", ReplyAction="http://tempuri.org/ITenderWCF/SelectAllResponse")]
        string SelectAll(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SelectAll", ReplyAction="http://tempuri.org/ITenderWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SelectAllDetails", ReplyAction="http://tempuri.org/ITenderWCF/SelectAllDetailsResponse")]
        string SelectAllDetails(string tenderId, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SelectAllDetails", ReplyAction="http://tempuri.org/ITenderWCF/SelectAllDetailsResponse")]
        System.Threading.Tasks.Task<string> SelectAllDetailsAsync(string tenderId, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SelectAllList", ReplyAction="http://tempuri.org/ITenderWCF/SelectAllListResponse")]
        string SelectAllList(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/SelectAllList", ReplyAction="http://tempuri.org/ITenderWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/TenderInsert", ReplyAction="http://tempuri.org/ITenderWCF/TenderInsertResponse")]
        string TenderInsert(string Masterwcf, string Detailswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/TenderInsert", ReplyAction="http://tempuri.org/ITenderWCF/TenderInsertResponse")]
        System.Threading.Tasks.Task<string> TenderInsertAsync(string Masterwcf, string Detailswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/TenderUpdate", ReplyAction="http://tempuri.org/ITenderWCF/TenderUpdateResponse")]
        string TenderUpdate(string Masterwcf, string Detailswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITenderWCF/TenderUpdate", ReplyAction="http://tempuri.org/ITenderWCF/TenderUpdateResponse")]
        System.Threading.Tasks.Task<string> TenderUpdateAsync(string Masterwcf, string Detailswcf, string connVMWCF);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITenderWCFChannel : VATDesktop.Repo.TenderWCF.ITenderWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TenderWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.TenderWCF.ITenderWCF>, VATDesktop.Repo.TenderWCF.ITenderWCF {
        
        public TenderWCFClient() {
        }
        
        public TenderWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TenderWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TenderWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TenderWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SearchTenderDetailSaleNew(string TenderId, string transactiondate, string connection) {
            return base.Channel.SearchTenderDetailSaleNew(TenderId, transactiondate, connection);
        }
        
        public System.Threading.Tasks.Task<string> SearchTenderDetailSaleNewAsync(string TenderId, string transactiondate, string connection) {
            return base.Channel.SearchTenderDetailSaleNewAsync(TenderId, transactiondate, connection);
        }
        
        public string SearchTenderDetailSale(string TenderId, string transactiondate, string connection) {
            return base.Channel.SearchTenderDetailSale(TenderId, transactiondate, connection);
        }
        
        public System.Threading.Tasks.Task<string> SearchTenderDetailSaleAsync(string TenderId, string transactiondate, string connection) {
            return base.Channel.SearchTenderDetailSaleAsync(TenderId, transactiondate, connection);
        }
        
        public string ImportData(string dtTenderMwcf, string dtTenderDwcf, string connVMWCF) {
            return base.Channel.ImportData(dtTenderMwcf, dtTenderDwcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> ImportDataAsync(string dtTenderMwcf, string dtTenderDwcf, string connVMWCF) {
            return base.Channel.ImportDataAsync(dtTenderMwcf, dtTenderDwcf, connVMWCF);
        }
        
        public string SearchTenderDetail(string TenderId, string transactionDate, string connVMWCF) {
            return base.Channel.SearchTenderDetail(TenderId, transactionDate, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SearchTenderDetailAsync(string TenderId, string transactionDate, string connVMWCF) {
            return base.Channel.SearchTenderDetailAsync(TenderId, transactionDate, connVMWCF);
        }
        
        public string SearchTenderHeaderByCustomerGrp(string TenderId, string RefNo, string CustomerGrpID, string connVMWCF) {
            return base.Channel.SearchTenderHeaderByCustomerGrp(TenderId, RefNo, CustomerGrpID, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SearchTenderHeaderByCustomerGrpAsync(string TenderId, string RefNo, string CustomerGrpID, string connVMWCF) {
            return base.Channel.SearchTenderHeaderByCustomerGrpAsync(TenderId, RefNo, CustomerGrpID, connVMWCF);
        }
        
        public string SelectAll(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(string Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public string SelectAllDetails(string tenderId, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllDetails(tenderId, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllDetailsAsync(string tenderId, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllDetailsAsync(tenderId, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public string SelectAllList(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(string Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public string TenderInsert(string Masterwcf, string Detailswcf, string connVMWCF) {
            return base.Channel.TenderInsert(Masterwcf, Detailswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> TenderInsertAsync(string Masterwcf, string Detailswcf, string connVMWCF) {
            return base.Channel.TenderInsertAsync(Masterwcf, Detailswcf, connVMWCF);
        }
        
        public string TenderUpdate(string Masterwcf, string Detailswcf, string connVMWCF) {
            return base.Channel.TenderUpdate(Masterwcf, Detailswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> TenderUpdateAsync(string Masterwcf, string Detailswcf, string connVMWCF) {
            return base.Channel.TenderUpdateAsync(Masterwcf, Detailswcf, connVMWCF);
        }
    }
}
