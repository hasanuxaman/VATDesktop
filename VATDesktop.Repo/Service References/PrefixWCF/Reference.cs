//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.PrefixWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PrefixWCF.IPrefixWCF")]
    public interface IPrefixWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/DoWork", ReplyAction="http://tempuri.org/IPrefixWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/DoWork", ReplyAction="http://tempuri.org/IPrefixWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/DropDownAll", ReplyAction="http://tempuri.org/IPrefixWCF/DropDownAllResponse")]
        string DropDownAll(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/DropDownAll", ReplyAction="http://tempuri.org/IPrefixWCF/DropDownAllResponse")]
        System.Threading.Tasks.Task<string> DropDownAllAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/PrefixDataUpdate", ReplyAction="http://tempuri.org/IPrefixWCF/PrefixDataUpdateResponse")]
        string PrefixDataUpdate(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/PrefixDataUpdate", ReplyAction="http://tempuri.org/IPrefixWCF/PrefixDataUpdateResponse")]
        System.Threading.Tasks.Task<string> PrefixDataUpdateAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/SelectAll", ReplyAction="http://tempuri.org/IPrefixWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/SelectAll", ReplyAction="http://tempuri.org/IPrefixWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/SelectAllList", ReplyAction="http://tempuri.org/IPrefixWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPrefixWCF/SelectAllList", ReplyAction="http://tempuri.org/IPrefixWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPrefixWCFChannel : VATDesktop.Repo.PrefixWCF.IPrefixWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PrefixWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.PrefixWCF.IPrefixWCF>, VATDesktop.Repo.PrefixWCF.IPrefixWCF {
        
        public PrefixWCFClient() {
        }
        
        public PrefixWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PrefixWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PrefixWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PrefixWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string DropDownAll(string connVMwcf) {
            return base.Channel.DropDownAll(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DropDownAllAsync(string connVMwcf) {
            return base.Channel.DropDownAllAsync(connVMwcf);
        }
        
        public string PrefixDataUpdate(string vmwcf, string connVMwcf) {
            return base.Channel.PrefixDataUpdate(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> PrefixDataUpdateAsync(string vmwcf, string connVMwcf) {
            return base.Channel.PrefixDataUpdateAsync(vmwcf, connVMwcf);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf);
        }
    }
}
