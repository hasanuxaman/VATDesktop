//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.TransferReceiveWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TransferReceiveWCF.ITransferReceiveWCF")]
    public interface ITransferReceiveWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/DoWork", ReplyAction="http://tempuri.org/ITransferReceiveWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/DoWork", ReplyAction="http://tempuri.org/ITransferReceiveWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/Insert", ReplyAction="http://tempuri.org/ITransferReceiveWCF/InsertResponse")]
        string Insert(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/Insert", ReplyAction="http://tempuri.org/ITransferReceiveWCF/InsertResponse")]
        System.Threading.Tasks.Task<string> InsertAsync(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/FormLoad", ReplyAction="http://tempuri.org/ITransferReceiveWCF/FormLoadResponse")]
        string FormLoad(string UOMvmwcf, string Productvmwcf, string Name, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/FormLoad", ReplyAction="http://tempuri.org/ITransferReceiveWCF/FormLoadResponse")]
        System.Threading.Tasks.Task<string> FormLoadAsync(string UOMvmwcf, string Productvmwcf, string Name, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/MultiplePost", ReplyAction="http://tempuri.org/ITransferReceiveWCF/MultiplePostResponse")]
        string MultiplePost(string Idswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/MultiplePost", ReplyAction="http://tempuri.org/ITransferReceiveWCF/MultiplePostResponse")]
        System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/Post", ReplyAction="http://tempuri.org/ITransferReceiveWCF/PostResponse")]
        string Post(string Masterwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/Post", ReplyAction="http://tempuri.org/ITransferReceiveWCF/PostResponse")]
        System.Threading.Tasks.Task<string> PostAsync(string Masterwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SearchTransferDetail", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SearchTransferDetailResponse")]
        string SearchTransferDetail(string TransferReceiveNo, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SearchTransferDetail", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SearchTransferDetailResponse")]
        System.Threading.Tasks.Task<string> SearchTransferDetailAsync(string TransferReceiveNo, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SearchTransferReceive", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SearchTransferReceiveResponse")]
        string SearchTransferReceive(string vmwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SearchTransferReceive", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SearchTransferReceiveResponse")]
        System.Threading.Tasks.Task<string> SearchTransferReceiveAsync(string vmwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SelectAll", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SelectAll", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SelectAllList", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SelectAllList", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SelectDetail", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SelectDetailResponse")]
        string SelectDetail(string TransferReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/SelectDetail", ReplyAction="http://tempuri.org/ITransferReceiveWCF/SelectDetailResponse")]
        System.Threading.Tasks.Task<string> SelectDetailAsync(string TransferReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/Update", ReplyAction="http://tempuri.org/ITransferReceiveWCF/UpdateResponse")]
        string Update(string Masterwcf, string Detailswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferReceiveWCF/Update", ReplyAction="http://tempuri.org/ITransferReceiveWCF/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(string Masterwcf, string Detailswcf, string connVMWCF);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransferReceiveWCFChannel : VATDesktop.Repo.TransferReceiveWCF.ITransferReceiveWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferReceiveWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.TransferReceiveWCF.ITransferReceiveWCF>, VATDesktop.Repo.TransferReceiveWCF.ITransferReceiveWCF {
        
        public TransferReceiveWCFClient() {
        }
        
        public TransferReceiveWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransferReceiveWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferReceiveWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferReceiveWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string Insert(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.Insert(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> InsertAsync(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.InsertAsync(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public string FormLoad(string UOMvmwcf, string Productvmwcf, string Name, string connVMWCF) {
            return base.Channel.FormLoad(UOMvmwcf, Productvmwcf, Name, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> FormLoadAsync(string UOMvmwcf, string Productvmwcf, string Name, string connVMWCF) {
            return base.Channel.FormLoadAsync(UOMvmwcf, Productvmwcf, Name, connVMWCF);
        }
        
        public string MultiplePost(string Idswcf, string connVMWCF) {
            return base.Channel.MultiplePost(Idswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMWCF) {
            return base.Channel.MultiplePostAsync(Idswcf, connVMWCF);
        }
        
        public string Post(string Masterwcf, string connVMWCF) {
            return base.Channel.Post(Masterwcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> PostAsync(string Masterwcf, string connVMWCF) {
            return base.Channel.PostAsync(Masterwcf, connVMWCF);
        }
        
        public string SearchTransferDetail(string TransferReceiveNo, string connVMWCF) {
            return base.Channel.SearchTransferDetail(TransferReceiveNo, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SearchTransferDetailAsync(string TransferReceiveNo, string connVMWCF) {
            return base.Channel.SearchTransferDetailAsync(TransferReceiveNo, connVMWCF);
        }
        
        public string SearchTransferReceive(string vmwcf, string connVMWCF) {
            return base.Channel.SearchTransferReceive(vmwcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SearchTransferReceiveAsync(string vmwcf, string connVMWCF) {
            return base.Channel.SearchTransferReceiveAsync(vmwcf, connVMWCF);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public string SelectDetail(string TransferReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectDetail(TransferReceiveNo, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectDetailAsync(string TransferReceiveNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectDetailAsync(TransferReceiveNo, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public string Update(string Masterwcf, string Detailswcf, string connVMWCF) {
            return base.Channel.Update(Masterwcf, Detailswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(string Masterwcf, string Detailswcf, string connVMWCF) {
            return base.Channel.UpdateAsync(Masterwcf, Detailswcf, connVMWCF);
        }
    }
}
