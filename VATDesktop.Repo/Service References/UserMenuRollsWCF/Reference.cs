//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.UserMenuRollsWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserMenuRollsWCF.IUserMenuRollsWCF")]
    public interface IUserMenuRollsWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/DoWork", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/DoWork", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsert", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsertResponse")]
        string UserMenuRollsInsert(string FormID, string UserID, string FormName, string Access, string PostAccess, string AddAccess, string EditAccess, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsert", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsertResponse")]
        System.Threading.Tasks.Task<string> UserMenuRollsInsertAsync(string FormID, string UserID, string FormName, string Access, string PostAccess, string AddAccess, string EditAccess, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsertByUser", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsertByUserResponse")]
        string UserMenuRollsInsertByUser(string UserID, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsertByUser", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsInsertByUserResponse")]
        System.Threading.Tasks.Task<string> UserMenuRollsInsertByUserAsync(string UserID, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsSelectAll", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsSelectAllResponse")]
        string UserMenuRollsSelectAll(string UserID, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsSelectAll", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsSelectAllResponse")]
        System.Threading.Tasks.Task<string> UserMenuRollsSelectAllAsync(string UserID, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsUpdate", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsUpdateResponse")]
        string UserMenuRollsUpdate(string dtwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsUpdate", ReplyAction="http://tempuri.org/IUserMenuRollsWCF/UserMenuRollsUpdateResponse")]
        System.Threading.Tasks.Task<string> UserMenuRollsUpdateAsync(string dtwcf, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserMenuRollsWCFChannel : VATDesktop.Repo.UserMenuRollsWCF.IUserMenuRollsWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserMenuRollsWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.UserMenuRollsWCF.IUserMenuRollsWCF>, VATDesktop.Repo.UserMenuRollsWCF.IUserMenuRollsWCF {
        
        public UserMenuRollsWCFClient() {
        }
        
        public UserMenuRollsWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserMenuRollsWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserMenuRollsWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserMenuRollsWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string UserMenuRollsInsert(string FormID, string UserID, string FormName, string Access, string PostAccess, string AddAccess, string EditAccess, string connVMwcf) {
            return base.Channel.UserMenuRollsInsert(FormID, UserID, FormName, Access, PostAccess, AddAccess, EditAccess, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UserMenuRollsInsertAsync(string FormID, string UserID, string FormName, string Access, string PostAccess, string AddAccess, string EditAccess, string connVMwcf) {
            return base.Channel.UserMenuRollsInsertAsync(FormID, UserID, FormName, Access, PostAccess, AddAccess, EditAccess, connVMwcf);
        }
        
        public string UserMenuRollsInsertByUser(string UserID, string connVMwcf) {
            return base.Channel.UserMenuRollsInsertByUser(UserID, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UserMenuRollsInsertByUserAsync(string UserID, string connVMwcf) {
            return base.Channel.UserMenuRollsInsertByUserAsync(UserID, connVMwcf);
        }
        
        public string UserMenuRollsSelectAll(string UserID, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.UserMenuRollsSelectAll(UserID, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UserMenuRollsSelectAllAsync(string UserID, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.UserMenuRollsSelectAllAsync(UserID, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public string UserMenuRollsUpdate(string dtwcf, string connVMwcf) {
            return base.Channel.UserMenuRollsUpdate(dtwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UserMenuRollsUpdateAsync(string dtwcf, string connVMwcf) {
            return base.Channel.UserMenuRollsUpdateAsync(dtwcf, connVMwcf);
        }
    }
}
