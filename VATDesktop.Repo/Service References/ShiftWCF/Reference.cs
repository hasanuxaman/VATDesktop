//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.ShiftWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ShiftWCF.IShiftWCF")]
    public interface IShiftWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/DoWork", ReplyAction="http://tempuri.org/IShiftWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/DoWork", ReplyAction="http://tempuri.org/IShiftWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/SearchForTime", ReplyAction="http://tempuri.org/IShiftWCF/SearchForTimeResponse")]
        string SearchForTime(string time, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/SearchForTime", ReplyAction="http://tempuri.org/IShiftWCF/SearchForTimeResponse")]
        System.Threading.Tasks.Task<string> SearchForTimeAsync(string time, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/DeleteShiftNew", ReplyAction="http://tempuri.org/IShiftWCF/DeleteShiftNewResponse")]
        string DeleteShiftNew(string Id, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/DeleteShiftNew", ReplyAction="http://tempuri.org/IShiftWCF/DeleteShiftNewResponse")]
        System.Threading.Tasks.Task<string> DeleteShiftNewAsync(string Id, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/DropDown", ReplyAction="http://tempuri.org/IShiftWCF/DropDownResponse")]
        string DropDown(int branchId, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/DropDown", ReplyAction="http://tempuri.org/IShiftWCF/DropDownResponse")]
        System.Threading.Tasks.Task<string> DropDownAsync(int branchId, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/InsertToShiftNew", ReplyAction="http://tempuri.org/IShiftWCF/InsertToShiftNewResponse")]
        string InsertToShiftNew(string vmwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/InsertToShiftNew", ReplyAction="http://tempuri.org/IShiftWCF/InsertToShiftNewResponse")]
        System.Threading.Tasks.Task<string> InsertToShiftNewAsync(string vmwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/SearchShift", ReplyAction="http://tempuri.org/IShiftWCF/SearchShiftResponse")]
        string SearchShift(string ShiftName, int Id, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/SearchShift", ReplyAction="http://tempuri.org/IShiftWCF/SearchShiftResponse")]
        System.Threading.Tasks.Task<string> SearchShiftAsync(string ShiftName, int Id, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/SelectAll", ReplyAction="http://tempuri.org/IShiftWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/SelectAll", ReplyAction="http://tempuri.org/IShiftWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/UpdateToShiftNew", ReplyAction="http://tempuri.org/IShiftWCF/UpdateToShiftNewResponse")]
        string UpdateToShiftNew(string vmwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShiftWCF/UpdateToShiftNew", ReplyAction="http://tempuri.org/IShiftWCF/UpdateToShiftNewResponse")]
        System.Threading.Tasks.Task<string> UpdateToShiftNewAsync(string vmwcf, string connVMWCF);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShiftWCFChannel : VATDesktop.Repo.ShiftWCF.IShiftWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShiftWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.ShiftWCF.IShiftWCF>, VATDesktop.Repo.ShiftWCF.IShiftWCF {
        
        public ShiftWCFClient() {
        }
        
        public ShiftWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ShiftWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShiftWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShiftWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SearchForTime(string time, string connVMwcf) {
            return base.Channel.SearchForTime(time, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchForTimeAsync(string time, string connVMwcf) {
            return base.Channel.SearchForTimeAsync(time, connVMwcf);
        }
        
        public string DeleteShiftNew(string Id, string connVMWCF) {
            return base.Channel.DeleteShiftNew(Id, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> DeleteShiftNewAsync(string Id, string connVMWCF) {
            return base.Channel.DeleteShiftNewAsync(Id, connVMWCF);
        }
        
        public string DropDown(int branchId, string connVMWCF) {
            return base.Channel.DropDown(branchId, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> DropDownAsync(int branchId, string connVMWCF) {
            return base.Channel.DropDownAsync(branchId, connVMWCF);
        }
        
        public string InsertToShiftNew(string vmwcf, string connVMWCF) {
            return base.Channel.InsertToShiftNew(vmwcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> InsertToShiftNewAsync(string vmwcf, string connVMWCF) {
            return base.Channel.InsertToShiftNewAsync(vmwcf, connVMWCF);
        }
        
        public string SearchShift(string ShiftName, int Id, string connVMWCF) {
            return base.Channel.SearchShift(ShiftName, Id, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SearchShiftAsync(string ShiftName, int Id, string connVMWCF) {
            return base.Channel.SearchShiftAsync(ShiftName, Id, connVMWCF);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public string UpdateToShiftNew(string vmwcf, string connVMWCF) {
            return base.Channel.UpdateToShiftNew(vmwcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> UpdateToShiftNewAsync(string vmwcf, string connVMWCF) {
            return base.Channel.UpdateToShiftNewAsync(vmwcf, connVMWCF);
        }
    }
}
