//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.ProductCategoryWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductCategoryWCF.IProductCategoryWCF")]
    public interface IProductCategoryWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DoWork", ReplyAction="http://tempuri.org/IProductCategoryWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DoWork", ReplyAction="http://tempuri.org/IProductCategoryWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/Delete", ReplyAction="http://tempuri.org/IProductCategoryWCF/DeleteResponse")]
        string Delete(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/Delete", ReplyAction="http://tempuri.org/IProductCategoryWCF/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DropDown", ReplyAction="http://tempuri.org/IProductCategoryWCF/DropDownResponse")]
        string DropDown(string IsRaw, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DropDown", ReplyAction="http://tempuri.org/IProductCategoryWCF/DropDownResponse")]
        System.Threading.Tasks.Task<string> DropDownAsync(string IsRaw, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DropDownAll", ReplyAction="http://tempuri.org/IProductCategoryWCF/DropDownAllResponse")]
        string DropDownAll(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DropDownAll", ReplyAction="http://tempuri.org/IProductCategoryWCF/DropDownAllResponse")]
        System.Threading.Tasks.Task<string> DropDownAllAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DropDownProductType", ReplyAction="http://tempuri.org/IProductCategoryWCF/DropDownProductTypeResponse")]
        string DropDownProductType(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/DropDownProductType", ReplyAction="http://tempuri.org/IProductCategoryWCF/DropDownProductTypeResponse")]
        System.Threading.Tasks.Task<string> DropDownProductTypeAsync(string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/InsertToProductCategory", ReplyAction="http://tempuri.org/IProductCategoryWCF/InsertToProductCategoryResponse")]
        string InsertToProductCategory(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/InsertToProductCategory", ReplyAction="http://tempuri.org/IProductCategoryWCF/InsertToProductCategoryResponse")]
        System.Threading.Tasks.Task<string> InsertToProductCategoryAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/SelectAll", ReplyAction="http://tempuri.org/IProductCategoryWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string DbName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/SelectAll", ReplyAction="http://tempuri.org/IProductCategoryWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string DbName, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/SelectAllList", ReplyAction="http://tempuri.org/IProductCategoryWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/SelectAllList", ReplyAction="http://tempuri.org/IProductCategoryWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/UpdateProductCategory", ReplyAction="http://tempuri.org/IProductCategoryWCF/UpdateProductCategoryResponse")]
        string UpdateProductCategory(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductCategoryWCF/UpdateProductCategory", ReplyAction="http://tempuri.org/IProductCategoryWCF/UpdateProductCategoryResponse")]
        System.Threading.Tasks.Task<string> UpdateProductCategoryAsync(string vmwcf, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductCategoryWCFChannel : VATDesktop.Repo.ProductCategoryWCF.IProductCategoryWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductCategoryWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.ProductCategoryWCF.IProductCategoryWCF>, VATDesktop.Repo.ProductCategoryWCF.IProductCategoryWCF {
        
        public ProductCategoryWCFClient() {
        }
        
        public ProductCategoryWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductCategoryWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductCategoryWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductCategoryWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string Delete(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.Delete(vmwcf, idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.DeleteAsync(vmwcf, idswcf, connVMwcf);
        }
        
        public string DropDown(string IsRaw, string connVMwcf) {
            return base.Channel.DropDown(IsRaw, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DropDownAsync(string IsRaw, string connVMwcf) {
            return base.Channel.DropDownAsync(IsRaw, connVMwcf);
        }
        
        public string DropDownAll(string connVMwcf) {
            return base.Channel.DropDownAll(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DropDownAllAsync(string connVMwcf) {
            return base.Channel.DropDownAllAsync(connVMwcf);
        }
        
        public string DropDownProductType(string connVMwcf) {
            return base.Channel.DropDownProductType(connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DropDownProductTypeAsync(string connVMwcf) {
            return base.Channel.DropDownProductTypeAsync(connVMwcf);
        }
        
        public string InsertToProductCategory(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToProductCategory(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToProductCategoryAsync(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToProductCategoryAsync(vmwcf, connVMwcf);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string DbName, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, DbName, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string DbName, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, DbName, connVMwcf);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string UpdateProductCategory(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateProductCategory(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProductCategoryAsync(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateProductCategoryAsync(vmwcf, connVMwcf);
        }
    }
}
