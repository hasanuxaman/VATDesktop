//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.TransferIssueWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TransferIssueWCF.ITransferIssueWCF")]
    public interface ITransferIssueWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/DoWork", ReplyAction="http://tempuri.org/ITransferIssueWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/DoWork", ReplyAction="http://tempuri.org/ITransferIssueWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/Insert", ReplyAction="http://tempuri.org/ITransferIssueWCF/InsertResponse")]
        string Insert(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/Insert", ReplyAction="http://tempuri.org/ITransferIssueWCF/InsertResponse")]
        System.Threading.Tasks.Task<string> InsertAsync(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/Update", ReplyAction="http://tempuri.org/ITransferIssueWCF/UpdateResponse")]
        string Update(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/Update", ReplyAction="http://tempuri.org/ITransferIssueWCF/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/Post", ReplyAction="http://tempuri.org/ITransferIssueWCF/PostResponse")]
        string Post(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/Post", ReplyAction="http://tempuri.org/ITransferIssueWCF/PostResponse")]
        System.Threading.Tasks.Task<string> PostAsync(string MasterWCF, string DetailsWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/MultiplePost", ReplyAction="http://tempuri.org/ITransferIssueWCF/MultiplePostResponse")]
        string MultiplePost(string Idswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/MultiplePost", ReplyAction="http://tempuri.org/ITransferIssueWCF/MultiplePostResponse")]
        System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/PostTransfer", ReplyAction="http://tempuri.org/ITransferIssueWCF/PostTransferResponse")]
        string PostTransfer(string MasterWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/PostTransfer", ReplyAction="http://tempuri.org/ITransferIssueWCF/PostTransferResponse")]
        System.Threading.Tasks.Task<string> PostTransferAsync(string MasterWCF, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SearchTransferIssue", ReplyAction="http://tempuri.org/ITransferIssueWCF/SearchTransferIssueResponse")]
        string SearchTransferIssue(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SearchTransferIssue", ReplyAction="http://tempuri.org/ITransferIssueWCF/SearchTransferIssueResponse")]
        System.Threading.Tasks.Task<string> SearchTransferIssueAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SearchTransfer", ReplyAction="http://tempuri.org/ITransferIssueWCF/SearchTransferResponse")]
        string SearchTransfer(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SearchTransfer", ReplyAction="http://tempuri.org/ITransferIssueWCF/SearchTransferResponse")]
        System.Threading.Tasks.Task<string> SearchTransferAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SearchTransferDetail", ReplyAction="http://tempuri.org/ITransferIssueWCF/SearchTransferDetailResponse")]
        string SearchTransferDetail(string TransferIssueNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SearchTransferDetail", ReplyAction="http://tempuri.org/ITransferIssueWCF/SearchTransferDetailResponse")]
        System.Threading.Tasks.Task<string> SearchTransferDetailAsync(string TransferIssueNo, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/FormLoad", ReplyAction="http://tempuri.org/ITransferIssueWCF/FormLoadResponse")]
        string FormLoad(string UOMvmwcf, string Productvmwcf, string Name, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/FormLoad", ReplyAction="http://tempuri.org/ITransferIssueWCF/FormLoadResponse")]
        System.Threading.Tasks.Task<string> FormLoadAsync(string UOMvmwcf, string Productvmwcf, string Name, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/GetExcelData", ReplyAction="http://tempuri.org/ITransferIssueWCF/GetExcelDataResponse")]
        string GetExcelData(string invoiceListWCF, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/GetExcelData", ReplyAction="http://tempuri.org/ITransferIssueWCF/GetExcelDataResponse")]
        System.Threading.Tasks.Task<string> GetExcelDataAsync(string invoiceListWCF, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/GetExcelTransferData", ReplyAction="http://tempuri.org/ITransferIssueWCF/GetExcelTransferDataResponse")]
        string GetExcelTransferData(string invoiceListWCF, string transactionType, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/GetExcelTransferData", ReplyAction="http://tempuri.org/ITransferIssueWCF/GetExcelTransferDataResponse")]
        System.Threading.Tasks.Task<string> GetExcelTransferDataAsync(string invoiceListWCF, string transactionType, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/UpdateTransferIssue", ReplyAction="http://tempuri.org/ITransferIssueWCF/UpdateTransferIssueResponse")]
        string UpdateTransferIssue(string invoiceListWCF, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/UpdateTransferIssue", ReplyAction="http://tempuri.org/ITransferIssueWCF/UpdateTransferIssueResponse")]
        System.Threading.Tasks.Task<string> UpdateTransferIssueAsync(string invoiceListWCF, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SelectAllList", ReplyAction="http://tempuri.org/ITransferIssueWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SelectAllList", ReplyAction="http://tempuri.org/ITransferIssueWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SelectAll", ReplyAction="http://tempuri.org/ITransferIssueWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SelectAll", ReplyAction="http://tempuri.org/ITransferIssueWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SelectDetail", ReplyAction="http://tempuri.org/ITransferIssueWCF/SelectDetailResponse")]
        string SelectDetail(string TransferIssueNo, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SelectDetail", ReplyAction="http://tempuri.org/ITransferIssueWCF/SelectDetailResponse")]
        System.Threading.Tasks.Task<string> SelectDetailAsync(string TransferIssueNo, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/ImportData", ReplyAction="http://tempuri.org/ITransferIssueWCF/ImportDataResponse")]
        string ImportData(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, bool integration, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/ImportData", ReplyAction="http://tempuri.org/ITransferIssueWCF/ImportDataResponse")]
        System.Threading.Tasks.Task<string> ImportDataAsync(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, bool integration, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/ImportTransferData", ReplyAction="http://tempuri.org/ITransferIssueWCF/ImportTransferDataResponse")]
        string ImportTransferData(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/ImportTransferData", ReplyAction="http://tempuri.org/ITransferIssueWCF/ImportTransferDataResponse")]
        System.Threading.Tasks.Task<string> ImportTransferDataAsync(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SaveTempTransfer", ReplyAction="http://tempuri.org/ITransferIssueWCF/SaveTempTransferResponse")]
        string SaveTempTransfer(string datawcf, string BranchCode, string transactionType, string CurrentUser, int branchId, bool integration, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/SaveTempTransfer", ReplyAction="http://tempuri.org/ITransferIssueWCF/SaveTempTransferResponse")]
        System.Threading.Tasks.Task<string> SaveTempTransferAsync(string datawcf, string BranchCode, string transactionType, string CurrentUser, int branchId, bool integration, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/TransferMovement", ReplyAction="http://tempuri.org/ITransferIssueWCF/TransferMovementResponse")]
        string TransferMovement(string ItemNo, string FDate, string TDate, int BranchId, bool Summery, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/TransferMovement", ReplyAction="http://tempuri.org/ITransferIssueWCF/TransferMovementResponse")]
        System.Threading.Tasks.Task<string> TransferMovementAsync(string ItemNo, string FDate, string TDate, int BranchId, bool Summery, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/TransferStock", ReplyAction="http://tempuri.org/ITransferIssueWCF/TransferStockResponse")]
        string TransferStock(string ItemNo, string FDate, int BranchId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferIssueWCF/TransferStock", ReplyAction="http://tempuri.org/ITransferIssueWCF/TransferStockResponse")]
        System.Threading.Tasks.Task<string> TransferStockAsync(string ItemNo, string FDate, int BranchId, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransferIssueWCFChannel : VATDesktop.Repo.TransferIssueWCF.ITransferIssueWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferIssueWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.TransferIssueWCF.ITransferIssueWCF>, VATDesktop.Repo.TransferIssueWCF.ITransferIssueWCF {
        
        public TransferIssueWCFClient() {
        }
        
        public TransferIssueWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransferIssueWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferIssueWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferIssueWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string Insert(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.Insert(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> InsertAsync(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.InsertAsync(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public string Update(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.Update(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.UpdateAsync(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public string Post(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.Post(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> PostAsync(string MasterWCF, string DetailsWCF, string connVMWCF) {
            return base.Channel.PostAsync(MasterWCF, DetailsWCF, connVMWCF);
        }
        
        public string MultiplePost(string Idswcf, string connVMWCF) {
            return base.Channel.MultiplePost(Idswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> MultiplePostAsync(string Idswcf, string connVMWCF) {
            return base.Channel.MultiplePostAsync(Idswcf, connVMWCF);
        }
        
        public string PostTransfer(string MasterWCF, string connVMWCF) {
            return base.Channel.PostTransfer(MasterWCF, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> PostTransferAsync(string MasterWCF, string connVMWCF) {
            return base.Channel.PostTransferAsync(MasterWCF, connVMWCF);
        }
        
        public string SearchTransferIssue(string vmwcf, string connVMwcf) {
            return base.Channel.SearchTransferIssue(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchTransferIssueAsync(string vmwcf, string connVMwcf) {
            return base.Channel.SearchTransferIssueAsync(vmwcf, connVMwcf);
        }
        
        public string SearchTransfer(string vmwcf, string connVMwcf) {
            return base.Channel.SearchTransfer(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchTransferAsync(string vmwcf, string connVMwcf) {
            return base.Channel.SearchTransferAsync(vmwcf, connVMwcf);
        }
        
        public string SearchTransferDetail(string TransferIssueNo, string connVMwcf) {
            return base.Channel.SearchTransferDetail(TransferIssueNo, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchTransferDetailAsync(string TransferIssueNo, string connVMwcf) {
            return base.Channel.SearchTransferDetailAsync(TransferIssueNo, connVMwcf);
        }
        
        public string FormLoad(string UOMvmwcf, string Productvmwcf, string Name, string connVMwcf) {
            return base.Channel.FormLoad(UOMvmwcf, Productvmwcf, Name, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> FormLoadAsync(string UOMvmwcf, string Productvmwcf, string Name, string connVMwcf) {
            return base.Channel.FormLoadAsync(UOMvmwcf, Productvmwcf, Name, connVMwcf);
        }
        
        public string GetExcelData(string invoiceListWCF, string connVMwcf) {
            return base.Channel.GetExcelData(invoiceListWCF, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetExcelDataAsync(string invoiceListWCF, string connVMwcf) {
            return base.Channel.GetExcelDataAsync(invoiceListWCF, connVMwcf);
        }
        
        public string GetExcelTransferData(string invoiceListWCF, string transactionType, string connVMwcf) {
            return base.Channel.GetExcelTransferData(invoiceListWCF, transactionType, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> GetExcelTransferDataAsync(string invoiceListWCF, string transactionType, string connVMwcf) {
            return base.Channel.GetExcelTransferDataAsync(invoiceListWCF, transactionType, connVMwcf);
        }
        
        public string UpdateTransferIssue(string invoiceListWCF, string connVMwcf) {
            return base.Channel.UpdateTransferIssue(invoiceListWCF, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTransferIssueAsync(string invoiceListWCF, string connVMwcf) {
            return base.Channel.UpdateTransferIssueAsync(invoiceListWCF, connVMwcf);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public string SelectDetail(string TransferIssueNo, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectDetail(TransferIssueNo, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectDetailAsync(string TransferIssueNo, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectDetailAsync(TransferIssueNo, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string ImportData(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, bool integration, string connVMwcf) {
            return base.Channel.ImportData(dtTrIssueMwcf, dtTrIssueDwcf, branchId, integration, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ImportDataAsync(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, bool integration, string connVMwcf) {
            return base.Channel.ImportDataAsync(dtTrIssueMwcf, dtTrIssueDwcf, branchId, integration, connVMwcf);
        }
        
        public string ImportTransferData(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, string connVMwcf) {
            return base.Channel.ImportTransferData(dtTrIssueMwcf, dtTrIssueDwcf, branchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> ImportTransferDataAsync(string dtTrIssueMwcf, string dtTrIssueDwcf, int branchId, string connVMwcf) {
            return base.Channel.ImportTransferDataAsync(dtTrIssueMwcf, dtTrIssueDwcf, branchId, connVMwcf);
        }
        
        public string SaveTempTransfer(string datawcf, string BranchCode, string transactionType, string CurrentUser, int branchId, bool integration, string connVMwcf) {
            return base.Channel.SaveTempTransfer(datawcf, BranchCode, transactionType, CurrentUser, branchId, integration, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SaveTempTransferAsync(string datawcf, string BranchCode, string transactionType, string CurrentUser, int branchId, bool integration, string connVMwcf) {
            return base.Channel.SaveTempTransferAsync(datawcf, BranchCode, transactionType, CurrentUser, branchId, integration, connVMwcf);
        }
        
        public string TransferMovement(string ItemNo, string FDate, string TDate, int BranchId, bool Summery, string connVMwcf) {
            return base.Channel.TransferMovement(ItemNo, FDate, TDate, BranchId, Summery, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> TransferMovementAsync(string ItemNo, string FDate, string TDate, int BranchId, bool Summery, string connVMwcf) {
            return base.Channel.TransferMovementAsync(ItemNo, FDate, TDate, BranchId, Summery, connVMwcf);
        }
        
        public string TransferStock(string ItemNo, string FDate, int BranchId, string connVMwcf) {
            return base.Channel.TransferStock(ItemNo, FDate, BranchId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> TransferStockAsync(string ItemNo, string FDate, int BranchId, string connVMwcf) {
            return base.Channel.TransferStockAsync(ItemNo, FDate, BranchId, connVMwcf);
        }
    }
}
