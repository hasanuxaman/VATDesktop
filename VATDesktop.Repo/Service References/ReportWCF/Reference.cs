//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.ReportWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReportWCF.IReportWCF")]
    public interface IReportWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockReportRMReport", ReplyAction="http://tempuri.org/IReportWCF/StockReportRMReportResponse")]
        string StockReportRMReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockReportRMReport", ReplyAction="http://tempuri.org/IReportWCF/StockReportRMReportResponse")]
        System.Threading.Tasks.Task<string> StockReportRMReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferToDepotReport", ReplyAction="http://tempuri.org/IReportWCF/TransferToDepotReportResponse")]
        string TransferToDepotReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferToDepotReport", ReplyAction="http://tempuri.org/IReportWCF/TransferToDepotReportResponse")]
        System.Threading.Tasks.Task<string> TransferToDepotReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDSStatementReport", ReplyAction="http://tempuri.org/IReportWCF/VDSStatementReportResponse")]
        string VDSStatementReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDSStatementReport", ReplyAction="http://tempuri.org/IReportWCF/VDSStatementReportResponse")]
        System.Threading.Tasks.Task<string> VDSStatementReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Chak_khaReport", ReplyAction="http://tempuri.org/IReportWCF/Chak_khaReportResponse")]
        string Chak_khaReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Chak_khaReport", ReplyAction="http://tempuri.org/IReportWCF/Chak_khaReportResponse")]
        System.Threading.Tasks.Task<string> Chak_khaReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Chak_kaReport", ReplyAction="http://tempuri.org/IReportWCF/Chak_kaReportResponse")]
        string Chak_kaReport(string StartDate, string EndDate, int BranchId, int TransferTo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Chak_kaReport", ReplyAction="http://tempuri.org/IReportWCF/Chak_kaReportResponse")]
        System.Threading.Tasks.Task<string> Chak_kaReportAsync(string StartDate, string EndDate, int BranchId, int TransferTo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDS_Certificatet", ReplyAction="http://tempuri.org/IReportWCF/TDS_CertificatetResponse")]
        string TDS_Certificatet(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDS_Certificatet", ReplyAction="http://tempuri.org/IReportWCF/TDS_CertificatetResponse")]
        System.Threading.Tasks.Task<string> TDS_CertificatetAsync(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Adjustment", ReplyAction="http://tempuri.org/IReportWCF/AdjustmentResponse")]
        string Adjustment(string HeadId, string AdjType, string StartDate, string EndDate, string Post, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Adjustment", ReplyAction="http://tempuri.org/IReportWCF/AdjustmentResponse")]
        System.Threading.Tasks.Task<string> AdjustmentAsync(string HeadId, string AdjType, string StartDate, string EndDate, string Post, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSAmountReport", ReplyAction="http://tempuri.org/IReportWCF/TDSAmountReportResponse")]
        string TDSAmountReport(string conditionField, string conditionValue, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSAmountReport", ReplyAction="http://tempuri.org/IReportWCF/TDSAmountReportResponse")]
        System.Threading.Tasks.Task<string> TDSAmountReportAsync(string conditionField, string conditionValue, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferIssueOutReport", ReplyAction="http://tempuri.org/IReportWCF/TransferIssueOutReportResponse")]
        string TransferIssueOutReport(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int TransferTo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferIssueOutReport", ReplyAction="http://tempuri.org/IReportWCF/TransferIssueOutReportResponse")]
        System.Threading.Tasks.Task<string> TransferIssueOutReportAsync(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int TransferTo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferReceiveInReport", ReplyAction="http://tempuri.org/IReportWCF/TransferReceiveInReportResponse")]
        string TransferReceiveInReport(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int BranchFromId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferReceiveInReport", ReplyAction="http://tempuri.org/IReportWCF/TransferReceiveInReportResponse")]
        System.Threading.Tasks.Task<string> TransferReceiveInReportAsync(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int BranchFromId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Wastage", ReplyAction="http://tempuri.org/IReportWCF/WastageResponse")]
        string Wastage(string ItemNo, string CategoryID, string StartDate, string EndDate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Wastage", ReplyAction="http://tempuri.org/IReportWCF/WastageResponse")]
        System.Threading.Tasks.Task<string> WastageAsync(string ItemNo, string CategoryID, string StartDate, string EndDate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RptDeliveryReport", ReplyAction="http://tempuri.org/IReportWCF/RptDeliveryReportResponse")]
        string RptDeliveryReport(string challanNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RptDeliveryReport", ReplyAction="http://tempuri.org/IReportWCF/RptDeliveryReportResponse")]
        System.Threading.Tasks.Task<string> RptDeliveryReportAsync(string challanNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DepositNew", ReplyAction="http://tempuri.org/IReportWCF/DepositNewResponse")]
        string DepositNew(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DepositNew", ReplyAction="http://tempuri.org/IReportWCF/DepositNewResponse")]
        System.Threading.Tasks.Task<string> DepositNewAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MISVAT16New", ReplyAction="http://tempuri.org/IReportWCF/MISVAT16NewResponse")]
        string MISVAT16New(string CategoryId, string StartDate, string EndDate, string UserName, string ItemNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MISVAT16New", ReplyAction="http://tempuri.org/IReportWCF/MISVAT16NewResponse")]
        System.Threading.Tasks.Task<string> MISVAT16NewAsync(string CategoryId, string StartDate, string EndDate, string UserName, string ItemNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MISVAT17New", ReplyAction="http://tempuri.org/IReportWCF/MISVAT17NewResponse")]
        string MISVAT17New(string CategoryId, string UserName, string StartDate, string EndDate, string ItemNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MISVAT17New", ReplyAction="http://tempuri.org/IReportWCF/MISVAT17NewResponse")]
        System.Threading.Tasks.Task<string> MISVAT17NewAsync(string CategoryId, string UserName, string StartDate, string EndDate, string ItemNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MISVAT18New", ReplyAction="http://tempuri.org/IReportWCF/MISVAT18NewResponse")]
        string MISVAT18New(string UserName, string StartDate, string EndDate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MISVAT18New", ReplyAction="http://tempuri.org/IReportWCF/MISVAT18NewResponse")]
        System.Threading.Tasks.Task<string> MISVAT18NewAsync(string UserName, string StartDate, string EndDate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ProductCategoryNew", ReplyAction="http://tempuri.org/IReportWCF/ProductCategoryNewResponse")]
        string ProductCategoryNew(string cgID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ProductCategoryNew", ReplyAction="http://tempuri.org/IReportWCF/ProductCategoryNewResponse")]
        System.Threading.Tasks.Task<string> ProductCategoryNewAsync(string cgID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ProductNew", ReplyAction="http://tempuri.org/IReportWCF/ProductNewResponse")]
        string ProductNew(string ItemNo, string CategoryID, string IsRaw, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ProductNew", ReplyAction="http://tempuri.org/IReportWCF/ProductNewResponse")]
        System.Threading.Tasks.Task<string> ProductNewAsync(string ItemNo, string CategoryID, string IsRaw, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseNew", ReplyAction="http://tempuri.org/IReportWCF/PurchaseNewResponse")]
        string PurchaseNew(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    bool pCategoryLike, 
                    string PGroup, 
                    int BranchId, 
                    string VatType, 
                    string IsRebate,
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseNew", ReplyAction="http://tempuri.org/IReportWCF/PurchaseNewResponse")]
        System.Threading.Tasks.Task<string> PurchaseNewAsync(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    bool pCategoryLike, 
                    string PGroup, 
                    int BranchId, 
                    string VatType, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/IssueNew", ReplyAction="http://tempuri.org/IReportWCF/IssueNewResponse")]
        string IssueNew(string IssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string waste, bool pCategoryLike, string PGroup, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/IssueNew", ReplyAction="http://tempuri.org/IReportWCF/IssueNewResponse")]
        System.Threading.Tasks.Task<string> IssueNewAsync(string IssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string waste, bool pCategoryLike, string PGroup, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ReceiveNew", ReplyAction="http://tempuri.org/IReportWCF/ReceiveNewResponse")]
        string ReceiveNew(string ReceiveNo, string ReceiveDateFrom, string ReceiveDateTo, string itemNo, string categoryID, string productType, string transactionType, string post, string ShiftId, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ReceiveNew", ReplyAction="http://tempuri.org/IReportWCF/ReceiveNewResponse")]
        System.Threading.Tasks.Task<string> ReceiveNewAsync(string ReceiveNo, string ReceiveDateFrom, string ReceiveDateTo, string itemNo, string categoryID, string productType, string transactionType, string post, string ShiftId, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleNew", ReplyAction="http://tempuri.org/IReportWCF/SaleNewResponse")]
        string SaleNew(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    bool pCategoryLike, 
                    string PGroup, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleNew", ReplyAction="http://tempuri.org/IReportWCF/SaleNewResponse")]
        System.Threading.Tasks.Task<string> SaleNewAsync(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    bool pCategoryLike, 
                    string PGroup, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleNewWithChassisEngine", ReplyAction="http://tempuri.org/IReportWCF/SaleNewWithChassisEngineResponse")]
        string SaleNewWithChassisEngine(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string chassis, 
                    string engine, 
                    string ShiftId, 
                    int branchId, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleNewWithChassisEngine", ReplyAction="http://tempuri.org/IReportWCF/SaleNewWithChassisEngineResponse")]
        System.Threading.Tasks.Task<string> SaleNewWithChassisEngineAsync(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string chassis, 
                    string engine, 
                    string ShiftId, 
                    int branchId, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockNew", ReplyAction="http://tempuri.org/IReportWCF/StockNewResponse")]
        string StockNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, bool pCategoryLike, string PGroup, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockNew", ReplyAction="http://tempuri.org/IReportWCF/StockNewResponse")]
        System.Threading.Tasks.Task<string> StockNewAsync(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, bool pCategoryLike, string PGroup, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockWithAdjNew", ReplyAction="http://tempuri.org/IReportWCF/StockWithAdjNewResponse")]
        string StockWithAdjNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockWithAdjNew", ReplyAction="http://tempuri.org/IReportWCF/StockWithAdjNewResponse")]
        System.Threading.Tasks.Task<string> StockWithAdjNewAsync(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockWastage", ReplyAction="http://tempuri.org/IReportWCF/StockWastageResponse")]
        string StockWastage(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockWastage", ReplyAction="http://tempuri.org/IReportWCF/StockWastageResponse")]
        System.Threading.Tasks.Task<string> StockWastageAsync(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VehicleNew", ReplyAction="http://tempuri.org/IReportWCF/VehicleNewResponse")]
        string VehicleNew(string VehicleNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VehicleNew", ReplyAction="http://tempuri.org/IReportWCF/VehicleNewResponse")]
        System.Threading.Tasks.Task<string> VehicleNewAsync(string VehicleNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VendorGroupNew", ReplyAction="http://tempuri.org/IReportWCF/VendorGroupNewResponse")]
        string VendorGroupNew(string VendorGroupID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VendorGroupNew", ReplyAction="http://tempuri.org/IReportWCF/VendorGroupNewResponse")]
        System.Threading.Tasks.Task<string> VendorGroupNewAsync(string VendorGroupID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/InputOutputCoEfficient", ReplyAction="http://tempuri.org/IReportWCF/InputOutputCoEfficientResponse")]
        string InputOutputCoEfficient(string RawItemNo, string StartDate, string EndDate, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/InputOutputCoEfficient", ReplyAction="http://tempuri.org/IReportWCF/InputOutputCoEfficientResponse")]
        System.Threading.Tasks.Task<string> InputOutputCoEfficientAsync(string RawItemNo, string StartDate, string EndDate, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VendorReportNew", ReplyAction="http://tempuri.org/IReportWCF/VendorReportNewResponse")]
        string VendorReportNew(string VendorID, string VendorGroupID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VendorReportNew", ReplyAction="http://tempuri.org/IReportWCF/VendorReportNewResponse")]
        System.Threading.Tasks.Task<string> VendorReportNewAsync(string VendorID, string VendorGroupID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TrasurryDepositeNew", ReplyAction="http://tempuri.org/IReportWCF/TrasurryDepositeNewResponse")]
        string TrasurryDepositeNew(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TrasurryDepositeNew", ReplyAction="http://tempuri.org/IReportWCF/TrasurryDepositeNewResponse")]
        System.Threading.Tasks.Task<string> TrasurryDepositeNewAsync(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDeposit", ReplyAction="http://tempuri.org/IReportWCF/TDSDepositResponse")]
        string TDSDeposit(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDeposit", ReplyAction="http://tempuri.org/IReportWCF/TDSDepositResponse")]
        System.Threading.Tasks.Task<string> TDSDepositAsync(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDepositDetail", ReplyAction="http://tempuri.org/IReportWCF/TDSDepositDetailResponse")]
        string TDSDepositDetail(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDepositDetail", ReplyAction="http://tempuri.org/IReportWCF/TDSDepositDetailResponse")]
        System.Threading.Tasks.Task<string> TDSDepositDetailAsync(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDepositDetail_MISReport", ReplyAction="http://tempuri.org/IReportWCF/TDSDepositDetail_MISReportResponse")]
        string TDSDepositDetail_MISReport(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDepositDetail_MISReport", ReplyAction="http://tempuri.org/IReportWCF/TDSDepositDetail_MISReportResponse")]
        System.Threading.Tasks.Task<string> TDSDepositDetail_MISReportAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDeposit_MISReport", ReplyAction="http://tempuri.org/IReportWCF/TDSDeposit_MISReportResponse")]
        string TDSDeposit_MISReport(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSDeposit_MISReport", ReplyAction="http://tempuri.org/IReportWCF/TDSDeposit_MISReportResponse")]
        System.Threading.Tasks.Task<string> TDSDeposit_MISReportAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDSDepositNew", ReplyAction="http://tempuri.org/IReportWCF/VDSDepositNewResponse")]
        string VDSDepositNew(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDSDepositNew", ReplyAction="http://tempuri.org/IReportWCF/VDSDepositNewResponse")]
        System.Threading.Tasks.Task<string> VDSDepositNewAsync(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SDTrasurryDepositeNew", ReplyAction="http://tempuri.org/IReportWCF/SDTrasurryDepositeNewResponse")]
        string SDTrasurryDepositeNew(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SDTrasurryDepositeNew", ReplyAction="http://tempuri.org/IReportWCF/SDTrasurryDepositeNewResponse")]
        System.Threading.Tasks.Task<string> SDTrasurryDepositeNewAsync(string DepositId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ComapnyProfileString", ReplyAction="http://tempuri.org/IReportWCF/ComapnyProfileStringResponse")]
        string ComapnyProfileString(string CompanyID, string UserId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ComapnyProfileString", ReplyAction="http://tempuri.org/IReportWCF/ComapnyProfileStringResponse")]
        System.Threading.Tasks.Task<string> ComapnyProfileStringAsync(string CompanyID, string UserId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ComapnyProfile", ReplyAction="http://tempuri.org/IReportWCF/ComapnyProfileResponse")]
        string ComapnyProfile(string CompanyID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ComapnyProfile", ReplyAction="http://tempuri.org/IReportWCF/ComapnyProfileResponse")]
        System.Threading.Tasks.Task<string> ComapnyProfileAsync(string CompanyID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CurrencyReportNew", ReplyAction="http://tempuri.org/IReportWCF/CurrencyReportNewResponse")]
        string CurrencyReportNew(string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CurrencyReportNew", ReplyAction="http://tempuri.org/IReportWCF/CurrencyReportNewResponse")]
        System.Threading.Tasks.Task<string> CurrencyReportNewAsync(string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CostingNew", ReplyAction="http://tempuri.org/IReportWCF/CostingNewResponse")]
        string CostingNew(string ID, string ItemNo, string UOM, string UOMn, decimal UOMc, decimal totalQty, decimal rCostPrice, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CostingNew", ReplyAction="http://tempuri.org/IReportWCF/CostingNewResponse")]
        System.Threading.Tasks.Task<string> CostingNewAsync(string ID, string ItemNo, string UOM, string UOMn, decimal UOMc, decimal totalQty, decimal rCostPrice, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ComapnyProfileSecurity", ReplyAction="http://tempuri.org/IReportWCF/ComapnyProfileSecurityResponse")]
        string ComapnyProfileSecurity(string CompanyID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ComapnyProfileSecurity", ReplyAction="http://tempuri.org/IReportWCF/ComapnyProfileSecurityResponse")]
        System.Threading.Tasks.Task<string> ComapnyProfileSecurityAsync(string CompanyID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MonthlySales", ReplyAction="http://tempuri.org/IReportWCF/MonthlySalesResponse")]
        string MonthlySales(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MonthlySales", ReplyAction="http://tempuri.org/IReportWCF/MonthlySalesResponse")]
        System.Threading.Tasks.Task<string> MonthlySalesAsync(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MonthlyPurchases", ReplyAction="http://tempuri.org/IReportWCF/MonthlyPurchasesResponse")]
        string MonthlyPurchases(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    int BranchId, 
                    string VatType, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MonthlyPurchases", ReplyAction="http://tempuri.org/IReportWCF/MonthlyPurchasesResponse")]
        System.Threading.Tasks.Task<string> MonthlyPurchasesAsync(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    int BranchId, 
                    string VatType, 
                    string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDSReport", ReplyAction="http://tempuri.org/IReportWCF/VDSReportResponse")]
        string VDSReport(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string VendorId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDSReport", ReplyAction="http://tempuri.org/IReportWCF/VDSReportResponse")]
        System.Threading.Tasks.Task<string> VDSReportAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string VendorId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DemandReport", ReplyAction="http://tempuri.org/IReportWCF/DemandReportResponse")]
        string DemandReport(string DemandNo, string DemandDateFrom, string DemandDateTo, string TransactionType, string Post, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DemandReport", ReplyAction="http://tempuri.org/IReportWCF/DemandReportResponse")]
        System.Threading.Tasks.Task<string> DemandReportAsync(string DemandNo, string DemandDateFrom, string DemandDateTo, string TransactionType, string Post, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BanderolForm_4", ReplyAction="http://tempuri.org/IReportWCF/BanderolForm_4Response")]
        string BanderolForm_4(string BanderolID, string post1, string StartDate, string EndDate, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BanderolForm_4", ReplyAction="http://tempuri.org/IReportWCF/BanderolForm_4Response")]
        System.Threading.Tasks.Task<string> BanderolForm_4Async(string BanderolID, string post1, string StartDate, string EndDate, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BanderolForm_5", ReplyAction="http://tempuri.org/IReportWCF/BanderolForm_5Response")]
        string BanderolForm_5(string PeriodName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BanderolForm_5", ReplyAction="http://tempuri.org/IReportWCF/BanderolForm_5Response")]
        System.Threading.Tasks.Task<string> BanderolForm_5Async(string PeriodName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/GetReturnType", ReplyAction="http://tempuri.org/IReportWCF/GetReturnTypeResponse")]
        string GetReturnType(string itemNo, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/GetReturnType", ReplyAction="http://tempuri.org/IReportWCF/GetReturnTypeResponse")]
        System.Threading.Tasks.Task<string> GetReturnTypeAsync(string itemNo, string transactionType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SelectMultipleInvoices", ReplyAction="http://tempuri.org/IReportWCF/SelectMultipleInvoicesResponse")]
        string SelectMultipleInvoices(int noOfChallan, string transactionType, string challanDateFrom, string challanDateTo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SelectMultipleInvoices", ReplyAction="http://tempuri.org/IReportWCF/SelectMultipleInvoicesResponse")]
        System.Threading.Tasks.Task<string> SelectMultipleInvoicesAsync(int noOfChallan, string transactionType, string challanDateFrom, string challanDateTo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RptBanderolProduct", ReplyAction="http://tempuri.org/IReportWCF/RptBanderolProductResponse")]
        string RptBanderolProduct(string ProductCode, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RptBanderolProduct", ReplyAction="http://tempuri.org/IReportWCF/RptBanderolProductResponse")]
        System.Threading.Tasks.Task<string> RptBanderolProductAsync(string ProductCode, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT11Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT11ReportResponse")]
        string BureauVAT11Report(string SalesInvoiceNo, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT11Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT11ReportResponse")]
        System.Threading.Tasks.Task<string> BureauVAT11ReportAsync(string SalesInvoiceNo, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT6_1Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT6_1ReportResponse")]
        string BureauVAT6_1Report(string ItemNo, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT6_1Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT6_1ReportResponse")]
        System.Threading.Tasks.Task<string> BureauVAT6_1ReportAsync(string ItemNo, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT18Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT18ReportResponse")]
        string BureauVAT18Report(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT18Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT18ReportResponse")]
        System.Threading.Tasks.Task<string> BureauVAT18ReportAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT18_OldFormat", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT18_OldFormatResponse")]
        string BureauVAT18_OldFormat(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT18_OldFormat", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT18_OldFormatResponse")]
        System.Threading.Tasks.Task<string> BureauVAT18_OldFormatAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauMonthlySales", ReplyAction="http://tempuri.org/IReportWCF/BureauMonthlySalesResponse")]
        string BureauMonthlySales(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauMonthlySales", ReplyAction="http://tempuri.org/IReportWCF/BureauMonthlySalesResponse")]
        System.Threading.Tasks.Task<string> BureauMonthlySalesAsync(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauSaleMis", ReplyAction="http://tempuri.org/IReportWCF/BureauSaleMisResponse")]
        string BureauSaleMis(string SaleId, string ShiftId, int branchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauSaleMis", ReplyAction="http://tempuri.org/IReportWCF/BureauSaleMisResponse")]
        System.Threading.Tasks.Task<string> BureauSaleMisAsync(string SaleId, string ShiftId, int branchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauSaleNew", ReplyAction="http://tempuri.org/IReportWCF/BureauSaleNewResponse")]
        string BureauSaleNew(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauSaleNew", ReplyAction="http://tempuri.org/IReportWCF/BureauSaleNewResponse")]
        System.Threading.Tasks.Task<string> BureauSaleNewAsync(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauCreditNote", ReplyAction="http://tempuri.org/IReportWCF/BureauCreditNoteResponse")]
        string BureauCreditNote(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauCreditNote", ReplyAction="http://tempuri.org/IReportWCF/BureauCreditNoteResponse")]
        System.Threading.Tasks.Task<string> BureauCreditNoteAsync(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT19Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT19ReportResponse")]
        string BureauVAT19Report(string PeriodName, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BureauVAT19Report", ReplyAction="http://tempuri.org/IReportWCF/BureauVAT19ReportResponse")]
        System.Threading.Tasks.Task<string> BureauVAT19ReportAsync(string PeriodName, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RptVAT7Report", ReplyAction="http://tempuri.org/IReportWCF/RptVAT7ReportResponse")]
        string RptVAT7Report(string vat7No, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RptVAT7Report", ReplyAction="http://tempuri.org/IReportWCF/RptVAT7ReportResponse")]
        System.Threading.Tasks.Task<string> RptVAT7ReportAsync(string vat7No, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TollRegister", ReplyAction="http://tempuri.org/IReportWCF/TollRegisterResponse")]
        string TollRegister(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TollRegister", ReplyAction="http://tempuri.org/IReportWCF/TollRegisterResponse")]
        System.Threading.Tasks.Task<string> TollRegisterAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TollRegisterRaw", ReplyAction="http://tempuri.org/IReportWCF/TollRegisterRawResponse")]
        string TollRegisterRaw(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TollRegisterRaw", ReplyAction="http://tempuri.org/IReportWCF/TollRegisterRawResponse")]
        System.Threading.Tasks.Task<string> TollRegisterRawAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT16AttachToll", ReplyAction="http://tempuri.org/IReportWCF/VAT16AttachTollResponse")]
        string VAT16AttachToll(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT16AttachToll", ReplyAction="http://tempuri.org/IReportWCF/VAT16AttachTollResponse")]
        System.Threading.Tasks.Task<string> VAT16AttachTollAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseReturnNew", ReplyAction="http://tempuri.org/IReportWCF/PurchaseReturnNewResponse")]
        string PurchaseReturnNew(string PurchaseInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseReturnNew", ReplyAction="http://tempuri.org/IReportWCF/PurchaseReturnNewResponse")]
        System.Threading.Tasks.Task<string> PurchaseReturnNewAsync(string PurchaseInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Current_AC_VAT18", ReplyAction="http://tempuri.org/IReportWCF/Current_AC_VAT18Response")]
        string Current_AC_VAT18(string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/Current_AC_VAT18", ReplyAction="http://tempuri.org/IReportWCF/Current_AC_VAT18Response")]
        System.Threading.Tasks.Task<string> Current_AC_VAT18Async(string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SerialStockStatus", ReplyAction="http://tempuri.org/IReportWCF/SerialStockStatusResponse")]
        string SerialStockStatus(string ItemNo, string CategoryID, string ProductType, string StartDate, string ToDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SerialStockStatus", ReplyAction="http://tempuri.org/IReportWCF/SerialStockStatusResponse")]
        System.Threading.Tasks.Task<string> SerialStockStatusAsync(string ItemNo, string CategoryID, string ProductType, string StartDate, string ToDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseWithLCInfo", ReplyAction="http://tempuri.org/IReportWCF/PurchaseWithLCInfoResponse")]
        string PurchaseWithLCInfo(string PurchaseInvoiceNo, string LCDateFrom, string LCDateTo, string VendorId, string ItemNo, string VendorGroupId, string LCNo, string Post, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseWithLCInfo", ReplyAction="http://tempuri.org/IReportWCF/PurchaseWithLCInfoResponse")]
        System.Threading.Tasks.Task<string> PurchaseWithLCInfoAsync(string PurchaseInvoiceNo, string LCDateFrom, string LCDateTo, string VendorId, string ItemNo, string VendorGroupId, string LCNo, string Post, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT18_Sanofi", ReplyAction="http://tempuri.org/IReportWCF/VAT18_SanofiResponse")]
        string VAT18_Sanofi(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT18_Sanofi", ReplyAction="http://tempuri.org/IReportWCF/VAT18_SanofiResponse")]
        System.Threading.Tasks.Task<string> VAT18_SanofiAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSReport", ReplyAction="http://tempuri.org/IReportWCF/TDSReportResponse")]
        string TDSReport(string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TDSReport", ReplyAction="http://tempuri.org/IReportWCF/TDSReportResponse")]
        System.Threading.Tasks.Task<string> TDSReportAsync(string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/LocalPurchaseReport", ReplyAction="http://tempuri.org/IReportWCF/LocalPurchaseReportResponse")]
        string LocalPurchaseReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/LocalPurchaseReport", ReplyAction="http://tempuri.org/IReportWCF/LocalPurchaseReportResponse")]
        System.Threading.Tasks.Task<string> LocalPurchaseReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ImportDataReport", ReplyAction="http://tempuri.org/IReportWCF/ImportDataReportResponse")]
        string ImportDataReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ImportDataReport", ReplyAction="http://tempuri.org/IReportWCF/ImportDataReportResponse")]
        System.Threading.Tasks.Task<string> ImportDataReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ReceiedVsSaleReport", ReplyAction="http://tempuri.org/IReportWCF/ReceiedVsSaleReportResponse")]
        string ReceiedVsSaleReport(string StartDate, string EndDate, int BranchId, string connVM);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ReceiedVsSaleReport", ReplyAction="http://tempuri.org/IReportWCF/ReceiedVsSaleReportResponse")]
        System.Threading.Tasks.Task<string> ReceiedVsSaleReportAsync(string StartDate, string EndDate, int BranchId, string connVM);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SalesStatementForServiceReport", ReplyAction="http://tempuri.org/IReportWCF/SalesStatementForServiceReportResponse")]
        string SalesStatementForServiceReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SalesStatementForServiceReport", ReplyAction="http://tempuri.org/IReportWCF/SalesStatementForServiceReportResponse")]
        System.Threading.Tasks.Task<string> SalesStatementForServiceReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SalesStatementDeliveryReport", ReplyAction="http://tempuri.org/IReportWCF/SalesStatementDeliveryReportResponse")]
        string SalesStatementDeliveryReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SalesStatementDeliveryReport", ReplyAction="http://tempuri.org/IReportWCF/SalesStatementDeliveryReportResponse")]
        System.Threading.Tasks.Task<string> SalesStatementDeliveryReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockReportFGReport", ReplyAction="http://tempuri.org/IReportWCF/StockReportFGReportResponse")]
        string StockReportFGReport(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/StockReportFGReport", ReplyAction="http://tempuri.org/IReportWCF/StockReportFGReportResponse")]
        System.Threading.Tasks.Task<string> StockReportFGReportAsync(string StartDate, string EndDate, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DoWork", ReplyAction="http://tempuri.org/IReportWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DoWork", ReplyAction="http://tempuri.org/IReportWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferIssueNew", ReplyAction="http://tempuri.org/IReportWCF/TransferIssueNewResponse")]
        string TransferIssueNew(string TransferIssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string DBName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/TransferIssueNew", ReplyAction="http://tempuri.org/IReportWCF/TransferIssueNewResponse")]
        System.Threading.Tasks.Task<string> TransferIssueNewAsync(string TransferIssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string DBName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT18New", ReplyAction="http://tempuri.org/IReportWCF/VAT18NewResponse")]
        string VAT18New(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT18New", ReplyAction="http://tempuri.org/IReportWCF/VAT18NewResponse")]
        System.Threading.Tasks.Task<string> VAT18NewAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_10Report", ReplyAction="http://tempuri.org/IReportWCF/VAT6_10ReportResponse")]
        string VAT6_10Report(string TotalAmount, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_10Report", ReplyAction="http://tempuri.org/IReportWCF/VAT6_10ReportResponse")]
        System.Threading.Tasks.Task<string> VAT6_10ReportAsync(string TotalAmount, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDS12KhaNew", ReplyAction="http://tempuri.org/IReportWCF/VDS12KhaNewResponse")]
        string VDS12KhaNew(string VendorId, string DepositNumber, string DepositDateFrom, string DepositDateTo, string IssueDateFrom, string IssueDateTo, string BillDateFrom, string BillDateTo, string PurchaseNumber, bool chkPurchaseVDS, bool chkAll, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VDS12KhaNew", ReplyAction="http://tempuri.org/IReportWCF/VDS12KhaNewResponse")]
        System.Threading.Tasks.Task<string> VDS12KhaNewAsync(string VendorId, string DepositNumber, string DepositDateFrom, string DepositDateTo, string IssueDateFrom, string IssueDateTo, string BillDateFrom, string BillDateTo, string PurchaseNumber, bool chkPurchaseVDS, bool chkAll, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MIS19", ReplyAction="http://tempuri.org/IReportWCF/MIS19Response")]
        string MIS19(string StartDate, string EndDate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/MIS19", ReplyAction="http://tempuri.org/IReportWCF/MIS19Response")]
        System.Threading.Tasks.Task<string> MIS19Async(string StartDate, string EndDate, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT11ReportCommercialImporterNew", ReplyAction="http://tempuri.org/IReportWCF/VAT11ReportCommercialImporterNewResponse")]
        string VAT11ReportCommercialImporterNew(string SalesInvoiceNo, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT11ReportCommercialImporterNew", ReplyAction="http://tempuri.org/IReportWCF/VAT11ReportCommercialImporterNewResponse")]
        System.Threading.Tasks.Task<string> VAT11ReportCommercialImporterNewAsync(string SalesInvoiceNo, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_7", ReplyAction="http://tempuri.org/IReportWCF/VAT6_7Response")]
        string VAT6_7(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_7", ReplyAction="http://tempuri.org/IReportWCF/VAT6_7Response")]
        System.Threading.Tasks.Task<string> VAT6_7Async(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_8", ReplyAction="http://tempuri.org/IReportWCF/VAT6_8Response")]
        string VAT6_8(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_8", ReplyAction="http://tempuri.org/IReportWCF/VAT6_8Response")]
        System.Threading.Tasks.Task<string> VAT6_8Async(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT11ReportNew", ReplyAction="http://tempuri.org/IReportWCF/VAT11ReportNewResponse")]
        string VAT11ReportNew(string SalesInvoiceNo, string Post1, string Post2, string ddmmyy, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT11ReportNew", ReplyAction="http://tempuri.org/IReportWCF/VAT11ReportNewResponse")]
        System.Threading.Tasks.Task<string> VAT11ReportNewAsync(string SalesInvoiceNo, string Post1, string Post2, string ddmmyy, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1KhaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1KhaNewResponse")]
        string VAT1KhaNew(string FinishItemNo, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1KhaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1KhaNewResponse")]
        System.Threading.Tasks.Task<string> VAT1KhaNewAsync(string FinishItemNo, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleTrackingReport", ReplyAction="http://tempuri.org/IReportWCF/SaleTrackingReportResponse")]
        string SaleTrackingReport(string SalesInvoiceNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleTrackingReport", ReplyAction="http://tempuri.org/IReportWCF/SaleTrackingReportResponse")]
        System.Threading.Tasks.Task<string> SaleTrackingReportAsync(string SalesInvoiceNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_3Toll", ReplyAction="http://tempuri.org/IReportWCF/VAT6_3TollResponse")]
        string VAT6_3Toll(string TollNo, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_3Toll", ReplyAction="http://tempuri.org/IReportWCF/VAT6_3TollResponse")]
        System.Threading.Tasks.Task<string> VAT6_3TollAsync(string TollNo, string Post1, string Post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT20ReportNew", ReplyAction="http://tempuri.org/IReportWCF/VAT20ReportNewResponse")]
        string VAT20ReportNew(string SalesInvoiceNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT20ReportNew", ReplyAction="http://tempuri.org/IReportWCF/VAT20ReportNewResponse")]
        System.Threading.Tasks.Task<string> VAT20ReportNewAsync(string SalesInvoiceNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CreditNoteNew", ReplyAction="http://tempuri.org/IReportWCF/CreditNoteNewResponse")]
        string CreditNoteNew(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CreditNoteNew", ReplyAction="http://tempuri.org/IReportWCF/CreditNoteNewResponse")]
        System.Threading.Tasks.Task<string> CreditNoteNewAsync(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CreditNoteAmountNew", ReplyAction="http://tempuri.org/IReportWCF/CreditNoteAmountNewResponse")]
        string CreditNoteAmountNew(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CreditNoteAmountNew", ReplyAction="http://tempuri.org/IReportWCF/CreditNoteAmountNewResponse")]
        System.Threading.Tasks.Task<string> CreditNoteAmountNewAsync(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DebitNoteNew", ReplyAction="http://tempuri.org/IReportWCF/DebitNoteNewResponse")]
        string DebitNoteNew(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/DebitNoteNew", ReplyAction="http://tempuri.org/IReportWCF/DebitNoteNewResponse")]
        System.Threading.Tasks.Task<string> DebitNoteNewAsync(string SalesInvoiceNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BatchTracking", ReplyAction="http://tempuri.org/IReportWCF/BatchTrackingResponse")]
        string BatchTracking(string BatchNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BatchTracking", ReplyAction="http://tempuri.org/IReportWCF/BatchTrackingResponse")]
        System.Threading.Tasks.Task<string> BatchTrackingAsync(string BatchNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BatchTracking1", ReplyAction="http://tempuri.org/IReportWCF/BatchTracking1Response")]
        string BatchTracking1(string BatchNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BatchTracking1", ReplyAction="http://tempuri.org/IReportWCF/BatchTracking1Response")]
        System.Threading.Tasks.Task<string> BatchTracking1Async(string BatchNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BatchTracking2", ReplyAction="http://tempuri.org/IReportWCF/BatchTracking2Response")]
        string BatchTracking2(string BatchNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BatchTracking2", ReplyAction="http://tempuri.org/IReportWCF/BatchTracking2Response")]
        System.Threading.Tasks.Task<string> BatchTracking2Async(string BatchNo, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT16NewforTollRegister", ReplyAction="http://tempuri.org/IReportWCF/VAT16NewforTollRegisterResponse")]
        string VAT16NewforTollRegister(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT16NewforTollRegister", ReplyAction="http://tempuri.org/IReportWCF/VAT16NewforTollRegisterResponse")]
        System.Threading.Tasks.Task<string> VAT16NewforTollRegisterAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1_WithConn", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1_WithConnResponse")]
        string VAT6_1_WithConn(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, bool Opening, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1_WithConn", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1_WithConnResponse")]
        System.Threading.Tasks.Task<string> VAT6_1_WithConnAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, bool Opening, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1Toll", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1TollResponse")]
        string VAT6_1Toll(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1Toll", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1TollResponse")]
        System.Threading.Tasks.Task<string> VAT6_1TollAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1_Branching", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1_BranchingResponse")]
        string VAT6_1_Branching(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1_Branching", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1_BranchingResponse")]
        System.Threading.Tasks.Task<string> VAT6_1_BranchingAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1Response")]
        string VAT6_1(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_1", ReplyAction="http://tempuri.org/IReportWCF/VAT6_1Response")]
        System.Threading.Tasks.Task<string> VAT6_1Async(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_2_1", ReplyAction="http://tempuri.org/IReportWCF/VAT6_2_1Response")]
        string VAT6_2_1(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_2_1", ReplyAction="http://tempuri.org/IReportWCF/VAT6_2_1Response")]
        System.Threading.Tasks.Task<string> VAT6_2_1Async(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_2", ReplyAction="http://tempuri.org/IReportWCF/VAT6_2Response")]
        string VAT6_2(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, bool Opening, bool Opening6_2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_2", ReplyAction="http://tempuri.org/IReportWCF/VAT6_2Response")]
        System.Threading.Tasks.Task<string> VAT6_2Async(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, bool Opening, bool Opening6_2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_2Toll", ReplyAction="http://tempuri.org/IReportWCF/VAT6_2TollResponse")]
        string VAT6_2Toll(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT6_2Toll", ReplyAction="http://tempuri.org/IReportWCF/VAT6_2TollResponse")]
        System.Threading.Tasks.Task<string> VAT6_2TollAsync(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1Response")]
        string VAT9_1(string PeriodName, int BranchId, string Date, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1Response")]
        System.Threading.Tasks.Task<string> VAT9_1Async(string PeriodName, int BranchId, string Date, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart3", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart3Response")]
        string VAT9_1_SubFormAPart3(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart3", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart3Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormAPart3Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart4", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart4Response")]
        string VAT9_1_SubFormAPart4(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart4", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormAPart4Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormAPart4Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormBPart3", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormBPart3Response")]
        string VAT9_1_SubFormBPart3(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormBPart3", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormBPart3Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormBPart3Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart3", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart3Response")]
        string VAT9_1_SubFormCPart3(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart3", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart3Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormCPart3Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart4", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart4Response")]
        string VAT9_1_SubFormCPart4(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart4", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormCPart4Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormCPart4Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormGPart8", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormGPart8Response")]
        string VAT9_1_SubFormGPart8(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormGPart8", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormGPart8Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormGPart8Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormDPart5", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormDPart5Response")]
        string VAT9_1_SubFormDPart5(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormDPart5", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormDPart5Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormDPart5Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormEPart6", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormEPart6Response")]
        string VAT9_1_SubFormEPart6(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormEPart6", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormEPart6Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormEPart6Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormFPart6", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormFPart6Response")]
        string VAT9_1_SubFormFPart6(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_SubFormFPart6", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_SubFormFPart6Response")]
        System.Threading.Tasks.Task<string> VAT9_1_SubFormFPart6Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_Process", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_ProcessResponse")]
        string VAT9_1_Process(string PeriodName, int BranchId, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_Process", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_ProcessResponse")]
        System.Threading.Tasks.Task<string> VAT9_1_ProcessAsync(string PeriodName, int BranchId, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_Report", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_ReportResponse")]
        string VAT9_1_Report(string PeriodName, int BranchId, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_Report", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_ReportResponse")]
        System.Threading.Tasks.Task<string> VAT9_1_ReportAsync(string PeriodName, int BranchId, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_V2", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_V2Response")]
        string VAT9_1_V2(string PeriodName, int BranchId, string Date, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT9_1_V2", ReplyAction="http://tempuri.org/IReportWCF/VAT9_1_V2Response")]
        System.Threading.Tasks.Task<string> VAT9_1_V2Async(string PeriodName, int BranchId, string Date, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SD_Data", ReplyAction="http://tempuri.org/IReportWCF/SD_DataResponse")]
        string SD_Data(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SD_Data", ReplyAction="http://tempuri.org/IReportWCF/SD_DataResponse")]
        System.Threading.Tasks.Task<string> SD_DataAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT19NewNewformat", ReplyAction="http://tempuri.org/IReportWCF/VAT19NewNewformatResponse")]
        string VAT19NewNewformat(string PeriodName, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT19NewNewformat", ReplyAction="http://tempuri.org/IReportWCF/VAT19NewNewformatResponse")]
        System.Threading.Tasks.Task<string> VAT19NewNewformatAsync(string PeriodName, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT18Breakdown", ReplyAction="http://tempuri.org/IReportWCF/VAT18BreakdownResponse")]
        string VAT18Breakdown(string PeriodName, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT18Breakdown", ReplyAction="http://tempuri.org/IReportWCF/VAT18BreakdownResponse")]
        System.Threading.Tasks.Task<string> VAT18BreakdownAsync(string PeriodName, string ExportInBDT, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RepFormKaTradingNew", ReplyAction="http://tempuri.org/IReportWCF/RepFormKaTradingNewResponse")]
        string RepFormKaTradingNew(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/RepFormKaTradingNew", ReplyAction="http://tempuri.org/IReportWCF/RepFormKaTradingNewResponse")]
        System.Threading.Tasks.Task<string> RepFormKaTradingNewAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT24", ReplyAction="http://tempuri.org/IReportWCF/VAT24Response")]
        string VAT24(string ddbackno, string ddbFinishItemNo, string SalesInvoiceNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT24", ReplyAction="http://tempuri.org/IReportWCF/VAT24Response")]
        System.Threading.Tasks.Task<string> VAT24Async(string ddbackno, string ddbFinishItemNo, string SalesInvoiceNo, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT22", ReplyAction="http://tempuri.org/IReportWCF/VAT22Response")]
        string VAT22(string ddbackno, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT22", ReplyAction="http://tempuri.org/IReportWCF/VAT22Response")]
        System.Threading.Tasks.Task<string> VAT22Async(string ddbackno, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VATDDB", ReplyAction="http://tempuri.org/IReportWCF/VATDDBResponse")]
        string VATDDB(string ddbackno, string salesInvoice, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VATDDB", ReplyAction="http://tempuri.org/IReportWCF/VATDDBResponse")]
        System.Threading.Tasks.Task<string> VATDDBAsync(string ddbackno, string salesInvoice, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseMis", ReplyAction="http://tempuri.org/IReportWCF/PurchaseMisResponse")]
        string PurchaseMis(string PurchaseId, int BranchId, string VatType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/PurchaseMis", ReplyAction="http://tempuri.org/IReportWCF/PurchaseMisResponse")]
        System.Threading.Tasks.Task<string> PurchaseMisAsync(string PurchaseId, int BranchId, string VatType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleMis", ReplyAction="http://tempuri.org/IReportWCF/SaleMisResponse")]
        string SaleMis(string SaleId, string ShiftId, int BranchId, string VatType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleMis", ReplyAction="http://tempuri.org/IReportWCF/SaleMisResponse")]
        System.Threading.Tasks.Task<string> SaleMisAsync(string SaleId, string ShiftId, int BranchId, string VatType, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/IssueMis", ReplyAction="http://tempuri.org/IReportWCF/IssueMisResponse")]
        string IssueMis(string IssueId, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/IssueMis", ReplyAction="http://tempuri.org/IReportWCF/IssueMisResponse")]
        System.Threading.Tasks.Task<string> IssueMisAsync(string IssueId, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ReceiveMis", ReplyAction="http://tempuri.org/IReportWCF/ReceiveMisResponse")]
        string ReceiveMis(string ReceiveId, string ShiftId, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/ReceiveMis", ReplyAction="http://tempuri.org/IReportWCF/ReceiveMisResponse")]
        System.Threading.Tasks.Task<string> ReceiveMisAsync(string ReceiveId, string ShiftId, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleReceiveMIS", ReplyAction="http://tempuri.org/IReportWCF/SaleReceiveMISResponse")]
        string SaleReceiveMIS(string StartDate, string EndDate, string ShiftId, string Post, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/SaleReceiveMIS", ReplyAction="http://tempuri.org/IReportWCF/SaleReceiveMISResponse")]
        System.Threading.Tasks.Task<string> SaleReceiveMISAsync(string StartDate, string EndDate, string ShiftId, string Post, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1KaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1KaNewResponse")]
        string VAT1KaNew(string FinishItemNo, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1KaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1KaNewResponse")]
        System.Threading.Tasks.Task<string> VAT1KaNewAsync(string FinishItemNo, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1GaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1GaNewResponse")]
        string VAT1GaNew(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1GaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1GaNewResponse")]
        System.Threading.Tasks.Task<string> VAT1GaNewAsync(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1GhaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1GhaNewResponse")]
        string VAT1GhaNew(string finishitemno, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VAT1GhaNew", ReplyAction="http://tempuri.org/IReportWCF/VAT1GhaNewResponse")]
        System.Threading.Tasks.Task<string> VAT1GhaNewAsync(string finishitemno, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/FormKaNew", ReplyAction="http://tempuri.org/IReportWCF/FormKaNewResponse")]
        string FormKaNew(string FinishItemNo, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/FormKaNew", ReplyAction="http://tempuri.org/IReportWCF/FormKaNewResponse")]
        System.Threading.Tasks.Task<string> FormKaNewAsync(string FinishItemNo, string EffectDate, string VATName, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BOMNew_withFNo", ReplyAction="http://tempuri.org/IReportWCF/BOMNew_withFNoResponse")]
        string BOMNew_withFNo(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BOMNew_withFNo", ReplyAction="http://tempuri.org/IReportWCF/BOMNew_withFNoResponse")]
        System.Threading.Tasks.Task<string> BOMNew_withFNoAsync(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BOMNew", ReplyAction="http://tempuri.org/IReportWCF/BOMNewResponse")]
        string BOMNew(string BOMId, string VATName, string IsPercent, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BOMNew", ReplyAction="http://tempuri.org/IReportWCF/BOMNewResponse")]
        System.Threading.Tasks.Task<string> BOMNewAsync(string BOMId, string VATName, string IsPercent, int BranchId, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BOMDownload", ReplyAction="http://tempuri.org/IReportWCF/BOMDownloadResponse")]
        string BOMDownload(string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BOMDownload", ReplyAction="http://tempuri.org/IReportWCF/BOMDownloadResponse")]
        System.Threading.Tasks.Task<string> BOMDownloadAsync(string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VATDisposeDsNew", ReplyAction="http://tempuri.org/IReportWCF/VATDisposeDsNewResponse")]
        string VATDisposeDsNew(string DisposeNumber, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/VATDisposeDsNew", ReplyAction="http://tempuri.org/IReportWCF/VATDisposeDsNewResponse")]
        System.Threading.Tasks.Task<string> VATDisposeDsNewAsync(string DisposeNumber, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BankNew", ReplyAction="http://tempuri.org/IReportWCF/BankNewResponse")]
        string BankNew(string BankID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/BankNew", ReplyAction="http://tempuri.org/IReportWCF/BankNewResponse")]
        System.Threading.Tasks.Task<string> BankNewAsync(string BankID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CustomerGroupNew", ReplyAction="http://tempuri.org/IReportWCF/CustomerGroupNewResponse")]
        string CustomerGroupNew(string CustomerGroupID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CustomerGroupNew", ReplyAction="http://tempuri.org/IReportWCF/CustomerGroupNewResponse")]
        System.Threading.Tasks.Task<string> CustomerGroupNewAsync(string CustomerGroupID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CustomerNew", ReplyAction="http://tempuri.org/IReportWCF/CustomerNewResponse")]
        string CustomerNew(string CustomerID, string CustomerGroupID, string connection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportWCF/CustomerNew", ReplyAction="http://tempuri.org/IReportWCF/CustomerNewResponse")]
        System.Threading.Tasks.Task<string> CustomerNewAsync(string CustomerID, string CustomerGroupID, string connection);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportWCFChannel : VATDesktop.Repo.ReportWCF.IReportWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.ReportWCF.IReportWCF>, VATDesktop.Repo.ReportWCF.IReportWCF {
        
        public ReportWCFClient() {
        }
        
        public ReportWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string StockReportRMReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.StockReportRMReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> StockReportRMReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.StockReportRMReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string TransferToDepotReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.TransferToDepotReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> TransferToDepotReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.TransferToDepotReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string VDSStatementReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.VDSStatementReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VDSStatementReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.VDSStatementReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string Chak_khaReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.Chak_khaReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> Chak_khaReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.Chak_khaReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string Chak_kaReport(string StartDate, string EndDate, int BranchId, int TransferTo, string connection) {
            return base.Channel.Chak_kaReport(StartDate, EndDate, BranchId, TransferTo, connection);
        }
        
        public System.Threading.Tasks.Task<string> Chak_kaReportAsync(string StartDate, string EndDate, int BranchId, int TransferTo, string connection) {
            return base.Channel.Chak_kaReportAsync(StartDate, EndDate, BranchId, TransferTo, connection);
        }
        
        public string TDS_Certificatet(string DepositId, string connection) {
            return base.Channel.TDS_Certificatet(DepositId, connection);
        }
        
        public System.Threading.Tasks.Task<string> TDS_CertificatetAsync(string DepositId, string connection) {
            return base.Channel.TDS_CertificatetAsync(DepositId, connection);
        }
        
        public string Adjustment(string HeadId, string AdjType, string StartDate, string EndDate, string Post, int BranchId, string connection) {
            return base.Channel.Adjustment(HeadId, AdjType, StartDate, EndDate, Post, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> AdjustmentAsync(string HeadId, string AdjType, string StartDate, string EndDate, string Post, int BranchId, string connection) {
            return base.Channel.AdjustmentAsync(HeadId, AdjType, StartDate, EndDate, Post, BranchId, connection);
        }
        
        public string TDSAmountReport(string conditionField, string conditionValue, string connection) {
            return base.Channel.TDSAmountReport(conditionField, conditionValue, connection);
        }
        
        public System.Threading.Tasks.Task<string> TDSAmountReportAsync(string conditionField, string conditionValue, string connection) {
            return base.Channel.TDSAmountReportAsync(conditionField, conditionValue, connection);
        }
        
        public string TransferIssueOutReport(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int TransferTo, string connection) {
            return base.Channel.TransferIssueOutReport(IssueNo, IssueDateFrom, IssueDateTo, TType, BranchId, TransferTo, connection);
        }
        
        public System.Threading.Tasks.Task<string> TransferIssueOutReportAsync(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int TransferTo, string connection) {
            return base.Channel.TransferIssueOutReportAsync(IssueNo, IssueDateFrom, IssueDateTo, TType, BranchId, TransferTo, connection);
        }
        
        public string TransferReceiveInReport(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int BranchFromId, string connection) {
            return base.Channel.TransferReceiveInReport(IssueNo, IssueDateFrom, IssueDateTo, TType, BranchId, BranchFromId, connection);
        }
        
        public System.Threading.Tasks.Task<string> TransferReceiveInReportAsync(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId, int BranchFromId, string connection) {
            return base.Channel.TransferReceiveInReportAsync(IssueNo, IssueDateFrom, IssueDateTo, TType, BranchId, BranchFromId, connection);
        }
        
        public string Wastage(string ItemNo, string CategoryID, string StartDate, string EndDate, string connection) {
            return base.Channel.Wastage(ItemNo, CategoryID, StartDate, EndDate, connection);
        }
        
        public System.Threading.Tasks.Task<string> WastageAsync(string ItemNo, string CategoryID, string StartDate, string EndDate, string connection) {
            return base.Channel.WastageAsync(ItemNo, CategoryID, StartDate, EndDate, connection);
        }
        
        public string RptDeliveryReport(string challanNo, string connection) {
            return base.Channel.RptDeliveryReport(challanNo, connection);
        }
        
        public System.Threading.Tasks.Task<string> RptDeliveryReportAsync(string challanNo, string connection) {
            return base.Channel.RptDeliveryReportAsync(challanNo, connection);
        }
        
        public string DepositNew(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection) {
            return base.Channel.DepositNew(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, connection);
        }
        
        public System.Threading.Tasks.Task<string> DepositNewAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection) {
            return base.Channel.DepositNewAsync(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, connection);
        }
        
        public string MISVAT16New(string CategoryId, string StartDate, string EndDate, string UserName, string ItemNo, string connection) {
            return base.Channel.MISVAT16New(CategoryId, StartDate, EndDate, UserName, ItemNo, connection);
        }
        
        public System.Threading.Tasks.Task<string> MISVAT16NewAsync(string CategoryId, string StartDate, string EndDate, string UserName, string ItemNo, string connection) {
            return base.Channel.MISVAT16NewAsync(CategoryId, StartDate, EndDate, UserName, ItemNo, connection);
        }
        
        public string MISVAT17New(string CategoryId, string UserName, string StartDate, string EndDate, string ItemNo, string connection) {
            return base.Channel.MISVAT17New(CategoryId, UserName, StartDate, EndDate, ItemNo, connection);
        }
        
        public System.Threading.Tasks.Task<string> MISVAT17NewAsync(string CategoryId, string UserName, string StartDate, string EndDate, string ItemNo, string connection) {
            return base.Channel.MISVAT17NewAsync(CategoryId, UserName, StartDate, EndDate, ItemNo, connection);
        }
        
        public string MISVAT18New(string UserName, string StartDate, string EndDate, string connection) {
            return base.Channel.MISVAT18New(UserName, StartDate, EndDate, connection);
        }
        
        public System.Threading.Tasks.Task<string> MISVAT18NewAsync(string UserName, string StartDate, string EndDate, string connection) {
            return base.Channel.MISVAT18NewAsync(UserName, StartDate, EndDate, connection);
        }
        
        public string ProductCategoryNew(string cgID, string connection) {
            return base.Channel.ProductCategoryNew(cgID, connection);
        }
        
        public System.Threading.Tasks.Task<string> ProductCategoryNewAsync(string cgID, string connection) {
            return base.Channel.ProductCategoryNewAsync(cgID, connection);
        }
        
        public string ProductNew(string ItemNo, string CategoryID, string IsRaw, string connection) {
            return base.Channel.ProductNew(ItemNo, CategoryID, IsRaw, connection);
        }
        
        public System.Threading.Tasks.Task<string> ProductNewAsync(string ItemNo, string CategoryID, string IsRaw, string connection) {
            return base.Channel.ProductNewAsync(ItemNo, CategoryID, IsRaw, connection);
        }
        
        public string PurchaseNew(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    bool pCategoryLike, 
                    string PGroup, 
                    int BranchId, 
                    string VatType,
                    string IsRebate, 
                    string connection) {
            return base.Channel.PurchaseNew(PurchaseInvoiceNo, InvoiceDateFrom, InvoiceDateTo, VendorId, ItemNo, CategoryID, ProductType, TransactionType, Post, PurchaseType, VendorGroupId, FromBOM, UOM, UOMn, UOMc, TotalQty, rCostPrice, pCategoryLike, PGroup, BranchId, VatType,IsRebate, connection);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseNewAsync(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    bool pCategoryLike, 
                    string PGroup, 
                    int BranchId, 
                    string VatType, 
                    string connection) {
            return base.Channel.PurchaseNewAsync(PurchaseInvoiceNo, InvoiceDateFrom, InvoiceDateTo, VendorId, ItemNo, CategoryID, ProductType, TransactionType, Post, PurchaseType, VendorGroupId, FromBOM, UOM, UOMn, UOMc, TotalQty, rCostPrice, pCategoryLike, PGroup, BranchId, VatType, connection);
        }
        
        public string IssueNew(string IssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string waste, bool pCategoryLike, string PGroup, int BranchId, string connection) {
            return base.Channel.IssueNew(IssueNo, IssueDateFrom, IssueDateTo, itemNo, categoryID, productType, TransactionType, Post, waste, pCategoryLike, PGroup, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> IssueNewAsync(string IssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string waste, bool pCategoryLike, string PGroup, int BranchId, string connection) {
            return base.Channel.IssueNewAsync(IssueNo, IssueDateFrom, IssueDateTo, itemNo, categoryID, productType, TransactionType, Post, waste, pCategoryLike, PGroup, BranchId, connection);
        }
        
        public string ReceiveNew(string ReceiveNo, string ReceiveDateFrom, string ReceiveDateTo, string itemNo, string categoryID, string productType, string transactionType, string post, string ShiftId, int BranchId, string connection) {
            return base.Channel.ReceiveNew(ReceiveNo, ReceiveDateFrom, ReceiveDateTo, itemNo, categoryID, productType, transactionType, post, ShiftId, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> ReceiveNewAsync(string ReceiveNo, string ReceiveDateFrom, string ReceiveDateTo, string itemNo, string categoryID, string productType, string transactionType, string post, string ShiftId, int BranchId, string connection) {
            return base.Channel.ReceiveNewAsync(ReceiveNo, ReceiveDateFrom, ReceiveDateTo, itemNo, categoryID, productType, transactionType, post, ShiftId, BranchId, connection);
        }
        
        public string SaleNew(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    bool pCategoryLike, 
                    string PGroup, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection) {
            return base.Channel.SaleNew(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, pCategoryLike, PGroup, ShiftId, branchId, VatType, connection);
        }
        
        public System.Threading.Tasks.Task<string> SaleNewAsync(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    bool pCategoryLike, 
                    string PGroup, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection) {
            return base.Channel.SaleNewAsync(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, pCategoryLike, PGroup, ShiftId, branchId, VatType, connection);
        }
        
        public string SaleNewWithChassisEngine(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string chassis, 
                    string engine, 
                    string ShiftId, 
                    int branchId, 
                    string connection) {
            return base.Channel.SaleNewWithChassisEngine(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, chassis, engine, ShiftId, branchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> SaleNewWithChassisEngineAsync(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string chassis, 
                    string engine, 
                    string ShiftId, 
                    int branchId, 
                    string connection) {
            return base.Channel.SaleNewWithChassisEngineAsync(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, chassis, engine, ShiftId, branchId, connection);
        }
        
        public string StockNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, bool pCategoryLike, string PGroup, int BranchId, string connection) {
            return base.Channel.StockNew(ProductNo, CategoryNo, ItemType, StartDate, EndDate, Post1, Post2, WithoutZero, pCategoryLike, PGroup, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> StockNewAsync(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, bool pCategoryLike, string PGroup, int BranchId, string connection) {
            return base.Channel.StockNewAsync(ProductNo, CategoryNo, ItemType, StartDate, EndDate, Post1, Post2, WithoutZero, pCategoryLike, PGroup, BranchId, connection);
        }
        
        public string StockWithAdjNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection) {
            return base.Channel.StockWithAdjNew(ProductNo, CategoryNo, ItemType, StartDate, EndDate, Post1, Post2, WithoutZero, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> StockWithAdjNewAsync(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection) {
            return base.Channel.StockWithAdjNewAsync(ProductNo, CategoryNo, ItemType, StartDate, EndDate, Post1, Post2, WithoutZero, BranchId, connection);
        }
        
        public string StockWastage(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection) {
            return base.Channel.StockWastage(ProductNo, CategoryNo, ItemType, StartDate, EndDate, Post1, Post2, WithoutZero, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> StockWastageAsync(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate, string Post1, string Post2, bool WithoutZero, int BranchId, string connection) {
            return base.Channel.StockWastageAsync(ProductNo, CategoryNo, ItemType, StartDate, EndDate, Post1, Post2, WithoutZero, BranchId, connection);
        }
        
        public string VehicleNew(string VehicleNo, string connection) {
            return base.Channel.VehicleNew(VehicleNo, connection);
        }
        
        public System.Threading.Tasks.Task<string> VehicleNewAsync(string VehicleNo, string connection) {
            return base.Channel.VehicleNewAsync(VehicleNo, connection);
        }
        
        public string VendorGroupNew(string VendorGroupID, string connection) {
            return base.Channel.VendorGroupNew(VendorGroupID, connection);
        }
        
        public System.Threading.Tasks.Task<string> VendorGroupNewAsync(string VendorGroupID, string connection) {
            return base.Channel.VendorGroupNewAsync(VendorGroupID, connection);
        }
        
        public string InputOutputCoEfficient(string RawItemNo, string StartDate, string EndDate, string Post1, string Post2, string connection) {
            return base.Channel.InputOutputCoEfficient(RawItemNo, StartDate, EndDate, Post1, Post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> InputOutputCoEfficientAsync(string RawItemNo, string StartDate, string EndDate, string Post1, string Post2, string connection) {
            return base.Channel.InputOutputCoEfficientAsync(RawItemNo, StartDate, EndDate, Post1, Post2, connection);
        }
        
        public string VendorReportNew(string VendorID, string VendorGroupID, string connection) {
            return base.Channel.VendorReportNew(VendorID, VendorGroupID, connection);
        }
        
        public System.Threading.Tasks.Task<string> VendorReportNewAsync(string VendorID, string VendorGroupID, string connection) {
            return base.Channel.VendorReportNewAsync(VendorID, VendorGroupID, connection);
        }
        
        public string TrasurryDepositeNew(string DepositId, string connection) {
            return base.Channel.TrasurryDepositeNew(DepositId, connection);
        }
        
        public System.Threading.Tasks.Task<string> TrasurryDepositeNewAsync(string DepositId, string connection) {
            return base.Channel.TrasurryDepositeNewAsync(DepositId, connection);
        }
        
        public string TDSDeposit(string DepositId, string connection) {
            return base.Channel.TDSDeposit(DepositId, connection);
        }
        
        public System.Threading.Tasks.Task<string> TDSDepositAsync(string DepositId, string connection) {
            return base.Channel.TDSDepositAsync(DepositId, connection);
        }
        
        public string TDSDepositDetail(string DepositId, string connection) {
            return base.Channel.TDSDepositDetail(DepositId, connection);
        }
        
        public System.Threading.Tasks.Task<string> TDSDepositDetailAsync(string DepositId, string connection) {
            return base.Channel.TDSDepositDetailAsync(DepositId, connection);
        }
        
        public string TDSDepositDetail_MISReport(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection) {
            return base.Channel.TDSDepositDetail_MISReport(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, connection);
        }
        
        public System.Threading.Tasks.Task<string> TDSDepositDetail_MISReportAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection) {
            return base.Channel.TDSDepositDetail_MISReportAsync(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, connection);
        }
        
        public string TDSDeposit_MISReport(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection) {
            return base.Channel.TDSDeposit_MISReport(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, connection);
        }
        
        public System.Threading.Tasks.Task<string> TDSDeposit_MISReportAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string connection) {
            return base.Channel.TDSDeposit_MISReportAsync(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, connection);
        }
        
        public string VDSDepositNew(string DepositId, string connection) {
            return base.Channel.VDSDepositNew(DepositId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VDSDepositNewAsync(string DepositId, string connection) {
            return base.Channel.VDSDepositNewAsync(DepositId, connection);
        }
        
        public string SDTrasurryDepositeNew(string DepositId, string connection) {
            return base.Channel.SDTrasurryDepositeNew(DepositId, connection);
        }
        
        public System.Threading.Tasks.Task<string> SDTrasurryDepositeNewAsync(string DepositId, string connection) {
            return base.Channel.SDTrasurryDepositeNewAsync(DepositId, connection);
        }
        
        public string ComapnyProfileString(string CompanyID, string UserId, string connection) {
            return base.Channel.ComapnyProfileString(CompanyID, UserId, connection);
        }
        
        public System.Threading.Tasks.Task<string> ComapnyProfileStringAsync(string CompanyID, string UserId, string connection) {
            return base.Channel.ComapnyProfileStringAsync(CompanyID, UserId, connection);
        }
        
        public string ComapnyProfile(string CompanyID, string connection) {
            return base.Channel.ComapnyProfile(CompanyID, connection);
        }
        
        public System.Threading.Tasks.Task<string> ComapnyProfileAsync(string CompanyID, string connection) {
            return base.Channel.ComapnyProfileAsync(CompanyID, connection);
        }
        
        public string CurrencyReportNew(string connection) {
            return base.Channel.CurrencyReportNew(connection);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyReportNewAsync(string connection) {
            return base.Channel.CurrencyReportNewAsync(connection);
        }
        
        public string CostingNew(string ID, string ItemNo, string UOM, string UOMn, decimal UOMc, decimal totalQty, decimal rCostPrice, string connection) {
            return base.Channel.CostingNew(ID, ItemNo, UOM, UOMn, UOMc, totalQty, rCostPrice, connection);
        }
        
        public System.Threading.Tasks.Task<string> CostingNewAsync(string ID, string ItemNo, string UOM, string UOMn, decimal UOMc, decimal totalQty, decimal rCostPrice, string connection) {
            return base.Channel.CostingNewAsync(ID, ItemNo, UOM, UOMn, UOMc, totalQty, rCostPrice, connection);
        }
        
        public string ComapnyProfileSecurity(string CompanyID, string connection) {
            return base.Channel.ComapnyProfileSecurity(CompanyID, connection);
        }
        
        public System.Threading.Tasks.Task<string> ComapnyProfileSecurityAsync(string CompanyID, string connection) {
            return base.Channel.ComapnyProfileSecurityAsync(CompanyID, connection);
        }
        
        public string MonthlySales(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection) {
            return base.Channel.MonthlySales(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, ShiftId, branchId, VatType, connection);
        }
        
        public System.Threading.Tasks.Task<string> MonthlySalesAsync(
                    string SalesInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string Customerid, 
                    string ItemNo, 
                    string CategoryID, 
                    string productType, 
                    string TransactionType, 
                    string Post, 
                    string onlyDiscount, 
                    bool bPromotional, 
                    string CustomerGroupID, 
                    string ShiftId, 
                    int branchId, 
                    string VatType, 
                    string connection) {
            return base.Channel.MonthlySalesAsync(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, ShiftId, branchId, VatType, connection);
        }
        
        public string MonthlyPurchases(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    int BranchId, 
                    string VatType, 
                    string connection) {
            return base.Channel.MonthlyPurchases(PurchaseInvoiceNo, InvoiceDateFrom, InvoiceDateTo, VendorId, ItemNo, CategoryID, ProductType, TransactionType, Post, PurchaseType, VendorGroupId, FromBOM, UOM, UOMn, UOMc, TotalQty, rCostPrice, BranchId, VatType, connection);
        }
        
        public System.Threading.Tasks.Task<string> MonthlyPurchasesAsync(
                    string PurchaseInvoiceNo, 
                    string InvoiceDateFrom, 
                    string InvoiceDateTo, 
                    string VendorId, 
                    string ItemNo, 
                    string CategoryID, 
                    string ProductType, 
                    string TransactionType, 
                    string Post, 
                    string PurchaseType, 
                    string VendorGroupId, 
                    string FromBOM, 
                    string UOM, 
                    string UOMn, 
                    decimal UOMc, 
                    decimal TotalQty, 
                    decimal rCostPrice, 
                    int BranchId, 
                    string VatType, 
                    string connection) {
            return base.Channel.MonthlyPurchasesAsync(PurchaseInvoiceNo, InvoiceDateFrom, InvoiceDateTo, VendorId, ItemNo, CategoryID, ProductType, TransactionType, Post, PurchaseType, VendorGroupId, FromBOM, UOM, UOMn, UOMc, TotalQty, rCostPrice, BranchId, VatType, connection);
        }
        
        public string VDSReport(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string VendorId, string connection) {
            return base.Channel.VDSReport(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, VendorId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VDSReportAsync(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType, string VendorId, string connection) {
            return base.Channel.VDSReportAsync(DepositNo, DepositDateFrom, DepositDateTo, BankID, Post, transactionType, VendorId, connection);
        }
        
        public string DemandReport(string DemandNo, string DemandDateFrom, string DemandDateTo, string TransactionType, string Post, string connection) {
            return base.Channel.DemandReport(DemandNo, DemandDateFrom, DemandDateTo, TransactionType, Post, connection);
        }
        
        public System.Threading.Tasks.Task<string> DemandReportAsync(string DemandNo, string DemandDateFrom, string DemandDateTo, string TransactionType, string Post, string connection) {
            return base.Channel.DemandReportAsync(DemandNo, DemandDateFrom, DemandDateTo, TransactionType, Post, connection);
        }
        
        public string BanderolForm_4(string BanderolID, string post1, string StartDate, string EndDate, string post2, string connection) {
            return base.Channel.BanderolForm_4(BanderolID, post1, StartDate, EndDate, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BanderolForm_4Async(string BanderolID, string post1, string StartDate, string EndDate, string post2, string connection) {
            return base.Channel.BanderolForm_4Async(BanderolID, post1, StartDate, EndDate, post2, connection);
        }
        
        public string BanderolForm_5(string PeriodName, string connection) {
            return base.Channel.BanderolForm_5(PeriodName, connection);
        }
        
        public System.Threading.Tasks.Task<string> BanderolForm_5Async(string PeriodName, string connection) {
            return base.Channel.BanderolForm_5Async(PeriodName, connection);
        }
        
        public string GetReturnType(string itemNo, string transactionType, string connection) {
            return base.Channel.GetReturnType(itemNo, transactionType, connection);
        }
        
        public System.Threading.Tasks.Task<string> GetReturnTypeAsync(string itemNo, string transactionType, string connection) {
            return base.Channel.GetReturnTypeAsync(itemNo, transactionType, connection);
        }
        
        public string SelectMultipleInvoices(int noOfChallan, string transactionType, string challanDateFrom, string challanDateTo, string connection) {
            return base.Channel.SelectMultipleInvoices(noOfChallan, transactionType, challanDateFrom, challanDateTo, connection);
        }
        
        public System.Threading.Tasks.Task<string> SelectMultipleInvoicesAsync(int noOfChallan, string transactionType, string challanDateFrom, string challanDateTo, string connection) {
            return base.Channel.SelectMultipleInvoicesAsync(noOfChallan, transactionType, challanDateFrom, challanDateTo, connection);
        }
        
        public string RptBanderolProduct(string ProductCode, string connection) {
            return base.Channel.RptBanderolProduct(ProductCode, connection);
        }
        
        public System.Threading.Tasks.Task<string> RptBanderolProductAsync(string ProductCode, string connection) {
            return base.Channel.RptBanderolProductAsync(ProductCode, connection);
        }
        
        public string BureauVAT11Report(string SalesInvoiceNo, string Post1, string Post2, string connection) {
            return base.Channel.BureauVAT11Report(SalesInvoiceNo, Post1, Post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauVAT11ReportAsync(string SalesInvoiceNo, string Post1, string Post2, string connection) {
            return base.Channel.BureauVAT11ReportAsync(SalesInvoiceNo, Post1, Post2, connection);
        }
        
        public string BureauVAT6_1Report(string ItemNo, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.BureauVAT6_1Report(ItemNo, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauVAT6_1ReportAsync(string ItemNo, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.BureauVAT6_1ReportAsync(ItemNo, StartDate, EndDate, post1, post2, connection);
        }
        
        public string BureauVAT18Report(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.BureauVAT18Report(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauVAT18ReportAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.BureauVAT18ReportAsync(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string BureauVAT18_OldFormat(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.BureauVAT18_OldFormat(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauVAT18_OldFormatAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.BureauVAT18_OldFormatAsync(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string BureauMonthlySales(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection) {
            return base.Channel.BureauMonthlySales(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, ShiftId, branchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauMonthlySalesAsync(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection) {
            return base.Channel.BureauMonthlySalesAsync(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, ShiftId, branchId, connection);
        }
        
        public string BureauSaleMis(string SaleId, string ShiftId, int branchId, string connection) {
            return base.Channel.BureauSaleMis(SaleId, ShiftId, branchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauSaleMisAsync(string SaleId, string ShiftId, int branchId, string connection) {
            return base.Channel.BureauSaleMisAsync(SaleId, ShiftId, branchId, connection);
        }
        
        public string BureauSaleNew(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection) {
            return base.Channel.BureauSaleNew(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, ShiftId, branchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauSaleNewAsync(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId, int branchId, string connection) {
            return base.Channel.BureauSaleNewAsync(SalesInvoiceNo, InvoiceDateFrom, InvoiceDateTo, Customerid, ItemNo, CategoryID, productType, TransactionType, Post, onlyDiscount, bPromotional, CustomerGroupID, ShiftId, branchId, connection);
        }
        
        public string BureauCreditNote(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.BureauCreditNote(SalesInvoiceNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauCreditNoteAsync(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.BureauCreditNoteAsync(SalesInvoiceNo, post1, post2, connection);
        }
        
        public string BureauVAT19Report(string PeriodName, string ExportInBDT, string connection) {
            return base.Channel.BureauVAT19Report(PeriodName, ExportInBDT, connection);
        }
        
        public System.Threading.Tasks.Task<string> BureauVAT19ReportAsync(string PeriodName, string ExportInBDT, string connection) {
            return base.Channel.BureauVAT19ReportAsync(PeriodName, ExportInBDT, connection);
        }
        
        public string RptVAT7Report(string vat7No, string connection) {
            return base.Channel.RptVAT7Report(vat7No, connection);
        }
        
        public System.Threading.Tasks.Task<string> RptVAT7ReportAsync(string vat7No, string connection) {
            return base.Channel.RptVAT7ReportAsync(vat7No, connection);
        }
        
        public string TollRegister(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.TollRegister(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> TollRegisterAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.TollRegisterAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string TollRegisterRaw(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.TollRegisterRaw(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> TollRegisterRawAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.TollRegisterRawAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string VAT16AttachToll(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT16AttachToll(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT16AttachTollAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT16AttachTollAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string PurchaseReturnNew(string PurchaseInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.PurchaseReturnNew(PurchaseInvoiceNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseReturnNewAsync(string PurchaseInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.PurchaseReturnNewAsync(PurchaseInvoiceNo, post1, post2, connection);
        }
        
        public string Current_AC_VAT18(string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.Current_AC_VAT18(StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> Current_AC_VAT18Async(string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.Current_AC_VAT18Async(StartDate, EndDate, post1, post2, connection);
        }
        
        public string SerialStockStatus(string ItemNo, string CategoryID, string ProductType, string StartDate, string ToDate, string post1, string post2, string connection) {
            return base.Channel.SerialStockStatus(ItemNo, CategoryID, ProductType, StartDate, ToDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> SerialStockStatusAsync(string ItemNo, string CategoryID, string ProductType, string StartDate, string ToDate, string post1, string post2, string connection) {
            return base.Channel.SerialStockStatusAsync(ItemNo, CategoryID, ProductType, StartDate, ToDate, post1, post2, connection);
        }
        
        public string PurchaseWithLCInfo(string PurchaseInvoiceNo, string LCDateFrom, string LCDateTo, string VendorId, string ItemNo, string VendorGroupId, string LCNo, string Post, string connection) {
            return base.Channel.PurchaseWithLCInfo(PurchaseInvoiceNo, LCDateFrom, LCDateTo, VendorId, ItemNo, VendorGroupId, LCNo, Post, connection);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseWithLCInfoAsync(string PurchaseInvoiceNo, string LCDateFrom, string LCDateTo, string VendorId, string ItemNo, string VendorGroupId, string LCNo, string Post, string connection) {
            return base.Channel.PurchaseWithLCInfoAsync(PurchaseInvoiceNo, LCDateFrom, LCDateTo, VendorId, ItemNo, VendorGroupId, LCNo, Post, connection);
        }
        
        public string VAT18_Sanofi(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT18_Sanofi(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT18_SanofiAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT18_SanofiAsync(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string TDSReport(string connection) {
            return base.Channel.TDSReport(connection);
        }
        
        public System.Threading.Tasks.Task<string> TDSReportAsync(string connection) {
            return base.Channel.TDSReportAsync(connection);
        }
        
        public string LocalPurchaseReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.LocalPurchaseReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> LocalPurchaseReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.LocalPurchaseReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string ImportDataReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.ImportDataReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> ImportDataReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.ImportDataReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string ReceiedVsSaleReport(string StartDate, string EndDate, int BranchId, string connVM) {
            return base.Channel.ReceiedVsSaleReport(StartDate, EndDate, BranchId, connVM);
        }
        
        public System.Threading.Tasks.Task<string> ReceiedVsSaleReportAsync(string StartDate, string EndDate, int BranchId, string connVM) {
            return base.Channel.ReceiedVsSaleReportAsync(StartDate, EndDate, BranchId, connVM);
        }
        
        public string SalesStatementForServiceReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.SalesStatementForServiceReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> SalesStatementForServiceReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.SalesStatementForServiceReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string SalesStatementDeliveryReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.SalesStatementDeliveryReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> SalesStatementDeliveryReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.SalesStatementDeliveryReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public string StockReportFGReport(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.StockReportFGReport(StartDate, EndDate, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> StockReportFGReportAsync(string StartDate, string EndDate, int BranchId, string connection) {
            return base.Channel.StockReportFGReportAsync(StartDate, EndDate, BranchId, connection);
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string TransferIssueNew(string TransferIssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string DBName, string connection) {
            return base.Channel.TransferIssueNew(TransferIssueNo, IssueDateFrom, IssueDateTo, itemNo, categoryID, productType, TransactionType, Post, DBName, connection);
        }
        
        public System.Threading.Tasks.Task<string> TransferIssueNewAsync(string TransferIssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string DBName, string connection) {
            return base.Channel.TransferIssueNewAsync(TransferIssueNo, IssueDateFrom, IssueDateTo, itemNo, categoryID, productType, TransactionType, Post, DBName, connection);
        }
        
        public string VAT18New(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT18New(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT18NewAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT18NewAsync(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string VAT6_10Report(string TotalAmount, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection) {
            return base.Channel.VAT6_10Report(TotalAmount, StartDate, EndDate, post1, post2, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_10ReportAsync(string TotalAmount, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection) {
            return base.Channel.VAT6_10ReportAsync(TotalAmount, StartDate, EndDate, post1, post2, BranchId, connection);
        }
        
        public string VDS12KhaNew(string VendorId, string DepositNumber, string DepositDateFrom, string DepositDateTo, string IssueDateFrom, string IssueDateTo, string BillDateFrom, string BillDateTo, string PurchaseNumber, bool chkPurchaseVDS, bool chkAll, string connection) {
            return base.Channel.VDS12KhaNew(VendorId, DepositNumber, DepositDateFrom, DepositDateTo, IssueDateFrom, IssueDateTo, BillDateFrom, BillDateTo, PurchaseNumber, chkPurchaseVDS, chkAll, connection);
        }
        
        public System.Threading.Tasks.Task<string> VDS12KhaNewAsync(string VendorId, string DepositNumber, string DepositDateFrom, string DepositDateTo, string IssueDateFrom, string IssueDateTo, string BillDateFrom, string BillDateTo, string PurchaseNumber, bool chkPurchaseVDS, bool chkAll, string connection) {
            return base.Channel.VDS12KhaNewAsync(VendorId, DepositNumber, DepositDateFrom, DepositDateTo, IssueDateFrom, IssueDateTo, BillDateFrom, BillDateTo, PurchaseNumber, chkPurchaseVDS, chkAll, connection);
        }
        
        public string MIS19(string StartDate, string EndDate, string connection) {
            return base.Channel.MIS19(StartDate, EndDate, connection);
        }
        
        public System.Threading.Tasks.Task<string> MIS19Async(string StartDate, string EndDate, string connection) {
            return base.Channel.MIS19Async(StartDate, EndDate, connection);
        }
        
        public string VAT11ReportCommercialImporterNew(string SalesInvoiceNo, string Post1, string Post2, string connection) {
            return base.Channel.VAT11ReportCommercialImporterNew(SalesInvoiceNo, Post1, Post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT11ReportCommercialImporterNewAsync(string SalesInvoiceNo, string Post1, string Post2, string connection) {
            return base.Channel.VAT11ReportCommercialImporterNewAsync(SalesInvoiceNo, Post1, Post2, connection);
        }
        
        public string VAT6_7(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.VAT6_7(SalesInvoiceNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_7Async(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.VAT6_7Async(SalesInvoiceNo, post1, post2, connection);
        }
        
        public string VAT6_8(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.VAT6_8(SalesInvoiceNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_8Async(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.VAT6_8Async(SalesInvoiceNo, post1, post2, connection);
        }
        
        public string VAT11ReportNew(string SalesInvoiceNo, string Post1, string Post2, string ddmmyy, string connection) {
            return base.Channel.VAT11ReportNew(SalesInvoiceNo, Post1, Post2, ddmmyy, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT11ReportNewAsync(string SalesInvoiceNo, string Post1, string Post2, string ddmmyy, string connection) {
            return base.Channel.VAT11ReportNewAsync(SalesInvoiceNo, Post1, Post2, ddmmyy, connection);
        }
        
        public string VAT1KhaNew(string FinishItemNo, string EffectDate, string VATName, string connection) {
            return base.Channel.VAT1KhaNew(FinishItemNo, EffectDate, VATName, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT1KhaNewAsync(string FinishItemNo, string EffectDate, string VATName, string connection) {
            return base.Channel.VAT1KhaNewAsync(FinishItemNo, EffectDate, VATName, connection);
        }
        
        public string SaleTrackingReport(string SalesInvoiceNo, string connection) {
            return base.Channel.SaleTrackingReport(SalesInvoiceNo, connection);
        }
        
        public System.Threading.Tasks.Task<string> SaleTrackingReportAsync(string SalesInvoiceNo, string connection) {
            return base.Channel.SaleTrackingReportAsync(SalesInvoiceNo, connection);
        }
        
        public string VAT6_3Toll(string TollNo, string Post1, string Post2, string connection) {
            return base.Channel.VAT6_3Toll(TollNo, Post1, Post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_3TollAsync(string TollNo, string Post1, string Post2, string connection) {
            return base.Channel.VAT6_3TollAsync(TollNo, Post1, Post2, connection);
        }
        
        public string VAT20ReportNew(string SalesInvoiceNo, string connection) {
            return base.Channel.VAT20ReportNew(SalesInvoiceNo, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT20ReportNewAsync(string SalesInvoiceNo, string connection) {
            return base.Channel.VAT20ReportNewAsync(SalesInvoiceNo, connection);
        }
        
        public string CreditNoteNew(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.CreditNoteNew(SalesInvoiceNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> CreditNoteNewAsync(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.CreditNoteNewAsync(SalesInvoiceNo, post1, post2, connection);
        }
        
        public string CreditNoteAmountNew(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.CreditNoteAmountNew(SalesInvoiceNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> CreditNoteAmountNewAsync(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.CreditNoteAmountNewAsync(SalesInvoiceNo, post1, post2, connection);
        }
        
        public string DebitNoteNew(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.DebitNoteNew(SalesInvoiceNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> DebitNoteNewAsync(string SalesInvoiceNo, string post1, string post2, string connection) {
            return base.Channel.DebitNoteNewAsync(SalesInvoiceNo, post1, post2, connection);
        }
        
        public string BatchTracking(string BatchNo, string post1, string post2, string connection) {
            return base.Channel.BatchTracking(BatchNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BatchTrackingAsync(string BatchNo, string post1, string post2, string connection) {
            return base.Channel.BatchTrackingAsync(BatchNo, post1, post2, connection);
        }
        
        public string BatchTracking1(string BatchNo, string post1, string post2, string connection) {
            return base.Channel.BatchTracking1(BatchNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BatchTracking1Async(string BatchNo, string post1, string post2, string connection) {
            return base.Channel.BatchTracking1Async(BatchNo, post1, post2, connection);
        }
        
        public string BatchTracking2(string BatchNo, string post1, string post2, string connection) {
            return base.Channel.BatchTracking2(BatchNo, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> BatchTracking2Async(string BatchNo, string post1, string post2, string connection) {
            return base.Channel.BatchTracking2Async(BatchNo, post1, post2, connection);
        }
        
        public string VAT16NewforTollRegister(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string connection) {
            return base.Channel.VAT16NewforTollRegister(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT16NewforTollRegisterAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string connection) {
            return base.Channel.VAT16NewforTollRegisterAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, connection);
        }
        
        public string VAT6_1_WithConn(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, bool Opening, string connection) {
            return base.Channel.VAT6_1_WithConn(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, BranchId, Opening, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_1_WithConnAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, bool Opening, string connection) {
            return base.Channel.VAT6_1_WithConnAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, BranchId, Opening, connection);
        }
        
        public string VAT6_1Toll(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, string connection) {
            return base.Channel.VAT6_1Toll(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_1TollAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, int BranchId, string connection) {
            return base.Channel.VAT6_1TollAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, BranchId, connection);
        }
        
        public string VAT6_1_Branching(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection) {
            return base.Channel.VAT6_1_Branching(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, DBName, BranchName, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_1_BranchingAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection) {
            return base.Channel.VAT6_1_BranchingAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, DBName, BranchName, connection);
        }
        
        public string VAT6_1(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection) {
            return base.Channel.VAT6_1(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, DBName, BranchName, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_1Async(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName, string BranchName, string connection) {
            return base.Channel.VAT6_1Async(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, DBName, BranchName, connection);
        }
        
        public string VAT6_2_1(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT6_2_1(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_2_1Async(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.VAT6_2_1Async(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string VAT6_2(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, bool Opening, bool Opening6_2, string connection) {
            return base.Channel.VAT6_2(ItemNo, StartDate, EndDate, post1, post2, BranchId, Opening, Opening6_2, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_2Async(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, bool Opening, bool Opening6_2, string connection) {
            return base.Channel.VAT6_2Async(ItemNo, StartDate, EndDate, post1, post2, BranchId, Opening, Opening6_2, connection);
        }
        
        public string VAT6_2Toll(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection) {
            return base.Channel.VAT6_2Toll(ItemNo, StartDate, EndDate, post1, post2, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT6_2TollAsync(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId, string connection) {
            return base.Channel.VAT6_2TollAsync(ItemNo, StartDate, EndDate, post1, post2, BranchId, connection);
        }
        
        public string VAT9_1(string PeriodName, int BranchId, string Date, string connection) {
            return base.Channel.VAT9_1(PeriodName, BranchId, Date, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1Async(string PeriodName, int BranchId, string Date, string connection) {
            return base.Channel.VAT9_1Async(PeriodName, BranchId, Date, connection);
        }
        
        public string VAT9_1_SubFormAPart3(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormAPart3(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormAPart3Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormAPart3Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormAPart4(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormAPart4(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormAPart4Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormAPart4Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormBPart3(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormBPart3(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormBPart3Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormBPart3Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormCPart3(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormCPart3(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormCPart3Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormCPart3Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormCPart4(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormCPart4(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormCPart4Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormCPart4Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormGPart8(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormGPart8(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormGPart8Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormGPart8Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormDPart5(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormDPart5(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormDPart5Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormDPart5Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormEPart6(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormEPart6(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormEPart6Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormEPart6Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_SubFormFPart6(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormFPart6(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_SubFormFPart6Async(string PeriodName, string ExportInBDT, int LineNo, int BranchId, string connection) {
            return base.Channel.VAT9_1_SubFormFPart6Async(PeriodName, ExportInBDT, LineNo, BranchId, connection);
        }
        
        public string VAT9_1_Process(string PeriodName, int BranchId, string ExportInBDT, string connection) {
            return base.Channel.VAT9_1_Process(PeriodName, BranchId, ExportInBDT, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_ProcessAsync(string PeriodName, int BranchId, string ExportInBDT, string connection) {
            return base.Channel.VAT9_1_ProcessAsync(PeriodName, BranchId, ExportInBDT, connection);
        }
        
        public string VAT9_1_Report(string PeriodName, int BranchId, string ExportInBDT, string connection) {
            return base.Channel.VAT9_1_Report(PeriodName, BranchId, ExportInBDT, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_ReportAsync(string PeriodName, int BranchId, string ExportInBDT, string connection) {
            return base.Channel.VAT9_1_ReportAsync(PeriodName, BranchId, ExportInBDT, connection);
        }
        
        public string VAT9_1_V2(string PeriodName, int BranchId, string Date, string connection) {
            return base.Channel.VAT9_1_V2(PeriodName, BranchId, Date, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT9_1_V2Async(string PeriodName, int BranchId, string Date, string connection) {
            return base.Channel.VAT9_1_V2Async(PeriodName, BranchId, Date, connection);
        }
        
        public string SD_Data(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.SD_Data(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> SD_DataAsync(string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.SD_DataAsync(UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string VAT19NewNewformat(string PeriodName, string ExportInBDT, string connection) {
            return base.Channel.VAT19NewNewformat(PeriodName, ExportInBDT, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT19NewNewformatAsync(string PeriodName, string ExportInBDT, string connection) {
            return base.Channel.VAT19NewNewformatAsync(PeriodName, ExportInBDT, connection);
        }
        
        public string VAT18Breakdown(string PeriodName, string ExportInBDT, string connection) {
            return base.Channel.VAT18Breakdown(PeriodName, ExportInBDT, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT18BreakdownAsync(string PeriodName, string ExportInBDT, string connection) {
            return base.Channel.VAT18BreakdownAsync(PeriodName, ExportInBDT, connection);
        }
        
        public string RepFormKaTradingNew(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.RepFormKaTradingNew(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public System.Threading.Tasks.Task<string> RepFormKaTradingNewAsync(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string connection) {
            return base.Channel.RepFormKaTradingNewAsync(ItemNo, UserName, StartDate, EndDate, post1, post2, connection);
        }
        
        public string VAT24(string ddbackno, string ddbFinishItemNo, string SalesInvoiceNo, string connection) {
            return base.Channel.VAT24(ddbackno, ddbFinishItemNo, SalesInvoiceNo, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT24Async(string ddbackno, string ddbFinishItemNo, string SalesInvoiceNo, string connection) {
            return base.Channel.VAT24Async(ddbackno, ddbFinishItemNo, SalesInvoiceNo, connection);
        }
        
        public string VAT22(string ddbackno, string connection) {
            return base.Channel.VAT22(ddbackno, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT22Async(string ddbackno, string connection) {
            return base.Channel.VAT22Async(ddbackno, connection);
        }
        
        public string VATDDB(string ddbackno, string salesInvoice, string connection) {
            return base.Channel.VATDDB(ddbackno, salesInvoice, connection);
        }
        
        public System.Threading.Tasks.Task<string> VATDDBAsync(string ddbackno, string salesInvoice, string connection) {
            return base.Channel.VATDDBAsync(ddbackno, salesInvoice, connection);
        }
        
        public string PurchaseMis(string PurchaseId, int BranchId, string VatType, string connection) {
            return base.Channel.PurchaseMis(PurchaseId, BranchId, VatType, connection);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseMisAsync(string PurchaseId, int BranchId, string VatType, string connection) {
            return base.Channel.PurchaseMisAsync(PurchaseId, BranchId, VatType, connection);
        }
        
        public string SaleMis(string SaleId, string ShiftId, int BranchId, string VatType, string connection) {
            return base.Channel.SaleMis(SaleId, ShiftId, BranchId, VatType, connection);
        }
        
        public System.Threading.Tasks.Task<string> SaleMisAsync(string SaleId, string ShiftId, int BranchId, string VatType, string connection) {
            return base.Channel.SaleMisAsync(SaleId, ShiftId, BranchId, VatType, connection);
        }
        
        public string IssueMis(string IssueId, int BranchId, string connection) {
            return base.Channel.IssueMis(IssueId, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> IssueMisAsync(string IssueId, int BranchId, string connection) {
            return base.Channel.IssueMisAsync(IssueId, BranchId, connection);
        }
        
        public string ReceiveMis(string ReceiveId, string ShiftId, int BranchId, string connection) {
            return base.Channel.ReceiveMis(ReceiveId, ShiftId, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> ReceiveMisAsync(string ReceiveId, string ShiftId, int BranchId, string connection) {
            return base.Channel.ReceiveMisAsync(ReceiveId, ShiftId, BranchId, connection);
        }
        
        public string SaleReceiveMIS(string StartDate, string EndDate, string ShiftId, string Post, string connection) {
            return base.Channel.SaleReceiveMIS(StartDate, EndDate, ShiftId, Post, connection);
        }
        
        public System.Threading.Tasks.Task<string> SaleReceiveMISAsync(string StartDate, string EndDate, string ShiftId, string Post, string connection) {
            return base.Channel.SaleReceiveMISAsync(StartDate, EndDate, ShiftId, Post, connection);
        }
        
        public string VAT1KaNew(string FinishItemNo, string EffectDate, string VATName, string connection) {
            return base.Channel.VAT1KaNew(FinishItemNo, EffectDate, VATName, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT1KaNewAsync(string FinishItemNo, string EffectDate, string VATName, string connection) {
            return base.Channel.VAT1KaNewAsync(FinishItemNo, EffectDate, VATName, connection);
        }
        
        public string VAT1GaNew(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection) {
            return base.Channel.VAT1GaNew(FinishItemNo, EffectDate, VATName, IsPercent, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT1GaNewAsync(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection) {
            return base.Channel.VAT1GaNewAsync(FinishItemNo, EffectDate, VATName, IsPercent, connection);
        }
        
        public string VAT1GhaNew(string finishitemno, string EffectDate, string VATName, string connection) {
            return base.Channel.VAT1GhaNew(finishitemno, EffectDate, VATName, connection);
        }
        
        public System.Threading.Tasks.Task<string> VAT1GhaNewAsync(string finishitemno, string EffectDate, string VATName, string connection) {
            return base.Channel.VAT1GhaNewAsync(finishitemno, EffectDate, VATName, connection);
        }
        
        public string FormKaNew(string FinishItemNo, string EffectDate, string VATName, string connection) {
            return base.Channel.FormKaNew(FinishItemNo, EffectDate, VATName, connection);
        }
        
        public System.Threading.Tasks.Task<string> FormKaNewAsync(string FinishItemNo, string EffectDate, string VATName, string connection) {
            return base.Channel.FormKaNewAsync(FinishItemNo, EffectDate, VATName, connection);
        }
        
        public string BOMNew_withFNo(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection) {
            return base.Channel.BOMNew_withFNo(FinishItemNo, EffectDate, VATName, IsPercent, connection);
        }
        
        public System.Threading.Tasks.Task<string> BOMNew_withFNoAsync(string FinishItemNo, string EffectDate, string VATName, string IsPercent, string connection) {
            return base.Channel.BOMNew_withFNoAsync(FinishItemNo, EffectDate, VATName, IsPercent, connection);
        }
        
        public string BOMNew(string BOMId, string VATName, string IsPercent, int BranchId, string connection) {
            return base.Channel.BOMNew(BOMId, VATName, IsPercent, BranchId, connection);
        }
        
        public System.Threading.Tasks.Task<string> BOMNewAsync(string BOMId, string VATName, string IsPercent, int BranchId, string connection) {
            return base.Channel.BOMNewAsync(BOMId, VATName, IsPercent, BranchId, connection);
        }
        
        public string BOMDownload(string connection) {
            return base.Channel.BOMDownload(connection);
        }
        
        public System.Threading.Tasks.Task<string> BOMDownloadAsync(string connection) {
            return base.Channel.BOMDownloadAsync(connection);
        }
        
        public string VATDisposeDsNew(string DisposeNumber, string connection) {
            return base.Channel.VATDisposeDsNew(DisposeNumber, connection);
        }
        
        public System.Threading.Tasks.Task<string> VATDisposeDsNewAsync(string DisposeNumber, string connection) {
            return base.Channel.VATDisposeDsNewAsync(DisposeNumber, connection);
        }
        
        public string BankNew(string BankID, string connection) {
            return base.Channel.BankNew(BankID, connection);
        }
        
        public System.Threading.Tasks.Task<string> BankNewAsync(string BankID, string connection) {
            return base.Channel.BankNewAsync(BankID, connection);
        }
        
        public string CustomerGroupNew(string CustomerGroupID, string connection) {
            return base.Channel.CustomerGroupNew(CustomerGroupID, connection);
        }
        
        public System.Threading.Tasks.Task<string> CustomerGroupNewAsync(string CustomerGroupID, string connection) {
            return base.Channel.CustomerGroupNewAsync(CustomerGroupID, connection);
        }
        
        public string CustomerNew(string CustomerID, string CustomerGroupID, string connection) {
            return base.Channel.CustomerNew(CustomerID, CustomerGroupID, connection);
        }
        
        public System.Threading.Tasks.Task<string> CustomerNewAsync(string CustomerID, string CustomerGroupID, string connection) {
            return base.Channel.CustomerNewAsync(CustomerID, CustomerGroupID, connection);
        }
    }
}
