using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using SymphonySofttech.Utilities;
using VATViewModel.DTOs;
using VATServer.Ordinary;
using System.IO;
using Excel;
using System.Reflection;
using VATServer.Interface;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Globalization;
using System.Xml;

namespace VATServer.Library
{
    public class PurchaseDAL : IPurchase
    {
        #region Global Variables

        private DBSQLConnection _dbsqlConnection = new DBSQLConnection();
        private const string FieldDelimeter = DBConstant.FieldDelimeter;
        CommonDAL _cDal = new CommonDAL();
        ProductDAL _ProductDAL = new ProductDAL();

        private DataTable DtPurchaseD;

        #endregion

        #region Navigation

        public NavigationVM Purchase_Navigation(NavigationVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";

            #endregion

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Check Point

                if (vm.FiscalYear == 0)
                {
                    DateTime now = DateTime.Now;
                    string startDate = new DateTime(now.Year, now.Month, 1).ToString("yyyy-MMM-dd");
                    FiscalYearVM varFiscalYearVM = new FiscalYearDAL().SelectAll(0, new[] { "PeriodStart" }, new[] { startDate }, currConn, transaction, connVM).FirstOrDefault();
                    if (string.IsNullOrWhiteSpace(varFiscalYearVM.PeriodID))
                    {
                        throw new ArgumentNullException("Fiscal Year Not Available for Date: " + now);
                    }

                    vm.FiscalYear = Convert.ToInt32(varFiscalYearVM.CurrentYear);

                }


                #endregion

                #region SQL Statement

                #region SQL Text

                sqlText = "";
                sqlText = @"
------declare @Id as int = 16530;
------declare @FiscalYear as int = 2021;
------declare @TransactionType as varchar(50) = 'Other';
------declare @BranchId as int = 1;

";
                if (vm.ButtonName == "Current")
                {
                    #region Current Item

                    sqlText = sqlText + @"
--------------------------------------------------Current--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.PurchaseInvoiceNo InvoiceNo from PurchaseInvoiceHeaders inv
where 1=1 
and inv.PurchaseInvoiceNo=@InvoiceNo

";
                    #endregion
                }
                else if (vm.Id == 0 || vm.ButtonName == "First")
                {

                    #region First Item

                    sqlText = sqlText + @"
--------------------------------------------------First--------------------------------------------------
---------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.PurchaseInvoiceNo InvoiceNo from PurchaseInvoiceHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
order by Id asc

";
                    #endregion

                }
                else if (vm.ButtonName == "Last")
                {

                    #region Last Item

                    sqlText = sqlText + @"
--------------------------------------------------Last--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.PurchaseInvoiceNo InvoiceNo from PurchaseInvoiceHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
order by Id desc


";
                    #endregion

                }
                else if (vm.ButtonName == "Next")
                {

                    #region Next Item

                    sqlText = sqlText + @"
--------------------------------------------------Next--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.PurchaseInvoiceNo InvoiceNo from PurchaseInvoiceHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
and Id > @Id
order by Id asc

";
                    #endregion

                }
                else if (vm.ButtonName == "Previous")
                {
                    #region Previous Item

                    sqlText = sqlText + @"
--------------------------------------------------Previous--------------------------------------------------
------------------------------------------------------------------------------------------------------------
select top 1 inv.Id, inv.PurchaseInvoiceNo InvoiceNo from PurchaseInvoiceHeaders inv
where 1=1 
and FiscalYear=@FiscalYear
and TransactionType =@TransactionType
and BranchId = @BranchId
and Id < @Id
order by Id desc

";
                    #endregion
                }


                #endregion

                #region SQL Execution
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                if (vm.ButtonName == "Current")
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", vm.InvoiceNo);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@FiscalYear", vm.FiscalYear);
                    cmd.Parameters.AddWithValue("@TransactionType", vm.TransactionType);
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);

                    if (vm.Id > 0)
                    {
                        cmd.Parameters.AddWithValue("@Id", vm.Id);
                    }
                }



                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                if (dt != null && dt.Rows.Count > 0)
                {
                    vm.Id = Convert.ToInt32(dt.Rows[0]["Id"]);
                    vm.InvoiceNo = dt.Rows[0]["InvoiceNo"].ToString();
                }
                else
                {
                    if (vm.ButtonName == "Previous" || vm.ButtonName == "Current")
                    {
                        vm.ButtonName = "First";
                        vm = Purchase_Navigation(vm, currConn, transaction, connVM);

                    }
                    else if (vm.ButtonName == "Next")
                    {
                        vm.ButtonName = "Last";
                        vm = Purchase_Navigation(vm, currConn, transaction, connVM);

                    }
                }


                #endregion

                #endregion

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region catch

            catch (Exception ex)
            {

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "Purchase_Navigation", ex.ToString() + "\n" + sqlText, "Purchase");

                throw new ArgumentNullException("", ex.Message.ToString());
            }

            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return vm;

        }


        #endregion

        #region Search Methods

        public DataTable SearchPurchaseDutyDTNew(string PurchaseInvoiceNo, SysDBInfoVMTemp connVM = null, string ItemNo = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null)
        {

            #region Variables

            ////SqlConnection currConn = null;
            //////int transResult = 0;
            //////int countId = 0;
            string sqlText = "";

            DataTable dataTable = new DataTable("Duty");

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            try
            {
                #region open connection and transaction

                //////currConn = _dbsqlConnection.GetConnection(connVM);
                //////if (currConn.State != ConnectionState.Open)
                //////{
                //////    currConn.Open();
                //////}
                //////CommonDAL commonDal = new CommonDAL();
                ////////commonDal.TableFieldAdd("PurchaseInvoiceDuties", "ItemNo", "varchar(20)", currConn);
                ////////commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantity", "decimal(25, 9)", currConn);
                ////////commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantityPercent", "decimal(25, 9)", currConn);
                ////////commonDal.TableFieldAdd("PurchaseInvoiceDuties", "LineCost", "decimal(25, 9)", currConn);
                ////////commonDal.TableFieldAdd("PurchaseInvoiceDuties", "UnitCost", "decimal(25, 9)", currConn);
                ////////commonDal.TableFieldAdd("PurchaseInvoiceDuties", "Quantity", "decimal(25, 9)", currConn);
                #endregion open connection and transaction

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"SELECT isnull(pid.ItemNo,'0')ItemNo,
isnull(PID.CnFInp,0)CnFInp,
 isnull(PID.CnFRate,0)CnFRate,
isnull( PID.CnFAmount,0)CnFAmount, isnull(PID.InsuranceInp,0)InsuranceInp,
isnull(PID.InsuranceRate,0)InsuranceRate, isnull(PID.InsuranceAmount,0)InsuranceAmount,
       isnull(PID.AssessableInp,0)AssessableInp, isnull(PID.AssessableValue,0)AssessableValue, isnull(PID.CDInp,0)CDInp, 
       isnull(PID.CDRate,0)CDRate, isnull(PID.CDAmount,0)CDAmount, isnull(PID.RDInp,0)RDInp, isnull(PID.RDRate,0)RDRate,
       isnull(PID.RDAmount,0)RDAmount, isnull(PID.TVBInp,0)TVBInp, isnull(PID.TVBRate,0)TVBRate, isnull(PID.TVBAmount,0)TVBAmount,
       isnull(PID.SDInp,0)SDInp, isnull(PID.SD,0)SD, isnull(PID.SDAmount,0)SDAmount, isnull(PID.VATInp,0)VATInp, isnull(PID.VATRate,0)VATRate,
       isnull(PID.VATAmount,0)VATAmount, isnull(PID.TVAInp,0)TVAInp, isnull(PID.TVARate,0)TVARate, isnull(PID.TVAAmount,0)TVAAmount,
        isnull(PID.ATVInp,0)ATVInp, isnull(PID.ATVRate,0)ATVRate, isnull(PID.ATVAmount,0)ATVAmount,
       isnull(PID.OthersInp,0)OthersInp, isnull(PID.OthersRate,0)OthersRate,isnull(PID.OthersAmount,0)OthersAmount,
       isnull(PID.AITInp,0)AITInp ,isnull(PID.AITAmount,0)AITAmount,
        ISNULL(NULLIF(Remarks,''),'NA')Remarks,isnull(Products.ProductCode,'N/A')ProductCode,
isnull(Products.ProductName,'N/A')ProductName
  FROM PurchaseInvoiceDuties PID left outer JOIN
  Products on isnull(PID.ItemNo,0)=Products.ItemNo                                     
WHERE (PID.PurchaseInvoiceNo = @PurchaseInvoiceNo)

";
                if (!string.IsNullOrWhiteSpace(ItemNo))
                {
                    sqlText += @" and pid.ItemNo=@ItemNo";

                }
                sqlText += @" order by ItemNo";

                SqlCommand objCommPurchaseDetail = new SqlCommand();
                objCommPurchaseDetail.Connection = currConn;
                objCommPurchaseDetail.CommandText = sqlText;
                objCommPurchaseDetail.CommandType = CommandType.Text;
                objCommPurchaseDetail.Transaction = transaction;

                if (!objCommPurchaseDetail.Parameters.Contains("@PurchaseInvoiceNo"))
                {
                    objCommPurchaseDetail.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);
                }
                else
                {
                    objCommPurchaseDetail.Parameters["@PurchaseInvoiceNo"].Value = PurchaseInvoiceNo;
                }
                if (!string.IsNullOrWhiteSpace(ItemNo))
                {
                    objCommPurchaseDetail.Parameters.AddWithValue("@ItemNo", ItemNo);
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseDetail);
                dataAdapter.Fill(dataTable);

                #endregion

            }

            #region catch
            catch (SqlException sqlex)
            {

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //throw sqlex;

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseDutyDTNew", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseDutyDTNew", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

                ////if (currConn != null)
                ////{
                ////    if (currConn.State == ConnectionState.Open)
                ////    {
                ////        currConn.Close();
                ////    }
                ////}
            }

            #endregion

            return dataTable;
        }
        public DataTable SearchPurchaseDutyDTNewFromTemp(string PurchaseInvoiceNo, SysDBInfoVMTemp connVM = null, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                #region SqlText

                sqlText = @"
SELECT isnull(pid.ItemNo,'0')ItemNo,
0CnFInp,
 0CnFRate,
0CnFAmount, 
0InsuranceInp,
0InsuranceRate, 
0InsuranceAmount,
       0AssessableInp,
	   0AssessableValue, 
	   0CDInp, 
       0CDRate,
	   0CDAmount,
	   0RDInp,
	   0RDRate,
       0RDAmount,
	   0TVBInp, 
	   0TVBRate, 
	   0TVBAmount,
       0SDInp, 
	   0SD, 
	   0SDAmount, 
	   0VATInp,
	   0VATRate,
       0VATAmount,
	   0TVAInp,
	   0TVARate, 
	   0TVAAmount,
        0ATVInp,
		0ATVRate,
		0ATVAmount,
       0OthersInp, 
	   0OthersRate,
	   0OthersAmount,
       0 AITInp ,

	   isnull(PID.AITAmount,0)AITAmount,
        ISNULL(NULLIF(Remarks,''),'NA')Remarks,
		isnull(Products.ProductCode,'N/A')ProductCode,
isnull(Products.ProductName,'N/A')ProductName
  FROM TempPurchaseData PID left outer JOIN
  Products on isnull(PID.ItemNo,0)=Products.ItemNo   
WHERE  1=1

";

                if (PurchaseInvoiceNo != null)
                {
                    sqlText += "AND PID.Id=@PurchaseInvoiceNo";
                }
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }
                #endregion SqlText
                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (PurchaseInvoiceNo != null)
                {
                    da.SelectCommand.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);
                }

                da.Fill(dt);

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch

            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }


        public DataTable SearchPurchaseDutyDTDownload(string PurchaseInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataTable dataTable = new DataTable("Duty");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();
                #endregion open connection and transaction

                #region sql statement

                sqlText = @"SELECT 
PID.PurchaseInvoiceNo ID
,PIH.InvoiceDateTime
,isnull(Products.ProductCode,'N/A')Item_Code
,isnull(Products.ProductName,'N/A')Item_Name
,isnull( PID.CnFAmount,0)CnF_Amount 
, isnull(PID.InsuranceAmount,0)Insurance_Amount
, isnull(PID.AssessableValue,0)Assessable_Value
, isnull(PID.CDAmount,0)CD_Amount
,isnull(PID.RDAmount,0)RD_Amount
, isnull(PID.TVBAmount,0)TVB_Amount
, isnull(PID.SDAmount,0)SD_Amount
,isnull(PID.VATAmount,0)VAT_Amount
, isnull(PID.TVAAmount,0)TVA_Amount
, isnull(PID.ATVAmount,0)ATV_Amount
,isnull(PID.OthersAmount,0)Others_Amount
,isnull(PId.AssessableValue,0)Total_Price
,isnull(PID.Quantity,0)Quantity
,ISNULL(NULLIF(Remarks,''),'NA')Remarks
FROM PurchaseInvoiceDuties PID left outer JOIN
  PurchaseInvoiceHeaders PIH  on PID.PurchaseInvoiceNo=pih.PurchaseInvoiceNo left outer JOIN
Products on isnull(PID.ItemNo,0)=Products.ItemNo                                 

WHERE  1=1

";

                sqlText += " and (PID.PurchaseInvoiceNo LIKE '%' +  @PurchaseInvoiceNo + '%' OR @PurchaseInvoiceNo IS NULL) ";
                sqlText += " AND (PIH.ReceiveDate >= @InvoiceDateFrom OR @InvoiceDateFrom IS NULL)";
                sqlText += " AND (PIH.ReceiveDate <= @InvoiceDateTo OR @InvoiceDateTo IS NULL) ";

                SqlCommand objCommPurchaseDetail = new SqlCommand();
                objCommPurchaseDetail.Connection = currConn;
                objCommPurchaseDetail.CommandText = sqlText;
                objCommPurchaseDetail.CommandType = CommandType.Text;

                if (!objCommPurchaseDetail.Parameters.Contains("@PurchaseInvoiceNo"))
                { objCommPurchaseDetail.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo); }
                else { objCommPurchaseDetail.Parameters["@PurchaseInvoiceNo"].Value = PurchaseInvoiceNo; }

                if (InvoiceDateFrom == "")
                {
                    if (!objCommPurchaseDetail.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommPurchaseDetail.Parameters.AddWithValue("@InvoiceDateFrom", System.DBNull.Value); }
                    else { objCommPurchaseDetail.Parameters["@InvoiceDateFrom"].Value = System.DBNull.Value; }
                }
                else
                {

                    if (!objCommPurchaseDetail.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommPurchaseDetail.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommPurchaseDetail.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }
                }
                if (InvoiceDateTo == "")
                {
                    if (!objCommPurchaseDetail.Parameters.Contains("@InvoiceDateTo"))
                    { objCommPurchaseDetail.Parameters.AddWithValue("@InvoiceDateTo", System.DBNull.Value); }
                    else { objCommPurchaseDetail.Parameters["@InvoiceDateTo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommPurchaseDetail.Parameters.Contains("@InvoiceDateTo"))
                    { objCommPurchaseDetail.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommPurchaseDetail.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseDetail);
                dataAdapter.Fill(dataTable);

                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //throw sqlex;

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseDutyDTDownload", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseDutyDTDownload", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion
            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;
        }

        public DataTable SearchProductbyPurchaseInvoice(string purchaseInvoiceNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataTable dataTable = new DataTable();

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                CommonDAL commonDal = new CommonDAL();
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "ItemNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantityPercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "LineCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "UnitCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "Quantity", "decimal(25, 9)", currConn);

                #endregion open connection and transaction

                #region sql statement



                sqlText = "";
                sqlText += @"

SELECT pu.[PurchaseInvoiceNo]
	  ,pr.[ProductCode]
	  ,pr.[ProductName] 
      ,pu.[ItemNo]
      ,pu.[Quantity]   
      ,pu.[UOM]
      ,pu.[CostPrice]
      ,pu.[SubTotal]
      ,ISNULL(pu.[CDAmount], 0)CDAmount
      ,ISNULL(pu.[RDAmount], 0)RDAmount
      ,ISNULL(pu.[SDAmount], 0)SDAmount
      ,ISNULL(pu.[VATAmount], 0)VATAmount
      ,ISNULL(pu.[CnFAmount], 0)CnFAmount
      ,ISNULL(pu.[InsuranceAmount], 0)InsuranceAmount
      ,ISNULL(pu.[TVBAmount], 0)TVBAmount
      ,ISNULL(pu.[TVAAmount], 0)TVAAmount
      ,ISNULL(pu.[ATVAmount], 0)ATVAmount
      ,ISNULL(pu.[OthersAmount], 0)OthersAmount
      ,ISNULL(pu.[USDValue], 0)USDValue
      ,ISNULL(pu.[USDVAT],   0)USDVAT
      ,ISNULL(pu.ExpireDate,  '2100-01-01')ExpireDate
      ,ISNULL(pu.CPCName,  '-')CPCName
      ,ISNULL(pu.BEItemNo,  '-')BEItemNo
      ,ISNULL(pu.HSCode,  '-')HSCode
      ,ISNULL(pu.Section21,  '-')Section21
  FROM PurchaseInvoiceDetails pu,
Products pr
where pu.[ItemNo]=pr.[ItemNo]
and pu.PurchaseInvoiceNo=@purchaseInvoiceNo

";

                SqlCommand objCommProduct = new SqlCommand();
                objCommProduct.Connection = currConn;
                objCommProduct.CommandText = sqlText;
                objCommProduct.CommandType = CommandType.Text;



                if (!objCommProduct.Parameters.Contains("@purchaseInvoiceNo"))
                { objCommProduct.Parameters.AddWithValue("@purchaseInvoiceNo", purchaseInvoiceNo); }
                else { objCommProduct.Parameters["@purchaseInvoiceNo"].Value = purchaseInvoiceNo; }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProduct);
                dataAdapter.Fill(dataTable);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchProductbyPurchaseInvoice", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //throw sqlex;
            }
            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchProductbyPurchaseInvoice", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            #endregion
            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }

        public DataTable SearchPurchaseInvoiceTracking(string purchaseInvoiceNo, string itemNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataTable dataTable = new DataTable();

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement



                sqlText = "";
                sqlText += @"

SELECT t.[PurchaseInvoiceNo]
      ,pr.[ProductCode]
	  ,pr.[ProductName] 
      ,t.[ItemNo]
	  ,t.[Heading1]
      ,t.[Heading2]
      ,t.[Quantity]
      ,t.[IsPurchase]
      ,t.[Post]
	  ,t.ReturnPurchase
	  ,t.ReturnPurchaseID
	  ,t.ReturnReceive
	  ,t.ReturnReceiveID
	  ,t.ReturnSale
	  ,t.ReturnSaleID
	  ,t.ReturnType
      ,ISNULL(t.[UnitPrice],0) UnitPrice

FROM Trackings t,
Products pr
where t.[ItemNo]=pr.[ItemNo]
and t.PurchaseInvoiceNo=@purchaseInvoiceNo
and t.ItemNo=@itemNo
";

                SqlCommand objCommProduct = new SqlCommand();
                objCommProduct.Connection = currConn;
                objCommProduct.CommandText = sqlText;
                objCommProduct.CommandType = CommandType.Text;



                if (!objCommProduct.Parameters.Contains("@purchaseInvoiceNo"))
                { objCommProduct.Parameters.AddWithValue("@purchaseInvoiceNo", purchaseInvoiceNo); }
                else { objCommProduct.Parameters["@purchaseInvoiceNo"].Value = purchaseInvoiceNo; }

                if (string.IsNullOrEmpty(itemNo))
                {
                    if (!objCommProduct.Parameters.Contains("@itemNo"))
                    { objCommProduct.Parameters.AddWithValue("@itemNo", System.DBNull.Value); }
                    else { objCommProduct.Parameters["@itemNo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommProduct.Parameters.Contains("@itemNo"))
                    { objCommProduct.Parameters.AddWithValue("@itemNo", itemNo); }
                    else { objCommProduct.Parameters["@itemNo"].Value = itemNo; }
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProduct);
                dataAdapter.Fill(dataTable);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseInvoiceTracking", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //throw sqlex;
            }
            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseInvoiceTracking", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;

        }

        public DataTable SearchPurchaseHeaderDTNew2(string PurchaseInvoiceNo, string WithVDS, string VendorName, string VendorGroupID, string VendorGroupName
            , string InvoiceDateFrom, string InvoiceDateTo, string SerialNo, string T1Type, string T2Type, string BENumber, string Post, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataTable dataTable = new DataTable("ProductType1");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "ItemNo", "varchar(20)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantity", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "DutyCompleteQuantityPercent", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "LineCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "UnitCost", "decimal(25, 9)", currConn);
                //commonDal.TableFieldAdd("PurchaseInvoiceDuties", "Quantity", "decimal(25, 9)", currConn);
                #endregion open connection and transaction

                #region sql statement

                sqlText += " SELECT";
                sqlText += " PurchaseInvoiceHeaders.PurchaseInvoiceNo,   ";
                sqlText += " PurchaseInvoiceHeaders.VendorID,";
                sqlText += " isnull(PurchaseInvoiceHeaders.CustomHouse,'N/A')CustomHouse,";
                sqlText += " isnull(PurchaseInvoiceHeaders.CustomCode,'N/A')CustomCode,";
                sqlText += " isnull(Vendors.VendorName,'N/A')VendorName,";
                sqlText += " Vendors.VendorGroupID,";
                sqlText += " isnull(VendorGroups.VendorGroupName,'N/A')VendorGroupName,";
                sqlText += " convert (varchar,PurchaseInvoiceHeaders.InvoiceDateTime,120)InvoiceDateTime,";
                sqlText += " isnull(PurchaseInvoiceHeaders.TotalAmount,0)TotalAmount,";
                sqlText += " isnull(PurchaseInvoiceHeaders.TotalVATAmount,0)TotalVATAmount,";
                sqlText += " isnull(PurchaseInvoiceHeaders.SerialNo,'N/A')SerialNo,";
                sqlText += " isnull(PurchaseInvoiceHeaders.LCNumber,'N/A')LCNumber,";
                sqlText += " isnull(PurchaseInvoiceHeaders.Comments,'N/A')Comments,";
                sqlText += " PurchaseInvoiceHeaders.ProductType,PurchaseInvoiceHeaders.Post,";
                sqlText += " PurchaseInvoiceHeaders.PurchaseReturnId,";
                sqlText += " PurchaseInvoiceHeaders.WithVDS,";
                sqlText += " convert (varchar,PurchaseInvoiceHeaders.ReceiveDate,120)ReceiveDate,";
                sqlText += " isnull(PurchaseInvoiceHeaders.BENumber,'N/A')BENumber,";
                sqlText += " isnull(PurchaseInvoiceHeaders.TDSAmount,0)TDSAmount,";

                sqlText += " PurchaseInvoiceHeaders.LCDate,";
                sqlText += " isnull(PurchaseInvoiceHeaders.LandedCost,0)LandedCost";

                sqlText += " FROM PurchaseInvoiceHeaders LEFT OUTER JOIN";
                sqlText += " Vendors ON  PurchaseInvoiceHeaders.VendorID =  Vendors.VendorID LEFT OUTER JOIN";
                sqlText += " VendorGroups ON  Vendors.VendorGroupID =  VendorGroups.VendorGroupID                 ";
                sqlText += " WHERE ";
                sqlText += "     (PurchaseInvoiceHeaders.PurchaseInvoiceNo LIKE '%' +  @PurchaseInvoiceNo + '%' OR @PurchaseInvoiceNo IS NULL) ";
                sqlText += " AND (PurchaseInvoiceHeaders.WithVDS  LIKE '%' + @WithVDS  + '%' OR @WithVDS IS NULL) ";
                sqlText += " AND (Vendors.VendorName LIKE '%' + @VendorName + '%' OR @VendorName IS NULL) ";
                sqlText += " AND (Vendors.VendorGroupID LIKE '%' + @VendorGroupID + '%' OR @VendorGroupID IS NULL)";
                sqlText += " AND (VendorGroups.VendorGroupName LIKE '%' + @VendorGroupName + '%' OR @VendorGroupName IS NULL) ";
                sqlText += " AND (PurchaseInvoiceHeaders.InvoiceDateTime>= @InvoiceDateFrom OR @InvoiceDateFrom IS NULL)";
                sqlText += " AND (PurchaseInvoiceHeaders.InvoiceDateTime<= @InvoiceDateTo OR @InvoiceDateTo IS NULL)";
                sqlText += " AND (PurchaseInvoiceHeaders.SerialNo LIKE '%' + @SerialNo + '%' OR @SerialNo IS NULL) ";
                sqlText += " AND (PurchaseInvoiceHeaders.TransactionType=@T1Type)";
                sqlText += " OR (PurchaseInvoiceHeaders.TransactionType=@T2Type)";
                sqlText += " AND (PurchaseInvoiceHeaders.BENumber LIKE '%' + @BENumber + '%' OR @BENumber IS NULL) ";
                sqlText += " AND (PurchaseInvoiceHeaders.Post LIKE '%' + @Post  + '%' OR @Post IS NULL) ";

                SqlCommand objCommPurchaseHeader = new SqlCommand();
                objCommPurchaseHeader.Connection = currConn;
                objCommPurchaseHeader.CommandText = sqlText;
                objCommPurchaseHeader.CommandType = CommandType.Text;

                #region Parameter

                if (!objCommPurchaseHeader.Parameters.Contains("@PurchaseInvoiceNo"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo); }
                else { objCommPurchaseHeader.Parameters["@PurchaseInvoiceNo"].Value = PurchaseInvoiceNo; }
                if (!objCommPurchaseHeader.Parameters.Contains("@Post"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@Post", Post); }
                else { objCommPurchaseHeader.Parameters["@Post"].Value = Post; }

                if (!objCommPurchaseHeader.Parameters.Contains("@WithVDS"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@WithVDS", WithVDS); }
                else { objCommPurchaseHeader.Parameters["@WithVDS"].Value = WithVDS; }
                if (!objCommPurchaseHeader.Parameters.Contains("@VendorName"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@VendorName", VendorName); }
                else { objCommPurchaseHeader.Parameters["@VendorName"].Value = VendorName; }
                if (!objCommPurchaseHeader.Parameters.Contains("@VendorGroupID"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@VendorGroupID", VendorGroupID); }
                else { objCommPurchaseHeader.Parameters["@VendorGroupID"].Value = VendorGroupID; }
                if (!objCommPurchaseHeader.Parameters.Contains("@VendorGroupName"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@VendorGroupName", VendorGroupName); }
                else { objCommPurchaseHeader.Parameters["@VendorGroupName"].Value = VendorGroupName; }
                if (InvoiceDateFrom == "")
                {
                    if (!objCommPurchaseHeader.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommPurchaseHeader.Parameters.AddWithValue("@InvoiceDateFrom", System.DBNull.Value); }
                    else { objCommPurchaseHeader.Parameters["@InvoiceDateFrom"].Value = System.DBNull.Value; }
                }
                else
                {

                    if (!objCommPurchaseHeader.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommPurchaseHeader.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommPurchaseHeader.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }
                }
                if (InvoiceDateTo == "")
                {
                    if (!objCommPurchaseHeader.Parameters.Contains("@InvoiceDateTo"))
                    { objCommPurchaseHeader.Parameters.AddWithValue("@InvoiceDateTo", System.DBNull.Value); }
                    else { objCommPurchaseHeader.Parameters["@InvoiceDateTo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommPurchaseHeader.Parameters.Contains("@InvoiceDateTo"))
                    { objCommPurchaseHeader.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommPurchaseHeader.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }
                }

                if (!objCommPurchaseHeader.Parameters.Contains("@SerialNo"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@SerialNo", SerialNo); }
                else { objCommPurchaseHeader.Parameters["@SerialNo"].Value = SerialNo; }
                if (!objCommPurchaseHeader.Parameters.Contains("@T1Type"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@T1Type", T1Type); }
                else { objCommPurchaseHeader.Parameters["@T1Type"].Value = T2Type; }
                if (!objCommPurchaseHeader.Parameters.Contains("@T2Type"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@T2Type", T2Type); }
                else { objCommPurchaseHeader.Parameters["@T2Type"].Value = T2Type; }
                if (!objCommPurchaseHeader.Parameters.Contains("@BENumber"))
                { objCommPurchaseHeader.Parameters.AddWithValue("@BENumber", BENumber); }
                else { objCommPurchaseHeader.Parameters["@BENumber"].Value = BENumber; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseHeader);
                dataAdapter.Fill(dataTable);

                #endregion
            }

            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseHeaderDTNew2", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //throw sqlex;
            }
            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "SearchPurchaseHeaderDTNew2", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }

            #endregion
            #region finally

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataTable;
        }

        #endregion

        #region MISC Methods

        //currConn to VcurrConn 25-Aug-2020
        private List<PurchaseDutiesVM> DutyCalculation(DataRow[] ImportRaws, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region settings

            bool IsTotalPrice, FixedVAT, FixedCnF, FixedInsurance, CalculativeAV, FixedCD, FixedRD, FixedTVB, FixedTVA, FixedATV, FixedOthers, FixedSD, FixedVATImp;

            int PurchasePlaceQty;
            int PurchasePlaceAmt;
            decimal RateChangePromote;


            CommonDAL commonDal = new CommonDAL();

            string vPurchasePlaceQty, vPurchasePlaceAmt, vIsTotalPrice, vFixedVAT
                , vFixedCnF, vFixedInsurance, vCalculativeAV, vFixedCD
                , vFixedRD, vFixedTVB, vFixedSD, vFixedVATImp, vFixedTVA, vFixedATV
                , vFixedOthers, vRateChangePromotePercent
                = string.Empty;

            vPurchasePlaceQty = commonDal.settings("Purchase", "Quantity", null, null, connVM);
            vPurchasePlaceAmt = commonDal.settings("Purchase", "Amount", null, null, connVM);
            vIsTotalPrice = commonDal.settings("Purchase", "TotalPrice", null, null, connVM);
            vFixedVAT = commonDal.settings("Purchase", "FixedVAT", null, null, connVM);
            vFixedCnF = commonDal.settings("ImportPurchase", "FixedCnF", null, null, connVM);
            vFixedInsurance = commonDal.settings("ImportPurchase", "FixedInsurance", null, null, connVM);
            vCalculativeAV = commonDal.settings("ImportPurchase", "CalculativeAV", null, null, connVM);
            vFixedCD = commonDal.settings("ImportPurchase", "FixedCD", null, null, connVM);
            vFixedRD = commonDal.settings("ImportPurchase", "FixedRD", null, null, connVM);
            vFixedTVB = commonDal.settings("ImportPurchase", "FixedTVB", null, null, connVM);
            vFixedSD = commonDal.settings("ImportPurchase", "FixedSD", null, null, connVM);
            vFixedVATImp = commonDal.settings("ImportPurchase", "FixedVAT", null, null, connVM);
            vFixedTVA = commonDal.settings("ImportPurchase", "FixedTVA", null, null, connVM);
            vFixedATV = commonDal.settings("ImportPurchase", "FixedATV", null, null, connVM);
            vFixedOthers = commonDal.settings("ImportPurchase", "FixedOthers", null, null, connVM);

            vRateChangePromotePercent = commonDal.settings("Purchase", "RateChangePromote", null, null, connVM);

            RateChangePromote = Convert.ToDecimal(vRateChangePromotePercent);
            PurchasePlaceQty = Convert.ToInt32(vPurchasePlaceQty);
            PurchasePlaceAmt = Convert.ToInt32(vPurchasePlaceAmt);
            IsTotalPrice = Convert.ToBoolean(vIsTotalPrice == "Y" ? true : false);
            FixedVAT = Convert.ToBoolean(vFixedVAT == "Y" ? true : false);
            FixedCnF = Convert.ToBoolean(vFixedCnF == "Y" ? true : false);
            FixedInsurance = Convert.ToBoolean(vFixedInsurance == "Y" ? true : false);
            CalculativeAV = Convert.ToBoolean(vCalculativeAV == "Y" ? true : false);
            FixedCD = Convert.ToBoolean(vFixedCD == "Y" ? true : false);
            FixedRD = Convert.ToBoolean(vFixedRD == "Y" ? true : false);
            FixedTVB = Convert.ToBoolean(vFixedTVB == "Y" ? true : false);
            FixedTVA = Convert.ToBoolean(vFixedTVA == "Y" ? true : false);
            FixedATV = Convert.ToBoolean(vFixedATV == "Y" ? true : false);
            FixedOthers = Convert.ToBoolean(vFixedOthers == "Y" ? true : false);
            FixedSD = Convert.ToBoolean(vFixedSD == "Y" ? true : false);
            FixedVATImp = Convert.ToBoolean(vFixedVATImp == "Y" ? true : false);

            #endregion settings
            #region Declare Value

            decimal vsubTotal = 0;
            decimal vInpCnf = 0;
            decimal vInpInsurance = 0;
            decimal vInpAV = 0;
            decimal vAVAmount = 0;
            decimal vInpCD = 0;
            decimal vInpRD = 0;
            decimal vInpTVB = 0;
            decimal vInpSD = 0;
            decimal vInpVAT = 0;
            decimal vInpTVA = 0;
            decimal vInpATV = 0;
            decimal vInpOthers = 0;

            decimal vCnfRate = 0;
            decimal vInsuranceRate = 0;
            decimal vAVRate = 0;
            //decimal vAVAmount = 0;
            decimal vCDRate = 0;
            decimal vRDRate = 0;
            decimal vTVBRate = 0;
            decimal vSDRate = 0;
            decimal vVATRate = 0;
            decimal vTVARate = 0;
            decimal vATVRate = 0;
            decimal vOthersRate = 0;

            decimal vCnfAmt = 0;
            decimal vInsuranceAmt = 0;
            decimal vAVAmt = 0;
            //decimal vAVAmount = 0;
            decimal vCDAmt = 0;
            decimal vRDAmt = 0;
            decimal vTVBAmt = 0;
            decimal vSDAmt = 0;
            decimal vVATAmt = 0;
            decimal vTVAAmt = 0;
            decimal vATVAmt = 0;
            decimal vOthersAmt = 0;
            string ProductType = "";
            #endregion Declare Value

            CommonImportDAL cImport = new CommonImportDAL();
            List<PurchaseDutiesVM> purchaseDuties = new List<PurchaseDutiesVM>();
            DataTable tt = ImportRaws.CopyToDataTable();

            #region try

            try
            {

                int Icounter = 1;
                foreach (DataRow row in ImportRaws)
                {
                    string itemCode = row["Item_Code"].ToString().Trim();
                    string itemName = row["Item_Name"].ToString().Trim();
                    ProductType = row["ProductType"].ToString().Trim();
                    string itemNo = cImport.FindItemId(itemName, itemCode, VcurrConn, Vtransaction, false, "-", 1, 0, 0, null, "-");

                    #region Input Value
                    vInpCnf = Convert.ToDecimal(row["CnF_Amount"].ToString().Trim());
                    vInpInsurance = Convert.ToDecimal(row["Insurance_Amount"].ToString().Trim());

                    vInpAV = Convert.ToDecimal(row["Assessable_Value"].ToString().Trim());
                    //vAVAmount = Convert.ToDecimal(row["Item_Code"].ToString().Trim());

                    vInpCD = Convert.ToDecimal(row["CD_Amount"].ToString().Trim());
                    vInpRD = Convert.ToDecimal(row["RD_Amount"].ToString().Trim());
                    //vInpTVB = Convert.ToDecimal(row["TVB_Amount"].ToString().Trim());
                    vInpSD = Convert.ToDecimal(row["SD_Amount"].ToString().Trim());

                    vInpVAT = Convert.ToDecimal(row["VAT_Amount"].ToString().Trim());
                    //vInpTVA = Convert.ToDecimal(row["TVA_Amount"].ToString().Trim());
                    vInpATV = Convert.ToDecimal(row["AT_Amount"].ToString().Trim());
                    vInpOthers = Convert.ToDecimal(row["Others_Amount"].ToString().Trim());

                    #endregion Input Value

                    #region Retrive quantity and total price from details
                    //string vTotalAmt = DtPurchaseD.Select("ID='" + row["ID"] + "' and Item_Code='" + itemNo + "'").First()["Total_Price"].ToString();
                    //string vQuantity = DtPurchaseD.Select("ID='" + row["ID"] + "' and Item_Code='" + itemNo + "'").First()["Quantity"].ToString();
                    string vTotalAmt = "";
                    string vQuantity = "";
                    DataRow[] drDetailsRow = DtPurchaseD.Select("ID='" + row["ID"] + "'");
                    if (drDetailsRow.Length > 0)
                    {
                        foreach (DataRow detailItem in drDetailsRow)
                        {
                            string dItemNo = "";
                            if (!string.IsNullOrEmpty(detailItem["ItemNo"].ToString()))
                            {
                                dItemNo = detailItem["ItemNo"].ToString();
                            }
                            else
                            {
                                dItemNo = cImport.FindItemId(detailItem["Item_Name"].ToString(), detailItem["Item_Code"].ToString(), VcurrConn, Vtransaction, false, "-", 1, 0, 0, connVM, "-");

                            }

                            if (dItemNo == itemNo)
                            {
                                vTotalAmt = detailItem["Total_Price"].ToString();
                                vQuantity = detailItem["Quantity"].ToString();
                            }
                            else
                            {
                                if (detailItem["Total_Price"] != null && detailItem["Total_Price"] != "0")
                                {
                                    vTotalAmt = detailItem["Total_Price"].ToString();
                                }
                                else
                                {
                                    vTotalAmt = "0";
                                }
                                if (detailItem["Quantity"] != null && detailItem["Quantity"] != "0")
                                {
                                    vQuantity = detailItem["Quantity"].ToString();
                                }
                                else
                                {
                                    vQuantity = "0";
                                }

                            }
                        }
                    }

                    vsubTotal = Convert.ToDecimal(vTotalAmt);

                    #endregion Retrive quantity and total price from details

                    #region InputValue

                    //if (!string.IsNullOrEmpty(txtCnFInpValue.Text.Trim()))
                    //    vInpCnf = Convert.ToDecimal(txtCnFInpValue.Text.Trim());
                    //else
                    //    vInpCnf = 0;

                    //if (!string.IsNullOrEmpty(txtInsInpValue.Text.Trim()))
                    //    vInpInsurance = Convert.ToDecimal(txtInsInpValue.Text.Trim());
                    //else
                    //    vInpInsurance = 0;

                    //if (!string.IsNullOrEmpty(txtAVInpValue.Text.Trim()))
                    //    vInpAV = Convert.ToDecimal(txtAVInpValue.Text.Trim());
                    //else
                    //    vInpAV = 0;

                    //if (!string.IsNullOrEmpty(txtCDInpValue.Text.Trim()))
                    //    vInpCD = Convert.ToDecimal(txtCDInpValue.Text.Trim());
                    //else
                    //    vInpCD = 0;



                    //if (!string.IsNullOrEmpty(txtRDInpValue.Text.Trim()))
                    //    vInpRD = Convert.ToDecimal(txtRDInpValue.Text.Trim());
                    //else
                    //    vInpRD = 0;

                    //if (!string.IsNullOrEmpty(txtTVBInpValue.Text.Trim()))
                    //    vInpTVB = Convert.ToDecimal(txtTVBInpValue.Text.Trim());
                    //else
                    //    vInpTVB = 0;

                    //if (!string.IsNullOrEmpty(txtSDInpValue.Text.Trim()))
                    //    vInpSD = Convert.ToDecimal(txtSDInpValue.Text.Trim());
                    //else
                    //    vInpSD = 0;

                    //if (!string.IsNullOrEmpty(txtVATInpValue.Text.Trim()))
                    //    vInpVAT = Convert.ToDecimal(txtVATInpValue.Text.Trim());
                    //else
                    //    vInpVAT = 0;

                    //if (!string.IsNullOrEmpty(txtTVAInpValue.Text.Trim()))
                    //    vInpTVA = Convert.ToDecimal(txtTVAInpValue.Text.Trim());
                    //else
                    //    vInpTVA = 0;



                    //if (!string.IsNullOrEmpty(txtATVInpValue.Text.Trim()))
                    //    vInpATV = Convert.ToDecimal(txtATVInpValue.Text.Trim());
                    //else
                    //    vInpATV = 0;

                    //if (!string.IsNullOrEmpty(txtOthersInpValue.Text.Trim()))
                    //    vInpOthers = Convert.ToDecimal(txtOthersInpValue.Text.Trim());
                    //else
                    //    vInpOthers = 0;
                    #endregion InputValue

                    #region FixedCnF
                    if (FixedCnF == true)
                    {
                        //txtCnFAmount.Text = vInpCnf.ToString();
                        //txtCnFRate.Text = Convert.ToString(vInpCnf * 100 / vsubTotal);
                        vCnfAmt = vInpCnf;
                        if (ProductType == "P")
                        {
                            vCnfRate = 0;
                        }
                        else
                        {
                            vCnfRate = vInpCnf * 100 / vsubTotal;

                        }
                    }
                    else
                    {
                        //txtCnFAmount.Text = Convert.ToString(vsubTotal * vInpCnf / 100);
                        //txtCnFRate.Text = vInpCnf.ToString();
                        vCnfAmt = vsubTotal * vInpCnf / 100;
                        vCnfRate = vInpCnf;
                    }
                    #endregion FixedCnF
                    #region FixedInsurance

                    decimal vTotalInsuranceApply = 0;
                    vTotalInsuranceApply = vsubTotal + vCnfAmt;

                    if (FixedInsurance == true)
                    {
                        //txtInsAmount.Text = vInpInsurance.ToString();
                        //txtInsRate.Text = Convert.ToString(vInpInsurance * 100 / vTotalInsuranceApply);

                        vInsuranceAmt = vInpInsurance;
                        vInsuranceRate = vInpInsurance * 100 / vTotalInsuranceApply;
                    }
                    else
                    {
                        //txtInsAmount.Text = Convert.ToString(vTotalInsuranceApply * vInpInsurance / 100);
                        //txtInsRate.Text = vInpInsurance.ToString();
                        vInsuranceAmt = vTotalInsuranceApply * vInpInsurance / 100;
                        vInsuranceRate = vInpInsurance;
                    }
                    #endregion FixedInsurance
                    #region CalculativeAV

                    if (CalculativeAV == true)
                    {
                        vAVAmount = vsubTotal + vCnfAmt + vInsuranceAmt;
                    }
                    else
                    {
                        vAVAmount = vInpAV;
                    }
                    //txtAVAmount.Text = Convert.ToString(vAVAmount);
                    //if (vAVAmount == 0)
                    //vAVAmount = 1;
                    //if (!string.IsNullOrEmpty(txtAVAmount.Text.Trim()))
                    //    vAVAmount = Convert.ToDecimal(txtAVAmount.Text.Trim());
                    //else
                    //{
                    //    MessageBox.Show("There is no value in AV field, Please input AV first", this.Text);
                    //    return;
                    //}
                    //vsubTotal = 1;
                    if (ProductType != "P")
                    {
                        if (vAVAmount == 0)
                        {
                            //MessageBox.Show("There is no value in AV field, Please input AV first", this.Text);
                            throw new ArgumentException("There is no value in AV field, Please input AV first");

                            //return;
                        }
                    }


                    #endregion CalculativeAV

                    #region FixedCD
                    if (FixedCD == true)
                    {
                        //txtCDAmount.Text = vInpCD.ToString();
                        //txtCDRate.Text = Convert.ToString(vInpCD * 100 / vAVAmount);

                        vCDAmt = vInpCD;
                        if (ProductType == "P")
                        {
                            vCDRate = 0;
                        }
                        else
                        {
                            vCDRate = vInpCD * 100 / vAVAmount;
                        }
                    }
                    else
                    {
                        //txtCDAmount.Text = Convert.ToString(vAVAmount * vInpCD / 100);
                        //txtCDRate.Text = vInpCD.ToString();

                        vCDAmt = vAVAmount * vInpCD / 100;
                        vCDRate = vInpCD;
                    }
                    #endregion FixedCD
                    #region FixedRD
                    if (FixedRD == true)
                    {
                        vRDAmt = vInpRD;
                        if (ProductType == "P")
                        {
                            vRDRate = 0;
                        }
                        else
                        {
                            vRDRate = vInpRD * 100 / vAVAmount;
                        }
                    }
                    else
                    {
                        //txtRDAmount.Text = Convert.ToString(vAVAmount * vInpRD / 100);
                        //txtRDRate.Text = vInpRD.ToString();

                        vRDAmt = vAVAmount * vInpRD / 100;
                        vRDRate = vInpRD;
                    }
                    #endregion FixedCD
                    #region FixedTVB

                    decimal vTotalTVBApply = 0;
                    vTotalTVBApply = vAVAmount + vCDAmt + vRDAmt;

                    if (FixedTVB == true)
                    {
                        //txtTVBAmount.Text = vInpTVB.ToString();
                        //txtTVBRate.Text = Convert.ToString(vInpTVB * 100 / vTotalTVBApply);

                        vTVBAmt = vInpTVB;
                        if (ProductType == "P")
                        {
                            vTVBRate = 0;
                        }
                        else
                        {
                            vTVBRate = vInpTVB * 100 / vTotalTVBApply;
                        }
                    }
                    else
                    {
                        //txtTVBAmount.Text = Convert.ToString(vTotalTVBApply * vInpTVB / 100);
                        //txtTVBRate.Text = vInpTVB.ToString();

                        vTVBAmt = vTotalTVBApply * vInpTVB / 100;
                        vTVBRate = vInpTVB;
                    }

                    #endregion FixedTVB
                    #region FixedSD

                    decimal vTotalSDApply = 0;
                    vTotalSDApply = vTotalTVBApply + vTVBAmt;

                    if (FixedSD == true)
                    {
                        //txtSDAmount.Text = vInpSD.ToString();
                        //txtSDRate.Text = Convert.ToString(vInpSD * 100 / vTotalSDApply);

                        vSDAmt = vInpSD;
                        if (ProductType == "P")
                        {
                            vSDRate = 0;
                        }
                        else
                        {
                            vSDRate = vInpSD * 100 / vTotalSDApply;
                        }
                    }
                    else
                    {
                        //txtSDAmount.Text = Convert.ToString(vTotalSDApply * vInpSD / 100);
                        //txtSDRate.Text = vInpSD.ToString();

                        vSDAmt = vTotalSDApply * vInpSD / 100;
                        vSDRate = vInpSD;
                    }

                    #endregion FixedSD
                    #region FixedVAT

                    decimal vTotalVATApply = 0;
                    vTotalVATApply = vTotalSDApply + vSDAmt;

                    if (FixedVATImp == true)
                    {
                        //txtVATAmount.Text = vInpVAT.ToString();
                        //txtVATRateI.Text = Convert.ToString(vInpVAT * 100 / vTotalVATApply);

                        vVATAmt = vInpVAT;
                        if (ProductType == "P")
                        {
                            vVATRate = 0;
                        }
                        else
                        {
                            vVATRate = vInpVAT * 100 / vTotalVATApply;
                        }
                    }
                    else
                    {
                        //txtVATAmount.Text = Convert.ToString(vTotalVATApply * vInpVAT / 100);
                        //txtVATRateI.Text = vInpVAT.ToString();

                        vVATAmt = vTotalVATApply * vInpVAT / 100;
                        vVATRate = vInpVAT;
                    }

                    #endregion FixedVAT
                    #region FixedTVA
                    //vTotalVATApply = vTotalSDApply + vSDAmt;
                    //if (FixedTVA == true)
                    //{
                    //    //txtTVAAmount.Text = vInpTVA.ToString();
                    //    //txtTVARate.Text = Convert.ToString(vInpTVA * 100 / vTotalVATApply);

                    //    vTVAAmt = vInpTVA;
                    //    vTVARate = vInpTVA * 100 / vTotalVATApply;
                    //}
                    //else
                    //{
                    //    //txtTVAAmount.Text = Convert.ToString(vTotalVATApply * vInpTVA / 100);
                    //    //txtTVARate.Text = vInpTVA.ToString();

                    //    vTVAAmt = vTotalVATApply * vInpTVA / 100;
                    //    vTVARate = vInpTVA;
                    //}

                    #endregion FixedTVA
                    #region FixedATV
                    decimal vTotalATVApply = 0;
                    vTotalATVApply = vTotalVATApply + vTVAAmt;

                    if (FixedATV == true)
                    {
                        //txtATVAmount.Text = vInpATV.ToString();
                        //txtATVRate.Text = Convert.ToString(vInpATV * 100 / vTotalATVApply);
                        vATVAmt = vInpATV;
                        if (ProductType == "P")
                        {
                            vATVRate = 0;
                        }
                        else
                        {
                            vATVRate = vInpATV * 100 / vTotalATVApply;
                        }

                    }
                    else
                    {
                        //txtATVAmount.Text = Convert.ToString(vTotalATVApply * vInpATV / 100);
                        //txtATVRate.Text = vInpATV.ToString();

                        vATVAmt = vTotalATVApply * vInpATV / 100;
                        vATVRate = vInpATV;
                    }

                    #endregion FixedTVA
                    #region FixedOthers
                    decimal vTotalOthersApply = 0;
                    vTotalOthersApply = vTotalVATApply;

                    if (FixedOthers == true)
                    {
                        //txtOthersAmount.Text = vInpOthers.ToString();
                        //txtOthersRate.Text = Convert.ToString(vInpOthers * 100 / vTotalOthersApply);

                        vOthersAmt = vInpOthers;
                        if (ProductType == "P")
                        {
                            vOthersRate = 0;
                        }
                        else
                        {
                            vOthersRate = vInpOthers * 100 / vTotalOthersApply;
                        }

                    }
                    else
                    {
                        //txtOthersAmount.Text = Convert.ToString(vTotalOthersApply * vInpOthers / 100);
                        //txtOthersRate.Text = vInpOthers.ToString();

                        vOthersAmt = vTotalOthersApply * vInpOthers / 100;
                        vOthersRate = vInpOthers;
                    }

                    #endregion FixedOthers
                    #region details

                    PurchaseDutiesVM purchaseDuty = new PurchaseDutiesVM();

                    purchaseDuty.PIDutyID = "";
                    purchaseDuty.ItemNo = itemNo;
                    purchaseDuty.Quantity = Convert.ToDecimal(vQuantity);
                    //purchaseDuty.l

                    purchaseDuty.CnFInp = vInpCnf;
                    purchaseDuty.CnFRate = vCnfRate;
                    purchaseDuty.CnFAmount = vCnfAmt;

                    purchaseDuty.InsuranceInp = vInpInsurance;
                    purchaseDuty.InsuranceRate = vInsuranceRate;
                    purchaseDuty.InsuranceAmount = vInsuranceAmt;

                    purchaseDuty.AssessableInp = vInpAV;
                    purchaseDuty.AssessableValue = vAVAmount;

                    purchaseDuty.CDInp = vInpCD;
                    purchaseDuty.CDRate = vCDRate;
                    purchaseDuty.CDAmount = vCDAmt;

                    purchaseDuty.RDInp = vInpRD;
                    purchaseDuty.RDRate = vRDRate;
                    purchaseDuty.RDAmount = vRDAmt;

                    purchaseDuty.TVBInp = vInpTVB;
                    purchaseDuty.TVBRate = vTVBRate;
                    purchaseDuty.TVBAmount = vTVBAmt;

                    purchaseDuty.SDInp = vInpSD;
                    purchaseDuty.SD = vSDRate;
                    purchaseDuty.SDAmount = vSDAmt;

                    purchaseDuty.VATInp = vInpVAT;
                    purchaseDuty.VATRate = vVATRate;
                    purchaseDuty.VATAmount = vVATAmt;

                    purchaseDuty.TVAInp = vInpTVA;
                    purchaseDuty.TVARate = vTVARate;
                    purchaseDuty.TVAAmount = vTVAAmt;

                    purchaseDuty.ATVInp = vInpATV;
                    purchaseDuty.ATVRate = vATVRate;
                    purchaseDuty.ATVAmount = vATVAmt;

                    purchaseDuty.OthersInp = vInpOthers;
                    purchaseDuty.OthersRate = vOthersRate;
                    purchaseDuty.OthersAmount = vOthersAmt;
                    purchaseDuty.Remarks = row["Remarks"].ToString();
                    purchaseDuty.AITInp = Convert.ToDecimal(row["AITAmount"]);
                    purchaseDuty.AITAmount = Convert.ToDecimal(row["AITAmount"]);

                    purchaseDuty.SetCost();
                    purchaseDuties.Add(purchaseDuty);

                    Icounter++;
                    #endregion details

                }
            }

            #endregion

            //catch (ArgumentNullException aeg)
            //{
            //    //if (transaction != null)
            //    //{
            //    //    transaction.Rollback();
            //    //}
            //    throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + aeg.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            //}
            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "DutyCalculation", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

                //if (transaction != null)
                //{
                //    transaction.Rollback();
                //}
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }

            return purchaseDuties;

        }

        public decimal FormatingNumeric(decimal value, int DecPlace, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            object outPutValue = 0;
            string decPointLen = "";

            #endregion

            #region try

            try
            {

                for (int i = 0; i < DecPlace; i++)
                {
                    decPointLen = decPointLen + "0";
                }
                if (value < 1000)
                {
                    string a = "0." + decPointLen + "";
                    outPutValue = value.ToString(a);
                }
                else
                {
                    string a = "0,0." + decPointLen + "";
                    outPutValue = value.ToString(a);

                }


            }

            #endregion

            #region Catch

            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "FormatingNumeric", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }

            #endregion Catch

            return Convert.ToDecimal(outPutValue);

        }

        //currConn to VcurrConn 25-Aug-2020
        public DataTable GetLastPurchaseDetail(string PurchaseInvoiceNo, string itemNo, string effectDate, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string sqlText = "";

            DataTable dt = new DataTable();

            #endregion

            #region Try

            try
            {

                #region open connection and transaction
                if (VcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }
                }

                #endregion open connection and transaction

                #region Sql Statement

                sqlText = "  ";
                sqlText += @" 

SELECT TOP 1 
(isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+isnull(OthersAmount,0)) /Quantity CostPrice,
--CostPrice, 
pid.ReceiveDate
, pid.ItemNo
, proCat.IsRaw

FROM PurchaseInvoiceDetails pid
left outer join Products pro on pid.ItemNo=pro.ItemNo
left outer join ProductCategories proCat on proCat.CategoryID=pro.CategoryID
WHERE 1=1
";
                string sqlText_ConditionItemNo = @" 
AND pid.ItemNo=@ItemNo
AND pid.ReceiveDate< dateadd(d,1,@ReceiveDate)
and pid.Post='Y'
AND pid.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService','Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
";
                string sqlText_ConditionPurchaseInvoiceNo = @" 
AND pid.PurchaseInvoiceNo=@PurchaseInvoiceNo

";
                if (!string.IsNullOrWhiteSpace(PurchaseInvoiceNo))
                {
                    sqlText = sqlText + sqlText_ConditionPurchaseInvoiceNo;
                }
                else
                {
                    sqlText = sqlText + sqlText_ConditionItemNo;
                }

                sqlText += @" ORDER BY pid.ReceiveDate DESC";
                SqlCommand cmdPurchase = new SqlCommand(sqlText, VcurrConn, Vtransaction);

                if (!string.IsNullOrWhiteSpace(PurchaseInvoiceNo))
                {
                    cmdPurchase.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);

                }
                else
                {
                    cmdPurchase.Parameters.AddWithValue("@ItemNo", itemNo);
                    cmdPurchase.Parameters.AddWithValue("@ReceiveDate", effectDate);
                }


                SqlDataAdapter da = new SqlDataAdapter(cmdPurchase);

                da.Fill(dt);

                #endregion

            }

            #endregion try

            #region Catch and Finall

            catch (SqlException sqlex)
            {

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "GetLastPurchaseDetail", sqlex.ToString());
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "GetLastPurchaseDetail", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }

            finally
            {
                if (VcurrConn == null)
                {
                    if (VcurrConn.State == ConnectionState.Open)
                    {
                        VcurrConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return dt;

            #endregion

        }

        #region Rebate Methods

        public string[] MultipleRebate(List<PurchasePostIds> RebateIds, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion Initializ
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction(MessageVM.PurchasemsgMethodNameUpdate);
                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);

                #endregion open connection and transaction

                #region Loop Purchase Master

                foreach (PurchasePostIds item in RebateIds)
                {
                    PurchaseMasterVM master = SelectAllList(Convert.ToInt32(item.Id), null, null, currConn, transaction, null, connVM).FirstOrDefault();

                    List<PurchaseDetailVM> Details = SelectPurchaseDetailList(master.PurchaseInvoiceNo, null, null, currConn, transaction, connVM);

                    PurchasePostIds RebateVM = new PurchasePostIds();
                    RebateVM.PurchaseInvoiceNo = master.PurchaseInvoiceNo;
                    RebateVM.RebatePeriodId = item.RebatePeriodId;
                    RebateVM.IsRebate = item.IsRebate;
                    RebateVM.RebateDate = item.RebateDate;

                    retResults = PurchaseRebate(RebateVM, master, Details, transaction, currConn, connVM);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException("", retResults[1]);
                    }
                }

                #endregion

                #region Comments

                //for (int i = 0; i < Ids.Length - 1; i++)
                //{
                //    PurchaseMasterVM master = SelectAllList(Convert.ToInt32(Ids[i]), null, null, currConn, transaction, null, null).FirstOrDefault();
                //    List<PurchaseDetailVM> Details = SelectPurchaseDetailList(master.PurchaseInvoiceNo, null, null, currConn, transaction, null);
                //    List<PurchaseDutiesVM> Duties = SelectAllDuties(master.PurchaseInvoiceNo, null, null, currConn, transaction, null);
                //    if (Duties == null)
                //    {
                //        Duties = new List<PurchaseDutiesVM>();
                //    }
                //    List<TrackingVM> Trakings = new List<TrackingVM>();
                //    master.Post = "Y";
                //    retResults = PurchasePost(master, Details, Duties, Trakings, transaction, currConn);
                //    if (retResults[0] != "Success")
                //    {
                //        throw new ArgumentNullException("", retResults[1]);
                //    }
                //}

                #endregion

                #region Commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion

            }
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "GetLastPurchaseDetail", ex.ToString());

                ////throw ex;
            }
            finally
            {

            }
            #region Result
            return retResults;
            #endregion Result
        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] PurchaseRebate(PurchasePostIds RebateVM, PurchaseMasterVM Master, List<PurchaseDetailVM> Details, SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            //////bool PriceDeclarationTradingProduct = false;
            //////SqlConnection currConn = null;
            //////SqlTransaction transaction = null;
            ////////SqlConnection vcurrConn = VcurrConn;
            ////////if (vcurrConn == null)
            ////////{
            ////////    VcurrConn = null;
            ////////    Vtransaction = null;
            ////////}

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            IssueDAL issDal = new IssueDAL();
            ReceiveDAL recDal = new ReceiveDAL();
            int transResult = 0;
            string sqlText = "";
            //////string vProductType = "";

            ProductDAL productDal = new ProductDAL();
            ////////DateTime MinDate = DateTime.MinValue;
            ////////DateTime MaxDate = DateTime.MaxValue;

            ////////string PostStatus = "";

            #endregion Initializ

            #region Try

            try
            {
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.purchaseMsgNoDataToPost);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.purchaseMsgCheckDatePost);

                }


                #endregion Validation for Header

                #region Old connection

                #region open connection and transaction

                ////if (vcurrConn == null)
                ////{
                ////    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                ////    if (VcurrConn.State != ConnectionState.Open)
                ////    {
                ////        VcurrConn.Open();
                ////    }
                ////    Vtransaction = VcurrConn.BeginTransaction(MessageVM.PurchasemsgMethodNameInsert);

                ////}

                #endregion open connection and transaction

                #endregion Old connection

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction(MessageVM.PurchasemsgMethodNameInsert);
                }

                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue", null, null, connVM) == "Y" ? true : false);

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock

                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock

                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }

                #endregion Fiscal Year CHECK

                #region Find ID for Post

                sqlText = "";

                sqlText = sqlText +
                          "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo and IsRebate='Y'";

                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", RebateVM.PurchaseInvoiceNo);
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                #endregion Find ID for Update

                #region Post

                if (IDExist <= 0)
                {
                    sqlText = "";
                    sqlText += @" Update  PurchaseInvoiceHeaders     set  IsRebate =@IsRebate,RebatePeriodID=@RebatePeriodID,RebateDate=@RebateDate, LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                    sqlText += @" Update  PurchaseInvoiceDetails     set  IsRebate =@IsRebate,RebatePeriodID=@RebatePeriodID, LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";

                    SqlCommand cmdUpdateDetail = new SqlCommand(sqlText, currConn);
                    cmdUpdateDetail.Transaction = transaction;
                    cmdUpdateDetail.Parameters.AddWithValueAndNullHandle("@IsRebate", RebateVM.IsRebate);
                    cmdUpdateDetail.Parameters.AddWithValueAndNullHandle("@RebatePeriodID", RebateVM.RebatePeriodId);
                    cmdUpdateDetail.Parameters.AddWithValueAndNullHandle("@RebateDate", RebateVM.RebateDate);
                    cmdUpdateDetail.Parameters.AddWithValueAndNullHandle("@MasterSalesInvoiceNo", RebateVM.PurchaseInvoiceNo);
                    cmdUpdateDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                    cmdUpdateDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);

                    transResult = cmdUpdateDetail.ExecuteNonQuery();

                }

                else
                {
                    //throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                    //                                MessageVM.purchaseMsgUnableFindExistIDPost);
                }
                #endregion

                #region Update into Details(Update complete in Header)


                #endregion  Update into Details(Update complete in Header)

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                #region Commit

                ////if (currConn == null)
                ////{
                ////    if (Vtransaction != null)
                ////    {
                ////        //if (transResult > 0)
                ////        //{
                ////        Vtransaction.Commit();
                ////        //}

                ////    }
                ////}

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.purchaseMsgSuccessfullyPost;
                retResults[2] = Master.PurchaseInvoiceNo;
                retResults[3] = "Y";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                if (transaction != null)
                {
                    transaction.Rollback();
                }

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseRebate", ex.ToString() + "\n" + sqlText);

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

                #region Comments

                ////if (vcurrConn == null)
                ////{
                ////    if (VcurrConn != null)
                ////    {
                ////        if (VcurrConn.State == ConnectionState.Open)
                ////        {
                ////            VcurrConn.Close();
                ////        }
                ////    }
                ////}
                #endregion

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] MultipleRebateData(List<string> IDs, string PeriodName, SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();

            string[] retResult = new string[6];
            string[] results = new string[6];

            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL _CommonDAL = new CommonDAL();

                #region Find Fiscal Year Lock

                //////string PeriodName = dtpRebateDate.Value.ToString("MMMM-yyyy");
                string[] cValues = { PeriodName };
                string[] cFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearDAL().SelectAll(0, cFields, cValues, null, null, connVM).FirstOrDefault();

                if (varFiscalYearVM == null)
                {
                    throw new ArgumentException(PeriodName + ": This Fiscal Period is not Exist!");
                }

                #endregion

                PurchasePostIds PostId = new PurchasePostIds();
                List<PurchasePostIds> PostIds = new List<PurchasePostIds>();

                #region sql statement

                int len = IDs.Count;

                #region SqlText

                sqlText += @"
SELECT Id from PurchaseInvoiceHeaders where Post='Y' and IsRebate='N' and Id in ( ";

                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + IDs[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                #endregion SqlText
                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                da.Fill(dt);

                #endregion SqlExecution

                if (dt == null || dt.Rows.Count == 0)
                {
                    throw new ArgumentException("", "All data already Rebate !");
                }

                foreach (DataRow row in dt.Rows)
                {
                    string Id = row["Id"].ToString();
                    PostId = new PurchasePostIds();
                    PostId.Id = Convert.ToInt32(Id);
                    PostId.IsRebate = "Y";
                    PostId.RebatePeriodId = varFiscalYearVM.PeriodID;
                    PostId.RebateDate = varFiscalYearVM.PeriodStart;

                    PostIds.Add(PostId);

                }

                results = MultipleRebate(PostIds, connVM);
                if (results[0] == "Success")
                {
                    retResult[0] = "Success";
                    retResult[1] = "All Purchases Rebate successfully";
                }

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #region catch

            catch (Exception ex)
            {
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return retResult;

        }


        #endregion

        #endregion

        #region Web Methods

        public List<PurchaseMasterVM> SelectAllList(int Id = 0, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, PurchaseMasterVM likeVM = null, SysDBInfoVMTemp connVM = null, string ItemNo = null, bool IsDisposeRawSearch = false, bool VDSSearch = false)
        {
            #region Variables
            //SqlConnection currConn = null;
            //SqlTransaction transaction = null;
            string sqlText = "";
            List<PurchaseMasterVM> VMs = new List<PurchaseMasterVM>();
            PurchaseMasterVM vm;
            #endregion
            try
            {

                #region sql statement

                #region SqlExecution


                DataTable dt = SelectAll(Id, conditionFields, conditionValues, VcurrConn, Vtransaction, null, false, connVM, VDSSearch, IsDisposeRawSearch, ItemNo);

                foreach (DataRow dr in dt.Rows)
                {
                    try
                    {
                        vm = new PurchaseMasterVM();
                        vm.Id = dr["Id"].ToString();
                        vm.PurchaseInvoiceNo = dr["PurchaseInvoiceNo"].ToString();
                        vm.VendorID = dr["VendorID"].ToString();
                        vm.VendorAddress = dr["VendorAddress"].ToString();
                        vm.InvoiceDate = OrdinaryVATDesktop.DateTimeToDate(dr["InvoiceDateTime"].ToString());
                        vm.TotalAmount = Convert.ToDecimal(dr["TotalAmount"].ToString());
                        vm.TotalVATAmount = Convert.ToDecimal(dr["TotalVATAmount"].ToString());
                        vm.SerialNo = dr["SerialNo"].ToString();
                        vm.Comments = dr["Comments"].ToString();
                        vm.CreatedBy = dr["CreatedBy"].ToString();
                        vm.CreatedOn = dr["CreatedOn"].ToString();
                        vm.LastModifiedBy = dr["LastModifiedBy"].ToString();
                        vm.LastModifiedOn = dr["LastModifiedOn"].ToString();
                        vm.BENumber = dr["BENumber"].ToString();
                        vm.ProductType = dr["ProductType"].ToString();
                        vm.TransactionType = dr["TransactionType"].ToString();
                        vm.ReceiveDate = Convert.ToDateTime(dr["ReceiveDate"].ToString()).ToString("dd-MMM-yyyy HH:mm");
                        vm.Post = dr["Post"].ToString();
                        vm.WithVDS = dr["WithVDS"].ToString();
                        vm.LCNumber = dr["LCNumber"].ToString();
                        vm.LCDate = OrdinaryVATDesktop.DateTimeToDate(dr["LCDate"].ToString());
                        vm.LandedCost = Convert.ToDecimal(dr["LandedCost"].ToString());
                        vm.CustomHouse = dr["CustomHouse"].ToString();
                        vm.CustomHouseCode = dr["CustomCode"].ToString();
                        vm.VendorName = dr["VendorName"].ToString();
                        vm.ReturnId = dr["PurchaseReturnId"].ToString();
                        vm.VendorGroup = dr["VendorGroupName"].ToString();
                        vm.TotalVDSAmount = Convert.ToDecimal(dr["VDSAmount"]);

                        ////newly added fields
                        vm.CurrencyId = dr["CurrencyID"].ToString();
                        vm.CurrencyRateFromBDT = Convert.ToDecimal(dr["CurrencyRateFromBDT"].ToString());
                        vm.ImportID = dr["ImportIDExcel"].ToString();
                        vm.USDInvoiceValue = Convert.ToDecimal(dr["USDInvoiceValue"].ToString());
                        vm.TDSAmount = Convert.ToDecimal(dr["TDSAmount"].ToString());
                        vm.BranchId = Convert.ToInt32(dr["BranchId"].ToString());
                        vm.IsRebate = dr["IsRebate"].ToString();
                        vm.RebatePeriodId = dr["RebatePeriodID"].ToString();
                        vm.RebateDate = Convert.ToDateTime(dr["RebateDate"].ToString()).ToString("yyyy-MM-dd");
                        vm.BankGuarantee = dr["BankGuarantee"].ToString();
                        vm.IsTDS = dr["IsTDS"].ToString();
                        vm.TDSRate = Convert.ToDecimal(dr["TDSRate"].ToString());
                        vm.VehicleNo = dr["VehicleNo"].ToString();
                        vm.VehicleType = dr["VehicleType"].ToString();



                        VMs.Add(vm);
                    }
                    catch (Exception e)
                    {

                    }

                }


                #endregion SqlExecution

                //if (Vtransaction == null && transaction != null)
                //{ 
                //    transaction.Commit();
                //}
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            //finally
            //{
            //    if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
            //    {
            //        currConn.Close();
            //    }
            //}
            #endregion
            return VMs;
        }

        public DataTable SelectAll(int Id = 0, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null
            , SqlTransaction Vtransaction = null, PurchaseMasterVM likeVM = null, bool Dt = false, SysDBInfoVMTemp connVM = null, bool VDSSearch = false
            , bool IsDisposeRawSearch = false, string ItemNo = null, bool IsBankingChannelPay = false, bool IsClints6_3Search = false)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";

            string sqlTextParameter = "";
            string sqlTextOrderBy = "";
            string sqlTextCount = "";

            DataTable dt = new DataTable();

            DataSet ds = new DataSet();
            string count = "100";

            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL _CommonDAL = new CommonDAL();
                string ClientFGReceiveIn9_1 = _CommonDAL.settingValue("Toll", "ClientFGReceiveIn9_1", connVM, currConn, transaction);

                int index = -1;
                if (conditionFields != null && conditionValues != null)
                {
                    index = Array.IndexOf(conditionFields, "SelectTop");
                    if (index >= 0)
                    {
                        count = conditionValues[index].ToString();

                        List<string> field = conditionFields.ToList();
                        List<string> Values = conditionValues.ToList();
                        field.RemoveAt(index);
                        Values.RemoveAt(index);
                        conditionFields = field.ToArray();
                        conditionValues = Values.ToArray();
                    }
                }
                #region sql statement
                #region SqlText

                if (count.ToLower() == "all")
                {
                    sqlText = @"SELECT";
                }
                else
                {
                    sqlText = @"SELECT top " + count + " ";
                }

                sqlText += @"
pih.PurchaseInvoiceNo
,pih.ReceiveDate
,pih.Post
,pih.InvoiceDateTime
,v.VendorName VendorName
,pih.BENumber
,pih.TransactionType
,pih.ImportIDExcel
,vg.VendorGroupName
,ISNULL(pih.BranchId,0) BranchId

,ISNULL(pih.TotalAmount,0) TotalAmount
, vds.Subtotal TotalSubtotal
,ISNULL(pih.TotalVATAmount,0) TotalVATAmount
,pih.SerialNo
,pih.Comments
,pih.CreatedBy
,pih.CreatedOn
,pih.LastModifiedBy
,pih.LastModifiedOn
,pih.ProductType
,ISNULL(pih.CurrencyRateFromBDT,0) CurrencyRateFromBDT
,pih.WithVDS
,pih.PurchaseReturnId
,pih.SerialNo1
,pih.LCNumber
,pih.LCDate
,ISNULL(pih.LandedCost,0) LandedCost
,ISNULL(pih.TDSAmount,0) TDSAmount
,pih.CustomHouse
,pih.CustomCode
,pih.IsVDSCompleted
,pih.IsTDS
,v.VendorGroupID 
,v.Address1 VendorAddress
,ISNULL(VDS.VDSAmount,0)VDSAmount
,ISNULL(pih.TDSAmount,0)TDSAmount
,ISNULL(pih.USDInvoiceValue,0) USDInvoiceValue
,pih.Id
,pih.FiscalYear
,pih.VendorID
,pih.CurrencyID
,pih.RebatePeriodID
,pih.IsRebate
,pih.RebateDate
,pih.BankGuarantee
,ISNULL(pih.TDSRate,0) TDSRate
,ISNULL(pih.VehicleNo,'-') VehicleNo
,ISNULL(pih.VehicleType,'-') VehicleType
FROM PurchaseInvoiceHeaders pih left outer join Vendors v on pih.VendorID=v.VendorID 
left outer join VendorGroups vg on v.VendorGroupID=vg.VendorGroupID
LEFT OUTER JOIN (
select distinct PurchaseInvoiceNo
, sum(isnull(subtotal,0)) Subtotal
, sum(isnull(VDSAmount,0))VDSAmount   
from PurchaseInvoiceDetails
group by PurchaseInvoiceNo) VDS ON  pih.PurchaseInvoiceNo =  VDS.PurchaseInvoiceNo
WHERE  1=1
";
                sqlTextCount += @"

select count(pih.PurchaseInvoiceNo)RecordCount
FROM PurchaseInvoiceHeaders pih left outer join Vendors v on pih.VendorID=v.VendorID 
left outer join VendorGroups vg on v.VendorGroupID=vg.VendorGroupID
LEFT OUTER JOIN (select distinct PurchaseInvoiceNo,sum(isnull(VDSAmount,0))VDSAmount   from PurchaseInvoiceDetails
group by PurchaseInvoiceNo)VDS ON  pih.PurchaseInvoiceNo =  VDS.PurchaseInvoiceNo
WHERE  1=1";



                if (Id > 0)
                {
                    sqlTextParameter += @" and pih.Id=@Id";
                }

                if (VDSSearch)
                {
                    sqlTextParameter += @" and pih.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')";
                    //sqlText += @" and pih.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')";

                }
                if (IsDisposeRawSearch)
                {
                    if (ItemNo != null)
                    {
                        sqlTextParameter += @"and pih.PurchaseInvoiceNo in(select PurchaseInvoiceNo from PurchaseInvoiceDetails where itemno=@ItemNo)";
                    }
                }

                if (IsBankingChannelPay)
                {
                    sqlTextParameter += @" and pih.TransactionType in('Other','InputService','Service','ServiceNS')";

                }
                if (IsClints6_3Search)
                {
                    string TransactionTypeParam = @" and pih.TransactionType in('ClientFGReceiveWOBOM')";

                    if (ClientFGReceiveIn9_1 == "N")
                    {
                        TransactionTypeParam = @" and pih.TransactionType in('ClientFGReceiveWOBOM','TollReceive')";
                    }

                    sqlTextParameter += TransactionTypeParam;

                }

                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else if (conditionFields[i].ToLower().Contains("isnull"))
                        {
                            sqlTextParameter += " AND isnull(" + cField + ",'N') = @" + cField;
                        }
                        else
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                sqlTextOrderBy += @" order by  pih.ReceiveDate desc";

                #endregion SqlText
                #region SqlExecution

                sqlText = sqlText + " " + sqlTextParameter + " " + sqlTextOrderBy;
                sqlTextCount = sqlTextCount + " " + sqlTextParameter;
                sqlText = sqlText + " " + sqlTextCount;


                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (Id > 0)
                {
                    da.SelectCommand.Parameters.AddWithValue("@Id", Id);
                }
                if (ItemNo != null)
                {
                    da.SelectCommand.Parameters.AddWithValue("@ItemNo", ItemNo);

                }
                da.Fill(ds);
                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                dt = ds.Tables[0].Copy();
                if (index >= 0)
                {
                    dt.Rows.Add(ds.Tables[1].Rows[0][0]);
                }


                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public DataTable SelectAllFromTemp(string Id = null, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null
           , SqlTransaction Vtransaction = null, PurchaseMasterVM likeVM = null, bool Dt = false, SysDBInfoVMTemp connVM = null, bool VDSSearch = false)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";

            string sqlTextParameter = "";
            string sqlTextOrderBy = "";
            string sqlTextCount = "";

            DataTable dt = new DataTable();

            DataSet ds = new DataSet();
            string count = "100";

            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                int index = -1;
                if (conditionFields != null && conditionValues != null)
                {
                    index = Array.IndexOf(conditionFields, "SelectTop");
                    if (index >= 0)
                    {
                        count = conditionValues[index].ToString();

                        List<string> field = conditionFields.ToList();
                        List<string> Values = conditionValues.ToList();
                        field.RemoveAt(index);
                        Values.RemoveAt(index);
                        conditionFields = field.ToArray();
                        conditionValues = Values.ToArray();
                    }
                }
                #region sql statement
                #region SqlText

                if (count == "All")
                {
                    sqlText = @"SELECT";
                }
                else
                {
                    sqlText = @"SELECT top " + count + " ";
                }

                sqlText += @"
 '' PurchaseInvoiceNo
,pih.Invoice_Date InvoiceDateTime
,0 TotalAmount
,0 TotalVATAmount
,pih.Referance_No SerialNo
,pih.Comments
,''CreatedBy
,'1900-01-01'CreatedOn
,''LastModifiedBy
,'1900-01-01'LastModifiedOn
,pih.BE_Number BENumber
,''ProductType
,pih.Transection_Type TransactionType
,pih.Receive_Date ReceiveDate
,pih.Post
,0 CurrencyRateFromBDT
,'N' WithVDS
,'0'PurchaseReturnId
,pih.ID ImportIDExcel
,pih.Referance_No SerialNo1
,pih.LC_No LCNumber
,'1900-01-01'LCDate
,0 LandedCost
,0 TDSAmount
,''CustomHouse
,'N' IsVDSCompleted
,'N' IsTDS
,v.VendorName VendorName
,v.VendorGroupID 
,vg.VendorGroupName
,0 VDSAmount
,0 TDSAmount
,1 USDInvoiceValue
,pih.Id
,pih.VendorID
,'0' CurrencyID
,ISNULL(pih.BranchId,0) BranchId
,'N' IsRebate

FROM TempPurchaseData pih left outer join Vendors v on pih.VendorID=v.VendorID 
left outer join VendorGroups vg on v.VendorGroupID=vg.VendorGroupID

WHERE  1=1
";




                if (Id != null)
                {
                    sqlTextParameter += @" and pih.Id=@Id";
                }

                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else if (conditionFields[i].ToLower().Contains("isnull"))
                        {
                            sqlTextParameter += " AND isnull(" + cField + ",'N') = @" + cField;
                        }
                        else
                        {
                            sqlTextParameter += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                sqlTextOrderBy += @" order by  pih.Receive_Date desc";

                #endregion SqlText
                #region SqlExecution

                sqlText = sqlText + " " + sqlTextParameter + " " + sqlTextOrderBy;
                //sqlTextCount = sqlTextCount + " " + sqlTextParameter;
                //sqlText = sqlText + " " + sqlTextCount;


                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (Id != null)
                {
                    da.SelectCommand.Parameters.AddWithValue("@Id", Id);
                }
                da.Fill(ds);
                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                dt = ds.Tables[0].Copy();



                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public DataTable PurchaseSearch(int Id = 0, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, PurchaseMasterVM likeVM = null, bool Dt = false, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region sql statement
                #region SqlText

                sqlText = @"
SELECT
 pih.Id
,pih.PurchaseInvoiceNo
,pih.VendorID
,pih.InvoiceDateTime
,ISNULL(pih.TotalAmount,0) TotalAmount
,ISNULL(pih.TotalVATAmount,0) TotalVATAmount
,pih.SerialNo
,pih.Comments
,pih.CreatedBy
,pih.CreatedOn
,pih.LastModifiedBy
,pih.LastModifiedOn
,pih.BENumber
,pih.ProductType
,pih.TransactionType
,pih.ReceiveDate
,pih.Post
,pih.CurrencyID
,ISNULL(pih.CurrencyRateFromBDT,0) CurrencyRateFromBDT
,pih.WithVDS
,pih.PurchaseReturnId
,pih.ImportIDExcel
,pih.SerialNo1
,pih.LCNumber
,pih.LCDate
,ISNULL(pih.LandedCost,0) LandedCost
,ISNULL(pih.TDSAmount,0) TDSAmount
,pih.CustomHouse
,pih.CustomCode
,pih.IsVDSCompleted
,v.VendorName VendorName
,v.VendorGroupID 
,vg.VendorGroupName
,VDS.VDSAmount
,ISNULL(pih.USDInvoiceValue,0) USDInvoiceValue
,ISNULL(pih.BranchId,0) BranchId
FROM PurchaseInvoiceHeaders pih left outer join Vendors v on pih.VendorID=v.VendorID 
left outer join VendorGroups vg on v.VendorGroupID=vg.VendorGroupID
LEFT OUTER JOIN (select distinct PurchaseInvoiceNo,sum(isnull(VDSAmount,0))VDSAmount   from PurchaseInvoiceDetails
group by PurchaseInvoiceNo)VDS ON  pih.PurchaseInvoiceNo =  VDS.PurchaseInvoiceNo
WHERE  1=1 and isnull(pih.IsVDSCompleted,'N') = 'N'
";


                if (Id > 0)
                {
                    sqlText += @" and pih.Id=@Id";
                }

                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }
                if (likeVM != null)
                {
                    if (!string.IsNullOrEmpty(likeVM.PurchaseInvoiceNo))
                    {
                        sqlText += " AND pih.PurchaseInvoiceNo like @PurchaseInvoiceNo ";
                    }
                    if (!string.IsNullOrEmpty(likeVM.BENumber))
                    {
                        sqlText += " AND pih.BENumber like @BENumber ";
                    }
                    if (!string.IsNullOrEmpty(likeVM.SerialNo))
                    {
                        sqlText += " AND pih.SerialNo like @SerialNo ";
                    }
                }
                #endregion SqlText
                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }
                if (likeVM != null)
                {
                    if (!string.IsNullOrEmpty(likeVM.PurchaseInvoiceNo))
                    {
                        da.SelectCommand.Parameters.AddWithValue("@PurchaseInvoiceNo", "%" + likeVM.PurchaseInvoiceNo + "%");
                    }
                    if (!string.IsNullOrEmpty(likeVM.BENumber))
                    {
                        da.SelectCommand.Parameters.AddWithValue("@BENumber", "%" + likeVM.BENumber + "%");
                    }
                    if (!string.IsNullOrEmpty(likeVM.SerialNo))
                    {
                        da.SelectCommand.Parameters.AddWithValue("@SerialNo", "%" + likeVM.SerialNo + "%");
                    }
                }
                if (Id > 0)
                {
                    da.SelectCommand.Parameters.AddWithValue("@Id", Id);
                }
                da.Fill(dt);
                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public List<PurchaseDetailVM> SelectPurchaseDetailList(string PurchaseInvoiceNo, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            string sqlText = "";
            List<PurchaseDetailVM> VMs = new List<PurchaseDetailVM>();
            PurchaseDetailVM vm;
            #endregion
            try
            {

                #region sql statement

                #region SqlExecution

                SqlCommand objComm = new SqlCommand(sqlText, VcurrConn, Vtransaction);

                DataTable dt = SelectPurchaseDetail(PurchaseInvoiceNo, conditionFields, conditionValues, VcurrConn, Vtransaction, false, connVM);

                foreach (DataRow dr in dt.Rows)
                {
                    vm = new PurchaseDetailVM();
                    vm.Id = dr["Id"].ToString();
                    vm.PurchaseInvoiceNo = dr["PurchaseInvoiceNo"].ToString();
                    vm.ItemNo = dr["ItemNo"].ToString();
                    vm.Quantity = Convert.ToDecimal(dr["Quantity"].ToString());
                    vm.UnitPrice = Convert.ToDecimal(dr["CostPrice"].ToString());
                    vm.NBRPrice = Convert.ToDecimal(dr["NBRPrice"].ToString());
                    vm.UOM = dr["UOM"].ToString();
                    vm.Comments = dr["Comments"].ToString();
                    vm.Type = dr["Type"].ToString();
                    vm.ProductType = dr["ProductType"].ToString();
                    vm.BENumber = dr["BENumber"].ToString();
                    vm.Post = dr["Post"].ToString();
                    vm.UOMQty = Convert.ToDecimal(dr["UOMQty"].ToString());
                    vm.UOMPrice = Convert.ToDecimal(dr["UOMPrice"].ToString());
                    vm.UOMc = Convert.ToDecimal(dr["UOMc"].ToString());
                    vm.UOMn = dr["UOMn"].ToString();
                    vm.RebateRate = Convert.ToDecimal(dr["RebateRate"].ToString());
                    vm.RebateAmount = Convert.ToDecimal(dr["RebateAmount"].ToString());
                    vm.SubTotal = Convert.ToDecimal(dr["SubTotal"].ToString());
                    vm.CnFAmount = Convert.ToDecimal(dr["CnFAmount"].ToString());
                    vm.InsuranceAmount = Convert.ToDecimal(dr["InsuranceAmount"].ToString());
                    vm.AssessableValue = Convert.ToDecimal(dr["AssessableValue"].ToString());
                    vm.CDAmount = Convert.ToDecimal(dr["CDAmount"].ToString());
                    vm.RDAmount = Convert.ToDecimal(dr["RDAmount"].ToString());
                    vm.SD = Convert.ToDecimal(dr["SD"].ToString());
                    vm.SDAmount = Convert.ToDecimal(dr["SDAmount"].ToString());
                    vm.TVBAmount = Convert.ToDecimal(dr["TVBAmount"].ToString());
                    vm.VATRate = Convert.ToDecimal(dr["VATRate"].ToString());
                    vm.VATAmount = Convert.ToDecimal(dr["VATAmount"].ToString());
                    vm.TVAAmount = Convert.ToDecimal(dr["TVAAmount"].ToString());
                    vm.ATVAmount = Convert.ToDecimal(dr["ATVAmount"].ToString());
                    vm.OthersAmount = Convert.ToDecimal(dr["OthersAmount"].ToString());
                    vm.DollerValue = Convert.ToDecimal(dr["DollerValue"].ToString());
                    vm.CurrencyValue = Convert.ToDecimal(dr["CurrencyValue"].ToString());
                    vm.VATableValue = Convert.ToDecimal(dr["VATableValue"].ToString());
                    vm.ReturnTransactionType = dr["ReturnTransactionType"].ToString();
                    vm.VATableValue = Convert.ToDecimal(dr["VATableValue"].ToString());
                    vm.ReceiveDate = dr["ReceiveDate"].ToString();
                    vm.InvoiceDateTime = dr["InvoiceDateTime"].ToString();
                    vm.ProductName = dr["ProductName"].ToString();
                    vm.ProductCode = dr["ProductCode"].ToString();
                    vm.CreatedBy = dr["CreatedBy"].ToString();
                    vm.CreatedOn = dr["CreatedOn"].ToString();
                    vm.LastModifiedBy = dr["LastModifiedBy"].ToString();
                    vm.LastModifiedOn = dr["LastModifiedOn"].ToString();
                    vm.PurchaseReturnId = dr["PurchaseReturnId"].ToString();
                    ////newly added fields

                    vm.POLineNo = dr["POLineNo"].ToString();
                    vm.TransactionType = dr["TransactionType"].ToString();
                    vm.ReturnId = dr["PurchaseReturnId"].ToString();
                    vm.VDSRate = Convert.ToDecimal(dr["VDSRate"].ToString());
                    vm.VDSAmount = Convert.ToDecimal(dr["VDSAmount"].ToString());
                    vm.USDValue = Convert.ToDecimal(dr["USDValue"].ToString());
                    vm.USDVAT = Convert.ToDecimal(dr["USDVAT"].ToString());
                    vm.IsFixedVAT = dr["IsFixedVAT"].ToString();
                    vm.FixedVATAmount = Convert.ToDecimal(dr["FixedVATAmount"].ToString());

                    vm.TDSCode = dr["TDSCode"].ToString();
                    vm.TDSSection = dr["TDSSection"].ToString();
                    vm.AITAmount = Convert.ToDecimal(dr["AITAmount"].ToString());

                    vm.ATAmount = vm.ATVAmount;
                    //
                    vm.ExpireDate = dr["ExpireDate"].ToString();
                    vm.CPCName = dr["CPCName"].ToString();
                    vm.BEItemNo = dr["BEItemNo"].ToString();
                    vm.HSCode = dr["HSCode"].ToString();
                    vm.FixedVATRebate = dr["FixedVATRebate"].ToString();
                    vm.OtherRef = dr["OtherRef"].ToString();

                    vm.PurchaseReturnId = dr["PurchaseReturnId"].ToString();
                    vm.PreviousInvoiceDateTime = OrdinaryVATDesktop.DateTimeToDate(dr["PreviousInvoiceDateTime"].ToString());

                    vm.PreviousNBRPrice = Convert.ToDecimal(dr["PreviousNBRPrice"].ToString());
                    vm.PreviousQuantity = Convert.ToDecimal(dr["PreviousQuantity"].ToString());
                    vm.PreviousUOM = dr["PreviousUOM"].ToString();
                    vm.PreviousSubTotal = Convert.ToDecimal(dr["PreviousSubTotal"].ToString());
                    vm.PreviousVATRate = Convert.ToDecimal(dr["PreviousVATRate"].ToString());
                    vm.PreviousVATAmount = Convert.ToDecimal(dr["PreviousVATAmount"].ToString());
                    vm.PreviousSDAmount = Convert.ToDecimal(dr["PreviousSDAmount"].ToString());

                    vm.ReasonOfReturn = dr["ReasonOfReturn"].ToString();
                    vm.Section21 = dr["Section21"].ToString();


                    #region Total

                    decimal vImpTotalPrice = 0;

                    decimal vImpInsurance1 = vm.InsuranceAmount;
                    decimal vImpCnF1 = vm.CnFAmount;
                    decimal vImpAV1 = vm.SubTotal;
                    decimal vImpCD1 = vm.CDAmount;
                    decimal vImpRD1 = vm.RDAmount;
                    decimal vImpTVB1 = vm.TVBAmount;
                    decimal vImpSD1 = vm.SDAmount;
                    decimal vImpVAT1 = vm.VATAmount;
                    decimal vImpATV1 = vm.ATVAmount;
                    decimal vImpTVA1 = vm.TVAAmount;
                    decimal vImpOthers1 = vm.OthersAmount;
                    decimal vImpAIT1 = vm.AITAmount;

                    vImpTotalPrice = (vImpAV1 + vImpCD1 + vImpRD1 + vImpTVB1 + vImpSD1 + vImpVAT1 + vImpATV1 +
                                              vImpOthers1 + vImpOthers1 + vImpTVA1 + vImpInsurance1 + vImpCnF1);

                    ////vm.Total = vm.SubTotal + vm.VATAmount + vm.SDAmount;

                    vm.Total = vImpTotalPrice;
                    #endregion

                    #region Duty Remarks

                    DataTable dtDuty = new DataTable();

                    dtDuty = SearchPurchaseDutyDTNew(vm.PurchaseInvoiceNo, connVM, vm.ItemNo, VcurrConn, Vtransaction);

                    foreach (DataRow drDuty in dtDuty.Rows)
                    {
                        vm.DutyRemarks = drDuty["Remarks"].ToString();
                    }
                    #endregion

                    VMs.Add(vm);
                }

                #endregion SqlExecution

                #endregion
            }

            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {

            }
            #endregion
            return VMs;
        }

        public DataTable SelectPurchaseDetail(string PurchaseInvoiceNo, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, bool Dt = false, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                #region SqlText

                sqlText = @"
SELECT
 pd.Id
,ISNULL(pd.BOMId,0) BOMId
,pd.PurchaseInvoiceNo
,pd.POLineNo
,pd.ItemNo
,ISNULL(pd.Quantity,0) Quantity
,ISNULL(pd.CostPrice,0) CostPrice
,ISNULL(pd.NBRPrice,0) NBRPrice
,pd.UOM
,pd.Comments
,pd.CreatedBy
,pd.CreatedOn
,pd.LastModifiedBy
,pd.LastModifiedOn
,pd.Type
,pd.ProductType
,pd.BENumber
,pd.InvoiceDateTime
,pd.ReceiveDate
,pd.Post
,ISNULL(pd.UOMQty,0) UOMQty
,ISNULL(pd.UOMPrice,0) UOMPrice
,ISNULL(pd.UOMc,0) UOMc
,pd.UOMn
,ISNULL(pd.DollerValue,0) DollerValue
,ISNULL(pd.CurrencyValue,0) CurrencyValue
,ISNULL(pd.RebateRate,0) ,RebateRate
,ISNULL(pd.RebateAmount,0) RebateAmount
,ISNULL(pd.SubTotal,0) SubTotal
,ISNULL(pd.CnFAmount,0) CnFAmount
,ISNULL(pd.InsuranceAmount,0) InsuranceAmount
,ISNULL(pd.AssessableValue,0) AssessableValue
,ISNULL(pd.CDAmount,0) CDAmount
,ISNULL(pd.RDAmount,0) RDAmount
,ISNULL(pd.SD,0) SD
,ISNULL(pd.SDAmount,0) SDAmount
,ISNULL(pd.TVBAmount,0) TVBAmount
,ISNULL(pd.VATRate,0) VATRate
,ISNULL(pd.VATAmount,0) VATAmount
,ISNULL(pd.TVAAmount,0) TVAAmount
,ISNULL(pd.ATVAmount,0) ATVAmount
,ISNULL(pd.OthersAmount,0) OthersAmount
,ISNULL(pd.AITAmount,0) AITAmount
,ISNULL(pd.VDSRate,0) VDSRate
,ISNULL(pd.VDSAmount,0) VDSAmount
,ISNULL(pd.USDValue,0) USDValue
,ISNULL(pd.USDVAT,0) USDVAT
,ISNULL(pd.VATableValue,0) VATableValue
,pd.TransactionType
,ISNULL(pd.PurchaseReturnId,'0') PurchaseReturnId
,pd.ReturnTransactionType
,p.ProductName
,p.ProductCode
,ISNULL(pd.TDSCode,'-') TDSCode
,ISNULL(pd.TDSSection,'-') TDSSection
,isnull(isnull(p.OpeningBalance,0)+isnull(p.QuantityInHand,0),0) as Stock
,ISNULL(pd.IsFixedVAT,'N') IsFixedVAT
,ISNULL(pd.FixedVATAmount,0) FixedVATAmount
,ISNULL(pd.InvoiceValue,0) InvoiceValue
,ISNULL(pd.ExchangeRate,0) ExchangeRate
,ISNULL(pd.ExpireDate,'2100-01-01') ExpireDate
,ISNULL(pd.CPCName,'-') CPCName
,ISNULL(pd.BEItemNo,'-') BEItemNo
,ISNULL(pd.HSCode,'-') HSCode
,pd.Currency
,ISNULL(pd.FixedVATRebate,'Y')FixedVATRebate
,ISNULL(pd.OtherRef,'-')OtherRef

,isnull(pd.PurchaseReturnId,'N/A')                                                                AS PurchaseReturnId
,convert (varchar,isnull(pd.PreviousInvoiceDateTime,'01/01/1900'),120)                            AS PreviousInvoiceDateTime
,isnull(pd.PreviousNBRPrice ,'0')                                                                 AS PreviousNBRPrice
,isnull(pd.PreviousQuantity ,'0')                                                                 AS PreviousQuantity
,isnull(pd.PreviousUOM ,'0')                                                                      AS PreviousUOM
,isnull(pd.PreviousSubTotal ,'0')                                                                 AS PreviousSubTotal
,isnull(pd.PreviousVATRate ,'0')                                                                  AS PreviousVATRate
,isnull(pd.PreviousVATAmount ,'0')                                                                AS PreviousVATAmount
,isnull(pd.PreviousSDAmount ,'0')                                                                 AS PreviousSDAmount
,isnull(pd.ReasonOfReturn ,'N/A')                                                                 AS ReasonOfReturn
,isnull(pd.Section21 ,'N/A')                                                                 AS Section21

FROM PurchaseInvoiceDetails pd left outer join Products p on pd.ItemNo=p.ItemNo
WHERE  1=1

";

                if (PurchaseInvoiceNo != null)
                {
                    sqlText += "AND pd.PurchaseInvoiceNo=@PurchaseInvoiceNo";
                }
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                sqlText += " ORDER BY pd.ItemNo";
                #endregion SqlText
                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (PurchaseInvoiceNo != null)
                {
                    da.SelectCommand.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);
                }

                da.Fill(dt);

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public DataTable SelectPurchaseDetailFromTemp(string PurchaseInvoiceNo, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, bool Dt = false, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                #region SqlText

                sqlText = @"
SELECT
 pd.Id
,ISNULL(pd.BOMId,0) BOMId
,pd.Previous_Purchase_No PurchaseInvoiceNo
,row_number() OVER (ORDER BY pd.Id)  POLineNo
,pd.ItemNo
,ISNULL(pd.Quantity,0) Quantity
,pd.Total_Price CostPrice
,pd.Total_Price NBRPrice
,pd.UOM
,pd.Comments
,''CreatedBy
,'1900-01-01'CreatedOn
,''LastModifiedBy
,'1900-01-01' LastModifiedOn
, 'nonvat' Type 
,'' ProductType
,pd.BE_Number BENumber
,pd.Invoice_Date InvoiceDateTime
,pd.Receive_Date ReceiveDate
,pd.Post
,0 UOMQty
,0 UOMPrice
,1 UOMc
, p.UOM UOMn
,0 DollerValue
,0 CurrencyValue
,0RebateRate
,0 RebateAmount
,0 SubTotal
,0CnFAmount
,0 InsuranceAmount
,0 AssessableValue
,0 CDAmount
,0 RDAmount
,0 SD
,0 SDAmount
,0 TVBAmount
,0 VATRate
,0 VATAmount
,0 TVAAmount
,0 ATVAmount
,0 OthersAmount
,0 AITAmount
,0 VDSRate
,0 VDSAmount
,1 USDValue
,0 USDVAT
,0 VATableValue
,pd.Transection_Type TransactionType
,pd.Previous_Purchase_No PurchaseReturnId
,'' ReturnTransactionType
,p.ProductName
,p.ProductCode
,'-'TDSCode
,'-' TDSSection
,isnull(isnull(p.OpeningBalance,0)+isnull(p.QuantityInHand,0),0) as Stock
,0 IsFixedVAT
,0 FixedVATAmount

FROM TempPurchaseData pd left outer join Products p on pd.ItemNo=p.ItemNo
WHERE  1=1

";

                if (PurchaseInvoiceNo != null)
                {
                    sqlText += "AND pd.Id=@PurchaseInvoiceNo";
                }
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }
                #endregion SqlText
                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (PurchaseInvoiceNo != null)
                {
                    da.SelectCommand.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);
                }

                da.Fill(dt);

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch

            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public DataTable SelectPurchaseDetailFromTempX(string ID, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, bool Dt = false, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                #region SqlText

                sqlText = @"
select 
pih.BOMId
,0 POLineNo
,'' PurchaseInvoiceNo
,pih.Invoice_Date InvoiceDateTime
,0 TotalAmount
,0 TotalVATAmount
,pih.Referance_No SerialNo
,pih.Comments
,''CreatedBy
,'1900-01-01'CreatedOn
,''LastModifiedBy
,'1900-01-01'LastModifiedOn
,pih.BE_Number BENumber
,''ProductType
,pih.Transection_Type TransactionType
,pih.Receive_Date ReceiveDate
,pih.Post
,0 CurrencyRateFromBDT
,'N' WithVDS
,'0'PurchaseReturnId
,pih.ID ImportIDExcel
,pih.Referance_No SerialNo1
,pih.LC_No LCNumber
,'1900-01-01'LCDate
,0 LandedCost
,0 TDSAmount
,''CustomHouse
,'N' IsVDSCompleted
,'N' IsTDS
,v.VendorName VendorName
,v.VendorGroupID 
,vg.VendorGroupName
,0 VDSAmount
,0 TDSAmount
,0 USDInvoiceValue
,pih.Id
,pih.VendorID
,'0' CurrencyID
,ISNULL(pih.BranchId,0) BranchId
,'N' IsRebate

FROM TempPurchaseData pih left outer join Vendors v on pih.VendorID=v.VendorID 
left outer join VendorGroups vg on v.VendorGroupID=vg.VendorGroupID

WHERE  1=1

";

                if (ID != null)
                {
                    sqlText += "AND pih.ID=@PurchaseInvoiceNo";
                }
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }
                #endregion SqlText
                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (ID != null)
                {
                    da.SelectCommand.Parameters.AddWithValue("@PurchaseInvoiceNo", ID);
                }

                da.Fill(dt);

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        public List<PurchaseMasterVM> DropDown(SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            string sqlText = "";
            List<PurchaseMasterVM> VMs = new List<PurchaseMasterVM>();
            PurchaseMasterVM vm;
            #endregion
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region sql statement
                sqlText = @"
SELECT
af.Id
,af.PurchaseInvoiceNo
FROM PurchaseInvoiceHeaders af
WHERE  1=1
";


                SqlCommand objComm = new SqlCommand(sqlText, currConn);

                SqlDataReader dr;
                dr = objComm.ExecuteReader();
                while (dr.Read())
                {
                    vm = new PurchaseMasterVM();
                    vm.Id = dr["Id"].ToString();
                    vm.PurchaseInvoiceNo = dr["PurchaseInvoiceNo"].ToString();
                    VMs.Add(vm);
                }
                dr.Close();
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return VMs;
        }

        public List<PurchaseDetailVM> RateCheck(List<PurchaseDetailVM> VMs, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                foreach (PurchaseDetailVM vm in VMs)
                {
                    string msg = "";
                    string rateChange = "";

                    string[] retResults = new string[4];
                    retResults[0] = "Info";
                    msg = "Item (" + vm.ProductName + " - " + vm.ProductCode + ")";

                    rateChange = RateChangePercent(vm.ItemNo, vm.UnitPrice, connVM);
                    if (string.IsNullOrEmpty(rateChange))
                    {
                        msg = msg + "\n is not included in any price declaration \nUnit Price";
                    }
                    else
                    {
                        msg = msg + rateChange + "\n Unit Price";
                    }
                    retResults[1] = msg;
                    vm.retResults = retResults;
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

            }
            return VMs;
        }

        public string RateChangePercent(string ItemNo, decimal unitPrice, SysDBInfoVMTemp connVM = null)
        {
            string result = string.Empty;
            try
            {
                string vRateChangePromotePercent = _cDal.settings("Purchase", "RateChangePromote", null, null, connVM);
                decimal RateChangePromote = Convert.ToDecimal(vRateChangePromotePercent);


                decimal plusRateChangePromotPercent = 0;
                decimal minusRateChangePromotPercent = 0;
                plusRateChangePromotPercent = Convert.ToDecimal("+" + RateChangePromote);
                minusRateChangePromotPercent = Convert.ToDecimal("-" + RateChangePromote);
                ProductDAL productDal = new ProductDAL();
                decimal bomVatablePrice = productDal.GetLastVatableFromBOM(ItemNo, null, null, connVM);
                if (bomVatablePrice <= 0)
                {
                    result = "This item is not included in any price declaration";
                    return result;
                }
                decimal changes = (unitPrice - bomVatablePrice) * 100 / bomVatablePrice;
                if (changes > plusRateChangePromotPercent || changes < minusRateChangePromotPercent)
                {
                    result = "In Purchase price : " + unitPrice.ToString("0,0.0000") + "\nIn Last Price Declaration : " + bomVatablePrice.ToString("0,0.0000") + "" +
                                    "\nChanges : " + changes.ToString("0,0.0000") + "%";
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

            }
            return result;

        }

        public string[] ImportExcelFile(PurchaseMasterVM paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "ImportExcelFile"; //Method Name
            string Transaction_Type = null;

            #endregion

            #region try
            try
            {
                DataSet ds = new DataSet();
                DataTable dt = new DataTable();


                #region Excel Reader

                string FileName = paramVM.File.FileName;

                IExcelDataReader reader = null;
                if (FileName.EndsWith(".xls"))
                {
                    reader = ExcelReaderFactory.CreateBinaryReader(paramVM.File.InputStream);
                }
                else if (FileName.EndsWith(".xlsx"))
                {
                    reader = ExcelReaderFactory.CreateOpenXmlReader(paramVM.File.InputStream);
                }
                reader.IsFirstRowAsColumnNames = true;
                ds = reader.AsDataSet();

                dt = ds.Tables[0];
                reader.Close();

                #endregion   

                ////  BugsBD

                //    XmlReaderSettings  settings = new XmlReaderSettings()
                //    {
                //      DtdProcessing = DtdProcessing.Parse,
                //      XmlResolver = new XmlUrlResolver(),
                //      MaxCharactersFromEntities = 0
                //    };

                //    using (var xmlReader = XmlReader.Create(paramVM.File.FileName, settings))
                //    {       
                //                    settings.DtdProcessing = DtdProcessing.Ignore;
                //                    ds.ReadXml(xmlReader);
                //    }

                ////  BugsBD

                DataTable dtPurchaseM = new DataTable();
                dtPurchaseM = ds.Tables["PurchaseM"];

                dtPurchaseM = OrdinaryVATDesktop.DtDateCheck(dtPurchaseM, new string[] { "Invoice_Date", "Receive_Date" });

                #region TransactionType Cloumn Check

                if (!dtPurchaseM.Columns.Contains("Transaction_Type"))
                {
                    throw new ArgumentNullException("", "TransactionType Column Required in Excel Template");
                }
                else
                {
                    DataView view = new DataView(dtPurchaseM);
                    DataTable distinctValues = view.ToTable(true, "Transaction_Type");
                    if (distinctValues.Rows.Count > 1)
                    {
                        throw new ArgumentNullException("", "There Multiple TransactionType Value in Excel Template");
                    }
                    else
                    {
                        Transaction_Type = distinctValues.Rows[0]["Transaction_Type"].ToString();

                        if (Transaction_Type != paramVM.TransactionType)
                        {
                            throw new ArgumentNullException("", "This Excel Template Can’t be upload here only Upload TransactionType '" + paramVM.TransactionType + " ' Data");
                        }

                    }
                }

                #endregion

                #region Data Insert
                PurchaseDAL puchaseDal = new PurchaseDAL();
                retResults = puchaseDal.SaveTempPurchase(dtPurchaseM, paramVM.BranchCode, paramVM.TransactionType, paramVM.CurrentUser, paramVM.BranchId, () => { }, null, null, connVM, paramVM.CurrentUser, true);
                if (retResults[0] == "Fail")
                {
                    throw new ArgumentNullException("", retResults[4]);
                }
                #endregion

                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Save Successfully.";
                ////////retResults[2] = vm.Id.ToString();
                #endregion SuccessResult
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("PurchaseDAL", "ImportExcelFile", ex.ToString() + "\n" + sqlText);
                throw ex;
            }
            finally
            {
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        public List<PurchaseDutiesVM> SelectAllDuties(string PurchaseInvoiceNo, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            List<PurchaseDutiesVM> VMs = new List<PurchaseDutiesVM>();
            PurchaseDutiesVM vm;
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                #region SqlExecution

                DataTable dt = SelectAllDuties(PurchaseInvoiceNo, conditionFields, conditionValues, currConn, transaction, false, connVM);

                foreach (DataRow dr in dt.Rows)
                {
                    vm = new PurchaseDutiesVM();
                    vm.Id = dr["Id"].ToString();
                    vm.PIDutyID = dr["PIDutyID"].ToString();
                    vm.PurchaseInvoiceNo = dr["PurchaseInvoiceNo"].ToString();
                    vm.CnFInp = Convert.ToDecimal(dr["CnFInp"].ToString());
                    vm.CnFRate = Convert.ToDecimal(dr["CnFRate"].ToString());
                    vm.CnFAmount = Convert.ToDecimal(dr["CnFAmount"].ToString());
                    vm.InsuranceInp = Convert.ToDecimal(dr["InsuranceInp"].ToString());
                    vm.InsuranceRate = Convert.ToDecimal(dr["InsuranceRate"].ToString());
                    vm.InsuranceAmount = Convert.ToDecimal(dr["InsuranceAmount"].ToString());
                    vm.AssessableInp = Convert.ToDecimal(dr["AssessableInp"].ToString());
                    vm.AssessableValue = Convert.ToDecimal(dr["AssessableValue"].ToString());
                    vm.CDInp = Convert.ToDecimal(dr["CDInp"].ToString());
                    vm.CDRate = Convert.ToDecimal(dr["CDRate"].ToString());
                    vm.CDAmount = Convert.ToDecimal(dr["CDAmount"].ToString());
                    vm.RDInp = Convert.ToDecimal(dr["RDInp"].ToString());
                    vm.RDRate = Convert.ToDecimal(dr["RDRate"].ToString());
                    vm.RDAmount = Convert.ToDecimal(dr["RDAmount"].ToString());
                    vm.TVBInp = Convert.ToDecimal(dr["TVBInp"].ToString());
                    vm.TVBRate = Convert.ToDecimal(dr["TVBRate"].ToString());
                    vm.TVBAmount = Convert.ToDecimal(dr["TVBAmount"].ToString());
                    vm.SDInp = Convert.ToDecimal(dr["SDInp"].ToString());
                    vm.SD = Convert.ToDecimal(dr["SD"].ToString());
                    vm.SDAmount = Convert.ToDecimal(dr["SDAmount"].ToString());
                    vm.VATInp = Convert.ToDecimal(dr["VATInp"].ToString());
                    vm.VATRate = Convert.ToDecimal(dr["VATRate"].ToString());
                    vm.VATAmount = Convert.ToDecimal(dr["VATAmount"].ToString());
                    vm.TVAInp = Convert.ToDecimal(dr["TVAInp"].ToString());
                    vm.TVARate = Convert.ToDecimal(dr["TVARate"].ToString());
                    vm.TVAAmount = Convert.ToDecimal(dr["TVAAmount"].ToString());
                    vm.ATVInp = Convert.ToDecimal(dr["ATVInp"].ToString());
                    vm.ATVRate = Convert.ToDecimal(dr["ATVRate"].ToString());
                    vm.ATVAmount = Convert.ToDecimal(dr["ATVAmount"].ToString());
                    vm.OthersInp = Convert.ToDecimal(dr["OthersInp"].ToString());
                    vm.OthersRate = Convert.ToDecimal(dr["OthersRate"].ToString());
                    vm.OthersAmount = Convert.ToDecimal(dr["OthersAmount"].ToString());
                    vm.CreatedBy = dr["CreatedBy"].ToString();
                    vm.CreatedOn = dr["CreatedOn"].ToString();
                    vm.LastModifiedBy = dr["LastModifiedBy"].ToString();
                    vm.LastModifiedOn = dr["LastModifiedOn"].ToString();
                    vm.TransactionType = dr["TransactionType"].ToString();
                    vm.Post = dr["Post"].ToString();
                    vm.Remarks = dr["Remarks"].ToString();
                    vm.ItemNo = dr["ItemNo"].ToString();
                    vm.DutyCompleteQuantity = Convert.ToDecimal(dr["DutyCompleteQuantity"].ToString());
                    vm.DutyCompleteQuantityPercent = Convert.ToDecimal(dr["DutyCompleteQuantityPercent"].ToString());
                    vm.LineCost = Convert.ToDecimal(dr["LineCost"].ToString());
                    vm.UnitCost = Convert.ToDecimal(dr["UnitCost"].ToString());
                    vm.Quantity = Convert.ToDecimal(dr["Quantity"].ToString());

                    VMs.Add(vm);
                }


                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return VMs;
        }

        public DataTable SelectAllDuties(string PurchaseInvoiceNo, string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, bool Dt = false, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();
            #endregion
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction
                #region sql statement
                #region SqlText

                sqlText = @"
SELECT
 PIDutyID
,PurchaseInvoiceNo
,CnFInp
,CnFRate
,CnFAmount
,InsuranceInp
,InsuranceRate
,InsuranceAmount
,AssessableInp
,AssessableValue
,CDInp
,CDRate
,CDAmount
,RDInp
,RDRate
,RDAmount
,TVBInp
,TVBRate
,TVBAmount
,SDInp
,SD
,SDAmount
,VATInp
,VATRate
,VATAmount
,TVAInp
,TVARate
,TVAAmount
,ATVInp
,ATVRate
,ATVAmount
,OthersInp
,OthersRate
,OthersAmount
,CreatedBy
,CreatedOn
,LastModifiedBy
,LastModifiedOn
,TransactionType
,Post
,Remarks
,ItemNo
,DutyCompleteQuantity
,DutyCompleteQuantityPercent
,LineCost
,UnitCost
,Quantity
,Id

FROM PurchaseInvoiceDuties
WHERE  1=1
";


                if (PurchaseInvoiceNo != null)
                {
                    sqlText += @" and PurchaseInvoiceNo=@PurchaseInvoiceNo";
                }

                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }
                #endregion SqlText
                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                if (PurchaseInvoiceNo != null)
                {
                    da.SelectCommand.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);
                }
                da.Fill(dt);
                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }
                #endregion
            }
            #region catch
            catch (SqlException sqlex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dt;
        }

        #endregion

        #region Basic Methods

        public string[] BENumberCheck(string VendorID, string BENumber, string CurrentYear, string PurchaseInvoiceNo = "", SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, int branchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            IssueDAL issDal = new IssueDAL();
            ReceiveDAL recDal = new ReceiveDAL();
            int transResult = 0;
            string sqlText = "";


            #endregion Initializ

            #region Try
            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Find ID for Post

                sqlText = "";

                sqlText = @"select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE VendorID=@VendorID and BENumber=@BENumber 
and PeriodID in(select PeriodID from FiscalYear where CurrentYear=@CurrentYear) ";

                if (!string.IsNullOrWhiteSpace(PurchaseInvoiceNo))
                {
                    sqlText += @" and PurchaseInvoiceNo !=@PurchaseInvoiceNo ";
                }

                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@VendorID", VendorID);
                cmdFindIdUpd.Parameters.AddWithValue("@BENumber", BENumber);
                cmdFindIdUpd.Parameters.AddWithValue("@CurrentYear", CurrentYear);

                if (!string.IsNullOrWhiteSpace(PurchaseInvoiceNo))
                {
                    cmdFindIdUpd.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);

                }

                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist > 0)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNameBENumbercheck, MessageVM.BENumberAlreadyExit);
                }

                #endregion Find ID for Update

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.purchaseMsgSuccessfullyPost;

                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }
                //throw new ArgumentNullException("", sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("PurchaseDAL", "EBNumberCheck", ex.ToString() + "\n" + sqlText);

                //throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion Catch and Finall

            #region Result

            return retResults;

            #endregion Result

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] PurchaseInsert(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, List<PurchaseDutiesVM> Duties, List<TrackingVM> Trackings,
            SqlTransaction Vtransaction, SqlConnection VcurrConn, int branchId = 0, SysDBInfoVMTemp connVM = null, string UserId = "")
        {

            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            //retResults[4] = "";
            string Id = "";
            ProductDAL productDal = new ProductDAL();
            ReceiveDAL recDal = new ReceiveDAL();
            SaleDAL salDal = new SaleDAL();
            IssueDAL issDal = new IssueDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;


            int transResult = 0;
            string sqlText = "";
            string newIDCreate1 = "";
            int IDExist = 0;
            bool PriceDeclarationTradingProduct = false;

            #endregion Initializ

            #region Try

            try
            {
                #region Validation for Header
                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgNoDataToSave);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, "Please Check Invoice Data and Time");

                }
                CommonDAL commonDal = new CommonDAL();

                string realTimeEntry = commonDal.settings("Purchase", "EntryRealTime", currConn, transaction, connVM);
                string purchaseSaleTracking = commonDal.settings("Purchase", "PurchaseSaleTracking", currConn, transaction, connVM);

                if (realTimeEntry == "N")
                {
                    Master.ReceiveDate = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd 00:00:00");
                }


                if (Master.LCNumber != "-")
                {
                    ////if (!OrdinaryVATDesktop.IsNumber(Master.LCNumber))
                    ////{
                    ////    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, "Please Enter LC No only number");                       
                    ////}

                    ////if (Master.LCNumber.Length >= 17)
                    ////{
                    ////    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, "LC No only Number/LC No Maximum 16 digit.");

                    ////}

                }
                #endregion Validation for Header

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Settings

                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue", currConn, transaction, connVM) == "Y" ? true : false);
                PriceDeclarationTradingProduct = Convert.ToBoolean(commonDal.settingValue("PriceDeclaration", "TradingProduct", connVM, currConn, transaction) == "Y" ? true : false);

                #endregion

                #region Fiscal Year Check

                #region Find Month Lock

                string PeriodName = Convert.ToDateTime(Master.ReceiveDate).ToString("MMMM-yyyy");
                string[] cValues = { PeriodName };
                string[] cFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, cFields, cValues, currConn, transaction, connVM).FirstOrDefault();

                if (varFiscalYearVM == null)
                {
                    throw new Exception(PeriodName + ": This Fiscal Period is not Exist!");
                }

                if (varFiscalYearVM.VATReturnPost == "Y")
                {
                    throw new Exception(PeriodName + ": VAT Return (9.1) already submitted for this month!");
                }

                #endregion Find Month Lock

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock

                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }

                #endregion Fiscal Year CHECK

                #region Cpc Name check
                if (Master.TransactionType.ToLower() == "import")
                {
                    bool CheckCPC = commonDal.settings("Sale", "CheckCPC", currConn, transaction, connVM) == "Y";

                    if (CheckCPC)
                    {
                        foreach (var item in Details.ToList())
                        {
                            if (item.CPCName == "" || item.CPCName == null || item.CPCName == "-")
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgCPCNameNotAdd);
                            }
                        }

                    }

                }
                #endregion

                #region BENumber Check

                bool BECheck = commonDal.settings("Purchase", "DuplicateBECheck", currConn, transaction, connVM) == "Y";

                if (BECheck)
                {
                    retResults = BENumberCheck(Master.VendorID, Master.BENumber, varFiscalYearVM.CurrentYear, "", transaction, currConn, Master.BranchId, connVM);

                    if (retResults[0] == "Fail")
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNameBENumbercheck, MessageVM.BENumberAlreadyExit);

                    }
                }

                #endregion

                #region Find Transaction Exist

                sqlText = "";
                sqlText = sqlText + "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterId";
                SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                cmdExistTran.Transaction = transaction;
                cmdExistTran.Parameters.AddWithValueAndNullHandle("@MasterId", Master.PurchaseInvoiceNo);
                //IDExist = (int)cmdExistTran.ExecuteScalar();
                object objIDExist = cmdExistTran.ExecuteScalar();
                if (objIDExist != null)
                {
                    IDExist = Convert.ToInt32(objIDExist);
                }

                if (IDExist > 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgFindExistID);
                }

                #endregion Find Transaction Exist

                #region Purchase ID Create

                string fiscalYear = "";
                string latestId = "";

                if (string.IsNullOrEmpty(Master.TransactionType))
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgTransactionNotDeclared);
                }

                #region Other

                if (string.Equals(Master.TransactionType, "Other", StringComparison.InvariantCultureIgnoreCase))
                {

                    //newIDCreate1 = commonDal.CodeGeneration("Purchase", "Other", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction);

                    newIDCreate1 = commonDal.TransactionCode("Purchase", "Other", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("Purchase", "Other", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];

                }

                #endregion

                #region Purchase DN

                else if (string.Equals(Master.TransactionType, "PurchaseDN", StringComparison.InvariantCultureIgnoreCase))
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "PurchaseDN", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("Purchase", "PurchaseDN", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Purchase CN

                else if (string.Equals(Master.TransactionType, "PurchaseCN", StringComparison.InvariantCultureIgnoreCase))
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "PurchaseCN", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);


                    string resultCode = commonDal.GetCurrentCode("Purchase", "PurchaseCN", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Trading

                else if (string.Equals(Master.TransactionType, "Trading", StringComparison.InvariantCultureIgnoreCase)) //s
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "Trading", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);


                    string resultCode = commonDal.GetCurrentCode("Purchase", "Trading", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Toll Receive

                else if (string.Equals(Master.TransactionType, "TollReceive", StringComparison.InvariantCultureIgnoreCase))
                {
                    newIDCreate1 = commonDal.TransactionCode("TollReceive", "TollReceive", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                             "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);


                    string resultCode = commonDal.GetCurrentCode("TollReceive", "TollReceive", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Import

                else if (

                    string.Equals(Master.TransactionType, "Import", StringComparison.InvariantCultureIgnoreCase)
                    || string.Equals(Master.TransactionType, "ServiceImport", StringComparison.InvariantCultureIgnoreCase)
                    || string.Equals(Master.TransactionType, "ServiceNSImport", StringComparison.InvariantCultureIgnoreCase)
                    || string.Equals(Master.TransactionType, "TradingImport", StringComparison.InvariantCultureIgnoreCase)
                    || string.Equals(Master.TransactionType, "InputServiceImport", StringComparison.InvariantCultureIgnoreCase))
                {
                    //newIDCreate1 = commonDal.CodeGeneration("Purchase", "Import", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction);

                    newIDCreate1 = commonDal.TransactionCode("Purchase", "Import", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("Purchase", "Import", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];

                }

                #endregion

                #region Input Service

                else if (string.Equals(Master.TransactionType, "InputService", StringComparison.InvariantCultureIgnoreCase))
                {

                    ////FileLogger.Log("PurchaseDAL", "PurchaseInsert - Get TransactionCode ", "Branch Id" + Master.BranchId.ToString());


                    newIDCreate1 = commonDal.TransactionCode("Purchase", "InputService", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    ////FileLogger.Log("PurchaseDAL", "PurchaseInsert - GetCurrentCode ", "Branch Id" + Master.BranchId.ToString());

                    string resultCode = commonDal.GetCurrentCode("Purchase", "InputService", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Purchase Toll charge

                else if (string.Equals(Master.TransactionType, "PurchaseTollcharge", StringComparison.InvariantCultureIgnoreCase))
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "PurchaseTollcharge", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);


                    string resultCode = commonDal.GetCurrentCode("Purchase", "PurchaseTollcharge", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Toll Receive Raw

                else if (string.Equals(Master.TransactionType, "TollReceiveRaw", StringComparison.InvariantCultureIgnoreCase))
                {
                    newIDCreate1 = commonDal.TransactionCode("TollReceiveRaw", "TollReceiveRaw", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("TollReceiveRaw", "TollReceiveRaw", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Purchase Return

                else if (string.Equals(Master.TransactionType, "PurchaseReturn", StringComparison.InvariantCultureIgnoreCase))
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "PurchaseReturn", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);


                    string resultCode = commonDal.GetCurrentCode("Purchase", "PurchaseReturn", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];

                }

                #endregion

                #region Service

                else if (Master.TransactionType == "Service")
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "Service", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("Purchase", "Service", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];


                }

                #endregion

                #region Service NS

                else if (Master.TransactionType == "ServiceNS")
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "ServiceNS", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);


                    string resultCode = commonDal.GetCurrentCode("Purchase", "ServiceNS", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];
                }

                #endregion

                #region Commercial Importer

                else if (Master.TransactionType == "CommercialImporter")
                {
                    newIDCreate1 = commonDal.TransactionCode("Purchase", "CommercialImporter", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("Purchase", "CommercialImporter", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];

                }

                #endregion

                #region Client Raw Receive

                else if (Master.TransactionType == "ClientRawReceive")
                {

                    newIDCreate1 = commonDal.TransactionCode("Toll", "RawReceive", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("Toll", "RawReceive", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];

                }

                #endregion

                #region Client FG Receive WOBOM

                else if (Master.TransactionType == "ClientFGReceiveWOBOM")
                {

                    //newIDCreate1 = commonDal.CodeGeneration("Purchase", "Other", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction);

                    newIDCreate1 = commonDal.TransactionCode("Toll", "FGReceive", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string resultCode = commonDal.GetCurrentCode("Toll", "FGReceive", Master.ReceiveDate, Master.BranchId.ToString(), currConn, transaction, connVM);

                    string[] newIdara = resultCode.Split('~');

                    latestId = newIdara[0];
                    fiscalYear = newIdara[1];

                }

                #endregion

                if (string.IsNullOrEmpty(newIDCreate1) || newIDCreate1 == "")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                            "ID Prefetch not set please update Prefetch first");
                }

                #region checkId and FiscalYear

                sqlText = @"select count(PurchaseInvoiceNumber) 
from PurchaseInvoiceHeaders 
where PurchaseInvoiceNumber = @PurchaseInvoiceNumber and FiscalYear = @FiscalYear and TransactionType = @TransactionType and BranchId=@BranchId";

                SqlCommand sqlCmd = new SqlCommand(sqlText, currConn, transaction);

                sqlCmd.Parameters.AddWithValue("@PurchaseInvoiceNumber", latestId);
                sqlCmd.Parameters.AddWithValue("@FiscalYear", fiscalYear);
                sqlCmd.Parameters.AddWithValue("@TransactionType", Master.TransactionType);
                sqlCmd.Parameters.AddWithValue("@BranchId", Master.BranchId);

                int count1 = (int)sqlCmd.ExecuteScalar();

                if (count1 > 0)
                {
                    FileLogger.Log("PurchaseDAL", "Insert", "SaleInvoiceNumber " + newIDCreate1 + " Already Exists");
                    throw new Exception("Purchase Id " + newIDCreate1 + " Already Exists");
                }

                #endregion

                #region Check Existing Id

                sqlText = "select count(PurchaseInvoiceNo) from PurchaseInvoiceHeaders where PurchaseInvoiceNo = @PurchaseInvoiceNo";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.AddWithValue("@PurchaseInvoiceNo", newIDCreate1);

                int count = (int)cmd.ExecuteScalar();

                if (count > 0)
                {
                    FileLogger.Log("PurchaseDAL", "Insert", "Purchase Id " + newIDCreate1 + " Already Exists");
                    throw new Exception("Purchase Id " + newIDCreate1 + " Already Exists");
                }

                #endregion

                Master.PurchaseInvoiceNo = newIDCreate1;

                //}
                // newID = newID + "-W";
                #endregion Purchase ID Create

                #region RebateWithGRN

                DataTable settingsDt = new DataTable();

                bool RebateWithGRN = false;

                if (settingVM.SettingsDTUser == null)
                {
                    settingsDt = new CommonDAL().SettingDataAll(null, null, connVM);
                }

                RebateWithGRN = commonDal.settingsDesktop("Purchase", "RebateWithGRN", settingsDt, connVM) == "Y";

                #endregion

                #region PeriodId & Rebate PeriodId Check

                string PeriodIdCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("MMyyyy");
                string RebatePeriodIdCheck = Convert.ToDateTime(Master.RebateDate).ToString("MMyyyy");

                #region Rebate Check

                if (RebateWithGRN)
                {
                    Master.IsRebate = "Y";
                    Master.RebatePeriodId = PeriodIdCheck;
                    Master.RebateDate = Master.ReceiveDate;

                    //////RebateDateCheck(Master.InvoiceDate, Master.RebatePeriodId, transaction, currConn, connVM);
                }
                if (!RebateWithGRN)
                {
                    if (Master.IsRebate == "N")
                    {
                        Master.IsRebate = Master.IsRebate;
                        Master.RebatePeriodId = Master.RebatePeriodId;
                        //////Master.RebateDate = Master.RebateDate;

                    }
                    else if (Master.IsRebate == "Y")
                    {
                        Master.IsRebate = Master.IsRebate;
                        Master.RebatePeriodId = RebatePeriodIdCheck;
                        //////Master.RebateDate = Master.RebateDate;
                        //////RebateDateCheck(Master.InvoiceDate, Master.RebatePeriodId, transaction, currConn, connVM);

                    }

                }

                #endregion

                #endregion

                #region ID generated completed,Insert new Information in Header

                PurchaseMasterVM pmVM = new PurchaseMasterVM();
                pmVM.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                pmVM.VendorID = Master.VendorID;
                pmVM.CustomHouse = Master.CustomHouse;
                pmVM.CustomHouseCode = Master.CustomHouseCode;
                pmVM.InvoiceDate = Master.InvoiceDate;
                pmVM.TotalAmount = Master.TotalAmount;
                pmVM.TotalVATAmount = Master.TotalVATAmount;
                pmVM.SerialNo = Master.SerialNo;
                pmVM.LCNumber = Master.LCNumber;
                pmVM.Comments = Master.Comments;
                pmVM.CreatedBy = Master.CreatedBy;
                pmVM.CreatedOn = Master.CreatedOn;
                pmVM.LastModifiedBy = Master.LastModifiedBy;
                pmVM.LastModifiedOn = Master.LastModifiedOn;
                pmVM.BENumber = Master.BENumber;
                pmVM.ProductType = Master.ProductType;
                pmVM.TransactionType = Master.TransactionType;
                pmVM.ReceiveDate = Master.ReceiveDate;
                pmVM.WithVDS = Master.WithVDS;
                pmVM.ReturnId = Master.ReturnId;
                pmVM.ImportID = Master.ImportID;
                pmVM.Post = Master.Post;
                pmVM.LCDate = Master.LCDate;
                pmVM.USDInvoiceValue = Master.USDInvoiceValue;
                pmVM.LandedCost = Master.LandedCost;
                pmVM.BranchId = Master.BranchId;
                pmVM.TDSAmount = Master.TDSAmount;
                pmVM.IsTDS = Master.IsTDS;
                pmVM.InvoiceNumber = latestId;
                pmVM.FiscalYear = fiscalYear;
                pmVM.AppVersion = Master.AppVersion;
                pmVM.RebateDate = Master.RebateDate;
                pmVM.RebatePeriodId = Master.RebatePeriodId;
                pmVM.IsRebate = Master.IsRebate;
                pmVM.BankGuarantee = Master.BankGuarantee;
                pmVM.IsBankingChannelPay = Master.IsBankingChannelPay;
                pmVM.TDSRate = Master.TDSRate;
                pmVM.VehicleNo = Master.VehicleNo;
                pmVM.VehicleType = Master.VehicleType;
                pmVM.FileName = Master.FileName;
                pmVM.CompanyCode = Master.CompanyCode;

                #region Rebate Check

                ////if (RebateWithGRN)
                ////{
                ////    pmVM.IsRebate = "Y";
                ////    pmVM.RebatePeriodId = PeriodIdCheck;
                ////    pmVM.RebateDate = Master.ReceiveDate;

                ////}
                ////if (!RebateWithGRN)
                ////{
                ////    if (Master.IsRebate == "N")
                ////    {
                ////        pmVM.IsRebate = Master.IsRebate;
                ////        pmVM.RebatePeriodId = "0";
                ////        pmVM.RebateDate = Master.RebateDate;

                ////    }
                ////    else if (Master.IsRebate == "Y")
                ////    {
                ////        pmVM.IsRebate = Master.IsRebate;
                ////        pmVM.RebatePeriodId = RebatePeriodIdCheck;
                ////        pmVM.RebateDate = Master.RebateDate;

                ////    }
                ////}

                #endregion

                retResults = PurchaseInsertToMaster(pmVM, currConn, transaction, connVM);

                Id = retResults[4];

                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                }

                #endregion ID generated completed,Insert new Information in Header

                #region Insert into Details(Insert complete in Header)

                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgNoDataToSave);
                }


                #endregion Validation for Detail

                #region Set BOMId

                SetBOMId(Master, Details, currConn, transaction, connVM);

                #endregion
                //CheckHSCodeValidity(Master, Details, currConn, transaction);
                retResults = PurchaseInsert2(Master, Details, Duties, Trackings, transaction, currConn, connVM, UserId);
                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                }
                #endregion Insert into Details(Insert complete in Header)

                #region Tracking

                if (Trackings.Count() > 0)
                {
                    if (Trackings[0].transactionType == "Purchase_Return")
                    {
                        Trackings[0].ReturnPurchaseID = Master.PurchaseInvoiceNo;
                        string trackingUpdate = string.Empty;
                        TrackingDAL trackingDal = new TrackingDAL();
                        trackingUpdate = trackingDal.TrackingUpdate(Trackings, transaction, currConn, connVM);

                        if (trackingUpdate == "Fail")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Tracking Information not added.");
                        }
                    }
                    else
                    {

                        foreach (TrackingVM tracking in Trackings.ToList())
                        {

                            #region Find Heading1 Existence

                            sqlText = "";
                            sqlText += "select COUNT(Heading1) from Trackings WHERE Heading1 = @trackingHeading1";
                            SqlCommand cmdFindHeading1 = new SqlCommand(sqlText, currConn);
                            cmdFindHeading1.Transaction = transaction;

                            cmdFindHeading1.Parameters.AddWithValue("@trackingHeading1", tracking.Heading1);

                            objIDExist = cmdFindHeading1.ExecuteScalar();
                            if (objIDExist != null)
                            {
                                IDExist = Convert.ToInt32(objIDExist);
                            }

                            if (IDExist > 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                "Requested Tracking Information (" + tracking.Heading1 + ") already added.");
                            }

                            #endregion Find Heading1 Existence

                            #region Find Heading2 Existence

                            sqlText = "";
                            sqlText += "select COUNT(Heading2) from Trackings WHERE Heading2 =@trackingHeading2";
                            SqlCommand cmdFindHeading2 = new SqlCommand(sqlText, currConn);
                            cmdFindHeading2.Transaction = transaction;

                            cmdFindHeading2.Parameters.AddWithValue("@trackingHeading2", tracking.Heading2);

                            objIDExist = cmdFindHeading2.ExecuteScalar();
                            if (objIDExist != null)
                            {
                                IDExist = Convert.ToInt32(objIDExist);
                            }

                            if (IDExist > 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                 "Requested Tracking Information (" + tracking.Heading2 + ") already added.");
                            }

                            #endregion Find Heading2 Existence


                            sqlText = "";
                            sqlText += " insert into Trackings";
                            sqlText += " (";

                            sqlText += " PurchaseInvoiceNo,";
                            sqlText += " ItemNo,";
                            sqlText += " TrackLineNo,";
                            sqlText += " Heading1,";
                            sqlText += " Heading2,";
                            sqlText += " Quantity,";
                            sqlText += " UnitPrice,";
                            sqlText += " IsPurchase,";
                            sqlText += " IsIssue,";
                            sqlText += " IsReceive,";
                            sqlText += " IsSale,";
                            sqlText += " Post,";
                            sqlText += " ReceivePost,";
                            sqlText += " SalePost,";
                            sqlText += " IssuePost,";
                            sqlText += " CreatedBy,";
                            sqlText += " CreatedOn,";
                            sqlText += " LastModifiedBy,";
                            sqlText += " LastModifiedOn,";
                            sqlText += " BranchId";
                            sqlText += " )";
                            sqlText += " values";
                            sqlText += " (";

                            sqlText += "'" + Master.PurchaseInvoiceNo + "',";
                            sqlText += "@trackingItemNo,";
                            sqlText += "@trackingTrackingLineNo,";
                            sqlText += "@trackingHeading1,";
                            sqlText += "@trackingHeading2,";
                            sqlText += "@trackingQuantity,";
                            sqlText += "@trackingUnitPrice,";
                            sqlText += "@trackingIsPurchase,";
                            sqlText += "@trackingIsIssue,";
                            sqlText += "@trackingIsReceive,";
                            sqlText += "@trackingIsSale,";
                            sqlText += "@MasterPost,";
                            sqlText += "'N',";
                            sqlText += "'N',";
                            sqlText += "'N',";

                            sqlText += "@MasterCreatedBy,";
                            sqlText += "@MasterCreatedOn,";
                            sqlText += "@MasterLastModifiedBy,";
                            sqlText += "@MasterLastModifiedOn,";
                            sqlText += "@BranchId";

                            sqlText += ")";

                            SqlCommand cmdInsertTrackings = new SqlCommand(sqlText, currConn);
                            cmdInsertTrackings.Transaction = transaction;
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedBy", Master.CreatedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedOn", OrdinaryVATDesktop.DateToDate(Master.CreatedOn));
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));

                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingTrackingLineNo", tracking.TrackingLineNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading2", tracking.Heading2);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingQuantity", tracking.Quantity);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingUnitPrice", tracking.UnitPrice);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsPurchase", tracking.IsPurchase);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsIssue", tracking.IsIssue);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsReceive", tracking.IsReceive);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsSale", tracking.IsSale);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@BranchId", Master.BranchId);

                            transResult = (int)cmdInsertTrackings.ExecuteNonQuery();

                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgSaveNotSuccessfully);
                            }
                        }

                    }

                }

                #endregion Tracking

                #region Update PeriodId

                sqlText = "";
                sqlText += @"

UPDATE PurchaseInvoiceHeaders 
SET PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDate)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDate)),6)
WHERE PurchaseInvoiceNo = @PurchaseInvoiceNo


UPDATE PurchaseInvoiceDetails 
SET PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDate)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDate)),6)
WHERE PurchaseInvoiceNo = @PurchaseInvoiceNo

update PurchaseInvoiceHeaders set WithVDS=d.WithVDS
from (select PurchaseInvoiceNo, case when VDSAmount>0 then 'Y' else 'N' end WithVDS  from PurchaseInvoiceDetails
where VDSAmount>0  
) d 
where d.PurchaseInvoiceNo=PurchaseInvoiceHeaders.PurchaseInvoiceNo
and PurchaseInvoiceHeaders.PurchaseInvoiceNo=@PurchaseInvoiceNo

";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn, transaction);
                cmdUpdate.Parameters.AddWithValue("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                transResult = cmdUpdate.ExecuteNonQuery();

                #endregion

                #region Master Settings Update

                //PurchasePostAVGPrice(Master, null, new List<PurchaseDetailVM>(), currConn, transaction);

                CommonDAL commonDAL = new CommonDAL();
                //commonDAL.settingsUpdateMaster("DayEnd", "DayEndProcess", "N", currConn, transaction);
                commonDAL.UpdateProcessFlag(Master.PurchaseInvoiceNo, Master.ReceiveDate, currConn, transaction, connVM);
                #endregion

                #region Commit

                //if (currConn != null)
                //{
                //    if (Vtransaction != null)
                //    {
                //        //if (transResult > 0)
                //        //{
                //        Vtransaction.Commit();
                //        //}
                //    }
                //}

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                #region SuccessResult
                retResults = new string[5];
                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Master.PurchaseInvoiceNo;
                retResults[3] = "N";
                retResults[4] = Id;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseInsert", ex.ToString() + "\n" + sqlText, "Purchase");

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                throw ex;
            }
            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string RebateDateCheck(string invoiceDate, string RebatePeriodId, SqlTransaction Vtransaction, SqlConnection VcurrConn, SysDBInfoVMTemp connVM = null)
        {
            #region try

            try
            {
                string result = "Fail";

                string PeriodId = RebatePeriodId;
                string[] cValues = { PeriodId };
                string[] cFields = { "PeriodID" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, cFields, cValues, null, null, connVM).FirstOrDefault();

                string fromDateString = Convert.ToDateTime(invoiceDate).ToString("dd-MM-yyyy");
                string toDateString = Convert.ToDateTime(varFiscalYearVM.PeriodStart).ToString("dd-MM-yyyy"); ;

                DateTime fromDate = DateTime.ParseExact(fromDateString, "dd-MM-yyyy", null);
                DateTime toDate = DateTime.ParseExact(toDateString, "dd-MM-yyyy", null);

                int monthDifference = (toDate.Year - fromDate.Year) * 12 + toDate.Month - fromDate.Month;

                if (monthDifference > 4)
                {
                    result = "Fail";

                    throw new ArgumentNullException("RebateMonth", "The rebate can be claimed or received within a four-month period starting from the BE date.");
                }

                result = "Success";

                return result;
            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                throw ex;
            }
            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] PurchaseInsert2(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, List<PurchaseDutiesVM> Duties, List<TrackingVM> Trackings,
            SqlTransaction Vtransaction, SqlConnection VcurrConn, SysDBInfoVMTemp connVM = null, string UserId = "")
        {

            #region Initializ
            string vProductType = "";

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            //retResults[4] = "";
            ProductDAL productDal = new ProductDAL();
            ReceiveDAL recDal = new ReceiveDAL();
            SaleDAL salDal = new SaleDAL();
            IssueDAL issDal = new IssueDAL();
            object objIDExist = new object();

            int transResult = 0;
            string sqlText = "";

            int IDExist = 0;

            bool RebateWithGRN = false;

            #endregion Initializ

            #region Try

            try
            {

                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgNoDataToSave);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, "Please Check Invoice Data and Time");

                }

                #endregion Validation for Header

                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue", null, null, connVM) == "Y" ? true : false);

                #region Check Point

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");

                #endregion Fiscal Year CHECK

                bool TradingWithSale = Convert.ToBoolean(new CommonDAL().settings("Trading", "TradingWithSale", null, null, connVM).ToString().ToLower() == "y" ? true : false);

                string ItemType = "";

                if ((Master.TransactionType.ToLower() == "other" && TradingWithSale == false)
                    || (Master.TransactionType.ToLower() == "import" && TradingWithSale == false)
                    )
                {
                    foreach (PurchaseDetailVM Item in Details.ToList())
                    {
                        ItemType = productDal.GetProductTypeByItemNo(Item.ItemNo, VcurrConn, Vtransaction, connVM);

                        if (ItemType.ToString().ToLower() == "trading")
                        {
                            vProductType = "trading";
                        }
                    }

                    #region vProductType == "trading"

                    if (vProductType.ToLower() == "trading")
                    {
                        #region Insert to ReceiveHeaders
                        ReceiveMasterVM rmVM = new ReceiveMasterVM();

                        rmVM.ReceiveNo = Master.PurchaseInvoiceNo;
                        rmVM.ReceiveDateTime = Master.ReceiveDate;
                        rmVM.TotalAmount = 0;
                        rmVM.TotalVATAmount = 0;
                        rmVM.SerialNo = Master.PurchaseInvoiceNo;
                        rmVM.Comments = Master.Comments;
                        rmVM.CreatedBy = Master.CreatedBy;
                        rmVM.CreatedOn = Master.CreatedOn;
                        rmVM.LastModifiedBy = Master.LastModifiedBy;
                        rmVM.LastModifiedOn = Master.LastModifiedOn;
                        rmVM.transactionType = "TradingAuto";
                        rmVM.ReturnId = Master.ReturnId;
                        rmVM.Post = Master.Post;
                        rmVM.BranchId = Master.BranchId;

                        retResults = recDal.ReceiveInsertToMaster(rmVM, VcurrConn, Vtransaction, connVM);

                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);

                        }

                        IssueMasterVM ivm = new IssueMasterVM();
                        ivm.IssueNo = Master.PurchaseInvoiceNo;
                        ivm.IssueDateTime = Master.ReceiveDate;
                        ivm.TotalVATAmount = 0;
                        ivm.TotalAmount = 0;
                        ivm.SerialNo = Master.PurchaseInvoiceNo;
                        ivm.Comments = Master.Comments;
                        ivm.CreatedBy = Master.CreatedBy;
                        ivm.CreatedOn = Master.CreatedOn;
                        ivm.LastModifiedBy = Master.LastModifiedBy;
                        ivm.LastModifiedOn = Master.LastModifiedOn;
                        ivm.ReceiveNo = Master.PurchaseInvoiceNo;
                        ivm.transactionType = "TradingAuto";
                        ivm.ReturnId = Master.ReturnId;
                        ivm.Post = Master.Post;
                        ivm.BranchId = Master.BranchId;

                        retResults = issDal.IssueInsertToMaster(ivm, VcurrConn, Vtransaction, connVM);

                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }


                        #endregion Insert to Receive Header
                    }

                    #endregion vProductType == "trading"
                }

                #endregion

                #region if Transection not Other Insert Issue / Receive

                #region Headers For TollReceive

                if (Master.TransactionType == "TollReceive" && TollReceiveWithIssue == false)
                {

                    // not Complete Plz check again
                    #region Insert to Issue Header

                    IssueMasterVM iVm = new IssueMasterVM();

                    iVm.IssueNo = Master.PurchaseInvoiceNo;
                    iVm.IssueDateTime = Master.ReceiveDate;
                    iVm.TotalVATAmount = 0;
                    iVm.TotalAmount = 0;
                    iVm.SerialNo = Master.PurchaseInvoiceNo;
                    iVm.Comments = Master.Comments;
                    iVm.CreatedBy = Master.CreatedBy;
                    iVm.CreatedOn = Master.CreatedOn;
                    iVm.LastModifiedBy = Master.LastModifiedBy;
                    iVm.LastModifiedOn = Master.LastModifiedOn;
                    iVm.ReceiveNo = Master.PurchaseInvoiceNo;
                    iVm.transactionType = Master.TransactionType;
                    iVm.ReturnId = Master.ReturnId;
                    iVm.Post = Master.Post;
                    iVm.BranchId = Master.BranchId;

                    retResults = issDal.IssueInsertToMaster(iVm, VcurrConn, Vtransaction, connVM);

                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }



                    #endregion Insert to Issue Header

                    #region Insert to ReceiveHeaders

                    ReceiveMasterVM rVM = new ReceiveMasterVM();

                    rVM.ReceiveNo = Master.PurchaseInvoiceNo;
                    rVM.ReceiveDateTime = Master.ReceiveDate;
                    rVM.TotalAmount = 0;
                    rVM.TotalVATAmount = 0;
                    rVM.SerialNo = Master.PurchaseInvoiceNo;
                    rVM.Comments = Master.Comments;
                    rVM.CreatedBy = Master.CreatedBy;
                    rVM.CreatedOn = Master.CreatedOn;
                    rVM.LastModifiedBy = Master.LastModifiedBy;
                    rVM.LastModifiedOn = Master.LastModifiedOn;
                    rVM.transactionType = Master.TransactionType;
                    rVM.ReturnId = Master.ReturnId;
                    rVM.Post = Master.Post;
                    rVM.BranchId = Master.BranchId;

                    retResults = recDal.ReceiveInsertToMaster(rVM, VcurrConn, Vtransaction, connVM);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }



                    #endregion Insert to Receive Header

                }

                #endregion

                #region Headers For Input Service

                if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport" || Master.TransactionType == "PurchaseTollcharge")
                {
                    #region Insert to Issue Header

                    IssueMasterVM ivm = new IssueMasterVM();
                    ivm.IssueNo = Master.PurchaseInvoiceNo;
                    ivm.IssueDateTime = Master.ReceiveDate;
                    ivm.TotalVATAmount = 0;
                    ivm.TotalAmount = 0;
                    ivm.SerialNo = Master.PurchaseInvoiceNo;
                    ivm.Comments = Master.Comments;
                    ivm.CreatedBy = Master.CreatedBy;
                    ivm.CreatedOn = Master.CreatedOn;
                    ivm.LastModifiedBy = Master.LastModifiedBy;
                    ivm.LastModifiedOn = Master.LastModifiedOn;
                    ivm.ReceiveNo = Master.PurchaseInvoiceNo;
                    ivm.transactionType = Master.TransactionType;
                    ivm.ReturnId = Master.ReturnId;
                    ivm.Post = Master.Post;
                    ivm.BranchId = Master.BranchId;

                    retResults = issDal.IssueInsertToMaster(ivm, VcurrConn, Vtransaction, connVM);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }



                    #endregion Insert to Issue Header

                }

                #endregion

                #region Import

                if (Master.TransactionType == "Import"
                || Master.TransactionType == "ServiceImport"
                || Master.TransactionType == "ServiceNSImport"
                || Master.TransactionType == "TradingImport"
                || Master.TransactionType == "CommercialImporter"
                || Master.TransactionType == "InputServiceImport")
                {
                    if (Duties == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                        MessageVM.PurchasemsgNoDataToSaveImportDuties);
                    }

                    #region DutyID

                    sqlText = "select isnull(max(cast(PIDutyID as int)),0)+1 FROM  PurchaseInvoiceDuties";
                    SqlCommand cmdDutyNextId = new SqlCommand(sqlText, VcurrConn);
                    cmdDutyNextId.Transaction = Vtransaction;
                    //int nextIdD = (int) cmdDutyNextId.ExecuteScalar();
                    int nextIdD = 0;
                    object objnextIdD = cmdDutyNextId.ExecuteScalar();

                    if (objnextIdD == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                            MessageVM.PurchasemsgDutyIdNotCreate);
                    }
                    else
                    {
                        nextIdD = Convert.ToInt32(objnextIdD);
                    }

                    if (nextIdD <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                        MessageVM.PurchasemsgDutyIdNotCreate);
                    }

                    #endregion DutyID

                    #region Insert PurchaseInvoiceDuties

                    foreach (PurchaseDutiesVM duty in Duties.ToList())
                    {
                        PurchaseDutiesVM pduVM = new PurchaseDutiesVM();
                        pduVM.PIDutyID = nextIdD.ToString();
                        pduVM.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                        pduVM.ItemNo = duty.ItemNo;
                        pduVM.Quantity = duty.Quantity;
                        pduVM.DutyCompleteQuantity = duty.DutyCompleteQuantity;
                        pduVM.DutyCompleteQuantityPercent = duty.DutyCompleteQuantityPercent;
                        pduVM.CnFInp = duty.CnFInp;
                        pduVM.CnFRate = duty.CnFRate;
                        pduVM.CnFAmount = duty.CnFAmount;
                        pduVM.InsuranceInp = duty.InsuranceInp;
                        pduVM.InsuranceRate = duty.InsuranceRate;
                        pduVM.InsuranceAmount = duty.InsuranceAmount;
                        pduVM.AssessableInp = duty.AssessableInp;
                        pduVM.AssessableValue = duty.AssessableValue;
                        pduVM.CDInp = duty.CDInp;
                        pduVM.CDRate = duty.CDRate;
                        pduVM.CDAmount = duty.CDAmount;
                        pduVM.RDInp = duty.RDInp;
                        pduVM.RDRate = duty.RDRate;
                        pduVM.RDAmount = duty.RDAmount;
                        pduVM.TVBInp = duty.TVBInp;
                        pduVM.TVBRate = duty.TVBRate;
                        pduVM.TVBAmount = duty.TVBAmount;
                        pduVM.SDInp = duty.SDInp;
                        pduVM.SD = duty.SD;
                        pduVM.SDAmount = duty.SDAmount;
                        pduVM.VATInp = duty.VATInp;
                        pduVM.VATRate = duty.VATRate;
                        pduVM.VATAmount = duty.VATAmount;
                        pduVM.TVAInp = duty.TVAInp;
                        pduVM.TVARate = duty.TVARate;
                        pduVM.TVAAmount = duty.TVAAmount;
                        pduVM.ATVInp = duty.ATVInp;
                        pduVM.ATVRate = duty.ATVRate;
                        pduVM.ATVAmount = duty.ATVAmount;
                        pduVM.OthersInp = duty.OthersInp;
                        pduVM.OthersRate = duty.OthersRate;
                        pduVM.OthersAmount = duty.OthersAmount;

                        pduVM.AITInp = duty.AITInp;
                        pduVM.AITAmount = duty.AITAmount;

                        pduVM.UnitCost = duty.UnitCost;
                        pduVM.LineCost = duty.LineCost;
                        pduVM.CreatedBy = Master.CreatedBy;
                        pduVM.CreatedOn = Master.CreatedOn;
                        pduVM.LastModifiedBy = Master.LastModifiedBy;
                        pduVM.LastModifiedOn = Master.LastModifiedOn;
                        pduVM.TransactionType = Master.TransactionType;
                        pduVM.Post = Master.Post;
                        pduVM.Remarks = duty.Remarks;
                        pduVM.BranchId = Master.BranchId;

                        retResults = PurchaseInsertToDuties(pduVM, VcurrConn, Vtransaction, connVM);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }



                    }

                    #endregion
                }

                #endregion

                #endregion

                #region Insert Details

                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgNoDataToSave);
                }


                #endregion Validation for Detail

                #region Insert Detail Table

                foreach (PurchaseDetailVM Item in Details.ToList())
                {

                    #region Insert PurchaseInvoiceDetails

                    PurchaseDetailVM pDet = new PurchaseDetailVM();
                    pDet.BOMId = Item.BOMId;
                    pDet.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                    pDet.LineNo = Item.LineNo;
                    pDet.ItemNo = Item.ItemNo;
                    pDet.Quantity = Item.Quantity;
                    pDet.UnitPrice = Item.UnitPrice;
                    pDet.NBRPrice = Item.NBRPrice;
                    pDet.UOM = Item.UOM;
                    pDet.VATRate = Item.VATRate;
                    pDet.VATAmount = Item.VATAmount;
                    pDet.SubTotal = Item.SubTotal;
                    pDet.Comments = Item.Comments;
                    pDet.CreatedBy = Master.CreatedBy;
                    pDet.CreatedOn = Master.CreatedOn;
                    pDet.LastModifiedBy = Master.LastModifiedBy;
                    pDet.LastModifiedOn = Master.LastModifiedOn;
                    pDet.SD = Item.SD;
                    pDet.SDAmount = Item.SDAmount;
                    pDet.Type = Item.Type;
                    pDet.ProductType = Item.ProductType;
                    pDet.BENumber = Item.BENumber;
                    pDet.InvoiceDateTime = Master.InvoiceDate;
                    pDet.ReceiveDate = Master.ReceiveDate;
                    pDet.Post = Master.Post;
                    pDet.UOMQty = Item.UOMQty;
                    pDet.UOMPrice = Item.UOMPrice;
                    pDet.UOMc = Item.UOMc;
                    pDet.UOMn = Item.UOMn;
                    pDet.RebateRate = Item.RebateRate;
                    pDet.RebateAmount = Item.RebateAmount;
                    pDet.CnFAmount = Item.CnFAmount;
                    pDet.InsuranceAmount = Item.InsuranceAmount;
                    pDet.AssessableValue = Item.AssessableValue;
                    pDet.CDAmount = Item.CDAmount;
                    pDet.RDAmount = Item.RDAmount;
                    pDet.TVBAmount = Item.TVBAmount;
                    pDet.TVAAmount = Item.TVAAmount;
                    pDet.ATVAmount = Item.ATVAmount;
                    pDet.AITAmount = Item.AITAmount;
                    pDet.VDSRate = Item.VDSRate;
                    pDet.VDSAmount = Item.VDSAmount;
                    pDet.USDValue = Item.USDValue;
                    pDet.USDVAT = Item.USDVAT;
                    pDet.TDSSection = Item.TDSSection;
                    pDet.TDSCode = Item.TDSCode;
                    pDet.ExpireDate = Item.ExpireDate;
                    pDet.CPCName = Item.CPCName;
                    pDet.BEItemNo = Item.BEItemNo;
                    pDet.TransactionType = Master.TransactionType;
                    pDet.ReturnId = Master.ReturnId;
                    pDet.OthersAmount = Item.OthersAmount;
                    pDet.IsRebate = Master.IsRebate;
                    pDet.RebatePeriodId = Master.RebatePeriodId;

                    if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                    {
                        pDet.ReturnTransactionType = Item.ReturnTransactionType;
                    }
                    pDet.BranchId = Master.BranchId;
                    pDet.IsFixedVAT = Item.IsFixedVAT;
                    pDet.FixedVATAmount = Item.FixedVATAmount;
                    pDet.InvoiceValue = Item.InvoiceValue;
                    pDet.ExchangeRate = Item.ExchangeRate;
                    pDet.Currency = Item.Currency;
                    pDet.HSCode = Item.HSCode;
                    pDet.FixedVATRebate = Item.FixedVATRebate;
                    pDet.OtherRef = Item.OtherRef;
                    pDet.PurchaseReturnId = Item.PurchaseReturnId;
                    pDet.PreviousInvoiceDateTime = Item.PreviousInvoiceDateTime;
                    pDet.PreviousNBRPrice = Item.PreviousNBRPrice;
                    pDet.PreviousQuantity = Item.PreviousQuantity;
                    pDet.PreviousUOM = Item.PreviousUOM;
                    pDet.PreviousSubTotal = Item.PreviousSubTotal;
                    pDet.PreviousVATAmount = Item.PreviousVATAmount;
                    pDet.PreviousVATRate = Item.PreviousVATRate;
                    pDet.PreviousSD = Item.PreviousSD;
                    pDet.PreviousSDAmount = Item.PreviousSDAmount;
                    pDet.ReasonOfReturn = Item.ReasonOfReturn;
                    pDet.Section21 = Item.Section21;

                    if (string.IsNullOrWhiteSpace(pDet.HSCode))
                    {
                        pDet.HSCode = "-";
                    }
                    if (string.IsNullOrWhiteSpace(pDet.FixedVATRebate))
                    {
                        pDet.FixedVATRebate = "Y";
                    }

                    #region Rebate Check

                    if (pDet.Type.ToLower() != "nonrebate")
                    {
                        RebateDateCheck(pDet.InvoiceDateTime, pDet.RebatePeriodId, Vtransaction, VcurrConn, connVM);
                    }

                    #endregion

                    if (string.IsNullOrWhiteSpace(pDet.UOM))
                    {
                        throw new ArgumentNullException("", "UOM Not found Product Code : " + Item.ProductCode);
                    }
                    if (string.IsNullOrWhiteSpace(pDet.UOMn))
                    {
                        throw new ArgumentNullException("", "UOM Not found Product Code : " + Item.ProductCode);
                    }

                    if (pDet.UOMQty == 0)
                    {
                        throw new ArgumentNullException("", "UOMQty can not be zero Product Code : " + Item.ProductCode);
                    }
                    if (pDet.ProductType != "P")
                    {
                        if (pDet.TransactionType != "TollReceiveRaw")
                        {
                            if (pDet.UOMPrice == 0)
                            {
                                throw new ArgumentNullException("", "UOMPrice can not be zero Product Code : " + Item.ProductCode);
                            }
                        }

                    }

                    retResults = PurchaseInsertToDetail(pDet, VcurrConn, Vtransaction, connVM);

                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }

                    #endregion

                    #region Insert Issue and Receive

                    #region Trading With Sale False

                    if ((Master.TransactionType.ToLower() == "other" && TradingWithSale == false)
                        || (Master.TransactionType.ToLower() == "import" && TradingWithSale == false)
                        )
                    {
                        ItemType = productDal.GetProductTypeByItemNo(Item.ItemNo, VcurrConn, Vtransaction, connVM);

                        if (ItemType.ToLower() == "trading")
                        {
                            DataTable bomDt = new DataTable();

                            decimal declarePrice = 0;

                            string VATName = "VAT 4.3";
                            string effectDate = Item.ReceiveDate;

                            if (Item.BOMId > 0)
                            {
                                bomDt = new BOMDAL().SelectAll(Item.BOMId.ToString(), null, null, VcurrConn, Vtransaction, null, true, connVM);

                                declarePrice = Convert.ToDecimal(bomDt.Rows[0]["NBRPrice"]);
                                VATName = bomDt.Rows[0]["VATName"].ToString();
                                effectDate = Convert.ToDateTime(bomDt.Rows[0]["EffectDate"]).ToString("MM/dd/yyyy");
                            }
                            else
                            {
                                ProductVM item = productDal.SelectAll(Item.ItemNo, null, null, VcurrConn, Vtransaction, null, connVM, null).FirstOrDefault();

                                if (item != null)
                                    declarePrice = item.NBRPrice;
                            }


                            //////string UOM = productDal.GetProductTypeByItemNo(Item.ItemNo, VcurrConn, Vtransaction);
                            ////string UOM = Item.UOM;

                            #region Insert to Receive

                            ReceiveDetailVM rdetVM = new ReceiveDetailVM();
                            rdetVM.ReceiveNo = Master.PurchaseInvoiceNo;
                            rdetVM.ReceiveLineNo = Item.LineNo;
                            rdetVM.ItemNo = Item.ItemNo;
                            rdetVM.Quantity = Item.Quantity;
                            rdetVM.CostPrice = declarePrice;
                            rdetVM.NBRPrice = declarePrice;
                            rdetVM.UOM = Item.UOM;
                            rdetVM.VATRate = 0;
                            rdetVM.VATAmount = 0;
                            rdetVM.SubTotal = declarePrice * Item.UOMQty;
                            rdetVM.CommentsD = Item.Comments;
                            rdetVM.CreatedBy = Master.CreatedBy;
                            rdetVM.CreatedOn = Master.CreatedOn;
                            rdetVM.LastModifiedBy = Master.LastModifiedBy;
                            rdetVM.LastModifiedOn = Master.LastModifiedOn;
                            rdetVM.SD = 0;
                            rdetVM.SDAmount = 0;
                            rdetVM.ReceiveDateTime = Master.ReceiveDate;
                            rdetVM.transactionType = "TradingAuto";
                            rdetVM.ReturnId = Master.ReturnId;
                            rdetVM.VatName = VATName;
                            rdetVM.UOMQty = Item.UOMQty;
                            rdetVM.UOMPrice = declarePrice;
                            rdetVM.UOMc = Item.UOMc;
                            rdetVM.UOMn = Item.UOMn;
                            rdetVM.Post = Master.Post;
                            rdetVM.BranchId = Master.BranchId;

                            retResults = recDal.ReceiveInsertToDetail(rdetVM, VcurrConn, Vtransaction, connVM);

                            if (retResults[0] != "Success")
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                            }

                            #endregion

                            #region Update Receive

                            sqlText = "";

                            sqlText += "  update ReceiveHeaders set TotalAmount=  ";
                            sqlText += " (select sum(Quantity*CostPrice) from ReceiveDetails ";
                            sqlText += " where ReceiveDetails.ReceiveNo =ReceiveHeaders.ReceiveNo) ";
                            sqlText += " where ReceiveHeaders.ReceiveNo='" + Master.PurchaseInvoiceNo + "' ";

                            SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, VcurrConn);
                            cmdUpdateReceive.Transaction = Vtransaction;
                            cmdUpdateReceive.ExecuteNonQuery();
                            transResult = 1;


                            #endregion Update Receive

                            #region Insert Issue

                            IssueDetailVM IdVM = new IssueDetailVM();
                            IdVM.IssueNo = Master.PurchaseInvoiceNo;
                            IdVM.IssueLineNo = Item.LineNo;
                            IdVM.ItemNo = Item.ItemNo;
                            IdVM.Quantity = Item.Quantity;
                            IdVM.NBRPrice = Item.NBRPrice;
                            IdVM.CostPrice = Item.UnitPrice;
                            IdVM.UOM = Item.UOM;
                            IdVM.VATRate = 0;
                            IdVM.VATAmount = 0;
                            IdVM.SubTotal = Item.SubTotal;
                            IdVM.CommentsD = Item.Comments;
                            IdVM.CreatedBy = Master.CreatedBy;
                            IdVM.CreatedOn = Master.CreatedOn;
                            IdVM.LastModifiedBy = Master.LastModifiedBy;
                            IdVM.LastModifiedOn = Master.LastModifiedOn;
                            IdVM.ReceiveNo = Master.PurchaseInvoiceNo;
                            IdVM.IssueDateTime = Master.ReceiveDate;
                            IdVM.SD = 0;
                            IdVM.SDAmount = 0;
                            IdVM.Wastage = 0;
                            IdVM.BOMDate = effectDate;
                            IdVM.FinishItemNo = Item.ItemNo;
                            IdVM.transactionType = "TradingAuto";
                            IdVM.IssueReturnId = Master.ReturnId;
                            IdVM.UOMQty = Item.UOMQty;
                            IdVM.UOMPrice = Item.UOMPrice;
                            IdVM.UOMc = Item.UOMc;
                            IdVM.UOMn = Item.UOMn;
                            IdVM.UOMWastage = 0;
                            IdVM.BOMId = Item.BOMId;
                            IdVM.Post = Master.Post;
                            IdVM.BranchId = Master.BranchId;

                            retResults = issDal.IssueInsertToDetails(IdVM, VcurrConn, Vtransaction, connVM);

                            if (retResults[0] != "Success")
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                            }
                            #endregion Issue

                            #region Update Issue

                            sqlText = "";
                            sqlText += " update IssueHeaders set ";
                            sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                            sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                            sqlText += " where (IssueHeaders.IssueNo= '" + Master.PurchaseInvoiceNo + "')";

                            SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                            cmdUpdateIssue.Transaction = Vtransaction;
                            cmdUpdateIssue.ExecuteNonQuery();
                            transResult = 1;

                            #endregion
                        }
                    }

                    #endregion

                    #region Transaction is TollReceive

                    if (Master.TransactionType == "TollReceive" && TollReceiveWithIssue == false)
                    //if (false)
                    {

                        ProductDAL bdal1 = new ProductDAL();
                        //bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue", currConn, transaction) == "Y" ? true : false);

                        string BOMId = bdal1.GetBOMIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate, VcurrConn, Vtransaction, connVM);
                        //var BOMId = bdal1.GetBOMIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate, VcurrConn, Vtransaction);
                        //sss
                        sqlText = "";
                        sqlText +=
                            " SELECT  b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ," +
                            "b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty,b.TransactionType from BOMRaws b  ";
                        sqlText += " where ";
                        sqlText += " BOMId='" + BOMId + "' ";
                        sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";



                        DataTable dataTable = new DataTable("RIFB");
                        SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                        cmdRIFB.Transaction = Vtransaction;
                        SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                        reportDataAdapt.Fill(dataTable);

                        if (dataTable == null)
                        {
                            if (TollReceiveWithIssue)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                           MessageVM.receiveMsgNoDataToPost);
                            }

                        }
                        else if (dataTable.Rows.Count <= 0)
                        {
                            if (TollReceiveWithIssue)
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                            "There is no Item for Auto Consumption for the Item Name (VAT 4.3 (Toll Receive)) in price declaration.");
                        }
                        else
                        {
                            decimal vQuantity = 0;
                            decimal vWastage = 0;
                            decimal vStock = 0;
                            string rwUom = "";
                            decimal vConvertionRate = 0;
                            decimal AvgRate = 0;

                            foreach (DataRow BRItem in dataTable.Rows)
                            {
                                #region Declare

                                decimal v1Quantity = 0;
                                string v1RawItemNo = "";
                                decimal v1CostPrice = 0;
                                string v1UOM = "";
                                decimal v1SubTotal = 0;
                                decimal v1Wastage = 0;
                                DateTime v1BOMDate = DateTime.Now.Date;
                                string v1FinishItemNo = "";

                                decimal v1UOMQty = 0;
                                decimal v1UOMPrice = 0;
                                decimal v1UOMc = 0;
                                string v1UOMn = "";
                                string v1BOMId = "";
                                decimal v1UOMWastage = 0;
                                string vTransactionType = "";

                                #endregion Declare

                                #region Update Item Qty

                                #region Find Quantity From Products

                                DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDate, VcurrConn, Vtransaction, false, true, true, true, connVM, UserId);

                                decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                if (quantity > 0)
                                {
                                    AvgRate = amount / quantity;
                                }
                                else
                                {
                                    AvgRate = 0;
                                }

                                vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                #region Issue Settings
                                //CommonDAL commDal = new CommonDAL();
                                //int IssuePlaceQty = Convert.ToInt32(commDal.settings("Issue", "Quantity"));
                                //int IssuePlaceAmt = Convert.ToInt32(commDal.settings("Issue", "Amount"));
                                AvgRate = FormatingNumeric(AvgRate, 4);
                                vQuantity = FormatingNumeric(vQuantity, 4);
                                vWastage = FormatingNumeric(vWastage, 4);
                                #endregion Issue Settings

                                rwUom = BRItem["Uom"].ToString();

                                string rwMajorUom = BRItem["Uomn"].ToString();
                                if (string.IsNullOrEmpty(rwUom))
                                {
                                    throw new ArgumentNullException("ReceiveInsert",
                                                                    "Could not find UOM of raw item");
                                }

                                /*Processing UOM*/

                                UOMDAL uomdal = new UOMDAL();
                                vConvertionRate = uomdal.GetConvertionRate(rwMajorUom, rwUom, "Y", VcurrConn, Vtransaction, connVM); //uomc


                                #region valueAssign

                                v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                v1Wastage = (vWastage) * Item.UOMQty;
                                v1BOMId = BOMId;
                                v1RawItemNo = BRItem["RawItemNo"].ToString();
                                v1UOM = BRItem["UOM"].ToString();
                                v1CostPrice = AvgRate * vConvertionRate;
                                v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                v1UOMPrice = AvgRate;
                                v1UOMn = BRItem["UOMn"].ToString();
                                v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                v1FinishItemNo = Item.ItemNo;
                                v1UOMc = vConvertionRate;
                                v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                vTransactionType = BRItem["TransactionType"].ToString();

                                #endregion valueAssign

                                #region Stock
                                string vNegStockAllow = commonDal.settings("Issue", "NegStockAllow", null, null, connVM);
                                bool NegStockAllow = vNegStockAllow == "Y";

                                if (NegStockAllow == false)
                                {
                                    //var stock = productDal.StockInHand(BRItem["RawItemNo"].ToString(),
                                    //                                       Master.ReceiveDateTime,
                                    //                                   currConn, transaction).ToString();

                                    decimal stock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                         Master.ReceiveDate,
                                                       VcurrConn, Vtransaction, false, true, true, true, connVM, UserId).Rows[0]["Quantity"].ToString());

                                    vStock = Convert.ToDecimal(stock);


                                    if ((vStock - v1UOMQty) < 0)
                                    {
                                        string FinName = string.Empty;
                                        string FinCode = string.Empty;
                                        string RawName = string.Empty;
                                        string RawCode = string.Empty;
                                        DataTable finDt = new DataTable();
                                        finDt = productDal.GetProductInfoByItemNo(Item.ItemNo, null, null, connVM);
                                        foreach (DataRow FinItem in finDt.Rows)
                                        {
                                            FinName = FinItem["ProductName"].ToString();
                                            FinCode = FinItem["ProductCode"].ToString();
                                        }

                                        DataTable rawDt = new DataTable();
                                        rawDt =
                                            productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString(), null, null, connVM);
                                        foreach (DataRow RawItem in rawDt.Rows)
                                        {
                                            RawName = RawItem["ProductName"].ToString();
                                            RawCode = RawItem["ProductCode"].ToString();
                                        }

                                        throw new ArgumentNullException("ReceiveInsert",
                                            "Stock not Available for Finish Item( Name: " +
                                            FinName + " & Code: " + FinCode +
                                            " ) \n and consumtion Material ( Name: " +
                                            RawName + " & Code: " + RawCode + " )");

                                    }

                                }

                                #endregion Stock

                                #endregion Find Quantity From Products


                                #region Find Quantity From Transaction
                                #region Block 10022021

                                decimal NBRPrice = productDal.GetLastNBRPriceFromBOM_VatName(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                                    VcurrConn, Vtransaction, "0", connVM);

                                ItemType = productDal.GetProductTypeByItemNo(Item.ItemNo, VcurrConn, Vtransaction, connVM);
                                string UOM = productDal.GetProductTypeByItemNo(Item.ItemNo, VcurrConn, Vtransaction, connVM);

                                #endregion Block 10022021


                                IssueDetailVM IdVM = new IssueDetailVM();
                                IdVM.IssueNo = Master.PurchaseInvoiceNo;
                                IdVM.IssueLineNo = "1";
                                IdVM.ItemNo = v1RawItemNo;
                                IdVM.Quantity = FormatingNumeric(v1Quantity, 4, connVM);
                                IdVM.NBRPrice = AvgRate;
                                IdVM.CostPrice = FormatingNumeric(v1CostPrice, 4, connVM);
                                IdVM.UOM = v1UOM;
                                IdVM.VATRate = 0;
                                IdVM.VATAmount = 0;
                                IdVM.SubTotal = FormatingNumeric(v1SubTotal, 4, connVM);
                                IdVM.CommentsD = Item.Comments;
                                IdVM.CreatedBy = Master.CreatedBy;
                                IdVM.CreatedOn = Master.CreatedOn;
                                IdVM.LastModifiedBy = Master.LastModifiedBy;
                                IdVM.LastModifiedOn = Master.LastModifiedOn;
                                IdVM.ReceiveNo = Master.PurchaseInvoiceNo;
                                IdVM.IssueDateTime = Master.ReceiveDate;
                                IdVM.SD = 0;
                                IdVM.SDAmount = 0;
                                IdVM.Wastage = v1Wastage;
                                IdVM.BOMDate = Convert.ToDateTime(v1BOMDate).ToString("MM/dd/yyyy");
                                IdVM.FinishItemNo = v1FinishItemNo;
                                IdVM.transactionType = Master.TransactionType;
                                if (!string.IsNullOrEmpty(ItemType))
                                {
                                    if (ItemType == "Finish")
                                    {
                                        IdVM.transactionType = "TollReceive-NotWIP";
                                    }
                                }

                                IdVM.IssueReturnId = Master.ReturnId;
                                IdVM.UOMQty = FormatingNumeric(v1UOMQty, 4, connVM);
                                IdVM.UOMPrice = FormatingNumeric(v1UOMPrice, 4, connVM);
                                IdVM.UOMc = v1UOMc;
                                IdVM.UOMn = v1UOMn;
                                IdVM.UOMWastage = v1UOMWastage;
                                IdVM.BOMId = Convert.ToInt32(v1BOMId);
                                IdVM.Post = "N";
                                IdVM.BranchId = Master.BranchId;

                                retResults = issDal.IssueInsertToDetails(IdVM, VcurrConn, Vtransaction, connVM);
                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                }



                                #region Update Issue

                                sqlText = "";
                                sqlText += " update IssueHeaders set ";
                                sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                sqlText += " where (IssueHeaders.IssueNo= '" + Master.PurchaseInvoiceNo + "')";

                                SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                cmdUpdateIssue.Transaction = Vtransaction;
                                transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                    MessageVM.receiveMsgUnableToSaveIssue);
                                }

                                #endregion Update Issue

                                #endregion Qty  check and Update

                                #endregion Qty  check and Update
                            }
                        }
                    }


                    if (Master.TransactionType == "TollReceive")
                    {
                        //decimal AvgRate = productDal.AvgPriceNew(Item.ItemNo,Master.ReceiveDate, currConn, transaction,false);

                        string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                            VcurrConn, Vtransaction, connVM).ToString();

                        decimal NBRPrice = productDal.GetLastNBRPriceFromBOM_VatName(FinishItemIdFromOH, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                            VcurrConn, Vtransaction, "0", connVM);

                        ItemType = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, VcurrConn, Vtransaction, connVM);

                        ////string UOM = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, VcurrConn, Vtransaction);


                        string UOM = Item.UOM;

                        if (!string.IsNullOrEmpty(ItemType))
                        {
                            if (ItemType == "Finish")
                            {
                                #region Insert to Receive  17 in
                                ReceiveDetailVM rdetVM = new ReceiveDetailVM();
                                rdetVM.ReceiveNo = Master.PurchaseInvoiceNo;
                                rdetVM.ReceiveLineNo = Item.LineNo;
                                rdetVM.ItemNo = FinishItemIdFromOH;
                                rdetVM.Quantity = Item.Quantity;
                                rdetVM.CostPrice = NBRPrice;
                                rdetVM.NBRPrice = NBRPrice;
                                rdetVM.UOM = UOM;
                                rdetVM.VATRate = 0;
                                rdetVM.VATAmount = 0;
                                rdetVM.SubTotal = NBRPrice * Item.Quantity;
                                rdetVM.CommentsD = Item.Comments;
                                rdetVM.CreatedBy = Master.CreatedBy;
                                rdetVM.CreatedOn = Master.CreatedOn;
                                rdetVM.LastModifiedBy = Master.LastModifiedBy;
                                rdetVM.LastModifiedOn = Master.LastModifiedOn;
                                rdetVM.SD = 0;
                                rdetVM.SDAmount = 0;
                                rdetVM.ReceiveDateTime = Master.ReceiveDate;
                                rdetVM.transactionType = Master.TransactionType;
                                rdetVM.ReturnId = Master.ReturnId;
                                rdetVM.VatName = "VAT 4.3 (Toll Receive)";
                                rdetVM.UOMQty = Item.Quantity;
                                rdetVM.UOMPrice = NBRPrice;
                                rdetVM.UOMc = 1;
                                rdetVM.UOMn = UOM;
                                rdetVM.Post = Master.Post;
                                rdetVM.BranchId = Master.BranchId;

                                retResults = recDal.ReceiveInsertToDetail(rdetVM, VcurrConn, Vtransaction, connVM);
                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                                }



                                #endregion Insert to Receive

                                #region Update Receive

                                sqlText = "";

                                sqlText += "  update ReceiveHeaders set TotalAmount=  ";
                                sqlText += " (select sum(Quantity*CostPrice) from ReceiveDetails ";
                                sqlText += " where ReceiveDetails.ReceiveNo =ReceiveHeaders.ReceiveNo) ";
                                sqlText += " where ReceiveHeaders.ReceiveNo='" + Master.PurchaseInvoiceNo + "' ";

                                SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, VcurrConn);
                                cmdUpdateReceive.Transaction = Vtransaction;
                                transResult = (int)cmdUpdateReceive.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                    MessageVM.PurchasemsgUnableToSaveReceive);
                                }

                                #endregion Update Receive
                            }
                            else if (ItemType == "Raw"  //16 in
                                   || ItemType == "Pack"
                                || ItemType == "WIP"
                                || ItemType == "Trading")
                            {
                                #region Insert only DetailTable PurchaseInvoiceDetails

                                PurchaseDetailVM pDetVM = new PurchaseDetailVM();
                                pDetVM.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                                pDetVM.LineNo = Item.LineNo;
                                pDetVM.ItemNo = FinishItemIdFromOH;
                                pDetVM.Quantity = Item.Quantity;
                                pDetVM.UnitPrice = NBRPrice;
                                pDetVM.NBRPrice = NBRPrice;
                                pDetVM.UOM = UOM;
                                pDetVM.VATRate = 0;
                                pDetVM.VATAmount = 0;
                                pDetVM.SubTotal = NBRPrice * Item.UOMQty;
                                pDetVM.Comments = Item.Comments;
                                pDetVM.CreatedBy = Master.CreatedBy;
                                pDetVM.CreatedOn = Master.CreatedOn;
                                pDetVM.LastModifiedBy = Master.LastModifiedBy;
                                pDetVM.LastModifiedOn = Master.LastModifiedOn;
                                pDetVM.SD = 0;
                                pDetVM.SDAmount = 0;
                                pDetVM.Type = Item.Type;
                                pDetVM.ProductType = Item.ProductType;
                                pDetVM.BENumber = Item.BENumber;
                                pDetVM.InvoiceDateTime = Master.InvoiceDate;
                                pDetVM.ReceiveDate = Master.ReceiveDate;
                                pDetVM.Post = Master.Post;
                                pDetVM.UOMQty = Item.Quantity;
                                pDetVM.UOMPrice = NBRPrice;
                                pDetVM.UOMc = 1;
                                pDetVM.UOMn = UOM;
                                pDetVM.RebateRate = 0;
                                pDetVM.RebateAmount = 0;
                                pDetVM.CnFAmount = 0;
                                pDetVM.InsuranceAmount = 0;
                                pDetVM.AssessableValue = 0;
                                pDetVM.CDAmount = 0;
                                pDetVM.RDAmount = 0;
                                pDetVM.TVBAmount = 0;
                                pDetVM.TVAAmount = 0;
                                pDetVM.ATVAmount = 0;
                                pDetVM.USDValue = 0;
                                pDetVM.USDVAT = 0;
                                pDetVM.TransactionType = "TollReceive-WIP";
                                pDetVM.ReturnId = Master.ReturnId;
                                pDetVM.OthersAmount = Item.OthersAmount;
                                pDetVM.BranchId = Master.BranchId;
                                retResults = PurchaseInsertToDetail(pDetVM, VcurrConn, Vtransaction, connVM);

                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                                }



                                #endregion Insert only DetailTable
                            }
                        }

                    }

                    #endregion Transaction is Trading

                    #region Transaction is InputService

                    if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport" || Master.TransactionType == "PurchaseTollcharge")
                    {
                        decimal PurchasePrice = productDal.PurchasePrice(Item.ItemNo, Master.PurchaseInvoiceNo, VcurrConn, Vtransaction, connVM);

                        #region Insert to Issue

                        IssueDetailVM iDetVM = new IssueDetailVM();
                        iDetVM.IssueNo = Master.PurchaseInvoiceNo;
                        iDetVM.IssueLineNo = Item.LineNo;
                        iDetVM.ItemNo = Item.ItemNo;
                        iDetVM.Quantity = Item.Quantity;
                        iDetVM.NBRPrice = 0;
                        if (Master.TransactionType == "InputServiceImport")
                        {
                            PurchasePrice = PurchasePrice + Convert.ToDecimal(Item.ATVAmount) + Convert.ToDecimal(Item.TVAAmount);

                            iDetVM.CostPrice = PurchasePrice;
                            iDetVM.UOM = Item.UOM;
                            iDetVM.VATRate = 0;
                            iDetVM.VATAmount = 0;
                            iDetVM.SubTotal = PurchasePrice * Item.UOMQty;
                        }
                        else if (Master.TransactionType == "InputService" || Master.TransactionType == "PurchaseTollcharge")
                        {

                            iDetVM.CostPrice = Item.SubTotal;
                            iDetVM.UOM = Item.UOM;
                            iDetVM.VATRate = 0;
                            iDetVM.VATAmount = 0;
                            iDetVM.SubTotal = Item.SubTotal * Item.UOMQty;
                        }


                        iDetVM.CommentsD = Item.Comments;
                        iDetVM.CreatedBy = Master.CreatedBy;
                        iDetVM.CreatedOn = Master.CreatedOn;
                        iDetVM.LastModifiedBy = Master.LastModifiedBy;
                        iDetVM.LastModifiedOn = Master.LastModifiedOn;
                        iDetVM.ReceiveNo = Master.PurchaseInvoiceNo;
                        iDetVM.IssueDateTime = Master.ReceiveDate;
                        iDetVM.SD = 0;
                        iDetVM.SDAmount = 0;
                        iDetVM.Wastage = 0;
                        iDetVM.BOMDate = "1900/01/01";
                        iDetVM.FinishItemNo = "0";
                        iDetVM.transactionType = Master.TransactionType;
                        iDetVM.IssueReturnId = Master.ReturnId;
                        iDetVM.UOMQty = Item.UOMQty;
                        iDetVM.UOMPrice = Item.UOMPrice;
                        iDetVM.UOMc = Item.UOMc;
                        iDetVM.UOMn = Item.UOMn;
                        iDetVM.UOMWastage = 0;
                        iDetVM.Post = Master.Post;
                        iDetVM.BranchId = Master.BranchId;


                        retResults = issDal.IssueInsertToDetails(iDetVM, VcurrConn, Vtransaction, connVM);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }



                        #endregion Insert to Issue

                        #region Update Issue

                        sqlText = "";
                        sqlText += " update IssueHeaders set ";
                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                        sqlText += " where (IssueHeaders.IssueNo= '" + Master.PurchaseInvoiceNo + "')";

                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                        cmdUpdateIssue.Transaction = Vtransaction;
                        transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                            MessageVM.PurchasemsgUnableToSaveIssue);
                        }

                        #endregion Update Issue

                    }

                    #endregion Transaction is InputService

                    #endregion

                }

                #endregion Insert Detail Table

                #endregion

                #region Tracking With Sale

                if (Master.Post.ToLower() == "y")
                {

                    bool TrackingWithSale = Convert.ToBoolean(commonDal.settingValue("Purchase", "TrackingWithSale", connVM, null, null) == "Y" ? true : false);
                    if (TrackingWithSale)
                    {
                        DataTable tracDt = new DataTable();
                        sqlText = "";
                        sqlText = @"SELECT    
                                    PurchaseInvoiceDetails.PurchaseInvoiceNo,
                                    PurchaseInvoiceDetails.InvoiceDateTime,
                                    PurchaseInvoiceDetails.ReceiveDate,
                                    PurchaseInvoiceDetails.ItemNo, 
                                    isnull(PurchaseInvoiceDetails.BENumber,'N/A')BENumber ,
                                    isnull(PurchaseInvoiceDetails.Quantity,0)Quantity,
                                    isnull(PurchaseInvoiceDetails.UOM,'N/A')UOM ,
                                    isnull(PurchaseInvoiceDetails.VATRate,0)VATRate,
                                    isnull(PurchaseInvoiceDetails.ReturnTransactionType,'')ReturnTransactionType,
                                    isnull(PurchaseInvoiceDetails.ExpireDate,'2100-01-01')ExpireDate,
                                    isnull(PurchaseInvoiceHeaders.CustomHouse,'')CustomHouse
                                    FROM dbo.PurchaseInvoiceDetails 
                                    left outer join PurchaseInvoiceHeaders on PurchaseInvoiceHeaders.PurchaseInvoiceNo=PurchaseInvoiceDetails.PurchaseInvoiceNo
                                    WHERE ";
                        sqlText += @"   (PurchaseInvoiceDetails.PurchaseInvoiceNo = '" + Master.PurchaseInvoiceNo + "')";
                        sqlText += @"  order by PurchaseInvoiceDetails.ItemNo";
                        SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                        cmdRIFB.Transaction = Vtransaction;
                        SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                        reportDataAdapt.Fill(tracDt);

                        foreach (DataRow dRow in tracDt.Rows)
                        {
                            #region Insert only DetailTable PurchaseInvoiceDetails
                            // InMethod Parameter
                            sqlText = "";
                            sqlText += " insert into PurchaseSaleTrackings(";
                            sqlText += " PurchaseInvoiceNo                                   ,";
                            sqlText += " PurchaseInvoiceDateTime                                   ,";
                            sqlText += " ReceiveDate                                   ,";
                            sqlText += " CustomHouse                                   ,";
                            sqlText += " ItemNo                                   ,";
                            sqlText += " BENumber                                   ,";
                            sqlText += " SalesInvoiceNo                                   ,";
                            sqlText += " SaleInvoiceDateTime                                   ,";
                            sqlText += " ExpireDate                                   ,";
                            sqlText += " BranchId                                   ,";
                            sqlText += " IsSold";
                            sqlText += " )";
                            sqlText += " values(	";
                            sqlText += "'" + dRow["PurchaseInvoiceNo"].ToString() + "',";
                            sqlText += "'" + dRow["InvoiceDateTime"].ToString() + "',";
                            sqlText += "'" + dRow["ReceiveDate"].ToString() + "',";
                            sqlText += "'" + dRow["CustomHouse"].ToString() + "',";
                            sqlText += "'" + dRow["ItemNo"].ToString() + "',";
                            sqlText += "'" + dRow["BENumber"].ToString() + "',";
                            sqlText += "'0',";
                            sqlText += "'01/01/1900',";
                            sqlText += "'" + dRow["ExpireDate"].ToString() + "',";
                            sqlText += "'" + Master.BranchId + "',";
                            sqlText += "'0'";
                            sqlText += ")	";

                            decimal qty = Convert.ToDecimal(dRow["Quantity"]);
                            for (int i = 0; i < qty; i++)
                            {
                                SqlCommand cmdInsDetail = new SqlCommand(sqlText, VcurrConn);
                                cmdInsDetail.Transaction = Vtransaction;
                                transResult = (int)cmdInsDetail.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                                }
                            }


                            #endregion Insert only DetailTable
                        }
                    }
                }


                #endregion TrackingWithSale

                #region TDS Insert

                sqlText = "";
                sqlText += @"
delete from PurchaseTDSs where PurchaseInvoiceNo=@PurchaseInvoiceNo

insert into PurchaseTDSs(PurchaseInvoiceNo,TDSCode,PurchaseBillAmount,TDSAmount,Post)
select distinct PurchaseInvoiceNo,TDSCode,sum(SubTotal)SubTotal,0,'N' from PurchaseInvoiceDetails
where PurchaseInvoiceNo=@PurchaseInvoiceNo
group by PurchaseInvoiceNo,TDSCode
";


                SqlCommand cmdInserttds = new SqlCommand(sqlText, VcurrConn);
                cmdInserttds.Transaction = Vtransaction;
                cmdInserttds.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                cmdInserttds.ExecuteNonQuery();
                #endregion

                #region return Current ID and Post Status




                #endregion Prefetch

                #region SuccessResult
                retResults = new string[5];
                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Master.PurchaseInvoiceNo;
                retResults[3] = "N";
                retResults[4] = "0";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                FileLogger.Log("PurchaseDAL", "PurchaseInsert2", ex.ToString() + "\n" + sqlText, "Purchase");

                //throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                ////////throw ex;
            }
            finally
            {

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] PurchaseUpdate(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, List<PurchaseDutiesVM> Duties, List<TrackingVM> Trackings, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            ReceiveDAL recDal = new ReceiveDAL();
            IssueDAL issDal = new IssueDAL();
            SaleDAL salDal = new SaleDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";

            ProductDAL productDal = new ProductDAL();
            bool PriceDeclarationTradingProduct = false;

            #endregion Initializ
            CommonDAL commonDAL = new CommonDAL();

            #region Try
            try
            {


                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.PurchasemsgNoDataToUpdate);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, "Please Check Invoice Data and Time");

                }

                #endregion Validation for Header

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();

                transaction = currConn.BeginTransaction(MessageVM.PurchasemsgMethodNameInsert);


                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue", null, null, connVM) == "Y" ? true : false);

                #endregion open connection and transaction

                #region Current Status

                #region Post Status

                string currentPostStatus = "N";

                sqlText = "";
                sqlText = @"
----------declare @InvoiceNo as varchar(100)='IMP-0022/0919'

select PurchaseInvoiceNo, Post from PurchaseInvoiceHeaders
where 1=1 
and PurchaseInvoiceNo=@InvoiceNo

";
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@InvoiceNo", Master.PurchaseInvoiceNo);

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                if (dt != null && dt.Rows.Count > 0)
                {
                    currentPostStatus = dt.Rows[0]["Post"].ToString();
                }

                #endregion

                #region Purchase Consumption check

                bool purchaseSaleTracking =
                    commonDal.settings("Purchase", "PurchaseSaleTracking", currConn, transaction, connVM) == "Y";

                if (purchaseSaleTracking)
                {
                    string purchaseCheckText =
                        "select count(Id) from SaleTrackingConsumption where PurchaseInvoiceNo=@PurchaseInvoiceNo";
                    cmd.CommandText = purchaseCheckText;
                    cmd.Parameters.AddWithValue("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    int result = (int)cmd.ExecuteScalar();

                    if (result > 0)
                    {
                        throw new Exception("Quantity already have been consumed with this purchase");
                    }

                }

                #endregion


                #region Current Items
                DataTable dtCurrentItems = new DataTable();

                if (currentPostStatus == "Y")
                {
                    sqlText = "";
                    sqlText = @"
----------declare @InvoiceNo as varchar(100)='IMP-0022/0919'


select ItemNo, PurchaseInvoiceNo from PurchaseInvoiceDetails
where 1=1 
and PurchaseInvoiceNo=@InvoiceNo

";

                    cmd = new SqlCommand(sqlText, currConn, transaction);
                    cmd.Parameters.AddWithValue("@InvoiceNo", Master.PurchaseInvoiceNo);

                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtCurrentItems);

                }
                #endregion

                #endregion

                #region Find Month Lock

                string PeriodName = Convert.ToDateTime(Master.ReceiveDate).ToString("MMMM-yyyy");
                string[] vValues = { PeriodName };
                string[] vFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, vFields, vValues, null, null, connVM).FirstOrDefault();

                if (varFiscalYearVM.VATReturnPost == "Y")
                {
                    throw new Exception(PeriodName + ": VAT Return (9.1) already submitted for this month!");

                }
                else if (varFiscalYearVM == null)
                {
                    throw new Exception(PeriodName + ": This Fiscal Period is not Exist!");

                }

                #endregion Find Month Lock

                #region BENumber Check

                bool BECheck = commonDal.settings("Purchase", "DuplicateBECheck", currConn, transaction, connVM) == "Y";

                if (BECheck)
                {
                    retResults = BENumberCheck(Master.VendorID, Master.BENumber, varFiscalYearVM.CurrentYear, Master.PurchaseInvoiceNo, transaction, currConn, Master.BranchId, connVM);

                    if (retResults[0] == "Fail")
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNameBENumbercheck, MessageVM.BENumberAlreadyExit);

                    }
                }

                #endregion

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                PriceDeclarationTradingProduct = Convert.ToBoolean(commonDal.settingValue("PriceDeclaration", "TradingProduct", connVM, null, null) == "Y" ? true : false);

                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText +
                          "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterId ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterId", Master.PurchaseInvoiceNo);

                int IDExistP = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExistP <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                    MessageVM.PurchasemsgUnableFindExistID);
                }

                #endregion Find ID for Update

                List<PurchaseDetailVM> previousDetailVMs = SelectPurchaseDetailList(Master.PurchaseInvoiceNo, null, null, currConn, transaction, connVM);

                #region Update Header

                string[] cFields = { "pih.PurchaseInvoiceNo" };
                string[] cvals = { Master.PurchaseInvoiceNo };

                PurchaseMasterVM pmVM = SelectAllList(0, cFields, cvals, currConn, transaction, null, connVM).FirstOrDefault();
                string receiveDate = Convert.ToDateTime(pmVM.ReceiveDate) <= Convert.ToDateTime(Master.ReceiveDate)
                    ? pmVM.ReceiveDate
                    : Master.ReceiveDate;

                #region Master Setting Update

                //UpdateAveragePrice(Master, currConn, transaction, commonDal, previousDetailVMs, preMasterVm);


                //commonDAL.settingsUpdateMaster("DayEnd", "DayEndProcess", "N", currConn, transaction);
                commonDAL.UpdateProcessFlag(Master.PurchaseInvoiceNo, receiveDate, currConn, transaction, connVM);

                #endregion


                string settingValue = commonDal.settingValue("EntryProcess", "UpdateOnPost", connVM, currConn, transaction);

                if (settingValue != "Y")
                {
                    if (pmVM.Post == "Y")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.ThisTransactionWasPosted);
                    }

                }

                string realTimeEntry = commonDal.settings("Purchase", "EntryRealTime", currConn, transaction, connVM);

                if (realTimeEntry == "N")
                {
                    Master.ReceiveDate = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd 00:00:00");

                }

                #region RebateWithGRN

                DataTable settingsDt = new DataTable();

                bool RebateWithGRN = false;

                if (settingVM.SettingsDTUser == null)
                {
                    settingsDt = new CommonDAL().SettingDataAll(null, null, connVM);
                }

                RebateWithGRN = commonDal.settingsDesktop("Purchase", "RebateWithGRN", settingsDt, connVM) == "Y";

                #endregion

                #region PeriodId & Rebate PeriodId Check

                string PeriodIdCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("MMyyyy");
                string RebatePeriodIdCheck = Convert.ToDateTime(Master.RebateDate).ToString("MMyyyy");

                #region Rebate Check

                if (RebateWithGRN)
                {
                    Master.IsRebate = "Y";
                    Master.RebatePeriodId = PeriodIdCheck;
                    Master.RebateDate = Master.ReceiveDate;
                    ////RebateDateCheck(Master.InvoiceDate, Master.RebatePeriodId, transaction, currConn, connVM);

                }
                if (!RebateWithGRN)
                {
                    if (Master.IsRebate == "N")
                    {
                        Master.IsRebate = Master.IsRebate;
                        //Master.RebatePeriodId = "0";
                        //////Master.RebateDate = Master.RebateDate;

                    }
                    else if (Master.IsRebate == "Y")
                    {
                        Master.IsRebate = Master.IsRebate;
                        Master.RebatePeriodId = RebatePeriodIdCheck;
                        //////Master.RebateDate = Master.RebateDate;
                        //////RebateDateCheck(Master.InvoiceDate, Master.RebatePeriodId, transaction, currConn, connVM);

                    }
                }

                #endregion

                #endregion

                #region Previous Master

                PurchaseMasterVM preMasterVm = new PurchaseMasterVM();
                preMasterVm.VendorID = pmVM.VendorID;
                preMasterVm.InvoiceDate = pmVM.InvoiceDate;
                preMasterVm.CustomHouse = pmVM.CustomHouse;
                preMasterVm.CustomHouseCode = pmVM.CustomHouseCode;
                preMasterVm.TotalAmount = pmVM.TotalAmount;
                preMasterVm.TotalVATAmount = pmVM.TotalVATAmount;
                preMasterVm.SerialNo = pmVM.SerialNo;
                preMasterVm.LCNumber = pmVM.LCNumber;
                preMasterVm.Comments = pmVM.Comments;
                preMasterVm.LastModifiedBy = pmVM.LastModifiedBy;
                preMasterVm.LastModifiedOn = pmVM.LastModifiedOn;
                preMasterVm.BENumber = pmVM.BENumber;
                preMasterVm.ProductType = pmVM.ProductType;
                preMasterVm.TransactionType = pmVM.TransactionType;
                preMasterVm.ReceiveDate = pmVM.ReceiveDate;
                preMasterVm.Post = pmVM.Post;
                preMasterVm.WithVDS = pmVM.WithVDS;
                preMasterVm.ReturnId = pmVM.ReturnId;
                preMasterVm.LCDate = pmVM.LCDate;
                preMasterVm.USDInvoiceValue = pmVM.USDInvoiceValue;
                preMasterVm.LandedCost = pmVM.LandedCost;
                preMasterVm.TDSAmount = pmVM.TDSAmount;
                preMasterVm.IsTDS = pmVM.IsTDS;
                preMasterVm.IsRebate = pmVM.IsRebate;
                preMasterVm.RebatePeriodId = pmVM.RebatePeriodId;
                preMasterVm.RebateDate = pmVM.RebateDate;

                #endregion

                pmVM.VendorID = Master.VendorID;
                pmVM.InvoiceDate = Master.InvoiceDate;
                pmVM.CustomHouse = Master.CustomHouse;
                pmVM.CustomHouseCode = Master.CustomHouseCode;
                pmVM.TotalAmount = Master.TotalAmount;
                pmVM.TotalVATAmount = Master.TotalVATAmount;
                pmVM.SerialNo = Master.SerialNo;
                pmVM.LCNumber = Master.LCNumber;
                pmVM.Comments = Master.Comments;
                pmVM.LastModifiedBy = Master.LastModifiedBy;
                pmVM.LastModifiedOn = Master.LastModifiedOn;
                pmVM.BENumber = Master.BENumber;
                pmVM.ProductType = Master.ProductType;
                pmVM.TransactionType = Master.TransactionType;
                pmVM.ReceiveDate = Master.ReceiveDate;
                pmVM.Post = Master.Post;
                pmVM.WithVDS = Master.WithVDS;
                pmVM.ReturnId = Master.ReturnId;
                pmVM.LCDate = Master.LCDate;
                pmVM.USDInvoiceValue = Master.USDInvoiceValue;
                pmVM.LandedCost = Master.LandedCost;
                pmVM.TDSAmount = Master.TDSAmount;
                pmVM.IsTDS = Master.IsTDS;
                pmVM.RebatePeriodId = Master.RebatePeriodId;
                pmVM.IsRebate = Master.IsRebate;
                pmVM.RebateDate = Master.RebateDate;
                pmVM.BankGuarantee = Master.BankGuarantee;
                pmVM.TDSRate = Master.TDSRate;
                pmVM.VehicleNo = Master.VehicleNo;
                pmVM.VehicleType = Master.VehicleType;

                retResults = PurchaseUpdateToMaster(pmVM, currConn, transaction, connVM);

                ////retResults = PurchaseUpdateToMaster(Master, currConn, transaction);
                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                }

                #region Delete Existing Purchase/Receive/Issue Data

                sqlText = "";
                sqlText += @" delete FROM PurchaseInvoiceDetails WHERE PurchaseInvoiceNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM PurchaseInvoiceDuties WHERE PurchaseInvoiceNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM PurchaseSaleTrackings WHERE PurchaseInvoiceNo=@PurchaseInvoiceNo ";

                sqlText += @" delete FROM ReceiveDetails WHERE ReceiveNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM ReceiveHeaders WHERE ReceiveNo=@PurchaseInvoiceNo ";

                sqlText += @" delete FROM IssueDetails WHERE IssueNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM IssueDetailBOMs WHERE IssueNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM IssueHeaders WHERE IssueNo=@PurchaseInvoiceNo ";

                sqlText += @" delete FROM SalesInvoiceDetails WHERE SalesInvoiceNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM SalesInvoiceHeadersExport WHERE SalesInvoiceNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM SalesInvoiceHeaders WHERE SalesInvoiceNo=@PurchaseInvoiceNo ";

                SqlCommand cmdDeleteDetail = new SqlCommand(sqlText, currConn);
                cmdDeleteDetail.Transaction = transaction;
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                transResult = cmdDeleteDetail.ExecuteNonQuery();


                #endregion

                #endregion update Header

                #region Insert Detail

                #region Check Point

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.PurchasemsgNoDataToUpdate);
                }

                #endregion

                #region Set BOMId

                SetBOMId(Master, Details, currConn, transaction, connVM);

                #endregion

                Master.CreatedBy = pmVM.CreatedBy;
                Master.CreatedOn = pmVM.CreatedOn;

                retResults = PurchaseInsert2(Master, Details, Duties, Trackings, transaction, currConn, connVM, UserId);

                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                }

                #endregion

                #region Tracking

                if (Trackings.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.PurchasemsgNoDataToUpdateImportDyties);
                }


                foreach (TrackingVM tracking in Trackings.ToList())
                {

                    #region Find Heading1 Existence

                    sqlText = "";
                    sqlText += "select COUNT(Heading1) from Trackings WHERE ";
                    sqlText += " ItemNo=@trackingItemNo";
                    sqlText += " AND Heading1 =@trackingHeading1";

                    SqlCommand cmdFindHeading1 = new SqlCommand(sqlText, currConn);
                    cmdFindHeading1.Transaction = transaction;
                    cmdFindHeading1.Parameters.AddWithValue("@trackingItemNo", tracking.ItemNo);
                    cmdFindHeading1.Parameters.AddWithValue("@trackingHeading1", tracking.Heading1);
                    decimal IDExist = (int)cmdFindHeading1.ExecuteScalar();
                    if (IDExist <= 0)
                    {
                        #region Check Heading2

                        sqlText = "";
                        sqlText += "select COUNT(Heading2) from Trackings WHERE ";
                        sqlText += " ItemNo=@trackingItemNo";
                        sqlText += " AND Heading2 =@trackingHeading2";

                        SqlCommand cmdFindHeading2 = new SqlCommand(sqlText, currConn);
                        cmdFindHeading2.Transaction = transaction;
                        cmdFindHeading2.Parameters.AddWithValue("@trackingItemNo", tracking.ItemNo);
                        cmdFindHeading2.Parameters.AddWithValue("@trackingHeading2", tracking.Heading2);
                        decimal IDExist2 = (int)cmdFindHeading2.ExecuteScalar();
                        #endregion
                        if (IDExist2 <= 0)
                        {
                            // Insert
                            #region Insert
                            sqlText = "";
                            sqlText += " insert into Trackings";
                            sqlText += " (";
                            sqlText += " PurchaseInvoiceNo                                ,";
                            sqlText += " ItemNo                                ,";
                            sqlText += " TrackLineNo                                ,";
                            sqlText += " Heading1                                ,";
                            sqlText += " Heading2                                ,";
                            sqlText += " Quantity                                ,";
                            sqlText += " UnitPrice                                ,";
                            sqlText += " IsPurchase                                ,";
                            sqlText += " IsIssue                                ,";
                            sqlText += " IsReceive                                ,";
                            sqlText += " IsSale                                ,";
                            sqlText += " Post                                ,";
                            sqlText += " ReceivePost                                ,";
                            sqlText += " SalePost                                ,";
                            sqlText += " IssuePost                                ,";
                            sqlText += " CreatedBy                                ,";
                            sqlText += " CreatedOn                                ,";
                            sqlText += " LastModifiedBy                                ,";
                            sqlText += " LastModifiedOn";
                            sqlText += " )";
                            sqlText += " values";
                            sqlText += " (";

                            sqlText += "@MasterPurchaseInvoiceNo,";
                            sqlText += "@trackingItemNo,";
                            sqlText += "@trackingTrackingLineNo,";
                            sqlText += "@trackingHeading1,";
                            sqlText += "@trackingHeading2,";
                            sqlText += "@trackingQuantity,";
                            sqlText += "@trackingUnitPrice,";
                            sqlText += "@trackingIsPurchase,";
                            sqlText += "     'N'                                            ,";
                            sqlText += "     'N'                                            ,";
                            sqlText += "     'N'                                            ,";
                            sqlText += "@MasterPost,";
                            sqlText += "     'N'                        ,";
                            sqlText += "     'N'                        ,";
                            sqlText += "     'N'                        ,";
                            sqlText += "@MasterCreatedBy,";
                            sqlText += "@MasterCreatedOn,";
                            sqlText += "@MasterLastModifiedBy,";
                            sqlText += "@MasterLastModifiedOn";

                            sqlText += ")";


                            SqlCommand cmdInsertTrackings = new SqlCommand(sqlText, currConn);
                            cmdInsertTrackings.Transaction = transaction;
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingTrackingLineNo", tracking.TrackingLineNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading2", tracking.Heading2);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingQuantity", tracking.Quantity);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingUnitPrice", tracking.UnitPrice);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsPurchase", tracking.IsPurchase);

                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedBy", Master.CreatedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedOn", OrdinaryVATDesktop.DateToDate(Master.CreatedOn));
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));

                            transResult = (int)cmdInsertTrackings.ExecuteNonQuery();
                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                MessageVM.PurchasemsgSaveNotSuccessfully);
                            }


                            #endregion
                        }
                        else
                        {
                            //Update
                            #region Update
                            sqlText = "";
                            sqlText += " update Trackings set ";
                            sqlText += " TrackLineNo='" + Convert.ToInt32(tracking.TrackingLineNo) + "',";
                            sqlText += " Heading1= '" + tracking.Heading1 + "',";
                            sqlText += " Heading2= '" + tracking.Heading2 + "',";
                            sqlText += " Quantity= '" + Convert.ToInt32(tracking.Quantity) + "',";
                            sqlText += " UnitPrice= '" + tracking.UnitPrice + "',";
                            if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                            {
                                sqlText += " ReturnType='" + tracking.ReturnType + "',";
                                sqlText += " ReturnPurchase= '" + tracking.ReturnPurchase + "',";
                                sqlText += " ReturnPurchaseID='" + tracking.ReturnPurchaseID + "',";
                                sqlText += " ReturnPurDate='" + tracking.ReturnPurDate + "',";
                            }
                            else
                            {
                                sqlText += " Post=@MasterPost,";
                            }
                            sqlText += " LastModifiedBy =@MasterLastModifiedBy,";
                            sqlText += " LastModifiedOn =@MasterLastModifiedOn";

                            //sqlText += " where  PurchaseInvoiceNo ='" + Master.PurchaseInvoiceNo + "' ";
                            sqlText += " where ItemNo = @trackingItemNo";
                            sqlText += " and Heading2 = @trackingHeading2 ";

                            SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                            cmdInsDetail.Transaction = transaction;
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);

                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingHeading2", tracking.Heading2);

                            transResult = (int)cmdInsDetail.ExecuteNonQuery();

                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        //Update
                        #region Update
                        sqlText = "";
                        sqlText += " update Trackings set ";
                        sqlText += " TrackLineNo='" + tracking.TrackingLineNo + "',";
                        sqlText += " Heading1= '" + tracking.Heading1 + "',";
                        sqlText += " Heading2= '" + tracking.Heading2 + "',";
                        sqlText += " Quantity= '" + Convert.ToInt32(tracking.Quantity) + "',";
                        sqlText += " UnitPrice= '" + tracking.UnitPrice + "',";


                        if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                        {
                            sqlText += " ReturnType='" + tracking.ReturnType + "',";
                            sqlText += " ReturnPurchase= '" + tracking.ReturnPurchase + "',";
                            sqlText += " ReturnPurchaseID='" + tracking.ReturnPurchaseID + "',";
                            sqlText += " ReturnPurDate='" + tracking.ReturnPurDate + "',";
                        }
                        else
                        {
                            sqlText += " Post=@MasterPost,";
                        }

                        sqlText += " LastModifiedBy = @MasterLastModifiedBy,";
                        sqlText += " LastModifiedOn = @MasterLastModifiedOn";

                        //sqlText += " where  PurchaseInvoiceNo ='" + Master.PurchaseInvoiceNo + "' ";
                        sqlText += " where ItemNo = @trackingItemNo";
                        sqlText += " and Heading1 = @trackingHeading1";


                        SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        cmdInsDetail.Transaction = transaction;
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);

                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);


                        transResult = (int)cmdInsDetail.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                            MessageVM.PurchasemsgUpdateNotSuccessfully);
                        }
                        #endregion
                    }


                    #endregion Find Heading1 Existence
                }

                #endregion Tracking

                #region Update PeriodId

                sqlText = "";
                sqlText += @"

UPDATE PurchaseInvoiceHeaders 
SET PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDate)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDate)),6)
WHERE PurchaseInvoiceNo = @PurchaseInvoiceNo


UPDATE PurchaseInvoiceDetails 
SET PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(ReceiveDate)) +  CONVERT(VARCHAR(4),YEAR(ReceiveDate)),6)
WHERE PurchaseInvoiceNo = @PurchaseInvoiceNo

update PurchaseInvoiceHeaders set WithVDS=d.WithVDS
from (select PurchaseInvoiceNo, case when VDSAmount>0 then 'Y' else 'N' end WithVDS  from PurchaseInvoiceDetails
where VDSAmount>0  
) d 
where d.PurchaseInvoiceNo=PurchaseInvoiceHeaders.PurchaseInvoiceNo
and PurchaseInvoiceHeaders.PurchaseInvoiceNo=@PurchaseInvoiceNo


";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn, transaction);
                cmdUpdate.Parameters.AddWithValue("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                transResult = cmdUpdate.ExecuteNonQuery();

                #endregion

                #region Update Product Stock


                if (currentPostStatus == "Y" && dtCurrentItems != null && dtCurrentItems.Rows.Count > 0)
                {

                    List<string> transactionTypes = new List<string>() { "other", "import" };

                    if (transactionTypes.Contains(Master.TransactionType.ToLower()))
                    {

                        //var res = Details.Join(previousDetailVMs, prev => prev.ItemNo, x => x.ItemNo,
                        //    (current, prev) => new { current.ItemNo, Quantity = prev.UOMQty+ (current) });

                        DataTable dtItemNo = previousDetailVMs.Select(x => new { x.ItemNo, Quantity = x.UOMQty * -1 }).ToList().ToDataTable();

                        productDal.Product_IN_OUT(new ParameterVM() { dt = dtItemNo, BranchId = Master.BranchId }, null, null, connVM);
                    }
                    else if (string.Equals(Master.TransactionType, "PurchaseReturn",
                                 StringComparison.CurrentCultureIgnoreCase))
                    {
                        DataTable dtItemNo = previousDetailVMs.Select(x => new { x.ItemNo, Quantity = x.UOMQty }).ToList().ToDataTable();

                        productDal.Product_IN_OUT(new ParameterVM() { dt = dtItemNo, BranchId = Master.BranchId }, null, null, connVM);
                    }
                    else
                    {
                        ResultVM rVM = new ResultVM();

                        ParameterVM paramVM = new ParameterVM();
                        paramVM.BranchId = Master.BranchId;
                        paramVM.InvoiceNo = Master.PurchaseInvoiceNo;
                        paramVM.dt = dtCurrentItems;

                        paramVM.IDs = new List<string>();

                        foreach (DataRow dr in paramVM.dt.Rows)
                        {
                            paramVM.IDs.Add(dr["ItemNo"].ToString());
                        }

                        if (paramVM.IDs.Count > 0)
                        {
                            rVM = _ProductDAL.Product_Stock_Update(paramVM, currConn, transaction, connVM, UserId);
                        }
                    }

                }

                #endregion


                #region Master Setting Update

                //UpdateAveragePrice(Master, currConn, transaction, commonDal, previousDetailVMs, preMasterVm);


                //commonDAL.settingsUpdateMaster("DayEnd", "DayEndProcess", "N", currConn, transaction);
                commonDAL.UpdateProcessFlag(Master.PurchaseInvoiceNo, receiveDate, currConn, transaction, connVM);

                #endregion


                #region Commit

                if (transaction != null)
                {
                    //if (transResult > 0)
                    //{
                    transaction.Commit();
                    //}

                }

                #endregion Commit

                #region SuccessResult


                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgUpdateSuccessfully;
                retResults[2] = Master.PurchaseInvoiceNo;
                retResults[3] = "N";
                #endregion SuccessResult

            }

            #endregion Try

            #region Catch and Finall

            //////catch (SqlException sqlex)
            //////{
            //////    transaction.Rollback();
            //////    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //////    //throw sqlex;
            //////}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("PurchaseDAL", "PurchaseUpdate", ex.ToString() + "\n" + sqlText, "Purchase");

                //throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw new ArgumentNullException("", sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result

            return retResults;

            #endregion Result

        }

        private void UpdateAveragePrice(PurchaseMasterVM Master, SqlConnection currConn, SqlTransaction transaction, CommonDAL commonDal, List<PurchaseDetailVM> previousDetailVMs, PurchaseMasterVM preMasterVm, string removeOnPost = "Y", SysDBInfoVMTemp connVM = null)
        {

            try
            {

                if (Master.TransactionType == "TollReceive" || Master.TransactionType == "TollReceiveRaw" || Master.TransactionType == "ClientRawReceive" || Master.TransactionType == "ClientFGReceiveWOBOM")
                    return;


                #region Average Price Update

                PurchasePostAVGPrice(Master, preMasterVm, previousDetailVMs, currConn, transaction, removeOnPost, connVM);

                #endregion


                string value = commonDal.settings("Issue", "DayEndProcessAVGPrice", currConn, transaction, connVM);

                //if (value == "Y")
                //{
                //    IssueDAL issuedal = new IssueDAL();

                //    issuedal.MultipleUpdate(new IssueMasterVM() { IssueDateTimeFrom = "2019-07-01", IssueDateTimeTo = "2020-07-01", }, currConn, transaction);
                //}

                IssueDAL issuedal = new IssueDAL();

                issuedal.MultipleUpdate(new IssueMasterVM() { IssueDateTimeFrom = "2019-07-01", IssueDateTimeTo = "2020-07-01", }, currConn, transaction, connVM);
            }
            catch (Exception e)
            {

            }
        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] PurchasePost(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, List<PurchaseDutiesVM> Duties, List<TrackingVM> Trackings, SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            IssueDAL issDal = new IssueDAL();
            ReceiveDAL recDal = new ReceiveDAL();
            int transResult = 0;
            string sqlText = "";


            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.purchaseMsgNoDataToPost);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.purchaseMsgCheckDatePost);

                }


                #endregion Validation for Header

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Settings

                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue", currConn, transaction, connVM) == "Y" ? true : false);
                bool purchaseSaleTracking =
                    commonDal.settings("Purchase", "PurchaseSaleTracking", currConn, transaction, connVM) == "Y";

                #endregion

                #region Comments Aug-16-2020

                ////#region Fiscal Year Check

                ////string transactionDate = Master.ReceiveDate;
                ////string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                ////string yearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy");
                ////string PeriodIdCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("MMyyyy");

                ////string[] resultYearCheck = commonDal.FiscalYearLockCheck(yearCheck, null, null);

                ////string[] resultPeriodIdCheck = commonDal.PeriodIdLockCheck(PeriodIdCheck, null, null);


                ////if (resultYearCheck[0] != "N")
                ////{
                ////    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, resultYearCheck[1]);
                ////}
                ////if (resultPeriodIdCheck[0] != "N")
                ////{
                ////    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, resultPeriodIdCheck[1]);
                ////}

                ////if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                ////{

                ////    #region YearLock
                ////    sqlText = "";

                ////    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                ////                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                ////    DataTable dataTable = new DataTable("ProductDataT");
                ////    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                ////    cmdIdExist.Transaction = transaction;
                ////    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                ////    reportDataAdapt.Fill(dataTable);

                ////    if (dataTable == null)
                ////    {
                ////        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                ////    }

                ////    else if (dataTable.Rows.Count <= 0)
                ////    {
                ////        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                ////    }
                ////    else
                ////    {
                ////        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                ////        {
                ////            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                ////        }
                ////        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                ////        {
                ////            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                ////        }
                ////    }
                ////    #endregion YearLock
                ////    #region YearNotExist
                ////    sqlText = "";
                ////    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                ////    DataTable dtYearNotExist = new DataTable("ProductDataT");

                ////    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                ////    cmdYearNotExist.Transaction = transaction;
                ////    //countId = (int)cmdIdExist.ExecuteScalar();

                ////    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                ////    YearNotExistDataAdapt.Fill(dtYearNotExist);

                ////    if (dtYearNotExist == null)
                ////    {
                ////        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                ////    }

                ////    else if (dtYearNotExist.Rows.Count < 0)
                ////    {
                ////        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                ////    }
                ////    else
                ////    {
                ////        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                ////            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                ////        {
                ////            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                ////        }
                ////    }
                ////    #endregion YearNotExist

                ////}


                ////#endregion Fiscal Year CHECK

                #endregion

                #region Find Month Lock

                string PeriodName = Convert.ToDateTime(Master.ReceiveDate).ToString("MMMM-yyyy");
                string[] vValues = { PeriodName };
                string[] vFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, vFields, vValues, null, null, connVM).FirstOrDefault();

                if (varFiscalYearVM == null)
                {
                    throw new Exception(PeriodName + ": This Fiscal Period is not Exist!");

                }

                if (varFiscalYearVM.VATReturnPost == "Y")
                {
                    throw new Exception(PeriodName + ": VAT Return (9.1) already submitted for this month!");

                }

                #endregion Find Month Lock

                #region Fiscal Year Check
                string PeriodIdCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("MMyyyy");
                string RebatePeriodIdCheck = Convert.ToDateTime(Master.RebateDate).ToString("MMyyyy");

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                #region Find ID for Post

                sqlText = "";

                sqlText = sqlText +
                          "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo";

                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                                                    MessageVM.purchaseMsgUnableFindExistIDPost);
                }

                #endregion Find ID for Update

                #region Post Data

                #region RebateWithGRN

                DataTable settingsDt = new DataTable();

                bool RebateWithGRN = false;

                if (settingVM.SettingsDTUser == null)
                {
                    settingsDt = new CommonDAL().SettingDataAll(null, null, connVM);
                }

                RebateWithGRN = commonDal.settingsDesktop("Purchase", "RebateWithGRN", settingsDt, connVM) == "Y";

                #endregion

                sqlText = "";
                sqlText += @" Update  ReceiveDetails             set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE ReceiveNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  ReceiveHeaders             set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE ReceiveNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueDetails               set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueHeaders               set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueDetailBOMs            set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  IssueHeaderBOMs            set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE IssueNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  PurchaseInvoiceDuties      set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";

                sqlText += @" Update  PurchaseInvoiceDetails     set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  PurchaseInvoiceHeaders     set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";

                #region comments 04 Feb 2021

                ////if (RebateWithGRN)
                ////{
                ////    sqlText += @" Update  PurchaseInvoiceDetails     set  IsRebate='Y',RebatePeriodID=@PeriodId,Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                ////    sqlText += @" Update  PurchaseInvoiceHeaders     set  IsRebate='Y',RebatePeriodID=@PeriodId,Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";

                ////    //////sqlText += @" Update  PurchaseInvoiceDetails     set  IsRebate='Y',RebatePeriodID=@RebatePeriodID,Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                ////    //////sqlText += @" Update  PurchaseInvoiceHeaders     set  IsRebate='Y',RebatePeriodID=@RebatePeriodID,Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";

                ////}
                ////else
                ////{

                ////    sqlText += @" Update  PurchaseInvoiceDetails     set  IsRebate='N',RebatePeriodID=0,Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                ////    sqlText += @" Update  PurchaseInvoiceHeaders     set  IsRebate='N',RebatePeriodID=0,Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                ////}

                #endregion

                sqlText += @" Update  PurchaseTDSs               set  Post ='Y'    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";

                // sqlText += @" Update  PurchaseSaleTrackings      set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE PurchaseInvoiceNo=@MasterSalesInvoiceNo ";
                // sqlText += @" Update  SalesInvoiceHeadersExport  set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  SalesInvoiceHeaders        set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";
                sqlText += @" Update  SalesInvoiceDetails        set  Post ='Y',LastModifiedBy =@MasterLastModifiedBy,LastModifiedOn =@MasterLastModifiedOn    WHERE SalesInvoiceNo=@MasterSalesInvoiceNo ";

                SqlCommand cmdDeleteDetail = new SqlCommand(sqlText, currConn);
                cmdDeleteDetail.Transaction = transaction;
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterSalesInvoiceNo", Master.PurchaseInvoiceNo);
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                if (RebateWithGRN)
                {
                    cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@PeriodId", PeriodIdCheck);
                    ////cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@RebatePeriodID", RebatePeriodIdCheck);

                }
                transResult = cmdDeleteDetail.ExecuteNonQuery();

                #endregion

                #region Tracking
                if (Trackings.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                                                    MessageVM.PurchasemsgNoDataPostToPost);
                }


                foreach (TrackingVM tracking in Trackings.ToList())
                {
                    #region update Trackings

                    sqlText = "";

                    sqlText += " update Trackings set  ";
                    sqlText += " LastModifiedBy= @MasterLastModifiedBy, ";
                    sqlText += " LastModifiedOn= @MasterLastModifiedOn, ";
                    sqlText += " Post=@MasterPost";
                    //sqlText += " where  PurchaseInvoiceNo= '" + Master.PurchaseInvoiceNo + "' ";
                    sqlText += " where  ItemNo= @trackingItemNo ";
                    sqlText += " and  Heading1= @trackingHeading1 ";


                    SqlCommand cmdUpdateTracking = new SqlCommand(sqlText, currConn);
                    cmdUpdateTracking.Transaction = transaction;
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);

                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);


                    transResult = (int)cmdUpdateTracking.ExecuteNonQuery();
                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                        MessageVM.PurchasemsgUpdateNotSuccessfully);
                    }

                    #endregion update Trackings
                }
                #endregion

                #region TrackingWithSale

                bool TrackingWithSale = Convert.ToBoolean(commonDal.settingValue("Purchase", "TrackingWithSale", connVM, null, null) == "Y" ? true : false);
                if (TrackingWithSale)
                {
                    DataTable tracDt = new DataTable();
                    sqlText = "";
                    sqlText = @"SELECT    
                                   PurchaseInvoiceDetails.PurchaseInvoiceNo,
PurchaseInvoiceDetails.InvoiceDateTime,
PurchaseInvoiceDetails.ReceiveDate,
PurchaseInvoiceDetails.ItemNo, 
isnull(PurchaseInvoiceDetails.BENumber,'N/A')BENumber ,
isnull(PurchaseInvoiceDetails.Quantity,0)Quantity,
isnull(PurchaseInvoiceDetails.UOM,'N/A')UOM ,
isnull(PurchaseInvoiceDetails.VATRate,0)VATRate,
isnull(PurchaseInvoiceDetails.ExpireDate,'2100-01-01')ExpireDate,
isnull(PurchaseInvoiceDetails.USDVAT,0) / isnull(PurchaseInvoiceDetails.Quantity,0) VATAmount,
(isnull(PurchaseInvoiceDetails.AssessableValue,0) 
+ isnull(PurchaseInvoiceDetails.CDAmount,0) 
+ isnull(PurchaseInvoiceDetails.RDAmount,0) 
+ isnull(PurchaseInvoiceDetails.SDAmount,0) 
+ isnull(PurchaseInvoiceDetails.TVBAmount,0) ) / isnull(PurchaseInvoiceDetails.Quantity,0)
VATableValue,
isnull(PurchaseInvoiceDetails.ReturnTransactionType,'')ReturnTransactionType,
isnull(PurchaseInvoiceHeaders.CustomHouse,'')CustomHouse
FROM dbo.PurchaseInvoiceDetails 
                                    left outer join PurchaseInvoiceHeaders on PurchaseInvoiceHeaders.PurchaseInvoiceNo=PurchaseInvoiceDetails.PurchaseInvoiceNo
                                    WHERE ";
                    sqlText += @"   (PurchaseInvoiceDetails.PurchaseInvoiceNo = @MasterPurchaseInvoiceNo )";
                    sqlText += @"  order by PurchaseInvoiceDetails.ItemNo";
                    SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                    cmdRIFB.Transaction = transaction;
                    cmdRIFB.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                    reportDataAdapt.Fill(tracDt);

                    foreach (DataRow dRow in tracDt.Rows)
                    {
                        #region Insert only DetailTable PurchaseInvoiceDetails

                        sqlText = "";
                        sqlText += " insert into PurchaseSaleTrackings(";
                        sqlText += " PurchaseInvoiceNo,";
                        sqlText += " PurchaseInvoiceDateTime,";
                        sqlText += " ReceiveDate,";
                        sqlText += " CustomHouse,";
                        sqlText += " ItemNo,";
                        sqlText += " BENumber,";
                        sqlText += " ExpireDate,";
                        sqlText += " BranchId,";
                        sqlText += " SalesInvoiceNo,";
                        sqlText += " SaleInvoiceDateTime,";
                        sqlText += " VATableValue,";
                        sqlText += " VATAmount,";
                        sqlText += " IsSold";
                        sqlText += " )";
                        sqlText += " values(	";
                        sqlText += "'" + dRow["PurchaseInvoiceNo"].ToString() + "',";
                        sqlText += "'" + dRow["InvoiceDateTime"].ToString() + "',";
                        sqlText += "'" + dRow["ReceiveDate"].ToString() + "',";
                        sqlText += "'" + dRow["CustomHouse"].ToString() + "',";
                        sqlText += "'" + dRow["ItemNo"].ToString() + "',";
                        sqlText += "'" + dRow["BENumber"].ToString() + "',";
                        sqlText += "'" + dRow["ExpireDate"].ToString() + "',";
                        sqlText += "'" + Master.BranchId + "',";
                        sqlText += "'0',";
                        sqlText += "'01/01/1900',";
                        sqlText += "'" + dRow["VATableValue"].ToString() + "',";
                        sqlText += "'" + dRow["VATAmount"].ToString() + "',";
                        sqlText += "'0'";
                        sqlText += ")	";

                        decimal qty = Convert.ToDecimal(dRow["Quantity"]);
                        for (int i = 0; i < qty; i++)
                        {
                            SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                            cmdInsDetail.Transaction = transaction;
                            transResult = (int)cmdInsDetail.ExecuteNonQuery();

                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                MessageVM.PurchasemsgSaveNotSuccessfully);
                            }
                        }


                        #endregion Insert only DetailTable
                    }
                }
                #endregion TrackingWithSale

                #region Purchase_Product_IN_OUT

                ResultVM rVM = new ResultVM();

                ParameterVM paramVM = new ParameterVM();
                paramVM.InvoiceNo = Master.PurchaseInvoiceNo;

                rVM = Purchase_Product_IN_OUT(paramVM, currConn, transaction, connVM);

                #endregion

                #region Day End Process
                ////TollReceive
                ////TollReceiveRaw
                ////ClientRawReceive
                ////ClientFGReceiveWOBOM


                //UpdateAveragePrice(Master, currConn,transaction,commonDal,new List<PurchaseDetailVM>(),Master,"N");

                try
                {
                    string dayEnd = commonDal.settings("Purchase", "DayEndProcess", currConn, transaction, connVM);

                    if (dayEnd == "Y")
                    {
                        IssueDAL issueDAL = new IssueDAL();
                        AVGPriceVm priceVm = new AVGPriceVm();
                        priceVm.AvgDateTime = Master.ReceiveDate;
                        ResultVM resultVm = issueDAL.UpdateAvgPrice_New(priceVm, currConn, transaction);
                    }

                }
                catch (Exception e)
                {

                }


                #endregion

                if (purchaseSaleTracking)
                {
                    PurchaseTracking(Master, currConn, transaction);
                }

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.purchaseMsgSuccessfullyPost;
                retResults[2] = Master.PurchaseInvoiceNo;
                retResults[3] = "Y";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }
                //throw new ArgumentNullException("", sqlText + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("PurchaseDAL", "PurchasePost", ex.ToString() + "\n" + sqlText, "Purchase");

                //throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion Catch and Finall

            #region Result

            return retResults;

            #endregion Result

        }

        private void PurchaseTracking(PurchaseMasterVM Master, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            PurchaseMasterVM purchaseMaster = SelectAllList(0, new[] { "pih.PurchaseInvoiceNo" },
                new[] { Master.PurchaseInvoiceNo }, currConn,
                transaction).FirstOrDefault();
            DataTable purchaseDetail = SelectPurchaseDetail(Master.PurchaseInvoiceNo, null, null, currConn, transaction, false, connVM);

            DataTable dtPurchaseTracking = purchaseDetail.DefaultView.ToTable(false, "PurchaseInvoiceNo",
                "BENumber", "ItemNo", "UOMQty",
                "UOM", "ReceiveDate", "InvoiceDateTime", "ExpireDate");

            dtPurchaseTracking.Columns.Add(new DataColumn() { ColumnName = "PurchaseHeaderId", DefaultValue = purchaseMaster.Id });


            dtPurchaseTracking.Columns["BENumber"].ColumnName = "BENo";

            string deleteExistingData =
                "delete from PurchaseTrackingRecord where PurchaseInvoiceNo = @PurchaseInvoiceNo";

            SqlCommand command = new SqlCommand(deleteExistingData, currConn, transaction);
            command.Parameters.AddWithValue("@PurchaseInvoiceNo", purchaseMaster.PurchaseInvoiceNo);
            command.ExecuteNonQuery();

            CommonDAL commonDAL = new CommonDAL();
            string[] result = commonDAL.BulkInsert("PurchaseTrackingRecord", dtPurchaseTracking, currConn,
                transaction, 10000, null, null);


            string updateRestQty = "Update PurchaseTrackingRecord set RestQty = UOMQty where PurchaseInvoiceNo = @PurchaseInvoiceNo ";
            command.CommandText = updateRestQty;
            command.ExecuteNonQuery();
        }

        private void IssueDayEndProcess(PurchaseMasterVM Master, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            CommonDAL commonDal = new CommonDAL();
            try
            {
                string[] transactionTypes = new string[]
                {
                    "Other", "PurchaseCN", "Trading", "Service", "ServiceNS", "CommercialImporter", "InputService",
                    "Import", "ServiceImport", "ServiceNSImport", "TradingImport", "InputServiceImport",
                    "PurchaseReturn", "PurchaseDN"
                };

                if (transactionTypes.Any(x => x.ToLower() == Master.TransactionType.ToLower()))
                {
                    string value = commonDal.settings("Issue", "DayEndProcessAVGPrice", currConn, transaction, connVM);

                    if (value == "Y")
                    {
                        IssueDAL issuedal = new IssueDAL();

                        issuedal.MultipleUpdate(
                            new IssueMasterVM() { IssueDateTimeFrom = "2019-07-01", IssueDateTimeTo = "2020-07-01", }, currConn,
                            transaction, connVM);
                    }
                }
            }
            catch (Exception e)
            {
            }
        }

        private void PurchasePostAVGPrice(PurchaseMasterVM Master, PurchaseMasterVM previousMaster,
            List<PurchaseDetailVM> previousVms, SqlConnection currConn, SqlTransaction transaction,
            string remove = "N", SysDBInfoVMTemp connVM = null)
        {

            #region try

            try
            {

                #region TransactionTypes

                string[] transactionTypes = new[] { "Other", "PurchaseCN", "Trading", "Service", "ServiceNS", "CommercialImporter", "InputService", "ClientRawReceive", "ClientFGReceiveWOBOM" };

                string[] transactionTypesImport = new[] { "Import", "ServiceImport", "ServiceNSImport", "TradingImport", "InputServiceImport" };

                string[] transactionTypesReturn = new[] { "PurchaseReturn", "PurchaseDN" };

                #endregion

                List<PurchaseDetailVM> purchaseVMs = SelectPurchaseDetailList(Master.PurchaseInvoiceNo, null, null, currConn, transaction, connVM);

                #region Initializ

                decimal subTotal = 0;
                decimal purchaseQty = 0;

                decimal previousSubTotal = 0;
                decimal previousPurchaseQty = 0;
                string previousDate = "";

                #endregion

                #region previous Master check

                if (previousMaster != null)
                {
                    previousDate = Convert.ToDateTime(previousMaster.ReceiveDate).ToString("yyyy-MM-dd HH:mm:ss");
                }
                else
                {
                    previousDate = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd HH:mm:ss");
                }

                #endregion

                CommonDAL commonDAl = new CommonDAL();

                #region settings

                string sdInclude = commonDAl.settings("VAT6_1", "TotalIncludeSD", currConn, transaction, connVM);

                #endregion

                #region Loop Purchase Detail

                foreach (PurchaseDetailVM vm in purchaseVMs)
                {
                    string receiveDate = Convert.ToDateTime(vm.ReceiveDate).ToString("yyyy-MM-dd HH:mm:ss");
                    subTotal = 0;
                    purchaseQty = 0;
                    previousSubTotal = 0;
                    previousPurchaseQty = 0;


                    PurchaseDetailVM previousVM = previousVms.SingleOrDefault(x => x.ItemNo == vm.ItemNo);


                    if (transactionTypes.Contains(vm.TransactionType) || transactionTypesReturn.Contains(vm.TransactionType))
                    {
                        subTotal = vm.SubTotal;
                        purchaseQty = vm.UOMQty;

                        if (previousVM != null)
                        {
                            previousSubTotal = previousVM.SubTotal;
                            previousPurchaseQty = previousVM.UOMQty;
                        }

                    }
                    else if (transactionTypesImport.Contains(vm.TransactionType))
                    {
                        subTotal = vm.AssessableValue + vm.CDAmount + vm.RDAmount + +vm.TVAAmount + vm.TVBAmount +
                                   vm.OthersAmount;

                        purchaseQty = vm.UOMQty;


                        if (previousVM != null)
                        {
                            previousSubTotal = previousVM.AssessableValue + previousVM.CDAmount + previousVM.RDAmount +
                                               +previousVM.TVAAmount + previousVM.TVBAmount +
                                               previousVM.OthersAmount;

                            previousPurchaseQty = previousVM.UOMQty;
                        }
                    }

                    if (sdInclude == "Y")
                    {
                        subTotal += vm.SDAmount;
                        if (previousVM != null)
                        {
                            previousSubTotal += previousVM.SDAmount;
                        }
                    }


                    if (transactionTypesReturn.Contains(vm.TransactionType))
                    {
                        subTotal = subTotal * -1;
                        purchaseQty = purchaseQty * -1;

                        previousSubTotal = subTotal * -1;
                        previousPurchaseQty = purchaseQty * -1;


                    }

                    if (remove == "N")
                    {
                        UpdateProductAVGprice(vm.ItemNo, receiveDate, purchaseQty, subTotal, currConn, transaction,
                            previousPurchaseQty, previousSubTotal, previousDate, vm.PurchaseInvoiceNo, connVM);
                    }
                    else
                    {
                        RemoveOnUnpost(vm.ItemNo, vm.PurchaseInvoiceNo, vm.ReceiveDate, currConn, transaction, connVM);

                    }

                }

                #endregion

            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                FileLogger.Log("PurchaseDAL", "PurchasePostAVGPrice", ex.ToString(), "Purchase");

                throw ex;
            }

            #endregion

        }


        public ResultVM Purchase_Product_IN_OUT(ParameterVM paramVM, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try Statement

            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Invoice Status

                sqlText = "";
                sqlText = @"
----------declare @InvoiceNo as varchar(100)='IMP-0022/0919'

select PurchaseInvoiceNo, BranchId, Post from PurchaseInvoiceHeaders
where 1=1 
and PurchaseInvoiceNo=@InvoiceNo

";
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.InvoiceNo);

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                da.Fill(dt);

                if (dt != null && dt.Rows.Count > 0)
                {
                    paramVM.BranchId = Convert.ToInt32(dt.Rows[0]["BranchId"]);
                }

                #endregion

                #region Update Product Stock

                #region SQL Text

                sqlText = "";
                sqlText = @"
----------declare @InvoiceNo as varchar(100)='IMP-0022/0919'
declare @MultiplicationFactor as int=1


select 
@MultiplicationFactor = case 
when TransactionType in
(
'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'
,'TollReceive-WIP'
,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'
) then  1 
when TransactionType in
(
'PurchaseReturn','PurchaseDN'
) then  -1 
end

from PurchaseInvoiceDetails
where 1=1 
and PurchaseInvoiceNo=@InvoiceNo


select ItemNo, PurchaseInvoiceNo, TransactionType, UOMQty * (@MultiplicationFactor) as Quantity, Post from PurchaseInvoiceDetails
where 1=1 
and PurchaseInvoiceNo=@InvoiceNo

";
                #endregion


                cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.InvoiceNo);

                da = new SqlDataAdapter(cmd);
                dt = new DataTable();
                da.Fill(dt);

                paramVM.dt = dt;

                rVM = _ProductDAL.Product_IN_OUT(paramVM, currConn, transaction, connVM);

                #endregion

                #region Success Result

                rVM.Status = "Success";
                rVM.Message = "Product Stock Updated Successfully!";

                #endregion

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                FileLogger.Log("PurchaseDAL", "Purchase_Product_IN_OUT", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return rVM;
        }

        public decimal ReturnQty(string purchaseReturnId, string itemNo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            decimal retResults = 0;
            int countId = 0;
            string sqlText = "";
            SqlConnection currConn = null;
            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }

                #endregion open connection and transaction

                #region Return Qty

                sqlText = "  ";

                sqlText = "select Sum(isnull(PurchaseInvoiceDetails.Quantity,0)) from PurchaseInvoiceDetails ";
                sqlText += " where ItemNo = @itemNo and PurchaseReturnId = @purchaseReturnId";
                sqlText += " group by ItemNo";

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.Parameters.AddWithValue("@itemNo", itemNo);
                cmd.Parameters.AddWithValue("@purchaseReturnId", purchaseReturnId);
                if (cmd.ExecuteScalar() == null)
                {
                    retResults = 0;
                }
                else
                {
                    retResults = (decimal)cmd.ExecuteScalar();
                }

                #endregion Return Qty

            }

            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "ReturnQty", ex.ToString() + "\n" + sqlText, "Purchase");
                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                ////throw ex;
            }
            finally
            {
                if (currConn == null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        public string FindItemIdFromPurchase(string PurchaseInvoiceNo, string ItemNo, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string retResults = "0";
            string sqlText = "";
            //////SqlConnection vcurrConn = VcurrConn;
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {
                #region Old connection

                #region open connection and transaction

                ////if (vcurrConn == null)
                ////{
                ////    if (VcurrConn == null)
                ////    {
                ////        VcurrConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                ////        if (VcurrConn.State != ConnectionState.Open)
                ////        {
                ////            VcurrConn.Open();
                ////            Vtransaction = VcurrConn.BeginTransaction("Import Data");
                ////        }
                ////    }
                ////}

                #endregion open connection and transaction

                #endregion Old connection

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("Import Data");
                }

                #endregion open connection and transaction

                #region Validation
                if (string.IsNullOrEmpty(PurchaseInvoiceNo) && string.IsNullOrEmpty(ItemNo))
                {
                    throw new ArgumentNullException("FindItemId", "Invalid Item Information");
                }


                #endregion Validation

                #region Find

                sqlText = " ";
                sqlText = @" SELECT isnull(sum(AssessableValue),0)AssessableValue
FROM PurchaseInvoiceDuties PID  
WHERE 1=1";
                sqlText += "and PurchaseInvoiceNo=@PurchaseInvoiceNo ";
                sqlText += "and ItemNo=@ItemNo ";

                SqlCommand cmd1 = new SqlCommand(sqlText, currConn);
                cmd1.Transaction = transaction;
                cmd1.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);
                cmd1.Parameters.AddWithValue("@ItemNo", ItemNo);
                object obj1 = cmd1.ExecuteScalar();

                retResults = obj1.ToString();

                #endregion Find

            }

            #endregion try

            #region Catch and Finall


            catch (Exception ex)
            {
                //2020-12-13
                FileLogger.Log("PurchaseDAL", "FindItemIdFromPurchase", ex.ToString() + "\n" + sqlText, "Purchase");
                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }

            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

                #region Old

                ////if (vcurrConn == null)
                ////{
                ////    if (VcurrConn.State == ConnectionState.Open)
                ////    {
                ////        VcurrConn.Close();

                ////    }
                ////}
                #endregion

            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public string[] PurchaseUpdateDuty(DataTable DtDuty, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            string importID = "";
            string ItemNo = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";

            string PostStatus = "";
            ProductDAL productDal = new ProductDAL();
            CommonImportDAL cImport = new CommonImportDAL();


            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();

                transaction = currConn.BeginTransaction(MessageVM.PurchasemsgMethodNameInsert);

                #endregion open connection and transaction


                #region Data
                for (int i = 0; i < DtDuty.Rows.Count; i++)
                {
                    #region Fiscal Year Check

                    string transactionDate = DtDuty.Rows[i]["InvoiceDateTime"].ToString().Trim();
                    string transactionYearCheck = Convert.ToDateTime(transactionDate).ToString("yyyy-MM-dd");
                    if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                    {

                        #region YearLock
                        sqlText = "";

                        sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                       " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                        DataTable dataTable = new DataTable("ProductDataT");
                        SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                        cmdIdExist.Transaction = transaction;
                        SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                        reportDataAdapt.Fill(dataTable);

                        if (dataTable == null)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }

                        else if (dataTable.Rows.Count <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else
                        {
                            if (dataTable.Rows[0]["MLock"].ToString() != "N")
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                            }
                            else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                            }
                        }
                        #endregion YearLock
                        #region YearNotExist
                        sqlText = "";
                        sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                        DataTable dtYearNotExist = new DataTable("ProductDataT");

                        SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                        cmdYearNotExist.Transaction = transaction;
                        //countId = (int)cmdIdExist.ExecuteScalar();

                        SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                        YearNotExistDataAdapt.Fill(dtYearNotExist);

                        if (dtYearNotExist == null)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }

                        else if (dtYearNotExist.Rows.Count < 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                        else
                        {
                            if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                                || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                            }
                        }
                        #endregion YearNotExist

                    }


                    #endregion Fiscal Year CHECK

                    #region FindItemId
                    if (string.IsNullOrEmpty(DtDuty.Rows[i]["Item_Code"].ToString().Trim()))
                    {
                        throw new ArgumentNullException("Please insert value in 'Item_Code' field.");
                    }
                    ItemNo = cImport.FindItemId(DtDuty.Rows[i]["Item_Name"].ToString().Trim()
                                               , DtDuty.Rows[i]["Item_Code"].ToString().Trim(), currConn, transaction, false, "-", 1, 0, 0, connVM, "-");
                    if (string.IsNullOrEmpty(ItemNo))
                    {
                        throw new ArgumentNullException("Item Not Found In Database. Item Name: " + DtDuty.Rows[i]["Item_Name"].ToString().Trim()
                            + "(" + DtDuty.Rows[i]["Item_Code"].ToString().Trim() + ")");

                    }
                    else
                    {

                        string accvalue = FindItemIdFromPurchase(DtDuty.Rows[i]["ID"].ToString().Trim()
                                                 , ItemNo, currConn, transaction, connVM);
                        if (Convert.ToDecimal(accvalue) <= 0)
                        {
                            throw new ArgumentNullException("This Item Not Found In This Purchase. Item Name: " + DtDuty.Rows[i]["Item_Name"].ToString().Trim()
                            + "(" + DtDuty.Rows[i]["Item_Code"].ToString().Trim() + ")");
                        }
                        else
                        {
                            importID = DtDuty.Rows[i]["ID"].ToString().Trim();
                            DataRow[] ImportRaws;//= new DataRow[];//
                            if (!string.IsNullOrEmpty(importID))
                            {
                                DtPurchaseD = DtDuty;
                                ImportRaws = DtDuty.Select("ID='" + importID + "'");
                            }
                            else
                            {
                                ImportRaws = null;
                            }

                            if (ImportRaws != null && ImportRaws.Length > 0)
                            {

                                PurchaseDutiesVM duty = new PurchaseDutiesVM();
                                duty = DutyCalculation(ImportRaws, currConn, transaction, connVM).FirstOrDefault();
                                #region Update only DetailTable



                                sqlText = "";

                                sqlText += " update PurchaseInvoiceDuties set  ";
                                sqlText += " CnFInp                 =@dutyCnFInp, ";
                                sqlText += " CnFRate                =@dutyCnFRate, ";
                                sqlText += " CnFAmount              =@dutyCnFAmount, ";
                                sqlText += " InsuranceInp           =@dutyInsuranceInp, ";
                                sqlText += " InsuranceRate          =@dutyInsuranceRate, ";
                                sqlText += " InsuranceAmount        =@dutyInsuranceAmount, ";
                                sqlText += " AssessableInp          =@AssessableInp, ";// +DtDuty.Rows[i]["Assessable_Value"] + ", ";// duty.AssessableInp
                                sqlText += " AssessableValue        =@AssessableValue, ";// " + DtDuty.Rows[i]["Assessable_Value"] + ", ";// duty.AssessableValue 
                                sqlText += " CDInp                  =@dutyCDInp, ";
                                sqlText += " CDRate                 =@dutyCDRate, ";
                                sqlText += " CDAmount               =@dutyCDAmount, ";
                                sqlText += " RDInp                  =@dutyRDInp, ";
                                sqlText += " RDRate                 =@dutyRDRate, ";
                                sqlText += " RDAmount               =@dutyRDAmount, ";
                                sqlText += " TVBInp                 =@dutyTVBInp, ";
                                sqlText += " TVBRate                =@dutyTVBRate, ";
                                sqlText += " TVBAmount              =@dutyTVBAmount, ";
                                sqlText += " SDInp                  =@dutySDInp, ";
                                sqlText += " SD                     =@dutySD, ";
                                sqlText += " SDAmount               =@dutySDAmount, ";
                                sqlText += " VATInp                 =@dutyVATInp, ";
                                sqlText += " VATRate                =@dutyVATRate, ";
                                sqlText += " VATAmount              =@dutyVATAmount, ";
                                sqlText += " TVAInp                 =@dutyTVAInp, ";
                                sqlText += " TVARate                =@dutyTVARate, ";
                                sqlText += " TVAAmount              =@dutyTVAAmount, ";
                                sqlText += " ATVInp                 =@dutyATVInp, ";
                                sqlText += " ATVRate                =@dutyATVRate, ";
                                sqlText += " ATVAmount              =@dutyATVAmount, ";
                                sqlText += " OthersInp              =@dutyOthersInp, ";
                                sqlText += " OthersRate             =@dutyOthersRate, ";
                                sqlText += " OthersAmount           =@dutyOthersAmount, ";
                                sqlText += " Remarks                =@dutyRemarks";
                                sqlText += " where PurchaseInvoiceNo=@importID ";
                                sqlText += " and   ItemNo           =@ItemNo ";


                                SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                                cmdInsDetail.Transaction = transaction;

                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyCnFInp", duty.CnFInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyCnFRate", duty.CnFRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyCnFAmount", duty.CnFAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyInsuranceInp", duty.InsuranceInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyInsuranceRate", duty.InsuranceRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyInsuranceAmount", duty.InsuranceAmount);

                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@AssessableInp", DtDuty.Rows[i]["Assessable_Value"]);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@AssessableValue", DtDuty.Rows[i]["Assessable_Value"]);


                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyCDInp", duty.CDInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyCDRate", duty.CDRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyCDAmount", duty.CDAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyRDInp", duty.RDInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyRDRate", duty.RDRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyRDAmount", duty.RDAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyTVBInp", duty.TVBInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyTVBRate", duty.TVBRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyTVBAmount", duty.TVBAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutySDInp", duty.SDInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutySD", duty.SD);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutySDAmount", duty.SDAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyVATInp", duty.VATInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyVATRate", duty.VATRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyVATAmount", duty.VATAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyTVAInp", duty.TVAInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyTVARate", duty.TVARate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyTVAAmount", duty.TVAAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyATVInp", duty.ATVInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyATVRate", duty.ATVRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyATVAmount", duty.ATVAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyOthersInp", duty.OthersInp);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyOthersRate", duty.OthersRate);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyOthersAmount", duty.OthersAmount);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@dutyRemarks", duty.Remarks);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@importID", importID);
                                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ItemNo", ItemNo);

                                transResult = (int)cmdInsDetail.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                                }

                                sqlText = @"     update PurchaseInvoiceHeaders set TotalAmount=
                            isnull(CnFAmount,0)+isnull(InsuranceAmount,0)+isnull(AssessableValue,0)+isnull(CDAmount,0)+isnull(RDAmount,0)+isnull(TVBAmount,0)+isnull(SDAmount,0)+isnull(VATAmount,0)+isnull(TVAAmount,0)+isnull(ATVAmount,0)+isnull(OthersAmount,0)
                            ,TotalVATAmount=isnull(VATAmount,0)
                            from PurchaseInvoiceDuties 
                            where PurchaseInvoiceHeaders.PurchaseInvoiceNo=PurchaseInvoiceDuties.PurchaseInvoiceNo";
                                sqlText += " and  PurchaseInvoiceDuties.PurchaseInvoiceNo= '" + importID + "' ";

                                cmdInsDetail = new SqlCommand(sqlText, currConn);
                                cmdInsDetail.Transaction = transaction;
                                transResult = (int)cmdInsDetail.ExecuteNonQuery();
                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                                }

                                sqlText = @"   update PurchaseInvoiceDetails set 

                                CnFAmount=isnull(PurchaseInvoiceDuties.CnFAmount,0)
                                ,SubTotal=isnull(PurchaseInvoiceDuties.AssessableValue,0)-(isnull(PurchaseInvoiceDuties.InsuranceAmount,0)+isnull(PurchaseInvoiceDuties.CnFAmount,0))
                                ,InsuranceAmount=isnull(PurchaseInvoiceDuties.InsuranceAmount,0)
                                ,AssessableValue=isnull(PurchaseInvoiceDuties.AssessableValue,0)
                                ,CDAmount=isnull(PurchaseInvoiceDuties.CDAmount,0)
                                ,RDAmount=isnull(PurchaseInvoiceDuties.RDAmount,0)

                                ,TVBAmount=isnull(PurchaseInvoiceDuties.TVBAmount,0)
                                ,SD=isnull(PurchaseInvoiceDuties.SD,0)
                                ,SDAmount=isnull(PurchaseInvoiceDuties.SDAmount,0)
                                ,VATRate=isnull(PurchaseInvoiceDuties.VATRate,0)
                                ,VATAmount=isnull(PurchaseInvoiceDuties.VATAmount,0)
                                ,TVAAmount=isnull(PurchaseInvoiceDuties.TVAAmount,0)
                                ,ATVAmount=isnull(PurchaseInvoiceDuties.ATVAmount,0)
                                ,OthersAmount=isnull(PurchaseInvoiceDuties.OthersAmount,0)

                                from PurchaseInvoiceDuties 
                                where PurchaseInvoiceDetails.PurchaseInvoiceNo=PurchaseInvoiceDuties.PurchaseInvoiceNo
                                and PurchaseInvoiceDetails.ItemNo=PurchaseInvoiceDuties.ItemNo";
                                sqlText += " and  PurchaseInvoiceDuties.PurchaseInvoiceNo= '" + importID + "' ";
                                sqlText += " and  PurchaseInvoiceDuties.ItemNo= '" + ItemNo + "' ";

                                cmdInsDetail = new SqlCommand(sqlText, currConn);
                                cmdInsDetail.Transaction = transaction;
                                transResult = (int)cmdInsDetail.ExecuteNonQuery();
                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                                }

                                #endregion Update only DetailTable

                            }
                        }

                    }
                    #endregion FindItemId
                }

                #endregion Data

                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                    }

                }

                #endregion Commit
                #region SuccessResult


                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgUpdateSuccessfully;
                //retResults[2] = Master.PurchaseInvoiceNo;
                retResults[3] = PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseUpdateDuty", ex.ToString() + "\n" + sqlText, "Purchase");

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] UpdateTDSAmount(string PurchaseInvoiceNo, decimal TDSAmount, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            //////retResults[2] =  Id.ToString();


            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";
            int nextId = 0;

            #endregion Initializ

            #region Try
            try
            {
                #region Validation


                #endregion Validation

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("UpdateToTDSs");

                #endregion open connection and transaction

                #region Update new TDSs
                sqlText = "";
                sqlText = "update PurchaseInvoiceHeaders set";
                sqlText += "  TDSAmount     =@TDSAmount";
                sqlText += " WHERE PurchaseInvoiceNo           =@PurchaseInvoiceNo";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                cmdUpdate.Parameters.AddWithValue("@PurchaseInvoiceNo", PurchaseInvoiceNo);
                cmdUpdate.Parameters.AddWithValue("@TDSAmount", TDSAmount);

                transResult = cmdUpdate.ExecuteNonQuery();


                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }
                retResults[0] = "Success";
                retResults[1] = "Requested TDS  Information successfully Update";
                ////retResults[2] = Id.ToString();
                retResults[3] = "";


                #endregion Commit


                #endregion

            }
            #endregion

            #region Catch

            catch (Exception ex)
            {

                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.Split(new[] { '\r', '\n' }).FirstOrDefault(); //catch ex
                retResults[2] = nextId.ToString(); //catch ex

                if (transaction != null)
                {
                    transaction.Rollback();
                }

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "UpdateTDSAmount", ex.ToString() + "\n" + sqlText, "Purchase");

                ////FileLogger.Log(MethodBase.GetCurrentMethod().Name, this.GetType().Name, ex.Message + Environment.NewLine + ex.StackTrace + Environment.NewLine + sqlText);
            }

            #endregion

            #region finally
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion

            #region Result

            return retResults;

            #endregion

        }

        //currConn to VcurrConn 25-Aug-2020
        private void SetBOMId(PurchaseMasterVM vm, List<PurchaseDetailVM> detailVMs, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region try

            try
            {
                ProductDAL _ProductDAL = new ProductDAL();
                string tempBOMId = "0";
                DataTable dt = new DataTable();

                foreach (PurchaseDetailVM dVM in detailVMs)
                {
                    dt = new DataTable();

                    dt = _ProductDAL.SelectBOMRaw(dVM.ItemNo, Convert.ToDateTime(vm.ReceiveDate).ToString("yyyy-MMM-dd"), VcurrConn, Vtransaction, connVM);

                    tempBOMId = "0";

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        DataRow dr = dt.Rows[0];
                        tempBOMId = dr["BOMId"].ToString();
                        if (!string.IsNullOrWhiteSpace(tempBOMId))
                        {
                            dVM.BOMId = Convert.ToInt32(tempBOMId);
                        }
                    }

                }
            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("PurchaseDAL", "SetBOMId", ex.ToString(), "Purchase");

                throw ex;
            }

            #endregion

        }

        public string[] MultiplePost(string[] Ids, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction(MessageVM.PurchasemsgMethodNameUpdate);
                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue", null, null, connVM) == "Y" ? true : false);

                #endregion open connection and transaction

                #region PurchasePost

                Ids = Ids.Where(x => !string.IsNullOrEmpty(x)).ToArray();

                //for (int i = 0; i < Ids.Length - 1; i++)
                for (int i = 0; i < Ids.Length; i++)
                {
                    PurchaseMasterVM master = SelectAllList(Convert.ToInt32(Ids[i]), null, null, currConn, transaction, null, connVM).FirstOrDefault();
                    List<PurchaseDetailVM> Details = SelectPurchaseDetailList(master.PurchaseInvoiceNo, null, null, currConn, transaction, connVM);
                    List<PurchaseDutiesVM> Duties = SelectAllDuties(master.PurchaseInvoiceNo, null, null, currConn, transaction, connVM);
                    if (Duties == null)
                    {
                        Duties = new List<PurchaseDutiesVM>();
                    }
                    List<TrackingVM> Trakings = new List<TrackingVM>();
                    master.Post = "Y";
                    retResults = PurchasePost(master, Details, Duties, Trakings, transaction, currConn, connVM);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException("", retResults[1]);
                    }
                }

                #endregion

                #region Commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion


            }

            #endregion

            #region catch

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "MultiplePost", ex.ToString(), "Purchase");

                ////throw ex;
            }

            #endregion

            #region finally

            finally
            {

            }

            #endregion

            #region Result
            return retResults;
            #endregion Result

        }

        #endregion

        #region Plain Methods

        public string[] PurchaseInsertToMaster(PurchaseMasterVM Master, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[5];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            retResults[4] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Entry Date Check

                string firstDate = "01-July-2019";
                if (Convert.ToDateTime(Master.ReceiveDate) < Convert.ToDateTime(firstDate))
                {
                    retResults[1] = "No Entry Allowed Before " + firstDate + "!";
                    throw new ArgumentNullException(MessageVM.saleMsgMethodNameInsert, retResults[1]);
                }

                #endregion

                #region Insert

                sqlText = "";
                sqlText += " insert into PurchaseInvoiceHeaders";
                sqlText += " (";
                sqlText += " PurchaseInvoiceNo,";
                sqlText += " VendorID,";
                sqlText += " CustomHouse,";
                sqlText += " CustomCode,";
                sqlText += " InvoiceDateTime,";
                sqlText += " TotalAmount,";
                sqlText += " TotalVATAmount,";
                sqlText += " SerialNo,";
                sqlText += " LCNumber,";
                sqlText += " Comments,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " BENumber,";
                sqlText += " ProductType,";
                sqlText += " transactionType,";
                sqlText += " ReceiveDate,";
                sqlText += " WithVDS,";
                sqlText += " PurchaseReturnId,";
                sqlText += " ImportIDExcel,";
                sqlText += " Post,";
                sqlText += " LCDate,";
                sqlText += " USDInvoiceValue,";
                sqlText += " BranchId,";
                sqlText += " TDSAmount,";
                sqlText += " LandedCost,";
                sqlText += " IsTDS,";
                sqlText += " FiscalYear,";
                sqlText += " AppVersion,";
                sqlText += " PurchaseInvoiceNumber,";
                sqlText += " RebatePeriodID,";
                sqlText += " IsRebate,";
                sqlText += " RebateDate,";
                sqlText += " BankGuarantee,";
                sqlText += " IsBankingChannelPay,";
                sqlText += " TDSRate,";
                sqlText += " VehicleNo,";
                sqlText += " VehicleType";
                sqlText += " ,CompanyCode";
                sqlText += " ,FileName";
                sqlText += " )";

                sqlText += " values";
                sqlText += " (";
                sqlText += "@Master_PurchaseInvoiceNo,";
                sqlText += "@Master_VendorID,";
                sqlText += "@Master_CustomHouse,";
                sqlText += "@Master_CustomCode,";
                sqlText += "@Master_InvoiceDate,";
                sqlText += "@Master_TotalAmount,";
                sqlText += "@Master_TotalVATAmount,";
                sqlText += "@Master_SerialNo,";
                sqlText += "@Master_LCNumber,";
                sqlText += "@Master_Comments,";
                sqlText += "@Master_CreatedBy,";
                sqlText += "@Master_CreatedOn,";
                sqlText += "@Master_LastModifiedBy,";
                sqlText += "@Master_LastModifiedOn,";
                sqlText += "@Master_BENumber,";
                sqlText += "@Master_ProductType,";
                sqlText += "@Master_TransactionType,";
                sqlText += "@Master_ReceiveDate,";
                sqlText += "@Master_WithVDS,";
                sqlText += "@Master_ReturnId,";
                sqlText += "@Master_ImportID,";
                sqlText += "@Master_Post,";
                sqlText += "@Master_LCDate,";
                sqlText += "@Master_USDInvoiceValue,";
                sqlText += "@Master_BranchId,";
                sqlText += "@Master_TDSAmount,";
                sqlText += "@Master_LandedCost,";
                sqlText += "@IsTDS,";
                sqlText += "@FiscalYear,";
                sqlText += "@AppVersion,";
                sqlText += "@PurchaseInvoiceNumber,";
                sqlText += "@RebatePeriodID,";
                sqlText += "@IsRebate,";
                sqlText += "@RebateDate,";
                sqlText += "@BankGuarantee,";
                sqlText += "@IsBankingChannelPay,";
                sqlText += "@Master_TDSRate,";
                sqlText += "@Master_VehicleNo,";
                sqlText += "@Master_VehicleType";
                sqlText += ",@CompanyCode";
                sqlText += ",@FileName";

                sqlText += ") SELECT SCOPE_IDENTITY()";


                SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                cmdInsert.Transaction = transaction;

                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_PurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_VendorID", Master.VendorID);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_CustomHouse", Master.CustomHouse);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_CustomCode", Master.CustomHouseCode);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_InvoiceDate", Master.InvoiceDate);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TotalAmount", Master.TotalAmount);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TotalVATAmount", Master.TotalVATAmount);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_SerialNo", Master.SerialNo);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_LCNumber", Master.LCNumber);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_Comments", Master.Comments);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_CreatedBy", Master.CreatedBy);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_CreatedOn", OrdinaryVATDesktop.DateToDate(Master.CreatedOn));
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_LastModifiedBy", Master.LastModifiedBy);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_LastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_BENumber", Master.BENumber);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ProductType", Master.ProductType);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TransactionType", Master.TransactionType);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ReceiveDate", Master.ReceiveDate);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_WithVDS", Master.WithVDS);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ReturnId", Master.ReturnId);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_ImportID", Master.ImportID);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_Post", Master.Post);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_LCDate", Master.LCDate);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_USDInvoiceValue", Master.USDInvoiceValue);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_BranchId", Master.BranchId);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TDSAmount", Master.TDSAmount);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_LandedCost", Master.LandedCost);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@IsTDS", Master.IsTDS);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@FiscalYear", Master.FiscalYear);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNumber", Master.InvoiceNumber);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@AppVersion", Master.AppVersion);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@RebatePeriodID", Master.RebatePeriodId);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@IsRebate", Master.IsRebate);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@RebateDate", Master.RebateDate);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@BankGuarantee", Master.BankGuarantee);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@IsBankingChannelPay", Master.IsBankingChannelPay);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TDSRate", Master.TDSRate);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_VehicleNo", Master.VehicleNo);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_VehicleType", Master.VehicleType);

                cmdInsert.Parameters.AddWithValueAndNullHandle("@CompanyCode", Master.CompanyCode);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@FileName", Master.FileName);

                transResult = Convert.ToInt32(cmdInsert.ExecuteScalar());

                retResults[4] = transResult.ToString();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header

                #region Commit


                if (VcurrConn == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Master.PurchaseInvoiceNo;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseInsertToMaster", ex.ToString() + "\n" + sqlText, "Purchase");

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                ////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] PurchaseInsertToDetail(PurchaseDetailVM Detail, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            ProductDAL productDal = new ProductDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string newID = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Insert Detail Table


                sqlText = "";
                sqlText += " insert into PurchaseInvoiceDetails(";

                sqlText += " BOMId,";
                sqlText += " PurchaseInvoiceNo,";
                sqlText += " POLineNo,";
                sqlText += " ItemNo,";
                sqlText += " Quantity,";
                sqlText += " CostPrice,";
                sqlText += " NBRPrice,";
                sqlText += " UOM,";
                sqlText += " VATRate,";
                sqlText += " VATAmount,";
                sqlText += " SubTotal,";
                sqlText += " Comments,";
                sqlText += " CreatedBy,";
                sqlText += " CreatedOn,";
                sqlText += " LastModifiedBy,";
                sqlText += " LastModifiedOn,";
                sqlText += " SD,";
                sqlText += " SDAmount,";
                sqlText += " Type,";
                sqlText += " ProductType,";
                sqlText += " BENumber,";
                sqlText += " InvoiceDateTime,";
                sqlText += " ReceiveDate,";
                sqlText += " Post,";
                sqlText += " UOMQty,";
                sqlText += " UOMPrice,";
                sqlText += " UOMc,";
                sqlText += " UOMn,";
                sqlText += " RebateRate ,";
                sqlText += " RebateAmount ,";
                sqlText += " CnFAmount ,";
                sqlText += " InsuranceAmount ,";
                sqlText += " AssessableValue ,";
                sqlText += " CDAmount ,";
                sqlText += " RDAmount ,";
                sqlText += " TVBAmount ,";
                sqlText += " TVAAmount ,";
                sqlText += " ATVAmount ,";
                sqlText += " VDSRate ,";
                sqlText += " VDSAmount ,";
                sqlText += " AITAmount ,";
                sqlText += " USDValue ,";
                sqlText += " USDVAT ,";
                sqlText += " TransactionType ,";
                sqlText += " PurchaseReturnId ,";
                sqlText += " OthersAmount ,";
                sqlText += " BranchId ,";
                sqlText += " TDSCode ,";
                sqlText += " TDSSection ,";
                sqlText += " IsFixedVAT ,";
                sqlText += " FixedVATAmount ,";
                sqlText += " ReturnTransactionType,";
                sqlText += " RebatePeriodID, ";
                sqlText += " InvoiceValue, ";
                sqlText += " ExchangeRate, ";
                sqlText += " Currency, ";
                sqlText += " ExpireDate, ";
                sqlText += " CPCName, ";
                sqlText += " BEItemNo, ";
                sqlText += " HSCode, ";
                sqlText += " OtherRef, ";
                sqlText += " IsRebate, ";
                sqlText += " FixedVATRebate, ";
                sqlText += " PreviousInvoiceDateTime, ";
                sqlText += " PreviousNBRPrice, ";
                sqlText += " PreviousQuantity, ";
                sqlText += " PreviousUOM, ";
                sqlText += " PreviousSubTotal, ";
                sqlText += " PreviousVATAmount, ";
                sqlText += " PreviousVATRate, ";
                sqlText += " PreviousSD, ";
                sqlText += " PreviousSDAmount, ";
                sqlText += " ReasonOfReturn ";
                sqlText += " ,Section21 ";

                sqlText += " )";
                sqlText += " values(	";

                sqlText += "@BOMId,";
                sqlText += "@Detail_PurchaseInvoiceNo,";
                sqlText += "@Detail_LineNo,";
                sqlText += "@Detail_ItemNo,";
                sqlText += "@Detail_Quantity,";
                sqlText += "@Detail_UnitPrice,";
                sqlText += "@Detail_NBRPrice,";
                sqlText += "@Detail_UOM,";
                sqlText += "@Detail_VATRate,";
                sqlText += "@Detail_VATAmount,";
                sqlText += "@Detail_SubTotal,";
                sqlText += "@Detail_Comments,";
                sqlText += "@Detail_CreatedBy,";
                sqlText += "@Detail_CreatedOn,";
                sqlText += "@Detail_LastModifiedBy,";
                sqlText += "@Detail_LastModifiedOn,";
                sqlText += "@Detail_SD,";
                sqlText += "@Detail_SDAmount,";
                sqlText += "@Detail_Type,";
                sqlText += "@Detail_ProductType,";
                sqlText += "@Detail_BENumber,";
                sqlText += "@Detail_InvoiceDateTime,";
                sqlText += "@Detail_ReceiveDate,";
                sqlText += "@Detail_Post,";
                sqlText += "@Detail_UOMQty,";
                sqlText += "@Detail_UOMPrice,";
                sqlText += "@Detail_UOMc,";
                sqlText += "@Detail_UOMn,";
                sqlText += "@Detail_RebateRate,";
                sqlText += "@Detail_RebateAmount,";
                sqlText += "@Detail_CnFAmount,";
                sqlText += "@Detail_InsuranceAmount,";
                sqlText += "@Detail_AssessableValue,";
                sqlText += "@Detail_CDAmount,";
                sqlText += "@Detail_RDAmount,";
                sqlText += "@Detail_TVBAmount,";
                sqlText += "@Detail_TVAAmount,";
                sqlText += "@Detail_ATVAmount,";
                sqlText += "@Detail_VDSRate,";
                sqlText += "@Detail_VDSAmount,";
                sqlText += "@Detail_AITAmount,";
                sqlText += "@Detail_USDValue,";
                sqlText += "@Detail_USDVAT,";
                sqlText += "@Detail_TransactionType,";
                sqlText += "@Detail_ReturnId,";
                sqlText += "@Detail_OthersAmount,";
                sqlText += "@Detail_BranchId,";
                sqlText += "@TDSCode,";
                sqlText += "@TDSSection,";
                sqlText += "@IsFixedVAT,";
                sqlText += "@FixedVATAmount,";
                sqlText += "@Detail_ReturnTransactionType,";
                sqlText += "@RebatePeriodID, ";
                sqlText += "@InvoiceValue, ";
                sqlText += "@ExchangeRate, ";
                sqlText += "@Currency, ";
                sqlText += "@ExpireDate, ";
                sqlText += "@CPCName, ";
                sqlText += "@BEItemNo, ";
                sqlText += "@HSCode, ";
                sqlText += "@OtherRef, ";
                sqlText += "@IsRebate, ";
                sqlText += "@FixedVATRebate, ";
                sqlText += "@PreviousInvoiceDateTime, ";
                sqlText += "@PreviousNBRPrice, ";
                sqlText += "@PreviousQuantity, ";
                sqlText += "@PreviousUOM, ";
                sqlText += "@PreviousSubTotal, ";
                sqlText += "@PreviousVATAmount, ";
                sqlText += "@PreviousVATRate, ";
                sqlText += "@PreviousSD, ";
                sqlText += "@PreviousSDAmount, ";
                sqlText += "@ReasonOfReturn ";
                sqlText += ",@Section21 ";

                sqlText += ")	";


                SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                cmdInsDetail.Transaction = transaction;

                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@BOMId", Detail.BOMId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_PurchaseInvoiceNo", Detail.PurchaseInvoiceNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_LineNo", Detail.LineNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ItemNo", Detail.ItemNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_Quantity", Detail.Quantity);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UnitPrice", Detail.UnitPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_NBRPrice", Detail.NBRPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOM", Detail.UOM);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_VATRate", Detail.VATRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_VATAmount", Detail.VATAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_SubTotal", Detail.SubTotal);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_Comments", Detail.Comments);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CreatedBy", Detail.CreatedBy);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CreatedOn", OrdinaryVATDesktop.DateToDate(Detail.CreatedOn));
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_LastModifiedBy", Detail.LastModifiedBy);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_LastModifiedOn", OrdinaryVATDesktop.DateToDate(Detail.LastModifiedOn));
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_SD", Detail.SD);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_SDAmount", Detail.SDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_Type", Detail.Type);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ProductType", Detail.ProductType);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_BENumber", Detail.BENumber);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_InvoiceDateTime", Detail.InvoiceDateTime);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReceiveDate", Detail.ReceiveDate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_Post", Detail.Post);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMQty", Detail.UOMQty);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMPrice", Detail.UOMPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMc", Detail.UOMc);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_UOMn", Detail.UOMn);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_RebateRate", Detail.RebateRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_RebateAmount", Detail.RebateAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CnFAmount", Detail.CnFAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_InsuranceAmount", Detail.InsuranceAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_AssessableValue", Detail.AssessableValue);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_CDAmount", Detail.CDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_RDAmount", Detail.RDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_TVBAmount", Detail.TVBAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_TVAAmount", Detail.TVAAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ATVAmount", Detail.ATVAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_VDSRate", Detail.VDSRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_VDSAmount", Detail.VDSAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_AITAmount", Detail.AITAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_USDValue", Detail.USDValue);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_USDVAT", Detail.USDVAT);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_TransactionType", Detail.TransactionType);
                //////cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReturnId", Detail.ReturnId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReturnId", Detail.PurchaseReturnId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_OthersAmount", Detail.OthersAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_BranchId", Detail.BranchId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TDSCode", Detail.TDSCode);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TDSSection", Detail.TDSSection);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@FixedVATAmount", Detail.FixedVATAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@IsFixedVAT", Detail.IsFixedVAT);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Detail_ReturnTransactionType", Detail.ReturnTransactionType);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@RebatePeriodID", Detail.RebatePeriodId);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@InvoiceValue", Detail.InvoiceValue);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ExchangeRate", Detail.ExchangeRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Currency", Detail.Currency);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@IsRebate", Detail.IsRebate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ExpireDate", Detail.ExpireDate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CPCName", Detail.CPCName);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@BEItemNo", Detail.BEItemNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@HSCode", Detail.HSCode);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@OtherRef", Detail.OtherRef);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@FixedVATRebate", Detail.FixedVATRebate);

                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousInvoiceDateTime", Detail.PreviousInvoiceDateTime);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousNBRPrice", Detail.PreviousNBRPrice);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousQuantity", Detail.PreviousQuantity);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousUOM", Detail.PreviousUOM);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousSubTotal", Detail.PreviousSubTotal);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousVATAmount", Detail.PreviousVATAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousVATRate", Detail.PreviousVATRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousSD", Detail.PreviousSD);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PreviousSDAmount", Detail.PreviousSDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ReasonOfReturn", Detail.ReasonOfReturn);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Section21", Detail.Section21);


                transResult = (int)cmdInsDetail.ExecuteNonQuery();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion Insert Detail Table

                #region Commit


                if (VcurrConn == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + newID;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                //2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseInsertToDetail", ex.ToString() + "\n" + sqlText, "Purchase");

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] PurchaseUpdateToMaster(PurchaseMasterVM Master, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Entry Date Check

                string firstDate = "01-July-2019";
                if (Convert.ToDateTime(Master.ReceiveDate) < Convert.ToDateTime(firstDate))
                {
                    retResults[1] = "No Entry Allowed Before " + firstDate + "!";
                    throw new ArgumentNullException(MessageVM.saleMsgMethodNameInsert, retResults[1]);
                }

                #endregion

                #region Update

                sqlText = "";
                sqlText += " update PurchaseInvoiceHeaders set  ";
                sqlText += "  PurchaseInvoiceNo   =@PurchaseInvoiceNo";
                sqlText += " ,VendorID            =@VendorID";
                sqlText += " ,InvoiceDateTime     =@InvoiceDateTime";
                sqlText += " ,TotalAmount         =@TotalAmount";
                sqlText += " ,TotalVATAmount      =@TotalVATAmount";
                sqlText += " ,SerialNo            =@SerialNo";
                sqlText += " ,Comments            =@Comments";
                sqlText += " ,CreatedBy           =@CreatedBy";
                sqlText += " ,CreatedOn           =@CreatedOn";
                sqlText += " ,LastModifiedBy      =@LastModifiedBy";
                sqlText += " ,LastModifiedOn      =@LastModifiedOn";
                sqlText += " ,BENumber            =@BENumber";
                sqlText += " ,ProductType         =@ProductType";
                sqlText += " ,TransactionType     =@TransactionType";
                sqlText += " ,ReceiveDate         =@ReceiveDate";
                sqlText += " ,Post                =@Post";
                //sqlText += " ,CurrencyID          =@CurrencyID";
                //sqlText += " ,CurrencyRateFromBDT =@CurrencyRateFromBDT";
                sqlText += " ,WithVDS             =@WithVDS";
                sqlText += " ,PurchaseReturnId    =@PurchaseReturnId";
                //sqlText += " ,ImportIDExcel       =@ImportIDExcel";
                //sqlText += " ,SerialNo1           =@SerialNo1";
                sqlText += " ,LCNumber            =@LCNumber";
                sqlText += " ,LCDate              =@LCDate";
                sqlText += " ,LandedCost          =@LandedCost";
                sqlText += " ,CustomHouse         =@CustomHouse";
                sqlText += " ,CustomCode         =@CustomCode";
                sqlText += " ,IsTDS         =@IsTDS";
                sqlText += " ,USDInvoiceValue     =@USDInvoiceValue";
                sqlText += " ,TDSAmount     =@TDSAmount";
                sqlText += " ,RebatePeriodID     =@RebatePeriodID";
                sqlText += " ,IsRebate     =@IsRebate";
                sqlText += " ,RebateDate     =@RebateDate";
                sqlText += " ,BankGuarantee     =@BankGuarantee";
                sqlText += " ,TDSRate       =@TDSRate";
                sqlText += " ,VehicleNo       =@VehicleNo";
                sqlText += " ,VehicleType       =@VehicleType";

                sqlText += " where              Id=@Id";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;

                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VendorID", Master.VendorID);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TotalAmount", Master.TotalAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TotalVATAmount", Master.TotalVATAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SerialNo", Master.SerialNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", Master.Comments);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", Master.CreatedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", OrdinaryVATDesktop.DateToDate(Master.CreatedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Master.LastModifiedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@BENumber", Master.BENumber);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InvoiceDateTime", Master.InvoiceDate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ProductType", Master.ProductType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TransactionType", Master.TransactionType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveDate", Master.ReceiveDate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Post", "N");
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@WithVDS", Master.WithVDS);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PurchaseReturnId", Master.ReturnId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LCNumber", Master.LCNumber);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LCDate", Master.LCDate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LandedCost", Master.LandedCost);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomHouse", Master.CustomHouse);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomCode", Master.CustomHouseCode);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@USDInvoiceValue", Master.USDInvoiceValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TDSAmount", Master.TDSAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsTDS", Master.IsTDS);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RebatePeriodID", Master.RebatePeriodId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsRebate", Master.IsRebate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RebateDate", Master.RebateDate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@BankGuarantee", Master.BankGuarantee);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TDSRate", Master.TDSRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VehicleNo", Master.VehicleNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VehicleType", Master.VehicleType);

                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Id", Master.Id);

                transResult = (int)cmdUpdate.ExecuteNonQuery();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgSaveNotSuccessfully);
                }

                #endregion ID generated completed,Insert new Information in Header

                #region Commit


                if (VcurrConn == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Master.PurchaseInvoiceNo;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }

            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                //////2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseUpdateToMaster", ex.ToString() + "\n" + sqlText, "Purchase");

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] PurchaseInsertToDuties(PurchaseDutiesVM Duty, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            ProductDAL productDal = new ProductDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string newID = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Insert

                sqlText = "";
                sqlText += " insert into PurchaseInvoiceDuties(";

                sqlText += "  PIDutyID";
                sqlText += " ,PurchaseInvoiceNo";
                sqlText += " ,CnFInp";
                sqlText += " ,CnFRate";
                sqlText += " ,CnFAmount";
                sqlText += " ,InsuranceInp";
                sqlText += " ,InsuranceRate";
                sqlText += " ,InsuranceAmount";
                sqlText += " ,AssessableInp";
                sqlText += " ,AssessableValue";
                sqlText += " ,CDInp";
                sqlText += " ,CDRate";
                sqlText += " ,CDAmount";
                sqlText += " ,RDInp";
                sqlText += " ,RDRate";
                sqlText += " ,RDAmount";
                sqlText += " ,TVBInp";
                sqlText += " ,TVBRate";
                sqlText += " ,TVBAmount";
                sqlText += " ,SDInp";
                sqlText += " ,SD";
                sqlText += " ,SDAmount";
                sqlText += " ,VATInp";
                sqlText += " ,VATRate";
                sqlText += " ,VATAmount";
                sqlText += " ,TVAInp";
                sqlText += " ,TVARate";
                sqlText += " ,TVAAmount";
                sqlText += " ,ATVInp";
                sqlText += " ,ATVRate";
                sqlText += " ,ATVAmount";
                sqlText += " ,OthersInp";
                sqlText += " ,OthersRate";
                sqlText += " ,OthersAmount";
                sqlText += " ,AITInp";
                sqlText += " ,AITAmount";
                sqlText += " ,CreatedBy";
                sqlText += " ,CreatedOn";
                sqlText += " ,LastModifiedBy";
                sqlText += " ,LastModifiedOn";
                sqlText += " ,TransactionType";
                sqlText += " ,Post";
                sqlText += " ,Remarks";
                sqlText += " ,ItemNo";
                sqlText += " ,DutyCompleteQuantity";
                sqlText += " ,DutyCompleteQuantityPercent";
                sqlText += " ,LineCost";
                sqlText += " ,UnitCost";
                sqlText += " ,Quantity";

                sqlText += " )";
                sqlText += " values(	";
                sqlText += " @PIDutyID";
                sqlText += ",@PurchaseInvoiceNo";
                sqlText += ",@CnFInp";
                sqlText += ",@CnFRate";
                sqlText += ",@CnFAmount";
                sqlText += ",@InsuranceInp";
                sqlText += ",@InsuranceRate";
                sqlText += ",@InsuranceAmount";
                sqlText += ",@AssessableInp";
                sqlText += ",@AssessableValue";
                sqlText += ",@CDInp";
                sqlText += ",@CDRate";
                sqlText += ",@CDAmount";
                sqlText += ",@RDInp";
                sqlText += ",@RDRate";
                sqlText += ",@RDAmount";
                sqlText += ",@TVBInp";
                sqlText += ",@TVBRate";
                sqlText += ",@TVBAmount";
                sqlText += ",@SDInp";
                sqlText += ",@SD";
                sqlText += ",@SDAmount";
                sqlText += ",@VATInp";
                sqlText += ",@VATRate";
                sqlText += ",@VATAmount";
                sqlText += ",@TVAInp";
                sqlText += ",@TVARate";
                sqlText += ",@TVAAmount";
                sqlText += ",@ATVInp";
                sqlText += ",@ATVRate";
                sqlText += ",@ATVAmount";
                sqlText += ",@OthersInp";
                sqlText += ",@OthersRate";
                sqlText += ",@OthersAmount";
                sqlText += ",@AITInp";
                sqlText += ",@AITAmount";
                sqlText += ",@CreatedBy";
                sqlText += ",@CreatedOn";
                sqlText += ",@LastModifiedBy";
                sqlText += ",@LastModifiedOn";
                sqlText += ",@TransactionType";
                sqlText += ",@Post";
                sqlText += ",@Remarks";
                sqlText += ",@ItemNo";
                sqlText += ",@DutyCompleteQuantity";
                sqlText += ",@DutyCompleteQuantityPercent";
                sqlText += ",@LineCost";
                sqlText += ",@UnitCost";
                sqlText += ",@Quantity";
                sqlText += ")	";

                SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                cmdInsDetail.Transaction = transaction;

                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PIDutyID", Duty.PIDutyID);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Duty.PurchaseInvoiceNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CnFInp", Duty.CnFInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CnFRate", Duty.CnFRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CnFAmount", Duty.CnFAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@InsuranceInp", Duty.InsuranceInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@InsuranceRate", Duty.InsuranceRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@InsuranceAmount", Duty.InsuranceAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@AssessableInp", Duty.AssessableInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@AssessableValue", Duty.AssessableValue);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CDInp", Duty.CDInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CDRate", Duty.CDRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CDAmount", Duty.CDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@RDInp", Duty.RDInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@RDRate", Duty.RDRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@RDAmount", Duty.RDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TVBInp", Duty.TVBInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TVBRate", Duty.TVBRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TVBAmount", Duty.TVBAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@SDInp", Duty.SDInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@SD", Duty.SD);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@SDAmount", Duty.SDAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@VATInp", Duty.VATInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@VATRate", Duty.VATRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@VATAmount", Duty.VATAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TVAInp", Duty.TVAInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TVARate", Duty.TVARate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TVAAmount", Duty.TVAAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ATVInp", Duty.ATVInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ATVRate", Duty.ATVRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ATVAmount", Duty.ATVAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@OthersInp", Duty.OthersInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@OthersRate", Duty.OthersRate);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@OthersAmount", Duty.OthersAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@AITInp", Duty.AITInp);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@AITAmount", Duty.AITAmount);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CreatedBy", Duty.CreatedBy);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@CreatedOn", OrdinaryVATDesktop.DateToDate(Duty.CreatedOn));
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Duty.LastModifiedBy);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", OrdinaryVATDesktop.DateToDate(Duty.LastModifiedOn));
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@TransactionType", Duty.TransactionType);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Post", Duty.Post);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Remarks", Duty.Remarks);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@ItemNo", Duty.ItemNo);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@DutyCompleteQuantity", Duty.DutyCompleteQuantity);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@DutyCompleteQuantityPercent", Duty.DutyCompleteQuantityPercent);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@LineCost", Duty.LineCost);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@UnitCost", Duty.UnitCost);
                cmdInsDetail.Parameters.AddWithValueAndNullHandle("@Quantity", Duty.Quantity);

                transResult = (int)cmdInsDetail.ExecuteNonQuery();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }

                #endregion Insert only DetailTable

                #region Commit


                if (VcurrConn == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + newID;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseInsertToDuties", ex.ToString() + "\n" + sqlText, "Purchase");

                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] PurchaseAllPost(PostVM Master, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Update Master

                sqlText = "";
                sqlText += " update PurchaseInvoiceHeaders set  ";
                sqlText += " LastModifiedBy             = @MasterLastModifiedBy,";
                sqlText += " LastModifiedOn             = @MasterLastModifiedOn,";
                sqlText += " Post                       = @MasterPost";
                sqlText += " where  PurchaseInvoiceNo   = @MasterPurchaseInvoiceNo ";

                sqlText += " update PurchaseInvoiceDetails set ";
                sqlText += " LastModifiedBy= @MasterLastModifiedBy,";
                sqlText += " LastModifiedOn= @MasterLastModifiedOn,";
                sqlText += " Post=@MasterPost ";
                sqlText += " where  PurchaseInvoiceNo =@MasterPurchaseInvoiceNo ";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@MasterPurchaseInvoiceNo", Master.Code);

                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion


                #region Commit


                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "";
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseAllPost", ex.ToString() + "\n" + sqlText, "Purchase");

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        #endregion

        #region Import and Integration Methods

        public string[] ImportData(DataTable dtPurchaseM, DataTable dtPurchaseD, DataTable dtPurchaseI, DataTable dtPurchaseT, int branchId = 0, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, Action callBack = null, SysDBInfoVMTemp connVM = null, string UserId = "")
        {

            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";


            PurchaseMasterVM purchaseMaster;
            List<PurchaseDutiesVM> purchaseDuties = new List<PurchaseDutiesVM>();
            List<PurchaseDetailVM> purchaseDetails = new List<PurchaseDetailVM>();
            List<TrackingVM> purchaseTrackings = new List<TrackingVM>();
            CommonDAL commonDal = new CommonDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable
            // dtPurchaseD.Rows.Count;
            //dtPurchaseM.Rows.Count;

            #region try
            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Settings

                bool uomDefault = commonDal.settings("Purchase", "AutoUOM", currConn, transaction, connVM) == "Y";

                #endregion

                #region RowCount
                int rowCount = 0;
                int MRow = dtPurchaseM.Rows.Count;
                for (int i = 0; i < dtPurchaseM.Rows.Count; i++)
                {
                    if (!string.IsNullOrEmpty(dtPurchaseM.Rows[i]["ID"].ToString()))
                    {
                        rowCount++;
                    }

                }
                if (MRow != rowCount)
                {
                    throw new ArgumentNullException("you have select " + MRow.ToString() + " data for import, but you have " + rowCount + " id.");

                }

                #endregion RowCount

                #region ID in Master or Detail table

                for (int i = 0; i < rowCount; i++)
                {
                    string importID = dtPurchaseM.Rows[i]["ID"].ToString();

                    if (!string.IsNullOrEmpty(importID))
                    {
                        DataRow[] DetailRaws = dtPurchaseD.Select("ID='" + importID + "'");
                        if (DetailRaws.Length == 0)
                        {
                            throw new ArgumentNullException("The ID " + importID + " is not available in detail table");
                        }

                    }

                }

                #endregion

                #region Double ID in Master

                for (int i = 0; i < rowCount; i++)
                {
                    string id = dtPurchaseM.Rows[i]["ID"].ToString();
                    DataRow[] tt = dtPurchaseM.Select("ID='" + id + "'");
                    if (tt.Length > 1)
                    {
                        throw new ArgumentException ("you have duplicate master id " + id + " in import file.");
                        //throw new ArgumentNullException("you have duplicate master id " + id + " in import file.");
                    }
                }
                string Code = commonDal.settings("CompanyCode", "Code", currConn, transaction);

                string dayEnd = commonDal.settings("Issue", "DayEndProcessAVGPrice", currConn, transaction, connVM);

                #endregion Double ID in Master

                CommonImportDAL cImport = new CommonImportDAL();
                BranchProfileDAL branchDal = new BranchProfileDAL();
                #region checking from database is exist the information(NULL Check)
                #region Master
                string CurrencyId = string.Empty;
                string USDCurrencyId = string.Empty;
                string PrePurchaseId = string.Empty;

                #region Find Master Column Name

                bool IsCollCDate = false;
                bool IsCollCNo = false;
                bool IsCollandedCost = false;

                for (int i = 0; i < dtPurchaseM.Columns.Count; i++)
                {

                    if (dtPurchaseM.Columns[i].ColumnName.ToString() == "LC_No")
                    {
                        IsCollCNo = true;
                    }
                    else if (dtPurchaseM.Columns[i].ColumnName.ToString() == "LC_Date")
                    {
                        IsCollCDate = true;
                    }
                    else if (dtPurchaseM.Columns[i].ColumnName.ToString() == "Landed_Cost")
                    {
                        IsCollandedCost = true;
                    }
                }
                #endregion Find Master Column Name

                for (int i = 0; i < rowCount; i++)
                {
                    CurrencyId = string.Empty;
                    USDCurrencyId = string.Empty;

                    #region FindVendorId
                    bool VendorAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "PurchaseVendor") == "Y" ? true : false);
                    cImport.FindVendorId(dtPurchaseM.Rows[i]["Vendor_Name"].ToString().Trim(),
                                           dtPurchaseM.Rows[i]["Vendor_Code"].ToString().Trim(), currConn, transaction, VendorAutoSave, connVM);
                    #endregion FindVendorId

                    #region Check Previous Purchase no.
                    PrePurchaseId = cImport.CheckPrePurchaseNo(dtPurchaseM.Rows[i]["Previous_Purchase_No"].ToString().Trim(), currConn, transaction, connVM);
                    #endregion Check Previous Purchase no.

                    #region FindCurrencyId
                    //CurrencyId = cImport.FindCurrencyId(dtPurchaseM.Rows[i]["Currency_Code"].ToString().Trim());
                    //USDCurrencyId = cImport.FindCurrencyId("USD");
                    //cImport.FindCurrencyRateFromBDT(CurrencyId);
                    //cImport.FindCurrencyRateBDTtoUSD(USDCurrencyId);

                    #endregion FindCurrencyId

                    #region Check Date

                    bool IsInvoiceDate;
                    bool IsReceiveDate;
                    //bool IsLCDate;
                    IsInvoiceDate = cImport.CheckDate(dtPurchaseM.Rows[i]["Invoice_Date"].ToString().Trim());
                    if (IsInvoiceDate != true)
                    {
                        throw new ArgumentNullException("Please insert correct date format 'DD/MMM/YY' such as 31/Jan/13 in Invoice_Date field.");
                    }
                    IsReceiveDate = cImport.CheckDate(dtPurchaseM.Rows[i]["Receive_Date"].ToString().Trim());
                    if (IsReceiveDate != true)
                    {
                        throw new ArgumentNullException("Please insert correct date format 'DD/MMM/YY' such as 31/Jan/13 in Receive_Date field.");
                    }

                    //IsLCDate = cImport.CheckDate(dtPurchaseM.Rows[i]["LCDate"].ToString().Trim());
                    //if (IsReceiveDate != true)
                    //{
                    //    throw new ArgumentNullException("Please insert correct date format 'DD/MMM/YY' such as 31/Jan/13 in Receive_Date field.");
                    //}
                    #endregion Check Date

                    #region Yes no check

                    bool post;
                    bool withVDS;

                    post = cImport.CheckYN(dtPurchaseM.Rows[i]["Post"].ToString().Trim());
                    if (post != true)
                    {
                        throw new ArgumentNullException("Please insert Y/N in Post field.");
                    }
                    withVDS = cImport.CheckYN(dtPurchaseM.Rows[i]["With_VDS"].ToString().Trim());
                    if (withVDS != true)
                    {
                        throw new ArgumentNullException("Please insert Y/N in With_VDSe field.");
                    }

                    #endregion Yes no check
                    bool isCost;
                    if (IsCollandedCost == true)
                    {
                        isCost = cImport.CheckNumericBool(dtPurchaseM.Rows[i]["Landed_Cost"].ToString().Trim());
                        if (isCost != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in Landed_Cost field.");
                        }
                    }

                }
                #endregion Master

                #region Row count for details table
                int DRowCount = 0;
                for (int i = 0; i < dtPurchaseD.Rows.Count; i++)
                {
                    if (!string.IsNullOrEmpty(dtPurchaseD.Rows[i]["ID"].ToString()))
                    {
                        DRowCount++;
                    }

                }

                #endregion Row count for details table
                #region Details

                for (int j = 0; j < DRowCount; j++)
                {
                    string ItemNo = string.Empty;
                    string UOMn = string.Empty;
                    bool IsQuantity, IsTotalPrice, IsRebateRate, IsSDAmount, IsVatAmount;

                    #region FindItemId
                    if (string.IsNullOrEmpty(dtPurchaseD.Rows[j]["Item_Code"].ToString().Trim()))
                    {
                        throw new ArgumentNullException("Please insert value in 'Item_Code' field.");
                    }
                    bool ItemAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "PurchaseProduct") == "Y" ? true : false);
                    ItemNo = cImport.FindItemId(dtPurchaseD.Rows[j]["Item_Name"].ToString().Trim()
                                 , dtPurchaseD.Rows[j]["Item_Code"].ToString().Trim(), currConn, transaction, ItemAutoSave, dtPurchaseD.Rows[j]["UOM"].ToString().Trim(), 1, 0, 0, connVM, dtPurchaseD.Rows[j]["Product_Group"].ToString().Trim());
                    #endregion FindItemId

                    #region FindUOMn
                    UOMn = cImport.FindUOMn(ItemNo, currConn, transaction, connVM);
                    #endregion FindUOMn

                    #region FindUOMc

                    if (DatabaseInfoVM.DatabaseName.ToString() != "Sanofi_DB")
                    {
                        if (!uomDefault)
                        {
                            cImport.FindUOMc(UOMn, dtPurchaseD.Rows[j]["UOM"].ToString().Trim(), currConn, transaction, connVM, ItemNo, dtPurchaseD.Rows[j]["Item_Name"].ToString().Trim(), dtPurchaseD.Rows[j]["Item_Code"].ToString().Trim());
                        }
                    }

                    #endregion FindUOMc

                    #region Numeric value check
                    IsQuantity = cImport.CheckNumericBool(dtPurchaseD.Rows[j]["Quantity"].ToString().Trim());
                    if (IsQuantity != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in Quantity field.");
                    }
                    IsTotalPrice = cImport.CheckNumericBool(dtPurchaseD.Rows[j]["Total_Price"].ToString().Trim());
                    if (IsTotalPrice != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in Total_Price field.");
                    }
                    IsRebateRate = cImport.CheckNumericBool(dtPurchaseD.Rows[j]["Rebate_Rate"].ToString().Trim());
                    if (IsRebateRate != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in Rebate_Rate field.");
                    }
                    IsSDAmount = cImport.CheckNumericBool(dtPurchaseD.Rows[j]["SD_Amount"].ToString().Trim());
                    if (IsSDAmount != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in SD_Amount field.");
                    }
                    IsVatAmount = cImport.CheckNumericBool(dtPurchaseD.Rows[j]["VAT_Amount"].ToString().Trim());
                    if (IsVatAmount != true)
                    {
                        throw new ArgumentNullException("Please insert decimal value in VAT_Amount field.");
                    }

                    #endregion
                }


                #endregion Details
                #region Duties
                if (dtPurchaseM.Rows[0]["Transection_Type"].ToString() == "Import"
                     || dtPurchaseM.Rows[0]["Transection_Type"].ToString() == "TradingImport"
                     || dtPurchaseM.Rows[0]["Transection_Type"].ToString() == "ServiceImport"
                     || dtPurchaseM.Rows[0]["Transection_Type"].ToString() == "InputServiceImport"
                     || dtPurchaseM.Rows[0]["Transection_Type"].ToString() == "ServiceNSImport")
                {

                    #region Row count for export details table
                    int IRowCount = 0;
                    for (int i = 0; i < dtPurchaseI.Rows.Count; i++)
                    {
                        if (!string.IsNullOrEmpty(dtPurchaseI.Rows[i]["ID"].ToString()))
                        {
                            IRowCount++;
                        }

                    }
                    #endregion Row count for export details table

                    #region Duties

                    for (int e = 0; e < IRowCount; e++)
                    {
                        string ItemNo = string.Empty;
                        #region FindItemId
                        bool ItemAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "PurchaseProduct") == "Y" ? true : false);

                        ItemNo = cImport.FindItemId(dtPurchaseI.Rows[e]["Item_Name"].ToString().Trim()
                                                            , dtPurchaseI.Rows[e]["Item_Code"].ToString().Trim(), currConn, transaction, ItemAutoSave, "-", 1, 0, 0, connVM, "-");
                        #endregion FindItemId
                        bool IsCnFAmt, IsInsuranceAmt, IsAssessableValue, IsCDAmt, IsRDAmt, IsTVBAmt, IsSDAmt, IsVATAmt, IsTVAAmt, IsATVAmt, IsOthersAmt;

                        IsCnFAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["CnF_Amount"].ToString().Trim());
                        if (IsCnFAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in CnF_Amount field.");
                        }

                        IsInsuranceAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["Insurance_Amount"].ToString().Trim());
                        if (IsInsuranceAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in Insurance_Amount field.");
                        }
                        IsAssessableValue = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["Assessable_Value"].ToString().Trim());
                        if (IsAssessableValue != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in Assessable_Value field.");
                        }
                        IsCDAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["CD_Amount"].ToString().Trim());
                        if (IsCDAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in CD_Amount field.");
                        }
                        IsRDAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["RD_Amount"].ToString().Trim());
                        if (IsRDAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in RD_Amount field.");
                        }
                        //IsTVBAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["TVB_Amount"].ToString().Trim());
                        //if (IsTVBAmt != true)
                        //{
                        //    throw new ArgumentNullException("Please insert decimal value in TVB_Amount field.");
                        //}
                        IsSDAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["SD_Amount"].ToString().Trim());
                        if (IsSDAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in SD_Amount field.");
                        }
                        IsVATAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["VAT_Amount"].ToString().Trim());
                        if (IsVATAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in VAT_Amount field.");
                        }
                        //IsTVAAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["TVA_Amount"].ToString().Trim());
                        //if (IsTVAAmt != true)
                        //{
                        //    throw new ArgumentNullException("Please insert decimal value in TVA_Amount field.");
                        //}
                        IsATVAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["AT_Amount"].ToString().Trim());
                        if (IsATVAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in ATAmount field.");
                        }
                        IsOthersAmt = cImport.CheckNumericBool(dtPurchaseI.Rows[e]["Others_Amount"].ToString().Trim());
                        if (IsOthersAmt != true)
                        {
                            throw new ArgumentNullException("Please insert decimal value in Others_Amount field.");
                        }

                    }

                    #endregion Duties
                }

                #endregion Duties
                #region Trackings
                CommonDAL cmnDal = new CommonDAL();
                string IsTracking = cmnDal.settings("TrackingTrace", "Tracking", null, null, connVM);
                if (IsTracking == "Y")
                {
                    #region Row count for trackings table
                    int TRowCount = 0;
                    for (int i = 0; i < dtPurchaseT.Rows.Count; i++)
                    {
                        if (!string.IsNullOrEmpty(dtPurchaseT.Rows[i]["ID"].ToString()))
                        {
                            TRowCount++;
                        }

                    }
                    #endregion Row count for trackings table

                    #region Trackings
                    #region Match Quantity
                    if (TRowCount > 0)
                    {
                        for (int detail = 0; detail < DRowCount; detail++)
                        {
                            string dItemNo = string.Empty;
                            decimal qty = 0;
                            decimal trackingQty = 0;


                            string dID = dtPurchaseD.Rows[detail]["ID"].ToString().Trim();
                            string productName = dtPurchaseD.Rows[detail]["Item_Name"].ToString().Trim();
                            dItemNo = cImport.FindItemId(dtPurchaseD.Rows[detail]["Item_Name"].ToString().Trim()
                                     , dtPurchaseD.Rows[detail]["Item_Code"].ToString().Trim(), currConn, transaction, false, "-", 1, 0, 0, connVM, "-");
                            qty = Convert.ToDecimal(dtPurchaseD.Rows[detail]["Quantity"].ToString().Trim());

                            DataRow[] trackingRows = dtPurchaseT.Select("ID='" + dID + "'");
                            if (trackingRows.Length > 0)
                            {
                                foreach (DataRow item in trackingRows)
                                {

                                    string tItemNo = cImport.FindItemId(item["Item_Name"].ToString().Trim()
                                                            , item["Item_Code"].ToString().Trim(), currConn, transaction, false, "-", 1, 0, 0, connVM, "-");

                                    if (string.IsNullOrEmpty(item["Heading_1"].ToString().Trim()))
                                    {
                                        throw new ArgumentNullException("FindTrackingInfo", "Please insert value in Heading_1 field.");
                                    }

                                    if (dItemNo == tItemNo)
                                    {
                                        trackingQty++;
                                    }
                                }


                                if (qty != trackingQty)
                                {
                                    throw new ArgumentNullException("FindTrackingInfo", "Please insert tracking info for Item '(" + productName + ")'");
                                }
                            }
                        }
                    }

                    #endregion
                    //for (int t = 0; t < TRowCount; t++)
                    //{
                    //    string ItemNo = string.Empty;
                    //    #region FindItemId
                    //    ItemNo = cImport.FindItemId(dtPurchaseT.Rows[t]["Item_Name"].ToString().Trim()
                    //                                        , dtPurchaseT.Rows[t]["Item_Code"].ToString().Trim(), currConn, transaction);
                    //    #endregion FindItemId
                    //    if (string.IsNullOrEmpty(dtPurchaseT.Rows[t]["Heading_1"].ToString().Trim()))
                    //    {
                    //        throw new ArgumentNullException("Please insert value in Heading_1 field.");
                    //    }
                    //}


                    #endregion Trackings
                }
                #endregion Trackings

                #endregion checking from database is exist the information(NULL Check)

                //if (currConn.State == ConnectionState.Open)
                //{
                //    currConn.Close();
                //    currConn.Open();
                //    transaction = currConn.BeginTransaction("Import Data.");
                //}

                string vdateTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                int temp = branchId;

                for (int i = 0; i < rowCount; i++)
                {

                    #region Master Purchase


                    string importID = dtPurchaseM.Rows[i]["ID"].ToString();
                    string vendorName = dtPurchaseM.Rows[i]["Vendor_Name"].ToString().Trim();
                    string vendorCode = dtPurchaseM.Rows[i]["Vendor_Code"].ToString().Trim();
                    string CustomHouse = dtPurchaseM.Rows[i]["Custom_House"].ToString().Trim();

                    string CompanyCode = dtPurchaseM.Rows[i]["CompanyCode"].ToString().Trim();
                    string FileName = dtPurchaseM.Rows[i]["FileName"].ToString().Trim();

                    #region FindVendorId
                    bool VendorAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "PurchaseVendor", connVM) == "Y" ? true : false);
                    string vendorId = "";
                    if (!string.IsNullOrEmpty(dtPurchaseM.Rows[i]["vendorID"].ToString()))
                    {
                        vendorId = dtPurchaseM.Rows[i]["vendorID"].ToString();
                    }
                    else
                    {
                        vendorId = cImport.FindVendorId(vendorName, vendorCode, currConn, transaction, VendorAutoSave, connVM, branchId);
                    }
                    #endregion FindVendorId
                    string invoiceDate = dtPurchaseM.Rows[i]["Invoice_Date"].ToString().Trim();

                    #region CheckNull
                    string referanceNo = cImport.ChecKNullValue(dtPurchaseM.Rows[i]["Referance_No"].ToString().Trim());
                    string bENumber = cImport.ChecKNullValue(dtPurchaseM.Rows[i]["BE_Number"].ToString().Trim());
                    #endregion CheckNull

                    string receiveDate = dtPurchaseM.Rows[i]["Receive_Date"].ToString().Trim();
                    string post = dtPurchaseM.Rows[i]["Post"].ToString().Trim();
                    string withVDS = dtPurchaseM.Rows[i]["With_VDS"].ToString().Trim();

                    decimal tDSAmount = 0;
                    if (!string.IsNullOrWhiteSpace(dtPurchaseM.Rows[i]["TDS_Amount"].ToString().Trim()))
                    {
                        tDSAmount = Convert.ToDecimal(dtPurchaseM.Rows[i]["TDS_Amount"].ToString().Trim());
                    }
                    decimal tDSRate = 0;
                    if (!string.IsNullOrWhiteSpace(dtPurchaseM.Rows[i]["TDSRate"].ToString().Trim()))
                    {
                        tDSRate = Convert.ToDecimal(dtPurchaseM.Rows[i]["TDSRate"].ToString().Trim());
                    }


                    #region Check Previous Purchase no.
                    string previousPurchaseNo = cImport.CheckPrePurchaseNo(dtPurchaseM.Rows[i]["Previous_Purchase_No"].ToString().Trim(), currConn, transaction, connVM);
                    #endregion Check Previous Purchase no.
                    #region CheckNull
                    string comments = dtPurchaseM.Rows[i]["Comments"].ToString().Trim();
                    string createdBy = dtPurchaseM.Rows[i]["Created_By"].ToString().Trim();
                    string lastModifiedBy = dtPurchaseM.Rows[i]["LastModified_By"].ToString().Trim();
                    string transactionType = dtPurchaseM.Rows[i]["Transection_Type"].ToString().Trim();
                    string branchCode = dtPurchaseM.Rows[i]["BranchCode"].ToString().Trim();
                    string branch_Id = dtPurchaseM.Rows[i]["BranchId"].ToString().Trim();
                    string IsRebate = dtPurchaseM.Rows[i]["IsRebate"].ToString().Trim();
                    string RebateDate = dtPurchaseM.Rows[i]["RebateDate"].ToString().Trim();
                    if (!string.IsNullOrWhiteSpace(transactionType) && transactionType.ToLower() == "local")
                    {
                        transactionType = "Other";
                    }
                    if (string.IsNullOrWhiteSpace(IsRebate))
                    {
                        IsRebate = "Y";
                    }
                    if (string.IsNullOrWhiteSpace(RebateDate))
                    {
                        RebateDate = receiveDate;
                    }

                    if (string.IsNullOrEmpty(branch_Id))
                    {
                        DataTable table = branchDal.SelectAll(null, new[] { "BranchCode" }, new[] { branchCode }, currConn, transaction,
                             true, connVM);
                        branchId = table.Rows.Count > 0 ? Convert.ToInt32(table.Rows[0]["BranchID"]) : temp;
                    }
                    else
                    {
                        branchId = Convert.ToInt32(branch_Id);
                    }

                    string lCNumber = "-";
                    string LCDate = "";
                    decimal LandedCost = 0;
                    if (IsCollCNo == true)
                    {
                        lCNumber = cImport.ChecKNullValue(dtPurchaseM.Rows[i]["LC_No"].ToString().Trim());
                    }
                    if (IsCollCDate == true)
                    {
                        if (!string.IsNullOrEmpty(dtPurchaseM.Rows[i]["LC_Date"].ToString().Trim()))
                        {
                            LCDate = Convert.ToDateTime(dtPurchaseM.Rows[i]["LC_Date"].ToString().Trim()).ToString("yyyy-MM-dd") + Convert.ToDateTime(vdateTime).ToString(" HH:mm:ss");
                        }
                    }

                    if (IsCollandedCost == true)
                    {
                        LandedCost = Convert.ToDecimal(cImport.ChecKNullValue(dtPurchaseM.Rows[i]["Landed_Cost"].ToString().Trim()));
                    }

                    #endregion CheckNull

                    #region Master Purchase
                    purchaseMaster = new PurchaseMasterVM();
                    purchaseMaster.VendorID = vendorId;
                    purchaseMaster.InvoiceDate = Convert.ToDateTime(invoiceDate).ToString("yyyy-MM-dd") + Convert.ToDateTime(vdateTime).ToString(" HH:mm:ss");
                    purchaseMaster.SerialNo = referanceNo.Replace(" ", "");
                    purchaseMaster.CustomHouse = CustomHouse;
                    purchaseMaster.Comments = comments;
                    purchaseMaster.CreatedBy = createdBy;
                    purchaseMaster.CreatedOn = vdateTime;
                    purchaseMaster.LastModifiedBy = lastModifiedBy;
                    purchaseMaster.LastModifiedOn = vdateTime;
                    purchaseMaster.BENumber = bENumber;
                    purchaseMaster.TransactionType = transactionType;
                    purchaseMaster.ReceiveDate = Convert.ToDateTime(receiveDate).ToString("yyyy-MM-dd") + Convert.ToDateTime(vdateTime).ToString(" HH:mm:ss");
                    purchaseMaster.Post = post;
                    purchaseMaster.ReturnId = previousPurchaseNo;

                    purchaseMaster.ProductType = "NA";
                    purchaseMaster.WithVDS = withVDS;
                    purchaseMaster.ImportID = importID;
                    purchaseMaster.LCNumber = lCNumber;
                    if (string.IsNullOrWhiteSpace(LCDate))
                    {
                        LCDate = purchaseMaster.InvoiceDate;
                    }
                    purchaseMaster.LCDate = LCDate;
                    purchaseMaster.LandedCost = LandedCost;
                    purchaseMaster.BranchId = branchId;
                    purchaseMaster.IsRebate = IsRebate;
                    purchaseMaster.RebateDate = RebateDate;
                    purchaseMaster.TDSAmount = tDSAmount;
                    purchaseMaster.TDSRate = tDSRate;
                    purchaseMaster.CompanyCode = CompanyCode;
                    purchaseMaster.FileName = FileName;


                    purchaseMaster.RebatePeriodId = Convert.ToDateTime(RebateDate).ToString("MMyyyy");
                    #endregion Master
                    #endregion Master Purchase

                    #region fitemno
                    DataRow[] DetailRaws;//= new DataRow[];//
                    if (!string.IsNullOrEmpty(importID))
                    {

                        DetailRaws =
                           dtPurchaseD.Select("ID='" + importID + "'");

                    }
                    else
                    {
                        DetailRaws = null;
                    }


                    #endregion fitemno

                    #region Details Purchase

                    int Dcounter = 1;
                    decimal totalVatAmount = 0;
                    decimal TotalAmount = 0;

                    #region Juwel 13/10/2015
                    // 
                    purchaseDetails = new List<PurchaseDetailVM>();
                    purchaseDuties = new List<PurchaseDutiesVM>();
                    DataTable dtDistinctItem = DetailRaws.CopyToDataTable().DefaultView.ToTable(true, "Item_Code", "Type", "ItemNo", "BomId", "UOM", "Item_Name");//Item_Name
                    DataTable dtPurchasesDetail = DetailRaws.CopyToDataTable();

                    string uOM = "", uOMn = "", uOMc = "";
                    decimal USDValue = 0;
                    string productType = "Raw";

                    if (purchaseMaster.TransactionType != "CommercialImporter")
                    {
                        USDValue = 1;
                        purchaseMaster.USDInvoiceValue = 1;
                    }

                    if (purchaseMaster.TransactionType == "Trading")
                    {
                        productType = "Trading";
                        purchaseMaster.ProductType = productType;
                    }

                    foreach (DataRow item in dtDistinctItem.Rows)
                    {
                        string itemCode, itemName, itemNo, type;

                        DataTable dtRepeatedItems = new DataTable();

                        itemCode = item["Item_Code"].ToString().Trim();
                        ////itemName = "";
                        itemName = item["Item_Name"].ToString().Trim();
                        string ImportId = dtPurchasesDetail.Rows[0]["ID"].ToString();

                        if (!string.IsNullOrWhiteSpace(item["ItemNo"].ToString()) && item["ItemNo"].ToString() != "0" && item["ItemNo"].ToString() != "-")
                        {
                            dtRepeatedItems = dtPurchasesDetail.Select("[ItemNo] ='" + item["ItemNo"].ToString() + "'").CopyToDataTable();

                        }
                        else if (!string.IsNullOrWhiteSpace(itemCode) && itemCode != "-")
                        {
                            dtRepeatedItems = dtPurchasesDetail.Select("[Item_Code] ='" + itemCode + "'").CopyToDataTable();

                        }
                        else if (!string.IsNullOrWhiteSpace(itemName) && itemName != "-")
                        {
                            dtRepeatedItems = dtPurchasesDetail.Select("[Item_Name] ='" + itemName + "'").CopyToDataTable();
                        }
                        else
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, "Item Code and Item Name not found for ID : " + ImportId);
                        }

                        //////dtRepeatedItems = dtPurchasesDetail.Select("[Item_Code] ='" + item["Item_Code"].ToString() + "'").CopyToDataTable();

                        bool ProductAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "PurchaseProduct") == "Y" ? true : false);

                        if (!string.IsNullOrEmpty(item["ItemNo"].ToString()) && item["ItemNo"].ToString() != "0")
                        {

                            itemNo = item["ItemNo"].ToString();
                        }
                        else
                        {
                            itemNo = cImport.FindItemId(itemName, itemCode, currConn, transaction, ProductAutoSave, item["UOM"].ToString().Trim(), 1, 0, 0, connVM, "-");

                        }

                        type = item["Type"].ToString().Trim();

                        decimal quantity = 0;
                        decimal totalPrice = 0;
                        decimal rebateRate = 0;
                        decimal sDAmount = 0;
                        decimal vATAmount = 0;
                        string Productype = "";
                        string FixedVATRebate = "";
                        string HSCode = "";
                        string BEItemNo = "";
                        string CPCName = "";
                        string OtherRef = "";

                        foreach (DataRow row in dtRepeatedItems.Rows)
                        {


                            if (DatabaseInfoVM.DatabaseName.ToString() == "Sanofi_DB")
                            {
                                uOMn = cImport.FindUOMn(itemNo, currConn, transaction, connVM);
                                uOM = uOMn;
                                uOMc = "1";
                            }
                            else
                            {
                                uOM = row["UOM"].ToString().Trim();
                                uOMn = cImport.FindUOMn(itemNo, currConn, transaction, connVM);

                                if (uomDefault)
                                {
                                    uOMc = "1";
                                }
                                else
                                {
                                    uOMc = cImport.FindUOMc(uOMn, uOM, currConn, transaction, connVM, "", "", "");

                                }
                            }

                            quantity = quantity + Convert.ToDecimal(row["Quantity"].ToString().Trim());
                            totalPrice = totalPrice + Convert.ToDecimal(row["Total_Price"].ToString().Trim());
                            rebateRate = rebateRate + Convert.ToDecimal(row["Rebate_Rate"].ToString().Trim());
                            sDAmount = sDAmount + Convert.ToDecimal(row["SD_Amount"].ToString().Trim());
                            vATAmount = vATAmount + Convert.ToDecimal(row["VAT_Amount"].ToString().Trim());
                            Productype = row["ProductType"].ToString().Trim();
                            FixedVATRebate = row["FixedVATRebate"].ToString().Trim();
                            HSCode = row["HSCode"].ToString().Trim();
                            BEItemNo = row["BEItemNo"].ToString().Trim();
                            CPCName = row["CPCName"].ToString().Trim();
                            OtherRef = row["OtherRef"].ToString().Trim();
                        }

                        //    if (transactionType == "Import"
                        //|| transactionType == "TradingImport"
                        //|| transactionType == "ServiceImport"
                        //|| transactionType == "InputServiceImport"
                        //|| transactionType == "ServiceNSImport")
                        //    {
                        //        type = "Import-" + type;
                        //    }
                        //    else
                        //    {
                        //        type = "Local-" + type;
                        //    }

                        #region details

                        PurchaseDetailVM purchaseDetailVm = new PurchaseDetailVM();

                        purchaseDetailVm.LineNo = Dcounter.ToString();
                        purchaseDetailVm.ItemNo = itemNo.ToString();
                        purchaseDetailVm.Quantity = Convert.ToDecimal(quantity.ToString());

                        purchaseDetailVm.UOM = uOM.ToString();
                        purchaseDetailVm.Comments = "NA";
                        purchaseDetailVm.BENumber = bENumber.ToString();
                        purchaseDetailVm.Type = type.ToString();
                        purchaseDetailVm.HSCode = HSCode.ToString();
                        purchaseDetailVm.BEItemNo = BEItemNo.ToString();
                        purchaseDetailVm.CPCName = CPCName.ToString();
                        purchaseDetailVm.ProductType = "NA";
                        purchaseDetailVm.FixedVATRebate = FixedVATRebate;
                        purchaseDetailVm.UOMn = uOMn.ToString();
                        purchaseDetailVm.UOMc = Convert.ToDecimal(uOMc.ToString());
                        purchaseDetailVm.SubTotal = Convert.ToDecimal(totalPrice);

                        //// new
                        //quantity = quantity == 0 ? 1 : quantity;
                        //totalPrice = totalPrice == 0 ? 1 : totalPrice;
                        //// new end

                        decimal unitPrice = Convert.ToDecimal(Convert.ToDecimal(totalPrice.ToString()) / Convert.ToDecimal(quantity.ToString()));
                        purchaseDetailVm.UnitPrice = unitPrice;
                        purchaseDetailVm.NBRPrice = unitPrice;
                        purchaseDetailVm.UOMPrice = Convert.ToDecimal(unitPrice) / Convert.ToDecimal(uOMc);
                        purchaseDetailVm.UOMQty = Convert.ToDecimal(quantity) * Convert.ToDecimal(uOMc);
                        purchaseDetailVm.VATAmount = Convert.ToDecimal(vATAmount);
                        purchaseDetailVm.FixedVATAmount = Convert.ToDecimal(vATAmount);
                        purchaseDetailVm.SDAmount = Convert.ToDecimal(sDAmount);
                        purchaseDetailVm.RebateRate = Convert.ToDecimal(rebateRate.ToString());
                        purchaseDetailVm.RebateAmount =
                            Convert.ToDecimal(Convert.ToDecimal(vATAmount) * Convert.ToDecimal(rebateRate.ToString()) / 100);
                        if (Productype == "P")
                        {
                            purchaseDetailVm.VATRate = 0;
                            purchaseDetailVm.SD = 0;
                        }
                        else
                        {
                            purchaseDetailVm.VATRate = Convert.ToDecimal(Convert.ToDecimal(vATAmount) * 100 / Convert.ToDecimal(totalPrice));
                            purchaseDetailVm.SD = Convert.ToDecimal(Convert.ToDecimal(sDAmount) * 100 / Convert.ToDecimal(totalPrice));
                        }
                        purchaseDetailVm.BOMId = !string.IsNullOrEmpty(item["BomId"].ToString())
                            ? Convert.ToInt32(item["BomId"].ToString())
                            : 0;

                        purchaseDetailVm.USDValue = USDValue;
                        if (Productype == "R" || Productype == "P")
                        {
                            purchaseDetailVm.ProductType = Productype;
                        }
                        else
                        {
                            purchaseDetailVm.ProductType = productType;
                        }
                        purchaseDetailVm.Post = purchaseMaster.Post;

                        if (purchaseMaster.WithVDS.ToLower() == "y")
                        {
                            purchaseDetailVm.VDSAmount = purchaseDetailVm.VATAmount;
                        }

                        if (dtPurchaseI.Rows.Count > 0)
                        {


                            DataRow[] ImportRaws;//= new DataRow[];//
                            if (!string.IsNullOrEmpty(importID))
                            {
                                ImportRaws = dtPurchaseI.Select("ID='" + importID + "' and ItemNo='" + itemNo + "'");
                            }
                            else
                            {
                                ImportRaws = null;
                            }

                            if (ImportRaws != null && ImportRaws.Length > 0)
                            {
                                DtPurchaseD = dtPurchaseD;
                                //purchaseDuties
                                if (Code.ToLower() != "nestle")
                                {
                                    List<PurchaseDutiesVM> calculatedDuties = DutyCalculation(ImportRaws, currConn, transaction, connVM);
                                    purchaseDuties = purchaseDuties.Concat(calculatedDuties).ToList();
                                }

                            }
                        }
                        if (purchaseDuties.Count > 0)
                        {

                            for (int dutyRow = 0; dutyRow < purchaseDuties.Count; dutyRow++)
                            {
                                if (purchaseDuties[dutyRow].ItemNo == itemNo)
                                {
                                    purchaseDetailVm.CnFAmount = purchaseDuties[dutyRow].CnFAmount;
                                    purchaseDetailVm.InsuranceAmount = purchaseDuties[dutyRow].InsuranceAmount;
                                    purchaseDetailVm.AssessableValue = purchaseDuties[dutyRow].AssessableValue;
                                    purchaseDetailVm.CDAmount = purchaseDuties[dutyRow].CDAmount;
                                    purchaseDetailVm.RDAmount = purchaseDuties[dutyRow].RDAmount;
                                    purchaseDetailVm.TVBAmount = purchaseDuties[dutyRow].TVBAmount;
                                    purchaseDetailVm.TVAAmount = purchaseDuties[dutyRow].TVAAmount;
                                    purchaseDetailVm.ATVAmount = purchaseDuties[dutyRow].ATVAmount;
                                    purchaseDetailVm.OthersAmount = purchaseDuties[dutyRow].OthersAmount;
                                    purchaseDetailVm.AITAmount = purchaseDuties[dutyRow].AITAmount;

                                }
                            }
                        }
                        else
                        {

                            purchaseDetailVm.CnFAmount = Convert.ToDecimal(0);
                            purchaseDetailVm.InsuranceAmount = Convert.ToDecimal(0);
                            purchaseDetailVm.AssessableValue = Convert.ToDecimal(0);
                            purchaseDetailVm.CDAmount = Convert.ToDecimal(0);
                            purchaseDetailVm.RDAmount = Convert.ToDecimal(0);
                            purchaseDetailVm.TVBAmount = Convert.ToDecimal(0);
                            purchaseDetailVm.TVAAmount = Convert.ToDecimal(0);
                            purchaseDetailVm.ATVAmount = Convert.ToDecimal(0);
                            purchaseDetailVm.OthersAmount = Convert.ToDecimal(0);
                        }

                        #endregion details
                        purchaseDetailVm.BranchId = branchId;
                        purchaseDetailVm.OtherRef = OtherRef;

                        purchaseDetails.Add(purchaseDetailVm);
                        totalVatAmount = totalVatAmount + Convert.ToDecimal(vATAmount);
                        //vImpTotalPrice = (vImpAV1 + vImpCD1 + vImpRD1 + vImpTVB1 + vImpSD1 + vImpVAT1 + vImpATV1 +
                        //                             vImpOthers1);
                        TotalAmount = TotalAmount + (Convert.ToDecimal(totalPrice) + Convert.ToDecimal(vATAmount) + Convert.ToDecimal(sDAmount));
                        Dcounter++;
                    }

                    //
                    #endregion juwel

                    #endregion Details Purchase

                    purchaseMaster.TotalVATAmount = totalVatAmount;
                    purchaseMaster.TotalAmount = TotalAmount;

                    #region Tracking
                    #region fitemno
                    DataRow[] TrackingRaws;//= new DataRow[];//
                    if (dtPurchaseT != null && dtPurchaseT.Rows.Count > 0)
                    {
                        TrackingRaws =
                           dtPurchaseT.Select("ID='" + importID + "'");
                    }
                    else
                    {
                        TrackingRaws = null;
                    }
                    purchaseTrackings = new List<TrackingVM>();
                    if (TrackingRaws != null && TrackingRaws.Length > 0)
                    {

                        int lineNoT = 1;

                        foreach (DataRow row in TrackingRaws)
                        {
                            string itemCode = row["Item_Code"].ToString().Trim();
                            string itemName = row["Item_Name"].ToString().Trim();
                            bool ProductAutoSave = Convert.ToBoolean(commonDal.settingValue("AutoSave", "PurchaseProduct") == "Y" ? true : false);
                            bool ProductNameCheck = commonDal.settingValue("Purchase", "ProductNameCheck") == "Y";

                            string itemNo = cImport.FindItemId(itemName, itemCode, currConn, transaction, ProductAutoSave, "-", 1, 0, 0, connVM, "-", ProductNameCheck);

                            string heading1 = row["Heading_1"].ToString().Trim();
                            string heading2 = row["Heading_2"].ToString().Trim();
                            string quantity = "0";
                            string totalPrice = "0";

                            foreach (DataRow row1 in DetailRaws)
                            {
                                string itemCode1 = row1["Item_Code"].ToString().Trim();
                                string itemName1 = row1["Item_Name"].ToString().Trim();

                                string itemNo1 = cImport.FindItemId(itemName1, itemCode1, currConn, transaction, ProductAutoSave, "-", 1, 0, 0, connVM, "-", ProductNameCheck);

                                if (itemNo1 == itemNo)
                                {
                                    quantity = row1["Quantity"].ToString().Trim();
                                    totalPrice = row1["Total_Price"].ToString().Trim();

                                }

                            }
                            TrackingVM purchaseTrackingVm = new TrackingVM();
                            purchaseTrackingVm.TrackingLineNo = lineNoT.ToString();
                            purchaseTrackingVm.ItemNo = itemNo;
                            purchaseTrackingVm.Heading1 = heading1;
                            purchaseTrackingVm.Heading2 = heading2;
                            purchaseTrackingVm.Quantity = 1;
                            decimal unitPrice = Convert.ToDecimal(Convert.ToDecimal(totalPrice.ToString()) / Convert.ToDecimal(quantity.ToString()));
                            purchaseTrackingVm.UnitPrice = unitPrice;

                            purchaseTrackingVm.IsPurchase = "Y";
                            purchaseTrackingVm.IsIssue = "N";
                            purchaseTrackingVm.IsReceive = "N";
                            purchaseTrackingVm.IsSale = "N";
                            purchaseTrackingVm.BranchId = branchId;
                            purchaseTrackings.Add(purchaseTrackingVm);
                            lineNoT++;
                        }
                    }


                    #endregion fitemno
                    #endregion

                    string[] sqlResults = PurchaseInsert(purchaseMaster, purchaseDetails, purchaseDuties, purchaseTrackings, transaction, currConn, branchId, connVM, UserId);
                    retResults[0] = sqlResults[0];

                    if (callBack != null)
                    {
                        callBack();
                    }

                    purchaseMaster.PurchaseInvoiceNo = sqlResults[2];

                    #region Day End Process

                    //try
                    //{
                    //    if (dayEnd == "Y" && purchaseMaster.Post == "Y")
                    //    {
                    //        IssueDAL issuedal = new IssueDAL();

                    //        issuedal.UpdateAvgPrice_New(new AVGPriceVm(){AvgDateTime = purchaseMaster.ReceiveDate}, currConn, transaction);
                    //    }
                    //}
                    //catch (Exception e)
                    //{

                    //}

                    #endregion

                }


                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + "1";
                retResults[3] = "" + "N";
            }
            #endregion try

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message;//Success or Fail
                //////retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "ImportData", ex.ToString(), "Purchase");


                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

            #region Result

            return retResults;

            #endregion

        }

        #region for big data import

        public int GetUnProcessedCount(SysDBInfoVMTemp connVM = null)
        {

            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {

                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sql = @"select count(distinct(Id)) from PurchasesTempData where IsProcessed = 0";

                #endregion

                #region Sql Command

                SqlCommand cmd = new SqlCommand(sql, currConn, transaction);
                int rowCount = (int)cmd.ExecuteScalar();
                #endregion

                #region transaction Commit

                transaction.Commit();

                #endregion

                return rowCount;

            }

            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "GetUnProcessedCount", ex.ToString(), "Purchase");
                throw new ArgumentNullException("", ex.Message.ToString());

                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

        }

        public string[] ImportBigData(DataTable PurchaseData, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.StatisticsEnabled = true;
                    currConn.Open();
                    transaction = currConn.BeginTransaction("Import Big Data");
                }

                #endregion

                #region SQL Text

                string defaultValueSql = @"update PurchasesTempData set ItemNo = 0, VendorID = 0;";

                string updateItemCustomerId = @"
update PurchasesTempData set ItemNo=Products.ItemNo from Products where Products.ProductCode=PurchasesTempData.Item_Code;
update PurchasesTempData set ItemNo=Products.ItemNo from Products where Products.productName =PurchasesTempData.Item_Name;

update PurchasesTempData set VendorID=Vendors.VendorID from Vendors where Vendors.VendorCode =PurchasesTempData.Vendor_Code;
update PurchasesTempData set VendorID=Vendors.VendorID from Vendors where Vendors.VendorName =PurchasesTempData.Vendor_Name;";

                string branchCode = @"update PurchasesTempData set BranchId=BranchProfiles.BranchID from BranchProfiles where BranchProfiles.BranchCode=PurchasesTempData.Branch_Code;";

                string getdefaultData = @"select * from PurchasesTempData where ItemNo = 0 or VendorID = 0;";

                string deleteTemp = @"delete from PurchasesTempData; ";

                deleteTemp += " DBCC CHECKIDENT ('PurchasesTempData', RESEED, 0);";

                SqlCommand cmd = new SqlCommand(deleteTemp, currConn, transaction);
                cmd.ExecuteNonQuery();

                #endregion

                #region Bulk Insert

                CommonDAL commonDal = new CommonDAL();

                retResults = commonDal.BulkInsert("PurchasesTempData", PurchaseData, currConn, transaction, 10000, null, connVM);

                #endregion

                #region Sql Command

                cmd.CommandText = branchCode + " " + updateItemCustomerId;
                int updateItemResult = cmd.ExecuteNonQuery();

                cmd.CommandText = getdefaultData;
                DataTable defaultData = new DataTable();
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(defaultData);



                #endregion

                #region Insert Customer and Products

                CommonImportDAL commonImportDal = new CommonImportDAL();

                foreach (DataRow row in defaultData.Rows)
                {
                    if (row["VendorID"].ToString().Trim() == "0")
                    {
                        string vendorName = row["Vendor_Name"].ToString().Trim();
                        string vendorCode = row["Vendor_Code"].ToString().Trim();

                        commonImportDal.FindVendorId(vendorName, vendorCode, currConn, transaction, true, connVM, 1);
                    }

                    if (row["ItemNo"].ToString().Trim() == "0")
                    {
                        string itemCode = row["Item_Code"].ToString().Trim();
                        string itemName = row["Item_Name"].ToString().Trim();

                        commonImportDal.FindItemId(itemName, itemCode, currConn, transaction, true, "-", 1, 0, 0, connVM, "-");
                    }
                }

                #endregion

                #region Reupdate

                cmd.CommandText = updateItemCustomerId;
                int reUpdate = cmd.ExecuteNonQuery();

                #endregion

                #region transaction Commit

                if (retResults[0].ToLower() == "success" && updateItemResult > 0)
                {
                    transaction.Commit();
                }

                #endregion

                #region retResults

                retResults[0] = retResults[0].ToLower() == "success" && (updateItemResult > 0 || reUpdate > 0) ? "success" : "fail";

                retResults[2] = currConn.RetrieveStatistics()["ExecutionTime"].ToString();

                #endregion

            }

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "ImportBigData", ex.ToString(), "Purchase");
                throw new ArgumentNullException("", ex.Message.ToString());

                //////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return retResults;
        }
        #endregion

        public string[] SaveTempPurchase(DataTable data, string BranchCode, string transactionType, string CurrentUser, int branchId, Action callBack, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null, string UserId = "", bool IsExcel = false)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            CommonDAL commonDal = new CommonDAL();

            #endregion

            try
            {

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                string CustomeDateFormat = commonDal.settingValue("Integration", "CustomeDateFormat", connVM, currConn, transaction);
                if (!string.IsNullOrWhiteSpace(CustomeDateFormat) && CustomeDateFormat != "-")
                {
                    if (CustomeDateFormat == "DD.MM.YYYY")
                    {
                        CustomeDateFormat = "dd.MM.yyyy";
                    }
                    string pattern = CustomeDateFormat;

                    if (data.Columns.Contains("Invoice_Date"))
                    {
                        foreach (DataRow dataRow in data.Rows)
                        {
                            DateTime parsedDate;

                            if (DateTime.TryParseExact(dataRow["Invoice_Date"].ToString().Trim(), pattern, null, DateTimeStyles.None, out parsedDate))
                            {
                                dataRow["Invoice_Date"] = parsedDate.ToString("yyyy-MM-dd");
                            }

                        }
                    }

                    if (data.Columns.Contains("Receive_Date"))
                    {
                        foreach (DataRow dataRow in data.Rows)
                        {
                            DateTime parsedDate;

                            if (DateTime.TryParseExact(dataRow["Receive_Date"].ToString().Trim(), pattern, null, DateTimeStyles.None, out parsedDate))
                            {
                                dataRow["Receive_Date"] = parsedDate.ToString("yyyy-MM-dd");
                            }

                        }
                    }

                    if (data.Columns.Contains("RebateDate"))
                    {
                        foreach (DataRow dataRow in data.Rows)
                        {
                            DateTime parsedDate;

                            if (DateTime.TryParseExact(dataRow["RebateDate"].ToString().Trim(), pattern, null, DateTimeStyles.None, out parsedDate))
                            {
                                dataRow["RebateDate"] = parsedDate.ToString("yyyy-MM-dd");
                            }

                        }
                    }

                }


                sqlText = @"delete from TempPurchaseData;";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.ExecuteNonQuery();

                if (data.Columns.Contains("Transaction_Type"))
                {
                    data.Columns["Transaction_Type"].ColumnName = "Transection_Type";
                }

                if (data.Columns.Contains("Invoice_Value"))
                {
                    data.Columns.Remove("Invoice_Value");
                }
                if (data.Columns.Contains("Exchange_Rate"))
                {
                    data.Columns.Remove("Exchange_Rate");
                }
                if (data.Columns.Contains("Currency"))
                {
                    data.Columns.Remove("Currency");
                }


                string CompanyCode = commonDal.settings("CompanyCode", "Code", currConn, transaction, connVM);
                string duplicate = commonDal.settings("Import", "PurchaseDuplicateInsert", currConn, transaction, connVM);
                string purchaseExist = commonDal.settings("Import", "PurchaseExistContinue", currConn, transaction, connVM);
                bool ProductNameCheck = commonDal.settings("Purchase", "ProductNameCheck", currConn, transaction, connVM) == "Y";


                string[] bulkRes = commonDal.BulkInsert("TempPurchaseData", data, currConn, transaction, 0, null, connVM);

                #region Join Date Time

                if (data.Columns.Contains("Receive_Time"))
                {
                    string updateDate = "update TempPurchaseData set Receive_Date = Receive_Date + ' ' + Receive_Time";
                    cmd.CommandText = updateDate;

                    cmd.ExecuteNonQuery();
                }
                if (data.Columns.Contains("Invoice_Time"))
                {
                    string updateDate = "update TempPurchaseData set Invoice_Date = Invoice_Date + ' ' + Invoice_Time";
                    cmd.CommandText = updateDate;

                    cmd.ExecuteNonQuery();
                }

                if (data.Columns.Contains("Rebate_Time"))
                {
                    string updateDate = "update TempPurchaseData set RebateDate = Rebate_Date + ' ' + Rebate_Time";
                    cmd.CommandText = updateDate;

                    cmd.ExecuteNonQuery();
                }

                #endregion

                #region SqlText

                string updateVendorId =
                    @"update TempPurchaseData set VendorID = Vendors.VendorID from Vendors where Vendors.VendorCode = TempPurchaseData.Vendor_Code and TempPurchaseData.Vendor_Code !='-' and TempPurchaseData.Vendor_Code !='0';
update TempPurchaseData set VendorID = Vendors.VendorID from Vendors where Vendors.VendorName = TempPurchaseData.Vendor_Name and TempPurchaseData.Vendor_Name !='-' and TempPurchaseData.Vendor_Name !='';";

                string updateItemNo = @"
update TempPurchaseData set ItemNo = Products.ItemNo from Products where Products.ProductCode = TempPurchaseData.Item_Code 
and (TempPurchaseData.ItemNo is null or TempPurchaseData.ItemNo = '0') and TempPurchaseData.Item_Code !='-' and TempPurchaseData.Item_Code !='0';

--update TempPurchaseData set ItemNo = Products.ItemNo from Products where Products.ProductName = TempPurchaseData.Item_Name 
--and (TempPurchaseData.ItemNo is null or TempPurchaseData.ItemNo = '0') and TempPurchaseData.Item_Name !='-' and TempPurchaseData.Item_Name !='' ;

";
                if (ProductNameCheck)
                {
                    updateItemNo += @"

update TempPurchaseData set ItemNo = Products.ItemNo from Products where Products.ProductName = TempPurchaseData.Item_Name 
and (TempPurchaseData.ItemNo is null or TempPurchaseData.ItemNo = '0') and TempPurchaseData.Item_Name !='-' and TempPurchaseData.Item_Name !='' ;

";
                }

                if (OrdinaryVATDesktop.IsACICompany(CompanyCode))
                {
                    updateItemNo += @"

update TempPurchaseData set HSCode=Products.HSCodeNo from Products where Products.ItemNo=TempPurchaseData.ItemNo  

";
                }

                string IntegrationbranchUpdate = @"update TempPurchaseData set BranchCode = BranchMapDetails.BranchCode from BranchMapDetails 
where BranchMapDetails.IntegrationCode = TempPurchaseData.BranchCode";

                string branchUpdate = @"update TempPurchaseData set BranchId = BranchProfiles.BranchID from BranchProfiles where BranchProfiles.BranchCode = TempPurchaseData.BranchCode or BranchProfiles.IntegrationCode = TempPurchaseData.BranchCode;";

                string branchIdUpdate = @"
 update TempPurchaseData set BranchId = BranchMapDetails.BranchID from BranchMapDetails 
where   BranchMapDetails.IntegrationCode = TempPurchaseData.BranchCode and (TempPurchaseData.BranchId  is null or 
TempPurchaseData.BranchId ='0' or TempPurchaseData.BranchId = ''
)";


                //                string bom = @"update TempPurchaseData 
                //set BOMId = BOMRaws.BOMId 
                //from BOMRaws where BOMRaws.RawItemNo = TempPurchaseData.ItemNo 
                //and BOMRaws.effectdate<= cast(TempPurchaseData.Invoice_Date as datetime) and BOMRaws.post='Y';";
                string bom = @"UPDATE TempPurchaseData
SET BOMId = (
    SELECT TOP 1 BOMId 
    FROM BOMRaws 
    WHERE BOMRaws.RawItemNo = TempPurchaseData.ItemNo 
        AND BOMRaws.effectdate <= CAST(TempPurchaseData.Invoice_Date AS DATETIME) 
        AND BOMRaws.post = 'Y' 
    ORDER BY effectdate DESC
)";

                string VATTypeUpdate = @"update TempPurchaseData set Type='Exempted' where Type='NonVAT'";

                string getAll = @"
SELECT [SL]
      ,[ID]
      ,[Vendor_Name]
      ,[Vendor_Code]
      ,[VendorID]
      ,[Referance_No]
      ,[Previous_Purchase_No]
      ,[Post]
      ,[LC_No]
      ,[Item_Code]
      ,[Item_Name]
      ,[ItemNo]
      ,[Quantity]
      ,[UOM]
      ,[BranchCode]
      ,[BranchId]
      ,[Comments]
      ,[VAT_Amount]
      ,[BOMId]
      ,[BE_Number]
      ,[Invoice_Date]
      ,[Receive_Date]
      ,[With_VDS]
      ,[Custom_House]
      ,[Total_Price]
      ,[Type]
      ,[Rebate_Rate]
      ,[SD_Amount]
      ,isnull([CnF_Amount],0)[CnF_Amount]
      ,isnull([Insurance_Amount],0)[Insurance_Amount]
      ,isnull([Assessable_Value],0)[Assessable_Value]
      ,isnull([CD_Amount],0)[CD_Amount]
      ,isnull([RD_Amount],0)[RD_Amount]
      ,isnull([TVB_Amount],0)[TVB_Amount]
      ,isnull([TVA_Amount],0)[TVA_Amount]
      ,isnull([ATV_Amount],0)[ATV_Amount]
      ,isnull([Others_Amount],0)[Others_Amount]
      ,[Remarks]
      ,isnull([AITAmount],0)[AITAmount]
      ,isnull([AT_Amount],0)[AT_Amount]
      ,Transection_Type
      ,[Product_Group]
      ,[IsRebate]
      ,[RebateDate]
      ,[ProductType]
      ,isnull([FixedVATRebate],'Y')[FixedVATRebate]
      ,isnull(HSCode,'-')HSCode
      ,isnull(CPCName,'-')CPCName
      ,isnull(BEItemNo,'-')BEItemNo
      ,isnull(HSCode,'-')HSCode
      ,OtherRef
      ,[TDS_Amount]
      ,[TDSRate]
      ,[FileName]
      ,[CompanyCode]


  FROM TempPurchaseData";

                #endregion

                if (CompanyCode.ToLower() == "DBH".ToLower())
                {
                    cmd.CommandText = IntegrationbranchUpdate;

                    cmd.ExecuteNonQuery();
                }

                if (CompanyCode.ToLower() == "CP".ToLower())
                {
                    cmd.CommandText = VATTypeUpdate;

                    cmd.ExecuteNonQuery();
                    branchUpdate += " " + branchIdUpdate;
                }

                cmd.CommandText = updateVendorId + " " + updateItemNo + " " + branchUpdate + " " + bom;

                cmd.ExecuteNonQuery();

                #region Delete Duplicate

                string deleteDuplicate = @"
delete TempPurchaseData from 
TempPurchaseData 
join PurchaseInvoiceHeaders on TempPurchaseData.ID = PurchaseInvoiceHeaders.ImportIDExcel";

                string selectDuplicate = @"select distinct TempPurchaseData.ID,PurchaseInvoiceHeaders.PurchaseInvoiceNO from 
TempPurchaseData join PurchaseInvoiceHeaders on TempPurchaseData.ID = PurchaseInvoiceHeaders.ImportIDExcel";

                if (!IsExcel)
                {
                    if (CompanyCode == "CP" || OrdinaryVATDesktop.IsACICompany(CompanyCode) || OrdinaryVATDesktop.IsUnileverCompany(CompanyCode) || CompanyCode.ToLower() == "nestle" || CompanyCode.ToLower() == "smc"
                        || CompanyCode.ToLower() == "smcholding" || CompanyCode.ToLower() == "eon" || CompanyCode.ToLower() == "DBH".ToLower()
                        || CompanyCode.ToLower() == "purofood" || CompanyCode.ToLower() == "eahpl" || CompanyCode.ToLower() == "eail" || CompanyCode.ToLower() == "eeufl" || CompanyCode.ToLower() == "exfl"
                        || CompanyCode.ToLower() == "mbl" || CompanyCode.ToLower() == "MBLMouchak".ToLower() || CompanyCode.ToLower() == "MBLShirirchala".ToLower() || CompanyCode.ToLower() == "MBLMirsarai".ToLower() || CompanyCode.ToLower() == "bcl".ToLower()
                        || CompanyCode.ToLower() == "colgate"
                        || CompanyCode.ToLower() == "decathlon" || CompanyCode.ToLower() == "SMC".ToLower() || CompanyCode.ToLower() == "SMCHOLDING".ToLower() || CompanyCode.ToLower() == "JAPFA".ToLower() || CompanyCode.ToLower() == "british".ToLower()
                        || OrdinaryVATDesktop.IsNourishCompany(CompanyCode) || purchaseExist.ToLower() == "n")
                    {
                        if (duplicate.ToLower() == "n")
                        {
                            cmd.CommandText = selectDuplicate;
                            SqlDataAdapter ddataAdapter = new SqlDataAdapter(cmd);
                            DataTable duplicates = new DataTable();
                            ddataAdapter.Fill(duplicates);

                            string duplicateIds = string.Join(", ", duplicates.Rows.OfType<DataRow>().Select(r => r[0].ToString()));

                            if (duplicates.Rows.Count > 0)
                            {
                                throw new Exception("These Invoices are already in system-" + duplicateIds);
                            }
                        }
                        else if (duplicate.ToLower() == "y")
                        {
                            cmd.CommandText = deleteDuplicate;

                            int deletedData = cmd.ExecuteNonQuery();
                        }
                    }

                    if (CompanyCode == "ACI-1" && transactionType.ToLower() == "other")
                    {
                        string ReceiveDateTime = DateTime.Now.ToString("MMM dd yyyy hh:mm tt");

                        string updateInvoiceDateTime = @"
update TempPurchaseData set Invoice_Date= Receive_Date ,Receive_Date = @ReceiveDate
";

                        cmd.CommandText = updateInvoiceDateTime;
                        cmd.Parameters.AddWithValue("@ReceiveDate", ReceiveDateTime);

                        cmd.ExecuteNonQuery();
                    }

                }

                #endregion

                #region TempPurchaseData HSCode updates

                string updateHSCode =
                    @"
update TempPurchaseData  set HSCode=Products.HSCodeNo from TempPurchaseData 
inner join Products on Products.ItemNo =TempPurchaseData.ItemNo 
and (TempPurchaseData.HSCode = '-' or TempPurchaseData.HSCode is null or TempPurchaseData.HSCode='NA') 

update TempPurchaseData set CPCName='NA' where CPCName='' or CPCName is null or CPCName='-'

";

                cmd.CommandText = updateHSCode;
                cmd.ExecuteNonQuery();

                #endregion

                DataTable table = new DataTable();

                cmd.CommandText = getAll;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);
                string duplicateIdss = string.Join(", ", table.Rows.OfType<DataRow>().Select(r => r[0].ToString()));
                if (table == null || table.Rows.Count <= 0)
                {
                    throw new Exception("full Invoices in table are already in system-" + duplicateIdss);
                }

                retResults = SavePurchase(table, BranchCode, transactionType, CurrentUser, branchId, currConn, transaction, callBack, connVM, UserId);

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
            }

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message;//Success or Fail
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("PurchaseDAL", "SaveTempPurchase", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        public string[] SaveToPurchaseTemp(DataTable data, string UserId, int branchId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();

                sqlText = @"delete from TempPurchaseData where UserId = '" + UserId + "'";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.ExecuteNonQuery();


                data.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = UserId });
                string[] bulkRes = commonDal.BulkInsert("TempPurchaseData", data, currConn, transaction, 1000, null, connVM);

                #region SqlText

                string updateVendorId =
                    @"update TempPurchaseData set VendorID = Vendors.VendorID from Vendors where Vendors.VendorCode = TempPurchaseData.Vendor_Code;
update TempPurchaseData set VendorID = Vendors.VendorID from Vendors where Vendors.VendorName = TempPurchaseData.Vendor_Name;";

                string updateItemNo = @"
update TempPurchaseData set ItemNo = Products.ItemNo from Products where Products.ProductCode = TempPurchaseData.Item_Code and (TempPurchaseData.ItemNo is null or TempPurchaseData.ItemNo = '0');
update TempPurchaseData set ItemNo = Products.ItemNo from Products where Products.ProductName = TempPurchaseData.Item_Name and (TempPurchaseData.ItemNo is null or TempPurchaseData.ItemNo = '0');";

                string branchUpdate = @"update TempPurchaseData set BranchId = BranchProfiles.BranchID from BranchProfiles where BranchProfiles.BranchCode = TempPurchaseData.BranchCode or BranchProfiles.IntegrationCode = TempPurchaseData.BranchCode;";
                string bom = @"update TempPurchaseData 
set BOMId = BOMRaws.BOMId 
from BOMRaws where BOMRaws.RawItemNo = TempPurchaseData.ItemNo 
and BOMRaws.effectdate<= cast(TempPurchaseData.Invoice_Date as datetime) and BOMRaws.post='Y';";


                #endregion

                cmd.CommandText = updateVendorId + " " + updateItemNo + " " + branchUpdate + " " + bom;

                cmd.ExecuteNonQuery();



                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit
                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Synchronized Successfully.";
                retResults[2] = "";
                #endregion SuccessResult
            }

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message;//Success or Fail
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseInsertToMaster", ex.ToString() + "\n" + sqlText, "Purchase");

                //////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        private string[] SavePurchase(DataTable dtTableResult, string BranchCode, string transactionType, string CurrentUser, int branchId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, Action callBack = null, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region try

            #region variables

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";


            DataTable dtPurchaseM = new DataTable();
            DataTable dtPurchaseD = new DataTable();
            DataTable dtPurchaseI = new DataTable();
            DataTable dtPurchaseT = new DataTable();

            #endregion

            try
            {


                if (!dtTableResult.Columns.Contains("BranchCode"))
                {
                    DataColumn column = new DataColumn("BranchCode") { DefaultValue = BranchCode };
                    dtTableResult.Columns.Add(column);
                }


                DataView view = new DataView(dtTableResult);
                try
                {
                    if (CurrentUser == "API" || CurrentUser.ToLower() == "Process".ToLower())
                    {
                        dtPurchaseM = view.ToTable(true, "ID", "Vendor_Name", "Vendor_Code", "Referance_No", "LC_No",
                            "BE_Number", "Invoice_Date", "Receive_Date", "Post", "With_VDS", "Previous_Purchase_No",
                            "Comments", "Custom_House", "BranchCode", "VendorID", "BranchId", "Transection_Type", "IsRebate", "RebateDate", "TDS_Amount", "TDSRate", "FileName", "CompanyCode");
                    }
                    else
                    {
                        dtPurchaseM = view.ToTable(true, "ID", "Vendor_Name", "Vendor_Code", "Referance_No", "LC_No",
                            "BE_Number", "Invoice_Date", "Receive_Date", "Post", "With_VDS", "Previous_Purchase_No",
                            "Comments", "Custom_House", "BranchCode", "VendorID", "BranchId", "IsRebate", "RebateDate", "TDS_Amount", "TDSRate", "FileName", "CompanyCode");

                        dtPurchaseM = OrdinaryVATDesktop.DtColumnAdd(dtPurchaseM, "Transection_Type", transactionType, "string");
                    }

                    dtPurchaseI = view.ToTable(false, "ID", "Item_Code", "Item_Name", "CnF_Amount", "Insurance_Amount",
                        "Assessable_Value", "CD_Amount", "RD_Amount", "AT_Amount", "SD_Amount", "VAT_Amount",
                         "Others_Amount", "AITAmount", "Remarks", "ItemNo", "ProductType", "FixedVATRebate"); //TVB_Amount "TVA_Amount",

                    dtPurchaseD = view.ToTable(false, "ID", "Item_Code", "Item_Name", "Quantity", "Total_Price", "UOM",
                        "Type", "Rebate_Rate", "SD_Amount", "VAT_Amount", "BomId", "ItemNo", "Product_Group", "ProductType", "FixedVATRebate", "HSCode", "BEItemNo", "CPCName", "OtherRef");


                    dtPurchaseM = OrdinaryVATDesktop.DtColumnAdd(dtPurchaseM, "Created_By", CurrentUser, "string");
                    dtPurchaseM = OrdinaryVATDesktop.DtColumnAdd(dtPurchaseM, "LastModified_By", CurrentUser, "string");

                }
                catch (Exception ex)
                {
                    throw ex;
                }



                dtPurchaseM = OrdinaryVATDesktop.DtDateCheck(dtPurchaseM, new string[] { "Invoice_Date", "Receive_Date" });
                //dtPurchaseD = OrdinaryVATDesktop.DtDateCheck(dtSaleD, new string[] { "" });
                retResults = ImportData(dtPurchaseM, dtPurchaseD, dtPurchaseI, dtPurchaseT, branchId, VcurrConn, Vtransaction, callBack, connVM, UserId);



            }

            #endregion

            catch (Exception ex)
            {
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "SavePurchase", ex.ToString(), "Purchase");

                throw ex;
            }
            finally
            {

            }
            return retResults;
        }

        public DataTable GetExcelData(List<string> invoiceList, bool withDuty, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDAl = new CommonDAL();

                string companyCode = commonDAl.settings("CompanyCode", "Code", currConn, transaction, connVM);


                sqlText = @"SELECT pih.[PurchaseInvoiceNo] ID
      ,bp.BranchCode 
      ,vd.VendorCode Vendor_Code
	  ,vd.VendorName Vendor_Name
	  , pih.SerialNo Referance_No 
	  ,pih.[LCNumber] 	  LC_No
	  ,pih.[BENumber]    BE_Number";


                if (companyCode == "BATA")
                {
                    sqlText += @"       ,convert(varchar(100),pih.[InvoiceDateTime],111)Invoice_Date
                                        ,convert(varchar(100),pih.[InvoiceDateTime],108) Invoice_Time
                                        ,convert(varchar(100),pih.[ReceiveDate],111) Receive_Date
                                        ,convert(varchar(100),pih.[ReceiveDate],108) Receive_Time
                                        ,convert(varchar(100),pih.[ReceiveDate],111) Rebate_Date
                                        ,convert(varchar(100),pih.[ReceiveDate],108) Rebate_Time";
                }
                else
                {
                    sqlText +=
                        @"       ,convert(varchar(100),pih.[InvoiceDateTime],111) + ' '+convert(varchar(100),pih.[InvoiceDateTime],108) Invoice_Date
      ,convert(varchar(100),pih.[ReceiveDate],111) + ' '+convert(varchar(100),pih.[ReceiveDate],108) Receive_Date
      ,convert(varchar(100),pih.[RebateDate],111) + ' '+convert(varchar(100),pih.[RebateDate],108) RebateDate
       ";
                }

                sqlText += @"


     -- ,cast(pih.[ReceiveDate] as varchar(100)) Receive_Date
      ,pih.[Post]
	  ,isnull(pih.WithVDS,'N') With_VDS
	  ,pih.PurchaseReturnId Previous_Purchase_No
      ,pih.[Comments]
      ,pih.[TransactionType] Transaction_Type
	  ,pih.CustomHouse Custom_House 
	  ,pd.ProductName Item_Name 
	  ,pd.ProductCode Item_Code 
      ,pdc.CategoryName Product_Group
	  ,pid.Quantity 
	  ,pid.subtotal Total_Price 
	  ,pid.UOM UOM
	  ,pid.Type
	  ,isnull(pid.FixedVATRebate,'Y')FixedVATRebate
	  ,pid.RebateRate Rebate_Rate
	  ,pid.SDAmount SD_Amount
	  ,pid.VATAmount VAT_Amount
	  ,pid.VDSAmount VDSAmount
	  ,pid.BEItemNo BEItemNo
	  ,pid.CPCName CPCName
	  ,pid.HSCode HSCode
   ";
                if (withDuty)
                {
                    sqlText += @",pid.CnFAmount CnF_Amount
	  ,pid.InsuranceAmount Insurance_Amount

      ,pid.AssessableValue Assessable_Value	
	  , pid.CDAmount CD_Amount
	  ,pid.RDAmount RD_Amount
	  ,pid.AITAmount
	  ,pid.ATVAmount  AT_Amount
	  ,pid.InvoiceValue  Invoice_Value
	  ,pid.ExchangeRate  Exchange_Rate
	  ,pid.Currency  
	  ,pid.OthersAmount  Others_Amount";
                }

                sqlText += @"  
	
,'-' Remarks 
,pih.IsRebate


FROM [PurchaseInvoiceHeaders] pih left outer join PurchaseInvoiceDetails pid
  on pih.PurchaseInvoiceNo = pid.PurchaseInvoiceNo left outer join BranchProfiles bp
  on pih.BranchId = bp.BranchID left outer join Vendors vd
  on pih.VendorID = vd.VendorID left outer join Products pd
  on pid.ItemNo = pd.ItemNo 
left outer join ProductCategories pdc on pdc.CategoryID = pd.CategoryID 

  where pih.PurchaseInvoiceNo in ('";

                sqlText += string.Join("','", invoiceList);


                sqlText += "')";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);


                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit

                return table;


            }

            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                ////retResults[0] = "Fail";//Success or Fail
                ////retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "GetExcelData", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
        }

        public DataTable GetExcelDataWeb(List<string> invoiceList, bool withDuty, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDAl = new CommonDAL();

                string companyCode = commonDAl.settings("CompanyCode", "Code", currConn, transaction, connVM);


                sqlText = @"SELECT pih.[PurchaseInvoiceNo] ID
      ,bp.BranchCode 
      ,vd.VendorCode Vendor_Code
	  ,vd.VendorName Vendor_Name
	  , pih.SerialNo Referance_No 
	  ,pih.[LCNumber] 	  LC_No
	  ,pih.[BENumber]    BE_Number";


                if (companyCode == "BATA")
                {
                    sqlText += @"       ,convert(varchar(100),pih.[InvoiceDateTime],111)Invoice_Date
                                        ,convert(varchar(100),pih.[InvoiceDateTime],108) Invoice_Time
                                        ,convert(varchar(100),pih.[ReceiveDate],111) Receive_Date
                                        ,convert(varchar(100),pih.[ReceiveDate],108) Receive_Time
                                        ,convert(varchar(100),pih.[ReceiveDate],111) Rebate_Date
                                        ,convert(varchar(100),pih.[ReceiveDate],108) Rebate_Time";
                }
                else
                {
                    sqlText +=
                        @"       ,convert(varchar(100),pih.[InvoiceDateTime],111) + ' '+convert(varchar(100),pih.[InvoiceDateTime],108) Invoice_Date
      ,convert(varchar(100),pih.[ReceiveDate],111) + ' '+convert(varchar(100),pih.[ReceiveDate],108) Receive_Date
      ,convert(varchar(100),pih.[RebateDate],111) + ' '+convert(varchar(100),pih.[RebateDate],108) RebateDate
       ";
                }

                sqlText += @"


     -- ,cast(pih.[ReceiveDate] as varchar(100)) Receive_Date
      ,pih.[Post]
	  ,isnull(pih.WithVDS,'N') With_VDS
	  ,pih.PurchaseReturnId Previous_Purchase_No
      ,pih.[Comments]
      ,pih.[TransactionType] Transaction_Type
	  ,pih.CustomHouse Custom_House 
	  ,pd.ProductName Item_Name 
	  ,pd.ProductCode Item_Code 
      ,pdc.CategoryName Product_Group
	  ,pid.Quantity 
	  ,pid.subtotal Total_Price 
	  ,pid.UOM UOM
	  ,pid.Type
	  ,isnull(pid.FixedVATRebate,'Y')FixedVATRebate
	  ,pid.RebateRate Rebate_Rate
	  ,pid.SDAmount SD_Amount
	  ,pid.VATAmount VAT_Amount
	  ,pid.VDSAmount VDSAmount
   ";
                if (withDuty)
                {
                    sqlText += @",pid.CnFAmount CnF_Amount
	  ,pid.InsuranceAmount Insurance_Amount

      ,pid.AssessableValue Assessable_Value	
	  , pid.CDAmount CD_Amount
	  ,pid.RDAmount RD_Amount
	  ,pid.AITAmount
	  ,pid.ATVAmount  AT_Amount
	  ,pid.InvoiceValue  Invoice_Value
	  ,pid.ExchangeRate  Exchange_Rate
	  ,pid.Currency  
	  ,pid.OthersAmount  Others_Amount";
                }

                sqlText += @"  
	
,'-' Remarks 
,pih.IsRebate
,pih.TDSRate
,pih.TDSAmount TDS_Amount



FROM [PurchaseInvoiceHeaders] pih left outer join PurchaseInvoiceDetails pid
  on pih.PurchaseInvoiceNo = pid.PurchaseInvoiceNo left outer join BranchProfiles bp
  on pih.BranchId = bp.BranchID left outer join Vendors vd
  on pih.VendorID = vd.VendorID left outer join Products pd
  on pid.ItemNo = pd.ItemNo 
left outer join ProductCategories pdc on pdc.CategoryID = pd.CategoryID 

  where pih.Id in (";

                int len = invoiceList.Count;

                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + invoiceList[i] + "'";

                    if (i != (len - 1))
                    {
                        sqlText += ",";
                    }
                }

                if (len == 0)
                {
                    sqlText += "''";
                }

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);


                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit

                return table;


            }

            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                ////retResults[0] = "Fail";//Success or Fail
                ////retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "GetExcelDataWeb", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
        }

        #endregion

        #region Unused Methods

        public string[] PurchaseUpdateToDetail(PurchaseDetailVM Detail, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Update

                sqlText = "";
                sqlText += " update PurchaseInvoiceDetails set  ";
                sqlText += "  PurchaseInvoiceNo    =@PurchaseInvoiceNo";
                //sqlText += " ,POLineNo             =@POLineNo";
                sqlText += " ,ItemNo               =@ItemNo";
                sqlText += " ,Quantity             =@Quantity";
                sqlText += " ,CostPrice            =@CostPrice";
                sqlText += " ,NBRPrice             =@NBRPrice";
                sqlText += " ,UOM                  =@UOM";
                sqlText += " ,Comments             =@Comments";
                sqlText += " ,CreatedBy            =@CreatedBy";
                sqlText += " ,CreatedOn            =@CreatedOn";
                sqlText += " ,LastModifiedBy       =@LastModifiedBy";
                sqlText += " ,LastModifiedOn       =@LastModifiedOn";
                sqlText += " ,Type                 =@Type";
                sqlText += " ,ProductType          =@ProductType";
                sqlText += " ,BENumber             =@BENumber";
                sqlText += " ,InvoiceDateTime      =@InvoiceDateTime";
                sqlText += " ,ReceiveDate          =@ReceiveDate";
                sqlText += " ,Post                 =@Post";
                sqlText += " ,UOMQty               =@UOMQty";
                sqlText += " ,UOMPrice             =@UOMPrice";
                sqlText += " ,FixedVATRebate       =@FixedVATRebate";
                sqlText += " ,UOMc                 =@UOMc";
                sqlText += " ,UOMn                 =@UOMn";
                sqlText += " ,DollerValue          =@DollerValue";
                sqlText += " ,CurrencyValue        =@CurrencyValue";
                sqlText += " ,RebateRate           =@RebateRate";
                sqlText += " ,RebateAmount         =@RebateAmount";
                sqlText += " ,SubTotal             =@SubTotal";
                sqlText += " ,CnFAmount            =@CnFAmount";
                sqlText += " ,InsuranceAmount      =@InsuranceAmount";
                sqlText += " ,AssessableValue      =@AssessableValue";
                sqlText += " ,CDAmount             =@CDAmount";
                sqlText += " ,RDAmount             =@RDAmount";
                sqlText += " ,SD                   =@SD";
                sqlText += " ,SDAmount             =@SDAmount";
                sqlText += " ,TVBAmount            =@TVBAmount";
                sqlText += " ,VATRate              =@VATRate";
                sqlText += " ,VATAmount            =@VATAmount";
                sqlText += " ,TVAAmount            =@TVAAmount";
                sqlText += " ,ATVAmount            =@ATVAmount";
                sqlText += " ,OthersAmount         =@OthersAmount";
                sqlText += " ,TransactionType      =@TransactionType";
                sqlText += " ,PurchaseReturnId     =@PurchaseReturnId";
                sqlText += " ,ReturnTransactionType=@ReturnTransactionType";
                sqlText += " ,VDSRate              =@VDSRate";
                sqlText += " ,VDSAmount            =@VDSAmount";
                sqlText += " ,USDValue             =@USDValue";
                sqlText += " ,USDVAT               =@USDVAT";
                sqlText += " ,VATableValue         =@VATableValue";
                sqlText += " where              Id=@Id";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;

                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Detail.PurchaseInvoiceNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNo", Detail.ItemNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Quantity", Detail.Quantity);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CostPrice", Detail.UnitPrice);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@NBRPrice", Detail.NBRPrice);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOM", Detail.UOM);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", Detail.Comments);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", Detail.CreatedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", OrdinaryVATDesktop.DateToDate(Detail.CreatedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Detail.LastModifiedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", OrdinaryVATDesktop.DateToDate(Detail.LastModifiedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Type", Detail.Type);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ProductType", Detail.ProductType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@BENumber", Detail.BENumber);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InvoiceDateTime", Detail.InvoiceDateTime);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReceiveDate", Detail.ReceiveDate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Post", Detail.Post);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMQty", Detail.UOMQty);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMPrice", Detail.UOMPrice);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@FixedVATRebate", Detail.FixedVATRebate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMc", Detail.UOMc);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UOMn", Detail.UOMn);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@DollerValue", Detail.DollerValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CurrencyValue", Detail.CurrencyValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RebateRate", Detail.RebateRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RebateAmount", Detail.RebateAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SubTotal", Detail.SubTotal);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CnFAmount", Detail.CnFAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InsuranceAmount", Detail.InsuranceAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@AssessableValue", Detail.AssessableValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CDAmount", Detail.CDAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RDAmount", Detail.RDAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SD", Detail.SD);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SDAmount", Detail.SDAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVBAmount", Detail.TVBAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRate", Detail.VATRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATAmount", Detail.VATAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVAAmount", Detail.TVAAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ATVAmount", Detail.ATVAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@OthersAmount", Detail.OthersAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TransactionType", Detail.TransactionType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PurchaseReturnId", Detail.ReturnId);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReturnTransactionType", Detail.ReturnTransactionType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VDSRate", Detail.VDSRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VDSAmount", Detail.VDSAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@USDValue", Detail.USDValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@USDVAT", Detail.USDVAT);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATableValue", Detail.VATableValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Id", Detail.Id);

                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header


                #region Commit


                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Detail.PurchaseInvoiceNo;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseUpdateToDetail", ex.ToString() + "\n" + sqlText, "Purchase");

                //////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                ////////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] PurchaseUpdateToDuties(PurchaseDutiesVM Duty, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Update

                sqlText = "";
                sqlText += " update PurchaseInvoiceDuties set  ";

                sqlText += "  PIDutyID                   =@PIDutyID";
                sqlText += " ,PurchaseInvoiceNo          =@PurchaseInvoiceNo";
                sqlText += " ,CnFInp                     =@CnFInp";
                sqlText += " ,CnFRate                    =@CnFRate";
                sqlText += " ,CnFAmount                  =@CnFAmount";
                sqlText += " ,InsuranceInp               =@InsuranceInp";
                sqlText += " ,InsuranceRate              =@InsuranceRate";
                sqlText += " ,InsuranceAmount            =@InsuranceAmount";
                sqlText += " ,AssessableInp              =@AssessableInp";
                sqlText += " ,AssessableValue            =@AssessableValue";
                sqlText += " ,CDInp                      =@CDInp";
                sqlText += " ,CDRate                     =@CDRate";
                sqlText += " ,CDAmount                   =@CDAmount";
                sqlText += " ,RDInp                      =@RDInp";
                sqlText += " ,RDRate                     =@RDRate";
                sqlText += " ,RDAmount                   =@RDAmount";
                sqlText += " ,TVBInp                     =@TVBInp";
                sqlText += " ,TVBRate                    =@TVBRate";
                sqlText += " ,TVBAmount                  =@TVBAmount";
                sqlText += " ,SDInp                      =@SDInp";
                sqlText += " ,SD                         =@SD";
                sqlText += " ,SDAmount                   =@SDAmount";
                sqlText += " ,VATInp                     =@VATInp";
                sqlText += " ,VATRate                    =@VATRate";
                sqlText += " ,VATAmount                  =@VATAmount";
                sqlText += " ,TVAInp                     =@TVAInp";
                sqlText += " ,TVARate                    =@TVARate";
                sqlText += " ,TVAAmount                  =@TVAAmount";
                sqlText += " ,ATVInp                     =@ATVInp";
                sqlText += " ,ATVRate                    =@ATVRate";
                sqlText += " ,ATVAmount                  =@ATVAmount";
                sqlText += " ,OthersInp                  =@OthersInp";
                sqlText += " ,OthersRate                 =@OthersRate";
                sqlText += " ,OthersAmount               =@OthersAmount";
                sqlText += " ,CreatedBy                  =@CreatedBy";
                sqlText += " ,CreatedOn                  =@CreatedOn";
                sqlText += " ,LastModifiedBy             =@LastModifiedBy";
                sqlText += " ,LastModifiedOn             =@LastModifiedOn";
                sqlText += " ,TransactionType            =@TransactionType";
                sqlText += " ,Post                       =@Post";
                sqlText += " ,Remarks                    =@Remarks";
                sqlText += " ,ItemNo                     =@ItemNo";
                sqlText += " ,DutyCompleteQuantity       =@DutyCompleteQuantity";
                sqlText += " ,DutyCompleteQuantityPercent=@DutyCompleteQuantityPercent";
                sqlText += " ,LineCost                   =@LineCost";
                sqlText += " ,UnitCost                   =@UnitCost";
                sqlText += " ,Quantity                   =@Quantity";
                sqlText += " where Id                    =@Id";


                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;

                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PIDutyID", Duty.PIDutyID);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Duty.PurchaseInvoiceNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CnFInp", Duty.CnFInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CnFRate", Duty.CnFRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CnFAmount", Duty.CnFAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InsuranceInp", Duty.InsuranceInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InsuranceRate", Duty.InsuranceRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@InsuranceAmount", Duty.InsuranceAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@AssessableInp", Duty.AssessableInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@AssessableValue", Duty.AssessableValue);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CDInp", Duty.CDInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CDRate", Duty.CDRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CDAmount", Duty.CDAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RDInp", Duty.RDInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RDRate", Duty.RDRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@RDAmount", Duty.RDAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVBInp", Duty.TVBInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVBRate", Duty.TVBRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVBAmount", Duty.TVBAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SDInp", Duty.SDInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SD", Duty.SD);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@SDAmount", Duty.SDAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATInp", Duty.VATInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRate", Duty.VATRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATAmount", Duty.VATAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVAInp", Duty.TVAInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVARate", Duty.TVARate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TVAAmount", Duty.TVAAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ATVInp", Duty.ATVInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ATVRate", Duty.ATVRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ATVAmount", Duty.ATVAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@OthersInp", Duty.OthersInp);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@OthersRate", Duty.OthersRate);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@OthersAmount", Duty.OthersAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", Duty.CreatedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", OrdinaryVATDesktop.DateToDate(Duty.CreatedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Duty.LastModifiedBy);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", OrdinaryVATDesktop.DateToDate(Duty.LastModifiedOn));
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TransactionType", Duty.TransactionType);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Post", Duty.Post);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Remarks", Duty.Remarks);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNo", Duty.ItemNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@DutyCompleteQuantity", Duty.DutyCompleteQuantity);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@DutyCompleteQuantityPercent", Duty.DutyCompleteQuantityPercent);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@LineCost", Duty.LineCost);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@UnitCost", Duty.UnitCost);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Quantity", Duty.Quantity);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@Id", Duty.Id);

                transResult = (int)cmdUpdate.ExecuteNonQuery();
                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header


                #region Commit


                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Duty.PurchaseInvoiceNo;
                retResults[3] = "" + PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall
            //catch (SqlException sqlex)
            //{
            //    if (Vtransaction == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {

                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "PurchaseUpdateToDuties", ex.ToString() + "\n" + sqlText, "Purchase");

                throw new ArgumentNullException("", ex.Message.ToString());
                //////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                ////////throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public void SetCost()
        {
            //LineCost = CnFAmount +
            //           InsuranceAmount +
            //           AssessableValue +
            //           CDAmount +
            //           RDAmount +
            //           TVBAmount +
            //           SDAmount +
            //           VATAmount +
            //           TVAAmount +
            //           ATVAmount +
            //           OthersAmount;
            //if (LineCost > 0)
            //{
            //    UnitCost = LineCost / Quantity;
            //}
        }

        public string[] PurchaseUpdateX(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, List<PurchaseDutiesVM> Duties, List<TrackingVM> Trackings, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string vProductType = "";
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            ReceiveDAL recDal = new ReceiveDAL();
            IssueDAL issDal = new IssueDAL();
            SaleDAL salDal = new SaleDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            string sqlText = "";

            string PostStatus = "";
            ProductDAL productDal = new ProductDAL();
            bool PriceDeclarationTradingProduct = false;



            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.PurchasemsgNoDataToUpdate);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, "Please Check Invoice Data and Time");

                }



                #endregion Validation for Header

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                CommonDAL commonDal = new CommonDAL();

                transaction = currConn.BeginTransaction(MessageVM.PurchasemsgMethodNameInsert);


                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);


                #endregion open connection and transaction

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, currConn);
                    cmdYearNotExist.Transaction = transaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                PriceDeclarationTradingProduct = Convert.ToBoolean(commonDal.settingValue("PriceDeclaration", "TradingProduct") == "Y" ? true : false);

                #region Find ID for Update

                sqlText = "";
                sqlText = sqlText +
                          "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterId ";
                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, currConn);
                cmdFindIdUpd.Transaction = transaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterId", Master.PurchaseInvoiceNo);

                int IDExistP = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExistP <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                    MessageVM.PurchasemsgUnableFindExistID);
                }

                #endregion Find ID for Update

                #region ID check completed,update Information in Header

                #region update Header

                string[] cFields = { "pih.PurchaseInvoiceNo" };
                string[] cvals = { Master.PurchaseInvoiceNo };

                PurchaseMasterVM pmVM = SelectAllList(0, cFields, cvals, currConn, transaction, null, connVM).FirstOrDefault();
                pmVM.VendorID = Master.VendorID;
                pmVM.InvoiceDate = Master.InvoiceDate;
                pmVM.CustomHouse = Master.CustomHouse;
                pmVM.CustomHouseCode = Master.CustomHouseCode;
                pmVM.TotalAmount = Master.TotalAmount;
                pmVM.TotalVATAmount = Master.TotalVATAmount;
                pmVM.SerialNo = Master.SerialNo;
                pmVM.LCNumber = Master.LCNumber;
                pmVM.Comments = Master.Comments;
                pmVM.LastModifiedBy = Master.LastModifiedBy;
                pmVM.LastModifiedOn = Master.LastModifiedOn;
                pmVM.BENumber = Master.BENumber;
                pmVM.ProductType = Master.ProductType;
                pmVM.TransactionType = Master.TransactionType;
                pmVM.ReceiveDate = Master.ReceiveDate;
                pmVM.Post = Master.Post;
                pmVM.WithVDS = Master.WithVDS;
                pmVM.ReturnId = Master.ReturnId;
                pmVM.LCDate = Master.LCDate;
                pmVM.USDInvoiceValue = Master.USDInvoiceValue;
                pmVM.LandedCost = Master.LandedCost;
                pmVM.TDSAmount = Master.TDSAmount;

                retResults = PurchaseUpdateToMaster(pmVM, currConn, transaction);
                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                }

                #region Comments

                //sqlText = "";

                //sqlText += " update PurchaseInvoiceHeaders set  ";
                //sqlText += " VendorID                       =  '" + Master.VendorID + "' ,";
                //sqlText += " InvoiceDateTime                = '" + Master.InvoiceDate + "' ,";
                //sqlText += " CustomHouse                    = '" + Master.CustomHouse + "' ,";
                //sqlText += " TotalAmount                    = " + Master.TotalAmount + " ,";
                //sqlText += " TotalVATAmount                 = " + Master.TotalVATAmount + " ,";
                //sqlText += " SerialNo                       = '" + Master.SerialNo + "' ,";
                //sqlText += " LCNumber                       = '" + Master.LCNumber + "' ,";
                //sqlText += " Comments                       = '" + Master.Comments + "' ,";
                //sqlText += " LastModifiedBy                 = '" + Master.LastModifiedBy + "' ,";
                //sqlText += " LastModifiedOn                 = '" + Master.LastModifiedOn + "' ,";
                //sqlText += " BENumber                       = '" + Master.BENumber + "' ,";
                //sqlText += " ProductType                    = '" + Master.ProductType + "' ,";
                //sqlText += " transactionType                = '" + Master.TransactionType + "' ,";
                //sqlText += " ReceiveDate                    = '" + Master.ReceiveDate + "' ,";
                //sqlText += " Post                           = '" + Master.Post + "', ";
                //sqlText += " WithVDS                        = '" + Master.WithVDS + "', ";
                //sqlText += " PurchaseReturnId               = '" + Master.ReturnId + "', ";
                //sqlText += " LCDate                         = '" + Master.LCDate + "', ";
                //sqlText += " USDInvoiceValue                = '" + Master.USDInvoiceValue + "', ";
                //sqlText += " LandedCost                     = '" + Master.LandedCost + "' ";

                //sqlText += " where  PurchaseInvoiceNo= '" + Master.PurchaseInvoiceNo + "' ";


                //SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                //cmdUpdate.Transaction = transaction;
                //transResult = (int)cmdUpdate.ExecuteNonQuery();
                //if (transResult <= 0)
                //{
                //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                //}
                #endregion
                #region Purchase/Receive/Issue Data

                sqlText = "";
                sqlText += @" delete FROM PurchaseInvoiceDetails WHERE PurchaseInvoiceNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM PurchaseInvoiceDuties WHERE PurchaseInvoiceNo=@PurchaseInvoiceNo ";

                sqlText += @" delete FROM ReceiveDetails WHERE ReceiveNo=@PurchaseInvoiceNo ";

                sqlText += @" delete FROM IssueDetails WHERE IssueNo=@PurchaseInvoiceNo ";
                sqlText += @" delete FROM IssueDetailBOMs WHERE IssueNo=@PurchaseInvoiceNo ";


                SqlCommand cmdDeleteDetail = new SqlCommand(sqlText, currConn);
                cmdDeleteDetail.Transaction = transaction;
                cmdDeleteDetail.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                transResult = cmdDeleteDetail.ExecuteNonQuery();


                #endregion
                #endregion update Header
                foreach (PurchaseDetailVM Item in Details.ToList())
                {
                    DataTable dtItemType = productDal.GetProductInfoByItemNo(Item.ItemNo);
                    if (dtItemType.Rows[0]["IsRaw"].ToString().ToLower() == "trading")
                    {
                        vProductType = "trading";
                    }
                }

                #region Import

                if (Master.TransactionType == "Import"
                || Master.TransactionType == "ServiceImport"
                || Master.TransactionType == "ServiceNSImport"
                || Master.TransactionType == "TradingImport"
                || Master.TransactionType == "CommercialImporter"
                || Master.TransactionType == "InputServiceImport")
                {
                    if (Duties.Count() < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.PurchasemsgNoDataToUpdateImportDyties);
                    }
                    foreach (PurchaseDutiesVM duty in Duties.ToList())
                    {
                        sqlText = "";
                        sqlText +=
                            "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceDuties WHERE PurchaseInvoiceNo=@MasterId ";
                        sqlText += " AND ItemNo=@dutyItemNo ";
                        SqlCommand cmdFindId = new SqlCommand(sqlText, currConn);
                        cmdFindId.Transaction = transaction;
                        cmdFindId.Parameters.AddWithValue("@MasterId", Master.PurchaseInvoiceNo);
                        cmdFindId.Parameters.AddWithValue("@dutyItemNo", duty.ItemNo);
                        decimal DetIDExist = (int)cmdFindId.ExecuteScalar();

                        if (DetIDExist <= 0) // insert
                        {
                            #region Insert
                            sqlText = "select isnull(max(cast(PIDutyID as int)),0)+1 FROM  PurchaseInvoiceDuties";
                            SqlCommand cmdDutyNextId = new SqlCommand(sqlText, currConn);
                            cmdDutyNextId.Transaction = transaction;
                            int nextIdD = (int)cmdDutyNextId.ExecuteScalar();
                            if (nextIdD <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                MessageVM.PurchasemsgDutyIdNotCreate);
                            }


                            sqlText = "";
                            sqlText += " insert into PurchaseInvoiceDuties";
                            sqlText += " (";
                            sqlText += " PIDutyID                                ,";
                            sqlText += " PurchaseInvoiceNo                                ,";
                            sqlText += " ItemNo                                ,";
                            sqlText += " Quantity                                ,";
                            sqlText += " DutyCompleteQuantity                                ,";
                            sqlText += " DutyCompleteQuantityPercent                                ,";
                            sqlText += " CnFInp                                ,";
                            sqlText += " CnFRate                                ,";
                            sqlText += " CnFAmount                                ,";
                            sqlText += " InsuranceInp                                ,";
                            sqlText += " InsuranceRate                                ,";
                            sqlText += " InsuranceAmount                                ,";
                            sqlText += " AssessableInp                                ,";
                            sqlText += " AssessableValue                                ,";
                            sqlText += " CDInp                                ,";
                            sqlText += " CDRate                                ,";
                            sqlText += " CDAmount                                ,";
                            sqlText += " RDInp                                ,";
                            sqlText += " RDRate                                ,";
                            sqlText += " RDAmount                                ,";
                            sqlText += " TVBInp                                ,";
                            sqlText += " TVBRate                                ,";
                            sqlText += " TVBAmount                                ,";
                            sqlText += " SDInp                                ,";
                            sqlText += " SD                                ,";
                            sqlText += " SDAmount                                ,";
                            sqlText += " VATInp                                ,";
                            sqlText += " VATRate                                ,";
                            sqlText += " VATAmount                                ,";
                            sqlText += " TVAInp                                ,";
                            sqlText += " TVARate                                ,";
                            sqlText += " TVAAmount                                ,";
                            sqlText += " ATVInp                                ,";
                            sqlText += " ATVRate                                ,";
                            sqlText += " ATVAmount                                ,";
                            sqlText += " OthersInp                                ,";
                            sqlText += " OthersRate                                ,";
                            sqlText += " OthersAmount                                ,";
                            sqlText += " UnitCost                                ,";
                            sqlText += " LineCost                                ,";
                            sqlText += " CreatedBy                                ,";
                            sqlText += " CreatedOn                                ,";
                            sqlText += " LastModifiedBy                                ,";
                            sqlText += " LastModifiedOn                                ,";
                            sqlText += " TransactionType                                ,";
                            sqlText += " Post                                ,";
                            sqlText += " Remarks";
                            sqlText += " )";
                            sqlText += " values";
                            sqlText += " (";
                            sqlText += "'" + nextIdD + "',";
                            sqlText += "@MasterPurchaseInvoiceNo,";
                            sqlText += "@dutyItemNo,";
                            sqlText += "@dutyQuantity,";
                            sqlText += "@dutyDutyCompleteQuantity,";
                            sqlText += "@dutyDutyCompleteQuantityPercent,";
                            sqlText += "@dutyCnFInp,";
                            sqlText += "@dutyCnFRate,";
                            sqlText += "@dutyCnFAmount,";
                            sqlText += "@dutyInsuranceInp,";
                            sqlText += "@dutyInsuranceRate,";
                            sqlText += "@dutyInsuranceAmount,";
                            sqlText += "@dutyAssessableInp,";
                            sqlText += "@dutyAssessableValue,";
                            sqlText += "@dutyCDInp,";
                            sqlText += "@dutyCDRate,";
                            sqlText += "@dutyCDAmount,";
                            sqlText += "@dutyRDInp,";
                            sqlText += "@dutyRDRate,";
                            sqlText += "@dutyRDAmount,";
                            sqlText += "@dutyTVBInp,";
                            sqlText += "@dutyTVBRate,";
                            sqlText += "@dutyTVBAmount,";
                            sqlText += "@dutySDInp,";
                            sqlText += "@dutySD,";
                            sqlText += "@dutySDAmount,";
                            sqlText += "@dutyVATInp,";
                            sqlText += "@dutyVATRate,";
                            sqlText += "@dutyVATAmount,";
                            sqlText += "@dutyTVAInp,";
                            sqlText += "@dutyTVARate,";
                            sqlText += "@dutyTVAAmount,";
                            sqlText += "@dutyATVInp,";
                            sqlText += "@dutyATVRate,";
                            sqlText += "@dutyATVAmount,";
                            sqlText += "@dutyOthersInp,";
                            sqlText += "@dutyOthersRate,";
                            sqlText += "@dutyOthersAmount,";
                            sqlText += "@dutyUnitCost,";
                            sqlText += "@dutyLineCost,";
                            sqlText += "@MasterCreatedBy,";
                            sqlText += "@MasterCreatedOn,";
                            sqlText += "@MasterLastModifiedBy,";
                            sqlText += "@MasterLastModifiedOn,";
                            sqlText += "@MasterTransactionType,";
                            sqlText += "@MasterPost,";
                            sqlText += "'" + duty.Remarks + "'";
                            sqlText += ")";


                            SqlCommand cmdInsertDuty = new SqlCommand(sqlText, currConn);
                            cmdInsertDuty.Transaction = transaction;
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyItemNo", duty.ItemNo);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyQuantity", duty.Quantity);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyDutyCompleteQuantity", duty.DutyCompleteQuantity);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyDutyCompleteQuantityPercent", duty.DutyCompleteQuantityPercent);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyCnFInp", duty.CnFInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyCnFRate", duty.CnFRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyCnFAmount", duty.CnFAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyInsuranceInp", duty.InsuranceInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyInsuranceRate", duty.InsuranceRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyInsuranceAmount", duty.InsuranceAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyAssessableInp", duty.AssessableInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyAssessableValue", duty.AssessableValue);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyCDInp", duty.CDInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyCDRate", duty.CDRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyCDAmount", duty.CDAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyRDInp", duty.RDInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyRDRate", duty.RDRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyRDAmount", duty.RDAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyTVBInp", duty.TVBInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyTVBRate", duty.TVBRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyTVBAmount", duty.TVBAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutySDInp", duty.SDInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutySD", duty.SD);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutySDAmount", duty.SDAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyVATInp", duty.VATInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyVATRate", duty.VATRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyVATAmount", duty.VATAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyTVAInp", duty.TVAInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyTVARate", duty.TVARate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyTVAAmount", duty.TVAAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyATVInp", duty.ATVInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyATVRate", duty.ATVRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyATVAmount", duty.ATVAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyOthersInp", duty.OthersInp);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyOthersRate", duty.OthersRate);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyOthersAmount", duty.OthersAmount);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyUnitCost", duty.UnitCost);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@dutyLineCost", duty.LineCost);

                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@MasterCreatedBy", Master.CreatedBy);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@MasterCreatedOn", OrdinaryVATDesktop.DateToDate(Master.CreatedOn));
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", OrdinaryVATDesktop.DateToDate(Master.LastModifiedOn));
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@MasterTransactionType", Master.TransactionType);
                            cmdInsertDuty.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);

                            transResult = (int)cmdInsertDuty.ExecuteNonQuery();
                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                MessageVM.PurchasemsgSaveNotSuccessfully);
                            }
                            #endregion Insert

                        }
                        else // update
                        {
                            #region update Duties

                            sqlText = "";

                            sqlText += " update PurchaseInvoiceDuties set  ";
                            sqlText += " DutyCompleteQuantity           = @dutyQuantity, ";
                            sqlText += " CnFInp                         = @dutyCnFInp, ";
                            sqlText += " CnFRate                        = @dutyCnFRate, ";
                            sqlText += " CnFAmount                      = @dutyCnFAmount, ";
                            sqlText += " InsuranceInp                   = @dutyInsuranceInp, ";
                            sqlText += " InsuranceRate                  = @dutyInsuranceRate, ";
                            sqlText += " InsuranceAmount                = @dutyInsuranceAmount, ";
                            sqlText += " AssessableInp                  = @dutyAssessableInp, ";
                            sqlText += " AssessableValue                = @dutyAssessableValue, ";
                            sqlText += " CDInp                          = @dutyCDInp, ";
                            sqlText += " CDRate                         = @dutyCDRate, ";
                            sqlText += " CDAmount                       = @dutyCDAmount, ";
                            sqlText += " RDInp                          = @dutyRDInp, ";
                            sqlText += " RDRate                         = @dutyRDRate, ";
                            sqlText += " RDAmount                       = @dutyRDAmount, ";
                            sqlText += " TVBInp                         = @dutyTVBInp, ";
                            sqlText += " TVBRate                        = @dutyTVBRate, ";
                            sqlText += " TVBAmount                      = @dutyTVBAmount, ";
                            sqlText += " SDInp                          = @dutySDInp, ";
                            sqlText += " SD                             = @dutySD, ";
                            sqlText += " SDAmount                       = @dutySDAmount, ";
                            sqlText += " VATInp                         = @dutyVATInp, ";
                            sqlText += " VATRate                        = @dutyVATRate, ";
                            sqlText += " VATAmount                      = @dutyVATAmount, ";
                            sqlText += " TVAInp                         = @dutyTVAInp, ";
                            sqlText += " TVARate                        = @dutyTVARate, ";
                            sqlText += " TVAAmount                      = @dutyTVAAmount, ";
                            sqlText += " ATVInp                         = @dutyATVInp, ";
                            sqlText += " ATVRate                        = @dutyATVRate, ";
                            sqlText += " ATVAmount                      = @dutyATVAmount, ";
                            sqlText += " OthersInp                      = @dutyOthersInp, ";
                            sqlText += " OthersRate                     = @dutyOthersRate, ";
                            sqlText += " OthersAmount                   = @dutyOthersAmount, ";
                            sqlText += " CreatedBy                      = @MasterCreatedBy, ";
                            sqlText += " CreatedOn                      = @MasterCreatedOn, ";
                            sqlText += " LastModifiedBy                 = @MasterLastModifiedBy, ";
                            sqlText += " LastModifiedOn                 = @MasterLastModifiedOn, ";
                            sqlText += " TransactionType                = @MasterTransactionType, ";
                            sqlText += " Post                           = @MasterPost, ";

                            sqlText += " Remarks                        = @dutyRemarks ";
                            sqlText += " where  PurchaseInvoiceNo= @MasterPurchaseInvoiceNo";

                            sqlText += " and   ItemNo=@dutyItemNo ";


                            SqlCommand cmdUpdateDuty = new SqlCommand(sqlText, currConn);
                            cmdUpdateDuty.Transaction = transaction;

                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyQuantity", duty.Quantity);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyCnFInp", duty.CnFInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyCnFRate", duty.CnFRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyCnFAmount", duty.CnFAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyInsuranceInp", duty.InsuranceInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyInsuranceRate", duty.InsuranceRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyInsuranceAmount", duty.InsuranceAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyAssessableInp", duty.AssessableInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyAssessableValue", duty.AssessableValue);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyCDInp", duty.CDInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyCDRate", duty.CDRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyCDAmount", duty.CDAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyRDInp", duty.RDInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyRDRate", duty.RDRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyRDAmount", duty.RDAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyTVBInp", duty.TVBInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyTVBRate", duty.TVBRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyTVBAmount", duty.TVBAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutySDInp", duty.SDInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutySD", duty.SD);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutySDAmount", duty.SDAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyVATInp", duty.VATInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyVATRate", duty.VATRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyVATAmount", duty.VATAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyTVAInp", duty.TVAInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyTVARate", duty.TVARate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyTVAAmount", duty.TVAAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyATVInp", duty.ATVInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyATVRate", duty.ATVRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyATVAmount", duty.ATVAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyOthersInp", duty.OthersInp);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyOthersRate", duty.OthersRate);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyOthersAmount", duty.OthersAmount);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyRemarks", duty.Remarks);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@dutyItemNo", duty.ItemNo);

                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@MasterCreatedBy", Master.CreatedBy);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@MasterCreatedOn", Master.CreatedOn);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@MasterTransactionType", Master.TransactionType);
                            cmdUpdateDuty.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);

                            transResult = (int)cmdUpdateDuty.ExecuteNonQuery();
                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                            }

                            #endregion update Duties
                        }
                    }


                }

                #endregion Import

                #region vProductType == "trading"

                if (vProductType.ToLower() == "trading" && PriceDeclarationTradingProduct == true)
                {
                    #region update Receive

                    cFields = new string[] { "rh.ReceiveNo" };
                    string[] cVals = new string[] { Master.PurchaseInvoiceNo };

                    ReceiveMasterVM rmVM = recDal.SelectAllList(0, cFields, cvals, currConn, transaction, null).FirstOrDefault();
                    rmVM.ReceiveDateTime = Master.ReceiveDate;
                    rmVM.Comments = Master.Comments;
                    rmVM.LastModifiedBy = Master.LastModifiedBy;
                    rmVM.LastModifiedOn = Master.LastModifiedOn;
                    rmVM.transactionType = Master.TransactionType;
                    rmVM.ReturnId = Master.ReturnId;
                    rmVM.Post = Master.Post;
                    retResults = recDal.ReceiveUpdateToMaster(rmVM, currConn, transaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                    }

                    //sqlText = "";

                    //sqlText += " update ReceiveHeaders set";
                    //sqlText += " ReceiveDateTime                = '" + Master.ReceiveDate + "' ,";
                    //sqlText += " Comments                       = '" + Master.Comments + "' ,";
                    //sqlText += " LastModifiedBy                 = '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn                 = '" + Master.LastModifiedOn + "' ,";
                    //sqlText += " transactionType                = '" + Master.TransactionType + "' ,";
                    //sqlText += " ReceiveReturnId                = '" + Master.ReturnId + "' ,";
                    //sqlText += " Post                           = '" + Master.Post + "' ";
                    //sqlText += " where  ReceiveNo = '" + Master.PurchaseInvoiceNo + "'";

                    //SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, currConn);
                    //cmdUpdateReceive.Transaction = transaction;
                    //transResult = (int)cmdUpdateReceive.ExecuteNonQuery();

                    if (retResults[0] != "Success")
                    {
                        //if (transResult <= 0)
                        //{
                        #region Insert to ReceiveHeaders
                        rmVM = new ReceiveMasterVM();
                        rmVM.ReceiveNo = Master.PurchaseInvoiceNo;
                        rmVM.ReceiveDateTime = Master.ReceiveDate;
                        rmVM.TotalAmount = 0;
                        rmVM.TotalVATAmount = 0;
                        rmVM.SerialNo = Master.PurchaseInvoiceNo;
                        rmVM.Comments = Master.Comments;
                        rmVM.CreatedBy = Master.CreatedBy;
                        rmVM.CreatedOn = Master.CreatedOn;
                        rmVM.LastModifiedBy = Master.LastModifiedBy;
                        rmVM.LastModifiedOn = Master.LastModifiedOn;
                        rmVM.transactionType = Master.TransactionType;
                        rmVM.ReturnId = Master.ReturnId;
                        rmVM.Post = Master.Post;

                        retResults = recDal.ReceiveInsertToMaster(rmVM, currConn, transaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }

                        #region Comments

                        //sqlText = "";
                        //sqlText += " insert into ReceiveHeaders(";
                        ////sqlText += " IssueNo,";

                        //sqlText += " ReceiveNo                                   ,";
                        //sqlText += " ReceiveDateTime                                   ,";
                        //sqlText += " TotalAmount                                   ,";
                        //sqlText += " TotalVATAmount                                   ,";
                        //sqlText += " SerialNo                                   ,";
                        //sqlText += " Comments                                   ,";
                        //sqlText += " CreatedBy                                   ,";
                        //sqlText += " CreatedOn                                   ,";
                        //sqlText += " LastModifiedBy                                   ,";
                        //sqlText += " LastModifiedOn                                   ,";
                        //sqlText += " transactionType                                   ,";
                        //sqlText += " ReceiveReturnId                                   ,";
                        //sqlText += " Post                               ";

                        ////sqlText += " Post";
                        //sqlText += " )";
                        //sqlText += " values(";
                        //sqlText += "'" + Master.PurchaseInvoiceNo + "',";
                        //sqlText += "'" + Master.ReceiveDate + "',";
                        //sqlText += "0,";
                        //sqlText += "0,";
                        //sqlText += "'" + Master.PurchaseInvoiceNo + "',";
                        //sqlText += "'" + Master.Comments + "',";
                        //sqlText += "'" + Master.CreatedBy + "',";
                        //sqlText += "'" + Master.CreatedOn + "',";
                        //sqlText += "'" + Master.LastModifiedBy + "',";
                        //sqlText += "'" + Master.LastModifiedOn + "',";
                        //sqlText += "'" + Master.TransactionType + "',";
                        //sqlText += "'" + Master.ReturnId + "',";
                        //sqlText += "'" + Master.Post + "'";

                        ////sqlText += "'" + Master.@Post + "'";
                        //sqlText += ")	";

                        //SqlCommand cmdInsertReceive = new SqlCommand(sqlText, currConn);
                        //cmdInsertReceive.Transaction = transaction;
                        //transResult = (int)cmdInsertReceive.ExecuteNonQuery();
                        //if (transResult <= 0)
                        //{
                        //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                        //                                    MessageVM.PurchasemsgUnableToSaveReceive);
                        //}
                        #endregion

                        #endregion Insert to Receive Header

                        //throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                        //                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                    }
                    else
                    {
                        sqlText = "";
                        sqlText += " delete FROM ReceiveDetails ";
                        sqlText += " WHERE ReceiveNo=@MasterPurchaseInvoiceNo ";

                        //sqlText += " delete FROM IssueHeaders ";
                        //sqlText += " WHERE IssueNo='" + Master.PurchaseInvoiceNo + "' ";
                        SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        cmdInsDetail.Transaction = transaction;
                        cmdInsDetail.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                        transResult = (int)cmdInsDetail.ExecuteNonQuery();
                    }
                    #endregion update Receive
                }
                #endregion vProductType == "trading"

                #region Transaction Not Other

                #region Transaction is TollReceive


                if (Master.TransactionType == "TollReceive")
                {

                    #region update Issue
                    cFields = new string[] { "IssueNo" };
                    string[] cVals = new string[] { Master.PurchaseInvoiceNo };
                    IssueMasterVM imVm = issDal.SelectAllList(0, cFields, cvals, currConn, transaction, null, connVM).FirstOrDefault();
                    imVm.IssueDateTime = Master.ReceiveDate;
                    imVm.Comments = Master.Comments;
                    imVm.LastModifiedBy = Master.LastModifiedBy;
                    imVm.LastModifiedOn = Master.LastModifiedOn;
                    imVm.transactionType = Master.TransactionType;
                    imVm.ReturnId = Master.ReturnId;
                    imVm.Post = Master.Post;

                    retResults = issDal.IssueUpdateToMaster(imVm, currConn, transaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                    }

                    #region Comments

                    //sqlText = "";


                    //sqlText += " update IssueHeaders set ";
                    //sqlText += " IssueDateTime              ='" + Master.ReceiveDate + "',";
                    //sqlText += " Comments                   = '" + Master.Comments + "' ,";
                    //sqlText += " LastModifiedBy             = '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn             = '" + Master.LastModifiedOn + "',";
                    //sqlText += " transactionType            = '" + Master.TransactionType + "' ,";
                    //sqlText += " IssueReturnId              = '" + Master.ReturnId + "' ,";
                    //sqlText += " Post                       = '" + Master.Post + "' ";
                    //sqlText += " where  IssueNo= '" + Master.PurchaseInvoiceNo + "' ";


                    //SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                    //cmdUpdateIssue.Transaction = transaction;
                    //transResult = (int)cmdUpdateIssue.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}
                    #endregion

                    #endregion update Issue

                    #region update Receive

                    cFields = new string[] { "rh.ReceiveNo" };
                    cVals = new string[] { Master.PurchaseInvoiceNo };

                    ReceiveMasterVM rmVm = recDal.SelectAllList(0, cFields, cvals, currConn, transaction, null).FirstOrDefault();
                    rmVm.ReceiveDateTime = Master.ReceiveDate;
                    rmVm.Comments = Master.Comments;
                    rmVm.LastModifiedBy = Master.LastModifiedBy;
                    rmVm.LastModifiedOn = Master.LastModifiedOn;
                    rmVm.transactionType = Master.TransactionType;
                    rmVm.ReturnId = Master.ReturnId;
                    rmVm.Post = Master.Post;

                    retResults = recDal.ReceiveUpdateToMaster(rmVm, currConn, transaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                    }

                    #region Comments

                    //sqlText = "";

                    //sqlText += " update ReceiveHeaders set";
                    //sqlText += " ReceiveDateTime                = '" + Master.ReceiveDate + "' ,";
                    //sqlText += " Comments                       = '" + Master.Comments + "' ,";
                    //sqlText += " LastModifiedBy                 = '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn                 = '" + Master.LastModifiedOn + "' ,";
                    //sqlText += " transactionType                = '" + Master.TransactionType + "' ,";
                    //sqlText += " ReceiveReturnId                = '" + Master.ReturnId + "' ,";
                    //sqlText += " Post                           = '" + Master.Post + "' ";
                    //sqlText += " where  ReceiveNo = '" + Master.PurchaseInvoiceNo + "'";




                    //SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, currConn);
                    //cmdUpdateReceive.Transaction = transaction;
                    //transResult = (int)cmdUpdateReceive.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}
                    #endregion

                    #endregion update Receive
                }

                #endregion Transaction is TollReceive

                #region Transaction is InputService

                if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport")
                {
                    #region update Issue
                    cFields = new string[] { "IssueNo" };
                    cvals = new string[] { Master.PurchaseInvoiceNo };
                    IssueMasterVM imVm = issDal.SelectAllList(0, cFields, cvals, currConn, transaction, null, connVM).FirstOrDefault();
                    imVm.IssueDateTime = Master.ReceiveDate;
                    imVm.Comments = Master.Comments;
                    imVm.LastModifiedBy = Master.LastModifiedBy;
                    imVm.LastModifiedOn = Master.LastModifiedOn;
                    imVm.ReturnId = Master.ReturnId;
                    imVm.transactionType = Master.TransactionType;
                    imVm.Post = Master.Post;

                    retResults = issDal.IssueUpdateToMaster(imVm, currConn, transaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                    }

                    #region Comments

                    //sqlText = "";

                    //sqlText += " update IssueHeaders set ";
                    //sqlText += " IssueDateTime              ='" + Master.ReceiveDate + "',";
                    //sqlText += " Comments                   = '" + Master.Comments + "' ,";
                    //sqlText += " LastModifiedBy             = '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn             = '" + Master.LastModifiedOn + "',";
                    //sqlText += " IssueReturnId              = '" + Master.ReturnId + "' ,";
                    //sqlText += " transactionType            = '" + Master.TransactionType + "' ,";
                    //sqlText += " Post                       = '" + Master.Post + "' ";
                    //sqlText += " where  IssueNo= '" + Master.PurchaseInvoiceNo + "' ";


                    //SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                    //cmdUpdateIssue.Transaction = transaction;
                    //transResult = (int)cmdUpdateIssue.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}
                    #endregion

                    #endregion update Issue

                }

                #endregion Transaction is InputService

                #endregion Transaction Not Other


                #endregion ID check completed,update Information in Header

                #region Update into Details(Update complete in Header)

                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.PurchasemsgNoDataToUpdate);
                }


                #endregion Validation for Detail

                #region Delete Existing Detail Data




                #endregion

                #region Update Detail Table

                foreach (PurchaseDetailVM Item in Details.ToList())
                {
                    ////

                    if (Master.TransactionType == "TollReceive")
                    {
                        sqlText = "";
                        sqlText += " delete FROM IssueDetails ";
                        sqlText += " WHERE IssueNo=@MasterPurchaseInvoiceNo ";

                        //sqlText += " delete FROM IssueHeaders ";
                        //sqlText += " WHERE IssueNo='" + Master.PurchaseInvoiceNo + "' ";
                        SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        cmdInsDetail.Transaction = transaction;
                        cmdInsDetail.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                        transResult = (int)cmdInsDetail.ExecuteNonQuery();
                        #region MyRegion
                        ProductDAL bdal1 = new ProductDAL();
                        string BOMId = bdal1.GetBOMIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate, currConn, transaction);
                        //sss
                        sqlText = "";
                        sqlText +=
                            " SELECT  b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ," +
                            "b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty,b.TransactionType from BOMRaws b  ";
                        sqlText += " where ";
                        sqlText += " BOMId='" + BOMId + "' ";
                        //sqlText += "   and (rawitemtype='raw' or rawitemtype='pack' or rawitemtype='finish') ";
                        sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";



                        DataTable dataTable = new DataTable("RIFB");
                        SqlCommand cmdRIFB = new SqlCommand(sqlText, currConn);
                        cmdRIFB.Transaction = transaction;
                        SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                        reportDataAdapt.Fill(dataTable);

                        if (dataTable == null)
                        {
                            if (TollReceiveWithIssue)
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                            MessageVM.receiveMsgNoDataToPost);
                        }
                        else if (dataTable.Rows.Count <= 0)
                        {
                            if (TollReceiveWithIssue)
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                            "There is no Item for Auto Consumption for the Item Name (VAT 4.3 (Toll Receive)) in price declaration.");
                        }
                        else
                        {
                            decimal vQuantity = 0;
                            decimal vWastage = 0;
                            decimal vStock = 0;
                            string rwUom = "";
                            decimal vConvertionRate = 0;
                            decimal AvgRate = 0;

                            foreach (DataRow BRItem in dataTable.Rows)
                            {
                                #region Declare

                                decimal v1Quantity = 0;
                                string v1RawItemNo = "";
                                decimal v1CostPrice = 0;
                                string v1UOM = "";
                                decimal v1SubTotal = 0;
                                decimal v1Wastage = 0;
                                DateTime v1BOMDate = DateTime.Now.Date;
                                string v1FinishItemNo = "";

                                decimal v1UOMQty = 0;
                                decimal v1UOMPrice = 0;
                                decimal v1UOMc = 0;
                                string v1UOMn = "";
                                string v1BOMId = "";
                                decimal v1UOMWastage = 0;
                                string vTransactionType = "";

                                #endregion Declare

                                #region Update Item Qty

                                #region Find Quantity From Products

                                DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDate, currConn, transaction, false);

                                decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                if (quantity > 0)
                                {
                                    AvgRate = amount / quantity;
                                }
                                else
                                {
                                    AvgRate = 0;
                                }

                                vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                #region Issue Settings
                                //CommonDAL commDal = new CommonDAL();
                                //int IssuePlaceQty = Convert.ToInt32(commDal.settings("Issue", "Quantity"));
                                //int IssuePlaceAmt = Convert.ToInt32(commDal.settings("Issue", "Amount"));
                                AvgRate = FormatingNumeric(AvgRate, 4);
                                vQuantity = FormatingNumeric(vQuantity, 4);
                                vWastage = FormatingNumeric(vWastage, 4);
                                #endregion Issue Settings

                                rwUom = BRItem["Uom"].ToString();

                                string rwMajorUom = BRItem["Uomn"].ToString();
                                if (string.IsNullOrEmpty(rwUom))
                                {
                                    throw new ArgumentNullException("ReceiveInsert",
                                                                    "Could not find UOM of raw item");
                                }

                                /*Processing UOM*/

                                UOMDAL uomdal = new UOMDAL();
                                vConvertionRate = uomdal.GetConvertionRate(rwMajorUom, rwUom, "Y", currConn, transaction); //uomc


                                #region valueAssign

                                v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                v1Wastage = (vWastage) * Item.UOMQty;
                                v1BOMId = BOMId;
                                v1RawItemNo = BRItem["RawItemNo"].ToString();
                                v1UOM = BRItem["UOM"].ToString();
                                v1CostPrice = AvgRate * vConvertionRate;
                                v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                v1UOMPrice = AvgRate;
                                v1UOMn = BRItem["UOMn"].ToString();
                                v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                v1FinishItemNo = Item.ItemNo;
                                v1UOMc = vConvertionRate;
                                v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                vTransactionType = BRItem["TransactionType"].ToString();
                                #endregion valueAssign

                                #region Stock
                                string vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                                bool NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                                if (NegStockAllow == false)
                                {
                                    //var stock = productDal.StockInHand(BRItem["RawItemNo"].ToString(),
                                    //                                       Master.ReceiveDateTime,
                                    //                                   currConn, transaction).ToString();

                                    decimal stock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                           Master.ReceiveDate,
                                                         currConn, transaction, false).Rows[0]["Quantity"].ToString());

                                    vStock = Convert.ToDecimal(stock);


                                    if ((vStock - v1UOMQty) < 0)
                                    {
                                        string FinName = string.Empty;
                                        string FinCode = string.Empty;
                                        string RawName = string.Empty;
                                        string RawCode = string.Empty;
                                        DataTable finDt = new DataTable();
                                        finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                        foreach (DataRow FinItem in finDt.Rows)
                                        {
                                            FinName = FinItem["ProductName"].ToString();
                                            FinCode = FinItem["ProductCode"].ToString();
                                        }
                                        DataTable rawDt = new DataTable();
                                        rawDt =
                                            productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                        foreach (DataRow RawItem in rawDt.Rows)
                                        {
                                            RawName = RawItem["ProductName"].ToString();
                                            RawCode = RawItem["ProductCode"].ToString();
                                        }

                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Stock not Available for Finish Item( Name: " +
                                                                        FinName + " & Code: " + FinCode +
                                                                        " ) \n and consumtion Material ( Name: " +
                                                                        RawName + " & Code: " + RawCode + " )");
                                    }
                                }

                                #endregion Stock

                                #endregion Find Quantity From Products


                                #region Find Quantity From Transaction


                                #region Insert to Issue
                                IssueDetailVM idVm = new IssueDetailVM();

                                idVm.BOMId = Item.BOMId;
                                idVm.IssueNo = Master.PurchaseInvoiceNo;
                                idVm.IssueLineNo = Item.LineNo;
                                idVm.ItemNo = v1RawItemNo;
                                idVm.Quantity = FormatingNumeric(v1Quantity, 4);
                                idVm.NBRPrice = AvgRate;

                                idVm.CostPrice = FormatingNumeric(v1CostPrice, 4);
                                idVm.UOM = v1UOM;
                                idVm.VATRate = 0;
                                idVm.VATAmount = 0;
                                idVm.SubTotal = FormatingNumeric(v1SubTotal, 4);


                                idVm.CommentsD = Item.Comments;
                                idVm.CreatedBy = Master.CreatedBy;
                                idVm.CreatedOn = Master.CreatedOn;
                                idVm.LastModifiedBy = Master.LastModifiedBy;
                                idVm.LastModifiedOn = Master.LastModifiedOn;
                                idVm.ReceiveNo = Master.PurchaseInvoiceNo;
                                idVm.IssueDateTime = Master.ReceiveDate;
                                idVm.SD = 0;
                                idVm.SDAmount = 0;
                                idVm.Wastage = v1Wastage;
                                idVm.BOMDate = Convert.ToDateTime(v1BOMDate).ToString("MM/dd/yyyy");
                                idVm.FinishItemNo = v1FinishItemNo;
                                idVm.transactionType = Master.TransactionType;
                                idVm.IssueReturnId = Master.ReturnId;
                                idVm.UOMQty = FormatingNumeric(v1UOMQty, 4);
                                idVm.UOMPrice = FormatingNumeric(v1UOMPrice, 4);
                                idVm.UOMc = v1UOMc;
                                idVm.UOMn = v1UOMn;
                                idVm.UOMWastage = v1UOMWastage;
                                idVm.Post = Master.Post;

                                retResults = issDal.IssueInsertToDetails(idVm, currConn, transaction);

                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                                }

                                #endregion Insert to Issue




                                #region Update Issue

                                sqlText = "";
                                sqlText += " update IssueHeaders set ";
                                sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                sqlText += " where (IssueHeaders.IssueNo=@MasterPurchaseInvoiceNo)";

                                SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                                cmdUpdateIssue.Transaction = transaction;
                                cmdUpdateIssue.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                                transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                    MessageVM.receiveMsgUnableToSaveIssue);
                                }

                                #endregion Update Issue

                                #endregion Qty  check and Update

                                #endregion Qty  check and Update
                            }
                        }
                        #endregion


                    }

                    #region Find Transaction Mode Insert or Update

                    #region Will be Commented Soon

                    //////if (false)
                    //////{

                    //////    sqlText = "";
                    //////    sqlText +=
                    //////        "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceDetails WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo ";
                    //////    sqlText += " AND ItemNo=@ItemItemNo";
                    //////    SqlCommand cmdFindId = new SqlCommand(sqlText, currConn);
                    //////    cmdFindId.Transaction = transaction;
                    //////    cmdFindId.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    //////    cmdFindId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                    //////    decimal DetIDExist = (int)cmdFindId.ExecuteScalar();
                    //////}

                    #endregion


                    // Insert

                    #region Insert only DetailTable
                    PurchaseDetailVM pdVm = new PurchaseDetailVM();

                    pdVm.BOMId = Item.BOMId;
                    pdVm.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                    pdVm.LineNo = Item.LineNo;
                    pdVm.ItemNo = Item.ItemNo;
                    pdVm.Quantity = Item.Quantity;
                    pdVm.UnitPrice = Item.UnitPrice;
                    pdVm.NBRPrice = Item.NBRPrice;
                    pdVm.UOM = Item.UOM;
                    pdVm.VATRate = Item.VATRate;
                    pdVm.VATAmount = Item.VATAmount;
                    pdVm.SubTotal = Item.SubTotal;
                    pdVm.Comments = Item.Comments;
                    pdVm.CreatedBy = Master.CreatedBy;
                    pdVm.CreatedOn = Master.CreatedOn;
                    pdVm.LastModifiedBy = Master.LastModifiedBy;
                    pdVm.LastModifiedOn = Master.LastModifiedOn;
                    pdVm.SD = Item.SD;
                    pdVm.SDAmount = Item.SDAmount;
                    pdVm.Type = Item.Type;
                    pdVm.ProductType = Item.ProductType;
                    pdVm.BENumber = Item.BENumber;
                    pdVm.InvoiceDateTime = Master.InvoiceDate;
                    pdVm.ReceiveDate = Master.ReceiveDate;
                    pdVm.Post = Master.Post;
                    pdVm.UOMQty = Item.UOMQty;
                    pdVm.UOMPrice = Item.UOMPrice;
                    pdVm.UOMc = Item.UOMc;
                    pdVm.UOMn = Item.UOMn;
                    pdVm.RebateRate = Item.RebateRate;
                    pdVm.RebateAmount = Item.RebateAmount;
                    pdVm.CnFAmount = Item.CnFAmount;
                    pdVm.InsuranceAmount = Item.InsuranceAmount;
                    pdVm.AssessableValue = Item.AssessableValue;
                    pdVm.CDAmount = Item.CDAmount;
                    pdVm.RDAmount = Item.RDAmount;
                    pdVm.TVBAmount = Item.TVBAmount;
                    pdVm.TVAAmount = Item.TVAAmount;
                    pdVm.ATVAmount = Item.ATVAmount;
                    pdVm.VDSRate = Item.VDSRate;
                    pdVm.VDSAmount = Item.VDSAmount;
                    pdVm.USDValue = Item.USDValue;
                    pdVm.USDVAT = Item.USDVAT;
                    pdVm.TDSCode = Item.TDSCode;
                    pdVm.TDSSection = Item.TDSSection;
                    pdVm.TransactionType = Master.TransactionType;
                    pdVm.ReturnId = Master.ReturnId;
                    pdVm.OthersAmount = Item.OthersAmount;
                    if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                    {
                        pdVm.ReturnTransactionType = Item.ReturnTransactionType;
                    }
                    pdVm.BranchId = Master.BranchId;
                    retResults = PurchaseInsertToDetail(pdVm, currConn, transaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                    }

                    #region Comments

                    //sqlText = "";
                    //sqlText += " insert into PurchaseInvoiceDetails(";
                    //sqlText += " PurchaseInvoiceNo                                   ,";
                    //sqlText += " POLineNo                                   ,";
                    //sqlText += " ItemNo                                   ,";
                    //sqlText += " Quantity                                   ,";
                    //sqlText += " CostPrice                                   ,";
                    //sqlText += " NBRPrice                                   ,";
                    //sqlText += " UOM                                   ,";
                    //sqlText += " VATRate                                   ,";
                    //sqlText += " VATAmount                                   ,";
                    //sqlText += " SubTotal                                   ,";
                    //sqlText += " Comments                                   ,";
                    //sqlText += " CreatedBy                                   ,";
                    //sqlText += " CreatedOn                                   ,";
                    //sqlText += " LastModifiedBy                                   ,";
                    //sqlText += " LastModifiedOn                                   ,";
                    //sqlText += " SD                                   ,";
                    //sqlText += " SDAmount                                   ,";
                    //sqlText += " Type                                   ,";
                    //sqlText += " ProductType                                   ,";
                    //sqlText += " BENumber                                   ,";
                    //sqlText += " InvoiceDateTime                                   ,";
                    //sqlText += " ReceiveDate                                   ,";
                    //sqlText += " Post                                   ,";
                    //sqlText += " UOMQty                                   ,";
                    //sqlText += " UOMPrice                                   ,";
                    //sqlText += " UOMc                                   ,";
                    //sqlText += " UOMn                                   ,";
                    //sqlText += " RebateRate                                    ,";
                    //sqlText += " RebateAmount                                    ,";
                    //sqlText += " CnFAmount                                    ,";
                    //sqlText += " InsuranceAmount                                    ,";
                    //sqlText += " AssessableValue                                    ,";
                    //sqlText += " CDAmount                                    ,";
                    //sqlText += " RDAmount                                    ,";
                    //sqlText += " TVBAmount                                    ,";
                    //sqlText += " TVAAmount                                    ,";
                    //sqlText += " ATVAmount                                    ,";
                    //sqlText += " VDSRate                                    ,";
                    //sqlText += " VDSAmount                                    ,";
                    //sqlText += " USDValue                                    ,";
                    //sqlText += " USDVAT                                    ,";
                    //sqlText += " TransactionType                                    ,";
                    //sqlText += " PurchaseReturnId                                    ,";
                    //sqlText += " OthersAmount                           ";
                    //if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                    //{
                    //    sqlText += ", ReturnTransactionType ";
                    //}

                    //sqlText += " )";
                    //sqlText += " values(	";
                    //sqlText += "'" + Master.PurchaseInvoiceNo + "',";
                    //sqlText += "'" + Item.LineNo + "',";
                    //sqlText += "'" + Item.ItemNo + "',";
                    //sqlText += "" + Item.Quantity + ",";
                    //sqlText += "" + Item.UnitPrice + ",";
                    //sqlText += "" + Item.NBRPrice + ",";
                    //sqlText += "'" + Item.UOM + "',";
                    //sqlText += "" + Item.VATRate + ",";
                    //sqlText += "" + Item.VATAmount + ",";
                    //sqlText += "" + Item.SubTotal + ",";
                    //sqlText += "'" + Item.Comments + "',";
                    //sqlText += "'" + Master.CreatedBy + "',";
                    //sqlText += "'" + Master.CreatedOn + "',";
                    //sqlText += "'" + Master.LastModifiedBy + "',";
                    //sqlText += "'" + Master.LastModifiedOn + "',";
                    //sqlText += "" + Item.SD + ",";
                    //sqlText += "" + Item.SDAmount + ",";
                    //sqlText += "'" + Item.Type + "',";
                    //sqlText += "'" + Item.ProductType + "',";
                    //sqlText += "'" + Item.BENumber + "',";
                    //sqlText += "'" + Master.InvoiceDate + "',";
                    //sqlText += "'" + Master.ReceiveDate + "',";
                    //sqlText += "'" + Master.Post + "',";
                    //sqlText += "" + Item.UOMQty + ",";
                    //sqlText += "" + Item.UOMPrice + ",";
                    //sqlText += "" + Item.UOMc + ",";
                    //sqlText += "'" + Item.UOMn + "',";
                    //sqlText += "" + Item.RebateRate + ",";
                    //sqlText += "" + Item.RebateAmount + ",";
                    //sqlText += "" + Item.CnFAmount + ",";
                    //sqlText += "" + Item.InsuranceAmount + ",";
                    //sqlText += "" + Item.AssessableValue + ",";
                    //sqlText += "" + Item.CDAmount + ",";
                    //sqlText += "" + Item.RDAmount + ",";
                    //sqlText += "" + Item.TVBAmount + ",";
                    //sqlText += "" + Item.TVAAmount + ",";
                    //sqlText += "" + Item.ATVAmount + ",";
                    //sqlText += "" + Item.VDSRate + ",";
                    //sqlText += "" + Item.VDSAmount + ",";
                    //sqlText += "" + Item.USDValue + ",";
                    //sqlText += "" + Item.USDVAT + ",";
                    //sqlText += "'" + Master.TransactionType + "',";
                    //sqlText += "'" + Master.ReturnId + "',";
                    //sqlText += "" + Item.OthersAmount + "";

                    //if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                    //{
                    //    sqlText += ",'" + Item.ReturnTransactionType + "'";
                    //}

                    ////sqlText += "'" + Master.@Post + "'";
                    //sqlText += ")	";


                    //SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                    //cmdInsDetail.Transaction = transaction;
                    //transResult = (int)cmdInsDetail.ExecuteNonQuery();

                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}
                    #endregion

                    #endregion Insert only DetailTable

                    #region Insert Issue and Receive if Transaction is not Other

                    #region Transaction is TollReceive

                    if (Master.TransactionType == "TollReceive")
                    {


                        string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                                currConn, transaction).ToString();



                        decimal NBRPrice = productDal.GetLastNBRPriceFromBOM_VatName(FinishItemIdFromOH, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                            currConn, transaction);

                        string ItemType = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, currConn, transaction);
                        string UOM = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, currConn, transaction);



                        if (!string.IsNullOrEmpty(ItemType))
                        {
                            if (ItemType == "Finish")
                            {

                                #region Insert to Receive

                                ReceiveDetailVM rdVm = new ReceiveDetailVM();

                                rdVm.BOMId = Item.BOMId;
                                rdVm.ReceiveNo = Master.PurchaseInvoiceNo;
                                rdVm.ReceiveLineNo = Item.LineNo;
                                rdVm.ItemNo = FinishItemIdFromOH;
                                rdVm.Quantity = Item.Quantity;
                                rdVm.CostPrice = NBRPrice;
                                rdVm.NBRPrice = NBRPrice;
                                rdVm.UOM = UOM;
                                rdVm.VATRate = 0;
                                rdVm.VATAmount = 0;
                                rdVm.SubTotal = NBRPrice;
                                rdVm.CommentsD = Item.Comments;
                                rdVm.CreatedBy = Master.CreatedBy;
                                rdVm.CreatedOn = Master.CreatedOn;
                                rdVm.LastModifiedBy = Master.LastModifiedBy;
                                rdVm.LastModifiedOn = Master.LastModifiedOn;
                                rdVm.SD = 0;
                                rdVm.SDAmount = 0;
                                rdVm.ReceiveDateTime = Master.ReceiveDate;
                                rdVm.transactionType = Master.TransactionType;
                                rdVm.ReturnId = Master.ReturnId;
                                rdVm.VatName = "VAT 4.3 (Toll Receive)";
                                rdVm.UOMQty = Item.UOMQty;
                                rdVm.UOMPrice = NBRPrice;
                                rdVm.UOMc = 1;
                                rdVm.UOMn = UOM;
                                rdVm.Post = Master.Post;
                                retResults = recDal.ReceiveInsertToDetail(rdVm, currConn, transaction);
                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                                }

                                #region Comments

                                //sqlText = "";
                                //sqlText += " insert into ReceiveDetails(";
                                //sqlText += " ReceiveNo                                   ,";
                                //sqlText += " ReceiveLineNo                                   ,";
                                //sqlText += " ItemNo                                   ,";
                                //sqlText += " Quantity                                   ,";
                                //sqlText += " CostPrice                                   ,";
                                //sqlText += " NBRPrice                                   ,";
                                //sqlText += " UOM                                   ,";
                                //sqlText += " VATRate                                   ,";
                                //sqlText += " VATAmount                                   ,";
                                //sqlText += " SubTotal                                   ,";
                                //sqlText += " Comments                                   ,";
                                //sqlText += " CreatedBy                                   ,";
                                //sqlText += " CreatedOn                                   ,";
                                //sqlText += " LastModifiedBy                                   ,";
                                //sqlText += " LastModifiedOn                                   ,";
                                //sqlText += " SD                                   ,";
                                //sqlText += " SDAmount                                   ,";
                                //sqlText += " ReceiveDateTime                                   ,";
                                //sqlText += " TransactionType                                   ,";
                                //sqlText += " ReceiveReturnId                                   ,";
                                //sqlText += " VATName                                   ,";
                                //sqlText += " UOMQty                                   ,";
                                //sqlText += " UOMPrice                                   ,";
                                //sqlText += " UOMc                                   ,";
                                //sqlText += " UOMn                                   ,";
                                //sqlText += " Post                   ";
                                //sqlText += " )";
                                //sqlText += " values(	";
                                //sqlText += "'" + Master.PurchaseInvoiceNo + "',";
                                //sqlText += "'" + Item.LineNo + "',";
                                //sqlText += "'" + FinishItemIdFromOH + "',";
                                //sqlText += "'" + Item.Quantity + "',";
                                //sqlText += "" + NBRPrice + ",";
                                //sqlText += "" + NBRPrice + ",";
                                //sqlText += "'" + UOM + "',";
                                //sqlText += " 0,";
                                //sqlText += " 0,";
                                //sqlText += "" + NBRPrice + "*" + Item.UOMQty + ",";
                                //sqlText += "'" + Item.Comments + "',";
                                //sqlText += "'" + Master.CreatedBy + "',";
                                //sqlText += "'" + Master.CreatedOn + "',";
                                //sqlText += "'" + Master.LastModifiedBy + "',";
                                //sqlText += "'" + Master.LastModifiedOn + "',";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "'" + Master.ReceiveDate + "',";
                                //sqlText += "'" + Master.TransactionType + "',";
                                //sqlText += "'" + Master.ReturnId + "',";
                                //sqlText += "     'VAT 4.3 (Toll Receive)',";
                                //sqlText += "'" + Item.UOMQty + "',";
                                //sqlText += "'" + NBRPrice + "',";
                                //sqlText += "'1',";
                                //sqlText += "'" + UOM + "',";
                                //sqlText += "'" + Master.Post + "'";

                                ////sqlText += "'" + Master.@Post + "'";
                                //sqlText += ")	";
                                //SqlCommand cmdInsertReceive = new SqlCommand(sqlText, currConn);
                                //cmdInsertReceive.Transaction = transaction;
                                //transResult = (int)cmdInsertReceive.ExecuteNonQuery();

                                //if (transResult <= 0)
                                //{
                                //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                //                                    MessageVM.PurchasemsgUnableToUpdateReceive);
                                //}
                                #endregion

                                #endregion Insert to Receive

                                #region Update Receive

                                sqlText = "";


                                sqlText += "  update ReceiveHeaders set TotalAmount=  ";
                                sqlText += " (select sum(Quantity*CostPrice) from ReceiveDetails ";
                                sqlText += " where ReceiveDetails.ReceiveNo =ReceiveHeaders.ReceiveNo) ";
                                sqlText += " where ReceiveHeaders.ReceiveNo=@MasterPurchaseInvoiceNo ";


                                SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, currConn);
                                cmdUpdateReceive.Transaction = transaction;
                                cmdUpdateReceive.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                                transResult = (int)cmdUpdateReceive.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                    MessageVM.PurchasemsgUnableToUpdateReceive);
                                }

                                #endregion Update Receive
                            }
                            else if (ItemType == "Raw"  //16 in
                              || ItemType == "Pack"
                           || ItemType == "WIP"
                           || ItemType == "Trading")
                            {
                                #region Insert only DetailTable PurchaseInvoiceDetails
                                pdVm = new PurchaseDetailVM();

                                pdVm.BOMId = Item.BOMId;
                                pdVm.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                                pdVm.LineNo = Item.LineNo;
                                pdVm.ItemNo = FinishItemIdFromOH;
                                pdVm.Quantity = Item.Quantity;
                                pdVm.UnitPrice = NBRPrice;
                                pdVm.NBRPrice = NBRPrice;
                                pdVm.UOM = UOM;
                                pdVm.VATRate = 0;
                                pdVm.VATAmount = 0;
                                pdVm.SubTotal = NBRPrice;
                                pdVm.Comments = Item.Comments;
                                pdVm.CreatedBy = Master.CreatedBy;
                                pdVm.CreatedOn = Master.CreatedOn;
                                pdVm.LastModifiedBy = Master.LastModifiedBy;
                                pdVm.LastModifiedOn = Master.LastModifiedOn;
                                pdVm.SD = 0;
                                pdVm.SDAmount = 0;
                                pdVm.Type = "TollReceive-WIP";
                                pdVm.ProductType = Item.ProductType;
                                pdVm.BENumber = Item.BENumber;
                                pdVm.InvoiceDateTime = Master.InvoiceDate;
                                pdVm.ReceiveDate = Master.ReceiveDate;
                                pdVm.Post = Master.Post;
                                pdVm.UOMQty = Item.UOMQty;
                                pdVm.UOMPrice = NBRPrice;
                                pdVm.UOMc = 1;
                                pdVm.UOMn = UOM;
                                pdVm.RebateRate = 0;
                                pdVm.RebateAmount = 0;
                                pdVm.CnFAmount = 0;
                                pdVm.InsuranceAmount = 0;
                                pdVm.AssessableValue = 0;
                                pdVm.CDAmount = 0;
                                pdVm.RDAmount = 0;
                                pdVm.TVBAmount = 0;
                                pdVm.TVAAmount = 0;
                                pdVm.ATVAmount = 0;
                                pdVm.USDValue = 0;
                                pdVm.USDVAT = 0;
                                pdVm.TransactionType = "TollReceive-WIP";
                                pdVm.ReturnId = Master.ReturnId;
                                pdVm.OthersAmount = Item.OthersAmount;
                                if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN")
                                {
                                    pdVm.ReturnTransactionType = Item.ReturnTransactionType;
                                }
                                pdVm.BranchId = Master.BranchId;
                                retResults = PurchaseInsertToDetail(pdVm, currConn, transaction);


                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                                }

                                #region Comments

                                //sqlText = "";
                                //sqlText += " insert into PurchaseInvoiceDetails(";
                                //sqlText += " PurchaseInvoiceNo                                   ,";
                                //sqlText += " POLineNo                                   ,";
                                //sqlText += " ItemNo                                   ,";
                                //sqlText += " Quantity                                   ,";
                                //sqlText += " CostPrice                                   ,";
                                //sqlText += " NBRPrice                                   ,";
                                //sqlText += " UOM                                   ,";
                                //sqlText += " VATRate                                   ,";
                                //sqlText += " VATAmount                                   ,";
                                //sqlText += " SubTotal                                   ,";
                                //sqlText += " Comments                                   ,";
                                //sqlText += " CreatedBy                                   ,";
                                //sqlText += " CreatedOn                                   ,";
                                //sqlText += " LastModifiedBy                                   ,";
                                //sqlText += " LastModifiedOn                                   ,";
                                //sqlText += " SD                                   ,";
                                //sqlText += " SDAmount                                   ,";
                                //sqlText += " Type                                   ,";
                                //sqlText += " ProductType                                   ,";
                                //sqlText += " BENumber                                   ,";
                                //sqlText += " InvoiceDateTime                                   ,";
                                //sqlText += " ReceiveDate                                   ,";
                                //sqlText += " Post                                   ,";
                                //sqlText += " UOMQty                                   ,";
                                //sqlText += " UOMPrice                                   ,";
                                //sqlText += " UOMc                                   ,";
                                //sqlText += " UOMn                                   ,";
                                //sqlText += " RebateRate                                    ,";
                                //sqlText += " RebateAmount                                    ,";
                                //sqlText += " CnFAmount                                    ,";
                                //sqlText += " InsuranceAmount                                    ,";
                                //sqlText += " AssessableValue                                    ,";
                                //sqlText += " CDAmount                                    ,";
                                //sqlText += " RDAmount                                    ,";
                                //sqlText += " TVBAmount                                    ,";
                                //sqlText += " TVAAmount                                    ,";
                                //sqlText += " ATVAmount                                    ,";
                                //sqlText += " USDValue                                    ,";
                                //sqlText += " USDVAT                                    ,";
                                //sqlText += " TransactionType                                    ,";
                                //sqlText += " PurchaseReturnId                                    ,";
                                //sqlText += " OthersAmount                    ";
                                //if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN")
                                //{
                                //    sqlText += ", ReturnTransactionType ";
                                //}


                                //sqlText += " )";
                                //sqlText += " values(	";
                                //sqlText += "'" + Master.PurchaseInvoiceNo + "',";
                                //sqlText += "'" + Item.LineNo + "',";
                                //sqlText += "'" + FinishItemIdFromOH + "',";
                                //sqlText += "" + Item.Quantity + ",";
                                //sqlText += "" + NBRPrice + ",";
                                //sqlText += "" + NBRPrice + ",";
                                //sqlText += "'" + UOM + "',";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "" + NBRPrice + " *" + Item.UOMQty + " ,"; // sub total
                                //sqlText += "'" + Item.Comments + "',";
                                //sqlText += "'" + Master.CreatedBy + "',";
                                //sqlText += "'" + Master.CreatedOn + "',";
                                //sqlText += "'" + Master.LastModifiedBy + "',";
                                //sqlText += "'" + Master.LastModifiedOn + "',";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     'TollReceive-WIP',";
                                //sqlText += "'" + Item.ProductType + "',";
                                //sqlText += "'" + Item.BENumber + "',";
                                //sqlText += "'" + Master.InvoiceDate + "',";
                                //sqlText += "'" + Master.ReceiveDate + "',";
                                //sqlText += "'" + Master.Post + "',";
                                //sqlText += "" + Item.UOMQty + ",";
                                //sqlText += "" + NBRPrice + ",";
                                //sqlText += "     1,";
                                //sqlText += "'" + UOM + "',";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     0,";
                                //sqlText += "     'TollReceive-WIP',";
                                //sqlText += "'" + Master.ReturnId + "',";
                                //sqlText += "" + Item.OthersAmount + "";
                                //if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN")
                                //{
                                //    sqlText += ",'" + Item.ReturnTransactionType + "'";
                                //}

                                ////sqlText += "'" + Master.@Post + "'";
                                //sqlText += ")	";


                                //SqlCommand cmdInsDetailW = new SqlCommand(sqlText, currConn);
                                //cmdInsDetailW.Transaction = transaction;
                                //transResult = (int)cmdInsDetailW.ExecuteNonQuery();

                                //if (transResult <= 0)
                                //{
                                //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                //                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                                //}
                                #endregion

                                #endregion Insert only DetailTable

                            }



                        }

                    }

                    #endregion Transaction is TollReceive

                    #region Transaction is InputService

                    if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport")
                    {
                        decimal PurchasePrice = productDal.PurchasePrice(Item.ItemNo, Master.PurchaseInvoiceNo, currConn, transaction);

                        #region Insert to Issue
                        IssueDetailVM idVm = new IssueDetailVM();

                        idVm.BOMId = Item.BOMId;
                        idVm.IssueNo = Master.PurchaseInvoiceNo;
                        idVm.IssueLineNo = Item.LineNo;
                        idVm.ItemNo = Item.ItemNo;
                        idVm.Quantity = Item.Quantity;
                        idVm.NBRPrice = 0;
                        if (Master.TransactionType == "InputServiceImport")
                        {
                            PurchasePrice = PurchasePrice + Convert.ToDecimal(Item.ATVAmount) + Convert.ToDecimal(Item.TVAAmount);
                            idVm.CostPrice = PurchasePrice;
                            idVm.UOM = Item.UOM;
                            idVm.VATRate = 0;
                            idVm.VATAmount = 0;
                            idVm.SubTotal = PurchasePrice * Item.UOMQty;
                        }
                        else if (Master.TransactionType == "InputService")
                        {
                            idVm.CostPrice = Item.SubTotal;
                            idVm.UOM = Item.UOM;
                            idVm.VATRate = 0;
                            idVm.VATAmount = 0;
                            idVm.SubTotal = Item.SubTotal * Item.UOMQty;
                        }
                        idVm.CommentsD = Item.Comments;
                        idVm.CreatedBy = Master.CreatedBy;
                        idVm.CreatedOn = Master.CreatedOn;
                        idVm.LastModifiedBy = Master.LastModifiedBy;
                        idVm.LastModifiedOn = Master.LastModifiedOn;
                        idVm.ReceiveNo = Master.PurchaseInvoiceNo;
                        idVm.IssueDateTime = Master.ReceiveDate;
                        idVm.SD = 0;
                        idVm.SDAmount = 0;
                        idVm.Wastage = 0;
                        idVm.BOMDate = "1900/01/01";
                        idVm.FinishItemNo = "0";
                        idVm.transactionType = Master.TransactionType;
                        idVm.IssueReturnId = Master.ReturnId;
                        idVm.UOMQty = Item.UOMQty;
                        idVm.UOMPrice = Item.UOMPrice;
                        idVm.UOMc = Item.UOMc;
                        idVm.UOMn = Item.UOMn;
                        idVm.UOMWastage = 0;
                        idVm.Post = Master.Post;

                        retResults = issDal.IssueInsertToDetails(idVm, currConn, transaction);

                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, retResults[1]);
                        }

                        #endregion Insert to Issue

                        #region Update Issue

                        sqlText = "";
                        sqlText += " UPDATE IssueHeaders SET ";
                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails WHERE IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                        sqlText += " WHERE (IssueHeaders.IssueNo= @MasterPurchaseInvoiceNo )";

                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                        cmdUpdateIssue.Transaction = transaction;
                        cmdUpdateIssue.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                        int UpdateIssue = (int)cmdUpdateIssue.ExecuteNonQuery();

                        if (UpdateIssue <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                            MessageVM.PurchasemsgUnableToUpdateIssue);
                        }

                        #endregion Update Issue

                    }

                    #endregion Transaction is InputService

                    #endregion Insert Issue and Receive if Transaction is not Other


                    #region Will be Commented Soon

                    ////if (true)
                    ////{


                    ////    if (true)////DetIDExist <= 0)
                    ////    {

                    ////    }
                    ////    else
                    ////    {
                    ////        //Update

                    ////        #region Update only DetailTable
                    ////        cFields = new string[] { "pd.PurchaseInvoiceNo", "pd.ItemNo" };
                    ////        cvals = new string[] { Master.PurchaseInvoiceNo, Item.ItemNo };
                    ////        PurchaseDetailVM pdVm = SelectPurchaseDetail(null, cFields, cvals, currConn, transaction).FirstOrDefault();
                    ////        pdVm.LineNo = Item.LineNo;
                    ////        pdVm.Quantity = Item.Quantity;
                    ////        pdVm.UnitPrice = Item.UnitPrice;
                    ////        pdVm.NBRPrice = Item.NBRPrice;
                    ////        pdVm.UOM = Item.UOM;
                    ////        pdVm.VATRate = Item.VATRate;
                    ////        pdVm.VATAmount = Item.VATAmount;
                    ////        pdVm.SubTotal = Item.SubTotal;
                    ////        pdVm.Comments = Item.Comments;
                    ////        pdVm.LastModifiedBy = Master.LastModifiedBy;
                    ////        pdVm.LastModifiedOn = Master.LastModifiedOn;
                    ////        pdVm.SD = Item.SD;
                    ////        pdVm.SDAmount = Item.SDAmount;
                    ////        pdVm.Type = Item.Type;
                    ////        pdVm.ProductType = Item.ProductType;
                    ////        pdVm.BENumber = Item.BENumber;
                    ////        pdVm.InvoiceDateTime = Master.InvoiceDate;
                    ////        pdVm.ReceiveDate = Master.ReceiveDate;
                    ////        pdVm.Post = Master.Post;
                    ////        pdVm.UOMQty = Item.UOMQty;
                    ////        pdVm.UOMPrice = Item.UOMPrice;
                    ////        pdVm.UOMc = Item.UOMc;
                    ////        pdVm.UOMn = Item.UOMn;
                    ////        pdVm.RebateRate = Item.RebateRate;
                    ////        pdVm.RebateAmount = Item.RebateAmount;
                    ////        pdVm.CnFAmount = Item.CnFAmount;
                    ////        pdVm.InsuranceAmount = Item.InsuranceAmount;
                    ////        pdVm.AssessableValue = Item.AssessableValue;
                    ////        pdVm.CDAmount = Item.CDAmount;
                    ////        pdVm.RDAmount = Item.RDAmount;
                    ////        pdVm.TVBAmount = Item.TVBAmount;
                    ////        pdVm.TVAAmount = Item.TVAAmount;
                    ////        pdVm.ATVAmount = Item.ATVAmount;
                    ////        pdVm.VDSRate = Item.VDSRate;
                    ////        pdVm.VDSAmount = Item.VDSAmount;
                    ////        pdVm.USDValue = Item.USDValue;
                    ////        pdVm.USDVAT = Item.USDVAT;
                    ////        pdVm.ReturnId = Master.ReturnId;
                    ////        pdVm.TransactionType = Master.TransactionType;
                    ////        pdVm.OthersAmount = Item.OthersAmount;
                    ////        if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                    ////        {
                    ////            pdVm.ReturnTransactionType = Item.ReturnTransactionType;
                    ////        }

                    ////        retResults = PurchaseUpdateToDetail(pdVm, currConn, transaction);
                    ////        if (retResults[0] != "Success")
                    ////        {
                    ////            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                                            MessageVM.PurchasemsgUpdateNotSuccessfully);
                    ////        }

                    ////        #region Comments

                    ////        //sqlText = "";

                    ////        //sqlText += " update PurchaseInvoiceDetails set ";
                    ////        //sqlText += " POLineNo                   ='" + Item.LineNo + "',";
                    ////        //sqlText += " Quantity                   = " + Item.Quantity + ",";
                    ////        //sqlText += " CostPrice                  = " + Item.UnitPrice + ",";
                    ////        //sqlText += " NBRPrice                   = " + Item.NBRPrice + ",";
                    ////        //sqlText += " UOM                        = '" + Item.UOM + "',";
                    ////        //sqlText += " VATRate                    = " + Item.VATRate + ",";
                    ////        //sqlText += " VATAmount                  = " + Item.VATAmount + ",";
                    ////        //sqlText += " SubTotal                   = " + Item.SubTotal + ",";
                    ////        //sqlText += " Comments                   = '" + Item.Comments + "',";
                    ////        //sqlText += " LastModifiedBy             = '" + Master.LastModifiedBy + "',";
                    ////        //sqlText += " LastModifiedOn             =' " + Master.LastModifiedOn + "',";
                    ////        //sqlText += " SD                         = " + Item.SD + ",";
                    ////        //sqlText += " SDAmount                   = " + Item.SDAmount + ",";
                    ////        //sqlText += " Type                       = '" + Item.Type + "',";
                    ////        //sqlText += " ProductType                = '" + Item.ProductType + "',";
                    ////        //sqlText += " BENumber                   = '" + Item.BENumber + "',";
                    ////        //sqlText += " InvoiceDateTime            = '" + Master.InvoiceDate + "',";
                    ////        //sqlText += " ReceiveDate                = '" + Master.ReceiveDate + "',";
                    ////        //sqlText += " Post                       = '" + Master.Post + "',";
                    ////        //sqlText += " UOMQty                     = " + Item.UOMQty + ",";
                    ////        //sqlText += " UOMPrice                   = " + Item.UOMPrice + ",";
                    ////        //sqlText += " UOMc                       = " + Item.UOMc + ",";
                    ////        //sqlText += " UOMn                       = '" + Item.UOMn + "',";
                    ////        //sqlText += " RebateRate                 = " + Item.RebateRate + ",";
                    ////        //sqlText += " RebateAmount               = " + Item.RebateAmount + ",";
                    ////        //sqlText += " CnFAmount                  = " + Item.CnFAmount + ",";
                    ////        //sqlText += " InsuranceAmount            = " + Item.InsuranceAmount + ",";
                    ////        //sqlText += " AssessableValue            = " + Item.AssessableValue + ",";
                    ////        //sqlText += " CDAmount                   = " + Item.CDAmount + ",";
                    ////        //sqlText += " RDAmount                   = " + Item.RDAmount + ",";
                    ////        //sqlText += " TVBAmount                   = " + Item.TVBAmount + ",";
                    ////        //sqlText += " TVAAmount                   = " + Item.TVAAmount + ",";
                    ////        //sqlText += " ATVAmount                   = " + Item.ATVAmount + ",";
                    ////        //sqlText += " VDSRate                    = " + Item.VDSRate + ",";
                    ////        //sqlText += " VDSAmount                  = " + Item.VDSAmount + ",";
                    ////        //sqlText += " USDValue                   = " + Item.USDValue + ",";
                    ////        //sqlText += " USDVAT                     = " + Item.USDVAT + ",";
                    ////        //sqlText += " PurchaseReturnId          = '" + Master.ReturnId + "',";
                    ////        //sqlText += " TransactionType           = '" + Master.TransactionType + "',";
                    ////        //sqlText += " OthersAmount               = " + Item.OthersAmount + "";
                    ////        //if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                    ////        //{
                    ////        //    sqlText += ",ReturnTransactionType = '" + Item.ReturnTransactionType + "'";
                    ////        //}

                    ////        //sqlText += " where  PurchaseInvoiceNo ='" + Master.PurchaseInvoiceNo + "' ";
                    ////        //sqlText += " and ItemNo = '" + Item.ItemNo + "'";



                    ////        //SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                    ////        //cmdInsDetail.Transaction = transaction;
                    ////        //transResult = (int)cmdInsDetail.ExecuteNonQuery();

                    ////        //if (transResult <= 0)
                    ////        //{
                    ////        //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////        //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    ////        //}
                    ////        #endregion

                    ////        #endregion Update only DetailTable

                    ////        #region Update Issue and Receive if Transaction is not Other

                    ////        #region Transaction is TollReceive

                    ////        if (Master.TransactionType == "TollReceive")
                    ////        {


                    ////            string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                    ////                                                                    currConn, transaction).ToString();



                    ////            decimal NBRPrice = productDal.GetLastNBRPriceFromBOM(FinishItemIdFromOH, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                    ////                                                                currConn, transaction);

                    ////            string ItemType = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, currConn, transaction);
                    ////            string UOM = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, currConn, transaction);



                    ////            if (!string.IsNullOrEmpty(ItemType))
                    ////            {
                    ////                if (ItemType == "Finish")
                    ////                {
                    ////                    #region Update to Receive



                    ////                    sqlText = "";
                    ////                    sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo=@MasterPurchaseInvoiceNo ";
                    ////                    sqlText += " AND ItemNo='" + FinishItemIdFromOH + "'";
                    ////                    SqlCommand cmdFindIdReceive = new SqlCommand(sqlText, currConn);
                    ////                    cmdFindIdReceive.Transaction = transaction;
                    ////                    cmdFindIdReceive.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    ////                    decimal IDExist = (int)cmdFindIdReceive.ExecuteScalar();
                    ////                    if (IDExist > 0)
                    ////                    {
                    ////                        cFields = new string[] { "rd.ReceiveNo", "rd.ItemNo" };
                    ////                        cvals = new string[] { Master.PurchaseInvoiceNo, FinishItemIdFromOH };
                    ////                        ReceiveDetailVM rdVm = recDal.SelectReceiveDetail(null, cFields, cvals, currConn, transaction).FirstOrDefault();
                    ////                        rdVm.ReceiveLineNo = Item.LineNo;
                    ////                        rdVm.Quantity = Item.Quantity;
                    ////                        rdVm.CostPrice = NBRPrice;
                    ////                        rdVm.NBRPrice = NBRPrice;
                    ////                        rdVm.UOM = UOM;
                    ////                        rdVm.SubTotal = NBRPrice;
                    ////                        rdVm.CommentsD = Item.Comments;
                    ////                        rdVm.LastModifiedBy = Master.LastModifiedBy;
                    ////                        rdVm.LastModifiedOn = Master.LastModifiedOn;
                    ////                        rdVm.ReceiveDateTime = Master.ReceiveDate;
                    ////                        rdVm.transactionType = Master.TransactionType;
                    ////                        rdVm.ReturnId = Master.ReturnId;
                    ////                        rdVm.VatName = "VAT 4.3 (Toll Receive)";
                    ////                        rdVm.UOMQty = Item.UOMQty;
                    ////                        rdVm.UOMPrice = NBRPrice;
                    ////                        rdVm.UOMc = 1;
                    ////                        rdVm.UOMn = UOM;
                    ////                        rdVm.Post = Master.Post;

                    ////                        retResults = recDal.ReceiveUpdateToDetail(rdVm, currConn, transaction);
                    ////                        if (retResults[0] != "Success")
                    ////                        {
                    ////                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                                                            MessageVM.PurchasemsgUnableToUpdateReceive);
                    ////                        }

                    ////                        #region Comments

                    ////                        //sqlText = "";
                    ////                        //sqlText += " update ReceiveDetails set ";
                    ////                        //sqlText += " ReceiveLineNo                  = '" + Item.LineNo + "',";
                    ////                        //sqlText += " Quantity                       = " + Item.Quantity + ",";
                    ////                        //sqlText += " CostPrice                      =" + NBRPrice + ",";
                    ////                        //sqlText += " NBRPrice                       =" + NBRPrice + ",";
                    ////                        //sqlText += " UOM                            = '" + UOM + "',";
                    ////                        //sqlText += " SubTotal                       =" + NBRPrice + "*" + Item.UOMQty + ",";
                    ////                        //sqlText += " Comments                       = '" + Item.Comments + "',";
                    ////                        //sqlText += " LastModifiedBy                 = '" + Master.LastModifiedBy + "',";
                    ////                        //sqlText += " LastModifiedOn                 = '" + Master.LastModifiedOn + "',";
                    ////                        //sqlText += " ReceiveDateTime                = '" + Master.ReceiveDate + "',";
                    ////                        //sqlText += " TransactionType                = '" + Master.TransactionType + "',";
                    ////                        //sqlText += " ReceiveReturnId                = '" + Master.ReturnId + "',";
                    ////                        //sqlText += " VATName                        =      'VAT 4.3 (Toll Receive)',";
                    ////                        //sqlText += " UOMQty                         = " + Item.UOMQty + ",";
                    ////                        //sqlText += " UOMPrice                       = " + NBRPrice + ",";
                    ////                        //sqlText += " UOMc                           = '1',";
                    ////                        //sqlText += " UOMn                           = '" + UOM + "',";
                    ////                        //sqlText += " Post                           = '" + Master.Post + "'";
                    ////                        //sqlText += " where  ReceiveNo = '" + Master.PurchaseInvoiceNo + "' ";
                    ////                        //sqlText += " and ItemNo = '" + FinishItemIdFromOH + "'";
                    ////                        ////sqlText += "'" + Master.@Post + "'";
                    ////                        //SqlCommand cmdInsertReceive = new SqlCommand(sqlText, currConn);
                    ////                        //cmdInsertReceive.Transaction = transaction;
                    ////                        //transResult = (int)cmdInsertReceive.ExecuteNonQuery();

                    ////                        //if (transResult <= 0)
                    ////                        //{
                    ////                        //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                        //                                    MessageVM.PurchasemsgUnableToUpdateReceive);
                    ////                        //}

                    ////                        #endregion

                    ////                    }
                    ////                    #endregion Update to Receive

                    ////                    #region Update Receive Header

                    ////                    sqlText = "";
                    ////                    sqlText += "  update ReceiveHeaders set TotalAmount=  ";
                    ////                    sqlText += " (select sum(Quantity*CostPrice) from ReceiveDetails ";
                    ////                    sqlText += " where ReceiveDetails.ReceiveNo =ReceiveHeaders.ReceiveNo) ";
                    ////                    sqlText += " where ReceiveHeaders.ReceiveNo=@MasterPurchaseInvoiceNo ";

                    ////                    SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, currConn);
                    ////                    cmdUpdateReceive.Transaction = transaction;
                    ////                    cmdUpdateReceive.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    ////                    transResult = (int)cmdUpdateReceive.ExecuteNonQuery();

                    ////                    if (transResult <= 0)
                    ////                    {
                    ////                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                                                        MessageVM.PurchasemsgUnableToUpdateReceive);
                    ////                    }

                    ////                    #endregion Update Receive
                    ////                }
                    ////                else if (ItemType == "Raw"  //16 in
                    ////                  || ItemType == "Pack"
                    ////               || ItemType == "WIP"
                    ////               || ItemType == "Trading")
                    ////                {
                    ////                    #region Update only DetailTable PurchaseInvoiceDetails
                    ////                    cFields = new string[] { "pd.PurchaseInvoiceNo", "pd.ItemNo", "pd.TransactionType" };
                    ////                    cvals = new string[] { Master.PurchaseInvoiceNo, FinishItemIdFromOH, "TollReceive-WIP" };
                    ////                    pdVm = SelectPurchaseDetail(null, cFields, cvals, currConn, transaction).FirstOrDefault();
                    ////                    pdVm.LineNo = Item.LineNo;
                    ////                    pdVm.Quantity = Item.Quantity;
                    ////                    pdVm.UnitPrice = NBRPrice;
                    ////                    pdVm.NBRPrice = NBRPrice;
                    ////                    pdVm.UOM = UOM;
                    ////                    pdVm.SubTotal = NBRPrice;
                    ////                    pdVm.Comments = Item.Comments;
                    ////                    pdVm.LastModifiedBy = Master.LastModifiedBy;
                    ////                    pdVm.LastModifiedOn = Master.LastModifiedOn;
                    ////                    pdVm.ProductType = Item.ProductType;
                    ////                    pdVm.BENumber = Item.BENumber;
                    ////                    pdVm.InvoiceDateTime = Master.InvoiceDate;
                    ////                    pdVm.ReceiveDate = Master.ReceiveDate;
                    ////                    pdVm.Post = Master.Post;
                    ////                    pdVm.UOMQty = Item.UOMQty;
                    ////                    pdVm.UOMPrice = NBRPrice;
                    ////                    pdVm.UOMc = 1;
                    ////                    pdVm.UOMn = UOM;
                    ////                    pdVm.ReturnId = Master.ReturnId;
                    ////                    pdVm.OthersAmount = Item.OthersAmount;

                    ////                    retResults = PurchaseUpdateToDetail(pdVm, currConn, transaction);
                    ////                    if (retResults[0] != "Success")
                    ////                    {
                    ////                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                                                        MessageVM.PurchasemsgUpdateNotSuccessfully);
                    ////                    }

                    ////                    #region Comments

                    ////                    //sqlText = "";

                    ////                    //sqlText += " update PurchaseInvoiceDetails set ";
                    ////                    //sqlText += " POLineNo                   ='" + Item.LineNo + "',";
                    ////                    //sqlText += " Quantity                   = " + Item.Quantity + ",";
                    ////                    //sqlText += " CostPrice                  = " + NBRPrice + ",";
                    ////                    //sqlText += " NBRPrice                   = " + NBRPrice + ",";
                    ////                    //sqlText += " UOM                        = '" + UOM + "',";
                    ////                    //sqlText += " SubTotal                   =" + NBRPrice + "*" + Item.UOMQty + ",";
                    ////                    //sqlText += " Comments                   = '" + Item.Comments + "',";
                    ////                    //sqlText += " LastModifiedBy             = '" + Master.LastModifiedBy + "',";
                    ////                    //sqlText += " LastModifiedOn             =' " + Master.LastModifiedOn + "',";
                    ////                    //sqlText += " ProductType                = '" + Item.ProductType + "',";
                    ////                    //sqlText += " BENumber                   = '" + Item.BENumber + "',";
                    ////                    //sqlText += " InvoiceDateTime            = '" + Master.InvoiceDate + "',";
                    ////                    //sqlText += " ReceiveDate                = '" + Master.ReceiveDate + "',";
                    ////                    //sqlText += " Post                       = '" + Master.Post + "',";
                    ////                    //sqlText += " UOMQty                     = " + Item.UOMQty + ",";
                    ////                    //sqlText += " UOMPrice                   = " + NBRPrice + ",";
                    ////                    //sqlText += " UOMc                       = '1',";
                    ////                    //sqlText += " UOMn                       = '" + UOM + "',";
                    ////                    //sqlText += " PurchaseReturnId           = '" + Master.ReturnId + "',";
                    ////                    //sqlText += " OthersAmount               = " + Item.OthersAmount + "";
                    ////                    //sqlText += " where  PurchaseInvoiceNo ='" + Master.PurchaseInvoiceNo + "' ";
                    ////                    //sqlText += " and ItemNo = '" + FinishItemIdFromOH + "'";
                    ////                    //sqlText += " and TransactionType = 'TollReceive-WIP'";


                    ////                    //SqlCommand cmdInsDetailW = new SqlCommand(sqlText, currConn);
                    ////                    //cmdInsDetailW.Transaction = transaction;
                    ////                    //transResult = (int)cmdInsDetailW.ExecuteNonQuery();

                    ////                    //if (transResult <= 0)
                    ////                    //{
                    ////                    //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    ////                    //}
                    ////                    #endregion

                    ////                    #endregion Update only DetailTable
                    ////                }

                    ////            }



                    ////        }

                    ////        #endregion Transaction is TollReceive

                    ////        #region Transaction is InputService

                    ////        if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport")
                    ////        {
                    ////            decimal PurchasePrice = productDal.PurchasePrice(Item.ItemNo, Master.PurchaseInvoiceNo, currConn, transaction);

                    ////            #region Update to Issue

                    ////            sqlText = "";
                    ////            sqlText += "select COUNT(IssueNo) from IssueDetails WHERE IssueNo=@MasterPurchaseInvoiceNo ";
                    ////            sqlText += " AND ItemNo=@ItemItemNo";
                    ////            SqlCommand cmdFindIdIssue = new SqlCommand(sqlText, currConn);
                    ////            cmdFindIdIssue.Transaction = transaction;
                    ////            cmdFindIdIssue.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    ////            cmdFindIdIssue.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                    ////            decimal IDExistIs = (int)cmdFindIdIssue.ExecuteScalar();
                    ////            if (IDExistIs <= 0)
                    ////            {
                    ////                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                    ////            }

                    ////            cFields = new string[] { "iss.IssueNo", "iss.ItemNo" };
                    ////            cvals = new string[] { Master.PurchaseInvoiceNo, Item.ItemNo };
                    ////            IssueDetailVM idVm = issDal.SelectIssueDetail(null, cFields, cvals, currConn, transaction).FirstOrDefault();
                    ////            idVm.IssueLineNo = Item.LineNo;
                    ////            idVm.Quantity = Item.Quantity;
                    ////            idVm.CommentsD = Item.Comments;
                    ////            idVm.UOM = Item.UOM;
                    ////            idVm.LastModifiedBy = Master.LastModifiedBy;
                    ////            idVm.LastModifiedOn = Master.LastModifiedOn;
                    ////            idVm.IssueDateTime = Master.ReceiveDate;
                    ////            idVm.transactionType = Master.TransactionType;
                    ////            idVm.IssueReturnId = Master.ReturnId;
                    ////            idVm.UOMQty = Item.UOMQty;
                    ////            idVm.UOMPrice = Item.UOMPrice;
                    ////            idVm.UOMc = Item.UOMc;
                    ////            idVm.UOMn = Item.UOMn;
                    ////            idVm.UOMWastage = 0;
                    ////            if (Master.TransactionType == "InputServiceImport")
                    ////            {
                    ////                PurchasePrice = PurchasePrice + Convert.ToDecimal(Item.ATVAmount) + Convert.ToDecimal(Item.TVAAmount);
                    ////                decimal subT = PurchasePrice * Convert.ToDecimal(Item.UOMQty);

                    ////                idVm.CostPrice = PurchasePrice;
                    ////                idVm.SubTotal = subT;
                    ////            }
                    ////            else if (Master.TransactionType == "InputService")
                    ////            {
                    ////                decimal cost = Convert.ToDecimal(Item.SubTotal) - Convert.ToDecimal(Item.RebateAmount);
                    ////                decimal subT = cost * Convert.ToDecimal(Item.UOMQty);
                    ////                idVm.CostPrice = cost;
                    ////                idVm.SubTotal = subT;
                    ////            }

                    ////            idVm.Post = Master.Post;
                    ////            retResults = issDal.IssueUpdateToDetails(idVm, currConn, transaction);
                    ////            if (retResults[0] != "Success")
                    ////            {
                    ////                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                                                MessageVM.PurchasemsgUnableToUpdateIssue);
                    ////            }

                    ////            #region Comments
                    ////            //sqlText = ""; // kamrul
                    ////            //sqlText += " update IssueDetails set";
                    ////            //sqlText += " IssueLineNo            ='" + Item.LineNo + "',";
                    ////            //sqlText += " Quantity               =" + Item.Quantity + ",";
                    ////            //sqlText += " Comments                   ='" + Item.Comments + "',";
                    ////            //sqlText += " uom                        ='" + Item.UOM + "',";
                    ////            //sqlText += " LastModifiedBy             ='" + Master.LastModifiedBy + "',";
                    ////            //sqlText += " LastModifiedOn             ='" + Master.LastModifiedOn + "',";
                    ////            //sqlText += " IssueDateTime              ='" + Master.ReceiveDate + "',";
                    ////            //sqlText += " TransactionType            ='" + Master.TransactionType + "',";
                    ////            //sqlText += " IssueReturnId              ='" + Master.ReturnId + "',";
                    ////            //sqlText += " UOMQty                     = " + Item.UOMQty + ",";
                    ////            //sqlText += " UOMPrice                   = " + Item.UOMPrice + ",";
                    ////            //sqlText += " UOMc                       = " + Item.UOMc + ",";
                    ////            //sqlText += " UOMn                       = '" + Item.UOMn + "',";
                    ////            //sqlText += " UOMWastage                 = '0',";
                    ////            //if (Master.TransactionType == "InputServiceImport")
                    ////            //{
                    ////            //    PurchasePrice = PurchasePrice + Convert.ToDecimal(Item.ATVAmount) + Convert.ToDecimal(Item.TVAAmount);
                    ////            //    sqlText += " CostPrice          =" + PurchasePrice + ",";
                    ////            //    decimal subT = PurchasePrice * Convert.ToDecimal(Item.UOMQty);
                    ////            //    sqlText += " SubTotal               =" + subT + ",";

                    ////            //}
                    ////            //else if (Master.TransactionType == "InputService")
                    ////            //{
                    ////            //    decimal cost = Convert.ToDecimal(Item.SubTotal) - Convert.ToDecimal(Item.RebateAmount);
                    ////            //    decimal subT = cost * Convert.ToDecimal(Item.UOMQty);
                    ////            //    sqlText += " CostPrice              =" + cost + ",";
                    ////            //    sqlText += " SubTotal               =" + subT + ",";
                    ////            //}
                    ////            //sqlText += " Post                       ='" + Master.Post + "'";
                    ////            //sqlText += " where  IssueNo ='" + Master.PurchaseInvoiceNo + "' and ItemNo = '" + Item.ItemNo + "'";

                    ////            ////sqlText += "'" + Master.@Post + "'";
                    ////            //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                    ////            //cmdInsertIssue.Transaction = transaction;
                    ////            //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                    ////            //if (transResult <= 0)
                    ////            //{
                    ////            //    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////            //                                    MessageVM.PurchasemsgUnableToUpdateIssue);
                    ////            //}
                    ////            #endregion Comments

                    ////            #endregion Update to Issue

                    ////            #region Update Issue Header

                    ////            sqlText = "";
                    ////            sqlText += " UPDATE IssueHeaders SET ";
                    ////            sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails WHERE IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                    ////            sqlText += " WHERE (IssueHeaders.IssueNo= @MasterPurchaseInvoiceNo)";

                    ////            SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                    ////            cmdUpdateIssue.Transaction = transaction;
                    ////            cmdUpdateIssue.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    ////            transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                    ////            if (transResult <= 0)
                    ////            {
                    ////                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                    ////                                                MessageVM.PurchasemsgUnableToUpdateIssue);
                    ////            }

                    ////            #endregion Update Issue Header

                    ////        }

                    ////        #endregion Transaction is InputService

                    ////        #endregion Update Issue and Receive if Transaction is not Other
                    ////    }

                    ////}

                    #endregion


                    vProductType = productDal.GetProductTypeByItemNo(Item.ItemNo, currConn, transaction);

                    if (vProductType.ToLower() == "trading" && PriceDeclarationTradingProduct == true)
                    {

                        decimal AvgRate = 0;

                        AvgRate = productDal.GetLastNBRPriceFromBOM_VatName(Item.ItemNo, "VAT 1 Kha (Trading)",
                                             Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd"), currConn, transaction);

                        if (AvgRate <= 0)
                        {
                            string NBRPrice = productDal.ProductDTByItemNo(Item.ItemNo, "", currConn, transaction).Rows[0]["NBRPrice"].ToString();
                            if (!string.IsNullOrEmpty(NBRPrice))
                            {
                                AvgRate = Convert.ToDecimal(NBRPrice);
                            }
                            else
                            {
                                DataTable priceData = productDal.ProductDTByItemNo(Item.ItemNo, "", currConn, transaction);
                                decimal amount = Convert.ToDecimal(priceData.Rows[0]["OpeningTotalCost"].ToString());
                                decimal quantity = Convert.ToDecimal(priceData.Rows[0]["OpeningBalance"].ToString());
                                if (quantity > 0)
                                {
                                    AvgRate = amount / quantity;
                                }
                                else
                                {
                                    throw new ArgumentNullException("There have no Price for this Item for VAT 17", "There have no Price for this Item for VAT 17");

                                }
                            }

                        }


                        string UOM = productDal.GetProductTypeByItemNo(Item.ItemNo, currConn, transaction);

                        #region Insert to Receive  17 in
                        ReceiveDetailVM rdVm = new ReceiveDetailVM();

                        rdVm.BOMId = Item.BOMId;
                        rdVm.ReceiveNo = Master.PurchaseInvoiceNo;
                        rdVm.ReceiveLineNo = Item.LineNo;
                        rdVm.ItemNo = Item.ItemNo;
                        rdVm.Quantity = Item.Quantity;
                        rdVm.CostPrice = AvgRate;
                        rdVm.NBRPrice = AvgRate;
                        rdVm.UOM = UOM;
                        rdVm.VATRate = 0;
                        rdVm.VATAmount = 0;
                        rdVm.SubTotal = AvgRate;
                        rdVm.CommentsD = Item.Comments;
                        rdVm.CreatedBy = Master.CreatedBy;
                        rdVm.CreatedOn = Master.CreatedOn;
                        rdVm.LastModifiedBy = Master.LastModifiedBy;
                        rdVm.LastModifiedOn = Master.LastModifiedOn;
                        rdVm.SD = 0;
                        rdVm.SDAmount = 0;
                        rdVm.ReceiveDateTime = Master.ReceiveDate;
                        rdVm.transactionType = Master.TransactionType;
                        rdVm.ReturnId = Master.ReturnId;
                        rdVm.VatName = "VAT 1 Kha (Trading)";
                        rdVm.UOMQty = Item.UOMQty;
                        rdVm.UOMPrice = AvgRate;
                        rdVm.UOMc = 1;
                        rdVm.UOMn = UOM;
                        rdVm.Post = Master.Post;

                        retResults = recDal.ReceiveInsertToDetail(rdVm, currConn, transaction);

                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }


                        #endregion Insert to Receive

                        #region Update Receive

                        sqlText = "";

                        sqlText += "  update ReceiveHeaders set TotalAmount=  ";
                        sqlText += " (select sum(Quantity*CostPrice) from ReceiveDetails ";
                        sqlText += " where ReceiveDetails.ReceiveNo =ReceiveHeaders.ReceiveNo) ";
                        sqlText += " where ReceiveHeaders.ReceiveNo=@MasterPurchaseInvoiceNo ";

                        SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, currConn);
                        cmdUpdateReceive.Transaction = transaction;
                        cmdUpdateReceive.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                        transResult = (int)cmdUpdateReceive.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                            MessageVM.PurchasemsgUnableToSaveReceive);
                        }

                        #endregion Update Receive
                    }
                    #endregion Find Transaction Mode Insert or Update


                }



                #endregion Update Detail Table

                #endregion  Update into Details(Update complete in Header)

                #region Tracking

                if (Trackings.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate, MessageVM.PurchasemsgNoDataToUpdateImportDyties);
                }


                foreach (TrackingVM tracking in Trackings.ToList())
                {

                    #region Find Heading1 Existence

                    sqlText = "";
                    sqlText += "select COUNT(Heading1) from Trackings WHERE ";
                    sqlText += " ItemNo=@trackingItemNo";
                    sqlText += " AND Heading1 =@trackingHeading1";

                    SqlCommand cmdFindHeading1 = new SqlCommand(sqlText, currConn);
                    cmdFindHeading1.Transaction = transaction;
                    cmdFindHeading1.Parameters.AddWithValue("@trackingItemNo", tracking.ItemNo);
                    cmdFindHeading1.Parameters.AddWithValue("@trackingHeading1", tracking.Heading1);
                    decimal IDExist = (int)cmdFindHeading1.ExecuteScalar();
                    if (IDExist <= 0)
                    {
                        #region Check Heading2

                        sqlText = "";
                        sqlText += "select COUNT(Heading2) from Trackings WHERE ";
                        sqlText += " ItemNo=@trackingItemNo";
                        sqlText += " AND Heading2 =@trackingHeading2";

                        SqlCommand cmdFindHeading2 = new SqlCommand(sqlText, currConn);
                        cmdFindHeading2.Transaction = transaction;
                        cmdFindHeading2.Parameters.AddWithValue("@trackingItemNo", tracking.ItemNo);
                        cmdFindHeading2.Parameters.AddWithValue("@trackingHeading2", tracking.Heading2);
                        decimal IDExist2 = (int)cmdFindHeading2.ExecuteScalar();
                        #endregion
                        if (IDExist2 <= 0)
                        {
                            // Insert
                            #region Insert
                            sqlText = "";
                            sqlText += " insert into Trackings";
                            sqlText += " (";
                            sqlText += " PurchaseInvoiceNo                                ,";
                            sqlText += " ItemNo                                ,";
                            sqlText += " TrackLineNo                                ,";
                            sqlText += " Heading1                                ,";
                            sqlText += " Heading2                                ,";
                            sqlText += " Quantity                                ,";
                            sqlText += " UnitPrice                                ,";
                            sqlText += " IsPurchase                                ,";
                            sqlText += " IsIssue                                ,";
                            sqlText += " IsReceive                                ,";
                            sqlText += " IsSale                                ,";
                            sqlText += " Post                                ,";
                            sqlText += " ReceivePost                                ,";
                            sqlText += " SalePost                                ,";
                            sqlText += " IssuePost                                ,";
                            sqlText += " CreatedBy                                ,";
                            sqlText += " CreatedOn                                ,";
                            sqlText += " LastModifiedBy                                ,";
                            sqlText += " LastModifiedOn";
                            sqlText += " )";
                            sqlText += " values";
                            sqlText += " (";

                            sqlText += "@MasterPurchaseInvoiceNo,";
                            sqlText += "@trackingItemNo,";
                            sqlText += "@trackingTrackingLineNo,";
                            sqlText += "@trackingHeading1,";
                            sqlText += "@trackingHeading2,";
                            sqlText += "@trackingQuantity,";
                            sqlText += "@trackingUnitPrice,";
                            sqlText += "@trackingIsPurchase,";
                            sqlText += "     'N'                                            ,";
                            sqlText += "     'N'                                            ,";
                            sqlText += "     'N'                                            ,";
                            sqlText += "@MasterPost,";
                            sqlText += "     'N'                        ,";
                            sqlText += "     'N'                        ,";
                            sqlText += "     'N'                        ,";
                            sqlText += "@MasterCreatedBy,";
                            sqlText += "@MasterCreatedOn,";
                            sqlText += "@MasterLastModifiedBy,";
                            sqlText += "@MasterLastModifiedOn";

                            sqlText += ")";


                            SqlCommand cmdInsertTrackings = new SqlCommand(sqlText, currConn);
                            cmdInsertTrackings.Transaction = transaction;
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingTrackingLineNo", tracking.TrackingLineNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading2", tracking.Heading2);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingQuantity", tracking.Quantity);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingUnitPrice", tracking.UnitPrice);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsPurchase", tracking.IsPurchase);

                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedBy", Master.CreatedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedOn", Master.CreatedOn);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);

                            transResult = (int)cmdInsertTrackings.ExecuteNonQuery();
                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                MessageVM.PurchasemsgSaveNotSuccessfully);
                            }


                            #endregion
                        }
                        else
                        {
                            //Update
                            #region Update
                            sqlText = "";
                            sqlText += " update Trackings set ";
                            sqlText += " TrackLineNo='" + tracking.TrackingLineNo + "',";
                            sqlText += " Heading1= '" + tracking.Heading1 + "',";
                            sqlText += " Heading2= '" + tracking.Heading2 + "',";
                            sqlText += " Quantity= '" + tracking.Quantity + "',";
                            sqlText += " UnitPrice= '" + tracking.UnitPrice + "',";
                            if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                            {
                                sqlText += " ReturnType='" + tracking.ReturnType + "',";
                                sqlText += " ReturnPurchase= '" + tracking.ReturnPurchase + "',";
                                sqlText += " ReturnPurchaseID='" + tracking.ReturnPurchaseID + "',";
                                sqlText += " ReturnPurDate='" + tracking.ReturnPurDate + "',";
                            }
                            else
                            {
                                sqlText += " Post=@MasterPost,";
                            }
                            sqlText += " LastModifiedBy =@MasterLastModifiedBy,";
                            sqlText += " LastModifiedOn =@MasterLastModifiedOn";

                            //sqlText += " where  PurchaseInvoiceNo ='" + Master.PurchaseInvoiceNo + "' ";
                            sqlText += " where ItemNo = @trackingItemNo";
                            sqlText += " and Heading2 = @trackingHeading2 ";

                            SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                            cmdInsDetail.Transaction = transaction;
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);

                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                            cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingHeading2", tracking.Heading2);

                            transResult = (int)cmdInsDetail.ExecuteNonQuery();

                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        //Update
                        #region Update
                        sqlText = "";
                        sqlText += " update Trackings set ";
                        sqlText += " TrackLineNo='" + tracking.TrackingLineNo + "',";
                        sqlText += " Heading1= '" + tracking.Heading1 + "',";
                        sqlText += " Heading2= '" + tracking.Heading2 + "',";
                        sqlText += " Quantity= '" + tracking.Quantity + "',";
                        sqlText += " UnitPrice= '" + tracking.UnitPrice + "',";


                        if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                        {
                            sqlText += " ReturnType='" + tracking.ReturnType + "',";
                            sqlText += " ReturnPurchase= '" + tracking.ReturnPurchase + "',";
                            sqlText += " ReturnPurchaseID='" + tracking.ReturnPurchaseID + "',";
                            sqlText += " ReturnPurDate='" + tracking.ReturnPurDate + "',";
                        }
                        else
                        {
                            sqlText += " Post=@MasterPost,";
                        }

                        sqlText += " LastModifiedBy = @MasterLastModifiedBy,";
                        sqlText += " LastModifiedOn = @MasterLastModifiedOn";

                        //sqlText += " where  PurchaseInvoiceNo ='" + Master.PurchaseInvoiceNo + "' ";
                        sqlText += " where ItemNo = @trackingItemNo";
                        sqlText += " and Heading1 = @trackingHeading1";


                        SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        cmdInsDetail.Transaction = transaction;
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);

                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                        cmdInsDetail.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);


                        transResult = (int)cmdInsDetail.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                            MessageVM.PurchasemsgUpdateNotSuccessfully);
                        }
                        #endregion
                    }


                    #endregion Find Heading1 Existence
                }

                #endregion Tracking

                #region Will be Commented Soon

                //////if (true)
                //////{

                //////    #region Remove row
                //////    sqlText = "";
                //////    sqlText += " SELECT  distinct ItemNo";
                //////    sqlText += " from PurchaseInvoiceDetails WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo";

                //////    DataTable dt = new DataTable("Previous");
                //////    SqlCommand cmdRIFB1 = new SqlCommand(sqlText, currConn);
                //////    cmdRIFB1.Transaction = transaction;
                //////    cmdRIFB1.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                //////    SqlDataAdapter dta = new SqlDataAdapter(cmdRIFB1);
                //////    dta.Fill(dt);
                //////    foreach (DataRow pItem in dt.Rows)
                //////    {
                //////        var p = pItem["ItemNo"].ToString();

                //////        //var tt= Details.Find(x => x.ItemNo == p);
                //////        var tt = Details.Count(x => x.ItemNo.Trim() == p.Trim());
                //////        if (tt == 0)
                //////        {
                //////            sqlText = "";
                //////            sqlText += " delete FROM PurchaseInvoiceDetails ";
                //////            sqlText += " WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo ";
                //////            sqlText += " AND ItemNo='" + p + "'";
                //////            SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                //////            cmdInsDetail.Transaction = transaction;
                //////            cmdInsDetail.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                //////            transResult = (int)cmdInsDetail.ExecuteNonQuery();

                //////            if (Master.TransactionType == "Import"
                //////         || Master.TransactionType == "ServiceImport"
                //////         || Master.TransactionType == "ServiceNSImport"
                //////         || Master.TransactionType == "TradingImport"
                //////         || Master.TransactionType == "InputServiceImport")
                //////            {
                //////                sqlText = "";
                //////                sqlText += " delete FROM PurchaseInvoiceDuties ";
                //////                sqlText += " WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo";
                //////                sqlText += " AND ItemNo='" + p + "'";
                //////                SqlCommand cmdInsDetail1 = new SqlCommand(sqlText, currConn);
                //////                cmdInsDetail1.Transaction = transaction;
                //////                cmdInsDetail.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                //////                transResult = (int)cmdInsDetail1.ExecuteNonQuery();
                //////            }

                //////            #region Tracking
                //////            sqlText = "";
                //////            sqlText += " delete FROM Trackings ";
                //////            sqlText += " WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo ";
                //////            sqlText += " AND ItemNo='" + p + "'";
                //////            SqlCommand cmdInsTracking = new SqlCommand(sqlText, currConn);
                //////            cmdInsTracking.Transaction = transaction;
                //////            cmdInsTracking.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                //////            transResult = (int)cmdInsTracking.ExecuteNonQuery();
                //////            #endregion
                //////        }

                //////    }
                //////    #endregion Remove row

                //////}

                #endregion

                #region TDS
                sqlText = "";
                sqlText += @"delete from PurchaseTDSs where PurchaseInvoiceNo=@PurchaseInvoiceNo

                                insert into PurchaseTDSs(PurchaseInvoiceNo,TDSCode,PurchaseBillAmount,TDSAmount,Post)
                                select distinct PurchaseInvoiceNo,TDSCode,sum(SubTotal)SubTotal,0,'N' from PurchaseInvoiceDetails
                                where PurchaseInvoiceNo=@PurchaseInvoiceNo
                                group by PurchaseInvoiceNo,TDSCode";


                SqlCommand cmdInserttds = new SqlCommand(sqlText, currConn);
                cmdInserttds.Transaction = transaction;
                cmdInserttds.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                cmdInserttds.ExecuteNonQuery();
                #endregion



                #region Commit

                if (transaction != null)
                {
                    //if (transResult > 0)
                    //{
                    transaction.Commit();
                    //}

                }

                #endregion Commit

                #region SuccessResult


                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgUpdateSuccessfully;
                retResults[2] = Master.PurchaseInvoiceNo;
                retResults[3] = "N";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            //////catch (SqlException sqlex)
            //////{
            //////    transaction.Rollback();
            //////    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //////    //throw sqlex;
            //////}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                transaction.Rollback();
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] PurchaseInsertX(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, List<PurchaseDutiesVM> Duties, List<TrackingVM> Trackings,
            SqlTransaction Vtransaction, SqlConnection VcurrConn, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string vProductType = "";

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            //retResults[4] = "";
            string Id = "";
            ProductDAL productDal = new ProductDAL();
            ReceiveDAL recDal = new ReceiveDAL();
            SaleDAL salDal = new SaleDAL();
            IssueDAL issDal = new IssueDAL();
            //SqlConnection currConn = null;
            //SqlTransaction transaction = null;
            SqlConnection vcurrConn = VcurrConn;
            if (vcurrConn == null)
            {
                VcurrConn = null;
                Vtransaction = null;
            }
            int transResult = 0;
            string sqlText = "";
            string newIDCreate = "";

            int IDExist = 0;
            bool PriceDeclarationTradingProduct = false;


            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header


                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgNoDataToSave);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, "Please Check Invoice Data and Time");

                }



                #endregion Validation for Header
                #region open connection and transaction
                if (vcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }
                    Vtransaction = VcurrConn.BeginTransaction(MessageVM.PurchasemsgMethodNameInsert);

                }

                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);

                #endregion open connection and transaction
                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, VcurrConn);
                    cmdIdExist.Transaction = Vtransaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, VcurrConn);
                    cmdYearNotExist.Transaction = Vtransaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK

                #region Find Transaction Exist

                sqlText = "";
                sqlText = sqlText + "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterId";
                SqlCommand cmdExistTran = new SqlCommand(sqlText, VcurrConn);
                cmdExistTran.Transaction = Vtransaction;
                cmdExistTran.Parameters.AddWithValueAndNullHandle("@MasterId", Master.PurchaseInvoiceNo);
                //IDExist = (int)cmdExistTran.ExecuteScalar();
                object objIDExist = cmdExistTran.ExecuteScalar();
                if (objIDExist != null)
                {
                    IDExist = Convert.ToInt32(objIDExist);
                }

                if (IDExist > 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgFindExistID);
                }

                #endregion Find Transaction Exist

                #region Purchase ID Create

                if (string.IsNullOrEmpty(Master.TransactionType))
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgTransactionNotDeclared);
                }
                if (Master.TransactionType == "Other")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "Other", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }

                else if (Master.TransactionType == "PurchaseDN")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "PurchaseDN", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "PurchaseCN")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "PurchaseCN", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }

                else if (Master.TransactionType == "Trading") //s
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "Trading", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }

                else if (Master.TransactionType == "TollReceive")
                {
                    newIDCreate = commonDal.TransactionCode("TollReceive", "TollReceive", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                             "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "Import"
                    || Master.TransactionType == "ServiceImport"
                    || Master.TransactionType == "ServiceNSImport"
                    || Master.TransactionType == "TradingImport"
                    || Master.TransactionType == "InputServiceImport")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "Import", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "InputService")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "InputService", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "TollReceiveRaw")
                {
                    newIDCreate = commonDal.TransactionCode("TollReceiveRaw", "TollReceiveRaw", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "PurchaseReturn")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "PurchaseReturn", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "Service")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "Service", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "ServiceNS")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "ServiceNS", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                else if (Master.TransactionType == "CommercialImporter")
                {
                    newIDCreate = commonDal.TransactionCode("Purchase", "CommercialImporter", "PurchaseInvoiceHeaders", "PurchaseInvoiceNo",
                                              "ReceiveDate", Master.ReceiveDate, Master.BranchId.ToString(), VcurrConn, Vtransaction);
                }
                if (string.IsNullOrEmpty(newIDCreate) || newIDCreate == "")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                            "ID Prefetch not set please update Prefetch first");
                }
                Master.PurchaseInvoiceNo = newIDCreate;


                //}
                // newID = newID + "-W";
                #endregion Purchase ID Create
                PriceDeclarationTradingProduct = Convert.ToBoolean(commonDal.settingValue("PriceDeclaration", "TradingProduct") == "Y" ? true : false);


                #region ID generated completed,Insert new Information in Header

                PurchaseMasterVM pmVM = new PurchaseMasterVM();
                pmVM.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                pmVM.VendorID = Master.VendorID;
                pmVM.CustomHouse = Master.CustomHouse;
                pmVM.CustomHouseCode = Master.CustomHouseCode;
                pmVM.InvoiceDate = Master.InvoiceDate;
                pmVM.TotalAmount = Master.TotalAmount;
                pmVM.TotalVATAmount = Master.TotalVATAmount;
                pmVM.SerialNo = Master.SerialNo;
                pmVM.LCNumber = Master.LCNumber;
                pmVM.Comments = Master.Comments;
                pmVM.CreatedBy = Master.CreatedBy;
                pmVM.CreatedOn = Master.CreatedOn;
                pmVM.LastModifiedBy = Master.LastModifiedBy;
                pmVM.LastModifiedOn = Master.LastModifiedOn;
                pmVM.BENumber = Master.BENumber;
                pmVM.ProductType = Master.ProductType;
                pmVM.TransactionType = Master.TransactionType;
                pmVM.ReceiveDate = Master.ReceiveDate;
                pmVM.WithVDS = Master.WithVDS;
                pmVM.ReturnId = Master.ReturnId;
                pmVM.ImportID = Master.ImportID;
                pmVM.Post = Master.Post;
                pmVM.LCDate = Master.LCDate;
                pmVM.USDInvoiceValue = Master.USDInvoiceValue;
                pmVM.LandedCost = Master.LandedCost;
                pmVM.BranchId = Master.BranchId;
                pmVM.TDSAmount = Master.TDSAmount;

                retResults = PurchaseInsertToMaster(pmVM, VcurrConn, Vtransaction);
                Id = retResults[4];
                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                }




                #endregion ID generated completed,Insert new Information in Header

                foreach (PurchaseDetailVM Item in Details.ToList())
                {
                    DataTable dt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                    if (dt.Rows[0]["IsRaw"].ToString().ToLower() == "trading")
                    {
                        vProductType = "trading";
                    }
                }
                #region if Transection not Other Insert Issue / Receive

                #region vProductType == "trading"
                if (vProductType.ToLower() == "trading" && PriceDeclarationTradingProduct == true)
                {
                    #region Insert to ReceiveHeaders
                    ReceiveMasterVM rmVM = new ReceiveMasterVM();

                    rmVM.ReceiveNo = Master.PurchaseInvoiceNo;
                    rmVM.ReceiveDateTime = Master.ReceiveDate;
                    rmVM.TotalAmount = 0;
                    rmVM.TotalVATAmount = 0;
                    rmVM.SerialNo = Master.PurchaseInvoiceNo;
                    rmVM.Comments = Master.Comments;
                    rmVM.CreatedBy = Master.CreatedBy;
                    rmVM.CreatedOn = Master.CreatedOn;
                    rmVM.LastModifiedBy = Master.LastModifiedBy;
                    rmVM.LastModifiedOn = Master.LastModifiedOn;
                    rmVM.transactionType = Master.TransactionType;
                    rmVM.ReturnId = Master.ReturnId;
                    rmVM.Post = Master.Post;
                    rmVM.BranchId = Master.BranchId;

                    retResults = recDal.ReceiveInsertToMaster(rmVM, VcurrConn, Vtransaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);

                    }



                    #endregion Insert to Receive Header
                }
                #endregion vProductType == "trading"

                #region Purchase For TollReceive

                if (Master.TransactionType == "TollReceive")
                {

                    // not Complete Plz check again
                    #region Insert to Issue Header
                    IssueMasterVM iVm = new IssueMasterVM();

                    iVm.IssueNo = Master.PurchaseInvoiceNo;
                    iVm.IssueDateTime = Master.ReceiveDate;
                    iVm.TotalVATAmount = 0;
                    iVm.TotalAmount = 0;
                    iVm.SerialNo = Master.PurchaseInvoiceNo;
                    iVm.Comments = Master.Comments;
                    iVm.CreatedBy = Master.CreatedBy;
                    iVm.CreatedOn = Master.CreatedOn;
                    iVm.LastModifiedBy = Master.LastModifiedBy;
                    iVm.LastModifiedOn = Master.LastModifiedOn;
                    iVm.ReceiveNo = Master.PurchaseInvoiceNo;
                    iVm.transactionType = Master.TransactionType;
                    iVm.ReturnId = Master.ReturnId;
                    iVm.Post = Master.Post;
                    iVm.BranchId = Master.BranchId;

                    retResults = issDal.IssueInsertToMaster(iVm, VcurrConn, Vtransaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }



                    #endregion Insert to Issue Header

                    #region Insert to ReceiveHeaders
                    ReceiveMasterVM rVM = new ReceiveMasterVM();

                    rVM.ReceiveNo = Master.PurchaseInvoiceNo;
                    rVM.ReceiveDateTime = Master.ReceiveDate;
                    rVM.TotalAmount = 0;
                    rVM.TotalVATAmount = 0;
                    rVM.SerialNo = Master.PurchaseInvoiceNo;
                    rVM.Comments = Master.Comments;
                    rVM.CreatedBy = Master.CreatedBy;
                    rVM.CreatedOn = Master.CreatedOn;
                    rVM.LastModifiedBy = Master.LastModifiedBy;
                    rVM.LastModifiedOn = Master.LastModifiedOn;
                    rVM.transactionType = Master.TransactionType;
                    rVM.ReturnId = Master.ReturnId;
                    rVM.Post = Master.Post;
                    rVM.BranchId = Master.BranchId;

                    retResults = recDal.ReceiveInsertToMaster(rVM, VcurrConn, Vtransaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }



                    #endregion Insert to Receive Header

                }

                #endregion Purchase ID Create For IssueReturn

                #region Purchase For Input Service

                if (Master.TransactionType == "InputService"
                    || Master.TransactionType == "InputServiceImport")
                {
                    #region Insert to Issue Header

                    IssueMasterVM ivm = new IssueMasterVM();
                    ivm.IssueNo = Master.PurchaseInvoiceNo;
                    ivm.IssueDateTime = Master.ReceiveDate;
                    ivm.TotalVATAmount = 0;
                    ivm.TotalAmount = 0;
                    ivm.SerialNo = Master.PurchaseInvoiceNo;
                    ivm.Comments = Master.Comments;
                    ivm.CreatedBy = Master.CreatedBy;
                    ivm.CreatedOn = Master.CreatedOn;
                    ivm.LastModifiedBy = Master.LastModifiedBy;
                    ivm.LastModifiedOn = Master.LastModifiedOn;
                    ivm.ReceiveNo = Master.PurchaseInvoiceNo;
                    ivm.transactionType = Master.TransactionType;
                    ivm.ReturnId = Master.ReturnId;
                    ivm.Post = Master.Post;
                    ivm.BranchId = Master.BranchId;

                    retResults = issDal.IssueInsertToMaster(ivm, VcurrConn, Vtransaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }



                    #endregion Insert to Issue Header


                }
                #endregion Purchase For Input Service


                #region Import

                if (Master.TransactionType == "Import"
                || Master.TransactionType == "ServiceImport"
                || Master.TransactionType == "ServiceNSImport"
                || Master.TransactionType == "TradingImport"
                || Master.TransactionType == "CommercialImporter"
                || Master.TransactionType == "InputServiceImport")
                {
                    if (Duties == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                        MessageVM.PurchasemsgNoDataToSaveImportDuties);
                    }

                    #region DutyID

                    sqlText = "select isnull(max(cast(PIDutyID as int)),0)+1 FROM  PurchaseInvoiceDuties";
                    SqlCommand cmdDutyNextId = new SqlCommand(sqlText, VcurrConn);
                    cmdDutyNextId.Transaction = Vtransaction;
                    //int nextIdD = (int) cmdDutyNextId.ExecuteScalar();
                    int nextIdD = 0;
                    object objnextIdD = cmdDutyNextId.ExecuteScalar();
                    if (objnextIdD == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                            MessageVM.PurchasemsgDutyIdNotCreate);
                    }
                    else
                    {
                        nextIdD = Convert.ToInt32(objnextIdD);
                    }

                    if (nextIdD <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                        MessageVM.PurchasemsgDutyIdNotCreate);
                    }

                    #endregion DutyID

                    #region ID generated completed,Insert new PurchaseInvoiceDuties
                    foreach (PurchaseDutiesVM duty in Duties.ToList())
                    {
                        PurchaseDutiesVM pduVM = new PurchaseDutiesVM();
                        pduVM.PIDutyID = nextIdD.ToString();
                        pduVM.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                        pduVM.ItemNo = duty.ItemNo;
                        pduVM.Quantity = duty.Quantity;
                        pduVM.DutyCompleteQuantity = duty.DutyCompleteQuantity;
                        pduVM.DutyCompleteQuantityPercent = duty.DutyCompleteQuantityPercent;
                        pduVM.CnFInp = duty.CnFInp;
                        pduVM.CnFRate = duty.CnFRate;
                        pduVM.CnFAmount = duty.CnFAmount;
                        pduVM.InsuranceInp = duty.InsuranceInp;
                        pduVM.InsuranceRate = duty.InsuranceRate;
                        pduVM.InsuranceAmount = duty.InsuranceAmount;
                        pduVM.AssessableInp = duty.AssessableInp;
                        pduVM.AssessableValue = duty.AssessableValue;
                        pduVM.CDInp = duty.CDInp;
                        pduVM.CDRate = duty.CDRate;
                        pduVM.CDAmount = duty.CDAmount;
                        pduVM.RDInp = duty.RDInp;
                        pduVM.RDRate = duty.RDRate;
                        pduVM.RDAmount = duty.RDAmount;
                        pduVM.TVBInp = duty.TVBInp;
                        pduVM.TVBRate = duty.TVBRate;
                        pduVM.TVBAmount = duty.TVBAmount;
                        pduVM.SDInp = duty.SDInp;
                        pduVM.SD = duty.SD;
                        pduVM.SDAmount = duty.SDAmount;
                        pduVM.VATInp = duty.VATInp;
                        pduVM.VATRate = duty.VATRate;
                        pduVM.VATAmount = duty.VATAmount;
                        pduVM.TVAInp = duty.TVAInp;
                        pduVM.TVARate = duty.TVARate;
                        pduVM.TVAAmount = duty.TVAAmount;
                        pduVM.ATVInp = duty.ATVInp;
                        pduVM.ATVRate = duty.ATVRate;
                        pduVM.ATVAmount = duty.ATVAmount;
                        pduVM.OthersInp = duty.OthersInp;
                        pduVM.OthersRate = duty.OthersRate;
                        pduVM.OthersAmount = duty.OthersAmount;
                        pduVM.UnitCost = duty.UnitCost;
                        pduVM.LineCost = duty.LineCost;
                        pduVM.CreatedBy = Master.CreatedBy;
                        pduVM.CreatedOn = Master.CreatedOn;
                        pduVM.LastModifiedBy = Master.LastModifiedBy;
                        pduVM.LastModifiedOn = Master.LastModifiedOn;
                        pduVM.TransactionType = Master.TransactionType;
                        pduVM.Post = Master.Post;
                        pduVM.Remarks = duty.Remarks;
                        pduVM.BranchId = Master.BranchId;

                        retResults = PurchaseInsertToDuties(pduVM, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }



                    }

                    #endregion ID generated completed,Insert new Information in Header
                }

                #endregion Importm
                #endregion if Transection not Other Insert Issue /Receive

                #region Insert into Details(Insert complete in Header)
                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgNoDataToSave);
                }


                #endregion Validation for Detail

                #region Insert Detail Table

                foreach (PurchaseDetailVM Item in Details.ToList())
                {



                    #region Find Transaction Exist

                    sqlText = "";
                    sqlText +=
                        "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceDetails WHERE PurchaseInvoiceNo='" +
                        Master.PurchaseInvoiceNo + "' ";
                    sqlText += " AND ItemNo=@ItemItemNo";
                    SqlCommand cmdFindId = new SqlCommand(sqlText, VcurrConn);
                    cmdFindId.Transaction = Vtransaction;
                    cmdFindId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                    //IDExist = (int) cmdFindId.ExecuteScalar();
                    objIDExist = cmdFindId.ExecuteScalar();
                    if (objIDExist != null)
                    {
                        IDExist = Convert.ToInt32(objIDExist);
                    }

                    if (IDExist > 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                        MessageVM.PurchasemsgFindExistID);
                    }

                    #endregion Find Transaction Exist

                    #region Insert only DetailTable PurchaseInvoiceDetails
                    PurchaseDetailVM pDet = new PurchaseDetailVM();


                    pDet.BOMId = Item.BOMId;
                    pDet.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                    pDet.LineNo = Item.LineNo;
                    pDet.ItemNo = Item.ItemNo;
                    pDet.Quantity = Item.Quantity;
                    pDet.UnitPrice = Item.UnitPrice;
                    pDet.NBRPrice = Item.NBRPrice;
                    pDet.UOM = Item.UOM;
                    pDet.VATRate = Item.VATRate;
                    pDet.VATAmount = Item.VATAmount;
                    pDet.SubTotal = Item.SubTotal;
                    pDet.Comments = Item.Comments;
                    pDet.CreatedBy = Master.CreatedBy;
                    pDet.CreatedOn = Master.CreatedOn;
                    pDet.LastModifiedBy = Master.LastModifiedBy;
                    pDet.LastModifiedOn = Master.LastModifiedOn;
                    pDet.SD = Item.SD;
                    pDet.SDAmount = Item.SDAmount;
                    pDet.Type = Item.Type;
                    pDet.ProductType = Item.ProductType;
                    pDet.BENumber = Item.BENumber;
                    pDet.InvoiceDateTime = Master.InvoiceDate;
                    pDet.ReceiveDate = Master.ReceiveDate;
                    pDet.Post = Master.Post;
                    pDet.UOMQty = Item.UOMQty;
                    pDet.UOMPrice = Item.UOMPrice;
                    pDet.UOMc = Item.UOMc;
                    pDet.UOMn = Item.UOMn;
                    pDet.RebateRate = Item.RebateRate;
                    pDet.RebateAmount = Item.RebateAmount;
                    pDet.CnFAmount = Item.CnFAmount;
                    pDet.InsuranceAmount = Item.InsuranceAmount;
                    pDet.AssessableValue = Item.AssessableValue;
                    pDet.CDAmount = Item.CDAmount;
                    pDet.RDAmount = Item.RDAmount;
                    pDet.TVBAmount = Item.TVBAmount;
                    pDet.TVAAmount = Item.TVAAmount;
                    pDet.ATVAmount = Item.ATVAmount;
                    pDet.VDSRate = Item.VDSRate;
                    pDet.VDSAmount = Item.VDSAmount;
                    pDet.USDValue = Item.USDValue;
                    pDet.USDVAT = Item.USDVAT;
                    pDet.TDSSection = Item.TDSSection;
                    pDet.TDSCode = Item.TDSCode;
                    pDet.TransactionType = Master.TransactionType;
                    pDet.ReturnId = Master.ReturnId;
                    pDet.OthersAmount = Item.OthersAmount;
                    if (Master.TransactionType == "PurchaseCN" || Master.TransactionType == "PurchaseDN" || Master.TransactionType == "PurchaseReturn")
                    {
                        pDet.ReturnTransactionType = Item.ReturnTransactionType;
                    }
                    pDet.BranchId = Master.BranchId;

                    retResults = PurchaseInsertToDetail(pDet, VcurrConn, Vtransaction);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }



                    #endregion Insert only DetailTable

                    #region Insert Issue and Receive if Transaction is not Other

                    #region Find AVG Rate

                    //decimal AvgRate = productDal.AvgPrice(Item.ItemNo, Master.ReceiveDate, currConn, transaction);

                    #endregion Find AVG Rate


                    string ItemType = productDal.GetProductTypeByItemNo(Item.ItemNo, VcurrConn, Vtransaction);

                    if (ItemType.ToLower() == "trading" && PriceDeclarationTradingProduct == true)
                    {

                        decimal AvgRate = 0;

                        AvgRate = productDal.GetLastNBRPriceFromBOM_VatName(Item.ItemNo, "VAT 1 Kha (Trading)",
                                             Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd"), VcurrConn, Vtransaction);

                        if (AvgRate <= 0)
                        {
                            string NBRPrice = productDal.ProductDTByItemNo(Item.ItemNo, "", VcurrConn, Vtransaction).Rows[0]["NBRPrice"].ToString();
                            if (!string.IsNullOrEmpty(NBRPrice))
                            {
                                AvgRate = Convert.ToDecimal(NBRPrice);
                            }
                            else
                            {
                                DataTable priceData = productDal.ProductDTByItemNo(Item.ItemNo, "", VcurrConn, Vtransaction);
                                decimal amount = Convert.ToDecimal(priceData.Rows[0]["OpeningTotalCost"].ToString());
                                decimal quantity = Convert.ToDecimal(priceData.Rows[0]["OpeningBalance"].ToString());
                                if (quantity > 0)
                                {
                                    AvgRate = amount / quantity;
                                }

                            }

                        }
                        if (AvgRate <= 0)
                        {
                            throw new ArgumentNullException("There have no Price for this Item for VAT 17", "Product Price");
                        }


                        string UOM = productDal.GetProductTypeByItemNo(Item.ItemNo, VcurrConn, Vtransaction);

                        #region Insert to Receive  17 in
                        ReceiveDetailVM rdetVM = new ReceiveDetailVM();
                        rdetVM.ReceiveNo = Master.PurchaseInvoiceNo;
                        rdetVM.ReceiveLineNo = Item.LineNo;
                        rdetVM.ItemNo = Item.ItemNo;
                        rdetVM.Quantity = Item.Quantity;
                        rdetVM.CostPrice = AvgRate;
                        rdetVM.NBRPrice = AvgRate;
                        rdetVM.UOM = UOM;
                        rdetVM.VATRate = 0;
                        rdetVM.VATAmount = 0;
                        rdetVM.SubTotal = AvgRate * Item.UOMQty;
                        rdetVM.CommentsD = Item.Comments;
                        rdetVM.CreatedBy = Master.CreatedBy;
                        rdetVM.CreatedOn = Master.CreatedOn;
                        rdetVM.LastModifiedBy = Master.LastModifiedBy;
                        rdetVM.LastModifiedOn = Master.LastModifiedOn;
                        rdetVM.SD = 0;
                        rdetVM.SDAmount = 0;
                        rdetVM.ReceiveDateTime = Master.ReceiveDate;
                        rdetVM.transactionType = Master.TransactionType;
                        rdetVM.ReturnId = Master.ReturnId;
                        rdetVM.VatName = "VAT 1 Kha (Trading)";
                        rdetVM.UOMQty = Item.UOMQty;
                        rdetVM.UOMPrice = AvgRate;
                        rdetVM.UOMc = 1;
                        rdetVM.UOMn = UOM;
                        rdetVM.Post = Master.Post;
                        rdetVM.BranchId = Master.BranchId;

                        retResults = recDal.ReceiveInsertToDetail(rdetVM, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }



                        #endregion Insert to Receive

                        #region Update Receive

                        sqlText = "";

                        sqlText += "  update ReceiveHeaders set TotalAmount=  ";
                        sqlText += " (select sum(Quantity*CostPrice) from ReceiveDetails ";
                        sqlText += " where ReceiveDetails.ReceiveNo =ReceiveHeaders.ReceiveNo) ";
                        sqlText += " where ReceiveHeaders.ReceiveNo='" + Master.PurchaseInvoiceNo + "' ";

                        SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, VcurrConn);
                        cmdUpdateReceive.Transaction = Vtransaction;
                        transResult = (int)cmdUpdateReceive.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                            MessageVM.PurchasemsgUnableToSaveReceive);
                        }

                        #endregion Update Receive
                    }

                    #region Transaction is TollReceive
                    if (Master.TransactionType == "TollReceive")
                    {

                        ProductDAL bdal1 = new ProductDAL();
                        string BOMId = bdal1.GetBOMIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate, VcurrConn, Vtransaction);
                        //sss
                        sqlText = "";
                        sqlText +=
                            " SELECT  b.RawItemNo,b.UseQuantity,convert (date,b.EffectDate,120)EffectDate,b.UOMn ," +
                            "b.WastageQuantity,b.UOM,b.UOMUQty,b.UOMWQty,b.TransactionType from BOMRaws b  ";
                        sqlText += " where ";
                        sqlText += " BOMId='" + BOMId + "' ";
                        sqlText += "   and (rawitemtype='raw' or rawitemtype='pack') ";



                        DataTable dataTable = new DataTable("RIFB");
                        SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                        cmdRIFB.Transaction = Vtransaction;
                        SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                        reportDataAdapt.Fill(dataTable);

                        if (dataTable == null)
                        {
                            if (TollReceiveWithIssue)
                            {
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                           MessageVM.receiveMsgNoDataToPost);
                            }

                        }
                        else if (dataTable.Rows.Count <= 0)
                        {
                            if (TollReceiveWithIssue)
                                throw new ArgumentNullException(MessageVM.receiveMsgMethodNamePost,
                                                            "There is no Item for Auto Consumption for the Item Name (VAT 4.3 (Toll Receive)) in price declaration.");
                        }
                        else
                        {
                            decimal vQuantity = 0;
                            decimal vWastage = 0;
                            decimal vStock = 0;
                            string rwUom = "";
                            decimal vConvertionRate = 0;
                            decimal AvgRate = 0;

                            foreach (DataRow BRItem in dataTable.Rows)
                            {
                                #region Declare

                                decimal v1Quantity = 0;
                                string v1RawItemNo = "";
                                decimal v1CostPrice = 0;
                                string v1UOM = "";
                                decimal v1SubTotal = 0;
                                decimal v1Wastage = 0;
                                DateTime v1BOMDate = DateTime.Now.Date;
                                string v1FinishItemNo = "";

                                decimal v1UOMQty = 0;
                                decimal v1UOMPrice = 0;
                                decimal v1UOMc = 0;
                                string v1UOMn = "";
                                string v1BOMId = "";
                                decimal v1UOMWastage = 0;
                                string vTransactionType = "";

                                #endregion Declare

                                #region Update Item Qty

                                #region Find Quantity From Products

                                DataTable priceData = productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(), Master.ReceiveDate, VcurrConn, Vtransaction, false);

                                decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                                decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());

                                if (quantity > 0)
                                {
                                    AvgRate = amount / quantity;
                                }
                                else
                                {
                                    AvgRate = 0;
                                }

                                vQuantity = Convert.ToDecimal(BRItem["UseQuantity"].ToString());
                                vWastage = Convert.ToDecimal(BRItem["WastageQuantity"].ToString());

                                #region Issue Settings
                                //CommonDAL commDal = new CommonDAL();
                                //int IssuePlaceQty = Convert.ToInt32(commDal.settings("Issue", "Quantity"));
                                //int IssuePlaceAmt = Convert.ToInt32(commDal.settings("Issue", "Amount"));
                                AvgRate = FormatingNumeric(AvgRate, 4);
                                vQuantity = FormatingNumeric(vQuantity, 4);
                                vWastage = FormatingNumeric(vWastage, 4);
                                #endregion Issue Settings

                                rwUom = BRItem["Uom"].ToString();

                                string rwMajorUom = BRItem["Uomn"].ToString();
                                if (string.IsNullOrEmpty(rwUom))
                                {
                                    throw new ArgumentNullException("ReceiveInsert",
                                                                    "Could not find UOM of raw item");
                                }

                                /*Processing UOM*/

                                UOMDAL uomdal = new UOMDAL();
                                vConvertionRate = uomdal.GetConvertionRate(rwMajorUom, rwUom, "Y", VcurrConn, Vtransaction); //uomc


                                #region valueAssign

                                v1Quantity = (vQuantity + vWastage) * Item.UOMQty;
                                v1Wastage = (vWastage) * Item.UOMQty;
                                v1BOMId = BOMId;
                                v1RawItemNo = BRItem["RawItemNo"].ToString();
                                v1UOM = BRItem["UOM"].ToString();
                                v1CostPrice = AvgRate * vConvertionRate;
                                v1SubTotal = (vQuantity + vWastage) * Item.UOMQty * (AvgRate * vConvertionRate);

                                v1UOMPrice = AvgRate;
                                v1UOMn = BRItem["UOMn"].ToString();
                                v1BOMDate = Convert.ToDateTime(BRItem["EffectDate"].ToString());
                                v1FinishItemNo = Item.ItemNo;
                                v1UOMc = vConvertionRate;
                                v1UOMQty = (vQuantity + vWastage) * Item.UOMQty * vConvertionRate;
                                v1UOMWastage = (vWastage) * Item.UOMQty * vConvertionRate;
                                vTransactionType = BRItem["TransactionType"].ToString();
                                #endregion valueAssign

                                #region Stock
                                string vNegStockAllow = commonDal.settings("Issue", "NegStockAllow");
                                bool NegStockAllow = Convert.ToBoolean(vNegStockAllow == "Y" ? true : false);

                                if (NegStockAllow == false)
                                {
                                    //var stock = productDal.StockInHand(BRItem["RawItemNo"].ToString(),
                                    //                                       Master.ReceiveDateTime,
                                    //                                   currConn, transaction).ToString();

                                    decimal stock = Convert.ToDecimal(productDal.AvgPriceNew(BRItem["RawItemNo"].ToString(),
                                                                           Master.ReceiveDate,
                                                         VcurrConn, Vtransaction, false).Rows[0]["Quantity"].ToString());

                                    vStock = Convert.ToDecimal(stock);


                                    if ((vStock - v1UOMQty) < 0)
                                    {
                                        string FinName = string.Empty;
                                        string FinCode = string.Empty;
                                        string RawName = string.Empty;
                                        string RawCode = string.Empty;
                                        DataTable finDt = new DataTable();
                                        finDt = productDal.GetProductInfoByItemNo(Item.ItemNo);
                                        foreach (DataRow FinItem in finDt.Rows)
                                        {
                                            FinName = FinItem["ProductName"].ToString();
                                            FinCode = FinItem["ProductCode"].ToString();
                                        }
                                        DataTable rawDt = new DataTable();
                                        rawDt =
                                            productDal.GetProductInfoByItemNo(BRItem["RawItemNo"].ToString());
                                        foreach (DataRow RawItem in rawDt.Rows)
                                        {
                                            RawName = RawItem["ProductName"].ToString();
                                            RawCode = RawItem["ProductCode"].ToString();
                                        }

                                        throw new ArgumentNullException("ReceiveInsert",
                                                                        "Stock not Available for Finish Item( Name: " +
                                                                        FinName + " & Code: " + FinCode +
                                                                        " ) \n and consumtion Material ( Name: " +
                                                                        RawName + " & Code: " + RawCode + " )");
                                    }
                                }

                                #endregion Stock

                                #endregion Find Quantity From Products


                                #region Find Quantity From Transaction

                                IssueDetailVM IdVM = new IssueDetailVM();
                                IdVM.IssueNo = Master.PurchaseInvoiceNo;
                                IdVM.IssueLineNo = "1";
                                IdVM.ItemNo = v1RawItemNo;
                                IdVM.Quantity = FormatingNumeric(v1Quantity, 4);
                                IdVM.NBRPrice = AvgRate;
                                IdVM.CostPrice = FormatingNumeric(v1CostPrice, 4);
                                IdVM.UOM = v1UOM;
                                IdVM.VATRate = 0;
                                IdVM.VATAmount = 0;
                                IdVM.SubTotal = FormatingNumeric(v1SubTotal, 4);
                                IdVM.CommentsD = Item.Comments;
                                IdVM.CreatedBy = Master.CreatedBy;
                                IdVM.CreatedOn = Master.CreatedOn;
                                IdVM.LastModifiedBy = Master.LastModifiedBy;
                                IdVM.LastModifiedOn = Master.LastModifiedOn;
                                IdVM.ReceiveNo = Master.PurchaseInvoiceNo;
                                IdVM.IssueDateTime = Master.ReceiveDate;
                                IdVM.SD = 0;
                                IdVM.SDAmount = 0;
                                IdVM.Wastage = v1Wastage;
                                IdVM.BOMDate = Convert.ToDateTime(v1BOMDate).ToString("MM/dd/yyyy");
                                IdVM.FinishItemNo = v1FinishItemNo;
                                IdVM.transactionType = Master.TransactionType;
                                IdVM.IssueReturnId = Master.ReturnId;
                                IdVM.UOMQty = FormatingNumeric(v1UOMQty, 4);
                                IdVM.UOMPrice = FormatingNumeric(v1UOMPrice, 4);
                                IdVM.UOMc = v1UOMc;
                                IdVM.UOMn = v1UOMn;
                                IdVM.UOMWastage = v1UOMWastage;
                                IdVM.BOMId = Convert.ToInt32(v1BOMId);
                                IdVM.Post = "N";
                                IdVM.BranchId = Master.BranchId;

                                retResults = issDal.IssueInsertToDetails(IdVM, VcurrConn, Vtransaction);
                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, retResults[1]);
                                }



                                #region Update Issue

                                sqlText = "";
                                sqlText += " update IssueHeaders set ";
                                sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                                sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                                sqlText += " where (IssueHeaders.IssueNo= '" + Master.PurchaseInvoiceNo + "')";

                                SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                                cmdUpdateIssue.Transaction = Vtransaction;
                                transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert,
                                                                    MessageVM.receiveMsgUnableToSaveIssue);
                                }

                                #endregion Update Issue

                                #endregion Qty  check and Update

                                #endregion Qty  check and Update
                            }
                        }
                    }


                    if (Master.TransactionType == "TollReceive")
                    {
                        //decimal AvgRate = productDal.AvgPriceNew(Item.ItemNo,Master.ReceiveDate, currConn, transaction,false);

                        string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                            VcurrConn, Vtransaction).ToString();

                        decimal NBRPrice = productDal.GetLastNBRPriceFromBOM_VatName(FinishItemIdFromOH, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                            VcurrConn, Vtransaction);

                        ItemType = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, VcurrConn, Vtransaction);
                        string UOM = productDal.GetProductTypeByItemNo(FinishItemIdFromOH, VcurrConn, Vtransaction);

                        if (!string.IsNullOrEmpty(ItemType))
                        {
                            if (ItemType == "Finish")
                            {
                                #region Insert to Receive  17 in
                                ReceiveDetailVM rdetVM = new ReceiveDetailVM();
                                rdetVM.ReceiveNo = Master.PurchaseInvoiceNo;
                                rdetVM.ReceiveLineNo = Item.LineNo;
                                rdetVM.ItemNo = FinishItemIdFromOH;
                                rdetVM.Quantity = Item.Quantity;
                                rdetVM.CostPrice = NBRPrice;
                                rdetVM.NBRPrice = NBRPrice;
                                rdetVM.UOM = UOM;
                                rdetVM.VATRate = 0;
                                rdetVM.VATAmount = 0;
                                rdetVM.SubTotal = NBRPrice * Item.UOMQty;
                                rdetVM.CommentsD = Item.Comments;
                                rdetVM.CreatedBy = Master.CreatedBy;
                                rdetVM.CreatedOn = Master.CreatedOn;
                                rdetVM.LastModifiedBy = Master.LastModifiedBy;
                                rdetVM.LastModifiedOn = Master.LastModifiedOn;
                                rdetVM.SD = 0;
                                rdetVM.SDAmount = 0;
                                rdetVM.ReceiveDateTime = Master.ReceiveDate;
                                rdetVM.transactionType = Master.TransactionType;
                                rdetVM.ReturnId = Master.ReturnId;
                                rdetVM.VatName = "VAT 4.3 (Toll Receive)";
                                rdetVM.UOMQty = Item.UOMQty;
                                rdetVM.UOMPrice = NBRPrice;
                                rdetVM.UOMc = 1;
                                rdetVM.UOMn = UOM;
                                rdetVM.Post = Master.Post;
                                rdetVM.BranchId = Master.BranchId;

                                retResults = recDal.ReceiveInsertToDetail(rdetVM, VcurrConn, Vtransaction);
                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                                }



                                #endregion Insert to Receive

                                #region Update Receive

                                sqlText = "";

                                sqlText += "  update ReceiveHeaders set TotalAmount=  ";
                                sqlText += " (select sum(Quantity*CostPrice) from ReceiveDetails ";
                                sqlText += " where ReceiveDetails.ReceiveNo =ReceiveHeaders.ReceiveNo) ";
                                sqlText += " where ReceiveHeaders.ReceiveNo='" + Master.PurchaseInvoiceNo + "' ";

                                SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, VcurrConn);
                                cmdUpdateReceive.Transaction = Vtransaction;
                                transResult = (int)cmdUpdateReceive.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                    MessageVM.PurchasemsgUnableToSaveReceive);
                                }

                                #endregion Update Receive
                            }
                            else if (ItemType == "Raw"  //16 in
                                   || ItemType == "Pack"
                                || ItemType == "WIP"
                                || ItemType == "Trading")
                            {
                                #region Insert only DetailTable PurchaseInvoiceDetails

                                PurchaseDetailVM pDetVM = new PurchaseDetailVM();
                                pDetVM.PurchaseInvoiceNo = Master.PurchaseInvoiceNo;
                                pDetVM.LineNo = Item.LineNo;
                                pDetVM.ItemNo = FinishItemIdFromOH;
                                pDetVM.Quantity = Item.Quantity;
                                pDetVM.UnitPrice = NBRPrice;
                                pDetVM.NBRPrice = NBRPrice;
                                pDetVM.UOM = UOM;
                                pDetVM.VATRate = 0;
                                pDetVM.VATAmount = 0;
                                pDetVM.SubTotal = NBRPrice * Item.UOMQty;
                                pDetVM.Comments = Item.Comments;
                                pDetVM.CreatedBy = Master.CreatedBy;
                                pDetVM.CreatedOn = Master.CreatedOn;
                                pDetVM.LastModifiedBy = Master.LastModifiedBy;
                                pDetVM.LastModifiedOn = Master.LastModifiedOn;
                                pDetVM.SD = 0;
                                pDetVM.SDAmount = 0;
                                pDetVM.Type = Item.Type;
                                pDetVM.ProductType = Item.ProductType;
                                pDetVM.BENumber = Item.BENumber;
                                pDetVM.InvoiceDateTime = Master.InvoiceDate;
                                pDetVM.ReceiveDate = Master.ReceiveDate;
                                pDetVM.Post = Master.Post;
                                pDetVM.UOMQty = Item.UOMQty;
                                pDetVM.UOMPrice = NBRPrice;
                                pDetVM.UOMc = 1;
                                pDetVM.UOMn = UOM;
                                pDetVM.RebateRate = 0;
                                pDetVM.RebateAmount = 0;
                                pDetVM.CnFAmount = 0;
                                pDetVM.InsuranceAmount = 0;
                                pDetVM.AssessableValue = 0;
                                pDetVM.CDAmount = 0;
                                pDetVM.RDAmount = 0;
                                pDetVM.TVBAmount = 0;
                                pDetVM.TVAAmount = 0;
                                pDetVM.ATVAmount = 0;
                                pDetVM.USDValue = 0;
                                pDetVM.USDVAT = 0;
                                pDetVM.TransactionType = "TollReceive-WIP";
                                pDetVM.ReturnId = Master.ReturnId;
                                pDetVM.OthersAmount = Item.OthersAmount;
                                pDetVM.BranchId = Master.BranchId;
                                retResults = PurchaseInsertToDetail(pDetVM, VcurrConn, Vtransaction);

                                if (retResults[0] != "Success")
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                                }



                                #endregion Insert only DetailTable
                            }
                        }

                    }

                    #endregion Transaction is Trading

                    #region Transaction is InputService

                    if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport")
                    {
                        decimal PurchasePrice = productDal.PurchasePrice(Item.ItemNo, Master.PurchaseInvoiceNo, VcurrConn, Vtransaction);

                        #region Insert to Issue

                        IssueDetailVM iDetVM = new IssueDetailVM();
                        iDetVM.IssueNo = Master.PurchaseInvoiceNo;
                        iDetVM.IssueLineNo = Item.LineNo;
                        iDetVM.ItemNo = Item.ItemNo;
                        iDetVM.Quantity = Item.Quantity;
                        iDetVM.NBRPrice = 0;
                        if (Master.TransactionType == "InputServiceImport")
                        {
                            PurchasePrice = PurchasePrice + Convert.ToDecimal(Item.ATVAmount) + Convert.ToDecimal(Item.TVAAmount);

                            iDetVM.CostPrice = PurchasePrice;
                            iDetVM.UOM = Item.UOM;
                            iDetVM.VATRate = 0;
                            iDetVM.VATAmount = 0;
                            iDetVM.SubTotal = PurchasePrice * Item.UOMQty;
                        }
                        else if (Master.TransactionType == "InputService")
                        {

                            iDetVM.CostPrice = Item.SubTotal;
                            iDetVM.UOM = Item.UOM;
                            iDetVM.VATRate = 0;
                            iDetVM.VATAmount = 0;
                            iDetVM.SubTotal = Item.SubTotal * Item.UOMQty;
                        }


                        iDetVM.CommentsD = Item.Comments;
                        iDetVM.CreatedBy = Master.CreatedBy;
                        iDetVM.CreatedOn = Master.CreatedOn;
                        iDetVM.LastModifiedBy = Master.LastModifiedBy;
                        iDetVM.LastModifiedOn = Master.LastModifiedOn;
                        iDetVM.ReceiveNo = Master.PurchaseInvoiceNo;
                        iDetVM.IssueDateTime = Master.ReceiveDate;
                        iDetVM.SD = 0;
                        iDetVM.SDAmount = 0;
                        iDetVM.Wastage = 0;
                        iDetVM.BOMDate = "1900/01/01";
                        iDetVM.FinishItemNo = "0";
                        iDetVM.transactionType = Master.TransactionType;
                        iDetVM.IssueReturnId = Master.ReturnId;
                        iDetVM.UOMQty = Item.UOMQty;
                        iDetVM.UOMPrice = Item.UOMPrice;
                        iDetVM.UOMc = Item.UOMc;
                        iDetVM.UOMn = Item.UOMn;
                        iDetVM.UOMWastage = 0;
                        iDetVM.Post = Master.Post;
                        iDetVM.BranchId = Master.BranchId;


                        retResults = issDal.IssueInsertToDetails(iDetVM, VcurrConn, Vtransaction);
                        if (retResults[0] != "Success")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                        }



                        #endregion Insert to Issue

                        #region Update Issue

                        sqlText = "";
                        sqlText += " update IssueHeaders set ";
                        sqlText += " TotalAmount= (select sum(Quantity*CostPrice) from IssueDetails";
                        sqlText += "  where IssueDetails.IssueNo =IssueHeaders.IssueNo)";
                        sqlText += " where (IssueHeaders.IssueNo= '" + Master.PurchaseInvoiceNo + "')";

                        SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, VcurrConn);
                        cmdUpdateIssue.Transaction = Vtransaction;
                        transResult = (int)cmdUpdateIssue.ExecuteNonQuery();

                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                            MessageVM.PurchasemsgUnableToSaveIssue);
                        }

                        #endregion Update Issue

                    }

                    #endregion Transaction is InputService

                    #endregion Insert Issue and Receive if Transaction is not Other

                }


                #endregion Insert Detail Table
                #endregion Insert into Details(Insert complete in Header)

                #region Tracking

                if (Trackings.Count() > 0)
                {
                    if (Trackings[0].transactionType == "Purchase_Return")
                    {
                        Trackings[0].ReturnPurchaseID = Master.PurchaseInvoiceNo;
                        string trackingUpdate = string.Empty;
                        TrackingDAL trackingDal = new TrackingDAL();
                        trackingUpdate = trackingDal.TrackingUpdate(Trackings, Vtransaction, VcurrConn);

                        if (trackingUpdate == "Fail")
                        {
                            throw new ArgumentNullException(MessageVM.receiveMsgMethodNameInsert, "Tracking Information not added.");
                        }
                    }
                    else
                    {


                        foreach (TrackingVM tracking in Trackings.ToList())
                        {

                            #region Find Heading1 Existence

                            sqlText = "";
                            sqlText += "select COUNT(Heading1) from Trackings WHERE Heading1 = @trackingHeading1";
                            SqlCommand cmdFindHeading1 = new SqlCommand(sqlText, VcurrConn);
                            cmdFindHeading1.Transaction = Vtransaction;

                            cmdFindHeading1.Parameters.AddWithValue("@trackingHeading1", tracking.Heading1);

                            objIDExist = cmdFindHeading1.ExecuteScalar();
                            if (objIDExist != null)
                            {
                                IDExist = Convert.ToInt32(objIDExist);
                            }

                            if (IDExist > 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                "Requested Tracking Information (" + tracking.Heading1 + ") already added.");
                            }

                            #endregion Find Heading1 Existence

                            #region Find Heading2 Existence

                            sqlText = "";
                            sqlText += "select COUNT(Heading2) from Trackings WHERE Heading2 =@trackingHeading2";
                            SqlCommand cmdFindHeading2 = new SqlCommand(sqlText, VcurrConn);
                            cmdFindHeading2.Transaction = Vtransaction;

                            cmdFindHeading2.Parameters.AddWithValue("@trackingHeading2", tracking.Heading2);

                            objIDExist = cmdFindHeading2.ExecuteScalar();
                            if (objIDExist != null)
                            {
                                IDExist = Convert.ToInt32(objIDExist);
                            }

                            if (IDExist > 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                 "Requested Tracking Information (" + tracking.Heading2 + ") already added.");
                            }

                            #endregion Find Heading2 Existence


                            sqlText = "";
                            sqlText += " insert into Trackings";
                            sqlText += " (";

                            sqlText += " PurchaseInvoiceNo,";
                            sqlText += " ItemNo,";
                            sqlText += " TrackLineNo,";
                            sqlText += " Heading1,";
                            sqlText += " Heading2,";
                            sqlText += " Quantity,";
                            sqlText += " UnitPrice,";
                            sqlText += " IsPurchase,";
                            sqlText += " IsIssue,";
                            sqlText += " IsReceive,";
                            sqlText += " IsSale,";
                            sqlText += " Post,";
                            sqlText += " ReceivePost,";
                            sqlText += " SalePost,";
                            sqlText += " IssuePost,";
                            sqlText += " CreatedBy,";
                            sqlText += " CreatedOn,";
                            sqlText += " LastModifiedBy,";
                            sqlText += " LastModifiedOn,";
                            sqlText += " BranchId";
                            sqlText += " )";
                            sqlText += " values";
                            sqlText += " (";

                            sqlText += "'" + Master.PurchaseInvoiceNo + "',";
                            sqlText += "@trackingItemNo,";
                            sqlText += "@trackingTrackingLineNo,";
                            sqlText += "@trackingHeading1,";
                            sqlText += "@trackingHeading2,";
                            sqlText += "@trackingQuantity,";
                            sqlText += "@trackingUnitPrice,";
                            sqlText += "@trackingIsPurchase,";
                            sqlText += "@trackingIsIssue,";
                            sqlText += "@trackingIsReceive,";
                            sqlText += "@trackingIsSale,";
                            sqlText += "@MasterPost,";
                            sqlText += "'N',";
                            sqlText += "'N',";
                            sqlText += "'N',";

                            sqlText += "@MasterCreatedBy,";
                            sqlText += "@MasterCreatedOn,";
                            sqlText += "@MasterLastModifiedBy,";
                            sqlText += "@MasterLastModifiedOn,";
                            sqlText += "@BranchId";

                            sqlText += ")";


                            SqlCommand cmdInsertTrackings = new SqlCommand(sqlText, VcurrConn);
                            cmdInsertTrackings.Transaction = Vtransaction;
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedBy", Master.CreatedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterCreatedOn", Master.CreatedOn);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);

                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingTrackingLineNo", tracking.TrackingLineNo);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingHeading2", tracking.Heading2);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingQuantity", tracking.Quantity);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingUnitPrice", tracking.UnitPrice);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsPurchase", tracking.IsPurchase);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsIssue", tracking.IsIssue);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsReceive", tracking.IsReceive);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@trackingIsSale", tracking.IsSale);
                            cmdInsertTrackings.Parameters.AddWithValueAndNullHandle("@BranchId", Master.BranchId);

                            transResult = (int)cmdInsertTrackings.ExecuteNonQuery();
                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                MessageVM.PurchasemsgSaveNotSuccessfully);
                            }
                        }

                    }

                }

                #endregion Tracking

                #region TrackingWithSale
                if (Master.Post.ToLower() == "y")
                {

                    bool TrackingWithSale = Convert.ToBoolean(commonDal.settingValue("Purchase", "TrackingWithSale") == "Y" ? true : false);
                    if (TrackingWithSale)
                    {
                        DataTable tracDt = new DataTable();
                        sqlText = "";
                        sqlText = @"SELECT    
                                    PurchaseInvoiceDetails.PurchaseInvoiceNo,
                                    PurchaseInvoiceDetails.InvoiceDateTime,
                                    PurchaseInvoiceDetails.ReceiveDate,
                                    PurchaseInvoiceDetails.ItemNo, 
                                    isnull(PurchaseInvoiceDetails.BENumber,'N/A')BENumber ,
                                    isnull(PurchaseInvoiceDetails.Quantity,0)Quantity,
                                    isnull(PurchaseInvoiceDetails.UOM,'N/A')UOM ,
                                    isnull(PurchaseInvoiceDetails.VATRate,0)VATRate,
                                    isnull(PurchaseInvoiceDetails.ReturnTransactionType,'')ReturnTransactionType,
                                    isnull(PurchaseInvoiceHeaders.CustomHouse,'')CustomHouse
                                    FROM dbo.PurchaseInvoiceDetails 
                                    left outer join PurchaseInvoiceHeaders on PurchaseInvoiceHeaders.PurchaseInvoiceNo=PurchaseInvoiceDetails.PurchaseInvoiceNo
                                    WHERE ";
                        sqlText += @"   (PurchaseInvoiceDetails.PurchaseInvoiceNo = '" + Master.PurchaseInvoiceNo + "')";
                        sqlText += @"  order by PurchaseInvoiceDetails.ItemNo";
                        SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                        cmdRIFB.Transaction = Vtransaction;
                        SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                        reportDataAdapt.Fill(tracDt);

                        foreach (DataRow dRow in tracDt.Rows)
                        {
                            #region Insert only DetailTable PurchaseInvoiceDetails
                            // InMethod Parameter
                            sqlText = "";
                            sqlText += " insert into PurchaseSaleTrackings(";
                            sqlText += " PurchaseInvoiceNo                                   ,";
                            sqlText += " PurchaseInvoiceDateTime                                   ,";
                            sqlText += " ReceiveDate                                   ,";
                            sqlText += " CustomHouse                                   ,";
                            sqlText += " ItemNo                                   ,";
                            sqlText += " BENumber                                   ,";
                            sqlText += " SalesInvoiceNo                                   ,";
                            sqlText += " SaleInvoiceDateTime                                   ,";
                            sqlText += " IsSold";
                            sqlText += " )";
                            sqlText += " values(	";
                            sqlText += "'" + dRow["PurchaseInvoiceNo"].ToString() + "',";
                            sqlText += "'" + dRow["InvoiceDateTime"].ToString() + "',";
                            sqlText += "'" + dRow["ReceiveDate"].ToString() + "',";
                            sqlText += "'" + dRow["CustomHouse"].ToString() + "',";
                            sqlText += "'" + dRow["ItemNo"].ToString() + "',";
                            sqlText += "'" + dRow["BENumber"].ToString() + "',";
                            sqlText += "'0',";
                            sqlText += "'01/01/1900',";
                            sqlText += "'0'";
                            sqlText += ")	";

                            decimal qty = Convert.ToDecimal(dRow["Quantity"]);
                            for (int i = 0; i < qty; i++)
                            {
                                SqlCommand cmdInsDetail = new SqlCommand(sqlText, VcurrConn);
                                cmdInsDetail.Transaction = Vtransaction;
                                transResult = (int)cmdInsDetail.ExecuteNonQuery();

                                if (transResult <= 0)
                                {
                                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                                }
                            }


                            #endregion Insert only DetailTable
                        }
                    }
                }


                #endregion TrackingWithSale


                #region TDS
                sqlText = "";
                sqlText += @"delete from PurchaseTDSs where PurchaseInvoiceNo=@PurchaseInvoiceNo

                                insert into PurchaseTDSs(PurchaseInvoiceNo,TDSCode,PurchaseBillAmount,TDSAmount,Post)
                                select distinct PurchaseInvoiceNo,TDSCode,sum(SubTotal)SubTotal,0,'N' from PurchaseInvoiceDetails
                                where PurchaseInvoiceNo=@PurchaseInvoiceNo
                                group by PurchaseInvoiceNo,TDSCode";


                SqlCommand cmdInserttds = new SqlCommand(sqlText, VcurrConn);
                cmdInserttds.Transaction = Vtransaction;
                cmdInserttds.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                cmdInserttds.ExecuteNonQuery();
                #endregion
                #region return Current ID and Post Status




                #endregion Prefetch

                #region Commit


                if (vcurrConn == null)
                {
                    if (Vtransaction != null)
                    {
                        //if (transResult > 0)
                        //{
                        Vtransaction.Commit();
                        //}
                    }
                }

                #endregion Commit
                #region SuccessResult
                retResults = new string[5];
                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "" + Master.PurchaseInvoiceNo;
                retResults[3] = "N";
                retResults[4] = Id;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            //catch (SqlException sqlex)
            //{
            //    if (vcurrConn == null)
            //    {
            //        transaction.Rollback();
            //    }
            //    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            //    //throw sqlex;
            //}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (vcurrConn == null)
                {
                    Vtransaction.Rollback();
                }
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            finally
            {
                if (vcurrConn == null)
                {
                    if (VcurrConn != null)
                    {
                        if (VcurrConn.State == ConnectionState.Open)
                        {
                            VcurrConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] PurchasePostX(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, List<PurchaseDutiesVM> Duties, List<TrackingVM> Trackings,
            SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            bool PriceDeclarationTradingProduct = false;
            //SqlConnection currConn = null;
            //SqlTransaction transaction = null;
            SqlConnection vcurrConn = VcurrConn;
            if (vcurrConn == null)
            {
                VcurrConn = null;
                Vtransaction = null;
            }
            IssueDAL issDal = new IssueDAL();
            ReceiveDAL recDal = new ReceiveDAL();
            int transResult = 0;
            string sqlText = "";
            string vProductType = "";

            ProductDAL productDal = new ProductDAL();
            //DateTime MinDate = DateTime.MinValue;
            //DateTime MaxDate = DateTime.MaxValue;

            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region Validation for Header

                if (Master == null)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.purchaseMsgNoDataToPost);
                }
                else if (Convert.ToDateTime(Master.ReceiveDate) < DateTime.MinValue || Convert.ToDateTime(Master.ReceiveDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.purchaseMsgCheckDatePost);

                }


                #endregion Validation for Header

                #region open connection and transaction
                if (vcurrConn == null)
                {
                    VcurrConn = _dbsqlConnection.GetConnection(connVM);
                    if (VcurrConn.State != ConnectionState.Open)
                    {
                        VcurrConn.Open();
                    }
                    Vtransaction = VcurrConn.BeginTransaction(MessageVM.PurchasemsgMethodNameInsert);

                }
                CommonDAL commonDal = new CommonDAL();
                bool TollReceiveWithIssue = Convert.ToBoolean(commonDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);


                #endregion open connection and transaction

                #region Fiscal Year Check

                string transactionDate = Master.ReceiveDate;
                string transactionYearCheck = Convert.ToDateTime(Master.ReceiveDate).ToString("yyyy-MM-dd");
                if (Convert.ToDateTime(transactionYearCheck) > DateTime.MinValue || Convert.ToDateTime(transactionYearCheck) < DateTime.MaxValue)
                {

                    #region YearLock
                    sqlText = "";

                    sqlText += "select distinct isnull(PeriodLock,'Y') MLock,isnull(GLLock,'Y')YLock from fiscalyear " +
                                                   " where '" + transactionYearCheck + "' between PeriodStart and PeriodEnd";

                    DataTable dataTable = new DataTable("ProductDataT");
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, VcurrConn);
                    cmdIdExist.Transaction = Vtransaction;
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdIdExist);
                    reportDataAdapt.Fill(dataTable);

                    if (dataTable == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }

                    else if (dataTable.Rows.Count <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                    }
                    else
                    {
                        if (dataTable.Rows[0]["MLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                        else if (dataTable.Rows[0]["YLock"].ToString() != "N")
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearisLock);
                        }
                    }
                    #endregion YearLock
                    #region YearNotExist
                    sqlText = "";
                    sqlText = sqlText + "select  min(PeriodStart) MinDate, max(PeriodEnd)  MaxDate from fiscalyear";

                    DataTable dtYearNotExist = new DataTable("ProductDataT");

                    SqlCommand cmdYearNotExist = new SqlCommand(sqlText, VcurrConn);
                    cmdYearNotExist.Transaction = Vtransaction;
                    //countId = (int)cmdIdExist.ExecuteScalar();

                    SqlDataAdapter YearNotExistDataAdapt = new SqlDataAdapter(cmdYearNotExist);
                    YearNotExistDataAdapt.Fill(dtYearNotExist);

                    if (dtYearNotExist == null)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }

                    else if (dtYearNotExist.Rows.Count < 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                    }
                    else
                    {
                        if (Convert.ToDateTime(transactionYearCheck) < Convert.ToDateTime(dtYearNotExist.Rows[0]["MinDate"].ToString())
                            || Convert.ToDateTime(transactionYearCheck) > Convert.ToDateTime(dtYearNotExist.Rows[0]["MaxDate"].ToString()))
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.msgFiscalYearNotExist);
                        }
                    }
                    #endregion YearNotExist

                }


                #endregion Fiscal Year CHECK


                #region Find ID for Post

                sqlText = "";

                sqlText = sqlText +
                          "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo";

                SqlCommand cmdFindIdUpd = new SqlCommand(sqlText, VcurrConn);
                cmdFindIdUpd.Transaction = Vtransaction;
                cmdFindIdUpd.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                int IDExist = (int)cmdFindIdUpd.ExecuteScalar();

                if (IDExist <= 0)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                                                    MessageVM.purchaseMsgUnableFindExistIDPost);
                }

                #endregion Find ID for Update


                #region ID check completed,update Information in Header



                #region update Header
                PostVM postVm = new PostVM();
                postVm.LastModifiedBy = Master.LastModifiedBy;
                postVm.LastModifiedOn = Master.LastModifiedOn;
                postVm.Post = Master.Post;
                postVm.Code = Master.PurchaseInvoiceNo;

                retResults = PurchaseAllPost(postVm);
                if (retResults[0] != "Success")
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, retResults[1]);
                }

                #region Comments

                //sqlText = "";

                //sqlText += " update PurchaseInvoiceHeaders set  ";
                //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "' ,";
                //sqlText += " Post= '" + Master.Post + "' ";
                //sqlText += " where  PurchaseInvoiceNo= '" + Master.PurchaseInvoiceNo + "' ";


                //SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                //cmdUpdate.Transaction = transaction;
                //transResult = (int)cmdUpdate.ExecuteNonQuery();
                //if (transResult <= 0)
                //{
                //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                //}
                #endregion Comments



                #endregion update Header

                #region PriceDeclarationTradingProduct
                PriceDeclarationTradingProduct = Convert.ToBoolean(commonDal.settingValue("PriceDeclaration", "TradingProduct") == "Y" ? true : false);


                foreach (PurchaseDetailVM Item in Details.ToList())
                {
                    DataTable dtItemType = productDal.GetProductInfoByItemNo(Item.ItemNo);
                    if (dtItemType.Rows[0]["IsRaw"].ToString().ToLower() == "trading")
                    {
                        vProductType = "trading";
                    }
                }

                if (vProductType.ToLower() == "trading" && PriceDeclarationTradingProduct == true)
                {
                    #region update Receive
                    postVm = new PostVM();
                    postVm.LastModifiedBy = Master.LastModifiedBy;
                    postVm.LastModifiedOn = Master.LastModifiedOn;
                    postVm.Post = Master.Post;
                    postVm.Code = Master.PurchaseInvoiceNo;

                    retResults = recDal.ReceiveAllPost(postVm);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, retResults[1]);
                    }

                    //sqlText = "";
                    //sqlText += " update ReceiveHeaders set";
                    //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "' ,";
                    //sqlText += " Post= '" + Master.Post + "' ";
                    //sqlText += " where  ReceiveNo = '" + Master.PurchaseInvoiceNo + "'";

                    //SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, currConn);
                    //cmdUpdateReceive.Transaction = transaction;
                    //transResult = (int)cmdUpdateReceive.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}

                    //sqlText = "";
                    //sqlText += " update ReceiveDetails set";
                    //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "' ,";
                    //sqlText += " Post= '" + Master.Post + "' ";
                    //sqlText += " where  ReceiveNo = '" + Master.PurchaseInvoiceNo + "'";

                    //SqlCommand cmdUpdateReceiveD = new SqlCommand(sqlText, currConn);
                    //cmdUpdateReceiveD.Transaction = transaction;
                    //transResult = (int)cmdUpdateReceiveD.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}


                    #endregion update Receive
                }
                #endregion PriceDeclarationTradingProduct

                #region Transaction Not Other

                #region Transaction is TollReceive

                if (Master.TransactionType == "TollReceive")
                {
                    #region update Issue
                    postVm = new PostVM();
                    postVm.LastModifiedBy = Master.LastModifiedBy;
                    postVm.LastModifiedOn = Master.LastModifiedOn;
                    postVm.Post = Master.Post;
                    postVm.Code = Master.PurchaseInvoiceNo;
                    retResults = issDal.IssueAllPost(postVm);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, retResults[1]);
                    }

                    //sqlText = "";
                    //sqlText += " update IssueHeaders set ";
                    //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                    //sqlText += " Post= '" + Master.Post + "' ";
                    //sqlText += " where  IssueNo= '" + Master.PurchaseInvoiceNo + "' ";


                    //SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                    //cmdUpdateIssue.Transaction = transaction;
                    //transResult = (int)cmdUpdateIssue.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}

                    #endregion update Issue

                    #region update Receive
                    postVm = new PostVM();
                    postVm.LastModifiedBy = Master.LastModifiedBy;
                    postVm.LastModifiedOn = Master.LastModifiedOn;
                    postVm.Post = Master.Post;
                    postVm.Code = Master.PurchaseInvoiceNo;
                    retResults = recDal.ReceiveAllPost(postVm);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, retResults[1]);
                    }

                    //sqlText = "";
                    //sqlText += " update ReceiveHeaders set";
                    //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "' ,";
                    //sqlText += " Post= '" + Master.Post + "' ";
                    //sqlText += " where  ReceiveNo = '" + Master.PurchaseInvoiceNo + "'";

                    //SqlCommand cmdUpdateReceive = new SqlCommand(sqlText, currConn);
                    //cmdUpdateReceive.Transaction = transaction;
                    //transResult = (int)cmdUpdateReceive.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}

                    #endregion update Receive
                }

                #endregion Transaction is TollReceive

                #region Transaction is InputService

                if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport")
                {
                    #region update Issue
                    postVm = new PostVM();
                    postVm.LastModifiedBy = Master.LastModifiedBy;
                    postVm.LastModifiedOn = Master.LastModifiedOn;
                    postVm.Post = Master.Post;
                    postVm.Code = Master.PurchaseInvoiceNo;
                    retResults = issDal.IssueAllPost(postVm);
                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, retResults[1]);
                    }

                    //sqlText = "";

                    //sqlText += " update IssueHeaders set ";
                    //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "' ,";
                    //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                    //sqlText += " Post= '" + Master.Post + "' ";
                    //sqlText += " where  IssueNo= '" + Master.PurchaseInvoiceNo + "' ";


                    //SqlCommand cmdUpdateIssue = new SqlCommand(sqlText, currConn);
                    //cmdUpdateIssue.Transaction = transaction;
                    //transResult = (int)cmdUpdateIssue.ExecuteNonQuery();
                    //if (transResult <= 0)
                    //{
                    //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                    //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                    //}

                    #endregion update Issue

                }

                #endregion Transaction is InputService

                #region Import s

                if (Master.TransactionType == "Import"
            || Master.TransactionType == "ServiceImport"
            || Master.TransactionType == "ServiceNSImport"
            || Master.TransactionType == "TradingImport"
            || Master.TransactionType == "InputServiceImport")
                {
                    if (Duties.Count() < 0)
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                                                        MessageVM.PurchasemsgNoDataPostToPost);
                    }


                    foreach (PurchaseDutiesVM duty in Duties.ToList())
                    {
                        #region update Duties

                        sqlText = "";

                        sqlText += " update PurchaseInvoiceDuties set  ";
                        sqlText += " LastModifiedBy= @MasterLastModifiedBy , ";
                        sqlText += " LastModifiedOn= @MasterLastModifiedOn, ";
                        sqlText += " Post= @MasterPost ";
                        sqlText += " where  PurchaseInvoiceNo= @MasterPurchaseInvoiceNo ";
                        //sqlText += " and  ItemNo= '" + duty.ItemNo + "' ";


                        SqlCommand cmdUpdateDuty = new SqlCommand(sqlText, VcurrConn);
                        cmdUpdateDuty.Transaction = Vtransaction;
                        cmdUpdateDuty.Parameters.AddWithValue("@MasterLastModifiedBy", Master.LastModifiedBy);
                        cmdUpdateDuty.Parameters.AddWithValue("@MasterLastModifiedOn", Master.LastModifiedOn);
                        cmdUpdateDuty.Parameters.AddWithValue("@MasterPost", Master.Post);
                        cmdUpdateDuty.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                        transResult = (int)cmdUpdateDuty.ExecuteNonQuery();
                        if (transResult <= 0)
                        {
                            throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                            MessageVM.PurchasemsgUpdateNotSuccessfully);
                        }

                        #endregion update Duties
                    }
                }

                #endregion Import

                #endregion Transaction Not Other


                #endregion ID check completed,update Information in Header

                #region Update into Details(Update complete in Header)
                #region Validation for Detail

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.PurchasemsgNoDataToUpdate);
                }


                #endregion Validation for Detail

                #region Update Detail Table

                foreach (PurchaseDetailVM Item in Details.ToList())
                {
                    #region Find Transaction Mode Insert or Update

                    sqlText = "";



                    sqlText +=
                        "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceDetails WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo";


                    sqlText += " AND ItemNo=@ItemItemNo";
                    SqlCommand cmdFindId = new SqlCommand(sqlText, VcurrConn);
                    cmdFindId.Transaction = Vtransaction;
                    cmdFindId.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    cmdFindId.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                    IDExist = (int)cmdFindId.ExecuteScalar();

                    if (IDExist <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.purchaseMsgNoDataToPost);
                    }
                    else
                    {
                        //Update


                        #region Update only DetailTable

                        //sqlText = "";

                        //sqlText += " update PurchaseInvoiceDetails set ";
                        //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "',";
                        //sqlText += " LastModifiedOn=' " + Master.LastModifiedOn + "',";
                        //sqlText += " Post= '" + Master.Post + "'";
                        //sqlText += " where  PurchaseInvoiceNo ='" + Master.PurchaseInvoiceNo + "' ";
                        ////sqlText += " and ItemNo = '" + Item.ItemNo + "'";

                        //SqlCommand cmdInsDetail = new SqlCommand(sqlText, currConn);
                        //cmdInsDetail.Transaction = transaction;
                        //transResult = (int)cmdInsDetail.ExecuteNonQuery();

                        //if (transResult <= 0)
                        //{
                        //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                        //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                        //}

                        #region Update Item Qty +

                        #region Find Quantity From Products



                        //decimal oldStock = productDal.StockInHand(Item.ItemNo, Master.ReceiveDate, currConn,
                        //transaction);
                        decimal oldStock = Convert.ToDecimal(productDal.AvgPriceNew(Item.ItemNo, Master.ReceiveDate,
                                                             VcurrConn, Vtransaction, true).Rows[0]["Quantity"].ToString());


                        #endregion Find Quantity From Products

                        #region Find Quantity From Transaction

                        sqlText = "";
                        sqlText += "select isnull(Quantity ,0) from PurchaseInvoiceDetails ";
                        sqlText += " WHERE ItemNo=@ItemItemNo and PurchaseInvoiceNo= @MasterPurchaseInvoiceNo";
                        SqlCommand cmdTranQty = new SqlCommand(sqlText, VcurrConn);
                        cmdTranQty.Transaction = Vtransaction;
                        cmdTranQty.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                        cmdTranQty.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                        decimal TranQty = (decimal)cmdTranQty.ExecuteScalar();

                        #endregion Find Quantity From Transaction

                        #region privious Value

                        //sqlText = "";
                        //sqlText += "SELECT (isnull(pid.SubTotal,0)";
                        //sqlText += " +(" + (oldStock - TranQty) + ")*isnull(IssuePrice,0))";
                        //sqlText += " /(" + (oldStock - TranQty) + "+pid.Quantity) ";
                        //sqlText += " FROM PurchaseInvoiceDetails pid LEFT OUTER JOIN";
                        //sqlText += " products p ON pid.ItemNo= p.ItemNo";
                        //sqlText += " WHERE pid.PurchaseInvoiceNo='" + Master.PurchaseInvoiceNo + "' AND pid.ItemNo='" + Item.ItemNo +
                        //           "' ";

                        //SqlCommand cmdCValue = new SqlCommand(sqlText, currConn);
                        //cmdCValue.Transaction = transaction;
                        //decimal currentIssuePrice = (decimal) cmdCValue.ExecuteScalar();

                        #endregion privious Value






                        #endregion Qty  check and UPDATE+

                        #endregion Update only DetailTable

                        #region Update Issue and Receive if Transaction is not Other


                        #region Transaction is TollReceive

                        if (Master.TransactionType == "TollReceive")
                        {
                            string FinishItemIdFromOH = productDal.GetFinishItemIdFromOH(Item.ItemNo, "VAT 4.3 (Toll Receive)", Master.ReceiveDate,
                                                                           VcurrConn, Vtransaction).ToString();
                            #region Update to Issue

                            sqlText = "";
                            sqlText += "select COUNT(IssueNo) from IssueDetails WHERE IssueNo=@MasterPurchaseInvoiceNo ";
                            //sqlText += " AND ItemNo='" + Item.ItemNo + "'";
                            SqlCommand cmdFindIdIssue = new SqlCommand(sqlText, VcurrConn);
                            cmdFindIdIssue.Transaction = Vtransaction;
                            cmdFindIdIssue.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);

                            IDExist = (int)cmdFindIdIssue.ExecuteScalar();
                            if (IDExist <= 0)
                            {
                                if (TollReceiveWithIssue)
                                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                                                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                            }

                            //sqlText = "";
                            //sqlText += " update IssueDetails set";
                            //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                            //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                            //sqlText += " Post='" + Master.Post + "'";
                            //sqlText += " where  IssueNo ='" + Master.PurchaseInvoiceNo + "'";

                            //sqlText += "'" + Master.@Post + "'";
                            //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                            //cmdInsertIssue.Transaction = transaction;
                            //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                            //if (transResult <= 0)
                            //{
                            //    if (TollReceiveWithIssue)
                            //        throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                            //                       MessageVM.PurchasemsgUnableToUpdateIssue);
                            //}

                            #endregion Find Quantity From Products

                            #region Update to Receive

                            sqlText = "";
                            sqlText += "select COUNT(ReceiveNo) from ReceiveDetails WHERE ReceiveNo=@MasterPurchaseInvoiceNo ";
                            sqlText += " AND ItemNo='" + FinishItemIdFromOH + "'";
                            SqlCommand cmdFindIdReceive = new SqlCommand(sqlText, VcurrConn);
                            cmdFindIdReceive.Transaction = Vtransaction;
                            cmdFindIdReceive.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                            object vIDExist = cmdFindIdReceive.ExecuteScalar();
                            //if (IDExist <= 0)
                            //{
                            //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                            //                                    MessageVM.PurchasemsgUpdateNotSuccessfully);
                            //}
                            //sqlText = "";
                            //sqlText += " update ReceiveDetails set ";
                            //sqlText += " LastModifiedBy= '" + Master.LastModifiedBy + "',";
                            //sqlText += " LastModifiedOn= '" + Master.LastModifiedOn + "',";
                            //sqlText += " Post= '" + Master.Post + "'";
                            //sqlText += " where  ReceiveNo = '" + Master.PurchaseInvoiceNo + "' ";
                            //sqlText += " and ItemNo = '" + FinishItemIdFromOH + "'";
                            //sqlText += "'" + Master.@Post + "'";
                            //SqlCommand cmdInsertReceive = new SqlCommand(sqlText, currConn);
                            //cmdInsertReceive.Transaction = transaction;
                            //cmdInsertReceive.ExecuteNonQuery();

                            //if (transResult <= 0)
                            //{
                            //    //throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                            //    //                                MessageVM.PurchasemsgUnableToUpdateReceive);
                            //}

                            #endregion Update to Receive
                        }


                        #endregion Transaction is TollReceive

                        #region Transaction is InputService

                        if (Master.TransactionType == "InputService" || Master.TransactionType == "InputServiceImport")
                        {

                            #region Update to Issue

                            sqlText = "";
                            sqlText += "select COUNT(IssueNo) from IssueDetails WHERE IssueNo=@MasterPurchaseInvoiceNo ";
                            sqlText += " AND ItemNo=@ItemItemNo ";
                            SqlCommand cmdFindIdIssue = new SqlCommand(sqlText, VcurrConn);
                            cmdFindIdIssue.Transaction = Vtransaction;
                            cmdFindIdIssue.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                            cmdFindIdIssue.Parameters.AddWithValue("@ItemItemNo", Item.ItemNo);
                            IDExist = (int)cmdFindIdIssue.ExecuteScalar();
                            if (IDExist <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                                                                MessageVM.PurchasemsgUpdateNotSuccessfully);
                            }

                            //sqlText = "";
                            //sqlText += " update IssueDetails set";
                            //sqlText += " LastModifiedBy='" + Master.LastModifiedBy + "',";
                            //sqlText += " LastModifiedOn='" + Master.LastModifiedOn + "',";
                            //sqlText += " Post='" + Master.Post + "'";
                            //sqlText += " where  IssueNo ='" + Master.PurchaseInvoiceNo + "'";

                            //sqlText += "'" + Master.@Post + "'";
                            //SqlCommand cmdInsertIssue = new SqlCommand(sqlText, currConn);
                            //cmdInsertIssue.Transaction = transaction;
                            //transResult = (int)cmdInsertIssue.ExecuteNonQuery();

                            //if (transResult <= 0)
                            //{
                            //    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                            //                                    MessageVM.PurchasemsgUnableToUpdateIssue);
                            //}

                            #endregion Find Quantity From Products

                        }

                        #endregion Transaction is InputService



                        #endregion Update Issue and Receive if Transaction is not Other

                    }

                    #endregion Find Transaction Mode Insert or Update
                }


                #endregion Update Detail Table
                #region TDS
                sqlText = "";
                sqlText += @"update PurchaseTDSs set post ='Y'  
                                where PurchaseInvoiceNo=@PurchaseInvoiceNo
                           ";


                SqlCommand cmdInserttds = new SqlCommand(sqlText, VcurrConn);
                cmdInserttds.Transaction = Vtransaction;
                cmdInserttds.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                cmdInserttds.ExecuteNonQuery();
                #endregion
                #endregion  Update into Details(Update complete in Header)

                #region Tracking
                if (Trackings.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost,
                                                    MessageVM.PurchasemsgNoDataPostToPost);
                }


                foreach (TrackingVM tracking in Trackings.ToList())
                {
                    #region update Trackings

                    sqlText = "";

                    sqlText += " update Trackings set  ";
                    sqlText += " LastModifiedBy= @MasterLastModifiedBy, ";
                    sqlText += " LastModifiedOn= @MasterLastModifiedOn, ";
                    sqlText += " Post=@MasterPost";
                    //sqlText += " where  PurchaseInvoiceNo= '" + Master.PurchaseInvoiceNo + "' ";
                    sqlText += " where  ItemNo= @trackingItemNo ";
                    sqlText += " and  Heading1= @trackingHeading1 ";


                    SqlCommand cmdUpdateTracking = new SqlCommand(sqlText, VcurrConn);
                    cmdUpdateTracking.Transaction = Vtransaction;
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedBy", Master.LastModifiedBy);
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@MasterLastModifiedOn", Master.LastModifiedOn);
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@MasterPost", Master.Post);

                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@trackingItemNo", tracking.ItemNo);
                    cmdUpdateTracking.Parameters.AddWithValueAndNullHandle("@trackingHeading1", tracking.Heading1);


                    transResult = (int)cmdUpdateTracking.ExecuteNonQuery();
                    if (transResult <= 0)
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameUpdate,
                                                        MessageVM.PurchasemsgUpdateNotSuccessfully);
                    }

                    #endregion update Trackings
                }
                #endregion

                #region TrackingWithSale
                bool TrackingWithSale = Convert.ToBoolean(commonDal.settingValue("Purchase", "TrackingWithSale") == "Y" ? true : false);
                if (TrackingWithSale)
                {
                    DataTable tracDt = new DataTable();
                    sqlText = "";
                    sqlText = @"SELECT    
                                   PurchaseInvoiceDetails.PurchaseInvoiceNo,
PurchaseInvoiceDetails.InvoiceDateTime,
PurchaseInvoiceDetails.ReceiveDate,
PurchaseInvoiceDetails.ItemNo, 
isnull(PurchaseInvoiceDetails.BENumber,'N/A')BENumber ,
isnull(PurchaseInvoiceDetails.Quantity,0)Quantity,
isnull(PurchaseInvoiceDetails.UOM,'N/A')UOM ,
isnull(PurchaseInvoiceDetails.VATRate,0)VATRate,
isnull(PurchaseInvoiceDetails.USDVAT,0) / isnull(PurchaseInvoiceDetails.Quantity,0) VATAmount,
(isnull(PurchaseInvoiceDetails.AssessableValue,0) 
+ isnull(PurchaseInvoiceDetails.CDAmount,0) 
+ isnull(PurchaseInvoiceDetails.RDAmount,0) 
+ isnull(PurchaseInvoiceDetails.SDAmount,0) 
+ isnull(PurchaseInvoiceDetails.TVBAmount,0) ) / isnull(PurchaseInvoiceDetails.Quantity,0)
VATableValue,
isnull(PurchaseInvoiceDetails.ReturnTransactionType,'')ReturnTransactionType,
isnull(PurchaseInvoiceHeaders.CustomHouse,'')CustomHouse
FROM dbo.PurchaseInvoiceDetails 
                                    left outer join PurchaseInvoiceHeaders on PurchaseInvoiceHeaders.PurchaseInvoiceNo=PurchaseInvoiceDetails.PurchaseInvoiceNo
                                    WHERE ";
                    sqlText += @"   (PurchaseInvoiceDetails.PurchaseInvoiceNo = @MasterPurchaseInvoiceNo )";
                    sqlText += @"  order by PurchaseInvoiceDetails.ItemNo";
                    SqlCommand cmdRIFB = new SqlCommand(sqlText, VcurrConn);
                    cmdRIFB.Transaction = Vtransaction;
                    cmdRIFB.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                    SqlDataAdapter reportDataAdapt = new SqlDataAdapter(cmdRIFB);
                    reportDataAdapt.Fill(tracDt);

                    foreach (DataRow dRow in tracDt.Rows)
                    {
                        #region Insert only DetailTable PurchaseInvoiceDetails

                        sqlText = "";
                        sqlText += " insert into PurchaseSaleTrackings(";
                        sqlText += " PurchaseInvoiceNo,";
                        sqlText += " PurchaseInvoiceDateTime,";
                        sqlText += " ReceiveDate,";
                        sqlText += " CustomHouse,";
                        sqlText += " ItemNo,";
                        sqlText += " BENumber,";
                        sqlText += " SalesInvoiceNo,";
                        sqlText += " SaleInvoiceDateTime,";
                        sqlText += " VATableValue,";
                        sqlText += " VATAmount,";
                        sqlText += " IsSold";
                        sqlText += " )";
                        sqlText += " values(	";
                        sqlText += "'" + dRow["PurchaseInvoiceNo"].ToString() + "',";
                        sqlText += "'" + dRow["InvoiceDateTime"].ToString() + "',";
                        sqlText += "'" + dRow["ReceiveDate"].ToString() + "',";
                        sqlText += "'" + dRow["CustomHouse"].ToString() + "',";
                        sqlText += "'" + dRow["ItemNo"].ToString() + "',";
                        sqlText += "'" + dRow["BENumber"].ToString() + "',";
                        sqlText += "'0',";
                        sqlText += "'01/01/1900',";
                        sqlText += "'" + dRow["VATableValue"].ToString() + "',";
                        sqlText += "'" + dRow["VATAmount"].ToString() + "',";
                        sqlText += "'0'";
                        sqlText += ")	";

                        decimal qty = Convert.ToDecimal(dRow["Quantity"]);
                        for (int i = 0; i < qty; i++)
                        {
                            SqlCommand cmdInsDetail = new SqlCommand(sqlText, VcurrConn);
                            cmdInsDetail.Transaction = Vtransaction;
                            transResult = (int)cmdInsDetail.ExecuteNonQuery();

                            if (transResult <= 0)
                            {
                                throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                                MessageVM.PurchasemsgSaveNotSuccessfully);
                            }
                        }


                        #endregion Insert only DetailTable
                    }
                }
                #endregion TrackingWithSale
                #region return Current ID and Post Status

                sqlText = "";


                sqlText = sqlText + " select distinct Post from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo";

                SqlCommand cmdIPS = new SqlCommand(sqlText, VcurrConn);
                cmdIPS.Transaction = Vtransaction;
                cmdIPS.Parameters.AddWithValue("@MasterPurchaseInvoiceNo", Master.PurchaseInvoiceNo);
                PostStatus = (string)cmdIPS.ExecuteScalar();
                if (string.IsNullOrEmpty(PostStatus))
                {
                    throw new ArgumentNullException(MessageVM.purchaseMsgMethodNamePost, MessageVM.PurchasemsgUnableCreatID);
                }


                #endregion Prefetch
                #region Commit
                if (vcurrConn == null)
                {
                    if (Vtransaction != null)
                    {
                        //if (transResult > 0)
                        //{
                        Vtransaction.Commit();
                        //}

                    }
                }

                #endregion Commit
                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.purchaseMsgSuccessfullyPost;
                retResults[2] = Master.PurchaseInvoiceNo;
                retResults[3] = PostStatus;
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            ////catch (SqlException sqlex)
            ////{
            ////    transaction.Rollback();
            ////    throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
            ////    //throw sqlex;
            ////}
            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                Vtransaction.Rollback();
                throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //throw ex;
            }
            finally
            {
                if (vcurrConn == null)
                {
                    if (VcurrConn != null)
                    {
                        if (VcurrConn.State == ConnectionState.Open)
                        {
                            VcurrConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        #endregion

        #region Split Methods

        public string[] SavePurchase_Split(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                CommonDAL commonDal = new CommonDAL();

                #region delete and bulk insert to Source

                string deleteSource = @"delete from VAT_Source_Purchase";
                SqlCommand cmd = new SqlCommand(deleteSource, currConn, transaction);
                cmd.ExecuteNonQuery();

                if (param.Data.Columns.Contains("Transaction_Type"))
                {
                    param.Data.Columns["Transaction_Type"].ColumnName = "Transection_Type";
                }

                #region debug

                string columnNames = "";

                ////foreach (DataColumn Column in param.Data.Columns)
                ////{
                ////    columnNames += Column.ColumnName + ",";
                ////}

                #endregion


                string[] result = commonDal.BulkInsert("VAT_Source_Purchase", param.Data, currConn, transaction);

                #endregion

                #region Join Date Time

                if (param.Data.Columns.Contains("Receive_Time"))
                {
                    string updateDate = "update VAT_Source_Purchase set Receive_Date = Receive_Date + ' ' + Receive_Time";
                    cmd.CommandText = updateDate;

                    cmd.ExecuteNonQuery();
                }
                if (param.Data.Columns.Contains("Invoice_Time"))
                {
                    string updateDate = "update VAT_Source_Purchase set Invoice_Date = Invoice_Date + ' ' + Invoice_Time";
                    cmd.CommandText = updateDate;

                    cmd.ExecuteNonQuery();
                }

                if (param.Data.Columns.Contains("Rebate_Time"))
                {
                    string updateDate = "update VAT_Source_Purchase set RebateDate = Rebate_Date + ' ' + Rebate_Time";
                    cmd.CommandText = updateDate;

                    cmd.ExecuteNonQuery();
                }

                #endregion

                string PurchaseDuplicateInsert = commonDal.settings("Import", "PurchaseDuplicateInsert", currConn, transaction);

                if (PurchaseDuplicateInsert == "N")
                {
                    #region delete duplicate

                    string deleteDuplicate = @"
update  VAT_Source_Purchase                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(Receive_Date)) +  CONVERT(VARCHAR(4),YEAR(Receive_Date)),6)
where PeriodId is null or PeriodId = ''

delete from VAT_Source_Purchase where ID in (
                select pr.ID from VAT_Source_Purchase pr inner join PurchaseInvoiceHeaders ph
                on pr.ID = ph.ImportIDExcel and pr.PeriodId = ph.PeriodId)";

                    cmd.CommandText = deleteDuplicate;
                    cmd.ExecuteNonQuery();
                    #endregion

                }


                #region Loop counter

                string getLoopCount = @"select Ceiling(count(distinct ID)/10.00) from VAT_Source_Purchase";

                cmd.CommandText = getLoopCount;
                int counter = Convert.ToInt32(cmd.ExecuteScalar());

                #endregion


                transaction.Commit();
                currConn.Close();


                param.SetSteps(counter + 2);


                DataTable sourceData = new DataTable();

                param.callBack();

                for (int i = 0; i < counter; i++)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                    cmd.Connection = currConn;
                    cmd.Transaction = transaction;

                    #region Create Temp tables

                    string tempTableCreate = @"create table #tempIds(sl int identity(1,1), ID varchar(500))";
                    cmd.CommandText = tempTableCreate;
                    cmd.ExecuteNonQuery();

                    #endregion


                    #region Get Top Rows

                    string insertIds = @"insert into #tempIds(ID)
select  distinct top 10 ID 
from VAT_Source_Purchase
where isnull(IsProcessed,'N') = 'N'";

                    cmd.CommandText = insertIds;
                    cmd.ExecuteNonQuery();

                    string getData = @"SELECT 
       [ID]
      ,[Vendor_Name]
      ,[Vendor_Code]
      ,[VendorID]
      ,[Referance_No]
      ,[Previous_Purchase_No]
      ,[Post]
      ,[LC_No]
      ,[Item_Code]
      ,[Item_Name]
      ,[ItemNo]
      ,[Quantity]
      ,[UOM]
      ,[BranchCode]
      ,[BranchId]
      ,[Comments]
      ,[VAT_Amount]
      ,[BOMId]
      ,[BE_Number]
      ,[Invoice_Date]
      ,[Receive_Date]
      ,[With_VDS]
      ,[Custom_House]
      ,[Total_Price]
      ,[Type]
      ,[Rebate_Rate]
      ,[SD_Amount]
      ,[CnF_Amount]
      ,[Insurance_Amount]
      ,[Assessable_Value]
      ,[CD_Amount]
      ,[RD_Amount]
      ,[TVB_Amount]
      ,[TVA_Amount]
      ,[ATV_Amount]
      ,[Others_Amount]
      ,[Remarks]
      ,[AITAmount]
      ,[AT_Amount]
      ,[Transection_Type]
      ,[UserId]
      ,[Product_Group]
      ,[IsRebate]
      ,[RebateDate]
  FROM VAT_Source_Purchase where ID in (select ID from #tempIds)";

                    cmd.CommandText = getData;
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(sourceData);

                    //sourceData.Columns.Remove("IsProcessed");

                    #endregion

                    retResults = SaveTempPurchase(sourceData, param.BranchCode, param.TransactionType, param.CurrentUser, param.DefaultBranchId,
                        () => { }, currConn, transaction);


                    if (retResults[0].ToLower() == "fail")
                    {
                        throw new Exception(retResults[1]);
                    }

                    #region updateSourceTable

                    string updateSourceAndClearTemp = @"update VAT_Source_Purchase set IsProcessed = 'Y' where ID  in (select ID from #tempIds);
                                            --delete from #tempIds;";

                    cmd.CommandText = updateSourceAndClearTemp;
                    cmd.ExecuteNonQuery();

                    #endregion


                    transaction.Commit();
                    currConn.Close();
                    transaction.Dispose();
                    currConn.Dispose();

                    sourceData.Clear();

                    param.callBack();

                }

                param.callBack();


                #region Drop Temp table

                //currConn = _dbsqlConnection.GetConnection();
                //currConn.Open();
                //transaction = currConn.BeginTransaction();
                //cmd.Connection = currConn;
                //cmd.Transaction = transaction;

                //string dropTemp = @"drop table #tempIds";
                //cmd.CommandText = dropTemp;
                //cmd.ExecuteNonQuery();


                //transaction.Commit();
                //currConn.Close();
                //transaction.Dispose();
                //currConn.Dispose();

                #endregion

                return retResults;
            }

            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "SavePurchase_Split", ex.ToString() + "\n" + sqlText, "Purchase");


                throw ex;
            }
            finally
            {
                if (currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
        }

        #endregion

        #region Average Rate Methods

        public string[] UpdateIntialAvgPrice(SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                CommonDAL commonDal = new CommonDAL();
                ProductDAL productDal = new ProductDAL();


                #region Remove Existing Purchase

                sqlText = @"delete from ProductAvgPrice 
                where PurchaseQty != 0 and PurchaseValue != 0";
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.ExecuteNonQuery();

                #endregion;




                #region Initial Value Updated

                sqlText = @"
    declare @count int = (select count(BranchId) from BranchProfiles)

    IF @count = 1
    BEGIN
	    update ProductAvgPrice set RuntimeQty = Products.OpeningBalance, 
	    RuntimeTotal=Products.OpeningTotalCost
	    from Products 
	    where ProductAvgPrice.ItemNo = Products.ItemNo and PurchaseQty = 0 and PurchaseValue = 0
    END

    ELSE

    BEGIN


	    create table #tempStocks(id int identity(1,1), ItemNo varchar(50), TotalQty decimal(25,9), TotalValue decimal(25,9))

	    insert into #tempStocks (ItemNo, TotalQty,TotalValue)
	    SELECT distinct ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) 
	    from ProductStocks p
	    group by ItemNo

	    update ProductAvgPrice set RuntimeQty = #tempStocks.TotalQty, 
	    RuntimeTotal=#tempStocks.TotalValue
	    from #tempStocks 
	    where ProductAvgPrice.ItemNo = #tempStocks.ItemNo and PurchaseQty = 0 and PurchaseValue = 0

	    drop table #tempStocks

    END


    update ProductAvgPrice set AvgPrice = RuntimeTotal/RuntimeQty
    where PurchaseQty = 0 and PurchaseValue = 0
    and RuntimeQty >0";


                cmd.CommandText = sqlText;
                cmd.ExecuteNonQuery();



                #region Comments Previous Methods 29Nov2020

                //                DataTable dtInitialProducts = new DataTable();

                //                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                //                adapter.Fill(dtInitialProducts);


                //                decimal avgPrice = 0;
                //                decimal totalQty = 0;
                //                decimal totalValue = 0;

                //                DateTime transactiondate =  Convert.ToDateTime(dtInitialProducts.Rows[0]["AgvPriceDate"]);

                //                foreach (DataRow row in dtInitialProducts.Rows)
                //                {
                //                    string itemNo = row["ItemNo"].ToString();
                //                    string sl = row["SL"].ToString();

                //                    DataTable priceData = productDal.AvgPriceNew(itemNo,
                //                        transactiondate.ToString("yyyy-MMM-dd")
                //                        + DateTime.Now.ToString(" HH:mm:ss"), null, null, true, true, true, true);


                //                    totalQty = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                //                    totalValue = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());


                //                    if (totalQty > 0)
                //                    {
                //                        avgPrice = totalValue / totalQty;

                //                        sqlText = @"update ProductAvgPrice set RuntimeTotal = " + totalValue + @", RuntimeQty='" +
                //                                  totalQty + @"',AvgPrice = " + avgPrice + @"
                //                                where ItemNo = '" + itemNo + "' and SL = '" + sl + "' ";

                //                        cmd.CommandText = sqlText;

                //                        cmd.ExecuteNonQuery();

                //                    }


                //                }

                #endregion

                #endregion


                #region Insert Item from Purchase

                sqlText = @"
    
create table #tempAVGPrice(
ID int identity(1,1),
ItemNo varchar(50),
AgvPriceDate datetime,
PurchaseQty decimal(25,9),
PurchaseValue decimal(25,9),
AvgPrice decimal(25,9),
PurchaseNo varchar(50),
InsertTime datetime2(7),
)


-----Check if with SD---------------'
declare @withSD varchar(50) = (select SettingValue from Settings 
where SettingGroup= 'VAT6_1' and 
SettingName= 'TotalIncludeSD'
)

--------- 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService' -----------------
insert into #tempAVGPrice(ItemNo,AgvPriceDate,PurchaseQty,PurchaseValue,AvgPrice,PurchaseNo,InsertTime)
select ItemNo, ReceiveDate, sum(isnull(UOMQty,0)),
case when @withSD='Y' then sum(SubTotal + SDAmount) else sum(SubTotal) end,
0 AvgPrice,PurchaseInvoiceNo,GetDate()
from PurchaseInvoiceDetails
where TransactionType  in ('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')
and Post = 'Y'
group by ItemNo, ReceiveDate,PurchaseInvoiceNo



--------- 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' -----------------
insert into #tempAVGPrice(ItemNo,AgvPriceDate,PurchaseQty,PurchaseValue,AvgPrice,PurchaseNo,InsertTime)
select ItemNo, ReceiveDate, sum(isnull(UOMQty,0)),

case when @withSD='Y' then 
sum(isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)
+isnull(OthersAmount,0)
+isnull(SDAmount,0))
else 
sum(isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)
+isnull(OthersAmount,0))
end,

0 AvgPrice,PurchaseInvoiceNo,GetDate()
from PurchaseInvoiceDetails
where TransactionType  in ('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
and Post = 'Y'
group by ItemNo, ReceiveDate,PurchaseInvoiceNo


--------- 'PurchaseReturn','PurchaseDN' -----------------
insert into #tempAVGPrice(ItemNo,AgvPriceDate,PurchaseQty,PurchaseValue,AvgPrice,PurchaseNo,InsertTime)
select ItemNo, ReceiveDate, sum(-1*isnull(UOMQty,0)),

case when @withSD='Y' then 
sum(-1*(isnull(subtotal,0)+isnull(SDAmount,0)))
else 
sum(-1*(isnull(subtotal,0)))
end,

0 AvgPrice,PurchaseInvoiceNo,GetDate()
from PurchaseInvoiceDetails
where TransactionType  in ('PurchaseReturn','PurchaseDN')
and Post = 'Y'
group by ItemNo, ReceiveDate,PurchaseInvoiceNo

-------- insert into ProductAvgPrice -------------

insert into ProductAvgPrice(ItemNo,AgvPriceDate,PurchaseQty,PurchaseValue,AvgPrice,PurchaseNo,InsertTime)
select ItemNo,AgvPriceDate,PurchaseQty,PurchaseValue,AvgPrice,PurchaseNo,InsertTime from #tempAVGPrice
order by AgvPriceDate


drop table #tempAVGPrice
    ";

                cmd.CommandText = sqlText;

                int rows = cmd.ExecuteNonQuery();

                #endregion

                #region Update AVG Price

                sqlText = @"


    declare @start int  = (select min(SL) from ProductAvgPrice where AvgPrice = 0)
    declare @end int  = (select max(SL) from ProductAvgPrice where AvgPrice = 0)

    declare @previousValue int  = 0
    declare @previousQty int  = 0
    declare @itemNo varchar(50) = ''
    declare @date datetime 




    while @start <= @end
    begin
	    
	    select @itemNo =ItemNo,@date=AgvPriceDate from ProductAvgPrice where SL = @start and AvgPrice = 0

	    select top 1 @previousQty=RuntimeQty,@previousValue=RuntimeTotal
	    from ProductAvgPrice 
	    where ItemNo = @itemNo and SL != @start and AgvPriceDate <=@date
	    order by AgvPriceDate desc

	    --select @previousQty,@previousValue,@itemNo


	    update ProductAvgPrice set RuntimeQty = PurchaseQty + @previousQty, 
	    RuntimeTotal = PurchaseValue + @previousValue 
	    where SL = @start and AvgPrice = 0

	    set @start = @start + 1

    end
    update ProductAvgPrice set AvgPrice = RuntimeTotal/RuntimeQty
    where  AvgPrice = 0 and RuntimeQty > 0

    ";


                cmd.CommandText = sqlText;

                rows = cmd.ExecuteNonQuery();


                #endregion


                #region Update Issue Day Flag

                sqlText = @"
UPDATE IssueDetails set IsDayEnd = 'Y' 
where ItemNo in (Select distinct ItemNo from ProductAvgPrice)";


                cmd.CommandText = sqlText;

                cmd.ExecuteNonQuery();

                #endregion


                transaction.Commit();

                return retResults;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex

                if (transaction != null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "UpdateIntialAvgPrice", ex.ToString() + "\n" + sqlText, "Purchase");


                throw ex;
            }
            finally
            {
                if (currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            //////return retResults;

        }

        public string[] UpdateProductAVGprice(string itemNo, string receiveDate = "", decimal purchaseQty = 0,
            decimal purchaseValue = 0, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null,
            decimal previousQty = 0, decimal previousValue = 0, string PreDate = "", string purchaseNo = "", SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = VcurrConn;
            SqlTransaction transaction = Vtransaction;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                CommonDAL commonDal = new CommonDAL();
                ProductDAL productDal = new ProductDAL();

                SqlCommand cmd = new SqlCommand("", currConn, transaction);

                if (!string.IsNullOrEmpty(receiveDate))
                {


                    sqlText = @"

if not exists (select SL from ProductAvgPrice where ItemNo = @itemNo and PurchaseNo = @PurchaseNo)
begin 

    insert into ProductAvgPrice(ItemNo,AgvPriceDate,PurchaseQty,PurchaseValue,RuntimeQty,RuntimeTotal,AvgPrice,PurchaseNo,InsertTime)
    select @itemNo, @date,  @PurchaseQty,@PurchaseValue,0,0,0,@PurchaseNo,GetDate()

end
";

                    #region Commented Previous Query

                    //                    string previousText = @"
                    //
                    //--else
                    //--begin
                    //    
                    //--     update ProductAvgPrice set 
                    //--     PurchaseQty =  PurchaseQty - @PrePurchaseQty+ @PurchaseQty
                    //--    ,PurchaseValue = PurchaseValue- @PrePurchaseValue+ @PurchaseValue
                    //--    ,AgvPriceDate = @date
                    //--    where ItemNo = @itemNo and AgvPriceDate = @pdate
                    //
                    //--end
                    // 
                    // declare @previousValue int  = 0
                    //    declare @previousQty int  = 0
                    //
                    //    declare @maxId int = (select max(SL) from ProductAvgPrice where itemNo = @itemNo and AgvPriceDate = @date)
                    //
                    //	select top 1 @previousQty=RuntimeQty,@previousValue=RuntimeTotal
                    //	from ProductAvgPrice 
                    //	where ItemNo = @itemNo and SL != @maxId and AgvPriceDate <=@date
                    //	order by AgvPriceDate desc
                    //
                    //
                    //	update ProductAvgPrice set RuntimeQty = PurchaseQty + @previousQty, 
                    //	RuntimeTotal = PurchaseValue + @previousValue 
                    //	where SL = @maxId
                    //
                    //
                    //    update ProductAvgPrice Set AvgPrice = RuntimeTotal / RuntimeQty
                    //    where SL = @maxId";

                    #endregion

                    cmd.CommandText = sqlText;

                    cmd.Parameters.AddWithValue("@itemNo", itemNo);
                    cmd.Parameters.AddWithValue("@date", receiveDate);
                    //cmd.Parameters.AddWithValue("@pdate", PreDate);
                    cmd.Parameters.AddWithValue("@PurchaseQty", purchaseQty);
                    //cmd.Parameters.AddWithValue("@PrePurchaseQty", previousQty);
                    cmd.Parameters.AddWithValue("@PurchaseValue", purchaseValue);
                    //cmd.Parameters.AddWithValue("@PrePurchaseValue", previousValue);
                    cmd.Parameters.AddWithValue("@PurchaseNo", purchaseNo);

                    cmd.ExecuteNonQuery();

                    // update issue 

                    //sqlText = @"update IssueDetails set IsDayEnd = 'Y' where itemNo = @itemNo and IssueDateTime >= @date";

                    //cmd.CommandText = sqlText;

                    //cmd.ExecuteNonQuery();

                }
                else
                {


                    sqlText = @"

declare @date datetime = (select StartDateTime from CompanyProfiles)

insert into ProductAvgPrice(ItemNo,AgvPriceDate,PurchaseQty,PurchaseValue,RuntimeQty,RuntimeTotal,AvgPrice)
select @itemNo, @date,  0,0,0,0,0


    update ProductAvgPrice Set AvgPrice = RuntimeTotal / RuntimeQty
    where AvgPrice = 0 and RuntimeQty > 0 

";
                    cmd.CommandText = sqlText;

                    cmd.Parameters.AddWithValue("@itemNo", itemNo);

                    cmd.ExecuteNonQuery();


                }

                if (transaction != null && Vtransaction == null)
                {
                    transaction.Commit();

                }

                return retResults;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "UpdateProductAVGprice", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
        }


        public string[] RemoveOnUnpost(string itemNo, string purchaseNo, string receiveDate = "",
            SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = VcurrConn;
            SqlTransaction transaction = Vtransaction;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                CommonDAL commonDal = new CommonDAL();
                ProductDAL productDal = new ProductDAL();

                SqlCommand cmd = new SqlCommand("", currConn, transaction);

                sqlText = @"delete from ProductAvgPrice where ItemNo=@itemNo and PurchaseNo=@PurchaseNo";


                cmd.CommandText = sqlText;

                cmd.Parameters.AddWithValue("@itemNo", itemNo);
                cmd.Parameters.AddWithValue("@PurchaseNo", purchaseNo);

                cmd.ExecuteNonQuery();

                if (transaction != null && Vtransaction == null)
                {
                    transaction.Commit();

                }

                return retResults;
            }
            #endregion

            #region Catch and Finally
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }
                ////2020-12-13
                FileLogger.Log("PurchaseDAL", "RemoveOnUnpost", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

        }

        public DataSet GetAvgPrice(string itemNo, string avgPriceDate, SqlConnection connection = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = connection;
            SqlTransaction transaction = Vtransaction;
            #endregion

            #region try
            avgPriceDate = Convert.ToDateTime(avgPriceDate).ToString("yyyy-MMM-dd");
            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                sqlText = @"
select top 1 AvgPrice from ProductAvgPrice
where ItemNo = @ItemNo and AgvPriceDate < dateadd(d,1,   @AgvPriceDate) and TransactionType in('Purchase','Opening')
order by AgvPriceDate desc, SL desc

select * from ProductStocks
where ItemNo = @ItemNo


";
                ;

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.CommandTimeout = 500;
                cmd.Parameters.AddWithValue("@AgvPriceDate", avgPriceDate);
                cmd.Parameters.AddWithValue("@ItemNo", itemNo);

                DataSet dtAverage = new DataSet();

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);

                dataAdapter.Fill(dtAverage);


                if (transaction != null && Vtransaction == null)
                {
                    transaction.Commit();
                }



                return dtAverage;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-14
                FileLogger.Log("PurchaseDAL", "GetAvgPrice", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (currConn != null && currConn.State == ConnectionState.Open && connection == null)
                {
                    currConn.Close();
                }
            }
            #endregion

        }
        public DataSet GetAvgPricePrevious(string itemNo, string avgPriceDate, SqlConnection connection = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = connection;
            SqlTransaction transaction = Vtransaction;
            #endregion

            #region try
            avgPriceDate = Convert.ToDateTime(avgPriceDate).ToString("yyyy-MMM-dd");
            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                sqlText = @"select top 1 AvgPrice from ProductAvgPrice
where ItemNo = @ItemNo and AgvPriceDate < dateadd(d,0,   @AgvPriceDate) and TransactionType in('Purchase','Opening')
order by AgvPriceDate desc, SL desc

select * from ProductStocks
where ItemNo = @ItemNo


";
                ;

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.CommandTimeout = 500;
                cmd.Parameters.AddWithValue("@AgvPriceDate", avgPriceDate);
                cmd.Parameters.AddWithValue("@ItemNo", itemNo);

                DataSet dtAverage = new DataSet();

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);

                dataAdapter.Fill(dtAverage);


                if (transaction != null && Vtransaction == null)
                {
                    transaction.Commit();
                }



                return dtAverage;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                ////2020-12-14
                FileLogger.Log("PurchaseDAL", "GetAvgPrice", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (currConn != null && currConn.State == ConnectionState.Open && connection == null)
                {
                    currConn.Close();
                }
            }
            #endregion

        }

        #endregion

        #region TDSCalc

        public TDSCalcVM TDSCalculation(TDSCalcVM paramVM, SysDBInfoVMTemp connVM = null)
        {

            #region Declarations

            TDSCalcVM TDSCalVM = new TDSCalcVM();
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            decimal PreviousTotalTotal = 0;
            decimal CurrentAmount = 0;
            decimal PreviousTDSAmount = 0;
            decimal a = 0;
            decimal b = 0;
            decimal c = 0;
            decimal tds = 0;
            decimal tds1 = 0;
            decimal tds2 = 0;
            decimal tds3 = 0;
            decimal totalTds = 0;

            int row = 0;

            #endregion

            #region Try Statement

            try
            {

                #region TDS Calculation

                DataTable dtCurrentTDSAmount = new DataTable();
                DataSet ds = new DataSet();
                TDSsDAL vdal = new TDSsDAL();

                dtCurrentTDSAmount = vdal.CurrentTDSAmount(paramVM.InvoiceNo, null, null, true, connVM);

                #region dtCurrentTDSAmount Loop

                foreach (DataRow citem in dtCurrentTDSAmount.Rows)
                {
                    PreviousTotalTotal = 0;
                    CurrentAmount = 0;
                    PreviousTDSAmount = 0;
                    a = 0;
                    b = 0;
                    c = 0;
                    tds = 0;
                    tds1 = 0;
                    tds2 = 0;
                    tds3 = 0;

                    ds = new DataSet();
                    ds = vdal.TDSAmount(citem["VendorID"].ToString().Trim(), paramVM.ReceiveDate, citem["TDSCode"].ToString().Trim());
                    CurrentAmount = Convert.ToDecimal(citem["PurchaseBillAmount"]);

                    TDSCalVM.PreviousSubTotal = 0;

                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        PreviousTotalTotal = Convert.ToDecimal(ds.Tables[0].Rows[0]["PreviousSubTotal"]);
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        PreviousTDSAmount = Convert.ToDecimal(ds.Tables[1].Rows[0]["PreviousTDSAmount"]);
                    }

                    #region Comments

                    //PreviousTotalTotal = PreviousTotalTotal + CurrentAmount;
                    //CurrentAmount = Convert.ToDecimal(txtTotalSubTotal.Text.Trim());
                    //TotalAmount = 2000000;
                    //CurrentAmount = 1000000;

                    //if (ds.Tables[1].Rows.Count <= 0)
                    //{
                    //    MessageBox.Show("This Vendor not Assign any TDS Group");
                    //    return;
                    //}
                    //if (CurrentAmount <= 0)
                    //{
                    //    MessageBox.Show("There have no value for TDS Calculation");
                    //    return;
                    //}

                    #endregion

                    row = 0;
                    foreach (DataRow item in ds.Tables[2].Rows)
                    {
                        row++;
                        decimal minvalue = Convert.ToDecimal(item["MinValue"]);
                        decimal maxvalue = Convert.ToDecimal(item["MaxValue"]);
                        decimal rate = Convert.ToDecimal(item["Rate"]);
                        decimal totalBill = PreviousTotalTotal + CurrentAmount;
                        if (totalBill > maxvalue)
                        {
                            //return;
                        }
                        else
                        {
                            tds = (totalBill * rate / 100);
                            tds = tds - PreviousTDSAmount;
                            break;
                        }

                        #region Comments

                        //if (row == 1)
                        //{
                        //    if (PreviousTotalTotal <= maxvalue)
                        //    {
                        //        decimal t1 = (maxvalue - PreviousTotalTotal);
                        //        if (t1 > CurrentAmount)
                        //        {
                        //            tds1 = CurrentAmount * rate / 100;
                        //            CurrentAmount = 0;
                        //            PreviousTotalTotal = maxvalue;
                        //        }
                        //        else
                        //        {
                        //            decimal t2 = CurrentAmount - t1;
                        //            tds1 = (CurrentAmount - t2) * rate / 100;
                        //            CurrentAmount = t2;
                        //            PreviousTotalTotal = maxvalue;
                        //        }
                        //    }
                        //}
                        //else if (row == 2)
                        //{
                        //    if (PreviousTotalTotal <= maxvalue)
                        //    {
                        //        decimal t1 = (maxvalue - PreviousTotalTotal);
                        //        if (t1 > CurrentAmount)
                        //        {
                        //            tds2 = CurrentAmount * rate / 100;
                        //            CurrentAmount = 0;
                        //            PreviousTotalTotal = maxvalue;
                        //        }
                        //        else
                        //        {
                        //            decimal t2 = CurrentAmount - t1;
                        //            tds2 = (CurrentAmount - t2) * rate / 100;
                        //            CurrentAmount = t2;
                        //            PreviousTotalTotal = maxvalue;
                        //        }
                        //    }
                        //}
                        //else if (row == 3)
                        //{
                        //    if (CurrentAmount > 0)
                        //    {
                        //        tds3 = CurrentAmount * rate / 100;
                        //    }

                        //}
                        #endregion

                    }

                    vdal.UpdatePurchaseTDSs(citem["Id"].ToString().Trim(), tds);
                    totalTds = totalTds + tds;
                }
                #endregion

                TDSCalVM.TDSAmount = totalTds;
                TDSCalVM.NetBill = Convert.ToDecimal(Convert.ToDecimal(paramVM.TotalSubTotal) + Convert.ToDecimal(paramVM.TotalVatAmount) - Convert.ToDecimal(paramVM.TotalVDSAmount) - Convert.ToDecimal(totalTds));
                UpdateTDSAmount(paramVM.InvoiceNo, totalTds, connVM);

                #endregion

                #region Success Result

                TDSCalVM.Status = "Success";
                TDSCalVM.Message = "Product Stock Updated Successfully!";

                #endregion

            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                FileLogger.Log("PurchaseDAL", "TDSCalculation", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }

            finally
            {

            }

            #endregion

            return TDSCalVM;
        }


        #endregion

        public DataTable SelectAll_Specific(PurchaseMasterVM vm, string[] conditionFields = null, string[] conditionValues = null, string[] specificColumns = null
            , SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";

            DataTable dt = new DataTable();

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                dt = SelectAll(0, conditionFields, conditionValues, currConn, transaction, vm, true, connVM, false, false, null, false, false);

                DataView view = new DataView(dt);
                dt = view.ToTable("Purchase", false, specificColumns);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #endregion

            #region catch
            catch (Exception ex)
            {
                FileLogger.Log("PurchaseDAL", "SelectAll_Specific", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dt;

        }


        public ResultVM MultipleUpdate(PurchaseMasterVM paramVM, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try Statement

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                #region Update

                if (paramVM != null && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    foreach (string ID in paramVM.IDs)
                    {
                        PurchaseMasterVM MasterVM = new PurchaseMasterVM();
                        List<PurchaseDetailVM> DetailVMs = new List<PurchaseDetailVM>();
                        List<PurchaseDutiesVM> purchaseDuties = new List<PurchaseDutiesVM>();

                        MasterVM = SelectAllList(0, new[] { "pih.PurchaseInvoiceNo" }, new[] { ID }, currConn, transaction, null, null, null, false).FirstOrDefault();
                        DetailVMs = SelectPurchaseDetailList(ID, null, null, currConn, transaction, connVM);
                        purchaseDuties = GetDutyList(SearchPurchaseDutyDTNew(ID), paramVM.BranchId, DetailVMs, connVM);  // Change 04
                        List<TrackingVM> purchaseTrackings = GetTrackings(DetailVMs, ID, connVM);

                        string[] result = new string[] { };

                        result = PurchaseUpdate(MasterVM, DetailVMs, purchaseDuties, purchaseTrackings, connVM, paramVM.CurrentUserId);

                        rVM.Status = result[0];
                        rVM.Message = result[1];

                    }
                }


                #endregion

                #region Transaction Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }



            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                rVM = new ResultVM();
                rVM.Message = ex.Message;

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("PurchaseDAl", "MultipleUpdate", ex.ToString(), "Purchase");

                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return rVM;
        }

        private List<TrackingVM> GetTrackings(List<PurchaseDetailVM> DetailVMs, string ID, SysDBInfoVMTemp connVM = null)
        {
            List<TrackingVM> purchaseTrackings = new List<TrackingVM>();

            foreach (PurchaseDetailVM purchaseDetailVm in DetailVMs)
            {
                DataTable trackingInfoDt = SearchPurchaseInvoiceTracking(ID, purchaseDetailVm.ItemNo, connVM);
                if (trackingInfoDt.Rows.Count > 0)
                {
                    for (int i = 0; i < trackingInfoDt.Rows.Count; i++)
                    {
                        TrackingVM trackingVm = new TrackingVM();
                        trackingVm.ItemNo = trackingInfoDt.Rows[i]["ItemNo"].ToString();
                        trackingVm.Heading1 = trackingInfoDt.Rows[i]["Heading1"].ToString();
                        trackingVm.Heading2 = trackingInfoDt.Rows[i]["Heading2"].ToString();
                        trackingVm.IsPurchase = trackingInfoDt.Rows[i]["IsPurchase"].ToString();
                        trackingVm.PurchaseInvoiceNo = trackingInfoDt.Rows[i]["PurchaseInvoiceNo"].ToString();
                        trackingVm.Quantity = Convert.ToDecimal(trackingInfoDt.Rows[i]["Quantity"].ToString());

                        purchaseTrackings.Add(trackingVm);
                    }
                }
            }

            return purchaseTrackings;
        }

        public List<TrackingVM> GetTrackingsWeb(List<PurchaseDetailVM> DetailVMs, string ID, SysDBInfoVMTemp connVM = null)
        {
            List<TrackingVM> purchaseTrackings = new List<TrackingVM>();

            foreach (PurchaseDetailVM purchaseDetailVm in DetailVMs)
            {
                DataTable trackingInfoDt = SearchPurchaseInvoiceTracking(ID, purchaseDetailVm.ItemNo, connVM);
                if (trackingInfoDt.Rows.Count > 0)
                {
                    for (int i = 0; i < trackingInfoDt.Rows.Count; i++)
                    {
                        TrackingVM trackingVm = new TrackingVM();
                        trackingVm.ItemNo = trackingInfoDt.Rows[i]["ItemNo"].ToString();
                        trackingVm.Heading1 = trackingInfoDt.Rows[i]["Heading1"].ToString();
                        trackingVm.Heading2 = trackingInfoDt.Rows[i]["Heading2"].ToString();
                        trackingVm.IsPurchase = trackingInfoDt.Rows[i]["IsPurchase"].ToString();
                        trackingVm.PurchaseInvoiceNo = trackingInfoDt.Rows[i]["PurchaseInvoiceNo"].ToString();
                        trackingVm.Quantity = Convert.ToDecimal(trackingInfoDt.Rows[i]["Quantity"].ToString());

                        purchaseTrackings.Add(trackingVm);
                    }
                }
            }

            return purchaseTrackings;
        }


        private List<PurchaseDutiesVM> GetDutyList(DataTable table, int branchId, List<PurchaseDetailVM> vms, SysDBInfoVMTemp connVM = null)
        {

            List<PurchaseDutiesVM> purchaseDuties = new List<PurchaseDutiesVM>();
            PurchaseDutiesVM purchaseDuty = new PurchaseDutiesVM();


            foreach (DataRow tableRow in table.Rows)
            {
                string strItemNo = tableRow["ItemNo"].ToString();

                purchaseDuty.ItemNo = strItemNo;
                purchaseDuty.CnFInp = Convert.ToDecimal(tableRow["CnFInp"].ToString());
                purchaseDuty.CnFRate = Convert.ToDecimal(tableRow["CnFRate"].ToString());
                purchaseDuty.CnFAmount = Convert.ToDecimal(tableRow["CnFAmount"].ToString());
                purchaseDuty.InsuranceInp = Convert.ToDecimal(tableRow["InsuranceInp"].ToString());
                purchaseDuty.InsuranceRate = Convert.ToDecimal(tableRow["InsuranceRate"].ToString());
                purchaseDuty.InsuranceAmount = Convert.ToDecimal(tableRow["InsuranceAmount"].ToString());
                purchaseDuty.AssessableInp = Convert.ToDecimal(tableRow["AssessableInp"].ToString());
                purchaseDuty.AssessableValue = Convert.ToDecimal(tableRow["AssessableValue"].ToString());
                purchaseDuty.CDInp = Convert.ToDecimal(tableRow["CDInp"].ToString());
                purchaseDuty.CDRate = Convert.ToDecimal(tableRow["CDRate"].ToString());
                purchaseDuty.CDAmount = Convert.ToDecimal(tableRow["CDAmount"].ToString());
                purchaseDuty.RDInp = Convert.ToDecimal(tableRow["RDInp"].ToString());
                purchaseDuty.RDRate = Convert.ToDecimal(tableRow["RDRate"].ToString());
                purchaseDuty.RDAmount = Convert.ToDecimal(tableRow["RDAmount"].ToString());
                purchaseDuty.TVBInp = Convert.ToDecimal(tableRow["TVBInp"].ToString());
                purchaseDuty.TVBRate = Convert.ToDecimal(tableRow["TVBRate"].ToString());
                purchaseDuty.TVBAmount = Convert.ToDecimal(tableRow["TVBAmount"].ToString());
                purchaseDuty.SDInp = Convert.ToDecimal(tableRow["SDInp"].ToString());
                purchaseDuty.SD = Convert.ToDecimal(tableRow["SD"].ToString());
                purchaseDuty.SDAmount = Convert.ToDecimal(tableRow["SDAmount"].ToString());
                purchaseDuty.VATInp = Convert.ToDecimal(tableRow["VATInp"].ToString());
                purchaseDuty.VATRate = Convert.ToDecimal(tableRow["VATRate"].ToString());
                purchaseDuty.VATAmount = Convert.ToDecimal(tableRow["VATAmount"].ToString());
                purchaseDuty.TVAInp = Convert.ToDecimal(tableRow["TVAInp"].ToString());
                purchaseDuty.TVARate = Convert.ToDecimal(tableRow["TVARate"].ToString());
                purchaseDuty.TVAAmount = Convert.ToDecimal(tableRow["TVAAmount"].ToString());
                purchaseDuty.ATVInp = Convert.ToDecimal(tableRow["ATVInp"].ToString());
                purchaseDuty.ATVRate = Convert.ToDecimal(tableRow["ATVRate"].ToString());
                purchaseDuty.ATVAmount = Convert.ToDecimal(tableRow["ATVAmount"].ToString());
                purchaseDuty.OthersInp = Convert.ToDecimal(tableRow["OthersInp"].ToString());
                purchaseDuty.OthersRate = Convert.ToDecimal(tableRow["OthersRate"].ToString());

                purchaseDuty.OthersAmount = Convert.ToDecimal(tableRow["OthersAmount"].ToString());
                purchaseDuty.AITInp = Convert.ToDecimal(tableRow["AITInp"].ToString());
                purchaseDuty.AITAmount = Convert.ToDecimal(tableRow["AITAmount"].ToString());

                purchaseDuty.Remarks = tableRow["Remarks"].ToString();
                purchaseDuty.BranchId = branchId;

                PurchaseDetailVM vm = vms.SingleOrDefault(x => x.ItemNo == strItemNo);

                if (vm != null)
                {
                    purchaseDuty.Quantity = vm.Quantity;

                }

                purchaseDuty.SetCost();
                purchaseDuties.Add(purchaseDuty);
            }


            return purchaseDuties;


        }

        public ResultVM MultiplePost(PurchaseMasterVM paramVM, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Declarations

            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }

                #endregion open connection and transaction

                if (paramVM != null && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    foreach (string ID in paramVM.IDs)
                    {
                        PurchaseMasterVM MasterVM = new PurchaseMasterVM();
                        MasterVM = SelectAllList(0, new[] { "pih.PurchaseInvoiceNo" }, new[] { ID }, currConn, transaction, null, connVM).FirstOrDefault();

                        MasterVM.Post = "Y";
                        string[] result = new string[] { };

                        result = PurchasePost(MasterVM, null, null, null, transaction, currConn, connVM);

                        rVM.Status = result[0];
                        rVM.Message = result[1];
                    }
                }


                #region Transaction Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }
            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                rVM = new ResultVM();
                rVM.Message = ex.Message;

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReceiveDAL", "MultiplePost", ex.ToString(), "Purchase");

                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return rVM;
        }


        public MISExcelVM PurchaseMISExcelDownload(MISExcelVM vm, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                ReportDSDAL reportDsdal = new ReportDSDAL();
                MISExcelVM misExcelObj = new MISExcelVM();
                misExcelObj.FileName = "PurchaseInformation";

                ////DataSet ReportResult = reportDsdal.PurchaseNew(vm.PurchaseNo, vm.ReceiveDateFrom, vm.ReceiveDateTo, vm.VendorId, vm.ItemNo,
                ////     vm.ProductGroupId, vm.ProductType, vm.vTransactionType,
                ////     "", vm.ProductType, vm.VendorGroup, "N", "-", "-", 0, 0, 0, true, vm.ProductGroupId, vm.branchId, vm.VatType);


                DataSet ReportResult = reportDsdal.PurchaseNew(vm.PurchaseNo, vm.ReceiveDateFrom, vm.ReceiveDateTo, vm.VendorId, vm.ItemNo,
                        vm.ProductGroupId, vm.ProductType, "", vm.cmbPost, "", vm.VendorGroup, "N", "-", "-", 0, 0, 0, false,
                     vm.ProductGroupName, vm.branchId, vm.VatType,vm.IsRebate, connVM);


                misExcelObj.varExcelPackage = SaveExcel(ReportResult, "", connVM, vm.ReceiveDateFrom, vm.ReceiveDateTo);
                return misExcelObj;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public ExcelPackage SaveExcel(DataSet ds, string ReportType = "", SysDBInfoVMTemp connVM = null, string InvoiceDateFrom = "", string InvoiceDateTo = "")
        {
            DataTable dt = new DataTable();
            DataTable dtresult = ds.Tables["Table"];

            DataView dataView = new DataView(dtresult);
            //Filter columns from dataset
            dt = dataView.ToTable(true, "PurchaseInvoiceNo", "LCNumber", "RefNumber", "LCDate", "BENumber", "InvoiceDateTime", "VendorName", "Address1", "VATRegistrationNo", "ProductCode", "ProductName", "Quantity", "UOM", "AssessableValue", "CDAmount", "RDAmount", "SDAmount", "VATAmount", "Total");
            DataTable dtComapnyProfile = new DataTable();

            DataSet tempDS = new DataSet();
            tempDS = new ReportDSDAL().ComapnyProfile("");

            dtComapnyProfile = tempDS.Tables[0].Copy();
            string ComapnyName = dtComapnyProfile.Rows[0]["CompanyLegalName"].ToString();
            string VatRegistrationNo = dtComapnyProfile.Rows[0]["VatRegistrationNo"].ToString();
            string Address1 = dtComapnyProfile.Rows[0]["Address1"].ToString();

            string ParamFromDate;
            string ParamToDate;


            if (!string.IsNullOrWhiteSpace(InvoiceDateFrom))
            {
                ParamFromDate = Convert.ToDateTime(InvoiceDateFrom).ToString("dd-MMM-yyyy");
            }
            else
            {
                ParamFromDate = "All";
            }

            if (!string.IsNullOrWhiteSpace(InvoiceDateTo))
            {
                ParamToDate = Convert.ToDateTime(InvoiceDateTo).ToString("dd-MMM-yyyy");
            }
            else
            {
                ParamToDate = "All";
            }

            //string[] ReportHeaders = new string[] { " Name of Company: " + ComapnyName, " Address: " + Address1, " e-BIN: " + VatRegistrationNo };
            string[] ReportHeaders = new string[] { " Name of Company: " + ComapnyName, " Address: " + Address1, " e-BIN: " + VatRegistrationNo, "Form Date:" + ParamFromDate + "                To Date:" + ParamToDate };

            dt = OrdinaryVATDesktop.DtSlColumnAdd(dt);

            string[] DtcolumnName = new string[dt.Columns.Count];
            int j = 0;
            foreach (DataColumn column in dt.Columns)
            {
                DtcolumnName[j] = column.ColumnName;
                j++;
            }

            for (int k = 0; k < DtcolumnName.Length; k++)
            {
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, DtcolumnName[k], OrdinaryVATDesktop.AddSpacesToSentence(DtcolumnName[k]));
            }
            string pathRoot = AppDomain.CurrentDomain.BaseDirectory;
            string fileDirectory = pathRoot + "//Excel Files";
            Directory.CreateDirectory(fileDirectory);

            fileDirectory += "\\" + ReportType + "-" + DateTime.Now.ToString("yyyy-MM-dd-HHmmss") + ".xlsx";
            FileStream objFileStrm = File.Create(fileDirectory);

            int TableHeadRow = 0;
            TableHeadRow = ReportHeaders.Length + 2;

            int RowCount = 0;
            RowCount = dt.Rows.Count;

            int ColumnCount = 0;
            ColumnCount = dt.Columns.Count;

            int GrandTotalRow = 0;
            GrandTotalRow = TableHeadRow + RowCount + 1;
            string sheetName = "PurchaseInformation";
            if (string.IsNullOrEmpty(sheetName))
            {
                sheetName = ReportType;
            }

            ExcelPackage package = new ExcelPackage(objFileStrm);

            ExcelWorksheet ws = package.Workbook.Worksheets.Add(sheetName);
            ws.Cells[TableHeadRow, 1].LoadFromDataTable(dt, true);

            #region Format
            ExcelTextFormat format = new OfficeOpenXml.ExcelTextFormat();
            format.Delimiter = '~';
            format.TextQualifier = '"';
            format.DataTypes = new[] { eDataTypes.String };

            for (int i = 0; i < ReportHeaders.Length; i++)
            {
                ws.Cells[i + 1, 1, (i + 1), ColumnCount].Merge = true;
                ws.Cells[i + 1, 1, (i + 1), ColumnCount].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[i + 1, 1, (i + 1), ColumnCount].Style.Font.Size = 16 - i;
                ws.Cells[i + 1, 1].LoadFromText(ReportHeaders[i], format);
            }
            int colNumber = 0;

            foreach (DataColumn col in dt.Columns)
            {
                colNumber++;
                if (col.DataType == typeof(DateTime))
                {
                    ws.Column(colNumber).Style.Numberformat.Format = "dd-MMM-yyyy hh:mm:ss AM/PM";
                }
                else if (col.DataType == typeof(Decimal))
                {
                    ws.Column(colNumber).Style.Numberformat.Format = "#,##0.00_);[Red](#,##0.00)";

                    #region Grand Total
                    ws.Cells[GrandTotalRow, colNumber].Formula = "=Sum(" + ws.Cells[TableHeadRow + 1, colNumber].Address + ":" + ws.Cells[(TableHeadRow + RowCount), colNumber].Address + ")";
                    #endregion
                }

            }
            ws.Cells[TableHeadRow, 1, TableHeadRow, ColumnCount].Style.Font.Bold = true;
            ws.Cells[GrandTotalRow, 1, GrandTotalRow, ColumnCount].Style.Font.Bold = true;

            ws.Cells["A" + (TableHeadRow) + ":" + OrdinaryVATDesktop.Alphabet[(ColumnCount - 1)] + (TableHeadRow + RowCount + 2)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
            ws.Cells["A" + (TableHeadRow) + ":" + OrdinaryVATDesktop.Alphabet[(ColumnCount)] + (TableHeadRow + RowCount + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;

            ws.Cells[GrandTotalRow, 1].LoadFromText("Grand Total");
            #endregion
            return package;
        }

        public string[] SaveSMCPurchase(DataTable data, Action callBack = null, int branchId = 1, string app = "", SysDBInfoVMTemp connVM = null, IntegrationParam paramVM = null, SqlConnection vConnection = null, SqlTransaction vTransaction = null, string UserId = "")
        {
            #region Initializations

            SqlTransaction transaction = null;
            SqlConnection connection = null;
            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();
            int transResult = 0;
            #endregion

            #region try

            try
            {
                #region Connection and Transaction

                if (vConnection == null)
                {
                    connection = _dbsqlConnection.GetConnection(connVM);
                    connection.Open();
                }
                else
                {
                    connection = vConnection;
                }
                if (vTransaction == null)
                {
                    transaction = connection.BeginTransaction();
                }
                else
                {
                    transaction = vTransaction;
                }

                #endregion

                string sqlText = "delete from SMC_PurchaseData";


                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.ExecuteNonQuery();
                result = commonDal.BulkInsert("SMC_PurchaseData", data, connection, transaction, 10000, null, connVM);

                string localPurchase = @"

SELECT 
	   Challan_No+Project+Nature+Supplier_Name [ID]
      ,Supplier_Name [Vendor_Name]
      ,'-'[Vendor_Code]
      ,Challan_No+Project+Nature [Referance_No]
      ,''[Previous_Purchase_No]
      ,'Y' [Post]
      ,''[LC_No]
      ,'-'[Item_Code]
      ,Product_Name [Item_Name]
      , isnull(Quantity,1)Quantity
      ,isnull([UOM],'Unit')[UOM]

      ,Remarks [Comments]
	  ,Exemted_LocalPrice [Total_Price]
      , 0 [VAT_Amount]
      ,Challan_No [BE_Number]
      ,[InvoiceDate] [Invoice_Date]
      ,ReceiveDate[Receive_Date]
      ,'N'[With_VDS]
      ,ATCustomHouse [Custom_House]

      ,'NonVAT' [Type]
      ,'100' [Rebate_Rate]
      ,0 [SD_Amount]
      ,0[CnF_Amount]
      ,0[Insurance_Amount]
      ,0[Assessable_Value]
      ,0[CD_Amount]
      ,0[RD_Amount]
      ,0[TVB_Amount]
      ,0[TVA_Amount]
      ,0[ATV_Amount]
      ,0[Others_Amount]
      ,0[AITAmount]
      ,0[AT_Amount]
      ,'Y'[IsRebate]
      ,[ReceiveDate] [RebateDate]
	  ,'Other' Transaction_Type
  FROM SMC_PurchaseData
  where 
  Exemted_LocalPrice is not null
  and Nature != 'service'

  union all

  SELECT 
	   Challan_No+Project+Nature+Supplier_Name [ID]
      ,Supplier_Name [Vendor_Name]
      ,'-'[Vendor_Code]
      ,Challan_No+Project+Nature [Referance_No]
      ,''[Previous_Purchase_No]
      ,'Y' [Post]
      ,''[LC_No]
      ,'-'[Item_Code]
      ,Product_Name [Item_Name]
      , isnull(Quantity,1)Quantity
      ,isnull([UOM],'Unit')[UOM]

      ,Remarks [Comments]
	  ,Standard_LocalPrice [Total_Price]
      ,Standard_LocalVatAmount [VAT_Amount]
      ,Challan_No [BE_Number]
      ,[InvoiceDate] [Invoice_Date]
      ,ReceiveDate[Receive_Date]
      ,'N'[With_VDS]
      ,ATCustomHouse [Custom_House]
      ,'VAT' [Type]
      ,'100' [Rebate_Rate]
      ,0 [SD_Amount]
      ,0[CnF_Amount]
      ,0[Insurance_Amount]
      ,0[Assessable_Value]
      ,0[CD_Amount]
      ,0[RD_Amount]
      ,0[TVB_Amount]
      ,0[TVA_Amount]
      ,0[ATV_Amount]
      ,0[Others_Amount]
      ,0[AITAmount]
      ,0[AT_Amount]
      ,'Y'[IsRebate]
      ,[ReceiveDate] [RebateDate]
	  ,'Other' Transaction_Type
  FROM SMC_PurchaseData
  where 
  Standard_LocalPrice is not null
  and Nature != 'service'

union all
  
 SELECT 
	   Challan_No+Project+Nature+Supplier_Name [ID]
      ,Supplier_Name [Vendor_Name]
      ,'-'[Vendor_Code]
      ,Challan_No+Project+Nature [Referance_No]
      ,''[Previous_Purchase_No]
      ,'Y' [Post]
      ,''[LC_No]
      ,'-'[Item_Code]
      ,Product_Name [Item_Name]
      , isnull(Quantity,1)Quantity
      ,isnull([UOM],'Unit')[UOM]

      ,Remarks [Comments]
	  ,WithoutStandard_LocalPrice [Total_Price]
      ,WithoutStandard_LocalVatAmount [VAT_Amount]
      ,Challan_No [BE_Number]
      ,[InvoiceDate] [Invoice_Date]
      ,ReceiveDate[Receive_Date]
      ,'N'[With_VDS]
      ,ATCustomHouse [Custom_House]
      ,'OtherRate' [Type]
      ,'100' [Rebate_Rate]
      ,0 [SD_Amount]
      ,0[CnF_Amount]
      ,0[Insurance_Amount]
      ,0[Assessable_Value]
      ,0[CD_Amount]
      ,0[RD_Amount]
      ,0[TVB_Amount]
      ,0[TVA_Amount]
      ,0[ATV_Amount]
      ,0[Others_Amount]
      ,0[AITAmount]
      ,0[AT_Amount]
      ,'Y'[IsRebate]
      ,[ReceiveDate] [RebateDate]
	  ,'Other' Transaction_Type
  FROM SMC_PurchaseData
  where 
  WithoutStandard_LocalPrice is not null
  and Nature != 'service'

  union all 

  SELECT 
	   Challan_No+Project+Nature+Supplier_Name [ID]
      ,Supplier_Name [Vendor_Name]
      ,'-'[Vendor_Code]
      ,Challan_No+Project+Nature [Referance_No]
      ,''[Previous_Purchase_No]
      ,'Y' [Post]
      ,''[LC_No]
      ,'-'[Item_Code]
      ,Product_Name [Item_Name]
      , isnull(Quantity,1)Quantity
      ,isnull([UOM],'Unit')[UOM]

      ,Remarks [Comments]
	  ,FixedPrice [Total_Price]
      ,Fixed_VatAmount [VAT_Amount]
      ,Challan_No [BE_Number]
      ,[InvoiceDate] [Invoice_Date]
      ,ReceiveDate[Receive_Date]
      ,'N'[With_VDS]
      ,ATCustomHouse [Custom_House]
      ,'FixedVAT' [Type]
      ,'100' [Rebate_Rate]
      ,0 [SD_Amount]
      ,0[CnF_Amount]
      ,0[Insurance_Amount]
      ,0[Assessable_Value]
      ,0[CD_Amount]
      ,0[RD_Amount]
      ,0[TVB_Amount]
      ,0[TVA_Amount]
      ,0[ATV_Amount]
      ,0[Others_Amount]
      ,0[AITAmount]
      ,0[AT_Amount]
      ,'Y'[IsRebate]
      ,[ReceiveDate] [RebateDate]
	  ,'Other' Transaction_Type
  FROM SMC_PurchaseData
  where 
  FixedPrice is not null
  and Nature != 'service'

  ";


                cmd.CommandText = localPurchase;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                DataTable table = new DataTable();
                adapter.Fill(table);

                //string columns = "";

                //foreach (DataColumn column in table.Columns)
                //{
                //    columns += column.ColumnName + ",";
                //}

                PurchaseDAL purchasedal = new PurchaseDAL();
                paramVM.TransactionType = "other";
                string[] results = purchasedal.SaveTempPurchase(table, paramVM.BranchCode, paramVM.TransactionType,
                    paramVM.CurrentUser,
                    branchId, () => { }, connection, transaction, connVM, UserId, true);



                #region Commit

                if (result[0].ToLower() == "success" && vTransaction == null)
                {
                    transaction.Commit();
                }

                #endregion

            }
            #endregion

            #region Catch and Finally

            catch (Exception e)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                }

                result[0] = "fail";

                ////FileLogger.Log("SaleDAL124", "SaveAndProcess", e.Message + " \n" + e.StackTrace);

                FileLogger.Log("PurchaseDAL", "SaveAndProcess", e.ToString(), "Purchase");

                throw e;
            }
            finally
            {

                if (connection.State == ConnectionState.Open && vConnection == null)
                {
                    connection.Close();

                }

            }
            #endregion

            return result;
        }


        private void CheckHSCodeValidity(PurchaseMasterVM Master, List<PurchaseDetailVM> Details, SqlConnection currConn,
            SqlTransaction transaction)
        {
            string getImport = @"select count(Id) from HSCodes
                    where HSCode = @hscode and VAT = @vat and SD = @sd";
            string getLocal = @"select count(Id) from HSCodes
                    where HSCode = @hscode and OtherVAT = @vat and OtherSD = @sd";

            SqlCommand hsCodeCommand = new SqlCommand("", currConn, transaction);
            foreach (PurchaseDetailVM purchaseDetailVm in Details)
            {
                if (Master.TransactionType.ToLower() == "other" || Master.TransactionType.ToLower() == "inputservice")
                {
                    hsCodeCommand.CommandText = getLocal;
                }
                else
                {
                    hsCodeCommand.CommandText = getImport;
                }

                hsCodeCommand.Parameters.AddWithValueAndParamCheck("@vat", purchaseDetailVm.VATRate);
                hsCodeCommand.Parameters.AddWithValueAndParamCheck("@hscode", purchaseDetailVm.HSCode);
                hsCodeCommand.Parameters.AddWithValueAndParamCheck("@sd", purchaseDetailVm.SD);

                var count = Convert.ToInt32(hsCodeCommand.ExecuteScalar());

                if (count == 0)
                {
                    throw new Exception("Item Name: " + purchaseDetailVm.ProductName + "\n HS Code:" +
                                        purchaseDetailVm.HSCode +
                                        "\n HS Code and VAT Rate Not Matched");
                }
            }
        }


        public DataTable GetPurchaseTrakingExcelData(string VendorID = null, string ItemNo = null
            , string InvoiceDateTimeFrom = null, string InvoiceDateTimeTo = null, string ReceiveDateFrom = null, string ReceiveDateTo = null
            , string expireDateFrom = null, string expireDateTo = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                sqlText = @"
select  
r.PurchaseInvoiceNo
,v.VendorName
,r.BENo
,p.ProductCode,p.ProductName
,r.UOM
,r.UOMQty Quantity
,r.RestQty 
--,r.InvoiceDateTime
--,r.ReceiveDate
--,r.ExpireDate
,Format(r.InvoiceDateTime,'dd-MM-yyyy HH:mm:ss')InvoiceDateTime
,Format(r.ReceiveDate,'dd-MM-yyyy HH:mm:ss')ReceiveDate
,Format(r.ExpireDate,'dd-MM-yyyy HH:mm:ss')ExpireDate

 from PurchaseTrackingRecord r
left outer join Products p on r.ItemNo=p.ItemNo
left outer join PurchaseInvoiceHeaders h on r.PurchaseInvoiceNo=h.PurchaseInvoiceNo
left outer join Vendors v on h.VendorID=v.VendorID
where 1=1

  ";


                if (!string.IsNullOrWhiteSpace(VendorID))
                {
                    sqlText += " and h.VendorID = @VendorID";
                }

                if (!string.IsNullOrWhiteSpace(ItemNo))
                {
                    sqlText += " and r.ItemNo = @ItemNo";
                }

                if (!string.IsNullOrWhiteSpace(InvoiceDateTimeFrom))
                {
                    sqlText += " and r.InvoiceDateTime >=@InvoiceDateTimeFrom";
                }

                if (!string.IsNullOrWhiteSpace(InvoiceDateTimeTo))
                {
                    sqlText += " and r.InvoiceDateTime <= @InvoiceDateTimeTo";
                }

                if (!string.IsNullOrWhiteSpace(ReceiveDateFrom))
                {
                    sqlText += " and r.ReceiveDate >=@ReceiveDateFrom";
                }

                if (!string.IsNullOrWhiteSpace(ReceiveDateTo))
                {
                    sqlText += " and r.ReceiveDate <= @ReceiveDateTo";
                }

                if (!string.IsNullOrWhiteSpace(expireDateFrom))
                {
                    sqlText += " and r.[expireDate] >=@expireDateFrom";
                }

                if (!string.IsNullOrWhiteSpace(expireDateTo))
                {
                    sqlText += " and r.[expireDate] <= @expireDateTo";
                }


                var cmd = new SqlCommand(sqlText, currConn, transaction);

                if (!string.IsNullOrWhiteSpace(VendorID))
                {
                    cmd.Parameters.AddWithValue("@VendorID", VendorID);
                }

                if (!string.IsNullOrWhiteSpace(ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", ItemNo);
                }

                if (!string.IsNullOrWhiteSpace(InvoiceDateTimeFrom))
                {
                    cmd.Parameters.AddWithValue("@InvoiceDateTimeFrom", InvoiceDateTimeFrom);
                }

                if (!string.IsNullOrWhiteSpace(InvoiceDateTimeTo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceDateTimeTo", InvoiceDateTimeTo);
                }

                if (!string.IsNullOrWhiteSpace(ReceiveDateFrom))
                {
                    cmd.Parameters.AddWithValue("@ReceiveDateFrom", ReceiveDateFrom);
                }

                if (!string.IsNullOrWhiteSpace(ReceiveDateTo))
                {
                    cmd.Parameters.AddWithValue("@ReceiveDateTo", ReceiveDateTo);
                }

                if (!string.IsNullOrWhiteSpace(expireDateFrom))
                {
                    cmd.Parameters.AddWithValue("@expireDateFrom", expireDateFrom);
                }

                if (!string.IsNullOrWhiteSpace(expireDateTo))
                {
                    cmd.Parameters.AddWithValue("@expireDateTo", expireDateTo);
                }

                var table = new DataTable();
                var adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("PurchaseDAL", "GetPurchaseTrakingExcelData", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
        }


        public DataTable MISStockReport(string VendorID = null, string ItemNo = null
           , string InvoiceDateTimeFrom = null, string InvoiceDateTimeTo = null, string ReceiveDateFrom = null, string ReceiveDateTo = null
           , string expireDateFrom = null, string expireDateTo = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                sqlText = @"
select b.BranchCode,pc.IsRaw [Product Type],pc.CategoryName,p.ProductName,p.ProductCode,pr.PurchaseInvoiceNo,BENo ,convert (varchar(20),pr.InvoiceDateTime,103)+' '+convert (varchar(20),pr.InvoiceDateTime,108)[BOE Date],convert (varchar(20),pr.ReceiveDate,103)+' '+convert (varchar(20),pr.ReceiveDate,108) [Purchase Date], convert (varchar(20),pr.ExpireDate,103)+' '+convert (varchar(20),pr.ExpireDate,108)ExpireDate ,DATEDIFF(DAY,  GETDATE(),pr.ExpireDate) AS [Remaining shelf life],pd.BEItemNo,pr.UOMQty Qtya,pr.RestQty
from PurchaseTrackingRecord pr
   left outer join PurchaseInvoiceHeaders pur on  pr.PurchaseHeaderId=pur.Id
   left outer join PurchaseInvoiceDetails pd on  pr.PurchaseInvoiceNo=pd.PurchaseInvoiceNo
   left outer join Products p on  pr.ItemNo=p.ItemNo
   left outer join ProductCategories pc on  p.CategoryID=pc.CategoryID
   left outer join BranchProfiles b on  pur.BranchId=b.BranchId
where 1=1
order by pr.PurchaseInvoiceNo,pr.ReceiveDate,pr.ItemNo
  ";


                //if (!string.IsNullOrWhiteSpace(VendorID))
                //{
                //    sqlText += " and h.VendorID = @VendorID";
                //}

                //if (!string.IsNullOrWhiteSpace(ItemNo))
                //{
                //    sqlText += " and r.ItemNo = @ItemNo";
                //}

                //if (!string.IsNullOrWhiteSpace(InvoiceDateTimeFrom))
                //{
                //    sqlText += " and r.InvoiceDateTime >=@InvoiceDateTimeFrom";
                //}

                //if (!string.IsNullOrWhiteSpace(InvoiceDateTimeTo))
                //{
                //    sqlText += " and r.InvoiceDateTime <= @InvoiceDateTimeTo";
                //}

                //if (!string.IsNullOrWhiteSpace(ReceiveDateFrom))
                //{
                //    sqlText += " and r.ReceiveDate >=@ReceiveDateFrom";
                //}

                //if (!string.IsNullOrWhiteSpace(ReceiveDateTo))
                //{
                //    sqlText += " and r.ReceiveDate <= @ReceiveDateTo";
                //}

                //if (!string.IsNullOrWhiteSpace(expireDateFrom))
                //{
                //    sqlText += " and r.[expireDate] >=@expireDateFrom";
                //}

                //if (!string.IsNullOrWhiteSpace(expireDateTo))
                //{
                //    sqlText += " and r.[expireDate] <= @expireDateTo";
                //}


                var cmd = new SqlCommand(sqlText, currConn, transaction);

                //if (!string.IsNullOrWhiteSpace(VendorID))
                //{
                //    cmd.Parameters.AddWithValue("@VendorID", VendorID);
                //}

                //if (!string.IsNullOrWhiteSpace(ItemNo))
                //{
                //    cmd.Parameters.AddWithValue("@ItemNo", ItemNo);
                //}

                //if (!string.IsNullOrWhiteSpace(InvoiceDateTimeFrom))
                //{
                //    cmd.Parameters.AddWithValue("@InvoiceDateTimeFrom", InvoiceDateTimeFrom);
                //}

                //if (!string.IsNullOrWhiteSpace(InvoiceDateTimeTo))
                //{
                //    cmd.Parameters.AddWithValue("@InvoiceDateTimeTo", InvoiceDateTimeTo);
                //}

                //if (!string.IsNullOrWhiteSpace(ReceiveDateFrom))
                //{
                //    cmd.Parameters.AddWithValue("@ReceiveDateFrom", ReceiveDateFrom);
                //}

                //if (!string.IsNullOrWhiteSpace(ReceiveDateTo))
                //{
                //    cmd.Parameters.AddWithValue("@ReceiveDateTo", ReceiveDateTo);
                //}

                //if (!string.IsNullOrWhiteSpace(expireDateFrom))
                //{
                //    cmd.Parameters.AddWithValue("@expireDateFrom", expireDateFrom);
                //}

                //if (!string.IsNullOrWhiteSpace(expireDateTo))
                //{
                //    cmd.Parameters.AddWithValue("@expireDateTo", expireDateTo);
                //}

                var table = new DataTable();
                var adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null && Vtransaction == null) { transaction.Rollback(); }

                FileLogger.Log("PurchaseDAL", "MISStockReport", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
        }

        #region Purchase TDS

        public DataTable GetPurchaseTDSExcelData(List<string> invoiceList, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDAl = new CommonDAL();

                string companyCode = commonDAl.settings("CompanyCode", "Code", currConn, transaction, connVM);


                sqlText = @"select 
PurchaseInvoiceNo
,isnull(TDSCode,'-') TDSCode
,isnull(PurchaseBillAmount,0)PurchaseBillAmount
,isnull(TDSAmount,0)TDSAmount
FROM PurchaseTDSs
  where PurchaseInvoiceNo in ('";

                sqlText += string.Join("','", invoiceList);


                sqlText += "')";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);


                #region Commit

                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit

                return table;


            }

            #endregion

            #region Catch and Finall

            catch (Exception ex)
            {
                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("PurchaseDAL", "GetExcelData", ex.ToString() + "\n" + sqlText, "Purchase");

                throw ex;
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion
        }


        public string[] ImportPurchaseTDS(List<PurchaseTDSsVM> Details, SqlTransaction Vtransaction, SqlConnection VcurrConn, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            //retResults[4] = "";
            //object objIDExist = new object();

            int transResult = 0;
            string sqlText = "";

            int IDExist = 0;

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion Initializ

            #region Try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Insert Details

                #region Validation for Data

                if (Details.Count() < 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgNoDataToSave);
                }


                #endregion Validation for Detail

                #region Insert Detail Table

                foreach (PurchaseTDSsVM Item in Details.ToList())
                {
                    IDExist = 0;

                    #region Insert PurchaseInvoiceDetails

                    PurchaseTDSsVM pDet = new PurchaseTDSsVM();
                    pDet.PurchaseInvoiceNo = Item.PurchaseInvoiceNo;
                    pDet.TDSCode = Item.TDSCode;
                    pDet.PurchaseBillAmount = Item.PurchaseBillAmount;
                    pDet.TDSAmount = Item.TDSAmount;

                    #region Find Transaction Exist

                    sqlText = "";
                    sqlText = sqlText + "select COUNT(PurchaseInvoiceNo) from PurchaseInvoiceHeaders WHERE PurchaseInvoiceNo=@MasterId";
                    SqlCommand cmdExistTran = new SqlCommand(sqlText, currConn);
                    cmdExistTran.Transaction = transaction;
                    cmdExistTran.Parameters.AddWithValueAndNullHandle("@MasterId", pDet.PurchaseInvoiceNo);
                    //IDExist = (int)cmdExistTran.ExecuteScalar();
                    object objIDExist = cmdExistTran.ExecuteScalar();
                    if (objIDExist != null)
                    {
                        IDExist = Convert.ToInt32(objIDExist);
                    }

                    if (IDExist > 0)
                    {
                        IDExist = 0;

                        sqlText = "";
                        sqlText = sqlText + "select COUNT(PurchaseInvoiceNo) from PurchaseTDSs WHERE PurchaseInvoiceNo=@MasterPurchaseInvoiceNo";
                        cmdExistTran = new SqlCommand(sqlText, currConn);
                        cmdExistTran.Transaction = transaction;
                        cmdExistTran.Parameters.AddWithValueAndNullHandle("@MasterPurchaseInvoiceNo", pDet.PurchaseInvoiceNo);
                        //IDExist = (int)cmdExistTran.ExecuteScalar();
                        objIDExist = cmdExistTran.ExecuteScalar();

                        if (objIDExist != null)
                        {
                            IDExist = Convert.ToInt32(objIDExist);
                        }

                        if (IDExist > 0)
                        {
                            retResults = UpdateToPurchaseTDS(pDet, currConn, transaction, connVM);
                        }
                        else
                        {
                            retResults = InsertToPurchaseTDS(pDet, currConn, transaction, connVM);
                        }


                    }
                    else
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, "Requested Information Not Exist for PurchaseInvoiceNo : " + pDet.PurchaseInvoiceNo);
                    }

                    #endregion Find Transaction Exist

                    if (retResults[0] != "Success")
                    {
                        throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, retResults[1]);
                    }

                    #endregion

                }

                #endregion Insert Detail Table

                #endregion

                #region Commit

                if (VcurrConn == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();

                    }
                }

                #endregion Commit

                #region SuccessResult
                retResults = new string[5];
                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "";
                retResults[3] = "N";
                retResults[4] = "0";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";

                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("PurchaseDAL", "ImportPurchaseTDS", ex.ToString() + "\n" + sqlText, "Purchase");

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }


        public string[] InsertToPurchaseTDS(PurchaseTDSsVM TDSvm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[5];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            retResults[4] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";
            string PostStatus = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Insert

                sqlText = "";
                sqlText += " insert into PurchaseTDSs";
                sqlText += " (";
                sqlText += "  PurchaseInvoiceNo";
                sqlText += " ,TDSCode";
                sqlText += " ,PurchaseBillAmount";
                sqlText += " ,TDSAmount";

                sqlText += " )";

                sqlText += " values";
                sqlText += " (";
                sqlText += " @Master_PurchaseInvoiceNo";
                sqlText += ",@Master_TDSCode";
                sqlText += ",@Master_PurchaseBillAmount";
                sqlText += ",@Master_TDSAmount";

                sqlText += ") SELECT SCOPE_IDENTITY()";


                SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                cmdInsert.Transaction = transaction;

                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_PurchaseInvoiceNo", TDSvm.PurchaseInvoiceNo);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TDSCode", TDSvm.TDSCode);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_PurchaseBillAmount", TDSvm.PurchaseBillAmount);
                cmdInsert.Parameters.AddWithValueAndNullHandle("@Master_TDSAmount", TDSvm.TDSAmount);

                transResult = Convert.ToInt32(cmdInsert.ExecuteScalar());

                retResults[4] = transResult.ToString();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert,
                                                    MessageVM.PurchasemsgSaveNotSuccessfully);
                }


                #endregion ID generated completed,Insert new Information in Header

                #region Commit


                if (VcurrConn == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "";
                retResults[3] = "";
                #endregion SuccessResult

            }
            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("PurchaseDAL", "InsertToPurchaseTDS", ex.ToString() + "\n" + sqlText, "Purchase");

            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }


        public string[] UpdateToPurchaseTDS(PurchaseTDSsVM TDSvm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            retResults[3] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            int transResult = 0;
            string sqlText = "";

            #endregion Initializ

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Update

                sqlText = "";
                sqlText += " update PurchaseTDSs set  ";
                sqlText += "  TDSCode   =@TDSCode";
                sqlText += " ,PurchaseBillAmount            =@PurchaseBillAmount";
                sqlText += " ,TDSAmount     =@TDSAmount";

                sqlText += " where PurchaseInvoiceNo=@PurchaseInvoiceNo";

                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                cmdUpdate.Transaction = transaction;

                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PurchaseInvoiceNo", TDSvm.PurchaseInvoiceNo);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TDSCode", TDSvm.TDSCode);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@PurchaseBillAmount", TDSvm.PurchaseBillAmount);
                cmdUpdate.Parameters.AddWithValueAndNullHandle("@TDSAmount", TDSvm.TDSAmount);

                transResult = (int)cmdUpdate.ExecuteNonQuery();

                if (transResult <= 0)
                {
                    throw new ArgumentNullException(MessageVM.PurchasemsgMethodNameInsert, MessageVM.PurchasemsgSaveNotSuccessfully);
                }

                #endregion ID generated completed,Insert new Information in Header

                #region Commit

                if (VcurrConn == null)
                {
                    if (transaction != null)
                    {
                        if (transResult > 0)
                        {
                            transaction.Commit();
                        }
                    }
                }

                #endregion Commit

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = MessageVM.PurchasemsgSaveSuccessfully;
                retResults[2] = "";
                retResults[3] = "";
                #endregion SuccessResult

            }

            #endregion Try

            #region Catch and Finall

            catch (Exception ex)
            {
                retResults = new string[5];
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[2] = "0";
                retResults[3] = "N";
                retResults[4] = "0";
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("PurchaseDAL", "UpdateToPurchaseTDS", ex.ToString() + "\n" + sqlText, "Purchase");
            }
            finally
            {
                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }
            #endregion Catch and Finall

            #region Result

            return retResults;

            #endregion Result

        }


        #endregion

        public string[] HSCodeUpdatePurchase(string PeriodName, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Find Fiscal Year Lock
                //string PeriodName = dateTimePeriodIdPicker.Value.ToString("MMMM-yyyy");

                string[] cValues = { PeriodName };
                string[] cFields = { "PeriodName" };
                FiscalYearVM varFiscalYearVM = new FiscalYearVM();
                varFiscalYearVM = new FiscalYearDAL().SelectAll(0, cFields, cValues, null, null, connVM).FirstOrDefault();

                if (varFiscalYearVM == null)
                {
                    throw new ArgumentException(PeriodName + ": This Fiscal Period is not Exist!");
                }

                if (varFiscalYearVM.VATReturnPost == "Y")
                {
                    throw new ArgumentException(PeriodName + ": VAT Return (9.1) already submitted for this month!");
                }

                #endregion

                #region Sql Text

                //var updateHSCode = @"update SalesTempData set IsProcessed = @flag Where Id = @Id";
                var updateHSCode = @"update PurchaseInvoiceDetails  set HSCode=Products.HSCodeNo from PurchaseInvoiceDetails 
                                      inner join Products on Products.ItemNo =PurchaseInvoiceDetails.ItemNo 
                                      and (PurchaseInvoiceDetails.HSCode is null or LEN(PurchaseInvoiceDetails.HSCode)<5) and PeriodID=@PeriodID";

                #endregion

                #region Sql Command

                var cmd = new SqlCommand(updateHSCode, currConn, transaction);

                cmd.Parameters.AddWithValue("@PeriodID", varFiscalYearVM.PeriodID);
                //cmd.Parameters.AddWithValue("@flag", flag);

                var row = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();
                retResults[0] = "success";
                retResults[1] = "success";
                retResults[2] = row.ToString();

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("PurchaseDAL", "HSCodeUpdatePurchase", ex.ToString(), "Purchase");
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }


        #region Get data for API Response

        public DataTable SelectAllForAPI(DataTable dtIds, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();

            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                #region SqlText

                #region SqlText

                sqlText += @" SELECT
pih.PurchaseInvoiceNo 
,isnull(pih.ImportIDExcel,'')ImportID
,v.VendorName
,pih.FileName FileId
,pih.InvoiceDateTime InvoiceDateTime
,isnull(pih.TotalAmount,0) TotalAmount 
,isnull(pih.TotalVATAmount,0) TotalVATAmount 

FROM PurchaseInvoiceHeaders pih 
left outer join Vendors v on pih.VendorID=v.VendorID 
WHERE  1=1 
";
                #endregion SqlText

                string ids = "";

                foreach (DataRow dataRow in dtIds.Rows)
                {
                    ids += "'" + dataRow["ID"] + "'" + ",";
                }
                ids = ids.TrimEnd(',');

                sqlText += " AND pih.ImportIDExcel IN(" + ids + ")";

                #endregion SqlText

                #region SqlExecution

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;
                da.SelectCommand.CommandTimeout = 500;

                da.Fill(dt);

                #endregion SqlExecution

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {

                FileLogger.Log("PurchaseDAL", "SelectAllForAPI", ex.ToString() + "\n" + sqlText, "Purchase");
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            #endregion
            #region finally
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return dt;
        }


        #endregion




    }
}