//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.BanderolProductsWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BanderolProductsWCF.IBanderolProductsWCF")]
    public interface IBanderolProductsWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/DoWork", ReplyAction="http://tempuri.org/IBanderolProductsWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/DoWork", ReplyAction="http://tempuri.org/IBanderolProductsWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/InsertToBanderolProducts", ReplyAction="http://tempuri.org/IBanderolProductsWCF/InsertToBanderolProductsResponse")]
        string InsertToBanderolProducts(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/InsertToBanderolProducts", ReplyAction="http://tempuri.org/IBanderolProductsWCF/InsertToBanderolProductsResponse")]
        System.Threading.Tasks.Task<string> InsertToBanderolProductsAsync(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/UpdateBanderolProduct", ReplyAction="http://tempuri.org/IBanderolProductsWCF/UpdateBanderolProductResponse")]
        string UpdateBanderolProduct(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/UpdateBanderolProduct", ReplyAction="http://tempuri.org/IBanderolProductsWCF/UpdateBanderolProductResponse")]
        System.Threading.Tasks.Task<string> UpdateBanderolProductAsync(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/DeleteBanderolProduct", ReplyAction="http://tempuri.org/IBanderolProductsWCF/DeleteBanderolProductResponse")]
        string DeleteBanderolProduct(string BandProductId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/DeleteBanderolProduct", ReplyAction="http://tempuri.org/IBanderolProductsWCF/DeleteBanderolProductResponse")]
        System.Threading.Tasks.Task<string> DeleteBanderolProductAsync(string BandProductId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/SearchBanderolProducts", ReplyAction="http://tempuri.org/IBanderolProductsWCF/SearchBanderolProductsResponse")]
        string SearchBanderolProducts(string ProductName, string ProductCode, string BanderolId, string BanderolName, string PackagingId, string PackagingNature, string ActiveStatus, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/SearchBanderolProducts", ReplyAction="http://tempuri.org/IBanderolProductsWCF/SearchBanderolProductsResponse")]
        System.Threading.Tasks.Task<string> SearchBanderolProductsAsync(string ProductName, string ProductCode, string BanderolId, string BanderolName, string PackagingId, string PackagingNature, string ActiveStatus, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/SearchBanderol", ReplyAction="http://tempuri.org/IBanderolProductsWCF/SearchBanderolResponse")]
        string SearchBanderol(string BandProductId, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanderolProductsWCF/SearchBanderol", ReplyAction="http://tempuri.org/IBanderolProductsWCF/SearchBanderolResponse")]
        System.Threading.Tasks.Task<string> SearchBanderolAsync(string BandProductId, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBanderolProductsWCFChannel : VATDesktop.Repo.BanderolProductsWCF.IBanderolProductsWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BanderolProductsWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.BanderolProductsWCF.IBanderolProductsWCF>, VATDesktop.Repo.BanderolProductsWCF.IBanderolProductsWCF {
        
        public BanderolProductsWCFClient() {
        }
        
        public BanderolProductsWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BanderolProductsWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanderolProductsWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanderolProductsWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string InsertToBanderolProducts(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf) {
            return base.Channel.InsertToBanderolProducts(BandProductId, ItemNo, BanderolID, PackagingId, BUsedQty, ActiveStatus, CreatedBy, CreatedOn, LastModifiedBy, LastModifiedOn, WastageQty, OpeningQty, OpeningDate, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToBanderolProductsAsync(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string CreatedBy, string CreatedOn, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf) {
            return base.Channel.InsertToBanderolProductsAsync(BandProductId, ItemNo, BanderolID, PackagingId, BUsedQty, ActiveStatus, CreatedBy, CreatedOn, LastModifiedBy, LastModifiedOn, WastageQty, OpeningQty, OpeningDate, connVMwcf);
        }
        
        public string UpdateBanderolProduct(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf) {
            return base.Channel.UpdateBanderolProduct(BandProductId, ItemNo, BanderolID, PackagingId, BUsedQty, ActiveStatus, LastModifiedBy, LastModifiedOn, WastageQty, OpeningQty, OpeningDate, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateBanderolProductAsync(string BandProductId, string ItemNo, string BanderolID, string PackagingId, decimal BUsedQty, string ActiveStatus, string LastModifiedBy, string LastModifiedOn, string WastageQty, decimal OpeningQty, string OpeningDate, string connVMwcf) {
            return base.Channel.UpdateBanderolProductAsync(BandProductId, ItemNo, BanderolID, PackagingId, BUsedQty, ActiveStatus, LastModifiedBy, LastModifiedOn, WastageQty, OpeningQty, OpeningDate, connVMwcf);
        }
        
        public string DeleteBanderolProduct(string BandProductId, string connVMwcf) {
            return base.Channel.DeleteBanderolProduct(BandProductId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DeleteBanderolProductAsync(string BandProductId, string connVMwcf) {
            return base.Channel.DeleteBanderolProductAsync(BandProductId, connVMwcf);
        }
        
        public string SearchBanderolProducts(string ProductName, string ProductCode, string BanderolId, string BanderolName, string PackagingId, string PackagingNature, string ActiveStatus, string connVMwcf) {
            return base.Channel.SearchBanderolProducts(ProductName, ProductCode, BanderolId, BanderolName, PackagingId, PackagingNature, ActiveStatus, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchBanderolProductsAsync(string ProductName, string ProductCode, string BanderolId, string BanderolName, string PackagingId, string PackagingNature, string ActiveStatus, string connVMwcf) {
            return base.Channel.SearchBanderolProductsAsync(ProductName, ProductCode, BanderolId, BanderolName, PackagingId, PackagingNature, ActiveStatus, connVMwcf);
        }
        
        public string SearchBanderol(string BandProductId, string connVMwcf) {
            return base.Channel.SearchBanderol(BandProductId, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchBanderolAsync(string BandProductId, string connVMwcf) {
            return base.Channel.SearchBanderolAsync(BandProductId, connVMwcf);
        }
    }
}
