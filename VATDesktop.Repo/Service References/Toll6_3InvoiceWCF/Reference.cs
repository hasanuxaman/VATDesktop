//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.Toll6_3InvoiceWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Toll6_3InvoiceWCF.IToll6_3InvoiceWCF")]
    public interface IToll6_3InvoiceWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/DoWork", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/DoWork", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/SelectAllList", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/SelectAllList", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/Insert", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/InsertResponse")]
        string Insert(string MasterVMwcf, string DetailVMswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/Insert", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/InsertResponse")]
        System.Threading.Tasks.Task<string> InsertAsync(string MasterVMwcf, string DetailVMswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/InsertDetailList", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/InsertDetailListResponse")]
        string InsertDetailList(string DetailVMswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/InsertDetailList", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/InsertDetailListResponse")]
        System.Threading.Tasks.Task<string> InsertDetailListAsync(string DetailVMswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/Post", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/PostResponse")]
        string Post(string MasterVMwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/Post", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/PostResponse")]
        System.Threading.Tasks.Task<string> PostAsync(string MasterVMwcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/SelectAll", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/SelectAll", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/SelectDetail", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/SelectDetailResponse")]
        string SelectDetail(string TollNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/SelectDetail", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/SelectDetailResponse")]
        System.Threading.Tasks.Task<string> SelectDetailAsync(string TollNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/TollSearch", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/TollSearchResponse")]
        string TollSearch(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/TollSearch", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/TollSearchResponse")]
        System.Threading.Tasks.Task<string> TollSearchAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/Update", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/UpdateResponse")]
        string Update(string MasterVMwcf, string DetailVMswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/Update", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(string MasterVMwcf, string DetailVMswcf, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/UpdateTollCompleted", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/UpdateTollCompletedResponse")]
        string UpdateTollCompleted(string flag, string tollNo, string connVMWCF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToll6_3InvoiceWCF/UpdateTollCompleted", ReplyAction="http://tempuri.org/IToll6_3InvoiceWCF/UpdateTollCompletedResponse")]
        System.Threading.Tasks.Task<string> UpdateTollCompletedAsync(string flag, string tollNo, string connVMWCF);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IToll6_3InvoiceWCFChannel : VATDesktop.Repo.Toll6_3InvoiceWCF.IToll6_3InvoiceWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Toll6_3InvoiceWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.Toll6_3InvoiceWCF.IToll6_3InvoiceWCF>, VATDesktop.Repo.Toll6_3InvoiceWCF.IToll6_3InvoiceWCF {
        
        public Toll6_3InvoiceWCFClient() {
        }
        
        public Toll6_3InvoiceWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Toll6_3InvoiceWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Toll6_3InvoiceWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Toll6_3InvoiceWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public string Insert(string MasterVMwcf, string DetailVMswcf, string connVMWCF) {
            return base.Channel.Insert(MasterVMwcf, DetailVMswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> InsertAsync(string MasterVMwcf, string DetailVMswcf, string connVMWCF) {
            return base.Channel.InsertAsync(MasterVMwcf, DetailVMswcf, connVMWCF);
        }
        
        public string InsertDetailList(string DetailVMswcf, string connVMWCF) {
            return base.Channel.InsertDetailList(DetailVMswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> InsertDetailListAsync(string DetailVMswcf, string connVMWCF) {
            return base.Channel.InsertDetailListAsync(DetailVMswcf, connVMWCF);
        }
        
        public string Post(string MasterVMwcf, string connVMWCF) {
            return base.Channel.Post(MasterVMwcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> PostAsync(string MasterVMwcf, string connVMWCF) {
            return base.Channel.PostAsync(MasterVMwcf, connVMWCF);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public string SelectDetail(string TollNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectDetail(TollNo, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> SelectDetailAsync(string TollNo, string conditionFieldswcf, string conditionValueswcf, string connVMWCF) {
            return base.Channel.SelectDetailAsync(TollNo, conditionFieldswcf, conditionValueswcf, connVMWCF);
        }
        
        public string TollSearch(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.TollSearch(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> TollSearchAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMWCF) {
            return base.Channel.TollSearchAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMWCF);
        }
        
        public string Update(string MasterVMwcf, string DetailVMswcf, string connVMWCF) {
            return base.Channel.Update(MasterVMwcf, DetailVMswcf, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(string MasterVMwcf, string DetailVMswcf, string connVMWCF) {
            return base.Channel.UpdateAsync(MasterVMwcf, DetailVMswcf, connVMWCF);
        }
        
        public string UpdateTollCompleted(string flag, string tollNo, string connVMWCF) {
            return base.Channel.UpdateTollCompleted(flag, tollNo, connVMWCF);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTollCompletedAsync(string flag, string tollNo, string connVMWCF) {
            return base.Channel.UpdateTollCompletedAsync(flag, tollNo, connVMWCF);
        }
    }
}
