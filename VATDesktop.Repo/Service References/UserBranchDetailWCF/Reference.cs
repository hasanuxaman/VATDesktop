//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.UserBranchDetailWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserBranchDetailWCF.IUserBranchDetailWCF")]
    public interface IUserBranchDetailWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/DoWork", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/DoWork", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/Insert", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/InsertResponse")]
        string Insert(string UserBranchDetail, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/Insert", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/InsertResponse")]
        System.Threading.Tasks.Task<string> InsertAsync(string UserBranchDetail, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/SelectAll", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/SelectAll", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/SelectAllLst", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/SelectAllLstResponse")]
        string SelectAllLst(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/SelectAllLst", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/SelectAllLstResponse")]
        System.Threading.Tasks.Task<string> SelectAllLstAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/InsertfromExcel", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/InsertfromExcelResponse")]
        string InsertfromExcel(string datatablewcf, string CreatedBy, string Createdon, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserBranchDetailWCF/InsertfromExcel", ReplyAction="http://tempuri.org/IUserBranchDetailWCF/InsertfromExcelResponse")]
        System.Threading.Tasks.Task<string> InsertfromExcelAsync(string datatablewcf, string CreatedBy, string Createdon, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserBranchDetailWCFChannel : VATDesktop.Repo.UserBranchDetailWCF.IUserBranchDetailWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserBranchDetailWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.UserBranchDetailWCF.IUserBranchDetailWCF>, VATDesktop.Repo.UserBranchDetailWCF.IUserBranchDetailWCF {
        
        public UserBranchDetailWCFClient() {
        }
        
        public UserBranchDetailWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserBranchDetailWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserBranchDetailWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserBranchDetailWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string Insert(string UserBranchDetail, string connVMwcf) {
            return base.Channel.Insert(UserBranchDetail, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertAsync(string UserBranchDetail, string connVMwcf) {
            return base.Channel.InsertAsync(UserBranchDetail, connVMwcf);
        }
        
        public string SelectAll(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionFieldswcf, string conditionValueswcf, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionFieldswcf, conditionValueswcf, Dt, connVMwcf);
        }
        
        public string SelectAllLst(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllLst(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllLstAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllLstAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string InsertfromExcel(string datatablewcf, string CreatedBy, string Createdon, string connVMwcf) {
            return base.Channel.InsertfromExcel(datatablewcf, CreatedBy, Createdon, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertfromExcelAsync(string datatablewcf, string CreatedBy, string Createdon, string connVMwcf) {
            return base.Channel.InsertfromExcelAsync(datatablewcf, CreatedBy, Createdon, connVMwcf);
        }
    }
}
