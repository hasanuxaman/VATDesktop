using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using SymphonySofttech.Utilities;
using VATViewModel.DTOs;
using VATServer.Ordinary;
using System.Reflection;
using VATServer.Interface;
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.Style;

namespace VATServer.Library
{

    public class ReportDSDAL : IReport
    {
        #region Global Variables

        CommonDAL _cDAL = new CommonDAL();
        private DBSQLConnection _dbsqlConnection = new DBSQLConnection();
        VATRegistersDAL _vatRegistersDAL = new VATRegistersDAL();

        public string[] reportType = new string[]
                                         {
                                             "Detail", //0
                                             "Summery", //1
                                             "Single", //2
                                             "Monthly" //3
                                         };

        public IList<string> ReportTypeList
        {
            get
            {
                return reportType.ToList<string>();

            }
        }

        #endregion

        #region BankChannelMIS

        public DataSet BankChannelMISReport(string[] conditionFields = null, string[] conditionValues = null, SqlTransaction Vtransaction = null, SqlConnection VcurrConn = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("BankChannel");

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"

select 
 pur.PurchaseInvoiceNo
,pur.ReceiveDate
,pur.BENumber
,pur.InvoiceDateTime
,pur.VendorID
,ven.VendorName
,format(pur.RebateDate,'MMMM-yyyy')RebateDate
,isnull(pur.TotalAmount,0)TotalAmount
,isnull(pur.TotalVATAmount,0)TotalVATAmount
,bcp.PaymentDate
,isnull(bcp.PaymentAmount,0)PaymentAmount
,bcp.PaymentType
,isnull(bcp.VATAmount,0)VATAmount
,bcp.BankID
,bnk.BankName
 from PurchaseInvoiceHeaders pur
 left outer join Vendors ven on pur.VendorID=ven.VendorID
 left outer join BankChannelPayment bcp on pur.PurchaseInvoiceNo=bcp.PurchaseInvoiceNo
 left outer join BankInformations bnk on bcp.BankID=bnk.BankID
 where 1=1 and pur.TransactionType in('Other','InputService','Service','ServiceNS')

";

                #endregion

                #region condition Fields

                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else if (conditionFields[i].ToLower().Contains("isnull"))
                        {
                            sqlText += " AND isnull(" + cField + ",'N') = @" + cField;
                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                #endregion

                #region SQL Command

                SqlDataAdapter da = new SqlDataAdapter(sqlText, currConn);
                da.SelectCommand.Transaction = transaction;

                #endregion

                #region condition Values

                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            da.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                #endregion

                da.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BankChannelMISReport", ex.ToString() + "\n" + sqlText);

                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 2012 Law

        #region Sales Challan

        public DataSet VAT6_3(string SalesInvoiceNo, string Post1, string Post2, string ddmmyy = "n",
            SysDBInfoVMTemp connVM = null, bool mulitplePreview = false, string getTopValue = "", string pdfFlag = "N"
            , int FromRow = 0, int ToRow = 99999, string transactionType = "")
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();

                //string VAT6_3OrderByProduct = commonDal.settingsDesktop("Reports", "VAT6_3OrderByProduct");
                string VAT6_3OrderByProduct = "N";
                //string TrackingWithSale = commonDal.settingsDesktop("Purchase", "TrackingWithSale");
                string TrackingWithSale = "N";

                string PurchaseSaleTracking = commonDal.settingsDesktop("Purchase", "PurchaseSaleTracking");
                

                string code = commonDal.settingValue("CompanyCode", "Code");

                #region sql statement
                 
                string dbName = DatabaseInfoVM.DatabaseName;

                #region SQLText

                sqlText = @"
SELECT    
SIH.SalesInvoiceNo SalesInvoiceNo 
,isnull(SID.InvoiceLineNo,1)                                                   AS InvoiceLineNo
";
                if (ddmmyy.ToLower() == "y")
                {
                    sqlText += @"
,convert (varchar(20),SIH.InvoiceDateTime,103)+' '+convert (varchar(20),SIH.InvoiceDateTime,108)                    AS InvoiceDate
,convert (varchar(20),SIH.DeliveryDate,103)+' '+convert (varchar(20),SIH.DeliveryDate,108)                          AS DeliveryDate
";
                }
                else
                {
                    sqlText += @"
,convert (varchar,SIH.InvoiceDateTime,120)                                                                          AS InvoiceDate
,isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))                           AS DeliveryDate
";
                }

                sqlText += @"
,isnull(C.CustomerName,'N/A')                                                           AS CustomerName
,isnull(C.CustomerBanglaName,'N/A')                                                           AS CustomerBanglaName
,isnull(C.CustomerCode,'N/A')                                                           AS CustomerCode
,isnull(c.Address1,'N/A')                                                               AS Address1
,isnull(C.CustomerName,'N/A')                                                           AS Address2
,isnull(UIS.Signature,'N/A')                                                            AS Signature

------,isnull(c.Address2,'N/A')                                                             AS Address2
,isnull(c.Address3,'N/A')                                                               AS Address3
,isnull(c.TelephoneNo,'N/A')                                                            AS TelephoneNo
,isnull(c.IsTax,'N')                                                                    AS IsTax
,isnull(sih.DeliveryAddress1,'N/A')                                                     AS DeliveryAddress1
,isnull(sih.DeliveryAddress2,'N/A')                                                     AS DeliveryAddress2
,isnull(sih.DeliveryAddress3,'N/A')                                                     AS DeliveryAddress3
,isnull(v.VehicleType,'N/A')                                                            AS VehicleType
,isnull(v.VehicleNo,'N/A')                                                              AS VehicleNo
,isnull(P.ProductName,'N/A')                                                            AS ProductNameOld
,isnull(PC.CategoryName,'N/A')                                                          AS ProductDescription
,case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end ProductGroup
,isnull(SID.Quantity,SID.UOMQty)                                                        AS Quantity
,isnull(SID.UOM,'N/A')                                                                  AS UOM";

                if (code.ToLower() == "bata")
                {
                    sqlText += @"

,case when SID.TransactionType='TollIssue' then isnull(P.ProductName,'N/A')+' ('+P.ProductCode+')' else isnull(P.ProductName,'N/A') end       AS ProductName

";
                }
                else
                {
                    sqlText += @"
,isnull(P.ProductName,'N/A')                                                            AS ProductName     
,isnull(P.ProductCode,'N/A')                                                            AS ProductCode     

";
                }

                sqlText += @"

                       
,isnull(P.ShortName,'N/A')                                                              AS ShortName                            
------isnull(SID.Comments,'N/A')                                                            AS ProductCommercialName,
,isnull(SID.ProductDescription,'N/A')                                                   AS ProductCommercialName
,isnull(SID.NBRPrice,0)                                                                 AS UnitCost
,isnull(SID.PromotionalQuantity,0)                                                      AS PromotionalQuantity
,isnull(SID.VATRate,0)                                                                  AS VATRate
,isnull(SID.VATAmount,0)                                                                AS VATAmount
,isnull(SID.SD,0)                                                                       AS SD
,isnull(SID.SDAmount,0)                                                                 AS SDAmount
,isnull(SID.VDSAmount,0)                                                                AS VDSAmount
,ISNULL(SIH.HPSTotalAmount,0)                                                           AS HPSAmount
,isnull(c.VATRegistrationNo,'N/A')                                                      AS VATRegistrationNo
,isnull(c.NIDNo,'N/A')                                                                  AS NIDNo
,isnull(c.TelephoneNo,'N/A')                                                            AS TelephoneNo
,isnull(sih.SerialNo,'N/A')                                                             AS SerialNo
,isnull(SH.SerialNo,'N/A')                                                              AS PreviousSerialNo
,isnull(sih.AlReadyPrint,'0')                                                           AS AlReadyPrint
,isnull(sih.ImportIDExcel,'N/A')                                                        AS ImportIDExcel
,isnull(SH.ImportIDExcel,'N/A')                                                         AS PreviousImportIDExcel
,isnull(sih.Comments,'N/A')                                                             AS Comments
,isnull(SID.Comments,0)                                                                 AS CommentD
,isnull(SID.Type,'VAT')                                                                 AS VATType
,isnull(SID.DollerValue,0)                                                              AS DollerValue
,isnull(SID.CurrencyValue,0)                                                            AS CurrencyValue                                
------CASE WHEN @DbName like '%CPB_%' THEN SIH.ImportIDExcel  
------WHEN @DbName like '%BTSL_%' THEN SIH.ImportIDExcel ELSE SIH.Comments END              AS Comments                                                                                                                       
,isnull(SID.Weight,'')                                                                  AS Weight
,SIH.LCDate                                                                             AS LCDate
,Isnull(SIH.LCNumber,'-')                                                               AS LCNumber
,isnull(SIH.LCBank,'N/A')                                                               AS LCBank
,isnull(SIH.PINo,'-')                                                                   AS PINo
,SIH.PIDate                                                                             AS PIDate
,isnull(SIH.EXPFormNo,'-')                                                              AS EXPFormNo
,SIH.EXPFormDate                                                                        AS EXPFormDate
,isnull(SIH.BranchId,1)                                                                 AS BranchId
,isnull(SIH.SignatoryName,'N/A')                                                        AS SignatoryName
,UIS.Signature                                                                          AS Signature
,isnull(SIH.SignatoryDesig,'N/A')                                                       AS SignatoryDesig
,'-'                                                                                    AS SerialNo
,isnull(SIH.SaleType,'N/A')                                                             AS SaleType
,isnull(SIH.TransactionType,'N/A')                                                      AS TransactionType
,isnull(SIH.CurrencyID,0)                                                               AS CurrencyID
,isnull(SIH.CurrencyRateFromBDT,0)                                                      AS CurrencyRateFromBDT
,isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.NBRPrice,0)*isnull(SID.TradingMarkUp,0)/100,0),0)    AS Subtotal
,isnull(SID.TotalValue,0)                                                                                   AS TotalValue
,isnull(SID.Subtotal,0)                                                                                     AS Fixed_Subtotal
,isnull(SID.DiscountAmount,0)                                                                               AS DiscountAmount
,isnull(SIH.InvoiceDiscountAmount,0)                                                                        AS InvoiceDiscountAmount
,isnull(SID.DiscountedNBRPrice,0)                                                                           AS DiscountedNBRPrice
,case when SID.LastModifiedBy is null then SID.CreatedBy else SID.LastModifiedBy end                        AS EntryUserName
,isnull(SIH.PreviousSalesInvoiceNo,'N/A')                                                                   AS PreviousSalesInvoiceNo
,isnull(SIH.FileName,'-')                                                                   AS FileName
,convert (varchar,isnull(SID.PreviousInvoiceDateTime,'01/01/1900'),120)                                     AS PreviousInvoiceDateTime
,isnull(SID.PreviousNBRPrice ,'0')                                                                          AS PreviousNBRPrice
,isnull(SID.PreviousQuantity ,'0')                                                                          AS PreviousQuantity
,isnull(SID.PreviousUOM ,'0')                                                                               AS PreviousUOM
,isnull(SID.PreviousSubTotal ,'0')                                                                          AS PreviousSubTotal
,isnull(SID.PreviousVATRate ,'0')                                                                           AS PreviousVATRate
,isnull(SID.PreviousVATAmount ,'0')                                                                         AS PreviousVATAmount
,isnull(SID.PreviousSD ,'0')                                                                                AS PreviousSD
,isnull(SID.PreviousSDAmount ,'0')                                                                          AS PreviousSDAmount
,isnull(SID.ReasonOfReturn ,'N/A')                                                                          AS ReasonOfReturn
,isnull(SID.PreviousSalesInvoiceNo,'N/A')                                                                   AS PreviousSalesInvoiceNoD
,isnull(SID.SourcePaidVATAmount,0)                                                                          AS SourcePaidVATAmount
,isnull(SID.OtherRef,'-')                                                                                   AS OtherRef
,isnull(SID.LineTotal,0)                                                                                    AS LineTotal
,isnull(SID.PreLineTotal,0)                                                                                 AS PreLineTotal
,isnull(SID.ProductType,'-')                                                                                AS ProductType
,isnull(SIH.Section,'-')                                                                                    AS Section
,isnull(SIH.DataSource,'-')                                                                                 AS DataSource
,isnull(PS.TrackingQuantity,0)                                                                              AS TrackingQuantity
,PS.PurchaseInvoiceNo                                                                                       AS TPurchaseInvoiceNo
,PS.PurchaseInvoiceDateTime                                                                                 AS TPurchaseDateTime
,PS.BENumber                                                                                                AS TBENumber
,PS.CustomHouse                                                                                             AS TCustomHouse 
,SIE.EngineNumber
,SIE.ChassisNumber
,Pc.CategoryName
,SID.Option1                                                                                                    AS Option1 
,SID.Option1                                                                                                    AS DataColumn1  
,SIH.Option2                                                                                                    AS Option2
,SIH.Option3                                                                                                    AS Option3
,SIH.Option4                                                                                                    AS Option4
,SIH.Option5                                                                                                    AS Option5
,SIH.Option6                                                                                                    AS Option6
,SIH.Option7                                                                                                    AS Option7
,SIH.Option8                                                                                                    AS Option8
,SIH.Option9                                                                                                    AS Option9
,SIH.Option10                                                                                                   AS Option10
,SIH.Option11                                                                                                   AS Option11
,SIH.Option12                                                                                                   AS Option12
,isnull(SIH.TCSRate ,0)                                                                                         AS TCSRate

FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
dbo.SalesInvoiceHeaders AS SH ON SID.PreviousSalesInvoiceNo = SH.SalesInvoiceNo LEFT OUTER JOIN
                    
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.SaleEngineChassisDetails AS SIE ON P.ItemNo = SIE.ItemNo and SIE.SalesInvoiceNo=SID.SalesInvoiceNo
--left  JOIN dbo.UserInformations as UIS ON SIH.SignatoryName=UIS.FullName
left  JOIN dbo.UserInformations as UIS ON SIH.LastModifiedBy=UIS.UserName  
                --LEFT OUTER JOIN
                --    (
                --        SELECT top 1
                --            FullName,
                --            Signature
                --        FROM dbo.UserInformations
                --    ) AS UIS ON SIH.SignatoryName = UIS.FullName
";
                ////////if (transactionType == "Credit")
                ////////{
                ////////    sqlText += @" and SIE.SalesInvoiceNo=SID.PreviousSalesInvoiceNo ";
                ////////}
                ////////else
                ////////{
                ////////    sqlText += @" and SIE.SalesInvoiceNo=SID.SalesInvoiceNo ";
                ////////}
                sqlText += @"
LEFT OUTER JOIN
dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID 
left outer join 
( 
";
                if (string.IsNullOrEmpty(PurchaseSaleTracking) || PurchaseSaleTracking.ToLower() == "y")
                {
                    sqlText += @" select   p.PurchaseInvoiceNo,p.InvoiceDateTime PurchaseInvoiceDateTime,BENumber,CustomHouse,SalesInvoiceNo, ItemNo, UOMQty TrackingQuantity 
                    from SaleTrackingConsumption t
                        left outer join PurchaseInvoiceHeaders p on t.PurchaseInvoiceNo=p.PurchaseInvoiceNo 
                    where SalesInvoiceNo IN(@SalesInvoiceNo) ";
                }
                else
                {
                    sqlText += @" 
select distinct '-' PurchaseInvoiceNo,PurchaseInvoiceDateTime,BENumber,CustomHouse,SalesInvoiceNo, ItemNo,count(id)TrackingQuantity 
from PurchaseSaleTrackings where SalesInvoiceNo IN(@SalesInvoiceNo)
group by 
PurchaseInvoiceDateTime,BENumber,CustomHouse,SalesInvoiceNo, ItemNo ";
                }

                sqlText += @"

) PS 
on SID.SalesInvoiceNo=ps.SalesInvoiceNo and sid.ItemNo=ps.ItemNo

WHERE
(SIH.SalesInvoiceNo IN(@SalesInvoiceNo) )
--and (isnull(sih.Trading, 'N')=@Trading)
AND (SIH.Post =@Post1 or SIH.Post= @Post2)
--and (SID.Quantity>0)
";
                if (VAT6_3OrderByProduct.ToLower() == "y")
                {
                    if (code.ToLower() == "nestle")
                    {
                        sqlText += @"  order by ProductType desc, P.ProductName";
                    }
                    else
                    {
                        sqlText += @"  order by  P.ProductName";
                    }
                }
                else
                {
                    if (code.ToLower() == "nestle")
                    {
                        sqlText += @"  order by ProductType desc, P.ProductCode";
                    }
                    else
                    {
                        sqlText += @"   order by  P.ProductCode";
                    }

                }

                sqlText += @" OFFSET " + FromRow + " ROWS FETCH NEXT " + ToRow + " ROWS ONLY";




                sqlText += @" 
SELECT DISTINCT uom, SUM(isnull(Quantity,UOMQty)) qty
------,InvoiceLineNo
FROM  SalesInvoiceDetails 
WHERE (SalesInvoiceNo IN(@SalesInvoiceNo) )
and (isnull(UOMQty, Quantity)>0)
GROUP BY uom
------,InvoiceLineNo
------order by uom
------order by InvoiceLineNo";



                if (mulitplePreview)
                {
                    SalesInvoiceNo = " select distinct InvoiceNo from SalesInvoiceHeaderMasterTemp where InvoiceNo is not null ";
                }
                else if (!string.IsNullOrEmpty(getTopValue))
                {
                    SalesInvoiceNo = @" select top 500 SalesInvoiceNo from SalesInvoiceHeaders
                    where IsPDFGenerated = '" + pdfFlag + "' ";

                    if (getTopValue != "-")
                    {
                        SalesInvoiceNo += " and DataSource = '" + getTopValue + "'";
                    }
                }
                else
                {
                    if (!SalesInvoiceNo.Contains("'"))
                    {
                        SalesInvoiceNo = "'" + SalesInvoiceNo + "'";
                    }

                }
                sqlText = sqlText.Replace("@SalesInvoiceNo", SalesInvoiceNo);

                #endregion


                #region SQLExecution

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 800;


                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }


                if (!objCommSaleReport.Parameters.Contains("@DbName"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DbName", dbName);
                }
                else
                {
                    objCommSaleReport.Parameters["@DbName"].Value = dbName;
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_3", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_3", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet MegnaVAT6_3(string SalesInvoiceId, string Post1, string Post2, string ddmmyy = "n",
    SysDBInfoVMTemp connVM = null, bool mulitplePreview = false, string getTopValue = "", string pdfFlag = "N"
    , int FromRow = 0, int ToRow = 99999, string transactionType = "")
        {


            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();

                string VAT6_3OrderByProduct = commonDal.settingsDesktop("Reports", "VAT6_3OrderByProduct");
                string code = commonDal.settingValue("CompanyCode", "Code");

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;

                #region SQLText

                sqlText = @"


SELECT    
SIH.Id SalesInvoiceId 
,SIH.SalesInvoiceNo SalesInvoiceNo 
,convert (varchar,SIH.InvoiceDateTime,120)                                                                          AS InvoiceDate
,isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))                           AS DeliveryDate
,isnull(C.CustomerName,'N/A')                                                           AS CustomerName
,isnull(C.CustomerBanglaName,'N/A')                                                           AS CustomerBanglaName
,isnull(C.CustomerCode,'N/A')                                                           AS CustomerCode
,isnull(c.Address1,'N/A')                                                               AS Address1
,isnull(C.CustomerName,'N/A')                                                           AS Address2
,isnull(c.Address3,'N/A')                                                               AS Address3
,isnull(c.TelephoneNo,'N/A')                                                            AS TelephoneNo
,isnull(c.IsTax,'N')                                                                    AS IsTax
,isnull(sih.DeliveryAddress,'N/A')                                                     AS DeliveryAddress
,isnull(sih.VehicleType,'N/A')                                                            AS VehicleType
,isnull(sih.VehicleNo,'N/A')                                                              AS VehicleNo
,isnull(P.ProductName,'N/A')                                                            AS ProductNameOld
,isnull(PC.CategoryName,'N/A')                                                          AS ProductDescription
,case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end ProductGroup
,isnull(SID.Quantity,SID.UOMQty)                                                        AS Quantity
,isnull(SID.UOM,'N/A')                                                                  AS UOM
,isnull(SID.UOMn,'N/A')                                                                  AS UOMn
,isnull(SID.UOMc,1)                                                                  AS UOMc
,isnull(P.ProductName,'N/A')                                                            AS ProductName     
,isnull(P.ProductCode,'N/A')                                                            AS ProductCode     
,isnull(P.ShortName,'N/A')                                                              AS ShortName                            
,isnull(SID.NBRPrice,0)                                                                 AS UnitCost
,isnull(SID.VATRate,0)                                                                  AS VATRate
,isnull(SID.VATAmount,0)                                                                AS VATAmount
,isnull(sih.SupplyVAT,0)                                                                AS SupplyVAT
,isnull(sih.OtherAmnt,0)                                                                AS OtherAmnt
,isnull(SID.SDAmount,0)                                                                 AS SDAmount
,isnull(c.VATRegistrationNo,'N/A')                                                      AS VATRegistrationNo
,isnull(c.NIDNo,'N/A')                                                                  AS NIDNo
,isnull(c.TelephoneNo,'N/A')                                                            AS TelephoneNo
,isnull(sih.SerialNo,'N/A')                                                             AS SerialNo
,isnull(sih.AlReadyPrint,'0')                                                           AS AlReadyPrint
,isnull(sih.Comments,'N/A')                                                             AS Comments
,isnull(SID.DollerValue,0)                                                              AS DollerValue
,isnull(SID.CurrencyValue,0)                                                            AS CurrencyValue   
,isnull(SID.VATType,'N/A')                                                              AS VATType                                
,isnull(SIH.BranchId,1)                                                                 AS BranchId
,'-'                                                                                    AS SerialNo
,isnull(SIH.SaleType,'N/A')                                                             AS SaleType
,isnull(SIH.TransactionType,'N/A')                                                      AS TransactionType
,isnull(SIH.CurrencyID,0)                                                               AS CurrencyID
,isnull(SIH.CurrencyRateFromBDT,0)                                                      AS CurrencyRateFromBDT
--,isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.NBRPrice,0)/100,0),0)    AS Subtotal
,isnull(SID.Subtotal,0)                                                                                     AS Subtotal
,isnull(SID.InputQuantity,0)                                                                                     AS InputQuantity
,isnull(SID.LineTotal,0)                                                                                     AS LineTotal
,isnull(Pc.CategoryName,'-')CategoryName
,isnull(CustomerOrder,'-')CustomerOrder
,isnull(CustomerOrderDate,'01/01/1900')CustomerOrderDate
,isnull(Tarcat,'-')
,isnull(TC,0)TC  
,isnull(LF,0)LF
,isnull(SIH.RF,0)RF 
,isnull(SIH.SC,0)SC 
,isnull(ShortExcessAmnt,0)ShortExcessAmnt    
,isnull(Toll,0)Toll    
,isnull(SIH.DC,0)DC     
,isnull(ATV,0)ATV    
,isnull(LessFrightToPay,0)LessFrightToPay    
,isnull(OtherTotalAmnt,0)OtherTotalAmnt    
,isnull(RailReceiptNo,'-')RailReceiptNo
,isnull(RailReceiptDate,'01/01/1900')RailReceiptDate
,isnull(RlyInvNo,'-')RlyInvNo
,isnull(WetCharge,0)WetCharge   
,isnull(ToPay,0)ToPay    
,isnull(Prepaid,0)Prepaid    
,isnull(SIR.CRCode,'-')CRCode
,isnull(SIR.Amount,0)Amount
,SIH.ReportType
,0 SD
FROM  dbo.SalesInvoiceMPLDetails AS SID LEFT OUTER JOIN
dbo.SalesInvoiceMPLHeaders AS SIH ON SID.SalesInvoiceMPLHeaderId = SIH.Id LEFT OUTER JOIN
dbo.SalesInvoiceMPLCRInfos AS SIR ON SIH.Id = SIR.SalesInvoiceMPLHeaderId LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID 
WHERE (SIH.Id IN(@SalesInvoiceId) )
AND (SIH.Post =@Post1 or SIH.Post= @Post2)
";



                if (VAT6_3OrderByProduct.ToLower() == "y")
                {
                    sqlText += @"  order by  P.ProductName";
                }
                else
                {
                    sqlText += @"   order by  P.ProductCode";
                }

                sqlText += @" OFFSET " + FromRow + " ROWS FETCH NEXT " + ToRow + " ROWS ONLY";



                sqlText += @" 

;WITH OriginalResult AS (
    SELECT
        SIP.SalesInvoiceMPLHeaderId,
        SIP.BankId,
        Bnk.BankCode,
        Bnk.BankName,
        SIP.ModeOfPayment,
        SIP.InstrumentNo,
        SIP.InstrumentDate,
        SIP.Amount,
        1 AS SL
    FROM SalesInvoiceMPLBankPayments SIP
    LEFT OUTER JOIN dbo.MPLBDBankInformations AS Bnk ON SIP.BankId = Bnk.BankID
    WHERE SIP.SalesInvoiceMPLHeaderId IN (@SalesInvoiceId)
    UNION ALL
    SELECT
        SIC.SalesInvoiceMPLHeaderId,
        '99999' AS BankId,
        '99999' AS BankCode,
        SIHH.SalesInvoiceNo AS BankName,
        'CR' AS ModeOfPayment,
        SIC.CRCode,
        SIC.CRDate,
        SIC.Amount,
        2 AS SL
    FROM SalesInvoiceMPLCRInfos SIC
    LEFT OUTER JOIN dbo.SalesInvoiceMPLHeaders AS SIH ON SIH.Id = SIC.SalesInvoiceRefId
    LEFT OUTER JOIN dbo.SalesInvoiceMPLHeaders AS SIHH ON SIC.SalesInvoiceMPLHeaderId = SIHH.Id
    WHERE SIC.SalesInvoiceRefId IN (@SalesInvoiceId)
),
DummyRows AS (
    SELECT 
        1 AS SalesInvoiceMPLHeaderId,
        NULL AS BankId,
        NULL AS BankCode,
        NULL AS BankName,
        NULL AS ModeOfPayment,
        NULL AS InstrumentNo,
        NULL AS InstrumentDate,
        0 AS Amount,
        ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) + (SELECT COUNT(*) FROM OriginalResult) AS SL
    FROM (
        SELECT TOP (4 - (SELECT COUNT(*) FROM OriginalResult)) ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS n
        FROM sys.columns
    ) AS Dummy
    WHERE (SELECT COUNT(*) FROM OriginalResult) < 4
)
SELECT * FROM OriginalResult
UNION ALL
SELECT * FROM DummyRows


";

                sqlText += @" 

ORDER BY SL;


";

                if (!SalesInvoiceId.Contains("'"))
                {
                    SalesInvoiceId = "'" + SalesInvoiceId + "'";
                }


                sqlText = sqlText.Replace("@SalesInvoiceId", SalesInvoiceId);

                #endregion


                #region SQLExecution

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 800;


                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }


                if (!objCommSaleReport.Parameters.Contains("@DbName"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DbName", dbName);
                }
                else
                {
                    objCommSaleReport.Parameters["@DbName"].Value = dbName;
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_3", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_3", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        //VAT6.8 
        public DataSet PurchaseReturn(string PurchaseInvoiceNo, string Post1, string Post2, SysDBInfoVMTemp connVM = null, int FromRow = 0, int ToRow = 99999, string transactionType = "")
        {

            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();

                string VAT6_3OrderByProduct = commonDal.settingsDesktop("Reports", "VAT6_3OrderByProduct");
                string code = commonDal.settingValue("CompanyCode", "Code");

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;

                #region SQLText

                sqlText = @"";

                sqlText += @"

SELECT    
Pd.PurchaseInvoiceNo SalesInvoiceNo 
,convert (varchar(20),Pd.ReceiveDate,103)+' '+convert (varchar(20),Pd.ReceiveDate,108)            AS InvoiceDate
																						          
,isnull(V.VendorName,'N/A')                                                                       AS CustomerName
,isnull(V.VendorCode,'N/A')                                                                       AS CustomerCode
,isnull(V.Address1,'N/A')                                                                         AS Address1
,isnull(V.Address2,'N/A')                                                                         AS Address2
,isnull(V.Address3,'N/A')                                                                         AS Address3
,isnull(V.TelephoneNo,'N/A')                                                                      AS TelephoneNo
,isnull(V.Address1,'N/A')                                                                         AS DeliveryAddress1
,isnull(V.VATRegistrationNo,'N/A')                                                                AS VATRegistrationNo
--,'N/A'                                                                                            AS VehicleType
--,'N/A'                                                                                            AS VehicleNo
,isnull(PH.VehicleType,'N/A')                                                                     AS VehicleType
,isnull(PH.VehicleNo,'N/A')                                                                       AS VehicleNo
,isnull(Pd.Quantity,Pd.UOMQty)                                                                    AS Quantity
,isnull(Pd.UOM,'N/A')                                                                             AS UOM
,isnull(Pd.VATRate,0)                                                                             AS VATRate
,0                                                                                                AS AlReadyPrint
,isnull(Pd.VATAmount,0)                                                                           AS VATAmount
,isnull(Pd.SD,0)                                                                                  AS SD
,isnull(Pd.SDAmount,0)                                                                            AS SDAmount
,isnull(Pd.Subtotal,0)                                                                            AS Fixed_Subtotal
,isnull(Pd.UOMPrice,0)                                                                            AS UnitCost
,isnull(P.ProductName,'N/A')                                                                      AS ProductName     

,isnull(PHP.BENumber,'N/A')                                                                AS PreviousSalesInvoiceNo
,isnull(PDP.BENumber,'N/A')                                                                AS PreviousSalesInvoiceNoD
--,convert (varchar,isnull(PD.PreviousInvoiceDateTime,'01/01/1900'),120)                            AS PreviousInvoiceDateTime
--,isnull(PD.PreviousNBRPrice ,'0')                                                                 AS PreviousNBRPrice
--,isnull(PD.PreviousQuantity ,'0')                                                                 AS PreviousQuantity
--,isnull(PD.PreviousUOM ,'0')                                                                      AS PreviousUOM
--,isnull(PD.PreviousSubTotal ,'0')                                                                 AS PreviousSubTotal
--,isnull(PD.PreviousVATRate ,'0')                                                                  AS PreviousVATRate
--,isnull(PD.PreviousVATAmount ,'0')                                                                AS PreviousVATAmount
--,isnull(PD.PreviousSDAmount ,'0')                                                                 AS PreviousSDAmount
,convert (varchar,isnull(PHP.InvoiceDateTime,'01/01/1900'),120)                                   AS PreviousInvoiceDateTime
,isnull(PDP.CostPrice ,'0')                                                                        AS PreviousNBRPrice
,isnull(PDP.Quantity ,'0')                                                                        AS PreviousQuantity
,isnull(PDP.UOM ,'0')                                                                             AS PreviousUOM
,isnull(PDP.SubTotal ,'0')                                                                        AS PreviousSubTotal
,isnull(PDP.VATRate ,'0')                                                                         AS PreviousVATRate
,isnull(PDP.VATAmount ,'0')                                                                       AS PreviousVATAmount
,isnull(PDP.SDAmount ,'0')                                                                        AS PreviousSDAmount
,isnull(PD.ReasonOfReturn ,'N/A')                                                                 AS ReasonOfReturn

,u.FullName                                                                                       AS SignatoryName
,u.Designation                                                                                    AS SignatoryDesig
FROM  dbo.PurchaseInvoiceDetails AS PD LEFT OUTER JOIN
dbo.PurchaseInvoiceHeaders AS PH ON PD.PurchaseInvoiceNo = PH.PurchaseInvoiceNo LEFT OUTER JOIN

dbo.PurchaseInvoiceHeaders AS PHP ON PH.PurchaseReturnId = PHP.PurchaseInvoiceNo LEFT OUTER JOIN
dbo.PurchaseInvoiceDetails AS PDP ON PHP.PurchaseInvoiceNo = PDP.PurchaseInvoiceNo and PD.ItemNo=PDP.ItemNo LEFT OUTER JOIN

dbo.Vendors AS V ON PH.VendorID = V.VendorID LEFT OUTER JOIN
dbo.UserInformations AS u ON isnull(PD.LastModifiedBy,PD.CreatedBy) = u.UserName LEFT OUTER JOIN
dbo.Products AS P ON PD.ItemNo = P.ItemNo 
where 1=1 
And Pd.TransactionType in('PurchaseReturn')
And
(Pd.PurchaseInvoiceNo IN(@PurchaseInvoiceNo) )
";

                if (VAT6_3OrderByProduct.ToLower() == "y")
                {

                    sqlText += @"  order by  P.ProductName";
                }
                else
                {
                    sqlText += @"   order by  P.ProductCode";

                }

                sqlText += @" OFFSET " + FromRow + " ROWS FETCH NEXT " + ToRow + " ROWS ONLY";

                if (!PurchaseInvoiceNo.Contains("'"))
                {
                    PurchaseInvoiceNo = "'" + PurchaseInvoiceNo + "'";
                }

                sqlText = sqlText.Replace("@PurchaseInvoiceNo", PurchaseInvoiceNo);

                #endregion


                #region SQLExecution

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 800;


                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseReturn", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseReturn", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region VAT Credit Note MIS

        public DataSet VATCreditNoteMis(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                            string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                            string onlyDiscount, bool bPromotional, string CustomerGroupID, bool pCategoryLike = false, string PGroup = ""
            , string ShiftId = "0", int branchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null, string OrderBy = "", string ddmmyy = "N")
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string sqlTextVatType = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo
                           ,convert (varchar,SIH.InvoiceDateTime,120)                   AS InvoiceDate
                           ,isnull(C.CustomerName,'N/A')                                AS CustomerName
,isnull(C.CustomerCode,'N/A')                                                           AS CustomerCode
,isnull(c.Address1,'N/A')                                                               AS Address1
,isnull(C.CustomerName,'N/A')                                                           AS Address2
------,isnull(c.Address2,'N/A')                                                         AS Address2
,isnull(c.Address3,'N/A')                                                               AS Address3
,isnull(c.TelephoneNo,'N/A')                                                            AS TelephoneNo
,isnull(sih.DeliveryAddress1,'N/A')                                                     AS DeliveryAddress1
,isnull(sih.DeliveryAddress2,'N/A')                                                     AS DeliveryAddress2
,isnull(sih.DeliveryAddress3,'N/A')                                                     AS DeliveryAddress3
,isnull(v.VehicleType,'N/A')                                                            AS VehicleType
,isnull(v.VehicleNo,'N/A')                                                              AS VehicleNo
,isnull(P.ProductName,'N/A')                                                            AS ProductNameOld
,isnull(PC.CategoryName,'N/A')                                                          AS ProductDescription
,case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end ProductGroup
,isnull(SID.Quantity,SID.UOMQty)                                                        AS Quantity
,isnull(SID.UOM,'N/A')                                                                  AS UOM
,isnull(P.ProductName,'N/A')                                                            AS ProductName                            
------isnull(SID.Comments,'N/A')                                                            AS ProductCommercialName,
,isnull(SID.ProductDescription,'N/A')                                                   AS ProductCommercialName
,isnull(SID.NBRPrice,0)                                                                 AS UnitCost
,isnull(SID.PromotionalQuantity,0)                                                      AS PromotionalQuantity
,isnull(SID.VATRate,0)                                                                  AS VATRate
,isnull(SID.VATAmount,0)                                                                AS VATAmount
,isnull(SID.SD,0)                                                                       AS SD
,isnull(SID.SDAmount,0)                                                                 AS SDAmount
,isnull(SID.VDSAmount,0)                                                                AS VDSAmount
,ISNULL(SIH.HPSTotalAmount,0)                                                           AS HPSAmount
,isnull(c.VATRegistrationNo,'N/A')                                                      AS VATRegistrationNo
,isnull(sih.SerialNo,'N/A')                                                             AS SerialNo
,isnull(sih.AlReadyPrint,'0')                                                           AS AlReadyPrint
,isnull(sih.ImportIDExcel,'N/A')                                                        AS ImportIDExcel
,isnull(sih.Comments,'N/A')                                                             AS Comments
,isnull(SID.Comments,0)                                                                 AS CommentD
,isnull(SID.Type,'VAT')                                                                 AS VATType
,isnull(SID.DollerValue,0)                                                              AS DollerValue
,isnull(SID.CurrencyValue,0)                                                            AS CurrencyValue                                
------CASE WHEN @DbName like '%CPB_%' THEN SIH.ImportIDExcel  
------WHEN @DbName like '%BTSL_%' THEN SIH.ImportIDExcel ELSE SIH.Comments END              AS Comments                                                                                                                       
,isnull(SID.Weight,'')                                                                  AS Weight
,SIH.LCDate                                                                             AS LCDate
,Isnull(SIH.LCNumber,'-')                                                               AS LCNumber
,isnull(SIH.LCBank,'N/A')                                                               AS LCBank
,isnull(SIH.PINo,'-')                                                                   AS PINo
,SIH.PIDate                                                                             AS PIDate
,isnull(SIH.EXPFormNo,'-')                                                              AS EXPFormNo
,SIH.EXPFormDate                                                                        AS EXPFormDate
,isnull(SIH.BranchId,1)                                                                 AS BranchId
,isnull(SIH.SignatoryName,'N/A')                                                        AS SignatoryName
,isnull(SIH.SignatoryDesig,'N/A')                                                       AS SignatoryDesig
,'-'                                                                                    AS SerialNo
,isnull(SIH.SaleType,'N/A')                                                             AS SaleType
,isnull(SIH.TransactionType,'N/A')                                                      AS TransactionType
,isnull(SIH.CurrencyID,0)                                                               AS CurrencyID
,isnull(SIH.CurrencyRateFromBDT,0)                                                      AS CurrencyRateFromBDT
--,isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.NBRPrice,0)*isnull(SID.TradingMarkUp,0)/100,0),0)    AS Subtotal
,isnull(isnull(SID.CurrencyValue,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.NBRPrice,0)*isnull(SID.TradingMarkUp,0)/100,0),0)    AS Subtotal
,isnull(SID.TotalValue,0)                                                                                   AS TotalValue
--,isnull(SID.Subtotal,0)                                                                                     AS Fixed_Subtotal
,isnull(SID.CurrencyValue,0)                                                                                     AS Fixed_Subtotal
,isnull(SID.DiscountAmount,0)                                                                               AS DiscountAmount
,isnull(SID.DiscountedNBRPrice,0)                                                                           AS DiscountedNBRPrice
,case when SID.LastModifiedBy is null then SID.CreatedBy else SID.LastModifiedBy end                        AS EntryUserName
,isnull(SIH.PreviousSalesInvoiceNo,'N/A')                                                                   AS PreviousSalesInvoiceNo
,isnull(SIH.FileName,'-')                                                                   AS FileName
,convert (varchar,isnull(SID.PreviousInvoiceDateTime,'01/01/1900'),120)                                     AS PreviousInvoiceDateTime
,isnull(SID.PreviousNBRPrice ,'0')                                                                          AS PreviousNBRPrice
,isnull(SID.PreviousQuantity ,'0')                                                                          AS PreviousQuantity
,isnull(SID.PreviousUOM ,'0')                                                                               AS PreviousUOM
,isnull(SID.PreviousSubTotal ,'0')                                                                          AS PreviousSubTotal
,isnull(SID.PreviousVATRate ,'0')                                                                           AS PreviousVATRate
,isnull(SID.PreviousVATAmount ,'0')                                                                         AS PreviousVATAmount
,isnull(SID.PreviousSD ,'0')                                                                                AS PreviousSD
,isnull(SID.PreviousSDAmount ,'0')                                                                          AS PreviousSDAmount
,isnull(SID.ReasonOfReturn ,'N/A')                                                                          AS ReasonOfReturn
,isnull(SID.PreviousSalesInvoiceNo,'N/A')                                                                   AS PreviousSalesInvoiceNoD
,isnull(SID.SourcePaidVATAmount,0)                                                                          AS SourcePaidVATAmount
,isnull(SID.OtherRef,'-')                                                                                   AS OtherRef
,isnull(SID.LineTotal,0)                                                                                   AS LineTotal
,isnull(SIH.DataSource,'-')                                                                                   AS DataSource


                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
      
                            WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
                            and P.ActiveStatus='Y'
                                                ";

                sqlTextVatType = "";
                if (vTransactionType != "")
                {
                    sqlTextVatType += " and SID.TransactionType=@vTransactionType  ";
                }
                sqlText += sqlTextVatType;
                //DiscountAmount








                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateFrom))
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateTo))
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo  ";
                }
                if (!string.IsNullOrEmpty(vCustomerid))
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (!string.IsNullOrEmpty(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (!string.IsNullOrEmpty(vItemNo))
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (!string.IsNullOrEmpty(vCategoryID))
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (!string.IsNullOrEmpty(vproductType))
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (!string.IsNullOrEmpty(vTransactionType))
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (!string.IsNullOrEmpty(vPost))
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }

                sqlText += " Order by SIH.SalesInvoiceNo ";

                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                //if (string.IsNullOrEmpty(VatType))
                //{
                //    sqlText = sqlText.Replace("SID.Type=@Type", "1=1");
                //}
                #endregion Parameter
                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 180;


                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);
                //objCommSaleReport.Parameters.AddWithValue("@Type", VatType);
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommSaleReport.Parameters.Contains("@ShiftId"))
                    { objCommSaleReport.Parameters.AddWithValue("@ShiftId", ShiftId); }
                    else { objCommSaleReport.Parameters["@ShiftId"].Value = ShiftId; }


                }
                if (vSalesInvoiceNo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vSalesInvoiceNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vSalesInvoiceNo", vSalesInvoiceNo); }
                    else { objCommSaleReport.Parameters["@vSalesInvoiceNo"].Value = vSalesInvoiceNo; }
                }





                if (InvoiceDateFrom != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommSaleReport.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }

                }
                if (InvoiceDateTo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateTo"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommSaleReport.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }

                }
                if (vCustomerid != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vCustomerid"))
                    { objCommSaleReport.Parameters.AddWithValue("@vCustomerid", vCustomerid); }
                    else { objCommSaleReport.Parameters["@vCustomerid"].Value = vCustomerid; }

                }

                if (CustomerGroupID != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@CustomerGroupID"))
                    { objCommSaleReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID); }
                    else { objCommSaleReport.Parameters["@CustomerGroupID"].Value = CustomerGroupID; }

                }
                if (vItemNo != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vItemNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vItemNo", vItemNo); }
                    else { objCommSaleReport.Parameters["@vItemNo"].Value = vItemNo; }

                }
                if (pCategoryLike)
                {

                    if (!objCommSaleReport.Parameters.Contains("@PGroup"))
                    { objCommSaleReport.Parameters.AddWithValue("@PGroup", PGroup); }
                    else { objCommSaleReport.Parameters["@PGroup"].Value = PGroup; }


                }
                else
                {
                    if (vCategoryID != "")

                        if (!objCommSaleReport.Parameters.Contains("@vCategoryID"))
                        { objCommSaleReport.Parameters.AddWithValue("@vCategoryID", vCategoryID); }
                        else { objCommSaleReport.Parameters["@vCategoryID"].Value = vCategoryID; }

                }
                if (vproductType != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vproductType"))
                    { objCommSaleReport.Parameters.AddWithValue("@vproductType", vproductType); }
                    else { objCommSaleReport.Parameters["@vproductType"].Value = vproductType; }

                }
                if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                {
                    if (vTransactionType != "")
                    {

                        if (!objCommSaleReport.Parameters.Contains("@vTransactionType"))
                        { objCommSaleReport.Parameters.AddWithValue("@vTransactionType", vTransactionType); }
                        else { objCommSaleReport.Parameters["@vTransactionType"].Value = vTransactionType; }

                    }
                }
                if (vPost != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vPost"))
                    { objCommSaleReport.Parameters.AddWithValue("@vPost", vPost); }
                    else { objCommSaleReport.Parameters["@vPost"].Value = vPost; }

                }

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VATCreditNoteMis", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VATCreditNoteMis", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Toll Challan

        public DataSet VAT6_3Toll(string TollNo, string Post1, string Post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                sqlText = @"
------declare @SalesInvoiceNo as varchar(100)
------set @SalesInvoiceNo = 'TIV-0002/0919'


declare @DeliveryAddress1 as varchar(200)
select  @DeliveryAddress1=Address from Toll6_3Invoices where 1=1 AND TollNo=@SalesInvoiceNo

------select  @DeliveryAddress1



SELECT    
 @SalesInvoiceNo SalesInvoiceNo, 
--SIH.SalesInvoiceNo SalesInvoiceNo, 
convert (varchar,SIH.InvoiceDateTime,120) InvoiceDate,
isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))DeliveryDate, 
               
isnull(C.CustomerName,'N/A')CustomerName,
isnull(c.Address1,'N/A')Address1
,isnull(C.CustomerName,'N/A')Address2
--,isnull(c.Address2,'N/A')Address2
,isnull(c.Address3,'N/A')Address3
,@DeliveryAddress1 DeliveryAddress1
----,isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1
,isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2
,isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
isnull(v.VehicleType,'N/A')VehicleType,isnull(v.VehicleNo,'N/A')VehicleNo,
isnull(P.ProductName,'N/A')ProductName ,
isnull(PC.CategoryName,'N/A')ProductDescription ,
--case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end ProductGroup,
SID.SalesInvoiceNo ProductGroup,
isnull(SID.Quantity,SID.UOMQty)Quantity ,
isnull(SID.UOM,'N/A')UOM,
isnull(SID.NBRPrice,0)UnitCost,
isnull(SID.VATRate,0)VATRate,
isnull(SID.VATAmount,0)VATAmount,
isnull(SID.SD,0)SD,
isnull(SID.SDAmount,0)SDAmount,

isnull(SID.VDSAmount,0)VDSAmount,
isnull(SIH.VDSAmount,0)TotalVDSAmount,

isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
                                
isnull(sih.SerialNo,'N/A')SerialNo,
isnull(sih.ImportIDExcel,'N/A')ImportIDExcel,
isnull(sih.Comments,'N/A')Comments,
isnull(SID.Comments,0)CommentD,
                                
isnull(SID.Weight,'')Weight, 
convert (varchar(30),SIH.LCDate,105) LCDate,
Isnull(SIH.LCNumber,'-') LCNumber,
isnull(SIH.LCBank,'N/A')LCBank,
'-'SerialNo,

isnull(SIH.SaleType,'N/A')SaleType,
isnull(SIH.PreviousSalesInvoiceNo,'N/A')PreviousSalesInvoiceNo,
isnull(SIH.TransactionType,'N/A')TransactionType,
isnull(SIH.CurrencyID,0)CurrencyID,
isnull(SIH.CurrencyRateFromBDT,0)CurrencyRateFromBDT,
isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.NBRPrice,0)*isnull(SID.TradingMarkUp,0)/100,0),0)Subtotal

FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

WHERE
(SIH.SalesInvoiceNo in(select distinct( d.SalesInvoiceNo) from Toll6_3InvoiceDetails d
left outer join Toll6_3Invoices m on d.TollNo=m.TollNo 
where m.TollNo=@SalesInvoiceNo) )
--and (SID.Quantity>0)
order by InvoiceLineNo

SELECT DISTINCT uom, SUM(isnull(Quantity,UOMQty)) qty
 
FROM  SalesInvoiceDetails 
WHERE (SalesInvoiceNo in( select distinct( d.SalesInvoiceNo) from Toll6_3InvoiceDetails d
left outer join Toll6_3Invoices m on d.TollNo=m.TollNo 
where m.TollNo=@SalesInvoiceNo) )
and (isnull(UOMQty, Quantity)>0)
GROUP BY uom

SELECT TollDateTime TollDate
,isnull(SignatoryName,'N/A')SignatoryName
,isnull(SignatoryDesig,'N/A')SignatoryDesig
FROM  Toll6_3Invoices
where TollNo=@SalesInvoiceNo
 
 ";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", TollNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = TollNo;
                }



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_3Toll", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_3Toll", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Client 6.3
        public DataSet Client6_3(string InvoiceNo, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                sqlText = @"

     SELECT    
     CIH.InvoiceNo                                                        AS SalesInvoiceNo 
     ,convert (varchar,CID.InvoiceDateTime,120)                           AS InvoiceDate              
     ,isnull(V.VendorName,'N/A')                                          AS CustomerName
     ,isnull(CIH.Address,'N/A')                                           AS Address1
     ,isnull(V.Address2,'N/A')                                            AS Address2
     ,isnull(V.Address3,'N/A')                                            AS Address3
     ,isnull(P.ProductName,'N/A')                                         AS ProductName
     ,isnull(CID.Quantity,0)                                              AS Quantity 
     ,isnull(CID.UOM,'N/A')                                               AS UOM
     ,isnull(CID.UnitPrice,0)                                             AS UnitCost
     ,isnull(CID.VATRate,0)                                               AS VATRate
     ,isnull(CID.VATAmount,0)                                             AS VATAmount
     ,isnull(CID.SDRate,0)                                                AS SD
     ,isnull(CID.SDAmount,0)                                              AS SDAmount
     ,isnull(CID.Subtotal,0)                                              AS Subtotal
     ,isnull(CID.LineTotalAmount,0)                                       AS LineTotal
     ,isnull(V.VATRegistrationNo,'N/A')                                   AS VATRegistrationNo                              
     ,isnull(CIH.Comments,'N/A')                                          AS Comments
     ,isnull(CID.Comments,'N/A')                                          AS CommentD                              
     ,isnull(CID.TransactionType,'N/A')                                   AS TransactionType
     ,isnull(CIH.SignatoryName,'N/A')                                     AS SignatoryName
     ,isnull(CIH.SignatoryDesig,'N/A')                                    AS SignatoryDesig
     
     FROM  dbo.Client6_3Details AS CID LEFT OUTER JOIN
     dbo.Client6_3s AS CIH ON CID.InvoiceNo = CIH.InvoiceNo LEFT OUTER JOIN
     dbo.Vendors AS V ON CIH.VendorID = V.VendorID LEFT OUTER JOIN
     dbo.Products AS P ON CID.ItemNo = P.ItemNo left outer join
     dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID 
     Where
     (CIH.InvoiceNo IN(@SalesInvoiceNo) )
     
     
      
      ";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", InvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = InvoiceNo;
                }



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "Client6_3", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "Client6_3", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion

            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        #endregion

        #region VAT 6.1 - Purchase Register

        public DataSet VAT6_1_WithConnTable(VAT6_1ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT6_1");
            #endregion

            #region Try

            try
            {

                #region Settings

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);
                bool IssueFrom6_1 = Convert.ToBoolean(_cDal.settings("Toll6_4", "IssueFrom6_1") == "Y" ? true : false);
                bool TotalIncludeSD = Convert.ToBoolean(_cDal.settings("VAT6_1", "TotalIncludeSD") == "Y" ? true : false);
                bool TollReceiveNotWIP = Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP") == "Y" ? true : false);
                bool TollReceiveWithIssue = Convert.ToBoolean(_cDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);
                //bool ContractorFGProduction = Convert.ToBoolean(_cDal.settings("ContractorFGProduction", "IssueFrom6_1") == "Y" ? true : false);

                #endregion

                #region open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                #region SQL Text

                sqlText = "";

                #region Beginning


                sqlText += @"
                          
---DECLARE @StartDate DATETIME;
---DECLARE @EndDate DATETIME;
---DECLARE @post1 VARCHAR(200);
---DECLARE @post2 VARCHAR(200);
---DECLARE @ItemNo VARCHAR(200);
---SET @Itemno='46';
---SET @post1='Y';
---SET @post2='N';
---SET @StartDate='2014-04-01';
---SET @EndDate='2020-04-27';
---
---DECLARE @BranchId as int = 1;

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

 
delete from  VAT_16
delete from  VATTemp_16

--CREATE TABLE VAT_16(	SerialNo [varchar] (2) NULL,
--[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
--[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
--[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
--[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
--[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
--,TransactionType [varchar] (200)  
--)
--
--CREATE TABLE VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
--[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
--[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
--[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
--,TransactionType [varchar] (200)  
--) 
--
";
                #endregion

                #region Select Product

                sqlText += @"  

select * into #ProductReceive from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
 

";
                #region Conditions

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                        #region Debugging

                        ////if (true)
                        ////{
                        ////    sqlText += @"  and ItemNo='73'";
                        ////}

                        #endregion

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";

                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";

                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @"  ) as a";

                #endregion

                #endregion

                #region Transaction Data

                if (vm.Opening == false)
                {
                    #region Purchase Data

                    sqlText += @"
-------------------------------------------------- Start Purchase --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

";
                    #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                    sqlText += @"
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }
                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase', CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region 'TollReceive-WIP'

                    sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceive-WIP')
AND pd.BranchId=@BranchId

";
                    #endregion
                    if (vm.StockMovement == true)
                    {
                        sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where 1=1 
and pd.SubTotal>0
and pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceiveRaw')
AND pd.BranchId=@BranchId

";
                    }



                    #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'


                    sqlText += @"

 
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)


select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.OthersAmount,0)+isnull(pd.SDAmount,0))";
                    }
                    else
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.OthersAmount,0))";
                    }
                    sqlText += @"
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region 'ClientRawReceive'

                    sqlText += @"

union all

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }
                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Client Raw Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ClientRawReceive')
AND pd.BranchId=@BranchId

";
                    #endregion

                    #region 'PurchaseReturn','PurchaseDN'


                    sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,-1*isnull(subtotal,0)+isnull(pd.SDAmount,0) ";

                    }
                    else
                    {
                        sqlText += @"
,-1*isnull(subtotal,0) ";
                    }
                    sqlText += @"

,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
AND pd.BranchId=@BranchId

-------------------------------------------------- End Purchase --------------------------------------------------
------------------------------------------------------------------------------------------------------------------

";

                    #endregion

                    #endregion

                    #region VAT 6.2.1 False / Receive, Issue

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive Data

                        sqlText += @"
-------------------------------------------------- ReceiveDetails --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase', '' BENumber,
pd.ItemNo,isnull(subtotal,0)  ,isnull(UOMQty,0) ,
pd.VATAmount,0 SDAmount,'WIP',pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime  >=@StartDate  and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND   (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')
AND pd.BranchId=@BranchId

";

                        #endregion

                        #region Issue Data


                        sqlText += @"
-------------------------------------------------- Start Issue --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')
AND id.BranchId=@BranchId
";




                        #region Toll Issue Data

                        if (IssueFrom6_1)
                        {
                            #region Issue From 6.1

                            sqlText += @"   
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')
AND id.BranchId=@BranchId
";
                            #endregion
                        }
                        else
                        {
                            if (TollReceiveNotWIP)
                            {
                                #region Toll Receive NotWIP

                                sqlText += @"   
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive-NotWIP')
AND id.BranchId=@BranchId
";
                                #endregion
                            }

                            if (TollReceiveWithIssue)
                            {
                                #region Toll Receive With Issue


                                sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Toll Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
AND id.BranchId=@BranchId

";
                                #endregion
                            }
                        }
                        #endregion

                        #region Toll Finish Receive

                        sqlText += @" 
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)  and ID.SubTotal>0
AND ID.TransactionType IN ('TollFinishReceive') 
AND id.BranchId=@BranchId
";

                        #endregion

                        #region Issue Return, Receive Return

                        sqlText += @" 

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn','ReceiveReturn')
AND ID.BranchId=@BranchId
";
                        #endregion

                        #endregion

                        #region Dispose Raw Data


                        sqlText += @"

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.TransactionDateTime IssueDateTime,ID.TransactionDateTime IssueDateTime,ID.DisposeNo,'Issue','-'
,id.ItemNo,isnull(Quantity,0)*isnull(SubTotal,0) ,isnull(Quantity,0) ,ID.VATAmount,ID.SDAmount,'Raw Dispose', TransactionDateTime IssueDateTime
from DisposeRawDetails ID
where ID.TransactionDateTime  >=@StartDate  and ID.TransactionDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
and ISNULL(ID.IsSaleable,'N')='N'
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other')
AND id.BranchId=@BranchId
";


                        #endregion

                    }

                    #endregion

                    #region Stock Movement False/ Raw Sale, Raw Credit, Dispose Raw Sale

                    if (vm.StockMovement == false)
                    {
                        #region Raw Sale

                        sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  
AND BranchId=@BranchId
";

                        #endregion
                        #region Raw Credit


                        sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.InvoiceDateTime,ID.InvoiceDateTime,ID.SalesInvoiceNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(AVGPrice,0) ,-isnull(UOMQty,0) ,-0 VATAmount,-0 SDAmount,id.TransactionType,InvoiceDateTime
from SalesInvoiceDetails ID
where ID.InvoiceDateTime  >=@StartDate  and ID.InvoiceDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('RawCredit')
AND ID.BranchId=@BranchId

";
                        #endregion
                        #region Dispose Raw Sale

                        sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-'
, ItemNo
, isnull(UOMQty,0)*isnull(UOMPrice,0)
, case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end 
,'0'
, SDAmount,'Dispose Raw Sale',CreatedOn
from SalesInvoiceDetails
where 1=1 
and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeRaw')  
AND BranchId=@BranchId
";

                        #endregion
                    }

                    #endregion
                }

                #endregion

                #region Openinng Data

                sqlText += @"
-------------------------------------------------- Openinng Data --------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

------select @OpeningDate = p.OpeningDate from Products p
------WHERE ItemNo=@ItemNo
------IF(@OpeningDate<@StartDate)

set @OpeningDate=@StartDate

insert into VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
SELECT distinct ItemNo, 0 Quantity, 0 Amount  FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'

";

                #region Opening From Product False

                if (vm.OpeningFromProduct == false)
                {

                    if (vm.BranchId > 1)
                    {
                        sqlText += @"	
UNION ALL 	 
SELECT distinct ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
group by ItemNo
 
";
                    }
                    else
                    {
                        sqlText += @"		
UNION ALL  
SELECT distinct itemNo ItemNo, sum(isnull(OpeningBalance,0)) Quantity, sum(isnull(p.OpeningTotalCost,0)) Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'
group by ItemNo

";
                    }

                }
                #endregion

                #region Purchase Data

                #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                #endregion

                #region 'TollReceive-WIP'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive-WIP') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                if (vm.StockMovement == true)
                {
                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }
                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' and SubTotal>0
and TransactionType in('TollReceiveRaw') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                }
                #endregion

                #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'

                sqlText += @"

UNION ALL (
	SELECT distinct   ItemNo,isnull(sum(UOMQty),0) PurchaseQuantity 
";
                if (TotalIncludeSD)
                {
                    sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+isnull(OthersAmount,0)+isnull(SDAmount,0)),0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal ";
                }

                sqlText += @"	
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 
AND BranchId=@BranchId
group by ItemNo
 )  


";
                #endregion

                #region 'ClientRawReceive'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('ClientRawReceive') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                #endregion

                #region 'PurchaseReturn','PurchaseDN'


                sqlText += @"
UNION ALL 
(	SELECT   distinct   ItemNo,-isnull(sum(UOMQty),0) PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal     
FROM PurchaseInvoiceDetails 
WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate       AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                #endregion

                #endregion

                #region VAT6.2.1 False / Receive, Issue, Dispose Raw Data

                if (vm.VAT6_2_1 == false)
                {
                    #region Receive - WIP

                    sqlText += @"		
UNION ALL  
(SELECT distinct   ItemNo,  isnull(sum(UOMQty),0) Quantity,isnull(sum(isnull(SubTotal,0)),0)Amount 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime>= '01-July-2019' and ReceiveDateTime < @StartDate    
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by itemNo
 )   
";
                    #endregion

                    #region Issue Data

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate     
AND TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #region Toll Issue

                    if (IssueFrom6_1)
                    {
                        #region Issue From 6.1

                        sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'  
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
 AND TransactionType IN ('TollIssue')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                        #endregion
                    }
                    else
                    {
                        if (TollReceiveNotWIP)
                        {
                            #region Toll Receive Not WIP

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive-NotWIP')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                            #endregion
                        }

                        if (TollReceiveWithIssue)
                        {
                            #region Toll Receive With Issue

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                            #endregion
                        }
                    }

                    #endregion

                    #region Toll Finish Receive


                    sqlText += @" 
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   and SubTotal>0
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
AND TransactionType IN ('TollFinishReceive')  
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                    #endregion

                    #region Issue Return, Receive Return

                    sqlText += @" 

UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'  
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)   
";

                    #endregion

                    #endregion

                    #region Dispose Raw Data

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)   
FROM DisposeRawDetails WHERE Post='Y'  
and ISNULL(IsSaleable,'N')='N' 
AND TransactionDateTime>= '01-July-2019' and TransactionDateTime< @StartDate     
AND TransactionType IN ('Other')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion
                }

                #endregion

                #region Stock Movement False / Sales

                if (vm.StockMovement == false)
                {

                    #region Raw Sale

                    sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawSale')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                    #region Raw Credit

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawCredit')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                    #endregion


                    #region Raw Sale

                    sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(UOMPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'    
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('DisposeRaw')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                }


                #endregion

                sqlText += @"
) AS a GROUP BY a.ItemNo
";

                #endregion

                #region Insert, Update and Select Data

                sqlText += @"

insert into VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from VATTemp_16
order by dailydate,SerialNo



update VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=VAT_16.TransID
and VAT_16.TransType='Purchase'
AND BranchId=@BranchId



update VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and VAT_16.TransType='Purchase'
AND BranchId=@BranchId



select VAT_16.SerialNo,convert (varchar,VAT_16.StartDateTime,120)StartDateTime,
VAT_16.StartingQuantity,VAT_16.StartingAmount
,TransID,VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,p.ProductCode ProductCodeA,p.UOM,VAT_16.Quantity,VAT_16.VATRate,VAT_16.SD,VAT_16.UnitCost,p.HSCodeNo,VAT_16.BENumber
,convert (varchar,VAT_16.InvoiceDateTime,120)InvoiceDateTime,VAT_16.Remarks,VAT_16.ItemNo,
VAT_16.CreateDateTime
from VAT_16 left outer join
Vendors as V on VAT_16.VendorID=v.VendorID left outer join 
Products P on VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,VAT_16.SerialNo ASC 
--order by VAT_16.SerialNo ASC ,CreateDateTime ASC




--DROP TABLE VAT_16
--DROP TABLE VATTemp_16
DROP TABLE #ProductReceive

                ";

                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }




                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", vm.UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = vm.UserName;
                }
                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed
                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = vm.Post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = vm.Post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

                if (transaction != null && Vtransaction == null)
                {
                    transaction.Commit();
                }
                #endregion

                #endregion


            }

            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_1_WithConn29052021(VAT6_1ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT6_1");
            #endregion

            #region Try

            try
            {

                #region Settings

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);
                bool IssueFrom6_1 = Convert.ToBoolean(_cDal.settings("Toll6_4", "IssueFrom6_1") == "Y" ? true : false);
                bool TotalIncludeSD = Convert.ToBoolean(_cDal.settings("VAT6_1", "TotalIncludeSD") == "Y" ? true : false);
                bool IncludeOtherAMT = _cDal.settings("VAT6_1", "IncludeOtherAMT") == "Y";
                bool TollReceiveNotWIP = Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP") == "Y" ? true : false);
                bool TollReceiveWithIssue = Convert.ToBoolean(_cDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);
                //bool ContractorFGProduction = Convert.ToBoolean(_cDal.settings("ContractorFGProduction", "IssueFrom6_1") == "Y" ? true : false);

                #endregion

                #region open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                #region SQL Text

                sqlText = "";

                #region Beginning


                sqlText += @"
                          
---DECLARE @StartDate DATETIME;
---DECLARE @EndDate DATETIME;
---DECLARE @post1 VARCHAR(200);
---DECLARE @post2 VARCHAR(200);
---DECLARE @ItemNo VARCHAR(200);
---SET @Itemno='46';
---SET @post1='Y';
---SET @post2='N';
---SET @StartDate='2014-04-01';
---SET @EndDate='2020-04-27';
---
---DECLARE @BranchId as int = 1;

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

 

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

";
                #endregion

                #region Select Product

                sqlText += @"  

select * into #ProductReceive from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1

 

";
                #region Conditions
                string code = new CommonDAL().settingValue("CompanyCode", "Code");
                if (code.ToLower() == "cp")
                {
                    sqlText += @"  and Products.BranchId=@BranchId";
                }
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {

                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                        #region Debugging

                        ////if (true)
                        ////{
                        ////    sqlText += @"  and ItemNo='73'";
                        ////}

                        #endregion

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";

                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";

                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @"  ) as a";

                #endregion

                #endregion

                #region Transaction Data

                if (vm.Opening == false)
                {
                    #region Purchase Data

                    sqlText += @"
-------------------------------------------------- Start Purchase --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

";
                    #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                    sqlText += @"
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }
                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase', CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region Code To Code Transfer Purchase

                    sqlText += @"
union all

select 'A1',CONVERT(varchar, pd.TransferDate,23)ReceiveDate,
CONVERT(varchar, pd.TransferDate,23)InvoiceDateTime,
pt.TransferCode,'Purchase',
'-',
pd.ToItemNo
,isnull(pd.ReceivePrice,0),isnull(ToQuantity,0) ,
0,0,'CTCPurchase',
CONVERT(varchar, pd.TransferDate,23)ReceiveDate

from ProductTransfersDetails PD left outer join ProductTransfers pt on pd.ProductTransferId = pt.Id
where pd.TransferDate  >=@StartDate  and pd.TransferDate < DATEADD(d,1, @EndDate) 

and pd.ToItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('RawCTC')
AND pd.BranchId=@BranchId";

                    #endregion

                    #region 'TollReceive-WIP'

                    sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceive-WIP')
AND pd.BranchId=@BranchId

";
                    #endregion
                    if (vm.StockMovement == true)
                    {
                        sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where 1=1 
and pd.SubTotal>0
and pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceiveRaw')
AND pd.BranchId=@BranchId

";
                    }



                    #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'


                    sqlText += @"

 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)


select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.SDAmount,0)+@othervalue)";
                    }
                    else
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+@othervalue)";
                    }

                    if (IncludeOtherAMT)
                    {

                        sqlText = sqlText.Replace("@othervalue", "isnull(pd.OthersAmount,0)");
                    }
                    else
                    {
                        sqlText = sqlText.Replace("@othervalue", "0");
                    }


                    sqlText += @"
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
AND pd.BranchId=@BranchId

";
                    #endregion

                    #region 'ClientRawReceive'

                    sqlText += @"

union all

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }
                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Client Raw Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ClientRawReceive')
AND pd.BranchId=@BranchId

";
                    #endregion

                    #region 'PurchaseReturn','PurchaseDN'


                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,-1*isnull(subtotal,0)+isnull(pd.SDAmount,0) ";

                    }
                    else
                    {
                        sqlText += @"
,-1*isnull(subtotal,0) ";
                    }
                    sqlText += @"

,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
AND pd.BranchId=@BranchId

-------------------------------------------------- End Purchase --------------------------------------------------
------------------------------------------------------------------------------------------------------------------

";

                    #endregion

                    #endregion

                    #region VAT 6.2.1 False / Receive, Issue

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive Data

                        sqlText += @"
-------------------------------------------------- ReceiveDetails --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase', '' BENumber,
pd.ItemNo,isnull(subtotal,0)  ,isnull(UOMQty,0) ,
pd.VATAmount,0 SDAmount,'WIP',pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime  >=@StartDate  and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND   (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')
AND pd.BranchId=@BranchId

";

                        #endregion

                        #region Issue Data


                        sqlText += @"
-------------------------------------------------- Start Issue --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')
AND id.BranchId=@BranchId
";

                        #region Code to Code Transfer


                        sqlText += @"

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.TransferDate,ID.TransferDate,pt.TransferCode,'Issue','-'
,id.FromItemNo,isnull(id.IssuePrice,0) ,isnull(id.FromQuantity,0) ,0 VATAmount,0 SDAmount,'CTCTransfer',ID.TransferDate
from ProductTransfersDetails ID left outer join ProductTransfers pt on id.ProductTransferId = pt.Id
where ID.TransferDate  >=@StartDate  and ID.TransferDate < DATEADD(d,1, @EndDate)  
and ID.FromItemNo in(select distinct ItemNo from #ProductReceive)
 AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN('RawCTC')
AND id.BranchId=@BranchId
";
                        #endregion

                        #region Toll Issue Data

                        if (IssueFrom6_1)
                        {
                            #region Issue From 6.1

                            sqlText += @"   
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')
AND id.BranchId=@BranchId
";
                            #endregion
                        }
                        else
                        {
                            if (TollReceiveNotWIP)
                            {
                                #region Toll Receive NotWIP

                                sqlText += @"   
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive-NotWIP')
AND id.BranchId=@BranchId
";
                                #endregion
                            }

                            if (TollReceiveWithIssue)
                            {
                                #region Toll Receive With Issue


                                sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Toll Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
AND id.BranchId=@BranchId

";
                                #endregion
                            }
                        }
                        #endregion

                        #region Toll Finish Receive

                        sqlText += @" 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)  and ID.SubTotal>0
AND ID.TransactionType IN ('TollFinishReceive') 
AND id.BranchId=@BranchId
";

                        #endregion

                        #region Issue Return, Receive Return

                        sqlText += @" 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn','ReceiveReturn')
AND ID.BranchId=@BranchId
";
                        #endregion

                        #endregion

                        #region Dispose Raw Data


                        sqlText += @"

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.TransactionDateTime IssueDateTime,ID.TransactionDateTime IssueDateTime,ID.DisposeNo,'Issue','-'
,id.ItemNo,isnull(Quantity,0)*isnull(SubTotal,0) ,isnull(Quantity,0) ,ID.VATAmount,ID.SDAmount,'Raw Dispose', TransactionDateTime IssueDateTime
from DisposeRawDetails ID
where ID.TransactionDateTime  >=@StartDate  and ID.TransactionDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
and ISNULL(ID.IsSaleable,'N')='N'
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other')
AND id.BranchId=@BranchId
";


                        #endregion

                    }

                    #endregion

                    #region Stock Movement False/ Raw Sale, Raw Credit, Dispose Raw Sale

                    #region Raw Sale

                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  
AND BranchId=@BranchId
";

                    #endregion


                    if (vm.StockMovement == false)
                    //if (true)
                    {



                        #region Raw Credit


                        sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.InvoiceDateTime,ID.InvoiceDateTime,ID.SalesInvoiceNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(AVGPrice,0) ,-isnull(UOMQty,0) ,-0 VATAmount,-0 SDAmount,id.TransactionType,InvoiceDateTime
from SalesInvoiceDetails ID
where ID.InvoiceDateTime  >=@StartDate  and ID.InvoiceDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('RawCredit')
AND ID.BranchId=@BranchId

";
                        #endregion

                        #region Dispose Raw Sale

                        sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-'
, ItemNo
, isnull(UOMQty,0)*isnull(UOMPrice,0)
, case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end 
,'0'
, SDAmount,'Dispose Raw Sale',CreatedOn
from SalesInvoiceDetails
where 1=1 
and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeRaw')  
AND BranchId=@BranchId
";

                        #endregion


                    }

                    #endregion
                }

                #endregion

                #region Openinng Data

                sqlText += @"
-------------------------------------------------- Openinng Data --------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

------select @OpeningDate = p.OpeningDate from Products p
------WHERE ItemNo=@ItemNo
------IF(@OpeningDate<@StartDate)

set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
SELECT distinct ItemNo, 0 Quantity, 0 Amount  FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'

";

                #region Opening From Product False

                if (vm.OpeningFromProduct == false)
                {

                    if (vm.BranchId > 1)
                    {
                        sqlText += @"	
UNION ALL 	 
SELECT distinct ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
group by ItemNo
 
";
                    }
                    else
                    {
                        sqlText += @"		
UNION ALL  
SELECT distinct itemNo ItemNo, sum(isnull(OpeningBalance,0)) Quantity, sum(isnull(p.OpeningTotalCost,0)) Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
--AND BranchId='1'
group by ItemNo

";
                    }

                }
                #endregion

                #region Purchase Data

                #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                #endregion


                #region Code To Code Purchase

                sqlText += @"
UNION ALL(
SELECT  distinct   ToItemNo, isnull(sum(ToQuantity),0)PurchaseQuantity
,isnull(sum(isnull(ReceivePrice,0)),0)SubTotal
FROM ProductTransfersDetails WHERE Post='Y' 
and TransactionType in('RawCTC') 
AND TransferDate>= '01-Jul-2019' and TransferDate < @StartDate     
AND ToItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ToItemNo
)
";

                #endregion


                #region 'TollReceive-WIP'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive-WIP') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                if (vm.StockMovement == true)
                {
                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }
                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' and SubTotal>0
and TransactionType in('TollReceiveRaw') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                }
                #endregion

                #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'

                sqlText += @"

UNION ALL (
	SELECT distinct   ItemNo,isnull(sum(UOMQty),0) PurchaseQuantity 
";
                if (TotalIncludeSD)
                {
                    sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+@othervalue2+isnull(SDAmount,0)),0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+@othervalue2),0)),0)SubTotal ";
                }


                if (IncludeOtherAMT)
                {

                    sqlText = sqlText.Replace("@othervalue2", "isnull(OthersAmount,0)");
                }
                else
                {
                    sqlText = sqlText.Replace("@othervalue", "0");
                }
                sqlText += @"	
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 
AND BranchId=@BranchId
group by ItemNo
 )  


";
                #endregion

                #region 'ClientRawReceive'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('ClientRawReceive') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                #endregion

                #region 'PurchaseReturn','PurchaseDN'


                sqlText += @"
UNION ALL 
(	SELECT   distinct   ItemNo,-isnull(sum(UOMQty),0) PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal     
FROM PurchaseInvoiceDetails 
WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate       AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                #endregion

                #endregion

                #region VAT6.2.1 False / Receive, Issue, Dispose Raw Data

                if (vm.VAT6_2_1 == false)
                {
                    #region Receive - WIP

                    sqlText += @"		
UNION ALL  
(SELECT distinct   ItemNo,  isnull(sum(UOMQty),0) Quantity,isnull(sum(isnull(SubTotal,0)),0)Amount 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime>= '01-July-2019' and ReceiveDateTime < @StartDate    
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by itemNo
 )   
";
                    #endregion

                    #region Issue Data

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate     
AND TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #region Code To Code Transfer


                    sqlText += @"

UNION ALL 
(
SELECT  distinct   FromItemNo,-isnull(sum(FromQuantity),0) IssueQuantity,-isnull(sum(isnull(IssuePrice,0)),0)  
FROM ProductTransfersDetails WHERE Post='Y'   
AND TransferDate>= '01-July-2019' and TransferDate< @StartDate     
AND FromItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND TransactionType IN('RawCTC')
group by FromItemNo
) 
";

                    #endregion

                    #region Toll Issue

                    if (IssueFrom6_1)
                    {
                        #region Issue From 6.1

                        sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'  
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
 AND TransactionType IN ('TollIssue')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                        #endregion
                    }
                    else
                    {
                        if (TollReceiveNotWIP)
                        {
                            #region Toll Receive Not WIP

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive-NotWIP')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                            #endregion
                        }

                        if (TollReceiveWithIssue)
                        {
                            #region Toll Receive With Issue

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                            #endregion
                        }
                    }

                    #endregion

                    #region Toll Finish Receive


                    sqlText += @" 
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   and SubTotal>0
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
AND TransactionType IN ('TollFinishReceive')  
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                    #endregion

                    #region Issue Return, Receive Return

                    sqlText += @" 

UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'  
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)   
";

                    #endregion

                    #endregion

                    #region Dispose Raw Data

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)   
FROM DisposeRawDetails WHERE Post='Y'  
and ISNULL(IsSaleable,'N')='N' 
AND TransactionDateTime>= '01-July-2019' and TransactionDateTime< @StartDate     
AND TransactionType IN ('Other')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion
                }

                #endregion

                #region Stock Movement False / Sales
                #region Raw Sale

                sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawSale')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                #endregion
                if (vm.StockMovement == false)
                //if (true)
                {



                    #region Raw Credit

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawCredit')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                    #endregion


                    #region Raw Sale

                    sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(UOMPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'    
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('DisposeRaw')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                }


                #endregion

                sqlText += @"
) AS a GROUP BY a.ItemNo
";

                #endregion

                #region Insert, Update and Select Data

                sqlText += @"

insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo



update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId



update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId


---- update #VAT_16 set UnitCost= ProductAvgPrice.avgprice*Quantity, StartingAmount= ProductAvgPrice.avgprice*Quantity
---- from (select distinct ProductAvgPrice.itemno, avgprice from ProductAvgPrice, 
---- ( 
---- select distinct itemno, max(AgvPriceDate) AgvPriceDate,max(SL)SL from ProductAvgPrice
---- where AgvPriceDate < @StartDate and TransactionType in('purchase','opening')  group by ItemNo)t
---- where t.SL = ProductAvgPrice.SL
---- and TransactionType in('purchase','opening')
---- )ProductAvgPrice where ProductAvgPrice.ItemNo=#VAT_16.ItemNo and #VAT_16.TransType = 'Opening'



select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,p.ProductCode ProductCodeA,p.UOM,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,#VAT_16.ItemNo,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID  left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 
--order by #VAT_16.SerialNo ASC ,CreateDateTime ASC




--DROP TABLE #VAT_16
--DROP TABLE #VATTemp_16
--DROP TABLE #ProductReceive

                ";

                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }




                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", vm.UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = vm.UserName;
                }
                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed
                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = vm.Post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = vm.Post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);





                #endregion

                #endregion


            }

            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_1_WithConn_Backup28082023(VAT6_1ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT6_1");
            #endregion

            #region Try

            try
            {
                #region Settings

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV", null, null, connVM) == "Y" ? true : false);
                bool IssueFrom6_1 = Convert.ToBoolean(_cDal.settings("Toll6_4", "IssueFrom6_1", null, null, connVM) == "Y" ? true : false);
                bool TotalIncludeSD = Convert.ToBoolean(_cDal.settings("VAT6_1", "TotalIncludeSD", null, null, connVM) == "Y" ? true : false);
                bool IncludeOtherAMT = _cDal.settings("VAT6_1", "IncludeOtherAMT", null, null, connVM) == "Y";
                bool TollReceiveNotWIP = Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP", null, null, connVM) == "Y" ? true : false);
                bool TollReceiveWithIssue = Convert.ToBoolean(_cDal.settings("TollReceive", "WithIssue", null, null, connVM) == "Y" ? true : false);
                bool Permanent6_1 = true;//_cDal.settings("VAT6_1", "6_1Permanent") == "Y";
                //bool ContractorFGProduction = Convert.ToBoolean(_cDal.settings("ContractorFGProduction", "IssueFrom6_1") == "Y" ? true : false);

                #endregion

                #region open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                if (string.IsNullOrEmpty(vm.UserId))
                {
                    throw new Exception("User Id Not Found");
                }

                string[] resultSave61 = { };

                bool checkProductType = CheckProductType(vm, currConn, transaction);


                if (Permanent6_1 && !vm.PermanentProcess && !checkProductType)
                {
                    if (vm.BranchWise)
                    {
                        resultSave61 = Save6_1_FromPermanent_Branch_Backup28082023(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);

                    }
                    else
                    {
                        resultSave61 = Save6_1_FromPermanent_Backup28082023(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                    }

                    string getMaxDate = @"select max(startdatetime) from VAT6_1_Permanent where 1=1 ";
                    if (!string.IsNullOrEmpty(vm.ItemNo))
                    {
                        getMaxDate += " and ItemNo='" + vm.ItemNo + "'";
                    }
                    SqlCommand sqlCommand = new SqlCommand(getMaxDate, currConn, transaction);
                    sqlCommand.CommandTimeout = 500;
                    var maxDate = sqlCommand.ExecuteScalar();
                    DateTime permanent_Max = Convert.ToDateTime(maxDate == DBNull.Value ? null : maxDate);

                    if (Convert.ToDateTime(vm.StartDate) > permanent_Max)
                    {
                        vm.SkipOpening = true;
                        resultSave61 = Save6_1_Backup28082023(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                    }
                    else if (Convert.ToDateTime(vm.EndDate) > permanent_Max)
                    {
                        vm.StartDate = permanent_Max.AddDays(1).ToString("yyyy-MM-dd");
                        vm.SkipOpening = true;
                        resultSave61 = Save6_1_Backup28082023(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                    }

                }
                else
                {
                    resultSave61 = Save6_1_Backup28082023(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                    //resultSave61 = Save6_2_1UAT(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction);

                }

                #region Update Negative

                string updateNegativeValue =
                    @"
update VAT6_1 set AvgRate = 0,RunningValue= 0
, RunningOpeningValue=0
from (
select distinct ItemNo,min(StartDateTime)StartDateTime 
from VAT6_1_Permanent 
where 1=1 and TransType not in ('opening') 
and RunningTotal<0
and UserId=@UserId

group by ItemNo
) a
where VAT6_1.ItemNo = a.ItemNo and VAT6_1.StartDateTime>= a.StartDateTime
and VAT6_1.UserId=@UserId


";


                SqlCommand sqlupdateNegativeValue = new SqlCommand(updateNegativeValue, currConn, transaction);
                sqlupdateNegativeValue.CommandTimeout = 500;
                sqlupdateNegativeValue.Parameters.AddWithValue("@UserId", vm.UserId);
                sqlupdateNegativeValue.ExecuteNonQuery();


                #endregion

                #region Select Saved Data

                sqlText = Get6_1SelectText_Backup28082023();

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@UserId", vm.UserId);
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dataSet);



                #endregion


                if (Vtransaction == null)
                {
                    transaction.Commit();
                }

            }

            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_1_Permanent_DayWise_Backup28082023(VAT6_1ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT6_1");
            #endregion

            #region Try

            try
            {
                #region Settings

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV", null, null, connVM) == "Y" ? true : false);
                bool IssueFrom6_1 = Convert.ToBoolean(_cDal.settings("Toll6_4", "IssueFrom6_1", null, null, connVM) == "Y" ? true : false);
                bool TotalIncludeSD = Convert.ToBoolean(_cDal.settings("VAT6_1", "TotalIncludeSD", null, null, connVM) == "Y" ? true : false);
                bool IncludeOtherAMT = _cDal.settings("VAT6_1", "IncludeOtherAMT", null, null, connVM) == "Y";
                bool TollReceiveNotWIP = Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP", null, null, connVM) == "Y" ? true : false);
                bool TollReceiveWithIssue = Convert.ToBoolean(_cDal.settings("TollReceive", "WithIssue", null, null, connVM) == "Y" ? true : false);
                bool Permanent6_1 = true;//_cDal.settings("VAT6_1", "6_1Permanent") == "Y";
                //bool ContractorFGProduction = Convert.ToBoolean(_cDal.settings("ContractorFGProduction", "IssueFrom6_1") == "Y" ? true : false);

                #endregion

                #region open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                if (string.IsNullOrEmpty(vm.UserId))
                {
                    throw new Exception("User Id Not Found");
                }

                string[] resultSave61 = { };

                bool checkProductType = CheckProductType(vm, currConn, transaction);


                if (Permanent6_1 && !vm.PermanentProcess && !checkProductType)
                {
                    if (vm.BranchWise)
                    {
                        resultSave61 = Save6_1_FromPermanent_DayWise_Branch_Backup28082023(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);

                    }
                    else
                    {
                        resultSave61 = Save6_1_FromPermanent_DayWise_Backup28082023(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                    }

                    string getMaxDate = @"select max(startdatetime) from VAT6_1_Permanent_DayWise where 1=1 ";
                    if (!string.IsNullOrEmpty(vm.ItemNo))
                    {
                        getMaxDate += " and ItemNo='" + vm.ItemNo + "'";
                    }
                    SqlCommand sqlCommand = new SqlCommand(getMaxDate, currConn, transaction);
                    sqlCommand.CommandTimeout = 500;
                    var maxDate = sqlCommand.ExecuteScalar();
                    DateTime permanent_Max = Convert.ToDateTime(maxDate == DBNull.Value ? null : maxDate);

                    //if (Convert.ToDateTime(vm.StartDate) > permanent_Max)
                    //{
                    //    vm.SkipOpening = true;
                    //    resultSave61 = Save6_1(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                    //}
                    //else if (Convert.ToDateTime(vm.EndDate) > permanent_Max)
                    //{
                    //    vm.StartDate = permanent_Max.AddDays(1).ToString("yyyy-MM-dd");
                    //    vm.SkipOpening = true;
                    //    resultSave61 = Save6_1(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                    //}

                }
                //else
                //{
                //    resultSave61 = Save6_1(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction, connVM);
                //    //resultSave61 = Save6_2_1UAT(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue, currConn, transaction);

                //}

                #region Update Negative

                string updateNegativeValue =
                    @"
update VAT6_1 set AvgRate = 0,RunningValue= 0
, RunningOpeningValue=0
from (
select distinct ItemNo,min(StartDateTime)StartDateTime 
from VAT6_1_Permanent 
where 1=1 and TransType not in ('opening') 
and RunningTotal<0
and UserId=@UserId

group by ItemNo
) a
where VAT6_1.ItemNo = a.ItemNo and VAT6_1.StartDateTime>= a.StartDateTime
and VAT6_1.UserId=@UserId


";


                SqlCommand sqlupdateNegativeValue = new SqlCommand(updateNegativeValue, currConn, transaction);
                sqlupdateNegativeValue.CommandTimeout = 500;
                sqlupdateNegativeValue.Parameters.AddWithValue("@UserId", vm.UserId);
                sqlupdateNegativeValue.ExecuteNonQuery();


                #endregion

                #region Select Saved Data

                sqlText = Get6_1SelectText_Backup28082023();

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@UserId", vm.UserId);
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dataSet);



                #endregion


                if (Vtransaction == null)
                {
                    transaction.Commit();
                }

            }

            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }

        private bool CheckProductType(VAT6_1ParamVM vm, SqlConnection currConn, SqlTransaction transaction)
        {

            //string[] notAllowedTypes = { "service", "overhead", "noninventory", "wip", "service(nonstock)" };
            string[] notAllowedTypes = { "service", "overhead", "noninventory", "service(nonstock)" };


            string sqlText = @"  

select isnull(pc.IsRaw,'-') from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1   ";

            #region Conditions

            if (!string.IsNullOrWhiteSpace(vm.ProdutType))
            {
                sqlText += @"  and IsRaw=@ProdutType";
            }
            else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
            {
                if (vm.ProdutCategoryLike == true)
                {
                    sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                }
                else
                {
                    sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                    sqlText += @"  and Products.ActiveStatus='Y'";
                }
            }
            else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
            {
                sqlText += @"  and ItemNo=@ItemNo";
            }

            #endregion

            SqlCommand productCmd = new SqlCommand(sqlText, currConn, transaction);

            #region Parameter Add

            if (!string.IsNullOrWhiteSpace(vm.ProdutType))
            {
                productCmd.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
            }

            else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
            {
                if (vm.ProdutCategoryLike == true)
                {
                    productCmd.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                }
                else
                {
                    productCmd.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                }
            }
            else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
            {
                productCmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
            }

            #endregion


            string typeName = productCmd.ExecuteScalar().ToString();

            return notAllowedTypes.Contains(typeName.ToLower());

        }

        private string Get6_1SelectText_Backup28082023()
        {
            return @"

select VAT6_1.SerialNo
,convert (varchar,VAT6_1.StartDateTime,120)StartDateTime
,convert (varchar,VAT6_1.StartDateTime,120)Day,
VAT6_1.StartingQuantity
,VAT6_1.StartingAmount
,TransID
,VAT6_1.TransType,
isnull(v.VendorName,'-')VendorName
,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2
,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName
,p.ProductCode ProductCodeA
,p.UOM,VAT6_1.Quantity
,VAT6_1.VATRate
,VAT6_1.SD
,VAT6_1.UnitCost
,p.HSCodeNo
,VAT6_1.BENumber
,convert (varchar,VAT6_1.InvoiceDateTime,120)InvoiceDateTime
,VAT6_1.Remarks
,VAT6_1.ItemNo
,VAT6_1.CreateDateTime
,VAT6_1.AvgRate
,VAT6_1.RunningTotal
,VAT6_1.RunningValue
,isnull(VAT6_1.RunningOpeningQuantity,0)RunningOpeningQuantity
,isnull(VAT6_1.RunningOpeningValue,0)RunningOpeningValue
from VAT6_1 left outer join
Vendors as V on VAT6_1.VendorID=v.VendorID and VAT6_1.TransType  in ('Purchase') 
left outer join 
Products P on VAT6_1.ItemNo=p.ItemNo
where VAT6_1.UserId = @UserId
order by ItemNo, StartDateTime, SerialNo,TransID";
        }

        public string[] Save6_1_Backup28082023(VAT6_1ParamVM vm, bool TotalIncludeSD, bool IncludeOtherAMT, bool IssueFrom6_1,
            bool TollReceiveNotWIP, bool TollReceiveWithIssue, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;

                CommonDAL commonDal = new CommonDAL();
                bool Permanent6_1 = false;//commonDal.settings("VAT6_1", "6_1Permanent", currConn, transaction) == "Y";


                #region SQL Text

                sqlText = "";

                string deleteExisting = "delete from VAT6_1 where UserId = @UserId";

                #region Select Product
                if (Permanent6_1)
                {

                    sqlText += @"  


create table #ProductReceive1(ItemNo varchar(50))

insert into #ProductReceive1(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                    #region Conditions

                    if (vm.Is6_1Permanent && vm.FilterProcessItems)
                    {
                        sqlText += @"  and Products.ReportType in('VAT6_1','VAT6_1_And_6_2')  and Products.ProcessFlag='Y' ";

                    }
                    else if (vm.Is6_1Permanent)
                    {
                        sqlText += @"  and Products.ReportType in('VAT6_1','VAT6_1_And_6_2')  ";
                        if (!string.IsNullOrEmpty(vm.ItemNo))
                        {
                            sqlText += @"  and Products.ItemNo in ('" + vm.ItemNo + "')  ";
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                    {
                        string code = new CommonDAL().settingValue("CompanyCode", "Code");
                        if (code.ToLower() == "cp")
                        {
                            sqlText += @"  and Products.BranchId=@BranchId";
                        }
                        if (vm.Flag == "SCBL")
                        {
                            sqlText += @"  and IsRaw in('Raw','Pack')";


                        }
                        else
                        {
                            sqlText += @"  and IsRaw=@ProdutType";
                        }
                    }

                    else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                    {
                        if (vm.ProdutCategoryLike == true)
                        {
                            sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                        }
                        else
                        {
                            sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                            sqlText += @"  and Products.ActiveStatus='Y'";
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                    {
                        sqlText += @"  and ItemNo=@ItemNo";
                    }

                    sqlText += @"  ) as a

delete from VAT6_1Temp where UserId = @UserId

insert into VAT6_1Temp(
[SerialNo],[ItemNo],[StartDateTime],[StartingQuantity],[StartingAmount],[VendorID],[SD]
,[VATRate],[Quantity],[UnitCost],[TransID],[TransType],[BENumber],[InvoiceDateTime]
,[Remarks],[CreateDateTime],[TransactionType],[BranchId],[UserId],[AvgRate],[PeriodID]      ,[RunningTotal]
)
select 
[SerialNo],[ItemNo],[StartDateTime],[StartingQuantity],[StartingAmount],[VendorID],[SD]
,[VATRate],[Quantity],[UnitCost],[TransID],[TransType],[BENumber],[InvoiceDateTime]
,[Remarks],[CreateDateTime],[TransactionType],[BranchId],@UserId,[AvgRate],[PeriodID]      ,[RunningTotal]
from VAT6_1_Permanent

where 1=1
and StartDateTime >= @StartDate and StartDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive1)

select  DATEADD(d,1,max(StartDatetime)) from VAT6_1Temp
where UserId = @UserId

";




                    #endregion

                #endregion

                    SqlCommand productCmd = new SqlCommand(sqlText, currConn, transaction);
                    productCmd.CommandTimeout = 1000;

                    if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                    {
                        productCmd.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                    }

                    else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                    {
                        if (vm.ProdutCategoryLike == true)
                        {
                            productCmd.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                        }
                        else
                        {
                            productCmd.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                    {
                        productCmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                    }
                    //productCmd.ExecuteNonQuery();
                    productCmd.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    productCmd.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    productCmd.Parameters.AddWithValue("@UserId", vm.UserId);
                    var maxDate = productCmd.ExecuteScalar();

                    vm.StartDate = maxDate == null ? vm.StartDate : maxDate.ToString();
                }



                #region Beginning

                sqlText = @"
                          
---DECLARE @StartDate DATETIME;
---DECLARE @EndDate DATETIME;
---DECLARE @post1 VARCHAR(200);
---DECLARE @post2 VARCHAR(200);
---DECLARE @ItemNo VARCHAR(200);
---SET @Itemno='46';
---SET @post1='Y';
---SET @post2='N';
---SET @StartDate='2014-04-01';
---SET @EndDate='2020-04-27';
---
---DECLARE @BranchId as int = 1;

DECLARE @maxDate as datetime;


declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

 

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

";

                #endregion

                #region Select Product


                sqlText += @"  


create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                #region Conditions
                if (vm.Is6_1Permanent && vm.FilterProcessItems)
                {
                    sqlText += @"  and Products.ReportType in('VAT6_1','VAT6_1_And_6_2')  and Products.ProcessFlag='Y' ";

                }
                else if (vm.Is6_1Permanent)
                {
                    if (vm.VAT6_2_1)
                    {
                        sqlText += @"  and Products.ReportType in('VAT6_2_1')";
                    }
                    else
                    {
                        sqlText += @"  and Products.ReportType in('VAT6_1','VAT6_1_And_6_2')";
                    }

                    if (!string.IsNullOrEmpty(vm.ItemNo))
                    {
                        sqlText += @"  and Products.ItemNo in ('" + vm.ItemNo + "')  ";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    string code = new CommonDAL().settingValue("CompanyCode", "Code");
                    if (code.ToLower() == "cp")
                    {
                        sqlText += @"  and Products.BranchId=@BranchId";
                    }
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";


                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                if (vm.VAT6_2_1)
                {
                    sqlText += @"  and  Products.ReportType in('VAT6_2_1')";
                }
                else
                {
                    sqlText += @"  and  Products.ReportType in('VAT6_1','VAT6_1_And_6_2')";
                }
                sqlText += @"  ) as a";




                #endregion

                #endregion

                #region Transaction Data

                if (vm.Opening == false)
                {
                    #region Purchase Data

                    sqlText += @"
-------------------------------------------------- Start Purchase --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

";

                    #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                    sqlText += @"
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }

                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase', CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService','PurchaseTollcharge')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region Code To Code Transfer Purchase

                    sqlText += @"
union all

select 'A1',CONVERT(varchar, pd.TransferDate,23)ReceiveDate,
CONVERT(varchar, pd.TransferDate,23)InvoiceDateTime,
pt.TransferCode,'Purchase',
'-',
pd.ToItemNo
,isnull(pd.ReceivePrice,0),isnull(ToQuantity,0) ,
0,0,'CTCPurchase',
CONVERT(varchar, pd.TransferDate,23)ReceiveDate

from ProductTransfersDetails PD left outer join ProductTransfers pt on pd.ProductTransferId = pt.Id
where pd.TransferDate  >=@StartDate  and pd.TransferDate < DATEADD(d,1, @EndDate) 

and pd.ToItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('RawCTC')
AND pd.BranchId=@BranchId";

                    sqlText += @"
union all

select 'A1',CONVERT(varchar, pd.TransferDate,23)ReceiveDate,
CONVERT(varchar, pd.TransferDate,23)InvoiceDateTime,
pt.TransferCode,'Purchase',
'-',
pd.ToItemNo
,isnull(pd.ReceivePrice,0),isnull(ToQuantity,0) ,
0,0,'CTCPurchase',
CONVERT(varchar, pd.TransferDate,23)ReceiveDate

from ProductTransfersDetails PD left outer join ProductTransfers pt on pd.ProductTransferId = pt.Id
where pd.TransferDate  >=@StartDate  and pd.TransferDate < DATEADD(d,1, @EndDate) 

and pd.ToItemNo in(select distinct ItemNo from #ProductReceive)
and pd.ToItemNo in(
select distinct ItemNo from Products p left outer join ProductCategories pc
on p.CategoryID = pc.CategoryID
where pc.IsRaw = 'Trading'
)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('FinishCTC')
AND pd.BranchId=@BranchId



";

                    #endregion

                    if (vm.Is6_1Permanent && vm.BranchId != 0)
                    {
                        #region  Transfer Receive

                        sqlText += @"
union all

select 'A1',CONVERT(varchar, pd.TransactionDateTime,23)ReceiveDate,
CONVERT(varchar, pd.TransactionDateTime,23)InvoiceDateTime,
pd.TransferReceiveNo,'Purchase',
'-',
pd.ItemNo
,isnull(pd.SubTotal,0),isnull(Quantity,0) ,
0,0,'Raw TransferReceive',
CONVERT(varchar, pd.TransactionDateTime,23)ReceiveDate

from TransferReceiveDetails PD  
where pd.TransactionDateTime  >=@StartDate  and pd.TransactionDateTime < DATEADD(d,1, @EndDate) 

and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('61in')
AND pd.BranchId=@BranchId

";

                        #endregion

                    }




                    #region 'TollReceive-WIP'

                    sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceive-WIP')
AND pd.BranchId=@BranchId

";

                    #endregion


                    #region 'ClientFGReceiveWOBOM'

                    sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ClientFGReceiveWOBOM')
AND pd.BranchId=@BranchId

";

                    #endregion



                    if (vm.StockMovement == true)
                    {
                        sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where 1=1 
and pd.SubTotal>0
and pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceiveRaw')
AND pd.BranchId=@BranchId

";
                    }


                    #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'

                    sqlText += @"

 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)


select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.SDAmount,0)+@othervalue)";
                    }
                    else
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+@othervalue)";
                    }

                    if (IncludeOtherAMT)
                    {
                        sqlText = sqlText.Replace("@othervalue", "isnull(pd.OthersAmount,0)");
                    }
                    else
                    {
                        sqlText = sqlText.Replace("@othervalue", "0");
                    }


                    sqlText += @"
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region 'ClientRawReceive'

                    sqlText += @"

union all

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }

                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Client Raw Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ClientRawReceive')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region 'PurchaseReturn','PurchaseDN'

                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,-1*isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @"
,-1*isnull(subtotal,0) ";
                    }

                    sqlText += @"

,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
AND pd.BranchId=@BranchId

-------------------------------------------------- End Purchase --------------------------------------------------
------------------------------------------------------------------------------------------------------------------

";

                    #endregion

                    #endregion

                    #region VAT 6.2.1 False / Receive, Issue

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive Data

                        sqlText += @"
-------------------------------------------------- ReceiveDetails --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase', '' BENumber,
pd.ItemNo,isnull(subtotal,0)  ,isnull(UOMQty,0) ,
pd.VATAmount,0 SDAmount,'WIP',pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime  >=@StartDate  and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND   (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')
AND pd.BranchId=@BranchId

";

                        #endregion

                        #region Issue Data

                        sqlText += @"
-------------------------------------------------- Start Issue --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction','PurchaseTollcharge')
AND id.BranchId=@BranchId
";

                        #region Code to Code Transfer

                        sqlText += @"

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.TransferDate,ID.TransferDate,pt.TransferCode,'Issue','-'
,id.FromItemNo,isnull(id.IssuePrice,0) ,isnull(id.FromQuantity,0) ,0 VATAmount,0 SDAmount,'CTCTransfer',ID.TransferDate
from ProductTransfersDetails ID left outer join ProductTransfers pt on id.ProductTransferId = pt.Id
where ID.TransferDate  >=@StartDate  and ID.TransferDate < DATEADD(d,1, @EndDate)  
and ID.FromItemNo in(select distinct ItemNo from #ProductReceive)
 AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN('RawCTC')
AND id.BranchId=@BranchId
";

                        #endregion

                        if (vm.Is6_1Permanent && vm.BranchId != 0)
                        {
                            #region  Transfer Issue

                            sqlText += @"
union all

select 'A1',CONVERT(varchar, pd.TransactionDateTime,23)ReceiveDate,
CONVERT(varchar, pd.TransactionDateTime,23)InvoiceDateTime,
pd.TransferIssueNo,'Issue',
'-',
pd.ItemNo
,isnull(pd.SubTotal,0),isnull(Quantity,0) ,
0,0,'Raw TransferIssue',
CONVERT(varchar, pd.TransactionDateTime,23)ReceiveDate

from TransferIssueDetails PD  
where pd.TransactionDateTime  >=@StartDate  and pd.TransactionDateTime < DATEADD(d,1, @EndDate) 

and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('61out')
AND pd.BranchId=@BranchId

";

                            #endregion

                        }


                        #region Toll Issue Data

                        if (IssueFrom6_1)
                        {
                            #region Issue From 6.1

                            sqlText += @"   
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')
AND id.BranchId=@BranchId
";

                            #endregion
                        }
                        else
                        {
                            if (TollReceiveNotWIP)
                            {
                                #region Toll Receive NotWIP

                                sqlText += @"   
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive-NotWIP')
AND id.BranchId=@BranchId
";

                                #endregion
                            }

                            if (TollReceiveWithIssue)
                            {
                                #region Toll Receive With Issue

                                sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Toll Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
AND id.BranchId=@BranchId

";

                                #endregion
                            }
                        }

                        #endregion

                        #region Toll Finish Receive

                        sqlText += @" 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)  and ID.SubTotal>0
AND ID.TransactionType IN ('TollFinishReceive') 
AND id.BranchId=@BranchId
";

                        #endregion

                        #region Issue Return, Receive Return

                        sqlText += @" 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn','ReceiveReturn')
AND ID.BranchId=@BranchId
";

                        #endregion

                        #endregion

                        #region Dispose Raw Data

                        sqlText += @"

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.TransactionDateTime IssueDateTime,ID.TransactionDateTime IssueDateTime,ID.DisposeNo,'Issue','-'
,id.ItemNo,isnull(Quantity,0)*isnull(SubTotal,0) ,isnull(Quantity,0) ,ID.VATAmount,ID.SDAmount,'Raw Dispose', TransactionDateTime IssueDateTime
from DisposeRawDetails ID
where ID.TransactionDateTime  >=@StartDate  and ID.TransactionDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
and ISNULL(ID.IsSaleable,'N')='N'
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other')
AND id.BranchId=@BranchId
";

                        #endregion
                    }

                    #endregion

                    #region Stock Movement False/ Raw Sale, Raw Credit, Dispose Raw Sale

                    #region Raw Sale

                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  
AND BranchId=@BranchId
";

                    #endregion


                    if (vm.StockMovement == false)
                    //if (true)
                    {
                        #region Raw Credit

                        sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.InvoiceDateTime,ID.InvoiceDateTime,ID.SalesInvoiceNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(AVGPrice,0) ,-isnull(UOMQty,0) ,-0 VATAmount,-0 SDAmount,id.TransactionType,InvoiceDateTime
from SalesInvoiceDetails ID
where ID.InvoiceDateTime  >=@StartDate  and ID.InvoiceDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('RawCredit')
AND ID.BranchId=@BranchId

";

                        #endregion

                        #region Dispose Raw Sale

                        sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-'
, ItemNo
, isnull(UOMQty,0)*isnull(UOMPrice,0)
, case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end 
,'0'
, SDAmount,'Dispose Raw Sale',CreatedOn
from SalesInvoiceDetails
where 1=1 
and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeRaw')  
AND BranchId=@BranchId
";

                        #endregion
                    }

                    #endregion
                }

                #endregion

                if (vm.Is6_1Permanent == false || vm.StockProcess == true)
                {
                    #region Openinng Data

                    sqlText += @"
-------------------------------------------------- Openinng Data --------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
SELECT distinct ItemNo, 0 Quantity, 0 Amount  FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'

";

                    #region Opening From Product False

                    if (vm.OpeningFromProduct == false)
                    {
                        if (vm.BranchId > 1)
                        {
                            sqlText += @"	
UNION ALL 	 
SELECT distinct ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
group by ItemNo
 
";
                        }
                        else
                        {
                            sqlText += @"		
UNION ALL  
SELECT distinct itemNo ItemNo, sum(isnull(OpeningBalance,0)) Quantity, sum(isnull(p.OpeningTotalCost,0)) Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
--AND BranchId='1'
group by ItemNo

";
                        }
                    }

                    #endregion

                    #region Purchase Data

                    #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }

                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService','PurchaseTollcharge') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                    #endregion


                    #region Code To Code Purchase

                    sqlText += @"
UNION ALL(
SELECT  distinct   ToItemNo, isnull(sum(ToQuantity),0)PurchaseQuantity
,isnull(sum(isnull(ReceivePrice,0)),0)SubTotal
FROM ProductTransfersDetails WHERE Post='Y' 
and TransactionType in('RawCTC') 
AND TransferDate>= '01-Jul-2019' and TransferDate < @StartDate     
AND ToItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ToItemNo
)
";

                    #endregion


                    #region 'TollReceive-WIP'

                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }

                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive-WIP') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                    #endregion


                    #region 'TollReceive-WIP'

                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }

                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('ClientFGReceiveWOBOM') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                    #endregion


                    if (vm.StockMovement == true)
                    {
                        sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                        if (TotalIncludeSD)
                        {
                            sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                        }
                        else
                        {
                            sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                        }

                        sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' and SubTotal>0
and TransactionType in('TollReceiveRaw') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                    }
                    #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'

                    sqlText += @"

UNION ALL (
	SELECT distinct   ItemNo,isnull(sum(UOMQty),0) PurchaseQuantity 
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+@othervalue2+isnull(SDAmount,0)),0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+@othervalue2),0)),0)SubTotal ";
                    }


                    if (IncludeOtherAMT)
                    {
                        sqlText = sqlText.Replace("@othervalue2", "isnull(OthersAmount,0)");
                    }
                    else
                    {
                        sqlText = sqlText.Replace("@othervalue", "0");
                    }

                    sqlText += @"	
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 
AND BranchId=@BranchId
group by ItemNo
 )  


";

                    #endregion

                    #region 'ClientRawReceive'

                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }

                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('ClientRawReceive') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                    #endregion

                    #region 'PurchaseReturn','PurchaseDN'

                    sqlText += @"
UNION ALL 
(	SELECT   distinct   ItemNo,-isnull(sum(UOMQty),0) PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal     
FROM PurchaseInvoiceDetails 
WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate       AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                    #endregion

                    #endregion

                    #region VAT6.2.1 False / Receive, Issue, Dispose Raw Data

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive - WIP

                        sqlText += @"		
UNION ALL  
(SELECT distinct   ItemNo,  isnull(sum(UOMQty),0) Quantity,isnull(sum(isnull(SubTotal,0)),0)Amount 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime>= '01-July-2019' and ReceiveDateTime < @StartDate    
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by itemNo
 )   
";

                        #endregion

                        #region Issue Data

                        sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate     
AND TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction','PurchaseTollcharge')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                        #region Code To Code Transfer

                        sqlText += @"

UNION ALL 
(
SELECT  distinct   FromItemNo,-isnull(sum(FromQuantity),0) IssueQuantity,-isnull(sum(isnull(IssuePrice,0)),0)  
FROM ProductTransfersDetails WHERE Post='Y'   
AND TransferDate>= '01-July-2019' and TransferDate< @StartDate     
AND FromItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND TransactionType IN('RawCTC')
group by FromItemNo
) 
";

                        #endregion

                        #region Toll Issue

                        if (IssueFrom6_1)
                        {
                            #region Issue From 6.1

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'  
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
 AND TransactionType IN ('TollIssue')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";

                            #endregion
                        }
                        else
                        {
                            if (TollReceiveNotWIP)
                            {
                                #region Toll Receive Not WIP

                                sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive-NotWIP')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";

                                #endregion
                            }

                            if (TollReceiveWithIssue)
                            {
                                #region Toll Receive With Issue

                                sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";

                                #endregion
                            }
                        }

                        #endregion

                        #region Toll Finish Receive

                        sqlText += @" 
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   and SubTotal>0
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
AND TransactionType IN ('TollFinishReceive')  
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                        #endregion

                        #region Issue Return, Receive Return

                        sqlText += @" 

UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'  
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)   
";

                        #endregion

                        #endregion

                        #region Dispose Raw Data

                        sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)   
FROM DisposeRawDetails WHERE Post='Y'  
and ISNULL(IsSaleable,'N')='N' 
AND TransactionDateTime>= '01-July-2019' and TransactionDateTime< @StartDate     
AND TransactionType IN ('Other')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                        #endregion
                    }

                    #endregion

                    #region Stock Movement False / Sales

                    #region Raw Sale

                    sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawSale')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                    if (vm.StockMovement == false)
                    //if (true)
                    {
                        #region Raw Credit

                        sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawCredit')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                        #endregion


                        #region Raw Sale

                        sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(UOMPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'    
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('DisposeRaw')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                        #endregion
                    }

                    #endregion

                    sqlText += @"
) AS a GROUP BY a.ItemNo
";

                    #endregion


                }

                #region Insert, Update and Select Data

                sqlText += @"

insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo



update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId



update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId


---- update #VAT_16 set UnitCost= ProductAvgPrice.avgprice*Quantity, StartingAmount= ProductAvgPrice.avgprice*Quantity
---- from (select distinct ProductAvgPrice.itemno, avgprice from ProductAvgPrice, 
---- ( 
---- select distinct itemno, max(AgvPriceDate) AgvPriceDate,max(SL)SL from ProductAvgPrice
---- where AgvPriceDate < @StartDate and TransactionType in('purchase','opening')  group by ItemNo)t
---- where t.SL = ProductAvgPrice.SL
---- and TransactionType in('purchase','opening')
---- )ProductAvgPrice where ProductAvgPrice.ItemNo=#VAT_16.ItemNo and #VAT_16.TransType = 'Opening'



--select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
--#VAT_16.StartingQuantity,#VAT_16.StartingAmount
--,TransID,#VAT_16.TransType,
--isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
--isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
--isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
--p.ProductName,p.ProductCode ProductCodeA,p.UOM,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
--,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,#VAT_16.ItemNo,
--#VAT_16.CreateDateTime
--from #VAT_16 left outer join
--Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
--Products P on #VAT_16.ItemNo=p.ItemNo
--order by CreateDateTime ASC,#VAT_16.SerialNo ASC 
--order by #VAT_16.SerialNo ASC ,CreateDateTime ASC

select * from #VAT_16
order by ItemNo,StartDatetime,SerialNo,TransID

--DROP TABLE #VAT_16
--DROP TABLE #VATTemp_16
--DROP TABLE #ProductReceive

                ";

                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(deleteExisting, currConn, transaction);
                objCommVAT16.CommandTimeout = 1000;
                objCommVAT16.Parameters.AddWithValueAndParamCheck("@UserId", vm.UserId);

                if (vm.SkipOpening)
                {
                    objCommVAT16.CommandText = sqlText;
                }
                else
                {
                    objCommVAT16.ExecuteNonQuery();
                }

                objCommVAT16.CommandText = sqlText;

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }


                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", vm.UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = vm.UserName;
                }

                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed

                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = vm.Post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = vm.Post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

                DataTable VAT6_1Data = dataSet.Tables[0];

                VAT6_1Data.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                VAT6_1Data.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });

                if (vm.SkipOpening)
                {
                    if (VAT6_1Data.Rows.Count > 0)
                    {
                        DataRow[] rows = VAT6_1Data.Select("TransType <> 'Opening'");

                        if (rows.Count() > 0)
                        {
                            VAT6_1Data = rows.CopyToDataTable();
                        }
                        else
                        {
                            VAT6_1Data.Clear();

                        }
                    }

                }


                string[] result = commonDal.BulkInsert("VAT6_1", VAT6_1Data, currConn, transaction, 0, null, connVM);

                // update AvgPrice

                string avgPriceUpdate = Get6_1PartitionQuery_Backup28082023(ProcessConfig.Temp);
                string temp6_1Insert = @"
insert into VAT6_1(
[SerialNo],[ItemNo],[StartDateTime],[StartingQuantity],[StartingAmount],[VendorID],[SD]
,[VATRate],[Quantity],[UnitCost],[TransID],[TransType],[BENumber],[InvoiceDateTime]
,[Remarks],[CreateDateTime],[TransactionType],[BranchId],[UserId],[AvgRate]      ,[RunningTotal]
)
select 
[SerialNo],[ItemNo],[StartDateTime],[StartingQuantity],[StartingAmount],[VendorID],[SD]
,[VATRate],[Quantity],[UnitCost],[TransID],[TransType],[BENumber],[InvoiceDateTime]
,[Remarks],[CreateDateTime],[TransactionType],[BranchId],UserId,[AvgRate]     ,[RunningTotal]
from VAT6_1Temp

where 1=1
and UserId = @UserId

";
                if (!Permanent6_1)
                {
                    temp6_1Insert = "";
                }

                avgPriceUpdate = temp6_1Insert + "  " + avgPriceUpdate;

                objCommVAT16 = new SqlCommand(avgPriceUpdate, currConn, transaction);
                objCommVAT16.CommandTimeout = 1000;
                objCommVAT16.Parameters.AddWithValueAndParamCheck("@UserId", vm.UserId);
                objCommVAT16.ExecuteNonQuery();


                return result;

                #endregion
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private string GetPartitionQuery()
        {
            return @"

update VAT6_1 set AvgRate = 0 where VAT6_1.UserId = @UserId

update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice,RunningTotal=0
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.TransID=ProductAvgPrice.PurchaseNo
and VAT6_1.UserId = @UserId

update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.StartDateTime >= isnull(ProductAvgPrice.FromDate,ProductAvgPrice.AgvPriceDate) 
and VAT6_1.StartDateTime< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
and VAT6_1.TransType in('Opening','Issue')
and VAT6_1.UserId = @UserId

update VAT6_1 set AvgRate=a.AvgPrice
from(
select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
right outer join (
select distinct ItemNo,max(sl)SL from ProductAvgPrice 
where 
ItemNo in(select ItemNo from VAT6_1 where 1=1 and UserId = @UserId)

group by ItemNo)as a
on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
where a.ItemNo=VAT6_1.ItemNo
--and  VAT6_1.ItemNo in(select ItemNo from VAT6_1 where (AvgRate is null or AvgRate = 0) and UserId = @UserId)
and VAT6_1.AvgRate = 0 or VAT6_1.AvgRate is null
and VAT6_1.UserId = @UserId


create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100)
,Quantity decimal(25,9),UnitCost decimal(25,9),)
insert into #Temp(Id,ItemNo,TransType,Quantity,UnitCost)
select Id,ItemNo,TransType,Quantity,UnitCost from VAT6_1
where UserId = @UserId 
order by ItemNo,StartDateTime,SerialNo,TransID

update VAT6_1 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Issue') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_1.Id and VAT6_1.UserId = @UserId


Update VAT6_1 set RunningValue = AvgRate*RunningTotal where VAT6_1.UserId = @UserId


update VAT6_1 set RunningTotal=Quantity, RunningValue=UnitCost where TransType in('opening') and UserId = @UserId
update VAT6_1_Permanent set  RunningOpeningQuantity=0,RunningOpeningValue=0
where  UserId = @UserId


drop table #Temp


";
        }

        public string GetOpeningQuery_Backup28082023(string flag)
        {
            string parmanentOpening = @"

insert into VAT6_1_Permanent(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,RunningTotal,RunningValue,RunningOpeningQuantity,RunningOpeningValue)

SELECT distinct 'A'SerialNo, itemNo ,'1900-01-01' StartDateTime,'1900-01-01' InvoiceDateTime, 0 StartingQuantity, 0 StartingAmount,
0 VendorID, 
sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost,0TransID,  'Opening'TransType,0 VATRate
,0 SD,'-'BENumber,'Opening'Remarks,sum(isnull(StockQuantity,0)), sum(isnull(p.StockValue,0)) UnitCost,sum(isnull(StockQuantity,0)) Quantity
, sum(isnull(p.StockValue,0)) UnitCost
FROM ProductStocks p  WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_1','VAT6_1_And_6_2'))
and p.ItemNo not in (select ItemNo from VAT6_1_Permanent where transType = 'Opening')
@itemCondition

group by ItemNo

";

            string permanent_BranchOpening = @"

insert into VAT6_1_Permanent_Branch(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,RunningTotal,RunningValue,RunningOpeningQuantity,RunningOpeningValue,BranchId)

SELECT distinct 'A'SerialNo, itemNo ,'1900-01-01' StartDateTime,'1900-01-01' InvoiceDateTime, 0 StartingQuantity, 0 StartingAmount,
0 VendorID, 
sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost,0TransID,  'Opening'TransType,0 VATRate
,0 SD,'-'BENumber,'Opening'Remarks,sum(isnull(StockQuantity,0)), sum(isnull(p.StockValue,0)) UnitCost,sum(isnull(StockQuantity,0)) Quantity
, sum(isnull(p.StockValue,0)) UnitCost, BranchId
FROM ProductStocks p  WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_1','VAT6_1_And_6_2'))
and p.ItemNo not in (select ItemNo from VAT6_1_Permanent_Branch where transType = 'Opening')
@itemCondition

group by ItemNo,branchId
";

            if (flag == ProcessConfig.Permanent_Branch)
            {
                return permanent_BranchOpening;
            }
            else if (flag == ProcessConfig.Permanent)
            {
                return parmanentOpening;
            }

            return "";
        }

        public string Get6_2OpeningQuery(string flag)
        {
            string parmanentOpening = @"

Insert into VAT6_2_Permanent(
[SerialNo],[StartDateTime]
      ,[StartingQuantity],[StartingAmount]
      ,[TransID]
      ,[TransType] ,[Quantity]
      ,[SD],[UnitCost]    ,[Remarks] ,[ItemNo] 
   ,[UserId]   ,[BranchId]  ,[CustomerID]
      ,[ProductDesc]
,RunningOpeningQuantityFinal
,RunningOpeningValueFinal
,UnitRate
,AdjustmentValue
      )


SELECT distinct 'A'SerialNo, '1900-01-01' StartDateTime, 0 StartingQuantity, 0 StartingAmount,
0 TransID, 'Opening' TransType,
sum(isnull(p.StockQuantity,0)) Quantity,0 SD, sum(isnull(p.StockValue,0)) UnitCost, 'Opening'Remarks, pd.ItemNo
, @UserID
,0 BranchId, 0 CustomerID,pd.ProductName,sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost, sum(isnull(p.StockValue,0))/(case when sum(isnull(StockQuantity,0)) =0 then 1 else sum(isnull(StockQuantity,0)) end) UnitRate,0

FROM ProductStocks p  left outer join Products pd on pd.ItemNo = p.ItemNo
WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_2','VAT6_1_And_6_2'))
and p.ItemNo not in (select ItemNo from VAT6_2_Permanent where transType = 'Opening')
@itemCondition
group by pd.ItemNo,pd.ProductName
";

            string permanent_BranchOpening = @"

Insert into VAT6_2_Permanent_Branch(
[SerialNo]
,[StartDateTime]
,[StartingQuantity]
,[StartingAmount]
,[TransID]
,[TransType] 
,[Quantity]
,[SD]
,[UnitCost]   
,[Remarks] 
,[ItemNo] 
,[UserId]   
,[BranchId]  
,[CustomerID]
,[ProductDesc]
,RunningOpeningQuantityFinal
,RunningOpeningValueFinal
,UnitRate

      )


SELECT distinct 'A'SerialNo, '1900-01-01' StartDateTime, 0 StartingQuantity, 0 StartingAmount,
0 TransID, 'Opening' TransType,
sum(isnull(p.StockQuantity,0)) Quantity,0 SD, sum(isnull(p.StockValue,0)) UnitCost, 'Opening'Remarks, p.ItemNo
, @UserID
,p.BranchId, 0 CustomerID,pd.ProductName,sum(isnull(StockQuantity,0)) Quantity, sum(isnull(p.StockValue,0)) UnitCost, sum(isnull(p.StockValue,0))/(case when sum(isnull(StockQuantity,0)) =0 then 1 else sum(isnull(StockQuantity,0)) end) UnitRate

FROM ProductStocks p  left outer join Products pd on pd.ItemNo = p.ItemNo
WHERE 
p.ItemNo  in(select ItemNo from Products where ReportType in ('VAT6_2','VAT6_1_And_6_2'))
and p.ItemNo not in (select ItemNo from VAT6_2_Permanent_Branch where transType = 'Opening')
@itemCondition
group by p.ItemNo,pd.ProductName,p.BranchId

";

            if (flag == ProcessConfig.Permanent_Branch)
            {
                return permanent_BranchOpening;
            }
            else if (flag == ProcessConfig.Permanent)
            {
                return parmanentOpening;
            }

            return "";
        }

        public string GetInsertQuery_Backup28082023(string flag)
        {
            string parmanentOpening = @"

insert into VAT6_1_Permanent(
[SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
	  ,PeriodId
	  )

SELECT 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,0 [AvgRate]
      ,[RunningTotal]
	  ,@PeriodId
  FROM VAT6_1
  where UserId = @UserId @itemCondition1
  order by ItemNo,StartDateTime, SerialNo,TransID
";

            string permanent_BranchOpening = @"

insert into VAT6_1_Permanent_Branch(
[SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
	  ,PeriodId
	  )

SELECT 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,0 [AvgRate]
      ,[RunningTotal]
	  ,FORMAT(StartDateTime,'MMyyyy') PeriodId
  FROM VAT6_1
  where UserId = @UserId @itemCondition1
  order by ItemNo,StartDateTime, SerialNo
";

            if (flag == ProcessConfig.Permanent_Branch)
            {
                return permanent_BranchOpening;
            }
            else if (flag == ProcessConfig.Permanent)
            {
                return parmanentOpening;
            }

            return "";
        }

        public string Get6_1PartitionQuery_Backup28082023(string flag)
        {
            #region Partition Query

            string partitionQuery = @"


create table #TempProductAvgPrice(SL int identity(1,1),ItemNo varchar(50),AgvPriceDate datetime,FromDate datetime,PurchaseNo varchar(50)
,AvgPrice decimal(25,9))


insert into #TempProductAvgPrice(ItemNo,AgvPriceDate,FromDate,PurchaseNo,AvgPrice)
select  ItemNo
, AgvPriceDate
, FromDate
,PurchaseNo
,LAST_VALUE(avgprice) over (partition by ItemNo order by ItemNo,AgvPriceDate, inserttime)AvgPrice
from ProductAvgPrice
order by ItemNo,AgvPriceDate, inserttime


update @table set AvgRate = 0 where 1=1 @itemCondition2

--update @table set  AvgRate=ProductAvgPrice.AvgPrice,RunningTotal=0
--from ProductAvgPrice
--where ProductAvgPrice.ItemNo=@table.ItemNo
--and @table.TransID=ProductAvgPrice.PurchaseNo
--@itemCondition2
--
--update @table set  AvgRate=ProductAvgPrice.AvgPrice
--from ProductAvgPrice
--where ProductAvgPrice.ItemNo=@table.ItemNo
--and @table.StartDateTime >= isnull(ProductAvgPrice.FromDate, ProductAvgPrice.AgvPriceDate)
--and @table.StartDateTime< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
--and @table.TransType in('Opening','Issue')
--@itemCondition2

--update @table set AvgRate=a.AvgPrice
--from(
--select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
--right outer join (
--select distinct ItemNo,max(sl)SL from ProductAvgPrice where ItemNo in(select ItemNo from @table)
--group by ItemNo)as a
--on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
--where a.ItemNo=@table.ItemNo
----and @table.ItemNo in(select ItemNo from @table where (AvgRate is null or AvgRate = 0))
--and @table.AvgRate = 0 or @table.AvgRate is null
--@itemCondition2


update @table set  AvgRate=#TempProductAvgPrice.AvgPrice,RunningTotal=0
from #TempProductAvgPrice
where #TempProductAvgPrice.ItemNo=@table.ItemNo
and @table.TransID=#TempProductAvgPrice.PurchaseNo
@itemCondition2


update @table set  AvgRate=#TempProductAvgPrice.AvgPrice
from #TempProductAvgPrice
where #TempProductAvgPrice.ItemNo=@table.ItemNo
and @table.StartDateTime >= isnull(#TempProductAvgPrice.FromDate, #TempProductAvgPrice.AgvPriceDate)
and @table.StartDateTime< DATEADD(d,1, #TempProductAvgPrice.AgvPriceDate) 
and @table.TransType in('Opening','Issue')
@itemCondition2


update @table set AvgRate=a.AvgPrice
from(
select #TempProductAvgPrice.ItemNo,AvgPrice from #TempProductAvgPrice
right outer join (
select distinct ItemNo,max(sl)SL from #TempProductAvgPrice where ItemNo in(select ItemNo from @table)
group by ItemNo)as a
on a.ItemNo=#TempProductAvgPrice.ItemNo and a.Sl=#TempProductAvgPrice.sl) as a
where a.ItemNo=@table.ItemNo
--and @table.ItemNo in(select ItemNo from @table where (AvgRate is null or AvgRate = 0))
and @table.AvgRate = 0 or @table.AvgRate is null
@itemCondition2


create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100)
,Quantity decimal(25,9),UnitCost decimal(25,9) @field1) -- ,BranchId int

insert into #Temp(Id,ItemNo,TransType,Quantity,UnitCost @field2)
select Id,ItemNo,TransType,Quantity,UnitCost @field2 from @table
where 1=1 @itemCondition2
order by @field3 ItemNo,StartDateTime,SerialNo,TransID

update @table set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType @field2 ,Quantity,
SUM (case when TransType in('Issue') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY @field3 ItemNo ORDER BY SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=@table.Id @itemCondition3 --branch



Update @table set RunningValue = AvgRate*RunningTotal where 1=1  @itemCondition2
update @table set RunningTotal=Quantity, RunningValue=UnitCost where TransType in('opening') @itemCondition2

update @table set  RunningOpeningQuantity=0,RunningOpeningValue=0 where 1=1 @itemCondition2


drop table #Temp";

            #endregion



            if (flag != ProcessConfig.Permanent_Branch)
            {
                partitionQuery = partitionQuery
                    .Replace("@field1", "")
                    .Replace("@field2", "")
                    .Replace("@field3", "")
                    .Replace("@itemCondition3", "@itemCondition2");
            }

            if (flag == ProcessConfig.Permanent)
            {
                partitionQuery = partitionQuery.Replace("@table", "VAT6_1_Permanent");
            }
            else if (flag == ProcessConfig.Permanent_Branch)
            {
                partitionQuery = partitionQuery
                    .Replace("@field1", ",BranchId int")
                    .Replace("@field2", ",BranchId")
                    .Replace("@field3", "BranchId,")
                    .Replace("@itemCondition3", "and RT.BranchId = VAT6_1_Permanent_Branch.BranchId @itemCondition2")
                    .Replace("@table", "VAT6_1_Permanent_Branch");
            }
            else if (flag == ProcessConfig.Temp)
            {
                partitionQuery = partitionQuery.Replace("@table", "VAT6_1");
                partitionQuery = partitionQuery.Replace("@itemCondition2", "and VAT6_1.UserId = @UserId");

            }

            return partitionQuery;
        }

        public string Get6_2PartitionQuery(string flag)
        {
            #region Partition Query

            string partitionQuery = @"

create table #NBRPrive(id int identity(1,1),ItemNo varchar(100) ,CustomerId varchar(100),Rate decimal(18,6), EffectDate datetime,ToDate datetime, ReferenceNo varchar(200))
create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100),Quantity decimal(18,6),TotalCost decimal(18,6), StartDatetime datetime
, SerialNo varchar(10))

update VAT6_2 set CustomerID=ReceiveHeaders.CustomerID
from ReceiveHeaders
where ReceiveHeaders.ReceiveNo=VAT6_2.TransID
@itemCondition1

insert into #NBRPrive ---(ItemNo, CustomerId, Rate, EffectDate, ToDate, ReferenceNo)
select itemNo, '' CustomerId ,ISNULL(NBRPrice,0) NBRPrice, '1900/01/01'EffectDate ,null ToDate,null from products
where ItemNo in(select distinct Itemno from VAT6_2 where 1=1 @itemCondition1) 

insert into #NBRPrive
select FinishItemNo,customerId, ISNULL(NBRPrice,0) NBRPrice,  EffectDate EffectDate ,null ToDate,ReferenceNo from BOMs
where FinishItemNo in(select distinct Itemno from VAT6_2 where 1=1 @itemCondition1 )  and Post = 'Y'
order by EffectDate

update #NBRPrive set  ToDate=null where 1=1 @itemCondition2

update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY Customerid,ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where customerid>0
)RT
where RT.Id=#NBRPrive.Id  @itemCondition2

update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where isnull(nullif(customerid,''),0)<=0 
)RT
where RT.Id=#NBRPrive.Id and isnull(nullif(customerid,''),0)<=0  @itemCondition2

update #NBRPrive set  ToDate='2199/12/31' where ToDate is null @itemCondition2

delete from VAT6_2 where  VAT6_2.TransType='Opening' @itemCondition1

insert into #Temp(Id,ItemNo,TransType,Quantity,TotalCost,StartDateTime,SerialNo)
select Id,ItemNo,TransType,Quantity,UnitCost,StartDateTime,SerialNo from VAT6_2 
where 1=1 and VAT6_2.UserId = @UserId @itemCondition1
order by ItemNo,StartDateTime,SerialNo,Id





update VAT6_2 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY  ItemNo,StartDateTime,SerialNo,SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_2.Id @itemCondition1


update VAT6_2 set  RunningTotalValue=RT.RunningTotalCost
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*TotalCost else TotalCost end ) 
OVER (PARTITION BY ItemNo ORDER BY ItemNo,StartDateTime,SerialNo,SL) AS RunningTotalCost
FROM #Temp)RT
where RT.Id=VAT6_2.Id @itemCondition1

update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.CustomerID=#NBRPrive.CustomerId
@itemCondition1

----######################----------------
 update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.CustomerID=0
----######################----------------


update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and nullif( VAT6_2.CustomerID,'') is null
@itemCondition1

update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.CustomerID>0
@itemCondition1

update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.CustomerID=#NBRPrive.CustomerId
@itemCondition1


update VAT6_2 set   RunningTotalValueFinal= DeclaredPrice*RunningTotal where 1=1 @itemCondition1

select * from #NBRPrive order by ItemNo,CustomerId,EffectDate
select * from #Temp order by sl 

update VAT6_2 set AdjustmentValue=0 where 1=1 @itemCondition1
update VAT6_2 set AdjustmentValue=   (DeclaredPrice-UnitRate)*Quantity where 1=1 @itemCondition1
 

 
delete from  #Temp
delete from   #NBRPrive

DBCC CHECKIDENT ('#Temp', RESEED, 0);
DBCC CHECKIDENT ('#NBRPrive', RESEED, 0);



insert into VAT6_2_Permanent(
[SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]  ,[Address1] ,[Address2]
      ,[Address3] ,[VATRegistrationNo]
      ,[ProductName] ,[ProductCode]
      ,[UOM],[HSCodeNo]
      ,[Quantity] ,[VATRate]   ,[SD]   ,[UnitCost]
      ,[Remarks]   ,[CreatedDateTime]   ,[UnitRate]   ,[ItemNo]   ,[AdjustmentValue]
      ,[UserId]   ,[BranchId]    ,[CustomerID]  ,[ProductDesc]    ,[ClosingRate]    ,[DeclaredPrice]    ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]
	  ,PeriodId
	  )

SELECT [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,[UserId]
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]
	  ,@PeriodId
  FROM VAT6_2 
where UserId = @UserId @itemCondition1
 order by ItemNo,StartDateTime,SerialNo


--create table #NBRPrive(id int identity(1,1),ItemNo varchar(100) ,CustomerId varchar(100),Rate decimal(18,6), EffectDate datetime,ToDate datetime)
--create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100),Quantity decimal(18,6),TotalCost decimal(18,6))

update VAT6_2_Permanent set CustomerID=ReceiveHeaders.CustomerID
from ReceiveHeaders
where ReceiveHeaders.ReceiveNo=VAT6_2_Permanent.TransID @itemCondition3

insert into #NBRPrive
select itemNo, '' CustomerId ,
(
case 
when NBRPrice = 0 then ( case when OpeningBalance = 0 then 0 else OpeningTotalCost/OpeningBalance end) else ISNULL(NBRPrice,0) 
end
) NBRPrice, '1900/01/01'EffectDate ,null ToDate, null from products
where ItemNo in(select distinct Itemno from VAT6_2_Permanent where 1=1 @itemCondition3) 

insert into #NBRPrive
select FinishItemNo,customerId, ISNULL(NBRPrice,0) NBRPrice,  EffectDate EffectDate ,null ToDate, ReferenceNo from BOMs
where FinishItemNo in(select distinct Itemno from VAT6_2_Permanent where 1=1 @itemCondition3) and Post = 'Y'
order by EffectDate

update #NBRPrive set  ToDate=null where 1=1 @itemCondition2


update #NBRPrive set  ToDate=RT.RunningTotal
from ( SELECT id,Customerid, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY Customerid,ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where customerid>0 
)RT
where RT.Id=#NBRPrive.Id  and  RT.Customerid=#NBRPrive.Customerid 
and ToDate is null
@itemCondition2

update #NBRPrive set  ToDate=RT.RunningTotal
from (SELECT id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where isnull(nullif(customerid,''),0)<=0 
)RT
where RT.Id=#NBRPrive.Id  
and isnull(nullif(customerid,''),0)<=0
and ToDate is null
@itemCondition2


update #NBRPrive set  ToDate='2199/12/31' where ToDate is null @itemCondition2

insert into #Temp(Id,ItemNo,TransType,Quantity,TotalCost,StartDateTime,SerialNo)
select Id,ItemNo,TransType,Quantity,UnitCost,StartDateTime,SerialNo from VAT6_2_Permanent 
where 1=1 @itemCondition3
order by ItemNo,StartDateTime,SerialNo,Id

update VAT6_2_Permanent set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY  ItemNo,StartDateTime,SerialNo,SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_2_Permanent.Id
@itemCondition3

update VAT6_2_Permanent set  RunningTotalValue=RT.RunningTotalCost
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*TotalCost else TotalCost end ) 
OVER (PARTITION BY ItemNo ORDER BY ItemNo,StartDateTime,SerialNo,SL) AS RunningTotalCost
FROM #Temp)RT
where RT.Id=VAT6_2_Permanent.Id
@itemCondition3

update VAT6_2_Permanent set DeclaredPrice =0

update VAT6_2_Permanent set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2_Permanent.ItemNo
and VAT6_2_Permanent.StartDateTime >=#NBRPrive.EffectDate and VAT6_2_Permanent.StartDateTime<#NBRPrive.ToDate
and VAT6_2_Permanent.CustomerID=#NBRPrive.CustomerId
and isnull(VAT6_2_Permanent.DeclaredPrice,0)=0
@itemCondition3


declare @refNo varchar(200)  = (select SettingValue from Settings
where SettingGroup = 'VAT6_2' and SettingName = 'DefaultRef')

if @refNo != 'NA'
begin
	update VAT6_2_Permanent set DeclaredPrice =NBRPrive.Rate
    from (	
		SELECT id, ItemNo,ReferenceNo,Rate,EffectDate
		,LEAD(EffectDate,1,'2199-12-31 00:00:00.000') 
		OVER (PARTITION BY ItemNo,ReferenceNo ORDER BY id) AS ToDate
		FROM #NBRPrive
		where isnull(nullif(customerid,''),0)<=0 
	)NBRPrive
    where NBRPrive.ItemNo=VAT6_2_Permanent.ItemNo
    and VAT6_2_Permanent.StartDateTime >=NBRPrive.EffectDate and VAT6_2_Permanent.StartDateTime<NBRPrive.ToDate
    and isnull(VAT6_2_Permanent.DeclaredPrice,0)=0
    and NBRPrive.ReferenceNo=@refNo
    @itemCondition3
end

update VAT6_2_Permanent set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2_Permanent.ItemNo
and VAT6_2_Permanent.StartDateTime >=#NBRPrive.EffectDate and VAT6_2_Permanent.StartDateTime<#NBRPrive.ToDate
and isnull(VAT6_2_Permanent.DeclaredPrice,0)=0
@itemCondition3

update VAT6_2_Permanent set AdjustmentValue=0 where 1=1 @itemCondition3
update VAT6_2_Permanent set   RunningTotalValueFinal= DeclaredPrice*RunningTotal where 1=1 @itemCondition3

update VAT6_2_Permanent set AdjustmentValue=   RunningTotalValue-RunningTotalValueFinal where 1=1 @itemCondition3

drop table #Temp
drop table #NBRPrive";

            #endregion

            #region Partition Query Branch

            string partitionQueryBranch =
                @"
create table #NBRPrive(id int identity(1,1),ItemNo varchar(100) ,CustomerId varchar(100),Rate decimal(18,6), EffectDate datetime,ToDate datetime, BranchId int, ReferenceNo varchar(200))
create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100),Quantity decimal(18,6),TotalCost decimal(18,6),BranchId int, StartDatetime datetime
, SerialNo varchar(10))

update VAT6_2_Permanent_Branch set CustomerID=ReceiveHeaders.CustomerID
from ReceiveHeaders
where ReceiveHeaders.ReceiveNo=VAT6_2_Permanent_Branch.TransID @itemCondition3

insert into #NBRPrive
select itemNo, '' CustomerId ,
(
case 
when NBRPrice = 0 then ( case when OpeningBalance = 0 then 0 else OpeningTotalCost/OpeningBalance end) else ISNULL(NBRPrice,0) 
end
) NBRPrice, '1900/01/01'EffectDate ,null,BranchId ToDate, null from products
where ItemNo in(select distinct Itemno from VAT6_2_Permanent_Branch where 1=1 @itemCondition3) 

insert into #NBRPrive
select FinishItemNo,customerId, ISNULL(NBRPrice,0) NBRPrice,  EffectDate EffectDate ,null ToDate,BranchId,ReferenceNo from BOMs
where FinishItemNo in(select distinct Itemno from VAT6_2_Permanent_Branch where 1=1 @itemCondition3) and Post = 'Y'
order by EffectDate

update #NBRPrive set  ToDate=null where 1=1 @itemCondition2

----######################----------------
update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT Customerid,id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY BranchId,Customerid,ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where customerid>0
)RT
where RT.Id=#NBRPrive.Id  and  RT.Customerid=#NBRPrive.Customerid 
and ToDate is null  @itemCondition2

update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY BranchId,ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where isnull(nullif(customerid,''),0)<=0
)RT
where RT.Id=#NBRPrive.Id  
and ToDate is null and isnull(nullif(customerid,''),0)<=0  @itemCondition2
----######################----------------

update #NBRPrive set  ToDate='2199/12/31' where ToDate is null @itemCondition2

insert into #Temp(Id,ItemNo,TransType,Quantity,TotalCost,BranchId,StartDateTime,SerialNo)
select Id,ItemNo,TransType,Quantity,UnitCost,BranchId,StartDateTime,SerialNo from VAT6_2_Permanent_Branch 
where 1=1 @itemCondition3
order by BranchId,ItemNo,StartDateTime,SerialNo


update VAT6_2_Permanent_Branch set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,BranchId,
SUM (case when TransType in('Sale') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY BranchId,ItemNo ORDER BY  ItemNo,StartDateTime,SerialNo,SL) AS RunningTotal
FROM #Temp)RT
where 
RT.Id=VAT6_2_Permanent_Branch.Id
and RT.BranchId=VAT6_2_Permanent_Branch.BranchId
@itemCondition3

update VAT6_2_Permanent_Branch set  RunningTotalValue=RT.RunningTotalCost
from (SELECT id,SL, ItemNo, TransType ,Quantity,BranchId,
SUM (case when TransType in('Sale') then -1*TotalCost else TotalCost end ) 
OVER (PARTITION BY BranchId,ItemNo ORDER BY ItemNo,StartDateTime,SerialNo,SL) AS RunningTotalCost
FROM #Temp)RT
where 
RT.Id=VAT6_2_Permanent_Branch.Id
and RT.BranchId=VAT6_2_Permanent_Branch.BranchId
@itemCondition3

update VAT6_2_Permanent_Branch set DeclaredPrice =0

update VAT6_2_Permanent_Branch set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2_Permanent_Branch.ItemNo
and VAT6_2_Permanent_Branch.StartDateTime >=#NBRPrive.EffectDate and VAT6_2_Permanent_Branch.StartDateTime<#NBRPrive.ToDate
and VAT6_2_Permanent_Branch.CustomerID=#NBRPrive.CustomerId
and isnull(VAT6_2_Permanent_Branch.DeclaredPrice,0)=0
@itemCondition3


declare @refNo varchar(200)  = (select SettingValue from Settings
where SettingGroup = 'VAT6_2' and SettingName = 'DefaultRef')

if @refNo != 'NA'
begin
	update VAT6_2_Permanent set DeclaredPrice =NBRPrive.Rate
    from (	
		SELECT id, ItemNo,ReferenceNo,Rate,EffectDate
		,LEAD(EffectDate,1,'2199-12-31 00:00:00.000') 
		OVER (PARTITION BY ItemNo,ReferenceNo ORDER BY id) AS ToDate
		FROM #NBRPrive
		where isnull(nullif(customerid,''),0)<=0 
	)NBRPrive
    where NBRPrive.ItemNo=VAT6_2_Permanent.ItemNo
    and VAT6_2_Permanent.StartDateTime >=NBRPrive.EffectDate and VAT6_2_Permanent.StartDateTime<NBRPrive.ToDate
    and isnull(VAT6_2_Permanent.DeclaredPrice,0)=0
    and NBRPrive.ReferenceNo=@refNo
    @itemCondition3
end

update VAT6_2_Permanent_Branch set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2_Permanent_Branch.ItemNo
and VAT6_2_Permanent_Branch.StartDateTime >=#NBRPrive.EffectDate and VAT6_2_Permanent_Branch.StartDateTime<#NBRPrive.ToDate
and isnull(VAT6_2_Permanent_Branch.DeclaredPrice,0)=0
@itemCondition3



update VAT6_2_Permanent_Branch set  RunningOpeningQuantityFinal=RT.RunningTotalV
from ( SELECT  Id,BranchId,
LAG(RunningTotal) 
OVER (PARTITION BY BranchId,ItemNo ORDER BY  BranchId, itemno,StartDateTime,SerialNo) AS RunningTotalV
FROM VAT6_2_Permanent_Branch
)RT
where 
RT.Id=VAT6_2_Permanent_Branch.Id
and RT.BranchId=VAT6_2_Permanent_Branch.BranchId
@itemCondition3

 update VAT6_2_Permanent_Branch set  RunningOpeningValueFinal=RT.RunningTotalV
from ( SELECT  Id,BranchId,
LAG(RunningTotalValueFinal) 
OVER (PARTITION BY BranchId,ItemNo ORDER BY BranchId, itemno,StartDateTime,SerialNo) AS RunningTotalV
FROM VAT6_2_Permanent_Branch
)RT
where 
RT.Id=VAT6_2_Permanent_Branch.Id
and RT.BranchId=VAT6_2_Permanent_Branch.BranchId
@itemCondition3


update VAT6_2_Permanent_Branch set   RunningTotalValueFinal= DeclaredPrice*RunningTotal where 1=1 @itemCondition3
update VAT6_2_Permanent_Branch set AdjustmentValue=0 where 1=1 @itemCondition3
update VAT6_2_Permanent_Branch set AdjustmentValue=   RunningTotalValue-RunningTotalValueFinal where 1=1 @itemCondition3


drop table #Temp
drop table #NBRPrive
";

            #endregion

            #region Temp

            string partitionQueryTemp = @"

create table #NBRPrive(id int identity(1,1),ItemNo varchar(100) ,CustomerId varchar(100),Rate decimal(18,6), EffectDate datetime,ToDate datetime, ReferenceNo varchar(200))
create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100),Quantity decimal(18,6),TotalCost decimal(18,6), StartDatetime datetime
, SerialNo varchar(10))

update VAT6_2 set CustomerID=ReceiveHeaders.CustomerID
from ReceiveHeaders
where ReceiveHeaders.ReceiveNo=VAT6_2.TransID and VAT6_2.UserId = @UserId

insert into #NBRPrive
select itemNo, '' CustomerId ,
(
case 
when NBRPrice = 0 then ( case when OpeningBalance = 0 then 0 else OpeningTotalCost/OpeningBalance end) else ISNULL(NBRPrice,0) 
end
) NBRPrice, '1900/01/01'EffectDate ,null ToDate, null from products
where ItemNo in(select distinct Itemno from VAT6_2 where VAT6_2.UserId = @UserId)

insert into #NBRPrive
select FinishItemNo,customerId, ISNULL(NBRPrice,0) NBRPrice,  EffectDate EffectDate ,null ToDate,ReferenceNo from BOMs
where FinishItemNo in(select distinct Itemno from VAT6_2 where VAT6_2.UserId = @UserId) and Post = 'Y'
order by EffectDate

update #NBRPrive set  ToDate=null 

----######################----------------
update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT Customerid,id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY Customerid,ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where customerid>0
)RT
where RT.Id=#NBRPrive.Id  and  RT.Customerid=#NBRPrive.Customerid 
and ToDate is null

update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where isnull(nullif(customerid,''),0)<=0 
)RT
where RT.Id=#NBRPrive.Id  
and ToDate is null
and isnull(nullif(customerid,''),0)<=0
----######################----------------


update #NBRPrive set  ToDate='2199/12/31' where ToDate is null

insert into #Temp(Id,ItemNo,TransType,Quantity,TotalCost,StartDateTime,SerialNo)
select Id,ItemNo,TransType,Quantity,UnitCost,StartDateTime,SerialNo from VAT6_2 
where VAT6_2.UserId = @UserId
order by ItemNo,StartDateTime,SerialNo


update VAT6_2 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY  ItemNo,StartDateTime,SerialNo,SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_2.Id and VAT6_2.UserId = @UserId


update VAT6_2 set  RunningTotalValue=RT.RunningTotalCost
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*TotalCost else TotalCost end ) 
OVER (PARTITION BY ItemNo ORDER BY ItemNo,StartDateTime,SerialNo,SL) AS RunningTotalCost
FROM #Temp)RT
where RT.Id=VAT6_2.Id and VAT6_2.UserId = @UserId

update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.CustomerID=#NBRPrive.CustomerId
and VAT6_2.UserId = @UserId
and isnull(VAT6_2.DeclaredPrice,0)=0


declare @refNo varchar(200)  = (select SettingValue from Settings
where SettingGroup = 'VAT6_2' and SettingName = 'DefaultRef')

if @refNo != 'NA'
begin

	update VAT6_2_Permanent set DeclaredPrice =NBRPrive.Rate
    from (	
		SELECT id, ItemNo,ReferenceNo,Rate,EffectDate
		,LEAD(EffectDate,1,'2199-12-31 00:00:00.000') 
		OVER (PARTITION BY ItemNo,ReferenceNo ORDER BY id) AS ToDate
		FROM #NBRPrive
		where isnull(nullif(customerid,''),0)<=0 
	)NBRPrive
    where NBRPrive.ItemNo=VAT6_2_Permanent.ItemNo
    and VAT6_2_Permanent.StartDateTime >=NBRPrive.EffectDate and VAT6_2_Permanent.StartDateTime<NBRPrive.ToDate
    and isnull(VAT6_2_Permanent.DeclaredPrice,0)=0
    and NBRPrive.ReferenceNo=@refNo

end



update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.UserId = @UserId
and isnull(VAT6_2.DeclaredPrice,0)=0



drop table #Temp
drop table #NBRPrive
";

            #endregion


            if (flag == ProcessConfig.Permanent)
            {
                return partitionQuery;
            }
            else if (flag == ProcessConfig.Permanent_Branch)
            {
                return partitionQueryBranch;
            }
            else if (flag == ProcessConfig.Temp)
            {
                return partitionQueryTemp;

            }

            return "";
        }


        private string[] Save6_2_1UAT(VAT6_1ParamVM vm, bool TotalIncludeSD, bool IncludeOtherAMT, bool IssueFrom6_1,
            bool TollReceiveNotWIP, bool TollReceiveWithIssue, SqlConnection currConn, SqlTransaction transaction)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;

                CommonDAL commonDal = new CommonDAL();
                bool Permanent6_1 = false;//commonDal.settings("VAT6_2_1", "6_1Permanent", currConn, transaction) == "Y";

                sqlText = "";

                string deleteExisting = "delete from VAT6_2_1 where UserId = @UserId";

                #region Select Product


                #region Beginning

                sqlText = @"
                          
---DECLARE @StartDate DATETIME;
---DECLARE @EndDate DATETIME;
---DECLARE @post1 VARCHAR(200);
---DECLARE @post2 VARCHAR(200);
---DECLARE @ItemNo VARCHAR(200);
---SET @Itemno='46';
---SET @post1='Y';
---SET @post2='N';
---SET @StartDate='2014-04-01';
---SET @EndDate='2020-04-27';
---
---DECLARE @BranchId as int = 1;

DECLARE @maxDate as datetime;


declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

 

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

";

                #endregion

                #region Select Product


                sqlText += @"  


create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 and Products.ReportType in('VAT6_2_1')
 
";

                #region Conditions

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    string code = new CommonDAL().settingValue("CompanyCode", "Code");
                    if (code.ToLower() == "cp")
                    {
                        sqlText += @"  and Products.BranchId=@BranchId";
                    }
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";
                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @"  and  Products.ReportType in( 'VAT6_2_1')";


                sqlText += @"  ) as a";




                #endregion

                #endregion

                #region Transaction Data

                if (vm.Opening == false)
                {
                    #region Purchase Data

                    sqlText += @"
-------------------------------------------------- Start Purchase --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

";

                    #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                    sqlText += @"
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }

                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase', CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region Code To Code Transfer Purchase

                    sqlText += @"
union all

select 'A1',CONVERT(varchar, pd.TransferDate,23)ReceiveDate,
CONVERT(varchar, pd.TransferDate,23)InvoiceDateTime,
pt.TransferCode,'Purchase',
'-',
pd.ToItemNo
,isnull(pd.ReceivePrice,0),isnull(ToQuantity,0) ,
0,0,'CTCPurchase',
CONVERT(varchar, pd.TransferDate,23)ReceiveDate

from ProductTransfersDetails PD left outer join ProductTransfers pt on pd.ProductTransferId = pt.Id
where pd.TransferDate  >=@StartDate  and pd.TransferDate < DATEADD(d,1, @EndDate) 

and pd.ToItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('RawCTC')
AND pd.BranchId=@BranchId";

                    #endregion

                    #region 'TollReceive-WIP'

                    sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceive-WIP')
AND pd.BranchId=@BranchId

";

                    #endregion

                    if (vm.StockMovement == true)
                    {
                        sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where 1=1 
and pd.SubTotal>0
and pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceiveRaw')
AND pd.BranchId=@BranchId

";
                    }


                    #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'

                    sqlText += @"

 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)


select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.SDAmount,0)+@othervalue)";
                    }
                    else
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+@othervalue)";
                    }

                    if (IncludeOtherAMT)
                    {
                        sqlText = sqlText.Replace("@othervalue", "isnull(pd.OthersAmount,0)");
                    }
                    else
                    {
                        sqlText = sqlText.Replace("@othervalue", "0");
                    }


                    sqlText += @"
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region 'ClientRawReceive'

                    sqlText += @"

union all

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }

                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Client Raw Receive',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ClientRawReceive')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region 'PurchaseReturn','PurchaseDN'

                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,-1*isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @"
,-1*isnull(subtotal,0) ";
                    }

                    sqlText += @"

,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
AND pd.BranchId=@BranchId

-------------------------------------------------- End Purchase --------------------------------------------------
------------------------------------------------------------------------------------------------------------------

";

                    #endregion

                    #endregion



                    #region Stock Movement False/ Raw Sale, Raw Credit, Dispose Raw Sale

                    #region Raw Sale

                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  
AND BranchId=@BranchId
";

                    #endregion


                    if (vm.StockMovement == false)
                    //if (true)
                    {
                        #region Raw Credit

                        sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.InvoiceDateTime,ID.InvoiceDateTime,ID.SalesInvoiceNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(AVGPrice,0) ,-isnull(UOMQty,0) ,-0 VATAmount,-0 SDAmount,id.TransactionType,InvoiceDateTime
from SalesInvoiceDetails ID
where ID.InvoiceDateTime  >=@StartDate  and ID.InvoiceDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('RawCredit')
AND ID.BranchId=@BranchId

";

                        #endregion

                        #region Dispose Raw Sale

                        sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-'
, ItemNo
, isnull(UOMQty,0)*isnull(UOMPrice,0)
, case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end 
,'0'
, SDAmount,'Dispose Raw Sale',CreatedOn
from SalesInvoiceDetails
where 1=1 
and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeRaw')  
AND BranchId=@BranchId
";

                        #endregion
                    }

                    #endregion
                }

                #endregion

                if (vm.Is6_1Permanent == false)
                {
                    #region Openinng Data

                    sqlText += @"
-------------------------------------------------- Openinng Data --------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
SELECT distinct ItemNo, 0 Quantity, 0 Amount  FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'

";

                    #region Opening From Product False

                    if (vm.OpeningFromProduct == false)
                    {
                        if (vm.BranchId > 1)
                        {
                            sqlText += @"	
UNION ALL 	 
SELECT distinct ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
group by ItemNo
 
";
                        }
                        else
                        {
                            sqlText += @"		
UNION ALL  
SELECT distinct itemNo ItemNo, sum(isnull(OpeningBalance,0)) Quantity, sum(isnull(p.OpeningTotalCost,0)) Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
--AND BranchId='1'
group by ItemNo

";
                        }
                    }

                    #endregion

                    #region Purchase Data

                    #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }

                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                    #endregion


                    #region Code To Code Purchase

                    sqlText += @"
UNION ALL(
SELECT  distinct   ToItemNo, isnull(sum(ToQuantity),0)PurchaseQuantity
,isnull(sum(isnull(ReceivePrice,0)),0)SubTotal
FROM ProductTransfersDetails WHERE Post='Y' 
and TransactionType in('RawCTC') 
AND TransferDate>= '01-Jul-2019' and TransferDate < @StartDate     
AND ToItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ToItemNo
)
";

                    #endregion


                    #region 'TollReceive-WIP'

                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }

                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive-WIP') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                    if (vm.StockMovement == true)
                    {
                        sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                        if (TotalIncludeSD)
                        {
                            sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                        }
                        else
                        {
                            sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                        }

                        sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' and SubTotal>0
and TransactionType in('TollReceiveRaw') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                    }

                    #endregion

                    #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'

                    sqlText += @"

UNION ALL (
	SELECT distinct   ItemNo,isnull(sum(UOMQty),0) PurchaseQuantity 
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+@othervalue2+isnull(SDAmount,0)),0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+@othervalue2),0)),0)SubTotal ";
                    }


                    if (IncludeOtherAMT)
                    {
                        sqlText = sqlText.Replace("@othervalue2", "isnull(OthersAmount,0)");
                    }
                    else
                    {
                        sqlText = sqlText.Replace("@othervalue", "0");
                    }

                    sqlText += @"	
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 
AND BranchId=@BranchId
group by ItemNo
 )  


";

                    #endregion

                    #region 'ClientRawReceive'

                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }

                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('ClientRawReceive') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                    #endregion

                    #region 'PurchaseReturn','PurchaseDN'

                    sqlText += @"
UNION ALL 
(	SELECT   distinct   ItemNo,-isnull(sum(UOMQty),0) PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal     
FROM PurchaseInvoiceDetails 
WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate       AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                    #endregion

                    #endregion

                    #region VAT6.2.1 False / Receive, Issue, Dispose Raw Data

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive - WIP

                        sqlText += @"		
UNION ALL  
(SELECT distinct   ItemNo,  isnull(sum(UOMQty),0) Quantity,isnull(sum(isnull(SubTotal,0)),0)Amount 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime>= '01-July-2019' and ReceiveDateTime < @StartDate    
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by itemNo
 )   
";

                        #endregion

                        #region Issue Data

                        sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate     
AND TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                        #region Code To Code Transfer

                        sqlText += @"

UNION ALL 
(
SELECT  distinct   FromItemNo,-isnull(sum(FromQuantity),0) IssueQuantity,-isnull(sum(isnull(IssuePrice,0)),0)  
FROM ProductTransfersDetails WHERE Post='Y'   
AND TransferDate>= '01-July-2019' and TransferDate< @StartDate     
AND FromItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND TransactionType IN('RawCTC')
group by FromItemNo
) 
";

                        #endregion

                        #region Toll Issue

                        if (IssueFrom6_1)
                        {
                            #region Issue From 6.1

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'  
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
 AND TransactionType IN ('TollIssue')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";

                            #endregion
                        }
                        else
                        {


                            if (TollReceiveWithIssue)
                            {
                                #region Toll Receive With Issue

                                sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";

                                #endregion
                            }
                        }

                        #endregion

                        #region Toll Finish Receive

                        sqlText += @" 
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   and SubTotal>0
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
AND TransactionType IN ('TollFinishReceive')  
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                        #endregion

                        #region Issue Return, Receive Return

                        sqlText += @" 

UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'  
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)   
";

                        #endregion

                        #endregion

                        #region Dispose Raw Data

                        sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)   
FROM DisposeRawDetails WHERE Post='Y'  
and ISNULL(IsSaleable,'N')='N' 
AND TransactionDateTime>= '01-July-2019' and TransactionDateTime< @StartDate     
AND TransactionType IN ('Other')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                        #endregion
                    }

                    #endregion

                    #region Stock Movement False / Sales

                    #region Raw Sale

                    sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawSale')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                    if (vm.StockMovement == false)
                    //if (true)
                    {
                        #region Raw Credit

                        sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawCredit')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                        #endregion


                        #region Raw Sale

                        sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(UOMPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'    
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('DisposeRaw')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                        #endregion
                    }

                    #endregion

                    sqlText += @"
) AS a GROUP BY a.ItemNo
";

                    #endregion


                }
                #region Insert, Update and Select Data

                sqlText += @"

insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo



update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId



update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId


---- update #VAT_16 set UnitCost= ProductAvgPrice.avgprice*Quantity, StartingAmount= ProductAvgPrice.avgprice*Quantity
---- from (select distinct ProductAvgPrice.itemno, avgprice from ProductAvgPrice, 
---- ( 
---- select distinct itemno, max(AgvPriceDate) AgvPriceDate,max(SL)SL from ProductAvgPrice
---- where AgvPriceDate < @StartDate and TransactionType in('purchase','opening')  group by ItemNo)t
---- where t.SL = ProductAvgPrice.SL
---- and TransactionType in('purchase','opening')
---- )ProductAvgPrice where ProductAvgPrice.ItemNo=#VAT_16.ItemNo and #VAT_16.TransType = 'Opening'



--select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
--#VAT_16.StartingQuantity,#VAT_16.StartingAmount
--,TransID,#VAT_16.TransType,
--isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
--isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
--isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
--p.ProductName,p.ProductCode ProductCodeA,p.UOM,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
--,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,#VAT_16.ItemNo,
--#VAT_16.CreateDateTime
--from #VAT_16 left outer join
--Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
--Products P on #VAT_16.ItemNo=p.ItemNo
--order by CreateDateTime ASC,#VAT_16.SerialNo ASC 
--order by #VAT_16.SerialNo ASC ,CreateDateTime ASC

select * from #VAT_16


--DROP TABLE #VAT_16
--DROP TABLE #VATTemp_16
--DROP TABLE #ProductReceive

                ";

                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(deleteExisting, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                objCommVAT16.Parameters.AddWithValueAndParamCheck("@UserId", vm.UserId);

                if (vm.SkipOpening)
                {
                    objCommVAT16.CommandText = sqlText;
                }
                else
                {
                    objCommVAT16.ExecuteNonQuery();
                }

                objCommVAT16.CommandText = sqlText;

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }


                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", vm.UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = vm.UserName;
                }

                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed

                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = vm.Post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = vm.Post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

                DataTable VAT6_2_1Data = dataSet.Tables[0];

                VAT6_2_1Data.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                VAT6_2_1Data.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });

                if (vm.SkipOpening)
                {
                    if (VAT6_2_1Data.Rows.Count > 0)
                    {
                        DataRow[] rows = VAT6_2_1Data.Select("TransType <> 'Opening'");

                        if (rows.Count() > 0)
                        {
                            VAT6_2_1Data = rows.CopyToDataTable();
                        }
                        else
                        {
                            VAT6_2_1Data.Clear();

                        }
                    }

                }


                string[] result = commonDal.BulkInsert("VAT6_2_1", VAT6_2_1Data, currConn, transaction);

                // update AvgPrice

                string avgPriceUpdate = @"

update VAT6_2_1 set  AvgRate=ProductAvgPrice.AvgPrice,RunningTotal=0
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_2_1.ItemNo
and VAT6_2_1.TransID=ProductAvgPrice.PurchaseNo
 and VAT6_2_1.UserId = @UserId

update VAT6_2_1 set  AvgRate=ProductAvgPrice.AvgPrice
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_2_1.ItemNo
and VAT6_2_1.StartDateTime >= ProductAvgPrice.FromDate 
and VAT6_2_1.StartDateTime< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
and VAT6_2_1.TransType in('Opening','Issue')
 and VAT6_2_1.UserId = @UserId

update VAT6_2_1 set AvgRate=a.AvgPrice
from(
select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
right outer join (
select distinct ItemNo,max(sl)SL from ProductAvgPrice 
where 
ItemNo in(select ItemNo from VAT6_2_1 
where AvgRate is null and UserId = @UserId)

group by ItemNo)as a
on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
where a.ItemNo=VAT6_2_1.ItemNo
and  VAT6_2_1.ItemNo in(select ItemNo from VAT6_2_1 
where AvgRate is null and UserId = @UserId)
and VAT6_2_1.UserId = @UserId


create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100)
,Quantity decimal(25,9),UnitCost decimal(25,9),)
insert into #Temp(Id,ItemNo,TransType,Quantity,UnitCost)
select Id,ItemNo,TransType,Quantity,UnitCost from VAT6_2_1
where UserId = @UserId 
order by ItemNo,StartDateTime,SerialNo

update VAT6_2_1 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Issue') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_2_1.Id and VAT6_2_1.UserId = @UserId

update VAT6_2_1 set  RunningValue=RT.RunningValue
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Issue') then -1*UnitCost else UnitCost end ) 
OVER (PARTITION BY ItemNo ORDER BY SL) AS RunningValue
FROM #Temp)RT
where RT.Id=VAT6_2_1.Id and VAT6_2_1.UserId = @UserId
and VAT6_2_1.TransType not in('Opening')
 
 update VAT6_2_1 set RunningTotal=Quantity, RunningValue=UnitCost where TransType in('opening') and UserId = @UserId

update VAT6_2_1 set RunningOpeningQuantity = Quantity,RunningOpeningValue = UnitCost
where TransType = 'Opening' and RunningOpeningQuantity is null and RunningOpeningValue is null and UserId = @UserId


drop table #Temp


";
                string temp6_1Insert = @"
insert into VAT6_2_1(
[SerialNo],[ItemNo],[StartDateTime],[StartingQuantity],[StartingAmount],[VendorID],[SD]
,[VATRate],[Quantity],[UnitCost],[TransID],[TransType],[BENumber],[InvoiceDateTime]
,[Remarks],[CreateDateTime],[TransactionType],[BranchId],[UserId],[AvgRate]      ,[RunningTotal]
)
select 
[SerialNo],[ItemNo],[StartDateTime],[StartingQuantity],[StartingAmount],[VendorID],[SD]
,[VATRate],[Quantity],[UnitCost],[TransID],[TransType],[BENumber],[InvoiceDateTime]
,[Remarks],[CreateDateTime],[TransactionType],[BranchId],UserId,[AvgRate]     ,[RunningTotal]
from VAT6_1Temp

where 1=1
and UserId = @UserId

";
                if (!Permanent6_1)
                {
                    temp6_1Insert = "";
                }

                avgPriceUpdate = temp6_1Insert + "  " + avgPriceUpdate;

                objCommVAT16 = new SqlCommand(avgPriceUpdate, currConn, transaction);
                objCommVAT16.Parameters.AddWithValueAndParamCheck("@UserId", vm.UserId);
                objCommVAT16.ExecuteNonQuery();


                return result;

                #endregion
            }
            catch (Exception e)
            {
                throw e;
            }
        }


        private string[] Save6_1_FromPermanent_Backup28082023(VAT6_1ParamVM vm, bool TotalIncludeSD, bool IncludeOtherAMT, bool IssueFrom6_1,
            bool TollReceiveNotWIP, bool TollReceiveWithIssue, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;

                CommonDAL commonDal = new CommonDAL();
                bool Permanent6_1 = commonDal.settings("VAT6_1", "6_1Permanent", currConn, transaction, connVM) == "Y";

                #region SQL Text

                sqlText = "";


                #region Select Product


                sqlText += @"  




create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                #region Conditions
                if (vm.Is6_1Permanent)
                {
                    sqlText += @"  and Products.ReportType in('VAT6_1')";
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    string code = new CommonDAL().settingValue("CompanyCode", "Code");
                    if (code.ToLower() == "cp")
                    {
                        sqlText += @"  and Products.BranchId=@BranchId";
                    }
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                        #region Debugging

                        ////if (true)
                        ////{
                        ////    sqlText += @"  and ItemNo='73'";
                        ////}

                        #endregion
                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a";



                sqlText += @"

delete from VAT6_1 where UserId = @UserId


insert into VAT6_1(
[SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
,RunningValue
)

SELECT 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,@UserId
      ,[AvgRate]
      ,[RunningTotal]

,RunningValue

from   ( 

select * from VAT6_1_Permanent where
 TransType in  ('Opening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)

union all

select * from VAT6_1_Permanent where
 TransType not in  ('Opening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate and 
StartDateTime < DATEADD(d,1,@EndDate) 

 ) as a
order by ItemNo, StartDateTime, SerialNo


update VAT6_1 set  Quantity=a.ClosingQty
,UnitCost=a.ClosingValue
, RunningTotal=a.ClosingQty
,RunningValue=a.ClosingValue
, StartDateTime = @StartDate
, AvgRate = a.AvgRate
from  (
select VAT6_1_Permanent.Id,VAT6_1_Permanent.ItemNo,RunningTotal ClosingQty,RunningValue ClosingValue, AvgRate

from VAT6_1_Permanent
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_1_Permanent
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive)
group by ItemNo) as a
on   a.Id=VAT6_1_Permanent.ID) as a
where a.ItemNo=VAT6_1.ItemNo and VAT6_1.TransType='Opening' and UserId = @UserId


update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice,RunningTotal=0
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.TransID=ProductAvgPrice.PurchaseNo
 and VAT6_1.UserId = @UserId

update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.StartDateTime >= isnull(ProductAvgPrice.FromDate,ProductAvgPrice.AgvPriceDate) 
and VAT6_1.StartDateTime< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
and VAT6_1.TransType in('Opening','Issue')
 and VAT6_1.UserId = @UserId

update VAT6_1 set AvgRate=a.AvgPrice
from(
select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
right outer join (
select distinct ItemNo,max(sl)SL from ProductAvgPrice 
where 
ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
group by ItemNo)as a
on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
where a.ItemNo=VAT6_1.ItemNo
and  VAT6_1.ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
and VAT6_1.UserId = @UserId


create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100)
,Quantity decimal(25,9),UnitCost decimal(25,9),)
insert into #Temp(Id,ItemNo,TransType,Quantity,UnitCost)
select Id,ItemNo,TransType,Quantity,UnitCost from VAT6_1
where UserId = @UserId 
order by ItemNo,StartDateTime,SerialNo


update VAT6_1 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Issue') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_1.Id and VAT6_1.UserId = @UserId

--update VAT6_1 set  RunningValue=RT.RunningValue
--from (SELECT id,SL, ItemNo, TransType ,Quantity,
--SUM (case when TransType in('Issue') then -1*UnitCost else UnitCost end ) 
--OVER (PARTITION BY ItemNo ORDER BY SL) AS RunningValue
--FROM #Temp)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId = @UserId
--and VAT6_1.TransType not in('Opening')

--Update VAT6_1 set RunningValue = AvgRate*RunningTotal where VAT6_1.UserId = @UserId

--update VAT6_1 set  RunningOpeningQuantity=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningTotal) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId
--
-- update VAT6_1 set  RunningOpeningValue=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningValue) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId


drop table #Temp

update VAT6_1 set RunningOpeningQuantity = Quantity,RunningOpeningValue = UnitCost
where TransType = 'Opening' and RunningOpeningQuantity is null and RunningOpeningValue is null and UserId = @UserId

select * from VAT6_1 where UserId = @UserId
order by ItemNo, StartDateTime, SerialNo



";

                #endregion

                #endregion


                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                objCommVAT16.Parameters.AddWithValue("@UserId", vm.UserId);

                #region Parameter

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }




                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed

                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }



                #endregion Parameter

                objCommVAT16.ExecuteNonQuery();

                string[] result = { "success" };

                return result;

                #endregion
            }
            catch (Exception e)
            {
                throw e;
            }
        }


        private string[] Save6_1_FromPermanent_DayWise_Backup28082023(VAT6_1ParamVM vm, bool TotalIncludeSD, bool IncludeOtherAMT, bool IssueFrom6_1,
          bool TollReceiveNotWIP, bool TollReceiveWithIssue, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;


                CommonDAL commonDal = new CommonDAL();
                bool Permanent6_1 = commonDal.settings("VAT6_1", "6_1Permanent", currConn, transaction, connVM) == "Y";

                #region SQL Text

                sqlText = "";


                #region Select Product


                sqlText += @"  




create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                #region Conditions
                if (vm.Is6_1Permanent)
                {
                    sqlText += @"  and Products.ReportType in('VAT6_1')";
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    string code = new CommonDAL().settingValue("CompanyCode", "Code");
                    if (code.ToLower() == "cp")
                    {
                        sqlText += @"  and Products.BranchId=@BranchId";
                    }
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                        #region Debugging

                        ////if (true)
                        ////{
                        ////    sqlText += @"  and ItemNo='73'";
                        ////}

                        #endregion
                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a";



                sqlText += @"

delete from VAT6_1 where UserId = @UserId


insert into VAT6_1(
[SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
,RunningValue
)

SELECT 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,@UserId
      ,[AvgRate]
      ,[RunningTotal]

,RunningValue

from   ( 

select * from VAT6_1_Permanent_DayWise where
 TransType in  ('Opening','MonthOpening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)

union all

select * from VAT6_1_Permanent_DayWise where
 TransType not in ('Opening','MonthOpening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate and 
StartDateTime < DATEADD(d,1,@EndDate) 

 ) as a
order by ItemNo, StartDateTime, SerialNo


update VAT6_1 set  Quantity=a.ClosingQty
,UnitCost=a.ClosingValue
, RunningTotal=a.ClosingQty
,RunningValue=a.ClosingValue
, StartDateTime = @StartDate
, AvgRate = a.AvgRate
from  (
select VAT6_1_Permanent_DayWise.Id,VAT6_1_Permanent_DayWise.ItemNo,RunningTotal ClosingQty,RunningValue ClosingValue, AvgRate

from VAT6_1_Permanent_DayWise
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_1_Permanent_DayWise
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive)
group by ItemNo) as a
on   a.Id=VAT6_1_Permanent_DayWise.ID) as a
where a.ItemNo=VAT6_1.ItemNo and VAT6_1.TransType='Opening' and UserId = @UserId


update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice,RunningTotal=0
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.TransID=ProductAvgPrice.PurchaseNo
 and VAT6_1.UserId = @UserId

update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.StartDateTime >= isnull(ProductAvgPrice.FromDate,ProductAvgPrice.AgvPriceDate) 
and VAT6_1.StartDateTime< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
and VAT6_1.TransType in('Opening','Issue')
 and VAT6_1.UserId = @UserId

update VAT6_1 set AvgRate=a.AvgPrice
from(
select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
right outer join (
select distinct ItemNo,max(sl)SL from ProductAvgPrice 
where 
ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
group by ItemNo)as a
on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
where a.ItemNo=VAT6_1.ItemNo
and  VAT6_1.ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
and VAT6_1.UserId = @UserId


create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100)
,Quantity decimal(25,9),UnitCost decimal(25,9),)
insert into #Temp(Id,ItemNo,TransType,Quantity,UnitCost)
select Id,ItemNo,TransType,Quantity,UnitCost from VAT6_1
where UserId = @UserId 
order by ItemNo,StartDateTime,SerialNo


update VAT6_1 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Issue') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_1.Id and VAT6_1.UserId = @UserId

--update VAT6_1 set  RunningValue=RT.RunningValue
--from (SELECT id,SL, ItemNo, TransType ,Quantity,
--SUM (case when TransType in('Issue') then -1*UnitCost else UnitCost end ) 
--OVER (PARTITION BY ItemNo ORDER BY SL) AS RunningValue
--FROM #Temp)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId = @UserId
--and VAT6_1.TransType not in('Opening')

--Update VAT6_1 set RunningValue = AvgRate*RunningTotal where VAT6_1.UserId = @UserId

--update VAT6_1 set  RunningOpeningQuantity=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningTotal) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId
--
-- update VAT6_1 set  RunningOpeningValue=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningValue) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId


drop table #Temp

update VAT6_1 set RunningOpeningQuantity = Quantity,RunningOpeningValue = UnitCost
where TransType = 'Opening' and RunningOpeningQuantity is null and RunningOpeningValue is null and UserId = @UserId

select * from VAT6_1 where UserId = @UserId
order by ItemNo, StartDateTime, SerialNo



";

                #endregion

                #endregion


                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                objCommVAT16.Parameters.AddWithValue("@UserId", vm.UserId);

                #region Parameter

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }




                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed

                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }



                #endregion Parameter

                objCommVAT16.ExecuteNonQuery();

                string[] result = { "success" };

                return result;

                #endregion
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private string[] Save6_1_FromPermanent_Branch_Backup28082023(VAT6_1ParamVM vm, bool TotalIncludeSD, bool IncludeOtherAMT, bool IssueFrom6_1,
            bool TollReceiveNotWIP, bool TollReceiveWithIssue, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;

                CommonDAL commonDal = new CommonDAL();
                bool Permanent6_1 = commonDal.settings("VAT6_1", "6_1Permanent", currConn, transaction, connVM) == "Y";

                #region SQL Text

                sqlText = "";


                #region Select Product


                sqlText += @"  

create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                #region Conditions
                if (vm.Is6_1Permanent)
                {
                    sqlText += @"  and Products.ReportType in('VAT6_1')";
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    string code = new CommonDAL().settingValue("CompanyCode", "Code");
                    if (code.ToLower() == "cp")
                    {
                        sqlText += @"  and Products.BranchId=@BranchId";
                    }
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                        #region Debugging

                        ////if (true)
                        ////{
                        ////    sqlText += @"  and ItemNo='73'";
                        ////}

                        #endregion
                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a";



                sqlText += @"

delete from VAT6_1 where UserId = @UserId


insert into VAT6_1(
[SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
,RunningValue
)

SELECT 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,@UserId
      ,[AvgRate]
      ,[RunningTotal]

,RunningValue

from   ( 

select * from VAT6_1_Permanent_Branch where
 TransType in  ('Opening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)
and BranchId = @BranchId

union all

select * from VAT6_1_Permanent_Branch where
 TransType not in  ('Opening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate 
and StartDateTime < DATEADD(d,1,@EndDate) 
and BranchId = @BranchId
 ) as a
order by ItemNo, StartDateTime, SerialNo


update VAT6_1 set  Quantity=a.ClosingQty,UnitCost=a.ClosingValue, RunningTotal=a.ClosingQty,RunningValue=a.ClosingValue, StartDateTime = @StartDate,AvgRate=a.AvgRate
from  (
select VAT6_1_Permanent_Branch.Id,VAT6_1_Permanent_Branch.ItemNo,RunningTotal ClosingQty,RunningValue ClosingValue, AvgRate

from VAT6_1_Permanent_Branch
right outer join (
select distinct ItemNo,BranchId, MAX(Id)Id from VAT6_1_Permanent_Branch
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive) and BranchId = @BranchId
group by ItemNo,BranchId ) as a
on   a.Id=VAT6_1_Permanent_Branch.ID and a.BranchId=VAT6_1_Permanent_Branch.BranchId 
where VAT6_1_Permanent_Branch.BranchId=@BranchId
) as a
where a.ItemNo=VAT6_1.ItemNo and VAT6_1.TransType='Opening' and UserId = @UserId


update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice,RunningTotal=0
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.TransID=ProductAvgPrice.PurchaseNo
 and VAT6_1.UserId = @UserId

update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.StartDateTime >= isnull(ProductAvgPrice.FromDate,ProductAvgPrice.AgvPriceDate) 
and VAT6_1.StartDateTime< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
and VAT6_1.TransType in('Opening','Issue')
 and VAT6_1.UserId = @UserId

update VAT6_1 set AvgRate=a.AvgPrice
from(
select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
right outer join (
select distinct ItemNo,max(sl)SL from ProductAvgPrice 
where 
ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
group by ItemNo)as a
on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
where a.ItemNo=VAT6_1.ItemNo
and  VAT6_1.ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
and VAT6_1.UserId = @UserId


create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100)
,Quantity decimal(25,9),UnitCost decimal(25,9),BranchId int)
insert into #Temp(Id,ItemNo,TransType,Quantity,UnitCost)
select Id,ItemNo,TransType,Quantity,UnitCost from VAT6_1
where UserId = @UserId and BranchId=@BranchId
order by ItemNo,StartDateTime,SerialNo


update VAT6_1 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,BranchId,
SUM (case when TransType in('Issue') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY BranchId,ItemNo ORDER BY SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_1.Id 
and VAT6_1.UserId = @UserId


--update VAT6_1 set  RunningValue=RT.RunningValue
--from (SELECT id,SL, ItemNo, TransType ,Quantity,BranchId,
--SUM (case when TransType in('Issue') then -1*UnitCost else UnitCost end ) 
--OVER (PARTITION BY BranchId,ItemNo ORDER BY SL) AS RunningValue
--FROM #Temp)RT
--where RT.Id=VAT6_1.Id 
--and VAT6_1.UserId = @UserId
--and VAT6_1.TransType not in('Opening')

--Update VAT6_1 set RunningValue = AvgRate*RunningTotal where VAT6_1.UserId = @UserId

--update VAT6_1 set  RunningOpeningQuantity=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningTotal) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId
--
-- update VAT6_1 set  RunningOpeningValue=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningValue) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId


drop table #Temp

update VAT6_1 set RunningOpeningQuantity = Quantity,RunningOpeningValue = UnitCost
where TransType = 'Opening' and RunningOpeningQuantity is null and RunningOpeningValue is null and UserId = @UserId

select * from VAT6_1 where UserId = @UserId
order by ItemNo, StartDateTime, SerialNo



";

                #endregion

                #endregion


                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                objCommVAT16.Parameters.AddWithValue("@UserId", vm.UserId);
                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);


                #region Parameter



                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }




                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed

                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }



                #endregion Parameter

                objCommVAT16.ExecuteNonQuery();


                string[] result = { "success" };


                return result;

                #endregion
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private string[] Save6_1_FromPermanent_DayWise_Branch_Backup28082023(VAT6_1ParamVM vm, bool TotalIncludeSD, bool IncludeOtherAMT, bool IssueFrom6_1,
         bool TollReceiveNotWIP, bool TollReceiveWithIssue, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;

                CommonDAL commonDal = new CommonDAL();
                bool Permanent6_1 = commonDal.settings("VAT6_1", "6_1Permanent", currConn, transaction, connVM) == "Y";

                #region SQL Text

                sqlText = "";


                #region Select Product


                sqlText += @"  

create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                #region Conditions
                if (vm.Is6_1Permanent)
                {
                    sqlText += @"  and Products.ReportType in('VAT6_1')";
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    string code = new CommonDAL().settingValue("CompanyCode", "Code");
                    if (code.ToLower() == "cp")
                    {
                        sqlText += @"  and Products.BranchId=@BranchId";
                    }
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                        #region Debugging

                        ////if (true)
                        ////{
                        ////    sqlText += @"  and ItemNo='73'";
                        ////}

                        #endregion
                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a";



                sqlText += @"

delete from VAT6_1 where UserId = @UserId


insert into VAT6_1(
[SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
,RunningValue
)

SELECT 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,@UserId
      ,[AvgRate]
      ,[RunningTotal]

,RunningValue

from   ( 

select * from VAT6_1_Permanent_DayWise_Branch where
 TransType in  ('Opening','MonthOpening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)
and BranchId = @BranchId

union all

select * from VAT6_1_Permanent_DayWise_Branch where
 TransType not in  ('Opening','MonthOpening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate 
and StartDateTime < DATEADD(d,1,@EndDate) 
and BranchId = @BranchId
 ) as a
order by ItemNo, StartDateTime, SerialNo


update VAT6_1 set  Quantity=a.ClosingQty,UnitCost=a.ClosingValue, RunningTotal=a.ClosingQty,RunningValue=a.ClosingValue, StartDateTime = @StartDate,AvgRate=a.AvgRate
from  (
select VAT6_1_Permanent_DayWise_Branch.Id,VAT6_1_Permanent_DayWise_Branch.ItemNo,RunningTotal ClosingQty,RunningValue ClosingValue, AvgRate

from VAT6_1_Permanent_DayWise_Branch
right outer join (
select distinct ItemNo,BranchId, MAX(Id)Id from VAT6_1_Permanent_DayWise_Branch
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive) and BranchId = @BranchId
group by ItemNo,BranchId ) as a
on   a.Id=VAT6_1_Permanent_DayWise_Branch.ID and a.BranchId=VAT6_1_Permanent_DayWise_Branch.BranchId 
where VAT6_1_Permanent_DayWise_Branch.BranchId=@BranchId
) as a
where a.ItemNo=VAT6_1.ItemNo and VAT6_1.TransType='Opening' and UserId = @UserId


update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice,RunningTotal=0
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.TransID=ProductAvgPrice.PurchaseNo
 and VAT6_1.UserId = @UserId

update VAT6_1 set  AvgRate=ProductAvgPrice.AvgPrice
from ProductAvgPrice
where ProductAvgPrice.ItemNo=VAT6_1.ItemNo
and VAT6_1.StartDateTime >= isnull(ProductAvgPrice.FromDate,ProductAvgPrice.AgvPriceDate) 
and VAT6_1.StartDateTime< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
and VAT6_1.TransType in('Opening','Issue')
 and VAT6_1.UserId = @UserId

update VAT6_1 set AvgRate=a.AvgPrice
from(
select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
right outer join (
select distinct ItemNo,max(sl)SL from ProductAvgPrice 
where 
ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
group by ItemNo)as a
on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
where a.ItemNo=VAT6_1.ItemNo
and  VAT6_1.ItemNo in(select ItemNo from VAT6_1 
where AvgRate is null and UserId = @UserId)
and VAT6_1.UserId = @UserId


create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100)
,Quantity decimal(25,9),UnitCost decimal(25,9),BranchId int)
insert into #Temp(Id,ItemNo,TransType,Quantity,UnitCost)
select Id,ItemNo,TransType,Quantity,UnitCost from VAT6_1
where UserId = @UserId and BranchId=@BranchId
order by ItemNo,StartDateTime,SerialNo


update VAT6_1 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,BranchId,
SUM (case when TransType in('Issue') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY BranchId,ItemNo ORDER BY SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_1.Id 
and VAT6_1.UserId = @UserId


--update VAT6_1 set  RunningValue=RT.RunningValue
--from (SELECT id,SL, ItemNo, TransType ,Quantity,BranchId,
--SUM (case when TransType in('Issue') then -1*UnitCost else UnitCost end ) 
--OVER (PARTITION BY BranchId,ItemNo ORDER BY SL) AS RunningValue
--FROM #Temp)RT
--where RT.Id=VAT6_1.Id 
--and VAT6_1.UserId = @UserId
--and VAT6_1.TransType not in('Opening')

--Update VAT6_1 set RunningValue = AvgRate*RunningTotal where VAT6_1.UserId = @UserId

--update VAT6_1 set  RunningOpeningQuantity=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningTotal) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId
--
-- update VAT6_1 set  RunningOpeningValue=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningValue) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_1
--where  VAT6_1.UserId=@UserId
--)RT
--where RT.Id=VAT6_1.Id and VAT6_1.UserId=@UserId


drop table #Temp

update VAT6_1 set RunningOpeningQuantity = Quantity,RunningOpeningValue = UnitCost
where TransType = 'Opening' and RunningOpeningQuantity is null and RunningOpeningValue is null and UserId = @UserId

select * from VAT6_1 where UserId = @UserId
order by ItemNo, StartDateTime, SerialNo



";

                #endregion

                #endregion


                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                objCommVAT16.Parameters.AddWithValue("@UserId", vm.UserId);
                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);


                #region Parameter



                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }




                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed

                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }



                #endregion Parameter

                objCommVAT16.ExecuteNonQuery();


                string[] result = { "success" };


                return result;

                #endregion
            }
            catch (Exception e)
            {
                throw e;
            }
        }




        public DataSet VAT6_1_Permanent(VAT6_1ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT6_1");
            VATRegistersDAL _vatRegistersDAL = new VATRegistersDAL();
            #endregion

            #region Try

            try
            {
                #region Settings

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);
                bool IssueFrom6_1 = Convert.ToBoolean(_cDal.settings("Toll6_4", "IssueFrom6_1") == "Y" ? true : false);
                bool TotalIncludeSD = Convert.ToBoolean(_cDal.settings("VAT6_1", "TotalIncludeSD") == "Y" ? true : false);
                bool IncludeOtherAMT = _cDal.settings("VAT6_1", "IncludeOtherAMT") == "Y";
                bool TollReceiveNotWIP = Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP") == "Y" ? true : false);
                bool TollReceiveWithIssue = Convert.ToBoolean(_cDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);
                //bool ContractorFGProduction = Convert.ToBoolean(_cDal.settings("ContractorFGProduction", "IssueFrom6_1") == "Y" ? true : false);

                #endregion

                #region open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                sqlText = @"

insert into VAT6_1( 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
      ,UserId
  )
 SELECT 
      [SerialNo]
      ,[ItemNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[VendorID]
      ,[SD]
      ,[VATRate]
      ,[Quantity]
      ,[UnitCost]
      ,[TransID]
      ,[TransType]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[CreateDateTime]
      ,[TransactionType]
      ,[BranchId]
      ,[UserId]
      ,[AvgRate]
      ,[RunningTotal]
      ,@UserId
  FROM VAT6_1_Permanent
  where TransType != 'Opening'
  and StartDateTime >= @StartDateTime
  and StartDateTime <= @EndDateTIme
  and ItemNo in (
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1

";


                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    string code = new CommonDAL().settingValue("CompanyCode", "Code");
                    if (code.ToLower() == "cp")
                    {
                        sqlText += @"  and Products.BranchId=@BranchId";
                    }
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += ")";

                string deleteText = @"delete from VAT6_1 where UserId=@UserId";

                SqlCommand objCommVAT16 = new SqlCommand(deleteText, currConn, transaction);
                objCommVAT16.Parameters.AddWithValue("@UserId", vm.UserId);
                objCommVAT16.ExecuteNonQuery();

                objCommVAT16.CommandText = sqlText;

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }


                objCommVAT16.Parameters.AddWithValue("@StartDateTime", vm.StartDate);
                objCommVAT16.Parameters.AddWithValue("@EndDateTIme", vm.EndDate);

                objCommVAT16.ExecuteNonQuery();

                string maxDateText = @"select DATEADD(d,1,max(StartDatetime)) from VAT6_1
where UserId = @UserId";
                objCommVAT16.CommandText = maxDateText;


                string datetime = (string)objCommVAT16.ExecuteScalar();

                if (string.IsNullOrEmpty(datetime))
                {
                    vm.StartDate = datetime;
                }

                string[] result = _vatRegistersDAL.Save6_1(vm, TotalIncludeSD, IncludeOtherAMT, IssueFrom6_1, TollReceiveNotWIP, TollReceiveWithIssue,
                    currConn, transaction);


                objCommVAT16.CommandText = _vatRegistersDAL.Get6_1SelectText();
                SqlDataAdapter adapter = new SqlDataAdapter(objCommVAT16);
                adapter.Fill(dataSet);


            #endregion

                if (Vtransaction == null)
                {
                    transaction.Commit();
                }

            }

        #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }




        public DataSet VAT6_1_WithConnBackup(VAT6_1ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT6_1");
            #endregion

            #region Try

            try
            {

                #region Settings

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);
                bool IssueFrom6_1 = Convert.ToBoolean(_cDal.settings("Toll6_4", "IssueFrom6_1") == "Y" ? true : false);
                bool TotalIncludeSD = Convert.ToBoolean(_cDal.settings("VAT6_1", "TotalIncludeSD") == "Y" ? true : false);
                bool TollReceiveNotWIP = Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP") == "Y" ? true : false);
                bool TollReceiveWithIssue = Convert.ToBoolean(_cDal.settings("TollReceive", "WithIssue") == "Y" ? true : false);

                #endregion

                #region open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                #region SQL Text

                sqlText = "";

                #region Beginning


                sqlText += @"
                          
---DECLARE @StartDate DATETIME;
---DECLARE @EndDate DATETIME;
---DECLARE @post1 VARCHAR(200);
---DECLARE @post2 VARCHAR(200);
---DECLARE @ItemNo VARCHAR(200);
---SET @Itemno='46';
---SET @post1='Y';
---SET @post2='N';
---SET @StartDate='2014-04-01';
---SET @EndDate='2020-04-27';
---
---DECLARE @BranchId as int = 1;

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

 

--CREATE TABLE VAT_16(	SerialNo [varchar] (2) NULL,
--[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
--[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
--[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
--[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
--[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
--,TransactionType [varchar] (200)  
--)
--
--CREATE TABLE VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
--[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
--[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
--[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
--,TransactionType [varchar] (200)  
--) 

";
                #endregion

                #region Select Product

                sqlText += @"  
delete from VATTemp_16
delete from VAT_16


select * into #ProductReceive from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
 

";
                #region Conditions

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                        #region Debugging

                        ////if (true)
                        ////{
                        ////    sqlText += @"  and ItemNo='73'";
                        ////}

                        #endregion

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";

                    }
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";

                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @"  ) as a";

                #endregion

                #endregion

                #region Transaction Data

                if (vm.Opening == false)
                {
                    #region Purchase Data

                    sqlText += @"
-------------------------------------------------- Start Purchase --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

";
                    #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                    sqlText += @"
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }
                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase', CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')
AND pd.BranchId=@BranchId

";

                    #endregion

                    #region 'TollReceive-WIP'

                    sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceive-WIP')
AND pd.BranchId=@BranchId

";
                    #endregion
                    if (vm.StockMovement == true)
                    {
                        sqlText += @"

union all
select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Toll Receive',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceiveRaw')
AND pd.BranchId=@BranchId

";
                    }



                    #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'


                    sqlText += @"

 
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)


select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.OthersAmount,0)+isnull(pd.SDAmount,0))";
                    }
                    else
                    {
                        sqlText += @"
,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.OthersAmount,0))";
                    }
                    sqlText += @"
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,CONVERT(varchar, ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
AND pd.BranchId=@BranchId

";
                    #endregion

                    #region 'ClientRawReceive'

                    sqlText += @"

union all

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
                    }
                    else
                    {
                        sqlText += @",isnull(subtotal,0) ";
                    }
                    sqlText += @"
,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Client Raw Receive',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND  (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ClientRawReceive')
AND pd.BranchId=@BranchId

";
                    #endregion

                    #region 'PurchaseReturn','PurchaseDN'


                    sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate,CONVERT(varchar, pd.InvoiceDateTime,23)InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,pd.ItemNo
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @"
,-1*isnull(subtotal,0)+isnull(pd.SDAmount,0) ";

                    }
                    else
                    {
                        sqlText += @"
,-1*isnull(subtotal,0) ";
                    }
                    sqlText += @"

,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CONVERT(varchar, pd.ReceiveDate,23)ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
AND pd.BranchId=@BranchId

-------------------------------------------------- End Purchase --------------------------------------------------
------------------------------------------------------------------------------------------------------------------

";

                    #endregion

                    #endregion

                    #region VAT 6.2.1 False / Receive, Issue

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive Data

                        sqlText += @"
-------------------------------------------------- ReceiveDetails --------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase', '' BENumber,
pd.ItemNo,isnull(subtotal,0)  ,isnull(UOMQty,0) ,
pd.VATAmount,0 SDAmount,'WIP',pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime  >=@StartDate  and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND   (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')
AND pd.BranchId=@BranchId

";

                        #endregion

                        #region Issue Data


                        sqlText += @"
-------------------------------------------------- Start Issue --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')
AND id.BranchId=@BranchId
";




                        #region Toll Issue Data

                        if (IssueFrom6_1)
                        {
                            #region Issue From 6.1

                            sqlText += @"   
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')
AND id.BranchId=@BranchId
";
                            #endregion
                        }
                        else
                        {
                            if (TollReceiveNotWIP)
                            {
                                #region Toll Receive NotWIP

                                sqlText += @"   
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive-NotWIP')
AND id.BranchId=@BranchId
";
                                #endregion
                            }

                            if (TollReceiveWithIssue)
                            {
                                #region Toll Receive With Issue


                                sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Toll Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
  AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
AND id.BranchId=@BranchId

";
                                #endregion
                            }
                        }
                        #endregion

                        #region Toll Finish Receive

                        sqlText += @" 
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive') 
AND id.BranchId=@BranchId
";

                        #endregion

                        #region Issue Return, Receive Return

                        sqlText += @" 

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn','ReceiveReturn')
AND ID.BranchId=@BranchId
";
                        #endregion

                        #endregion

                        #region Dispose Raw Data


                        sqlText += @"

insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.TransactionDateTime IssueDateTime,ID.TransactionDateTime IssueDateTime,ID.DisposeNo,'Issue','-'
,id.ItemNo,isnull(Quantity,0)*isnull(SubTotal,0) ,isnull(Quantity,0) ,ID.VATAmount,ID.SDAmount,'Raw Dispose', TransactionDateTime IssueDateTime
from DisposeRawDetails ID
where ID.TransactionDateTime  >=@StartDate  and ID.TransactionDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
and ISNULL(ID.IsSaleable,'N')='N'
AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other')
AND id.BranchId=@BranchId
";


                        #endregion

                    }

                    #endregion

                    #region Stock Movement False/ Raw Sale, Raw Credit, Dispose Raw Sale

                    if (vm.StockMovement == false)
                    {

                        #region Raw Sale

                        sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  
AND BranchId=@BranchId
";

                        #endregion

                        #region Raw Credit


                        sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select  'B',ID.InvoiceDateTime,ID.InvoiceDateTime,ID.SalesInvoiceNo,'Issue','-'
,id.ItemNo,-isnull(UOMQty,0)*isnull(AVGPrice,0) ,-isnull(UOMQty,0) ,-0 VATAmount,-0 SDAmount,id.TransactionType,InvoiceDateTime
from SalesInvoiceDetails ID
where ID.InvoiceDateTime  >=@StartDate  and ID.InvoiceDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive)
 AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('RawCredit')
AND ID.BranchId=@BranchId

";
                        #endregion

                        #region Dispose Raw Sale

                        sqlText += @"
insert into VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-'
, ItemNo
, isnull(UOMQty,0)*isnull(UOMPrice,0)
, case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end 
,'0'
, SDAmount,'Dispose Raw Sale',CreatedOn
from SalesInvoiceDetails
where 1=1 
and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeRaw')  
AND BranchId=@BranchId
";

                        #endregion


                    }

                    #endregion
                }

                #endregion

                #region Openinng Data

                sqlText += @"
-------------------------------------------------- Openinng Data --------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

------select @OpeningDate = p.OpeningDate from Products p
------WHERE ItemNo=@ItemNo
------IF(@OpeningDate<@StartDate)

set @OpeningDate=@StartDate

insert into VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
SELECT distinct ItemNo, 0 Quantity, 0 Amount  FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'

";

                #region Opening From Product False

                if (vm.OpeningFromProduct == false)
                {

                    if (vm.BranchId > 1)
                    {
                        sqlText += @"	
UNION ALL 	 
SELECT distinct ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
group by ItemNo
 
";
                    }
                    else
                    {
                        sqlText += @"		
UNION ALL  
SELECT distinct itemNo ItemNo, sum(isnull(OpeningBalance,0)) Quantity, sum(isnull(p.OpeningTotalCost,0)) Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'
group by ItemNo

";
                    }

                }
                #endregion

                #region Purchase Data

                #region 'Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                #endregion

                #region 'TollReceive-WIP'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive-WIP') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                if (vm.StockMovement == true)
                {
                    sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                    if (TotalIncludeSD)
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                    }
                    else
                    {
                        sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                    }
                    sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceiveRaw') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";
                }
                #endregion

                #region 'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport'

                sqlText += @"

UNION ALL (
	SELECT distinct   ItemNo,isnull(sum(UOMQty),0) PurchaseQuantity 
";
                if (TotalIncludeSD)
                {
                    sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+isnull(OthersAmount,0)+isnull(SDAmount,0)),0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @"	
	,isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal ";
                }

                sqlText += @"	
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 
AND BranchId=@BranchId
group by ItemNo
 )  


";
                #endregion

                #region 'ClientRawReceive'

                sqlText += @"		
UNION ALL (
		SELECT  distinct   ItemNo, isnull(sum(UOMQty),0)PurchaseQuantity
";
                if (TotalIncludeSD)
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal ";
                }
                else
                {
                    sqlText += @",isnull(sum(isnull(SubTotal,0)),0)SubTotal ";
                }
                sqlText += @"
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('ClientRawReceive') 
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate      AND ItemNo in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

 )   	 
";

                #endregion

                #region 'PurchaseReturn','PurchaseDN'


                sqlText += @"
UNION ALL 
(	SELECT   distinct   ItemNo,-isnull(sum(UOMQty),0) PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal     
FROM PurchaseInvoiceDetails 
WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  
AND ReceiveDate>= '01-Jul-2019' and ReceiveDate < @StartDate       AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                #endregion

                #endregion

                #region VAT6.2.1 False / Receive, Issue, Dispose Raw Data

                if (vm.VAT6_2_1 == false)
                {
                    #region Receive - WIP

                    sqlText += @"		
UNION ALL  
(SELECT distinct   ItemNo,  isnull(sum(UOMQty),0) Quantity,isnull(sum(isnull(SubTotal,0)),0)Amount 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime>= '01-July-2019' and ReceiveDateTime < @StartDate    
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by itemNo
 )   
";
                    #endregion

                    #region Issue Data

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate     
AND TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #region Toll Issue

                    if (IssueFrom6_1)
                    {
                        #region Issue From 6.1

                        sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'  
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
 AND TransactionType IN ('TollIssue')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                        #endregion
                    }
                    else
                    {
                        if (TollReceiveNotWIP)
                        {
                            #region Toll Receive Not WIP

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive-NotWIP')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                            #endregion
                        }

                        if (TollReceiveWithIssue)
                        {
                            #region Toll Receive With Issue

                            sqlText += @"
 UNION ALL 
 (
 SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive')
 AND ItemNo  in(select distinct ItemNo from #ProductReceive)
 AND BranchId=@BranchId
group by ItemNo

) 
";
                            #endregion
                        }
                    }

                    #endregion

                    #region Toll Finish Receive


                    sqlText += @" 
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate    
AND TransactionType IN ('TollFinishReceive')  
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo

) 
";

                    #endregion

                    #region Issue Return, Receive Return

                    sqlText += @" 

UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'  
AND IssueDateTime>= '01-July-2019' and IssueDateTime< @StartDate   
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)   
";

                    #endregion

                    #endregion

                    #region Dispose Raw Data

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)   
FROM DisposeRawDetails WHERE Post='Y'  
and ISNULL(IsSaleable,'N')='N' 
AND TransactionDateTime>= '01-July-2019' and TransactionDateTime< @StartDate     
AND TransactionType IN ('Other')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion
                }

                #endregion

                #region Stock Movement False / Sales

                if (vm.StockMovement == false)
                {

                    #region Raw Sale

                    sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawSale')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                    #region Raw Credit

                    sqlText += @"
UNION ALL 
(
SELECT  distinct   ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(isnull(UOMQty,0)*isnull(AVGPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('RawCredit')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                    #endregion


                    #region Raw Sale

                    sqlText += @"

UNION ALL 
(
SELECT  distinct   ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(isnull(UOMQty,0)*isnull(UOMPrice,0),0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'    
AND InvoiceDateTime>= '01-July-2019' and InvoiceDateTime< @StartDate     
AND TransactionType IN ('DisposeRaw')

AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                }


                #endregion

                sqlText += @"
) AS a GROUP BY a.ItemNo
";

                #endregion

                #region Insert, Update and Select Data

                sqlText += @"

insert into VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from VATTemp_16
order by dailydate,SerialNo



update VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=VAT_16.TransID
and VAT_16.TransType='Purchase'
AND BranchId=@BranchId



update VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and VAT_16.TransType='Purchase'
AND BranchId=@BranchId



select VAT_16.SerialNo,convert (varchar,VAT_16.StartDateTime,120)StartDateTime,
VAT_16.StartingQuantity,VAT_16.StartingAmount
,TransID,VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,p.ProductCode ProductCodeA,p.UOM,VAT_16.Quantity,VAT_16.VATRate,VAT_16.SD,VAT_16.UnitCost,p.HSCodeNo,VAT_16.BENumber
,convert (varchar,VAT_16.InvoiceDateTime,120)InvoiceDateTime,VAT_16.Remarks,VAT_16.ItemNo,
VAT_16.CreateDateTime
from VAT_16 left outer join
Vendors as V on VAT_16.VendorID=v.VendorID left outer join 
Products P on VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,VAT_16.SerialNo ASC 
--order by VAT_16.SerialNo ASC ,CreateDateTime ASC




--DROP TABLE #VAT_16
--DROP TABLE VATTemp_16
--DROP TABLE #ProductReceive

                ";

                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT16.CommandTimeout = 500;
                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }




                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", vm.UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = vm.UserName;
                }
                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed
                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = vm.Post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = vm.Post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

                #endregion

                #endregion


            }

            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConn", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_1_Monthly(DataSet dsVAT6_1, string StartDateTime, bool TopSheet, bool GroupTopSheet, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            DataSet dsVAT6_1_Monthly = new DataSet();
            DataTable dt = new DataTable();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";
            int transResult = 0;

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Clear [PurchaseRegister_VAT6_1s]

                sqlText = "";
                sqlText = "delete from PurchaseRegister_VAT6_1s";

                var cmd = new SqlCommand(sqlText, currConn, transaction);
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Bulk Insert to [PurchaseRegister_VAT6_1s]

                dt = dsVAT6_1.Tables[0];


                #region Debug

                string names = "";

                if (true)
                {
                    if (dt != null)
                    {
                        foreach (DataColumn column in dt.Columns)
                        {
                            names += column.ColumnName + ",";
                        }

                    }

                }

                #endregion

                _cDAL.BulkInsert("PurchaseRegister_VAT6_1s", dt, currConn, transaction);


                #endregion

                #region Get Data From [PurchaseRegister_VAT6_1s]

                #region SQL Text

                sqlText = "";
                if (TopSheet || GroupTopSheet)
                {
                    #region TopSheet

                    if (GroupTopSheet)
                    {
                        sqlText = @"
                        update   PurchaseRegister_VAT6_1s set ItemNo=Products.CategoryID
from  Products 
where PurchaseRegister_VAT6_1s.ItemNo=Products.ItemNo

update   PurchaseRegister_VAT6_1s set ProductName=ProductCategories.CategoryName
,HSCodeNo='-',ProductCodeA=ProductCategories.CategoryName
from  ProductCategories 
where PurchaseRegister_VAT6_1s.ItemNo=ProductCategories.CategoryID
";
                    }
                    sqlText += @"

update PurchaseRegister_VAT6_1s set StartDateTime=@StartDateTime;

select distinct 
SerialNo
,Day
,StartDateTime
,TransID
,TransType
,VendorName
,Address1
,Address2
,Address3
,VATRegistrationNo
,ProductName
,HSCodeNo
,remarks
,CreatedDateTime
,InvoiceDateTime
,ItemNo
,IsMonthly
,BENumber
,ProductCodeA
,UOM
,sum(StartingQuantity )StartingQuantity
,sum(StartingAmount	  )StartingAmount
,sum(IssueQuantity	  )IssueQuantity
,sum(IssueAmount	  )IssueAmount
,sum(PurchaseQuantity )PurchaseQuantity
,sum(PurchaseAmount	  )PurchaseAmount
,sum(PurchaseSD		  )PurchaseSD
,sum(VATRateAmount	  )VATRateAmount
from(
select distinct 
'A' SerialNo
,1 [Day]	--1 											[Day]	
,StartDateTime  --									StartDateTime				
,sum(case when TransType='opening' then (Quantity) else 0 end) StartingQuantity	
,sum(case when TransType='opening' then  (UnitCost) else 0 end) StartingAmount	
,0										TransID					
,'opening'										TransType				
,0										VendorName			
,0										Address1				
,0										Address2				
,0										Address3					
,0								VATRegistrationNo		
,ProductName									ProductName			
,HSCodeNo										HSCodeNo	
,sum(case when TransType='Issue' then (Quantity) else 0 end) IssueQuantity	
,sum(case when TransType='Issue' then (UnitCost) else 0 end) IssueAmount	
,sum(case when TransType='Purchase' then (Quantity) else 0 end) PurchaseQuantity	
,sum(case when TransType='Purchase' then (UnitCost) else 0 end) PurchaseAmount	
,sum(case when TransType='Purchase' then (SD) else 0 end) PurchaseSD	
,sum(case when TransType='Purchase' then (VATRate) else 0 end) VATRateAmount	
,'opening'										remarks					
,1 CreatedDateTime--								CreatedDateTime	
,1 InvoiceDateTime--								InvoiceDateTime	
,ItemNo											ItemNo					
,'Y' 											IsMonthly 				
,0 								     	BENumber			
,ProductCodeA 								     	ProductCodeA			
,UOM 								     	UOM		 
from (
select 
'A' SerialNo
,1 [Day]	--1 											[Day]	
,  StartDateTime--									StartDateTime				
,StartingQuantity								StartingQuantity	
,StartingAmount									StartingAmount  		
,TransID										TransID					
,TransType										TransType				
,VendorName										VendorName			
,Address1										Address1				
,Address2										Address2				
,Address3										Address3					
,VATRegistrationNo								VATRegistrationNo		
,ProductName									ProductName			
,HSCodeNo										HSCodeNo				
,Quantity										Quantity					
,SD												SD						
,VATRate										VATRate				
,UnitCost										UnitCost					
,TransType										remarks					
,1 CreatedDateTime--								CreatedDateTime	
,1 InvoiceDateTime--								InvoiceDateTime	
,ItemNo											ItemNo					
,'Y' 											IsMonthly 				
,BENumber 								     	BENumber			
,ProductCodeA 								     	ProductCodeA			
,UOM 								     	UOM			

FROM PurchaseRegister_VAT6_1s
WHERE remarks = 'Opening'

UNION ALL
SELECT
'B' SerialNo

,1[Day]	 --,cast(Day(StartDateTime) as int)						[Day]	
, FORMAT(StartDateTime,'yyyy-MM-dd')						StartDateTime	

,SUM(StartingQuantity)									StartingQuantity			 
,SUM(StartingAmount)									StartingAmount				 
,'-'													TransID						 
,TransType												TransType					 
,'-'													VendorName					 
,'-'													Address1					 
,'-'													Address2					 
,'-'													Address3					 
,'-'										            VATRegistrationNo			 
,ProductName											ProductName					 
,HSCodeNo												    HSCodeNo					 
,SUM(Quantity)											Quantity					 
,SUM(SD)												SD							 
,SUM(VATRate)											VATRate						 
,SUM(UnitCost)											UnitCost					 
,TransType													remarks				
,1 CreatedDateTime--Day(StartDateTime)										CreatedDateTime				 
,1 InvoiceDateTime--cast(Day(InvoiceDateTime) as int)  					InvoiceDateTime	
,ItemNo													ItemNo						 
,'Y'													IsMonthly 					 
,'-'													BENumber 	
,ProductCodeA 								     	ProductCodeA			
,UOM 								     	UOM						 
FROM PurchaseRegister_VAT6_1s															 
WHERE remarks != 'Opening'
GROUP BY
StartDateTime,TransType
,ProductName
,HSCodeNo
,remarks
,ItemNo
,ProductCodeA
,UOM
) as a
--where itemno='1192'
group by TransType,StartDateTime, ProductName,HSCodeNo,ItemNo,ProductCodeA,UOM
) as b 
group by SerialNo
,Day
,StartDateTime
,TransID
,TransType
,VendorName
,Address1
,Address2
,Address3
,VATRegistrationNo
,ProductName
,HSCodeNo
,remarks
,CreatedDateTime
,InvoiceDateTime
,ItemNo
,IsMonthly
,BENumber
,ProductCodeA
,UOM 

";
                    #endregion TopSheet

                }
                else
                {
                    #region Purchase Register (VAT 6.1) (Opening)

                    sqlText = @"


-------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------Purchase Register (VAT 6.1)--------------------------------------------------(Opening)

select
'A' SerialNo
, 1 											[Day]	
,StartDateTime									StartDateTime				
,StartingQuantity								StartingQuantity	
,StartingAmount									StartingAmount  		
,TransID										TransID					
,TransType										TransType				
,VendorName										VendorName			
,Address1										Address1				
,Address2										Address2				
,Address3										Address3					
,VATRegistrationNo								VATRegistrationNo		
,ProductName									ProductName			
,HSCodeNo										HSCodeNo				
,Quantity										Quantity					
,SD												SD						
,VATRate										VATRate				
,UnitCost										UnitCost					
,remarks										remarks					
,CreatedDateTime								CreatedDateTime	
,InvoiceDateTime								InvoiceDateTime	
,ItemNo											ItemNo					
,'Y' 											IsMonthly 				
,BENumber 								     	BENumber			
,ProductCodeA 								     	ProductCodeA			
,UOM 								     	UOM			

FROM PurchaseRegister_VAT6_1s
WHERE remarks = 'Opening'

";
                    #endregion
                    #region Purchase Register (VAT 6.1)

                    sqlText += @"


UNION ALL

-------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------Sale Register (VAT 6.2)--------------------------------------------------
SELECT
'B' SerialNo
,cast(Day(StartDateTime) as int)						[Day]	
,FORMAT(StartDateTime,'yyyy-MM-dd')						StartDateTime					 		 
,SUM(StartingQuantity)									StartingQuantity			 
,SUM(StartingAmount)									StartingAmount				 
,'-'													TransID						 
,TransType												TransType					 
,'-'													VendorName					 
,'-'													Address1					 
,'-'													Address2					 
,'-'													Address3					 
,'-'										            VATRegistrationNo			 
,ProductName											ProductName					 
,'-'												    HSCodeNo					 
,SUM(Quantity)											Quantity					 
,SUM(SD)												SD							 
,SUM(VATRate)											VATRate						 
,SUM(UnitCost)											UnitCost					 
,remarks												remarks						 
,Day(StartDateTime)										CreatedDateTime				 
,cast(Day(InvoiceDateTime) as int)  					InvoiceDateTime				 
,ItemNo													ItemNo						 
,'Y'													IsMonthly 					 
,'-'													BENumber 	
,ProductCodeA 								     	ProductCodeA			
,UOM 								     	UOM						 
FROM PurchaseRegister_VAT6_1s															 
WHERE remarks != 'Opening'
GROUP BY
cast(Day(StartDateTime) as int)
,cast(Day(InvoiceDateTime) as int)
,FORMAT(StartDateTime,'yyyy-MM-dd')	
,TransType
,VATRegistrationNo
,ProductName
,HSCodeNo
,remarks
,ItemNo
,ProductCodeA
,UOM


";
                    #endregion
                }
                #endregion

                #region SQL Execution

                cmd = new SqlCommand(sqlText, currConn, transaction);
                if (TopSheet || GroupTopSheet)
                {
                    cmd.Parameters.AddWithValue("@StartDateTime", StartDateTime);
                }
                SqlDataAdapter da = new SqlDataAdapter(cmd);

                da.Fill(dsVAT6_1_Monthly);


                #endregion


                #endregion

                #region Commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion Commit
            }
            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ReportDSDAL", "VAT6_1_Monthly", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dsVAT6_1_Monthly;

        }

        public DataSet VAT6_1_Monthly(VAT6_1ParamVM vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            DataSet dsVAT6_1_Monthly = new DataSet();
            DataTable dt = new DataTable();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";
            int transResult = 0;
            VATRegistersDAL _vatRegistersDAL = new VATRegistersDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                sqlText = "";
                sqlText = @"


CREATE TABLE #VAT_16
(SerialNo [varchar] (2) NULL,
                    [ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
    ,TransactionType [varchar] (200)  )

insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
    VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,cast(StartDateTime as date),cast(InvoiceDateTime as date)
    ,sum(StartingQuantity),sum(StartingAmount),0 VendorID,
sum(Quantity),sum(UnitCost),'-'TransID,TransType,avg(VATRate),avg(SD),'-'BENumber,Remarks,cast(CreateDateTime as date)
from VAT6_1
where UserId = @UserId
group by SerialNo,ItemNo,cast(StartDateTime as date),cast(InvoiceDateTime as date)
    ,TransType
    ,Remarks,cast(CreateDateTime as date)
order by ItemNo,cast(StartDateTime as date),SerialNo



select * from #VAT_16 

delete from VAT6_1 where UserId = @UserId

drop table #VAT_16";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@UserId", vm.UserId);
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dsVAT6_1_Monthly);

                dsVAT6_1_Monthly.Tables[0].Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });

                CommonDAL commonDAl = new CommonDAL();

                string[] result = commonDAl.BulkInsert("VAT6_1", dsVAT6_1_Monthly.Tables[0], currConn, transaction, 0, null, connVM);


                cmd.CommandText = _vatRegistersDAL.Get6_1PartitionQuery(ProcessConfig.Temp);
                cmd.ExecuteNonQuery();


                cmd.CommandText = _vatRegistersDAL.Get6_1SelectText();
                dataAdapter = new SqlDataAdapter(cmd);
                dsVAT6_1_Monthly.Clear();
                dataAdapter.Fill(dsVAT6_1_Monthly);



                #region Commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion Commit
            }

            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ReportDSDAL", "VAT6_1_Monthly", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dsVAT6_1_Monthly;

        }

        #region Comments - Nov-01-2020

        public DataSet VAT6_1_WithConn_Backup(string ItemNo, string UserName, string StartDate, string EndDate
, string post1, string post2, string ReportName, int BranchId = 0, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null
, bool Opening = false, SysDBInfoVMTemp connVM = null, bool OpeningFromProducct = true, string ProdutType = "", string ProdutCategoryId = ""
            , bool VAT6_2_1 = false, bool StockMovement = false)
        {

            return null;
        }


        #endregion

        public DataSet VAT6_1_Branching(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2
, string ReportName, string DBName = "", string BranchName = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");
            string MyDB = "";
            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region Clear Data
                sqlText = " ";
                sqlText += @" DELETE FROM ReportPurchaseRegister";
                SqlCommand cmdDelete = new SqlCommand(sqlText, currConn);
                int transResult = cmdDelete.ExecuteNonQuery();

                #endregion


                BranchReportDAL branchDal = new BranchReportDAL();
                string branchName = "";
                DataTable dtbranchNames = new DataTable();
                #region InsertData

                if (string.IsNullOrWhiteSpace(DBName) || DBName.ToLower() == "all")
                {
                    dtbranchNames = branchDal.SearchBranchReport(branchName);

                    foreach (DataRow dr in dtbranchNames.Rows)
                    {
                        DataSet dsPreview = new DataSet();
                        dsPreview = VAT6_1(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, dr["DBName"].ToString(), dr["Name"].ToString());

                    }


                }
                else
                {
                    DataSet dsPreview = new DataSet();
                    dsPreview = VAT6_1(ItemNo, UserName, StartDate, EndDate, post1, post2, ReportName, DBName, BranchName);
                }

                #endregion


                #region SQL Statement


                sqlText = " ";
                sqlText += @" 
SELECT * FROM ReportPurchaseRegister where 

------DELETE FROM ReportPurchaseRegister
";
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(sqlText, currConn);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_Branching", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_Branching", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_1(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, string DBName = "", string BranchName = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");
            string MyDB = "";
            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                MyDB = currConn.Database;

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                    if (!string.IsNullOrWhiteSpace(DBName))
                    {
                        currConn.ChangeDatabase(DBName);
                    }
                }

                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')

";

                if (ImportCostingIncludeATV)
                {
                    sqlText += @"insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')";
                }
                else
                {
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')";

                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,0 UnitCost
,0  UOMQty ,pd.ATVAmount ,0 SDAmount,'Import ATV' TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
and pd.ATVAmount>0
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')";

                }

                sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
---- end purchase---
---- start Issue---
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other'
--From Sale
,'Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
--From Toll
,'TollIssue'
--From Purchase
,'InputServiceImport','InputService','TollReceive'
--From Production
,'Tender','WIP','PackageProduction'
)

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn','ReceiveReturn')


----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading', 'TollReceive-WIP','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  ";
                if (ImportCostingIncludeATV)
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }
                else
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";

                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0) +isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import' ) 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }



                sqlText += @"	 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 


UNION ALL 
(
SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('Other'
--From Sale
,'Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
--From Toll
,'TollIssue'
--From Purchase
,'InputServiceImport','InputService','TollReceive'
--From Production
,'Tender','WIP','PackageProduction'
)
AND ItemNo = @itemNo  AND (UOMQty>0))  

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   


 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 


UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y')   
and DisposeDetails.TransactionType IN('VAT26')  )

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-0--isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('RawSale')  
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL 
(
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'
";

                sqlText += @" INSERT INTO " + MyDB + ".dbo.ReportPurchaseRegister";

                sqlText += @"
select #VAT_16.SerialNo,ISNULL(convert (varchar,#VAT_16.StartDateTime,120),'19900101') StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType
,isnull(v.VendorName,'-')VendorName
,isnull(v.Address1,'-')Address1
,isnull(v.Address2,'-')Address2
,isnull(v.Address3,'-')Address3
,isnull(v.VATRegistrationNo,'-')VATRegistrationNo
,p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,ISNULL(convert (varchar,#VAT_16.InvoiceDateTime,120), '19900101') InvoiceDateTime,#VAT_16.Remarks
,ISNULL(#VAT_16.CreateDateTime,'19900101') CreateDateTime , @UserName UserName, @BranchName BranchName
FROM #VAT_16 LEFT OUTER JOIN
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC





DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";
                sqlText += @" SELECT * FROM " + MyDB + ".dbo.ReportPurchaseRegister";
                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }

                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }

                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }


                if (!objCommVAT16.Parameters.Contains("@BranchName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@BranchName", BranchName);
                }
                else
                {
                    objCommVAT16.Parameters["@BranchName"].Value = BranchName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        public DataTable GetSale9_1_Comparison(ParameterVM parameterVm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"

;with cte 
as
(
	select PeriodID,BranchId
	,isnull(LineA,0)+isnull(LineC,0) Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '1'

	union all 

	select PeriodID,BranchId
	, 0 Note_1
	, isnull(LineA,0)+isnull(LineC,0) Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '2'

		union all 

	select PeriodID,BranchId
	, 0 Note_1
	, 0 Note_2
	, isnull(LineA,0)+isnull(LineC,0) Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '3'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, isnull(LineA,0)+isnull(LineC,0) Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '4'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, isnull(LineA,0)+isnull(LineC,0) Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '5'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, isnull(LineA,0)+isnull(LineC,0) Note_6
	, 0 Note_7
	, 0 Note_8
	, isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '6'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, isnull(LineA,0)+isnull(LineC,0) Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '7'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, isnull(LineA,0)+isnull(LineC,0) Note_8
	,isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '8'
)
, NoteSummary 
as
(select PeriodID,Isnull(bp.BranchCode,'ALL')BranchCode
,sum(Note_1)Note_1 
,sum(Note_2)Note_2
,sum(Note_3)Note_3
,sum(Note_4)Note_4
,sum(Note_5)Note_5
,sum(Note_6)Note_6
,sum(Note_7)Note_7
,sum(Note_8)Note_8
,sum(Total)Total

from cte left outer join BranchProfiles bp on cte.BranchId = bp.BranchId
where cte.BranchId =@BranchId
group by PeriodID,bp.BranchCode
)

--select * from NoteSummary

select Format(cast('1900'+SUBSTRING(isnull(firstYear.PeriodID,secondYear.PeriodID),1,2)+'01' as datetime),'MMMM') [Month]

,isnull(firstYear.BranchCode,secondYear.BranchCode) BranchCode

,firstYear.Note_1 firstYear_Note_1
,firstYear.Note_2 firstYear_Note_2
,firstYear.Note_3 firstYear_Note_3
,firstYear.Note_4 firstYear_Note_4
,firstYear.Note_5 firstYear_Note_5
,firstYear.Note_6 firstYear_Note_6
,firstYear.Note_7 firstYear_Note_7
,firstYear.Note_8 firstYear_Note_8
,firstYear.Total  firstYear_Total

,secondYear.Note_1 secondYear_Note_1
,secondYear.Note_2 secondYear_Note_2
,secondYear.Note_3 secondYear_Note_3
,secondYear.Note_4 secondYear_Note_4
,secondYear.Note_5 secondYear_Note_5
,secondYear.Note_6 secondYear_Note_6
,secondYear.Note_7 secondYear_Note_7
,secondYear.Note_8 secondYear_Note_8
,secondYear.Total  secondYear_Total

from 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @fDate)
) 
as firstYear
full outer join 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @sDate)
) 
as secondYear

on SUBSTRING(firstYear.PeriodID,1,2) = SUBSTRING(secondYear.PeriodID,1,2)
and firstYear.BranchCode = secondYear.BranchCode
order by isnull(firstYear.PeriodID,secondYear.PeriodID),firstYear.BranchCode


";
                #endregion
                if (parameterVm.AllBranch)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", parameterVm.FromDate);
                cmd.Parameters.AddWithValue("@sDate", parameterVm.ToDate);
                cmd.Parameters.AddWithValue("@BranchId", parameterVm.BranchId);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetSale9_1_Comparison_Monthly(ParameterVM parameterVm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"

;with cte 
as
(
	select PeriodID,BranchId
	,isnull(LineA,0)+isnull(LineC,0) Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '1'

	union all 

	select PeriodID,BranchId
	, 0 Note_1
	, isnull(LineA,0)+isnull(LineC,0) Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '2'

		union all 

	select PeriodID,BranchId
	, 0 Note_1
	, 0 Note_2
	, isnull(LineA,0)+isnull(LineC,0) Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '3'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, isnull(LineA,0)+isnull(LineC,0) Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '4'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, isnull(LineA,0)+isnull(LineC,0) Note_5
	, 0 Note_6
	, 0 Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '5'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, isnull(LineA,0)+isnull(LineC,0) Note_6
	, 0 Note_7
	, 0 Note_8
	, isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '6'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, isnull(LineA,0)+isnull(LineC,0) Note_7
	, 0 Note_8
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '7'

		union all 

	select PeriodID,BranchId
	,0 Note_1
	, 0 Note_2
	, 0 Note_3
	, 0 Note_4
	, 0 Note_5
	, 0 Note_6
	, 0 Note_7
	, isnull(LineA,0)+isnull(LineC,0) Note_8
	,isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '8'
)
, NoteSummary 
as
(select PeriodID,Isnull(bp.BranchCode,'ALL')BranchCode
,sum(Note_1)Note_1 
,sum(Note_2)Note_2
,sum(Note_3)Note_3
,sum(Note_4)Note_4
,sum(Note_5)Note_5
,sum(Note_6)Note_6
,sum(Note_7)Note_7
,sum(Note_8)Note_8
,sum(Total)Total

from cte left outer join BranchProfiles bp on cte.BranchId = bp.BranchId
where cte.BranchId =@BranchId
group by PeriodID,bp.BranchCode
)

--select * from NoteSummary


select Format(cast('1900'+SUBSTRING(@fDate,1,2)+'01' as datetime),'MMMM') [First_Month]

,isnull(firstYear.BranchCode,secondYear.BranchCode) BranchCode

,firstYear.Note_1 first_Month_Note_1
,firstYear.Note_2 first_Month_Note_2
,firstYear.Note_3 first_Month_Note_3
,firstYear.Note_4 first_Month_Note_4
,firstYear.Note_5 first_Month_Note_5
,firstYear.Note_6 first_Month_Note_6
,firstYear.Note_7 first_Month_Note_7
,firstYear.Note_8 first_Month_Note_8
,firstYear.Total  first_Month_Total

,Format(cast('1900'+SUBSTRING(@sDate,1,2)+'01' as datetime),'MMMM') [Second_Month]

,secondYear.Note_1 second_Month_Note_1
,secondYear.Note_2 second_Month_Note_2
,secondYear.Note_3 second_Month_Note_3
,secondYear.Note_4 second_Month_Note_4
,secondYear.Note_5 second_Month_Note_5
,secondYear.Note_6 second_Month_Note_6
,secondYear.Note_7 second_Month_Note_7
,secondYear.Note_8 second_Month_Note_8
,secondYear.Total  second_Month_Total


from 
(
select * from NoteSummary 
where 1=1
and PeriodID = @fDate
) 
as firstYear
full outer join 
(
select * from NoteSummary 
where 1=1
and PeriodID = @sDate
) 
as secondYear

--SUBSTRING(firstYear.PeriodID,1,2) = SUBSTRING(secondYear.PeriodID,1,2)
--and

on  firstYear.BranchCode = secondYear.BranchCode
order by isnull(firstYear.PeriodID,secondYear.PeriodID),firstYear.BranchCode


";
                #endregion
                if (parameterVm.AllBranch)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", parameterVm.FromDate);
                cmd.Parameters.AddWithValue("@sDate", parameterVm.ToDate);
                cmd.Parameters.AddWithValue("@BranchId", parameterVm.BranchId);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetSale9_1_Total(ParameterVM parameterVm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"


;with cte 
as
(
	select PeriodID, BranchId, LineA, LineB, LineC, 'Sales' TransactionType
	from VATReturnV2s
	where NoteNo = '9'

	union all

	select  PeriodID, BranchId, LineA, LineB, LineC, 'Credit Sales' TransactionType
	from VATReturnV2s
	where NoteNo = '31'

	union all

	select  PeriodID, BranchId, LineA, LineB, LineC, 'Debit Sales' TransactionType
	from VATReturnV2s
	where NoteNo = '26'
)
,NoteSummary 
as
(
	select PeriodID,Isnull(bp.BranchCode,'ALL')BranchCode
	, TransactionType
	, sum(LineA)[Value]
	, sum(LineB) SD
	, sum(LineC) VAT
	from cte left outer join BranchProfiles bp on cte.BranchId = bp.BranchId
	where cte.BranchId =@BranchId
	group by PeriodID,bp.BranchCode,TransactionType
)

--select * from NoteSummary
--order by PeriodID,BranchCode, TransactionType

select Format(cast('1900'+SUBSTRING(isnull(firstYear.PeriodID,secondYear.PeriodID),1,2)+'01' as datetime),'MMMM') [Month]
--,firstYear.PeriodID,secondYear.PeriodID
,isnull(firstYear.BranchCode,secondYear.BranchCode) BranchCode
,isnull(firstYear.TransactionType,secondYear.TransactionType) TransactionType

,firstYear.Value firstYear_Value
,firstYear.SD firstYear_SD
,firstYear.VAT firstYear_VAT

,secondYear.Value secondYear_Value
,secondYear.SD secondYearr_SD
,secondYear.VAT secondYear_VAT


from 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @fDate)
) 
as firstYear
full outer join 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @sDate)
) 
as secondYear

on SUBSTRING(firstYear.PeriodID,1,2) = SUBSTRING(secondYear.PeriodID,1,2)
and firstYear.BranchCode = secondYear.BranchCode
and firstYear.TransactionType = secondYear.TransactionType

order by isnull(firstYear.PeriodID,secondYear.PeriodID),firstYear.BranchCode



";
                #endregion

                if (parameterVm.AllBranch)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", parameterVm.FromDate);
                cmd.Parameters.AddWithValue("@sDate", parameterVm.ToDate);
                cmd.Parameters.AddWithValue("@BranchId", parameterVm.BranchId);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetPurchase9_1_Comparison(ParameterVM parameterVm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"

;with cte 
as
(
	select PeriodID, BranchId
	,isnull(LineA,0)+isnull(LineC,0) Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '10'

	union all 

	select PeriodID, BranchId
	, 0 Note_10
	, isnull(LineA,0)+isnull(LineC,0) Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '11'

		union all 


	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, isnull(LineA,0)+isnull(LineC,0) Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '12'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, isnull(LineA,0)+isnull(LineC,0) Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '13'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, isnull(LineA,0)+isnull(LineC,0) Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '14'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, isnull(LineA,0)+isnull(LineC,0) Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '15'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, isnull(LineA,0)+isnull(LineC,0) Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '16'

		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, isnull(LineA,0)+isnull(LineC,0) Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '17'

	
		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, isnull(LineA,0)+isnull(LineC,0) Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '18'

		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, isnull(LineA,0)+isnull(LineC,0) Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '19'

	
		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, isnull(LineA,0)+isnull(LineC,0) Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '20'

	
		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, isnull(LineA,0)+isnull(LineC,0) Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '21'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, isnull(LineA,0)+isnull(LineC,0) Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '22'

)
, NoteSummary 
as
(
select  
PeriodID,isnull(bp.BranchCode,'ALL')BranchCode
,sum(Note_10) Note_10
,sum(Note_11) Note_11
,sum(Note_12) Note_12
,sum(Note_13) Note_13
,sum(Note_14) Note_14
,sum(Note_15) Note_15
,sum(Note_16) Note_16
,sum(Note_17) Note_17
,sum(Note_18) Note_18
,sum(Note_19) Note_19
,sum(Note_20) Note_20
,sum(Note_21) Note_21
,sum(Note_22) Note_22
,sum(Total) Total

from cte left outer join BranchProfiles bp on cte.BranchId = bp.BranchId
where cte.BranchId =@BranchId
group by PeriodID,bp.BranchCode
)

select Format(cast('1900'+SUBSTRING(isnull(firstYear.PeriodID,secondYear.PeriodID),1,2)+'01' as datetime),'MMMM') [Month]

,isnull(firstYear.BranchCode,secondYear.BranchCode) BranchCode

,firstYear.Note_10	firstYear_Note_10
,firstYear.Note_11	firstYear_Note_11
,firstYear.Note_12	firstYear_Note_12
,firstYear.Note_13	firstYear_Note_13
,firstYear.Note_14	firstYear_Note_14
,firstYear.Note_15	firstYear_Note_15
,firstYear.Note_16	firstYear_Note_16
,firstYear.Note_17	firstYear_Note_17
,firstYear.Note_18	firstYear_Note_18
,firstYear.Note_19	firstYear_Note_19
,firstYear.Note_20	firstYear_Note_20
,firstYear.Note_21	firstYear_Note_21
,firstYear.Note_22 	firstYear_Note_22
,firstYear.Total 	firstYear_Total


,secondYear.Note_10	secondYear_Note_10
,secondYear.Note_11	secondYear_Note_11
,secondYear.Note_12	secondYear_Note_12
,secondYear.Note_13	secondYear_Note_13
,secondYear.Note_14	secondYear_Note_14
,secondYear.Note_15	secondYear_Note_15
,secondYear.Note_16	secondYear_Note_16
,secondYear.Note_17	secondYear_Note_17
,secondYear.Note_18	secondYear_Note_18
,secondYear.Note_19	secondYear_Note_19
,secondYear.Note_20	secondYear_Note_20
,secondYear.Note_21	secondYear_Note_21
,secondYear.Note_22 secondYear_Note_22
,secondYear.Total secondYear_Total

from 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @fDate)
) 
as firstYear
full outer join 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @sDate)
) 
as secondYear

on SUBSTRING(firstYear.PeriodID,1,2) = SUBSTRING(secondYear.PeriodID,1,2)
and firstYear.BranchCode = secondYear.BranchCode
order by isnull(firstYear.PeriodID,secondYear.PeriodID),firstYear.BranchCode


";
                #endregion

                if (parameterVm.AllBranch)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", parameterVm.FromDate);
                cmd.Parameters.AddWithValue("@sDate", parameterVm.ToDate);
                cmd.Parameters.AddWithValue("@BranchId", parameterVm.BranchId);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetPurchase9_1_Comparison_Monthly(ParameterVM parameterVm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"

;with cte 
as
(
	select PeriodID, BranchId
	,isnull(LineA,0)+isnull(LineC,0) Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '10'

	union all 

	select PeriodID, BranchId
	, 0 Note_10
	, isnull(LineA,0)+isnull(LineC,0) Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '11'

		union all 


	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, isnull(LineA,0)+isnull(LineC,0) Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '12'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, isnull(LineA,0)+isnull(LineC,0) Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '13'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, isnull(LineA,0)+isnull(LineC,0) Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '14'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, isnull(LineA,0)+isnull(LineC,0) Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '15'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, isnull(LineA,0)+isnull(LineC,0) Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '16'

		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, isnull(LineA,0)+isnull(LineC,0) Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '17'

	
		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, isnull(LineA,0)+isnull(LineC,0) Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '18'

		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, isnull(LineA,0)+isnull(LineC,0) Note_19
	, 0 Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '19'

	
		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, isnull(LineA,0)+isnull(LineC,0) Note_20
	, 0 Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '20'

	
		union all 

	
	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, isnull(LineA,0)+isnull(LineC,0) Note_21
	, 0 Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '21'

		union all 

	select PeriodID, BranchId
	, 0 Note_10
	, 0 Note_11
	, 0 Note_12
	, 0 Note_13
	, 0 Note_14
	, 0 Note_15
	, 0 Note_16
	, 0 Note_17
	, 0 Note_18
	, 0 Note_19
	, 0 Note_20
	, 0 Note_21
	, isnull(LineA,0)+isnull(LineC,0) Note_22
	,  isnull(LineA,0)+isnull(LineC,0) Total
	from VATReturnV2s
	where NoteNo = '22'

)
, NoteSummary 
as
(
select  
PeriodID,isnull(bp.BranchCode,'ALL')BranchCode
,sum(Note_10) Note_10
,sum(Note_11) Note_11
,sum(Note_12) Note_12
,sum(Note_13) Note_13
,sum(Note_14) Note_14
,sum(Note_15) Note_15
,sum(Note_16) Note_16
,sum(Note_17) Note_17
,sum(Note_18) Note_18
,sum(Note_19) Note_19
,sum(Note_20) Note_20
,sum(Note_21) Note_21
,sum(Note_22) Note_22
,sum(Total) Total

from cte left outer join BranchProfiles bp on cte.BranchId = bp.BranchId
where cte.BranchId =@BranchId
group by PeriodID,bp.BranchCode
)

select Format(cast('1900'+SUBSTRING(@fDate,1,2)+'01' as datetime),'MMMM') [First_Month]

,isnull(firstYear.BranchCode,secondYear.BranchCode) BranchCode

,firstYear.Note_10	first_Month_Note_10
,firstYear.Note_11	first_Month_Note_11
,firstYear.Note_12	first_Month_Note_12
,firstYear.Note_13	first_Month_Note_13
,firstYear.Note_14	first_Month_Note_14
,firstYear.Note_15	first_Month_Note_15
,firstYear.Note_16	first_Month_Note_16
,firstYear.Note_17	first_Month_Note_17
,firstYear.Note_18	first_Month_Note_18
,firstYear.Note_19	first_Month_Note_19
,firstYear.Note_20	first_Month_Note_20
,firstYear.Note_21	first_Month_Note_21
,firstYear.Note_22 	first_Month_Note_22
,firstYear.Total 	first_Month_Total

,Format(cast('1900'+SUBSTRING(@sDate,1,2)+'01' as datetime),'MMMM') [Second_Month]

,secondYear.Note_10	second_Month_Note_10
,secondYear.Note_11	second_Month_Note_11
,secondYear.Note_12	second_Month_Note_12
,secondYear.Note_13	second_Month_Note_13
,secondYear.Note_14	second_Month_Note_14
,secondYear.Note_15	second_Month_Note_15
,secondYear.Note_16	second_Month_Note_16
,secondYear.Note_17	second_Month_Note_17
,secondYear.Note_18	second_Month_Note_18
,secondYear.Note_19	second_Month_Note_19
,secondYear.Note_20	second_Month_Note_20
,secondYear.Note_21	second_Month_Note_21
,secondYear.Note_22 second_Month_Note_22
,secondYear.Total   second_Month_Total

from 
(
select * from NoteSummary 
where 1=1
and PeriodID = @fDate
) 
as firstYear
full outer join 
(
select * from NoteSummary 
where 1=1
and PeriodID =@sDate
) 
as secondYear

--SUBSTRING(firstYear.PeriodID,1,2) = SUBSTRING(secondYear.PeriodID,1,2)
--and

on  firstYear.BranchCode = secondYear.BranchCode
order by isnull(firstYear.PeriodID,secondYear.PeriodID),firstYear.BranchCode


";
                #endregion

                if (parameterVm.AllBranch)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", parameterVm.FromDate);
                cmd.Parameters.AddWithValue("@sDate", parameterVm.ToDate);
                cmd.Parameters.AddWithValue("@BranchId", parameterVm.BranchId);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetPurchase9_1_Total(ParameterVM parameterVm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"

;with cte 
as
(
	select PeriodID, BranchId, LineA, LineB, LineC, 'Sales' TransactionType
	from VATReturnV2s
	where NoteNo = '23'

)
,NoteSummary 
as
(
	select PeriodID,Isnull(bp.BranchCode,'ALL')BranchCode
	, TransactionType
	, sum(LineA)[Value]
	, sum(LineB) SD
	, sum(LineC) VAT
	from cte left outer join BranchProfiles bp on cte.BranchId = bp.BranchId
	where cte.BranchId =@BranchId
	group by PeriodID,bp.BranchCode,TransactionType
)

--select * from NoteSummary
--order by PeriodID,BranchCode, TransactionType

select Format(cast('1900'+SUBSTRING(isnull(firstYear.PeriodID,secondYear.PeriodID),1,2)+'01' as datetime),'MMMM') [Month]
--,firstYear.PeriodID,secondYear.PeriodID
,isnull(firstYear.BranchCode,secondYear.BranchCode) BranchCode
,isnull(firstYear.TransactionType,secondYear.TransactionType) TransactionType

,firstYear.Value firstYear_Value
,firstYear.SD firstYear_SD
,firstYear.VAT firstYear_VAT

,secondYear.Value secondYear_Value
,secondYear.SD secondYearr_SD
,secondYear.VAT secondYear_VAT


from 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @fDate)
) 
as firstYear
full outer join 
(
select * from NoteSummary 
where 1=1
--and Format(cast(SUBSTRING('01'+PeriodID, 5, 4) + SUBSTRING('01'+PeriodID, 3, 2) + SUBSTRING('01'+PeriodID, 1, 2) as datetime),'yyyy') = '2020'
and PeriodID in (select PeriodID From FiscalYear where CurrentYear = @sDate)
) 
as secondYear

on SUBSTRING(firstYear.PeriodID,1,2) = SUBSTRING(secondYear.PeriodID,1,2)
and firstYear.BranchCode = secondYear.BranchCode
and firstYear.TransactionType = secondYear.TransactionType

order by isnull(firstYear.PeriodID,secondYear.PeriodID),firstYear.BranchCode


";
                #endregion

                if (parameterVm.AllBranch)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", parameterVm.FromDate);
                cmd.Parameters.AddWithValue("@sDate", parameterVm.ToDate);
                cmd.Parameters.AddWithValue("@BranchId", parameterVm.BranchId);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetCentralData(StockMovementVM parameterVm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"


--declare @startDate datetime = '2021-07-01'
--declare @endDate datetime = '2022-10-01'

;with cte as
(
	select p.ItemNo
	from Products p inner join ProductCategories pc on p.CategoryID = pc.CategoryID
    where 1=1 @condition
)
,Opening as
(

	select ItemNo, sum(StockQuantity)Qty from ProductStocks
	where BranchId =@BranchId 
	and ItemNo in (select ItemNo from cte)
	group by ItemNo

	union all

	select ItemNo, sum(UOMQty)Qty from PurchaseInvoiceDetails
	where BranchId =@BranchId
	and ReceiveDate < @startDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService','PurchaseTollcharge')
	group by ItemNo

	union all

	select ItemNo, sum(UOMQty)Qty from ReceiveDetails
	where BranchId =@BranchId
	and ReceiveDateTime < @startDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('Other','Tender','PackageProduction'  
,'Wastage' ,'Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
,'TradingImport'
)
	group by ItemNo

	union all
	
	select ItemNo, sum(UOMQty)Qty from TransferReceiveDetails
	where BranchId =@BranchId
	and TransactionDateTime < @startDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('61in','62in')
	group by ItemNo

	
	union all
	
	select ItemNo, sum(UOMQty)Qty from SalesInvoiceDetails
	where BranchId =@BranchId
	and InvoiceDateTime < @startDate
	and TransactionType in ('credit')
	and ItemNo in (select ItemNo from cte)
	group by ItemNo

		
	union all
	
	select ItemNo, -1*sum(UOMQty)Qty from IssueDetails
	where BranchId =@BranchId
	and IssueDateTime < @startDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction','PurchaseTollcharge')

	group by ItemNo
			
	union all
	
	select ItemNo, -1*sum(UOMQty)Qty from SalesInvoiceDetails
	where BranchId =@BranchId
	and InvoiceDateTime < @startDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('Other','PackageSale','Wastage',  'CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender',
'Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale','debit')

	group by ItemNo

	union all
	
	select ItemNo, -1*sum(UOMQty)Qty from TransferIssueDetails
	where BranchId =@BranchId
	and TransactionDateTime < @startDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('61out','62out')
	group by ItemNo
		
	union all
	
	select ItemNo, -1*sum(UOMQty)Qty from PurchaseInvoiceDetails
	where BranchId =@BranchId
	and ReceiveDate < @startDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('PurchaseReturn')
	group by ItemNo

)
, Transactions as
(
	select @startDate [Date], ''TransactionCode,'IN'TransactionType,'A'SerialNo, ItemNo, '' FromBranch, 
	'' ToBranch, sum(Qty)OpeningQty, 0 TransactionInQty, 0 TransactionOutQty, sum(Qty)ClosingQty, 'Opening' Remarks
	from Opening
	group by ItemNo

	union all 

	select pid.ReceiveDate [Date], pid.PurchaseInvoiceNo TransactionCode,'IN'TransactionType,'A1' SerialNo
	, pid.ItemNo
	,VendorID FromBranch, pid.BranchId ToBranch 
	, 0 OpeningQty
	, UOMQty TransactionInQty
	, 0 TransactionOutQty
	, 0 ClosingQty
	, 'Purchase' Remarks

	from PurchaseInvoiceDetails pid
	inner join PurchaseInvoiceHeaders ph on pid.PurchaseInvoiceNo = ph.PurchaseInvoiceNo
	where pid.BranchId =@BranchId
	and pid.ReceiveDate  >= @startDate and pid.ReceiveDate <= @endDate
	and pid.ItemNo in (select ItemNo from cte)
	and pid.TransactionType in ('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService','PurchaseTollcharge')

	union all

	select rd.ReceiveDateTime [Date], rd.ReceiveNo TransactionCode,'IN'TransactionType,'A2' SerialNo
	, rd.ItemNo
	,rd.BranchId FromBranch, rd.BranchId ToBranch 
	, 0 OpeningQty
	, UOMQty TransactionInQty
	, 0 TransactionOutQty
	, 0 ClosingQty
	, 'Receive' Remarks 
	from ReceiveDetails rd 
	where rd.BranchId =@BranchId
	and rd.ReceiveDateTime  >= @startDate
	and rd.ItemNo in (select ItemNo from cte)
	and rd.TransactionType in ('Other','Tender','PackageProduction'  
	,'Wastage' ,'Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
	,'TradingImport'
)

	union all
	
	select  td.TransactionDateTime [Date], td.TransferReceiveNo TransactionCode,'IN'TransactionType,'A3' SerialNo
	, td.ItemNo
	,td.TransferFrom FromBranch, td.BranchId ToBranch 
	, 0 OpeningQty
	, UOMQty TransactionInQty
	, 0 TransactionOutQty
	, 0 ClosingQty
	, 'Transfer Receive' Remarks 
	from TransferReceiveDetails td 
	where td.BranchId =@BranchId
	and td.TransactionDateTime >= @startDate and td.TransactionDateTime <= @endDate
	and td.ItemNo in (select ItemNo from cte)
	and td.TransactionType in ('61in','62in')


	
	union all
	
	select sd.InvoiceDateTime [Date], sd.SalesInvoiceNo TransactionCode,'IN'TransactionType,'A4' SerialNo
	, sd.ItemNo
	,sd.BranchId FromBranch, sh.CustomerID ToBranch 
	, 0 OpeningQty
	, UOMQty TransactionInQty
	, 0 TransactionOutQty
	, 0 ClosingQty
	, 'Sale Credit Note' Remarks 
	from SalesInvoiceDetails sd inner join SalesInvoiceHeaders sh on sd.SalesInvoiceNo = sh.SalesInvoiceNo
	where sd.BranchId =@BranchId
	and ItemNo in (select ItemNo from cte)
	and sd.InvoiceDateTime >= @startDate and sd.InvoiceDateTime <= @endDate
	and sd.TransactionType in ('credit')


		
	union all
	
	select id.IssueDateTime [Date], id.IssueNo TransactionCode,'OUT'TransactionType,'B1' SerialNo
	, id.ItemNo
	,id.BranchId FromBranch, id.BranchId ToBranch 
	, 0 OpeningQty
	, 0 TransactionInQty
	, UOMQty TransactionOutQty
	, 0 ClosingQty
	, 'Issue' Remarks
	from IssueDetails id
	where BranchId =@BranchId
	and ItemNo in (select ItemNo from cte)
	and IssueDateTime >= @startDate and IssueDateTime <= @endDate
	and TransactionType in ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction','PurchaseTollcharge')


			
	union all
	
	select 
	sd.InvoiceDateTime [Date], sd.SalesInvoiceNo TransactionCode,'OUT'TransactionType,'B2' SerialNo
	, sd.ItemNo
	,sd.BranchId FromBranch, sh.CustomerID ToBranch 
	, 0 OpeningQty
	, 0 TransactionInQty
	, UOMQty TransactionOutQty
	, 0 ClosingQty
	, 'Sale' Remarks 
	from SalesInvoiceDetails sd inner join SalesInvoiceHeaders sh on sd.SalesInvoiceNo = sh.SalesInvoiceNo
	where 
		sd.BranchId =@BranchId
		and ItemNo in (select ItemNo from cte)
	and sd.InvoiceDateTime >= @startDate and sd.InvoiceDateTime <= @endDate
	and sd.TransactionType in ('Other','PackageSale','Wastage',  'CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender',
'Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale','debit')



	union all
	
	select tid.TransactionDateTime [Date], tid.TransferIssueNo TransactionCode,'OUT'TransactionType,'B3' SerialNo
	, tid.ItemNo
	,tid.BranchId FromBranch, tid.TransferTo ToBranch 
	, 0 OpeningQty
	, 0 TransactionInQty
	, UOMQty TransactionOutQty
	, 0 ClosingQty
	, 'Transfer Issue' Remarks 
	from TransferIssueDetails tid
	where BranchId =@BranchId
	and TransactionDateTime >= @startDate and TransactionDateTime <= @endDate
	and ItemNo in (select ItemNo from cte)
	and TransactionType in ('61out','62out')

	union all
		
	select pid.ReceiveDate [Date], pid.PurchaseInvoiceNo TransactionCode,'OUT'TransactionType,'B4' SerialNo
	, pid.ItemNo
	,VendorID FromBranch, pid.BranchId ToBranch 
	, 0 OpeningQty
	, 0 TransactionInQty
	, UOMQty TransactionOutQty
	, 0 ClosingQty
	, 'Purchase Return' Remarks

	from PurchaseInvoiceDetails pid
	inner join PurchaseInvoiceHeaders ph on pid.PurchaseInvoiceNo = ph.PurchaseInvoiceNo
	where pid.BranchId =@BranchId
	and pid.ReceiveDate  >= @startDate and pid.ReceiveDate <= @endDate
	and pid.ItemNo in (select ItemNo from cte)
	and pid.TransactionType in ('PurchaseReturn')

)
select * into #FinalTransactions from Transactions
order by ItemNo, [Date], SerialNo

ALTER TABLE #FinalTransactions
ADD ID INT IDENTITY(1,1) 

ALTER TABLE #FinalTransactions
ADD CONSTRAINT PK_#FinalTransactions PRIMARY KEY(ID)
ALTER TABLE #FinalTransactions
ADD FromBranchName varchar(200) 

ALTER TABLE #FinalTransactions
ADD ToBranchName varchar(200) 


update #FinalTransactions set ClosingQty = calc.ClosingQty

from #FinalTransactions ft 
inner join  
(
	select ID, ItemNo, [Date], SerialNo
	,sum(case when transactionType='In' then TransactionInQty else -1*TransactionOutQty end) over(partition by ItemNo order by ItemNo, [Date], SerialNo,Id)  ClosingQty 
	from #FinalTransactions
) as calc
  
 on calc.ID = ft.ID



 update #FinalTransactions set OpeningQty = calc.OpeningQty
from #FinalTransactions ft 
inner join  
(
	select ID, ItemNo, [Date], SerialNo
	, lag(ClosingQty) over(partition by ItemNo order by ItemNo, [Date], SerialNo,Id)  OpeningQty 
	from #FinalTransactions
) as calc
  
 on calc.ID = ft.ID

update #FinalTransactions set FromBranchName = bp.BranchName
from #FinalTransactions ft inner join 
BranchProfiles bp on bp.BranchID = ft.FromBranch
where ft.Remarks not in ('Purchase Return', 'Purchase')

update #FinalTransactions set ToBranchName = bp.BranchName
from #FinalTransactions ft inner join 
BranchProfiles bp on bp.BranchID = ft.ToBranch
where ft.Remarks not in ('sale','Sale Credit Note')


update #FinalTransactions set FromBranchName = bp.VendorName
from #FinalTransactions ft inner join 
Vendors bp on bp.VendorID = ft.FromBranch
where ft.Remarks  in ('Purchase Return', 'Purchase')

update #FinalTransactions set ToBranchName = bp.CustomerName
from #FinalTransactions ft inner join 
Customers bp on bp.CustomerID = ft.ToBranch
where ft.Remarks  in ('sale','Sale Credit Note')

select [Date]
, p.ProductCode
,p.productName
,TransactionCode
, Remarks
, FromBranchName [From]
, ToBranchName [To]
, OpeningQty
, TransactionInQty Purchase_Production_TransferIn_Quantity
, TransactionOutQty Sale_TransferOutQuantity
, ClosingQty

from #FinalTransactions ft inner join Products p on ft.ItemNo = p.ItemNo
order by ft.ItemNo, [Date], ft.SerialNo


drop table #FinalTransactions
";
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                string condition = "";

                if (!string.IsNullOrEmpty(parameterVm.ProductType))
                {
                    condition += " and pc.IsRaw=@type";
                    cmd.Parameters.AddWithValue("@type", parameterVm.ProductType);
                }
                else if (!string.IsNullOrEmpty(parameterVm.CategoryId))
                {
                    condition += " and pc.CategoryName=@CategoryId";
                    cmd.Parameters.AddWithValue("@CategoryId", parameterVm.CategoryId);
                }
                else if (!string.IsNullOrEmpty(parameterVm.ItemNo))
                {
                    condition += " and p.ItemNo=@ItemNo";
                    cmd.Parameters.AddWithValue("@ItemNo", parameterVm.ItemNo);
                }

                cmd.CommandText = cmd.CommandText.Replace("@condition", condition);

                if (parameterVm.BranchId == 0)
                {
                    cmd.CommandText = cmd.CommandText.Replace("=@BranchId", ">@BranchId");
                }

                cmd.Parameters.AddWithValue("@startDate", parameterVm.StartDate);
                cmd.Parameters.AddWithValue("@endDate", parameterVm.ToDate);
                cmd.Parameters.AddWithValue("@BranchId", parameterVm.BranchId);

                cmd.CommandTimeout = 500;
                //cmd.CommandText = sqlText;
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        #region VAT 6.2 - Sale Register

        //6_2
        public DataSet VAT6_2xx(VAT6_2ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");
            string PDesc = "N";
            #endregion

            #region Try

            try
            {

                #region Settings Value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");
                PDesc = commonDal.settingsDesktop("VAT6_2", "ProductDescription");

                #endregion

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Checkpoint

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += " from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += " where p.ItemNo = '" + vm.ItemNo + "'";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }

                #endregion

                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"
                
------DECLARE @StartDate DATETIME;
------DECLARE @EndDate DATETIME;
------DECLARE @post1 VARCHAR(2);
------DECLARE @post2 VARCHAR(2);
------DECLARE @ItemNo VARCHAR(20);
------DECLARE @IsExport VARCHAR(20);
------SET @IsExport ='No';
------SET @Itemno='24';
------SET @post1='Y';
------SET @post2='N';
------SET @StartDate='2014-04-01';
------SET @EndDate= '2014-04-27';
------DECLARE @BranchId  as int = 1;


declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200)
,CreatedDateTime   datetime  NULL, UnitRate decimal(25,9),ProductDesc varchar(500), ClosingRate decimal(25,9),AdjustmentValue decimal(25,9)
)

CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9),AdjustmentValue decimal(25,9)) 
 
";
                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1


";

                #endregion

                #region Conditions
                string code = new CommonDAL().settingValue("CompanyCode", "Code");

                if (code.ToLower() == "cp")
                {
                    sqlText += @"  and Products.BranchId=@BranchId";
                }
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";

                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";

                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @"  ) as a

";

                #endregion

                #region Transaction Data

                if (vm.Opening == false)
                {
                    sqlText += @"";

                    #region VAT 6.2.1 False / Receive Data

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive Data

                        sqlText += @"
-------------------------------------------------- Start Receive --------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
";
                        #region 'Other','Tender','PackageProduction' ,'Wastage','SaleWastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService' ,'TradingImport'

                        sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',rd.ItemNo,
------CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(rd.SubTotal,0) AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,rd.TransactionType--'Receive'
,rd.ReceiveDateTime,rd.CostPrice,rd.AdjustmentValue
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('Other','Tender','PackageProduction' 
,'Wastage' ,'Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
,'TradingImport'
)
AND rd.BranchId=@BranchId
";


                        #endregion

                        #region Comments Nov-01-2020
                        if (vm.StockMovement == false)
                        {
                            sqlText += @"
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'A1', InvoiceDateTime,SalesInvoiceNo,'Receive',ItemNo
------,CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN( 'RawSale')
AND BranchId=@BranchId

";
                        }
                        #endregion

                        #region 'TollReceive'

                        sqlText += @"
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',rd.ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,rd.TransactionType--'Receive'
,rd.ReceiveDateTime,rd.CostPrice,rd.AdjustmentValue
from ReceiveDetails RD 
left outer join products p on RD.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('TollReceive')
and pc.IsRaw in('finish')
AND rd.BranchId=@BranchId



";

                        #endregion

                        #region 'ReceiveReturn'

                        sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',rd.ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),-rd.VATAmount
,-rd.SDAmount,RD.TransactionType,rd.CreatedOn,rd.CostPrice,rd.AdjustmentValue
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ReceiveReturn')
AND rd.BranchId=@BranchId
-------------------------------------------------- End Receive --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
						";

                        #endregion

                        #endregion

                        #region Purchase Data

                        #region 'ClientFGReceiveWOBOM'

                        sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'A1', ReceiveDate,PurchaseInvoiceNo,'Receive',ItemNo, SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ) Quantity,VATAmount,SDAmount, 'Client FG Receive without BOM'
,ReceiveDate,CostPrice
from PurchaseInvoiceDetails rd 
where rd.ReceiveDate >= @StartDate and rd.ReceiveDate <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('ClientFGReceiveWOBOM')
AND rd.BranchId=@BranchId
";

                        #endregion

                        #endregion
                    }

                    #endregion

                    #region Sale Data

                    #region 'Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender',
                    //'ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale'
                    if (vm.StockMovement == false)
                    {
                        sqlText += @"

-------------------------------------------------- Start Sale --------------------------------------------------
---------------------------------------------------------------------------------------------------------------- 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
------,CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale' )
AND BranchId=@BranchId

";

                    }
                    sqlText += @"

-------------------------------------------------- Start Sale --------------------------------------------------
---------------------------------------------------------------------------------------------------------------- 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
------,CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other','PackageSale','Wastage',  'CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender',
'Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale')
AND BranchId=@BranchId

";
                    if (vm.StockMovement == false)
                    {
                        sqlText += @"

-------------------------------------------------- Start Sale --------------------------------------------------
---------------------------------------------------------------------------------------------------------------- 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
------,CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN( 'SaleWastage' )
AND BranchId=@BranchId

";
                    }
                    #endregion

                    #region 'Debit'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
, CurrencyValue AS SubTotal
,(  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit')
AND BranchId=@BranchId

";

                    #endregion

                    #region 'DisposeFinish'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,'Dispose Finish Sale' TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where 1=1 
and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) 
and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeFinish')
AND BranchId=@BranchId

";
                    #endregion

                    #region 'Credit','RawCredit'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo,
----------CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
-CurrencyValue AS SubTotal,
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit','RawCredit')
AND BranchId=@BranchId

";

                    #endregion

                    #endregion

                    #region Dispose Finish Data

                    #region 'Other'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'B1', TransactionDateTime,DisposeNo,'Sale',FinishItemNo ItemNo, (isnull(Quantity,0) * ISNULL(UnitPrice,0)) AS SubTotal
,isnull(Quantity,0) Quantity,0 VATAmount,0 SDAmount, 'Finish Dispose'
,TransactionDateTime,0 NBRPrice
from DisposeFinishs
where 1=1
AND TransactionDateTime >= @StartDate and  TransactionDateTime < DATEADD(d,1,@EndDate) 
and FinishItemNo in(select distinct ItemNo from #ProductReceive)
AND ISNULL(IsSaleable,'N')='N'
AND (Quantity>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other')
AND BranchId=@BranchId

";
                    #endregion

                    #endregion

                }

                #endregion

                #region Opening Data

                sqlText += @"
------select @OpeningDate = p.OpeningDate from Products p
------WHERE ItemNo=@ItemNo
------
------IF(@OpeningDate<@StartDate)

set @OpeningDate=@StartDate
insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)

SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
 SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost
	FROM (
SELECT distinct  ItemNo, 0 Quantity, 0 Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'

";

                #region Opening 6.2 False / Value from Product

                if (vm.Opening6_2 == false)
                {

                    if (vm.BranchId > 1)
                    {
                        sqlText += @"		 
UNION ALL 
SELECT distinct  ItemNo, isnull(StockQuantity,0) Quantity, isnull(p.StockValue,0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
--group by ItemNo

";
                    }
                    else
                    {
                        sqlText += @"		 
UNION ALL 
SELECT distinct  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
--AND BranchId='1'
------group by ItemNo

 ";


                        if (vm.Opening == false)
                        {
                            sqlText += @"		 
UNION ALL 
SELECT distinct  ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
group by ItemNo
";
                        }
                    }
                }

                #endregion

                sqlText += @"		
";
                #region Rceives Data

                if (vm.VAT6_2_1 == false)
                {

                    #region Receive Data

                    #region 'Other','Tender','PackageProduction','Wastage','SaleWastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TradingImport'

                    sqlText += @" 
UNION ALL 
(SELECT distinct  ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0) END AS Amount
 FROM ReceiveDetails WHERE 1=1
 AND (Post =@post1 or Post= @post2) AND ReceiveDateTime>= '07/01/2019' and ReceiveDateTime < @StartDate  
AND TransactionType IN('Other','Tender','PackageProduction'  
,'Wastage' ,'Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
,'TradingImport'
)AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                    #region 'TollReceive'

                    sqlText += @" 
UNION ALL 
(SELECT distinct  RD.ItemNo,isnull(sum(isnull(RD.UOMQty,isnull(RD.Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(RD.DollerValue,0)),0) ELSE isnull(sum(isnull(RD.SubTotal+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0) END AS SubTotal
 FROM ReceiveDetails  RD
left outer join products p on RD.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
WHERE 1=1
 AND (rd.Post =@post1 or rd.Post= @post2)   
 AND RD.ReceiveDateTime>= '07/01/2019' and RD.ReceiveDateTime < @StartDate  
AND rd.TransactionType IN('TollReceive')
and pc.IsRaw in('finish')
AND RD.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND rd.BranchId=@BranchId
group by RD.ItemNo
) 
";

                    #endregion

                    #endregion

                    #region Purchase Data

                    #region 'ClientFGReceiveWOBOM'

                    sqlText += @" 
UNION ALL 
(
SELECT  distinct ItemNo,isnull(sum(Quantity),0) Quantity, isnull(sum(SubTotal),0)   AS SubTotal
FROM PurchaseInvoiceDetails   WHERE 1=1 
AND (Post =@post1 or Post= @post2)  
AND ReceiveDate>= '07/01/2019' and ReceiveDate < @StartDate  
AND TransactionType IN('ClientFGReceiveWOBOM')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";
                    #endregion

                    #endregion

                }

                #region 'ReceiveReturn'

                sqlText += @"
UNION ALL
(SELECT distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0) END AS SubTotal
FROM ReceiveDetails WHERE 1=1
 AND (Post =@post1 or Post= @post2)    AND ReceiveDateTime>= '07/01/2019' and ReceiveDateTime < @StartDate  
 and TransactionType IN('ReceiveReturn') AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 

";
                #endregion

                #endregion

                #region Sales Data

                #region 'Other','PackageSale','Wastage','SaleWastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender',
                //'ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale'

                sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
--CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
-isnull(sum(isnull(CurrencyValue+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN(
'Other'

,'PackageSale','Wastage', 'CommercialImporter','ServiceNS','Export','ExportServiceNS'
,'ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender'
,'InternalIssue','Service','ExportService','TollSale')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";
                if (vm.StockMovement == false)
                {
                    sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
--CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
-isnull(sum(isnull(CurrencyValue+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN( 'SaleWastage' )
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";
                }
                #endregion

                #region 'Debit'

                sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo
,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleNewQuantity
,-isnull(sum(isnull(CurrencyValue+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   
WHERE 1=1
AND (Post =@post1 or Post= @post2)  
AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN('Debit')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";
                #endregion

                #region 'DisposeFinish'

                sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
-isnull(sum(isnull(CurrencyValue+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN('DisposeFinish')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";
                #endregion

                #region 'Credit','RawCredit'

                sqlText += @" 
UNION ALL  
(SELECT distinct  ItemNo
,isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleCreditQuantity
----------,CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
,isnull(sum(isnull(CurrencyValue+(isnull((isnull(UOMQty,isnull(Quantity,0))),0))*AdjustmentValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
 AND TransactionType in( 'Credit','RawCredit') AND ItemNo  in(select distinct ItemNo from #ProductReceive)

AND BranchId=@BranchId
group by ItemNo

)
";

                #endregion

                #endregion

                #region Dispose Finish Data

                #region 'Other'

                sqlText += @" 
UNION ALL 
(
SELECT  distinct FinishItemNo ItemNo,-isnull(sum(Quantity),0) DisposeQuantity, -0   AS SubTotal
FROM DisposeFinishs   WHERE 1=1 
 AND (Post =@post1 or Post= @post2)  
 AND TransactionDateTime>= '07/01/2019' and TransactionDateTime < @StartDate  
AND TransactionType IN('Other')
AND FinishItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND ISNULL(IsSaleable,'N')='N'
group by FinishItemNo
)
";
                #endregion

                #endregion




                sqlText += @" 
) AS a GROUP BY a.ItemNo


";

                #endregion

                #region Insert, Update, Select VAT 6.2

                sqlText += @"

insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)
select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate,AdjustmentValue  
from #VATTemp_17
order by dailydate,SerialNo;


update #VAT_17 set StartDateTime=@StartDate where SerialNo='A' 


update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)
AND BranchId=@BranchId 


update #VAT_17 set #VAT_17.ProductDesc=Products.productName
	 from Products where Products.itemNo=#VAT_17.ItemNo
";

                if (PDesc.ToLower() == "y")
                {
                    sqlText += @"  
update #VAT_17 set #VAT_17.ProductDesc=SalesInvoiceDetails.ProductDescription
from SalesInvoiceDetails where SalesInvoiceDetails.itemNo=#VAT_17.ItemNo and SalesInvoiceDetails.SalesInvoiceNo=#VAT_17.TransID
";
                }

                // update #VAT_17 set UnitCost=#ProductReceive.OpeningRate*Quantity where TransType='opening' and item no =ProductReceive.itemNo
                // update #VAT_17 set ClosingRate=ProductReceive.ClosingRate where   item no =ProductReceive.itemNo




                sqlText += @" 
select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
#VAT_17.TransID,#VAT_17.TransType,
isnull(c.CustomerName,'-')CustomerName,
isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
isnull(c.Address3,'-')Address3,
isnull(c.VATRegistrationNo,'-')VATRegistrationNo
,#VAT_17.ProductDesc ProductName 
,p.ProductCode
,p.UOM
,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
,#VAT_17.SD,#vat_17.UnitCost,#VAT_17.remarks
,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime, isnull(#vat_17.UnitRate ,0)UnitRate ,#VAT_17.ItemNo,#VAT_17.AdjustmentValue
from #VAT_17  left outer JOIN 
Customers as C on #VAT_17.CustomerID=c.CustomerID 
left outer join Products P on #VAT_17.ItemNo=p.ItemNo


order by #VAT_17.StartDateTime,#VAT_17.SerialNo





DROP TABLE #VAT_17
DROP TABLE #VATTemp_17
DROP TABLE #ProductReceive

                ";

                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion SQL

                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT17.CommandTimeout = 500;
                #region Parameter
                objCommVAT17.Parameters.AddWithValue("@PDesc", PDesc);
                objCommVAT17.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }

                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }
                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }
                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }
                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                }
                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);




                #endregion

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }



        //6_2
        public DataSet VAT6_2_Backup28082023(VAT6_2ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");
            string PDesc = "N";
            VATRegistersDAL _vatRegistersDAL = new VATRegistersDAL();
            #endregion

            #region Try

            try
            {

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Settings Value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT", currConn, transaction, connVM);
                PDesc = commonDal.settings("VAT6_2", "ProductDescription", currConn, transaction, connVM);
                ////PDesc = commonDal.settingsDesktop("VAT6_2", "ProductDescription");
                bool Permanent6_2 = true;//commonDal.settings("VAT6_2", "6_2Permanent") == "Y";

                #endregion

                string[] result = { };
                if (Permanent6_2 && !vm.PermanentProcess && !vm.MainProcess)
                {
                    if (vm.BranchWise)
                    {
                        result = Save6_2_FromPermanent_Branch_Backup28082023(vm, vExportInBDT, currConn, transaction, PDesc, connVM);

                    }
                    else
                    {
                        FileLogger.Log("Save6_2_FromPermanent", "Save6_2_FromPermanent Call Start", DateTime.Now.ToString());

                        result = Save6_2_FromPermanent(vm, vExportInBDT, currConn, transaction, PDesc, connVM);
                        FileLogger.Log("Save6_2_FromPermanent", "Save6_2_FromPermanent Call End", DateTime.Now.ToString());

                    }

                    //check end date limit
                    //add flag for skiping delete and opening delete
                    //check if update qurey ok
                    // check product typ

                    //string getMaxDate = @"select max(startdatetime) from VAT6_2_Permanent where 1=1 ";

                    //if (vm.BranchWise)
                    //{
                    //    getMaxDate = @"select max(startdatetime) from VAT6_2_Permanent_Branch where 1=1 ";

                    //    getMaxDate += " and BranchId=" + vm.BranchId;
                    //}

                    //if (!string.IsNullOrEmpty(vm.ItemNo))
                    //{
                    //    getMaxDate += " and ItemNo='" + vm.ItemNo + "'";
                    //}

                    //SqlCommand sqlCommand = new SqlCommand(getMaxDate, currConn, transaction);
                    //sqlCommand.CommandTimeout = 1000;
                    //var maxDate = sqlCommand.ExecuteScalar();
                    //DateTime permanent_Max = Convert.ToDateTime(maxDate == DBNull.Value ? null : maxDate);

                    //if (Convert.ToDateTime(vm.StartDate) > permanent_Max)
                    //{
                    //    vm.SkipOpening = true;

                    //    result = result = Save6_2(vm, vExportInBDT, currConn, transaction, PDesc, connVM);
                    //}
                    //else if (Convert.ToDateTime(vm.EndDate) > permanent_Max)
                    //{
                    //    vm.StartDate = permanent_Max.AddDays(1).ToString("yyyy-MM-dd");
                    //    vm.SkipOpening = true;
                    //    result = result = Save6_2(vm, vExportInBDT, currConn, transaction, PDesc, connVM);
                    //}

                }
                else
                {
                    //FileLogger.Log("Save6_2", "Save6_2 Call Start", DateTime.Now.ToString());
                    result = _vatRegistersDAL.Save6_2(vm, vExportInBDT, currConn, transaction, PDesc, connVM);
                    //FileLogger.Log("Save6_2", "Save6_2 Call End", DateTime.Now.ToString());

                }

                #region Update Negative

                string updateNegativeValue =
                    @"
update VAT6_2 set RunningTotalValue= 0, RunningTotalValueFinal=0
from (
select distinct ItemNo,min(StartDateTime)StartDateTime  from VAT6_2_Permanent 
where 1=1 and TransType not in ('opening') 
and RunningTotal<0
--and VAT6_2.UserId =@UserId
group by ItemNo
) a
where VAT6_2.ItemNo = a.ItemNo and VAT6_2.StartDateTime>= a.StartDateTime
and VAT6_2.UserId =@UserId
";



                //if (!string.IsNullOrEmpty(vm.ItemNo))
                //{
                //    updateNegativeValue = updateNegativeValue.Replace("@itemCondition2", " and VAT6_2_Permanent.ItemNo = @ItemNo");
                //}
                //else
                //{
                //    updateNegativeValue = updateNegativeValue.Replace("@itemCondition2", "");
                //}
                SqlCommand cmdupdateNegativeValue = new SqlCommand(updateNegativeValue, currConn, transaction);
                cmdupdateNegativeValue.Parameters.AddWithValue("@UserId", vm.UserId);

                //if (!string.IsNullOrEmpty(vm.ItemNo))
                //{
                //    cmd.Parameters.AddWithValueAndParamCheck("@ItemNo", vm.ItemNo);
                //}
                //  cmdupdateNegativeValue.ExecuteNonQuery();


                #endregion
                //FileLogger.Log("Save6_2", "GetVAT6_2SelectQuery Call Start", DateTime.Now.ToString());

                sqlText = GetVAT6_2SelectQuery();

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 1000;
                cmd.Parameters.AddWithValue("@StartDate", vm.StartDate);
                cmd.Parameters.AddWithValue("@UserId", vm.UserId);
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dataSet);


                if (Vtransaction == null)
                {
                    transaction.Commit();
                }
                //FileLogger.Log("Save6_2", "GetVAT6_2SelectQuery Call End", DateTime.Now.ToString());


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                //if (Vtransaction == null)
                //{
                //    transaction.Rollback();
                //}
                FileLogger.Log("ReportDSDAL", "VAT6_2", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }
        //6_2 Monthly
        public DataSet VAT6_2_Permanent_DayWise(VAT6_2ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables


            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");
            string PDesc = "N";
            #endregion

            #region Try

            try
            {



                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Settings Value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT", currConn, transaction, connVM);
                PDesc = commonDal.settings("VAT6_2", "ProductDescription", currConn, transaction, connVM);
                ////PDesc = commonDal.settingsDesktop("VAT6_2", "ProductDescription");
                bool Permanent6_2 = true;//commonDal.settings("VAT6_2", "6_2Permanent") == "Y";

                #endregion

                string[] result = { };
                if (Permanent6_2 && !vm.PermanentProcess && !vm.MainProcess)
                {
                    if (vm.BranchWise)
                    {
                        result = Save6_2_FromPermanent_DayWise_Branch(vm, vExportInBDT, currConn, transaction, PDesc, connVM);

                    }
                    else
                    {
                        result = Save6_2_FromPermanent_DayWise(vm, vExportInBDT, currConn, transaction, PDesc, connVM);
                    }


                    //check end date limit
                    //add flag for skiping delete and opening delete
                    //check if update qurey ok
                    // check product typ

                    string getMaxDate = @"select max(startdatetime) from VAT6_2_Permanent_DayWise where 1=1 ";

                    if (vm.BranchWise)
                    {
                        getMaxDate = @"select max(startdatetime) from VAT6_2_Permanent_DayWise_Branch where 1=1 ";

                        getMaxDate += " and BranchId=" + vm.BranchId;
                    }

                    if (!string.IsNullOrEmpty(vm.ItemNo))
                    {
                        getMaxDate += " and ItemNo='" + vm.ItemNo + "'";
                    }

                    SqlCommand sqlCommand = new SqlCommand(getMaxDate, currConn, transaction);
                    sqlCommand.CommandTimeout = 1000;
                    var maxDate = sqlCommand.ExecuteScalar();
                    DateTime permanent_Max = Convert.ToDateTime(maxDate == DBNull.Value ? null : maxDate);

                    //    if (Convert.ToDateTime(vm.StartDate) > permanent_Max)
                    //    {
                    //        vm.SkipOpening = true;

                    //        result = result = Save6_2(vm, vExportInBDT, currConn, transaction, PDesc, connVM);
                    //    }
                    //    else if (Convert.ToDateTime(vm.EndDate) > permanent_Max)
                    //    {
                    //        vm.StartDate = permanent_Max.AddDays(1).ToString("yyyy-MM-dd");
                    //        vm.SkipOpening = true;
                    //        result = result = Save6_2(vm, vExportInBDT, currConn, transaction, PDesc, connVM);
                    //    }

                }
                //else
                //{
                //    result = Save6_2(vm, vExportInBDT, currConn, transaction, PDesc, connVM);

                //}

                #region Update Negative

                string updateNegativeValue =
                    @"
update VAT6_2 set RunningTotalValue= 0, RunningTotalValueFinal=0
from (
select distinct ItemNo,min(StartDateTime)StartDateTime  from VAT6_2_Permanent_DayWise 
where 1=1 and TransType not in ('opening') 
and RunningTotal<0
--and VAT6_2.UserId =@UserId
group by ItemNo
) a
where VAT6_2.ItemNo = a.ItemNo and VAT6_2.StartDateTime>= a.StartDateTime
and VAT6_2.UserId =@UserId
";



                //if (!string.IsNullOrEmpty(vm.ItemNo))
                //{
                //    updateNegativeValue = updateNegativeValue.Replace("@itemCondition2", " and VAT6_2_Permanent.ItemNo = @ItemNo");
                //}
                //else
                //{
                //    updateNegativeValue = updateNegativeValue.Replace("@itemCondition2", "");
                //}
                SqlCommand cmdupdateNegativeValue = new SqlCommand(updateNegativeValue, currConn, transaction);
                cmdupdateNegativeValue.Parameters.AddWithValue("@UserId", vm.UserId);

                //if (!string.IsNullOrEmpty(vm.ItemNo))
                //{
                //    cmd.Parameters.AddWithValueAndParamCheck("@ItemNo", vm.ItemNo);
                //}
                //  cmdupdateNegativeValue.ExecuteNonQuery();


                #endregion

                sqlText = GetVAT6_2SelectQuery();

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 1000;
                cmd.Parameters.AddWithValue("@StartDate", vm.StartDate);
                cmd.Parameters.AddWithValue("@UserId", vm.UserId);
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dataSet);


                if (Vtransaction == null)
                {
                    transaction.Commit();
                }


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                //if (Vtransaction == null)
                //{
                //    transaction.Rollback();
                //}
                FileLogger.Log("ReportDSDAL", "VAT6_2_Permanent_DayWise", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2_Permanent_DayWise", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet VAT6_2_1(VAT6_2ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");
            string PDesc = "N";
            ProductDAL productDal = new ProductDAL();
            #endregion

            #region Try

            try
            {
                #region Settings Value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");
                PDesc = commonDal.settingsDesktop("VAT6_2", "ProductDescription");
                bool Permanent6_2 = true;//commonDal.settings("VAT6_2", "6_2Permanent") == "Y";

                #endregion

                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                string[] result = { };
                if (!vm.MainProcess)
                {
                    if (vm.BranchWise)
                    {
                        result = Save6_2_1_FromPermanent_Branch(vm, currConn, transaction);

                    }
                    else
                    {
                        result = Save6_2_1_FromPermanent(vm, currConn, transaction);
                    }

                    string getMaxDate = @"select max(startdatetime) from VAT6_2_1_Permanent where 1=1 ";

                    if (vm.BranchWise)
                    {
                        getMaxDate = @"select max(startdatetime) from VAT6_2_1_Permanent_Branch where 1=1 ";

                        getMaxDate += " and BranchId=" + vm.BranchId;
                    }

                    if (!string.IsNullOrEmpty(vm.ItemNo))
                    {
                        getMaxDate += " and ItemNo='" + vm.ItemNo + "'";
                    }


                    SqlCommand sqlCommand = new SqlCommand(getMaxDate, currConn, transaction);
                    object maxDate = sqlCommand.ExecuteScalar();
                    DateTime permanent_Max = Convert.ToDateTime(maxDate == DBNull.Value ? null : maxDate);


                    string code = commonDal.settings("CompanyCode", "Code", currConn, transaction);

                    //if (!string.Equals(code, "bata", StringComparison.InvariantCultureIgnoreCase))
                    //{
                    //    if (Convert.ToDateTime(vm.StartDate) > permanent_Max)
                    //    {
                    //        vm.SkipOpening = true;

                    //        result = productDal.StockMovement6_2_1_PermanentProcess(vm, currConn, transaction);
                    //    }
                    //    else if (Convert.ToDateTime(vm.EndDate) > permanent_Max)
                    //    {
                    //        vm.StartDate = permanent_Max.AddDays(1).ToString("yyyy-MM-dd");
                    //        vm.SkipOpening = true;
                    //        result = productDal.StockMovement6_2_1_PermanentProcess(vm, currConn, transaction);
                    //    }
                    //}



                }
                //else
                //{
                //    result = Save6_2(vm, vExportInBDT, currConn, transaction, PDesc);
                //}



                sqlText = @"
select  [Id]
      ,[SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,case when [TransType]='Receive' then 'Purchase' else [TransType] end [TransType]
      ,[VendorName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[HSCodeNo]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[ItemNo]
      ,[StockType]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[DeclaredPrice]
      ,[RunningOpeningValueFinal]
      ,[UnitRate]
      ,[CustomerId]
      ,[AdjustmentValue]
      ,[RunningOpeningQuantityFinal]
      ,[RunningOpeningQuantityValue]
      ,[BranchId]
      ,[UserId]
from ProductStockMISKas
where UserId = @UserId
order by ItemNo, StartDateTime, SerialNo";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValueAndParamCheck("@UserId", vm.UserId);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataSet);



                if (Vtransaction == null)
                {
                    transaction.Commit();
                }


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                if (Vtransaction == null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("ReportDSDAL", "VAT6_2", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }

        private string GetVAT6_2SelectQuery()
        {
            return @"

select  VAT6_2.SerialNo
,convert (varchar,VAT6_2.StartDateTime,120)StartDateTime
,convert (varchar,VAT6_2.StartDateTime,120)Day,
VAT6_2.StartingQuantity,VAT6_2.StartingAmount,
VAT6_2.TransID,VAT6_2.TransType,
(case when VAT6_2.Remarks = 'Transfer Issue' then isnull(bp.BranchName,'-') else isnull(c.CustomerName,'-') end )CustomerName,
(case when VAT6_2.Remarks = 'Transfer Issue' then isnull(bp.Address,'-') else isnull(c.Address1,'-') end )Address1,
--isnull(c.Address1,'-')Address1,
isnull(c.Address2,'-')Address2,
isnull(c.Address3,'-')Address3,
isnull(c.VATRegistrationNo,'-')VATRegistrationNo
,case when p.ProductDescription in('N/A','-','') then  p.ProductName else VAT6_2.ProductDesc end  ProductName 
,p.ProductCode
,p.UOM
,isnull(p.HSCodeNo,'NA')HSCodeNo,VAT6_2.Quantity
,isnull(VAT6_2.VATRate,'0')VATRate
,isnull(VAT6_2.SD,0)SD,VAT6_2.UnitCost,VAT6_2.remarks
,isnull(VAT6_2.CreatedDateTime,'1900-01-01')CreatedDateTime, isnull(VAT6_2.UnitRate ,0)UnitRate ,VAT6_2.ItemNo,isnull(VAT6_2.AdjustmentValue,0)AdjustmentValue
,
isnull(ClosingRate,0)ClosingRate,	 
isnull(DeclaredPrice,0)DeclaredPrice ,
isnull(RunningTotal,0)RunningTotal,
isnull(RunningTotalValue,0)RunningTotalValue,
isnull(RunningTotalValueFinal,0)RunningTotalValueFinal,
isnull(RunningOpeningValueFinal,0)RunningOpeningValueFinal,
isnull(RunningOpeningQuantityFinal,0)RunningOpeningQuantityFinal
,(select distinct isnull(ReturnTransactionType,'')ReturnTransactionType from salesinvoicedetails where ItemNo = VAT6_2.ItemNo and SalesinvoiceNo = VAT6_2.TransId)  ReturnTransactionType
--,sd.ReturnTransactionType
--,VAT6_2.ID
from VAT6_2  
left outer JOIN Customers as C on VAT6_2.CustomerID=c.CustomerID  and VAT6_2.TransType='Sale'
left outer JOIN BranchProfiles as BP on VAT6_2.CustomerID=BP.BranchId  and VAT6_2.Remarks='Transfer Issue'
left outer join Products P on VAT6_2.ItemNo=p.ItemNo
--left outer join salesinvoicedetails sd on sd.ItemNo = VAT6_2.ItemNo and sd.SalesinvoiceNo = VAT6_2.TransId
where VAT6_2.UserId =@UserId
order by VAT6_2.StartDateTime,VAT6_2.SerialNo,VAT6_2.ID";
        }


        public string[] Save6_2_Backup28082023(VAT6_2ParamVM vm, string vExportInBDT, SqlConnection currConn, SqlTransaction transaction, string PDesc, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;
                CommonDAL commonDal = new CommonDAL();

                bool Permanent6_2 = commonDal.settings("VAT6_2", "6_2Permanent", currConn, transaction, connVM) == "Y";

                if (Permanent6_2)
                {
                    string maxDate = @"select dateadd(d,1,max(StartDatetime)) from VAT6_2_Permanent";

                    SqlCommand dateCmd = new SqlCommand(maxDate, currConn, transaction);
                    string date = dateCmd.ExecuteScalar().ToString();

                }

                #region Checkpoint

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += " from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += " where p.ItemNo = '" + vm.ItemNo + "'";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }

                #endregion

                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"
                
------DECLARE @StartDate DATETIME;
------DECLARE @EndDate DATETIME;
------DECLARE @post1 VARCHAR(2);
------DECLARE @post2 VARCHAR(2);
------DECLARE @ItemNo VARCHAR(20);
------DECLARE @IsExport VARCHAR(20);
------SET @IsExport ='No';
------SET @Itemno='24';
------SET @post1='Y';
------SET @post2='N';
------SET @StartDate='2014-04-01';
------SET @EndDate= '2014-04-27';
------DECLARE @BranchId  as int = 1;


declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_17(
ID int identity(1,1),SerialId int NULL,SerialNo  varchar (10) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200)
,CreatedDateTime   datetime  NULL, UnitRate decimal(25,9),ProductDesc varchar(1000), ClosingRate decimal(25,9),AdjustmentValue decimal(25,9)
)

CREATE TABLE #VATTemp_17(SerialNo  varchar (10) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9),AdjustmentValue decimal(25,9)) 
 
";
                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1
--and Products.BranchId=@BranchId

";

                #endregion

                #region Conditions
                if (vm.PermanentProcess && vm.FilterProcessItems)
                {
                    sqlText += @"  and Products.ReportType in('VAT6_2','VAT6_1_And_6_2')  and Products.ProcessFlag='Y' ";

                }
                else if (vm.PermanentProcess && !vm.MainProcess)
                {
                    sqlText += @"  and Products.ReportType in('VAT6_2','VAT6_1_And_6_2') ";
                    if (!string.IsNullOrEmpty(vm.ItemNo))
                    {
                        sqlText += " and ItemNo in ('" + vm.ItemNo + "') ";
                    }
                }
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                    else if (vm.Flag == "SCBL_Finish")
                    {
                        sqlText += @"  and IsRaw in('Finish','Export')";
                        sqlText += @"  and Products.ActiveStatus='Y'";

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                if (vm.VAT6_2_1)
                {
                    sqlText += @"  and products.ReportType in('VAT6_2_1')";

                }
                else
                {
                    sqlText += @"  and products.ReportType in('VAT6_2','VAT6_1_And_6_2')";
                }
                sqlText += @"  ) as a

";

                #endregion

                #region Transaction Data

                if (vm.Opening == false)
                {
                    sqlText += @"";

                    #region VAT 6.2.1 False / Receive Data

                    if (vm.VAT6_2_1 == false)
                    {
                        #region Receive Data

                        sqlText += @"
-------------------------------------------------- Start Receive --------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
";

                        #region 'Other','Tender','PackageProduction' ,'Wastage','SaleWastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService' ,'TradingImport'

                        sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',rd.ItemNo,
isnull(rd.SubTotal,0) AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,rd.TransactionType--'Receive'
,rd.ReceiveDateTime,rd.CostPrice,rd.AdjustmentValue
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('Other','Tender','PackageProduction' 
,'Wastage' ,'Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
,'TradingImport'
)
AND rd.BranchId=@BranchId
";
                        sqlText += @"
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A2',rd.TransferDate,h.TransferCode,'Receive',rd.ToItemNo,
isnull(rd.ReceivePrice,0) AS SubTotal, 
isnull(NULLIF(ToQuantity,0),isnull(ToQuantity,0) ),0 VATAmount,0 SDAmount,rd.TransactionType--'Receive'
,rd.TransferDate,rd.ReceivePrice,0 AdjustmentValue
from ProductTransfersDetails RD 
left outer join ProductTransfers h on h.Id =rd.ProductTransferId
where 1=1
and rd.TransferDate >= @StartDate and rd.TransferDate <DATEADD(d,1,@EndDate) 
and rd.ToItemNo in(select distinct ItemNo from #ProductReceive)
AND (ToQuantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('FinishCTC')
AND rd.BranchId=@BranchId
";


                        #endregion

                        #region Comments Nov-01-2020

                        if (vm.StockMovement == false)
                        {
                            sqlText += @"
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'A3', InvoiceDateTime,SalesInvoiceNo,'Receive',ItemNo
------,CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN( 'RawSale')
AND BranchId=@BranchId

";
                        }

                        #endregion

                        #region 'TollReceive'

                        sqlText += @"
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',rd.ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,rd.TransactionType--'Receive'
,rd.ReceiveDateTime,rd.CostPrice,rd.AdjustmentValue
from ReceiveDetails RD 
left outer join products p on RD.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('TollReceive')
and pc.IsRaw in('finish')
AND rd.BranchId=@BranchId



";

                        #endregion



                        #region 'ReceiveReturn'

                        sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',rd.ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),-rd.VATAmount
,-rd.SDAmount,RD.TransactionType,rd.CreatedOn,rd.CostPrice,rd.AdjustmentValue
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ReceiveReturn')
AND rd.BranchId=@BranchId
-------------------------------------------------- End Receive --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
						";

                        #endregion

                        #endregion

                        #region Purchase Data

                        #region 'ClientFGReceiveWOBOM'

                        sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'A5', ReceiveDate,PurchaseInvoiceNo,'Receive',ItemNo, SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ) Quantity,VATAmount,SDAmount, 'Client FG Receive without BOM'
,ReceiveDate,CostPrice
from PurchaseInvoiceDetails rd 
where rd.ReceiveDate >= @StartDate and rd.ReceiveDate <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('ClientFGReceiveWOBOM')
AND rd.BranchId=@BranchId
";

                        #endregion

                        #endregion
                    }

                    #endregion

                    #region Sale Data

                    #region 'Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender',

                    //'ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale'
                    if (vm.StockMovement == false)
                    {
                        sqlText += @"

-------------------------------------------------- Start Sale --------------------------------------------------
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B10', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
------,CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale' )
AND BranchId=@BranchId

";
                    }

                    sqlText += @"

-------------------------------------------------- Start Sale --------------------------------------------------
---------------------------------------------------------------------------------------------------------------- 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other','PackageSale','Wastage',  'CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender',
'Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale')
AND BranchId=@BranchId

";

                    sqlText += @"

-------------------------------------------------- Start Sale --------------------------------------------------
---------------------------------------------------------------------------------------------------------------- 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B2', rd.TransferDate,h.TransferCode,'Sale',FromItemNo
, IssuePrice AS SubTotal
,isnull(NULLIF(FromQuantity,0),isnull(FromQuantity,0) )Quantity
,0 VATAmount
,0 SDAmount
,rd.TransactionType--'Sale'
,rd.TransferDate,IssuePrice,0 AdjustmentValue
from ProductTransfersDetails rd
left outer join ProductTransfers h on h.Id =rd.ProductTransferId
where rd.TransferDate >= @StartDate and 
 rd.TransferDate < DATEADD(d,1,@EndDate) and FromItemNo in(select distinct ItemNo from #ProductReceive)
AND (FromQuantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('FinishCTC')
AND rd.BranchId=@BranchId

";
                    if (vm.StockMovement == false)
                    {
                        sqlText += @"

-------------------------------------------------- Start Sale --------------------------------------------------
---------------------------------------------------------------------------------------------------------------- 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
------,CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN( 'SaleWastage' )
AND BranchId=@BranchId

";
                    }

                    #endregion

                    #region 'Debit'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
, CurrencyValue AS SubTotal
,(  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity
,VATAmount
,SDAmount
,SalesInvoiceDetails.TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit')
AND BranchId=@BranchId

";

                    #endregion

                    #region 'DisposeFinish'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo
, CurrencyValue AS SubTotal
,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity
,VATAmount
,SDAmount
,'Dispose Finish Sale' TransactionType--'Sale'
,InvoiceDateTime,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where 1=1 
and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) 
and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeFinish')
AND BranchId=@BranchId

";

                    #endregion

                    if (vm.PermanentProcess && vm.BranchId != 0)
                    {
                        #region 'TransferReceive'

                        sqlText += @"
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'A4',rd.TransactionDateTime,rd.TransferReceiveNo,'Receive',rd.ItemNo,
 isnull(rd.SubTotal,0)  AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Transfer Receive'
,rd.TransactionDateTime,rd.CostPrice,0 AdjustmentValue
from TransferReceiveDetails RD 
left outer join products p on RD.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
where rd.TransactionDateTime >= @StartDate and rd.TransactionDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('62in')
and pc.IsRaw in('finish','Trading')
AND rd.BranchId=@BranchId

";

                        #endregion

                    }
                    if (vm.PermanentProcess && vm.BranchId != 0)
                    {
                        #region 'Transfer Issue'

                        sqlText += @"
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)

select 'B3',rd.TransactionDateTime,rd.TransferIssueNo,'Sale',rd.ItemNo,
 isnull(rd.SubTotal,0)  AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Transfer Issue'
,rd.TransactionDateTime,rd.CostPrice,0 AdjustmentValue
from TransferIssueDetails RD 
left outer join products p on RD.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
where rd.TransactionDateTime >= @StartDate and rd.TransactionDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in(select distinct ItemNo from #ProductReceive)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('62out')
and pc.IsRaw in('finish','Trading')
AND rd.BranchId=@BranchId

";

                        #endregion

                    }

                    #region 'Credit','RawCredit'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo,
----------CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
-CurrencyValue AS SubTotal,
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice,AdjustmentValue
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit','RawCredit')
AND BranchId=@BranchId

";

                    #endregion

                    #endregion

                    #region Dispose Finish Data

                    #region 'Other'

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'B4', TransactionDateTime,DisposeNo,'Sale',FinishItemNo ItemNo, (isnull(Quantity,0) * ISNULL(UnitPrice,0)) AS SubTotal
,isnull(Quantity,0) Quantity,0 VATAmount,0 SDAmount, 'Finish Dispose'
,TransactionDateTime,0 NBRPrice
from DisposeFinishs
where 1=1
AND TransactionDateTime >= @StartDate and  TransactionDateTime < DATEADD(d,1,@EndDate) 
and FinishItemNo in(select distinct ItemNo from #ProductReceive)
AND ISNULL(IsSaleable,'N')='N'
AND (Quantity>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other')
AND BranchId=@BranchId

";

                    #endregion

                    #region Dispose Trading

                    sqlText += @"

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'B4', TransactionDateTime,DisposeNo,'Sale',FinishItemNo ItemNo, (isnull(Quantity,0) * ISNULL(UnitPrice,0)) AS SubTotal
,isnull(Quantity,0) Quantity,0 VATAmount,0 SDAmount, 'Trading Dispose'
,TransactionDateTime,0 NBRPrice
from DisposeFinishs
where 1=1
AND TransactionDateTime >= @StartDate and  TransactionDateTime < DATEADD(d,1,@EndDate) 
and FinishItemNo in(select distinct ItemNo from #ProductReceive)
AND ISNULL(IsSaleable,'N')='N'
AND (Quantity>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('DisposeTrading')
AND BranchId=@BranchId

";

                    #endregion


                    #endregion
                }

                #endregion

                #region Opening Data

                sqlText += @"
------select @OpeningDate = p.OpeningDate from Products p
------WHERE ItemNo=@ItemNo
------
------IF(@OpeningDate<@StartDate)

set @OpeningDate=@StartDate
insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)

SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
 SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost
	FROM (
SELECT distinct  ItemNo, 0 Quantity, 0 Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId='1'

";

                #region Opening 6.2 False / Value from Product

                if (vm.Opening6_2 == false)
                {
                    if (vm.Opening == false)
                    {
                        if (vm.BranchId > 1)
                        {
                            sqlText += @"		 
UNION ALL 
SELECT distinct  ItemNo, isnull(StockQuantity,0) Quantity, isnull(p.StockValue,0) Amount  
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND BranchId>1
--group by ItemNo

";
                        }
                        else
                        {
                            sqlText += @"		 
UNION ALL 
SELECT distinct  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
--AND BranchId='1'
------group by ItemNo

 ";



                        }
                    }
                }

                #endregion

                sqlText += @"		
";

                #region Rceives Data

                if (vm.VAT6_2_1 == false)
                {
                    #region Receive Data

                    #region 'Other','Tender','PackageProduction','Wastage','SaleWastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TradingImport'

                    sqlText += @" 
UNION ALL 
(SELECT distinct  ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS Amount
 FROM ReceiveDetails WHERE 1=1
 AND (Post =@post1 or Post= @post2) AND ReceiveDateTime>= '07/01/2019' and ReceiveDateTime < @StartDate  
AND TransactionType IN('Other','Tender','PackageProduction'  
,'Wastage' ,'Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
,'TradingImport'
)AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 
";

                    #endregion

                    #region FinishCTC
                    sqlText += @" 
UNION ALL 
(SELECT distinct  ToItemNo,isnull(sum(isnull(ToQuantity,isnull(ToQuantity,0))),0) Quantity,
    isnull(sum(isnull(ReceivePrice,0)),0)  Amount
 FROM ProductTransfersDetails WHERE 1=1
 AND (Post =@post1 or Post= @post2) AND TransferDate>= '07/01/2019' and TransferDate < @StartDate  
AND TransactionType IN('FinishCTC')AND ToItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ToItemNo
) 
";
                    #endregion FinishCTC

                    #region 'TollReceive'

                    sqlText += @" 
UNION ALL 
(SELECT distinct  RD.ItemNo,isnull(sum(isnull(RD.UOMQty,isnull(RD.Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(RD.DollerValue,0)),0) ELSE isnull(sum(isnull(RD.SubTotal,0)),0) END AS SubTotal
 FROM ReceiveDetails  RD
left outer join products p on RD.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
WHERE 1=1
 AND (rd.Post =@post1 or rd.Post= @post2)   
 AND RD.ReceiveDateTime>= '07/01/2019' and RD.ReceiveDateTime < @StartDate  
AND rd.TransactionType IN('TollReceive')
and pc.IsRaw in('finish')
AND RD.ItemNo  in(select distinct ItemNo from #ProductReceive)
AND rd.BranchId=@BranchId
group by RD.ItemNo
) 
";

                    #endregion

                    #endregion

                    #region Purchase Data

                    #region 'ClientFGReceiveWOBOM'

                    sqlText += @" 
UNION ALL 
(
SELECT  distinct ItemNo,isnull(sum(Quantity),0) Quantity, isnull(sum(SubTotal),0)   AS SubTotal
FROM PurchaseInvoiceDetails   WHERE 1=1 
AND (Post =@post1 or Post= @post2)  
AND ReceiveDate>= '07/01/2019' and ReceiveDate < @StartDate  
AND TransactionType IN('ClientFGReceiveWOBOM')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                    #endregion

                    #endregion
                }

                #region 'ReceiveReturn'

                sqlText += @"
UNION ALL
(SELECT distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM ReceiveDetails WHERE 1=1
 AND (Post =@post1 or Post= @post2)    AND ReceiveDateTime>= '07/01/2019' and ReceiveDateTime < @StartDate  
 and TransactionType IN('ReceiveReturn') AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
) 

";

                #endregion

                #endregion

                #region Sales Data

                #region 'Other','PackageSale','Wastage','SaleWastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender',

                //'ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService','TollSale'

                sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
-isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN(
'Other'
,'PackageSale','Wastage', 'CommercialImporter','ServiceNS','Export','ExportServiceNS'
,'ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender'
,'InternalIssue','Service','ExportService','TollSale')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";


                sqlText += @" 
UNION ALL 
(SELECT distinct  FromItemNo,-1*isnull(sum(isnull(ToQuantity,isnull(ToQuantity,0))),0) Quantity,
   -1* isnull(sum(isnull(ReceivePrice,0)),0)  Amount
 FROM ProductTransfersDetails WHERE 1=1
 AND (Post =@post1 or Post= @post2) AND TransferDate>= '07/01/2019' and TransferDate < @StartDate  
AND TransactionType IN('FinishCTC')AND FromItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by FromItemNo
) 
";

                if (vm.StockMovement == false)
                {
                    sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
--CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
-isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN( 'SaleWastage' )
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";
                }

                #endregion

                #region 'Debit'

                sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo
,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleNewQuantity
,-isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   
WHERE 1=1
AND (Post =@post1 or Post= @post2)  
AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN('Debit')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                #endregion

                #region 'DisposeFinish'

                sqlText += @" 
UNION ALL 
(SELECT  distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
-isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
AND TransactionType IN('DisposeFinish')
AND ItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
";

                #endregion

                #region 'Credit','RawCredit'

                sqlText += @" 
UNION ALL  
(SELECT distinct  ItemNo
,isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleCreditQuantity
----------,CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
,isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
FROM SalesInvoiceDetails   WHERE 1=1
 AND (Post =@post1 or Post= @post2)  
 AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
 AND TransactionType in( 'Credit','RawCredit') AND ItemNo  in(select distinct ItemNo from #ProductReceive)

AND BranchId=@BranchId
group by ItemNo

)
";

                #endregion

                #endregion

                #region Dispose Finish Data

                #region 'Other'

                sqlText += @" 
UNION ALL 
(
SELECT  distinct FinishItemNo ItemNo,-isnull(sum(Quantity),0) DisposeQuantity, -0   AS SubTotal
FROM DisposeFinishs   WHERE 1=1 
 AND (Post =@post1 or Post= @post2)  
 AND TransactionDateTime>= '07/01/2019' and TransactionDateTime < @StartDate  
AND TransactionType IN('Other')
AND FinishItemNo  in(select distinct ItemNo from #ProductReceive)
AND BranchId=@BranchId
AND ISNULL(IsSaleable,'N')='N'
group by FinishItemNo
)
";

                #endregion

                #endregion


                sqlText += @" 
) AS a GROUP BY a.ItemNo


";

                #endregion

                #region Insert, Update, Select VAT 6.2

                sqlText += @"

insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue)
select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate,AdjustmentValue  
from #VATTemp_17
order by dailydate,SerialNo;


update #VAT_17 set StartDateTime=@StartDate where SerialNo='A' 


update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID,
SerialId = SalesInvoiceHeaders.Id
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)
AND BranchId=@BranchId 



update #VAT_17 set 
CustomerID=TransferIssueDetails.TransferTo,
SerialId = TransferIssueDetails.Id
from TransferIssueDetails
where TransferIssueDetails.TransferIssueNo=#VAT_17.TransID 
and #VAT_17.Remarks='Transfer Issue'
AND (TransferIssueDetails.Post =@post1 or TransferIssueDetails.Post= @post2)
AND BranchId=@BranchId 




update #VAT_17 set 
SerialId = ReceiveHeaders.Id
from ReceiveHeaders
where ReceiveHeaders.ReceiveNo=#VAT_17.TransID 
and #VAT_17.TransType='Receive'
AND (ReceiveHeaders.Post =@post1 or ReceiveHeaders.Post= @post2)
AND BranchId=@BranchId


update #VAT_17 set 
SerialId = ProductTransfers.Id
from ProductTransfers
where ProductTransfers.TransferCode=#VAT_17.TransID 
AND (ProductTransfers.Post =@post1 or ProductTransfers.Post= @post2)
AND BranchId=@BranchId 
AND SerialId is null

update #VAT_17 set 
SerialId = TransferReceives.Id
from TransferReceives
where TransferReceives.TransferReceiveNo=#VAT_17.TransID 
AND (TransferReceives.Post =@post1 or TransferReceives.Post= @post2)
AND BranchId=@BranchId 
AND SerialId is null


update #VAT_17 set 
SerialId = PurchaseInvoiceHeaders.Id
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_17.TransID 
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
AND BranchId=@BranchId 
AND SerialId is null

update #VAT_17 set 
SerialId = TransferIssues.Id
from TransferIssues
where TransferIssues.TransferIssueNo=#VAT_17.TransID 
AND (TransferIssues.Post =@post1 or TransferIssues.Post= @post2)
AND BranchId=@BranchId 
AND SerialId is null


update #VAT_17 set 
SerialId = DisposeFinishs.Id
from DisposeFinishs
where DisposeFinishs.DisposeNo=#VAT_17.TransID 
AND (DisposeFinishs.Post =@post1 or DisposeFinishs.Post= @post2)
AND BranchId=@BranchId 
AND SerialId is null



update #VAT_17 set #VAT_17.ProductDesc=Products.productName
	 from Products where Products.itemNo=#VAT_17.ItemNo
";

                if (PDesc.ToLower() == "y")
                {
                    sqlText += @"  
update #VAT_17 set #VAT_17.ProductDesc=SalesInvoiceDetails.ProductDescription
from SalesInvoiceDetails where SalesInvoiceDetails.itemNo=#VAT_17.ItemNo and SalesInvoiceDetails.SalesInvoiceNo=#VAT_17.TransID
";
                }

                // update #VAT_17 set UnitCost=#ProductReceive.OpeningRate*Quantity where TransType='opening' and item no =ProductReceive.itemNo
                // update #VAT_17 set ClosingRate=ProductReceive.ClosingRate where   item no =ProductReceive.itemNo


                sqlText += @" 
--select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
--#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
--#VAT_17.TransID,#VAT_17.TransType,
--isnull(c.CustomerName,'-')CustomerName,
--isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
--isnull(c.Address3,'-')Address3,
--isnull(c.VATRegistrationNo,'-')VATRegistrationNo
--,#VAT_17.ProductDesc ProductName 
--,p.ProductCode
--,p.UOM
--,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
--,#VAT_17.SD,#vat_17.UnitCost,#VAT_17.remarks
--,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime, isnull(#vat_17.UnitRate ,0)UnitRate ,#VAT_17.ItemNo,#VAT_17.AdjustmentValue
--from #VAT_17  left outer JOIN 
--Customers as C on #VAT_17.CustomerID=c.CustomerID 
--left outer join Products P on #VAT_17.ItemNo=p.ItemNo
--
--
--order by #VAT_17.StartDateTime,#VAT_17.SerialNo

select * from #VAT_17
order by ItemNo,StartDateTime,SerialNo,SerialId



DROP TABLE #VAT_17
DROP TABLE #VATTemp_17
DROP TABLE #ProductReceive

                ";

                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion SQL

                #region SQL Command

                string deleteExisting = "delete from VAT6_2 where UserId = @UserId";

                SqlCommand objCommVAT17 = new SqlCommand(deleteExisting, currConn, transaction);
                objCommVAT17.CommandTimeout = 1000;
                objCommVAT17.Parameters.AddWithValue("@UserId", vm.UserId);

                if (!vm.SkipOpening)
                {
                    objCommVAT17.ExecuteNonQuery();
                }


                objCommVAT17.CommandText = sqlText;

                #region Parameter

                objCommVAT17.Parameters.AddWithValue("@PDesc", PDesc);
                objCommVAT17.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }

                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }

                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }

                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                }

                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

                #endregion


                DataTable dataSetTable = dataSet.Tables[0];
                dataSetTable.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                dataSetTable.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });


                //string columnName = "";
                //foreach(DataColumn column in dataSetTable.Columns)
                //{
                //    columnName += column.ColumnName + ",";
                //}

                if (vm.SkipOpening)
                {
                    if (dataSetTable.Rows.Count > 1)
                    {
                        DataRow[] rows = dataSetTable.Select("TransType <> 'Opening'");

                        if (rows.Count() > 0)
                        {
                            dataSetTable = rows.CopyToDataTable();
                        }
                        else
                        {
                            dataSetTable.Clear();

                        }

                        ////////dataSetTable = dataSetTable.Select("TransType <> 'Opening' ").CopyToDataTable();
                    }
                    else
                    {
                        dataSetTable.Clear();
                    }
                }


                string[] result = commonDal.BulkInsert("VAT6_2", dataSetTable, currConn, transaction, 0, null, connVM);


                sqlText = GetVAT6_2PartitionQuery();


                //objCommVAT17.CommandText = sqlText;
                //objCommVAT17.ExecuteNonQuery();

                return result;

            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private string GetVAT6_2PartitionQuery()
        {
            return @"


create table #NBRPrive(id int identity(1,1),ItemNo varchar(100) ,CustomerId varchar(100),Rate decimal(18,6), EffectDate datetime,ToDate datetime)
create table #Temp(SL int identity(1,1),Id int,ItemNo varchar(100),TransType varchar(100),Quantity decimal(18,6),TotalCost decimal(18,6),StartDatetime datetime,SerialNo varchar(10))


update VAT6_2 set CustomerID=ReceiveHeaders.CustomerID
from ReceiveHeaders
where ReceiveHeaders.ReceiveNo=VAT6_2.TransID and VAT6_2.UserId = @UserId

insert into #NBRPrive
select itemNo, '' CustomerId ,
(
case 
when NBRPrice = 0 then ( case when OpeningBalance = 0 then 0 else OpeningTotalCost/OpeningBalance end) else ISNULL(NBRPrice,0) 
end
) NBRPrice, '1900/01/01'EffectDate ,null ToDate from products
where ItemNo in(select distinct Itemno from VAT6_2 where VAT6_2.UserId = @UserId)

insert into #NBRPrive
select FinishItemNo,customerId, ISNULL(NBRPrice,0) NBRPrice,  EffectDate EffectDate ,null ToDate from BOMs
where FinishItemNo in(select distinct Itemno from VAT6_2 where VAT6_2.UserId = @UserId)
order by EffectDate

update #NBRPrive set  ToDate=null 

--update #NBRPrive set  ToDate=RT.RunningTotal
--from (SELECT id, ItemNo,
--LEAD(EffectDate) 
--OVER (PARTITION BY customerId,ItemNo ORDER BY id) AS RunningTotal
--FROM #NBRPrive)RT
--where RT.Id=#NBRPrive.Id

----######################----------------
update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT Customerid,id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY Customerid,ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where customerid>0
)RT
where RT.Id=#NBRPrive.Id  and  RT.Customerid=#NBRPrive.Customerid 
and ToDate is null

update #NBRPrive set  ToDate=dateadd(s,-1,RT.RunningTotal)
from (SELECT id, ItemNo,
LEAD(EffectDate) 
OVER (PARTITION BY ItemNo ORDER BY id) AS RunningTotal
FROM #NBRPrive
where isnull(nullif(customerid,''),0)<=0 
)RT
where RT.Id=#NBRPrive.Id  
and ToDate is null
and isnull(nullif(customerid,''),0)<=0
----######################----------------


update #NBRPrive set  ToDate='2199/12/31' where ToDate is null

insert into #Temp(Id,ItemNo,TransType,Quantity,TotalCost,StartDateTime,SerialNo)
select Id,ItemNo,TransType,Quantity,UnitCost,StartDateTime,SerialNo from VAT6_2 
where VAT6_2.UserId = @UserId
order by ItemNo,StartDateTime,SerialNo,Id

delete from VAT6_2 where  VAT6_2.TransType='Opening'

update VAT6_2 set  RunningTotal=RT.RunningTotal
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*Quantity else Quantity end ) 
OVER (PARTITION BY ItemNo ORDER BY  ItemNo,StartDateTime,SerialNo,SL) AS RunningTotal
FROM #Temp)RT
where RT.Id=VAT6_2.Id and VAT6_2.UserId = @UserId


update VAT6_2 set  RunningTotalValue=RT.RunningTotalCost
from (SELECT id,SL, ItemNo, TransType ,Quantity,
SUM (case when TransType in('Sale') then -1*TotalCost else TotalCost end ) 
OVER (PARTITION BY ItemNo ORDER BY ItemNo,StartDateTime,SerialNo,SL) AS RunningTotalCost
FROM #Temp)RT
where RT.Id=VAT6_2.Id and VAT6_2.UserId = @UserId

update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.CustomerID=#NBRPrive.CustomerId
and VAT6_2.UserId = @UserId
and isnull(VAT6_2.DeclaredPrice,0)=0


update VAT6_2 set DeclaredPrice =#NBRPrive.Rate
from #NBRPrive
where #NBRPrive.ItemNo=VAT6_2.ItemNo
and VAT6_2.StartDateTime >=#NBRPrive.EffectDate and VAT6_2.StartDateTime<#NBRPrive.ToDate
and VAT6_2.UserId = @UserId
and isnull(VAT6_2.DeclaredPrice,0)=0




update VAT6_2 set   DeclaredPrice= Unitcost/Quantity
where  VAT6_2.UserId = @UserId
 and TransType = 'Opening' and DeclaredPrice = 0
and Quantity != 0

update VAT6_2 set   RunningTotalValueFinal= DeclaredPrice*RunningTotal
where  VAT6_2.UserId = @UserId

----update VAT6_2 set RunningTotalValueFinal = RunningTotalValue
----where VAT6_2.UserId = @UserId

-----update VAT6_2 set AdjustmentValue=0 where AdjustmentValue is null
-----and  VAT6_2.UserId = @UserId

--update VAT6_2 set AdjustmentValue=  case when TransType='Sale' then RunningTotalValueFinal-( (-1*Quantity*DeclaredPrice)+RunningOpeningValueFinal) else RunningTotalValueFinal-( (1*Quantity*DeclaredPrice)+RunningOpeningValueFinal)  end
--where  VAT6_2.UserId = @UserId

----######################----------------
-----update VAT6_2 set AdjustmentValue=0 where AdjustmentValue is null and  VAT6_2.UserId = @UserId
-----update VAT6_2 set AdjustmentValue=  case when TransType='Sale' then RunningTotalValueFinal-( (-1*Quantity*DeclaredPrice)+RunningOpeningValueFinal) 
-----else RunningTotalValueFinal-( (1*Quantity*DeclaredPrice)+RunningOpeningValueFinal)  end
-----where 1=1 and  VAT6_2.UserId = @UserId

update VAT6_2 set AdjustmentValue=0 where 1=1 and  VAT6_2.UserId = @UserId
update VAT6_2 set AdjustmentValue=   RunningTotalValue-RunningTotalValueFinal where 1=1 and  VAT6_2.UserId = @UserId
 ----######################----------------
 
 --update VAT6_2 set RunningOpeningValueFinal=0
 --update VAT6_2 set RunningOpeningQuantityFinal=0
 --update VAT6_2 set AdjustmentValue=(DeclaredPrice-UnitRate)*RunningTotal where TransType not in('Opening')
 

--update VAT6_2 set  RunningOpeningQuantityFinal=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningTotal) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_2
--)RT
--where RT.Id=VAT6_2.Id 
--
--update VAT6_2 set  RunningOpeningValueFinal=RT.RunningTotalV
--from ( SELECT  Id,
--LAG(RunningTotalValueFinal) 
--OVER (PARTITION BY ItemNo ORDER BY   itemno,StartDateTime,SerialNo) AS RunningTotalV
--FROM VAT6_2
--)RT
--where RT.Id=VAT6_2.Id

--update VAT6_2 set RunningOpeningValueFinal=0 where RunningOpeningValueFinal is null 
--update VAT6_2 set RunningOpeningQuantityFinal=0 where RunningOpeningQuantityFinal is null 

--delete from VAT6_2 where  VAT6_2.TransType='Opening'
 

drop table #Temp
drop table #NBRPrive

";
        }


        private string[] Save6_2_FromPermanent(VAT6_2ParamVM vm, string vExportInBDT, SqlConnection currConn, SqlTransaction transaction, string PDesc, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;
                CommonDAL commonDal = new CommonDAL();

                bool Permanent6_2 = commonDal.settings("VAT6_2", "6_2Permanent", currConn, transaction, connVM) == "Y";

                //if (Permanent6_2)
                //{
                //    string maxDate = @"select dateadd(d,1,max(StartDatetime)) from VAT6_2_Permanent";

                //    SqlCommand dateCmd = new SqlCommand(maxDate, currConn, transaction);
                //    string date = dateCmd.ExecuteScalar().ToString();


                //}


                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1
--and Products.BranchId=@BranchId



";
                #endregion

                #region Conditions
                // vm.ProdutType = "Finish";
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";
                        sqlText += @"  and Products.ActiveStatus='Y'";

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                        sqlText += @"  and Products.ActiveStatus='Y'";

                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a

";
                sqlText += @"

 
delete from VAT6_2 where UserId = @UserId

insert into VAT6_2([SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal])


select [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]   
	  
from   ( 

select * from VAT6_2_Permanent where
 TransType in  ('Opening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)

union all

select * from VAT6_2_Permanent where
 TransType not in  ('Opening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate and 
StartDateTime < DATEADD(d,1,@EndDate) 

 ) as a
order by ItemNo, StartDateTime, SerialNo, Id

 update VAT6_2 set  Quantity=a.ClosingQty
,UnitCost=a.RunningTotalValue, StartDateTime = @StartDate,
                    RunningTotal=a.ClosingQty
,RunningTotalValue=a.ClosingValue
,RunningTotalValueFinal =a.ClosingValue
,DeclaredPrice=a.DeclaredPrice,UnitRate=a.UnitRate,AdjustmentValue=0

from  (
select VAT6_2_Permanent.Id,VAT6_2_Permanent.ItemNo
,RunningTotal ClosingQty
,RunningTotalValueFinal ClosingValue
,DeclaredPrice
,UnitRate
,RunningTotalValue

from VAT6_2_Permanent
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_2_Permanent
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive)
group by ItemNo) as a
on   a.Id=VAT6_2_Permanent.ID) as a
where a.ItemNo=VAT6_2.ItemNo and VAT6_2.TransType='Opening'

select * from VAT6_2 where UserId = @UserId
";
                #endregion



                //if (vm.BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}

                #endregion SQL

                #region SQL Command


                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT17.CommandTimeout = 1000;
                objCommVAT17.Parameters.AddWithValue("@UserId", vm.UserId);

                #region Parameter


                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }



                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@post1"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                //}

                //if (!objCommVAT17.Parameters.Contains("@post2"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                //}

                #endregion Parameter

                //SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                //dataAdapter.Fill(dataSet);

                #endregion

                int rows = objCommVAT17.ExecuteNonQuery();

                //DataTable dataSetTable = dataSet.Tables[0];
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });


                //string columnName = "";
                //foreach(DataColumn column in dataSetTable.Columns)
                //{
                //    columnName += column.ColumnName + ",";
                //}


                //string[] result = commonDal.BulkInsert("VAT6_2", dataSetTable, currConn, transaction);

                string[] result = new[] { "success" };

                return result;

            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private string[] Save6_2_FromPermanent_DayWise(VAT6_2ParamVM vm, string vExportInBDT, SqlConnection currConn, SqlTransaction transaction, string PDesc, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;
                CommonDAL commonDal = new CommonDAL();

                bool Permanent6_2 = commonDal.settings("VAT6_2", "6_2Permanent", currConn, transaction, connVM) == "Y";

                //if (Permanent6_2)
                //{
                //    string maxDate = @"select dateadd(d,1,max(StartDatetime)) from VAT6_2_Permanent";

                //    SqlCommand dateCmd = new SqlCommand(maxDate, currConn, transaction);
                //    string date = dateCmd.ExecuteScalar().ToString();


                //}


                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1
--and Products.BranchId=@BranchId



";
                #endregion

                #region Conditions
                // vm.ProdutType = "Finish";
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";
                        sqlText += @"  and Products.ActiveStatus='Y'";

                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                        sqlText += @"  and Products.ActiveStatus='Y'";

                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a

";
                sqlText += @"

 
delete from VAT6_2 where UserId = @UserId

insert into VAT6_2([SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal])


select [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]   
	  
from   ( 

select Id,[SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,'Opening' [TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]  from VAT6_2_Permanent_DayWise where
 TransType in  ('Opening','MonthOpening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate 
and StartDateTime < DATEADD(d,1,@EndDate) 

union all

select Id,[SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]  from VAT6_2_Permanent_DayWise where
 TransType not in  ('Opening','MonthOpening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate and 
StartDateTime < DATEADD(d,1,@EndDate) 

 ) as a
order by ItemNo, StartDateTime, SerialNo, Id

 update VAT6_2 set  Quantity=a.ClosingQty,UnitCost=a.RunningTotalValue, StartDateTime = @StartDate,
                    RunningTotal=a.ClosingQty,RunningTotalValue=a.ClosingValue,RunningTotalValueFinal =a.ClosingValue,DeclaredPrice=a.DeclaredPrice,UnitRate=a.UnitRate,AdjustmentValue=0

from  (
select VAT6_2_Permanent_DayWise.Id,VAT6_2_Permanent_DayWise.ItemNo,RunningTotal ClosingQty,RunningTotalValueFinal ClosingValue,DeclaredPrice,UnitRate,RunningTotalValue

from VAT6_2_Permanent_DayWise
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_2_Permanent_DayWise
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive)
group by ItemNo) as a
on   a.Id=VAT6_2_Permanent_DayWise.ID) as a
where a.ItemNo=VAT6_2.ItemNo and VAT6_2.TransType='Opening'

select * from VAT6_2 where UserId = @UserId
";
                #endregion



                //if (vm.BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}

                #endregion SQL

                #region SQL Command


                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT17.CommandTimeout = 1000;
                objCommVAT17.Parameters.AddWithValue("@UserId", vm.UserId);

                #region Parameter


                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }



                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@post1"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                //}

                //if (!objCommVAT17.Parameters.Contains("@post2"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                //}

                #endregion Parameter

                //SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                //dataAdapter.Fill(dataSet);

                #endregion

                int rows = objCommVAT17.ExecuteNonQuery();

                //DataTable dataSetTable = dataSet.Tables[0];
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });


                //string columnName = "";
                //foreach(DataColumn column in dataSetTable.Columns)
                //{
                //    columnName += column.ColumnName + ",";
                //}


                //string[] result = commonDal.BulkInsert("VAT6_2", dataSetTable, currConn, transaction);

                string[] result = new[] { "success" };

                return result;

            }
            catch (Exception e)
            {
                throw e;
            }
        }


        private string[] Save6_2_1_FromPermanent(VAT6_2ParamVM vm, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;
                CommonDAL commonDal = new CommonDAL();


                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1
--and Products.BranchId=@BranchId



";
                #endregion

                #region Conditions
                // vm.ProdutType = "Finish";
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a

";
                sqlText += @"

delete from ProductStockMISKas where UserId = @UserId

insert into ProductStockMISKas(

      [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[VendorName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[HSCodeNo]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[ItemNo]
      ,[StockType]
      ,[BranchId]
      ,[UserId]
       ,RunningTotal
       ,RunningTotalValue
       ,RunningTotalValueFinal
       ,DeclaredPrice
       ,RunningOpeningValueFinal
       ,CustomerId
       ,AdjustmentValue 
	  )


select [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[VendorName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[HSCodeNo]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[ItemNo]
      ,[StockType]
      ,[BranchId] 
	  ,@UserId
      ,RunningTotal
      ,RunningTotalValue
      ,RunningTotalValueFinal
      ,DeclaredPrice
      ,RunningOpeningValueFinal
      ,CustomerId
      ,AdjustmentValue 

from   ( 

select * from VAT6_2_1_Permanent where
 TransType in  ('Opening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)

union all

select * from VAT6_2_1_Permanent where
 TransType not in  ('Opening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate and 
StartDateTime < DATEADD(d,1,@EndDate) 

 ) as a
order by ItemNo, StartDateTime, SerialNo, Id

 update ProductStockMISKas set  Quantity=a.ClosingQty,UnitCost=a.ClosingValue, StartDateTime = @StartDate,
                    RunningTotal=a.ClosingQty,RunningTotalValue=a.ClosingValue
					,RunningTotalValueFinal =a.ClosingValue,DeclaredPrice=a.DeclaredPrice,UnitRate=a.UnitRate,AdjustmentValue=0
                    ,StartingQuantity=a.ClosingQty,StartingAmount=a.ClosingValue

from  (
select VAT6_2_1_Permanent.Id,VAT6_2_1_Permanent.ItemNo,RunningTotal ClosingQty,RunningTotalValueFinal ClosingValue,DeclaredPrice,UnitRate

from VAT6_2_1_Permanent
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_2_1_Permanent
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive)
group by ItemNo) as a
on   a.Id=VAT6_2_1_Permanent.ID) as a
where a.ItemNo=ProductStockMISKas.ItemNo and ProductStockMISKas.TransType='Opening'


update ProductStockMISKas set BENumber= TransID, InvoiceDateTime=StartDateTime where 1=1 and TransType<>'Purchase' 
and UserId=@UserId

";
                #endregion



                //if (vm.BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}

                #endregion SQL

                #region SQL Command


                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT17.CommandTimeout = 500;
                objCommVAT17.Parameters.AddWithValue("@UserId", vm.UserId);

                #region Parameter


                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }



                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@post1"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                //}

                //if (!objCommVAT17.Parameters.Contains("@post2"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                //}

                #endregion Parameter

                //SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                //dataAdapter.Fill(dataSet);

                #endregion

                int rows = objCommVAT17.ExecuteNonQuery();

                //DataTable dataSetTable = dataSet.Tables[0];
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });


                //string columnName = "";
                //foreach(DataColumn column in dataSetTable.Columns)
                //{
                //    columnName += column.ColumnName + ",";
                //}


                //string[] result = commonDal.BulkInsert("VAT6_2", dataSetTable, currConn, transaction);

                string[] result = new[] { "success" };

                return result;

            }
            catch (Exception e)
            {
                throw e;
            }
        }


        private string[] Save6_2_FromPermanent_Branch_Backup28082023(VAT6_2ParamVM vm, string vExportInBDT, SqlConnection currConn, SqlTransaction transaction, string PDesc, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;
                CommonDAL commonDal = new CommonDAL();

                bool Permanent6_2 = commonDal.settings("VAT6_2", "6_2Permanent", currConn, transaction, connVM) == "Y";

                //if (Permanent6_2)
                //{
                //    string maxDate = @"select dateadd(d,1,max(StartDatetime)) from VAT6_2_Permanent_Branch";

                //    SqlCommand dateCmd = new SqlCommand(maxDate, currConn, transaction);
                //    string date = dateCmd.ExecuteScalar().ToString();


                //}

                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1
--and Products.BranchId=@BranchId



";
                #endregion

                #region Conditions
                // vm.ProdutType = "Finish";
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                        sqlText += @"  and Products.ActiveStatus='Y'";

                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a

";
                sqlText += @"

 
delete from VAT6_2 where UserId = @UserId

insert into VAT6_2([SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal])


select [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]   
	  
from   ( 

select * from VAT6_2_Permanent_Branch where
 TransType in  ('Opening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)
and BranchId=@BranchId


union all

select * from VAT6_2_Permanent_Branch where
 TransType not in  ('Opening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate 
and StartDateTime < DATEADD(d,1,@EndDate) 
and BranchId=@BranchId

 ) as a
order by ItemNo, StartDateTime, SerialNo, Id


update VAT6_2 set  Quantity=a.ClosingQty,UnitCost=a.RunningTotalValue, StartDateTime = @StartDate,
                    RunningTotal=a.ClosingQty,RunningTotalValue=a.ClosingValue,RunningTotalValueFinal =a.ClosingValue,DeclaredPrice=a.DeclaredPrice,UnitRate=a.UnitRate,AdjustmentValue=0

from  (
select VAT6_2_Permanent_Branch.Id,VAT6_2_Permanent_Branch.ItemNo,RunningTotal ClosingQty,RunningTotalValueFinal ClosingValue,DeclaredPrice,UnitRate,RunningTotalValue

from VAT6_2_Permanent_Branch
right outer join (
select distinct ItemNo,BranchId, MAX(Id)Id from VAT6_2_Permanent_Branch
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive) and BranchId=@BranchId
group by ItemNo,BranchId) as a
on   a.Id=VAT6_2_Permanent_Branch.ID and a.BranchId=VAT6_2_Permanent_Branch.BranchId
where VAT6_2_Permanent_Branch.BranchId=@BranchId
) as a
where a.ItemNo=VAT6_2.ItemNo and VAT6_2.TransType='Opening' 

select * from VAT6_2 where UserId = @UserId 
";
                #endregion

                //if (vm.BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}

                #endregion SQL

                #region SQL Command


                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT17.CommandTimeout = 1000;
                objCommVAT17.Parameters.AddWithValue("@UserId", vm.UserId);
                objCommVAT17.Parameters.AddWithValueAndParamCheck("@BranchId", vm.BranchId);

                #region Parameter


                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }



                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@post1"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                //}

                //if (!objCommVAT17.Parameters.Contains("@post2"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                //}

                #endregion Parameter

                //SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                //dataAdapter.Fill(dataSet);

                #endregion

                int rows = objCommVAT17.ExecuteNonQuery();

                //DataTable dataSetTable = dataSet.Tables[0];
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });


                //string columnName = "";
                //foreach(DataColumn column in dataSetTable.Columns)
                //{
                //    columnName += column.ColumnName + ",";
                //}


                //string[] result = commonDal.BulkInsert("VAT6_2", dataSetTable, currConn, transaction);

                string[] result = new[] { "success" };

                return result;

            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private string[] Save6_2_FromPermanent_DayWise_Branch(VAT6_2ParamVM vm, string vExportInBDT, SqlConnection currConn, SqlTransaction transaction, string PDesc, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;
                CommonDAL commonDal = new CommonDAL();

                bool Permanent6_2 = commonDal.settings("VAT6_2", "6_2Permanent", currConn, transaction, connVM) == "Y";

                //if (Permanent6_2)
                //{
                //    string maxDate = @"select dateadd(d,1,max(StartDatetime)) from 6_2_Permanent_DayWise_Branch";

                //    SqlCommand dateCmd = new SqlCommand(maxDate, currConn, transaction);
                //    string date = dateCmd.ExecuteScalar().ToString();


                //}

                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1
--and Products.BranchId=@BranchId



";
                #endregion

                #region Conditions
                // vm.ProdutType = "Finish";
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    if (vm.Flag == "SCBL")
                    {
                        sqlText += @"  and IsRaw in('Raw','Pack')";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                    else
                    {
                        sqlText += @"  and IsRaw=@ProdutType";
                        sqlText += @"  and Products.ActiveStatus='Y'";

                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a

";
                sqlText += @"

 
delete from VAT6_2 where UserId = @UserId

insert into VAT6_2([SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal])


select [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]   
	  
from   ( 

select id,[SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,'Opening'[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal]  from VAT6_2_Permanent_DayWise_Branch where
 TransType in  ('Opening','MonthOpening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)
and BranchId=@BranchId
and  StartDateTime >= @StartDate 
and StartDateTime < DATEADD(d,1,@EndDate) 

union all

select id,[SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[CustomerName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[ProductCode]
      ,[UOM]
      ,[HSCodeNo]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[Remarks]
      ,[CreatedDateTime]
      ,[UnitRate]
      ,[ItemNo]
      ,[AdjustmentValue]
      ,@UserId UserId
      ,[BranchId]
      ,[CustomerID]
      ,[ProductDesc]
      ,[ClosingRate]
      ,[DeclaredPrice]
      ,[RunningTotal]
      ,[RunningTotalValue]
      ,[RunningTotalValueFinal]
      ,[RunningOpeningValueFinal]
      ,[RunningOpeningQuantityFinal] from VAT6_2_Permanent_DayWise_Branch where
 TransType not in  ('Opening','MonthOpening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate 
and StartDateTime < DATEADD(d,1,@EndDate) 
and BranchId=@BranchId

 ) as a
order by ItemNo, StartDateTime, SerialNo, Id


update VAT6_2 set  Quantity=a.ClosingQty,UnitCost=a.RunningTotalValue, StartDateTime = @StartDate,
                    RunningTotal=a.ClosingQty,RunningTotalValue=a.ClosingValue,RunningTotalValueFinal =a.ClosingValue,DeclaredPrice=a.DeclaredPrice,UnitRate=a.UnitRate,AdjustmentValue=0

from  (
select VAT6_2_Permanent_DayWise_Branch.Id,VAT6_2_Permanent_DayWise_Branch.ItemNo
,RunningTotal ClosingQty,RunningTotalValueFinal ClosingValue
,DeclaredPrice,UnitRate,RunningTotalValue

from VAT6_2_Permanent_DayWise_Branch
right outer join (
select distinct ItemNo,BranchId, MAX(Id)Id from VAT6_2_Permanent_DayWise_Branch
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive) and BranchId=@BranchId
group by ItemNo,BranchId) as a
on   a.Id=VAT6_2_Permanent_DayWise_Branch.ID and a.BranchId=VAT6_2_Permanent_DayWise_Branch.BranchId
where VAT6_2_Permanent_DayWise_Branch.BranchId=@BranchId
) as a
where a.ItemNo=VAT6_2.ItemNo and VAT6_2.TransType='Opening' 

select * from VAT6_2 where UserId = @UserId 
";
                #endregion

                //if (vm.BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}

                #endregion SQL

                #region SQL Command


                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT17.CommandTimeout = 1000;
                objCommVAT17.Parameters.AddWithValue("@UserId", vm.UserId);
                objCommVAT17.Parameters.AddWithValueAndParamCheck("@BranchId", vm.BranchId);

                #region Parameter


                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }



                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@post1"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                //}

                //if (!objCommVAT17.Parameters.Contains("@post2"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                //}

                #endregion Parameter

                //SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                //dataAdapter.Fill(dataSet);

                #endregion

                int rows = objCommVAT17.ExecuteNonQuery();

                //DataTable dataSetTable = dataSet.Tables[0];
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });


                //string columnName = "";
                //foreach(DataColumn column in dataSetTable.Columns)
                //{
                //    columnName += column.ColumnName + ",";
                //}


                //string[] result = commonDal.BulkInsert("VAT6_2", dataSetTable, currConn, transaction);

                string[] result = new[] { "success" };

                return result;

            }
            catch (Exception e)
            {
                throw e;
            }
        }


        private string[] Save6_2_1_FromPermanent_Branch(VAT6_2ParamVM vm, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            try
            {
                DataSet dataSet = new DataSet();
                string sqlText;
                CommonDAL commonDal = new CommonDAL();


                sqlText = " ";

                #region SQL Text

                #region Begining

                sqlText += @"  
select * into #ProductReceive from   ( 
select Products.ItemNo,0 OpeningRate,0 ClosingRate from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1
--and Products.BranchId=@BranchId



";
                #endregion

                #region Conditions

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  ) as a

";
                sqlText += @"

 
delete from ProductStockMISKas where UserId = @UserId

insert into ProductStockMISKas(

      [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[VendorName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[HSCodeNo]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[ItemNo]
      ,[StockType]
      ,[BranchId]
      ,UserId
,RunningTotal
,RunningTotalValue
,RunningTotalValueFinal
,DeclaredPrice
,RunningOpeningValueFinal
,CustomerId
,AdjustmentValue 
)


select  [SerialNo]
      ,[StartDateTime]
      ,[StartingQuantity]
      ,[StartingAmount]
      ,[TransID]
      ,[TransType]
      ,[VendorName]
      ,[Address1]
      ,[Address2]
      ,[Address3]
      ,[VATRegistrationNo]
      ,[ProductName]
      ,[Quantity]
      ,[VATRate]
      ,[SD]
      ,[UnitCost]
      ,[HSCodeNo]
      ,[BENumber]
      ,[InvoiceDateTime]
      ,[Remarks]
      ,[ItemNo]
      ,[StockType]
      ,[BranchId]
      ,@UserId
,RunningTotal
,RunningTotalValue
,RunningTotalValueFinal
,DeclaredPrice
,RunningOpeningValueFinal
,CustomerId
,AdjustmentValue 
	  
from   ( 

select * from VAT6_2_1_Permanent_Branch where
 TransType in  ('Opening')
and ItemNo in ( select distinct ItemNo from #ProductReceive)
and BranchId=@BranchId


union all

select * from VAT6_2_1_Permanent_Branch where
 TransType not in  ('Opening')
and ItemNo in (select distinct ItemNo from #ProductReceive)
and  StartDateTime >= @StartDate 
and StartDateTime < DATEADD(d,1,@EndDate) 
and BranchId=@BranchId

 ) as a
order by ItemNo, StartDateTime, SerialNo, Id

update ProductStockMISKas set  Quantity=a.ClosingQty,UnitCost=a.ClosingValue, StartDateTime = @StartDate,
                    RunningTotal=a.ClosingQty,RunningTotalValue=a.ClosingValue,RunningTotalValueFinal =a.ClosingValue
					,DeclaredPrice=a.DeclaredPrice,UnitRate=a.UnitRate,AdjustmentValue=0
 ,StartingQuantity=a.ClosingQty,StartingAmount=a.ClosingValue
from  (
select VAT6_2_1_Permanent_Branch.Id,VAT6_2_1_Permanent_Branch.ItemNo,RunningTotal ClosingQty,RunningTotalValueFinal ClosingValue,DeclaredPrice,UnitRate

from VAT6_2_1_Permanent_Branch
right outer join (
select distinct ItemNo,BranchId, MAX(Id)Id from VAT6_2_1_Permanent_Branch
where StartDateTime <@StartDate and ItemNo in (select distinct ItemNo from #ProductReceive) and BranchId=@BranchId
group by ItemNo,BranchId
) as a
on   a.Id=VAT6_2_1_Permanent_Branch.ID and a.BranchId=VAT6_2_1_Permanent_Branch.BranchId
where VAT6_2_1_Permanent_Branch.BranchId=@BranchId
) as a
where a.ItemNo=ProductStockMISKas.ItemNo and ProductStockMISKas.TransType='Opening'  



update ProductStockMISKas set BENumber= TransID, InvoiceDateTime=StartDateTime where 1=1 and TransType<>'Purchase' 
and UserId=@UserId

";
                #endregion



                //if (vm.BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}

                #endregion SQL

                #region SQL Command


                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);
                objCommVAT17.CommandTimeout = 500;
                objCommVAT17.Parameters.AddWithValue("@UserId", vm.UserId);
                objCommVAT17.Parameters.AddWithValueAndParamCheck("@BranchId", vm.BranchId);

                #region Parameter


                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }



                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@post1"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
                //}

                //if (!objCommVAT17.Parameters.Contains("@post2"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
                //}

                #endregion Parameter

                //SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                //dataAdapter.Fill(dataSet);

                #endregion

                int rows = objCommVAT17.ExecuteNonQuery();

                //DataTable dataSetTable = dataSet.Tables[0];
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = vm.UserId });
                //dataSetTable.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = vm.BranchId });


                //string columnName = "";
                //foreach(DataColumn column in dataSetTable.Columns)
                //{
                //    columnName += column.ColumnName + ",";
                //}


                //string[] result = commonDal.BulkInsert("VAT6_2", dataSetTable, currConn, transaction);

                string[] result = new[] { "success" };

                return result;

            }
            catch (Exception e)
            {
                throw e;
            }
        }


        public DataSet VAT6_2_Monthly(DataSet dsVAT6_2, string StartDateTime, bool TopSheet, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            DataSet dsVAT6_2_Monthly = new DataSet();
            DataTable dt = new DataTable();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";
            int transResult = 0;

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Clear [SaleRegister_VAT6_2s]

                //dsVAT6_2.Tables[0].Columns.Remove("AdjustmentValue");

                sqlText = "";
                sqlText = "delete from SaleRegister_VAT6_2s";

                var cmd = new SqlCommand(sqlText, currConn, transaction);
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Bulk Insert to [SaleRegister_VAT6_2s]

                dt = dsVAT6_2.Tables[0];

                _cDAL.BulkInsert("SaleRegister_VAT6_2s", dt, currConn, transaction);


                #endregion

                #region Get Data From [SaleRegister_VAT6_2s]

                #region SQL Text

                sqlText = "";
                if (TopSheet)
                {

                }
                else
                {
                    #region Sale Register (VAT 6.2) (Opening)

                    sqlText = @"

---------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Sale Register (VAT 6.2)--------------------------------------------------(Opening)

select
'A' SerialNo
, 1 [Day]
,StartDateTime
,StartingQuantity
,StartingAmount
,TransID
,TransType
,CustomerName
,Address1
,Address2
,Address3
,VATRegistrationNo
,ProductName
,ProductCode
,UOM
,HSCodeNo
,Quantity
,SD
,VATRate
,UnitCost
,remarks
,CreatedDateTime
,UnitRate
--,isnull(AdjustmentValue,0)AdjustmentValue
,ItemNo
,'Y' IsMonthly 

FROM SaleRegister_VAT6_2s
WHERE remarks = 'Opening'


";
                    #endregion

                    #region Sale Register (VAT 6.2)

                    sqlText += @"

UNION ALL

---------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Sale Register (VAT 6.2)--------------------------------------------------
SELECT
'B' SerialNo
,cast(Day(StartDateTime) as int)						[Day]
,StartDateTime											StartDateTime
,SUM(StartingQuantity)									StartingQuantity
,SUM(StartingAmount)									StartingAmount
,'-'													TransID
,TransType												TransType
,'-'													CustomerName
,'-'													Address1
,'-'													Address2
,'-'													Address3
,'-'										            VATRegistrationNo
,ProductName											ProductName
,ProductCode
,UOM
,'-'												    HSCodeNo
,SUM(Quantity)											Quantity
,SUM(SD)												SD
,SUM(VATRate)											VATRate
,SUM(UnitCost)											UnitCost
--,SUM(isnull(AdjustmentValue,0))							AdjustmentValue
,remarks												remarks
,Day(StartDateTime)										CreatedDateTime
,AVG(UnitRate)											UnitRate
,ItemNo													ItemNo
,'Y'													IsMonthly 
FROM SaleRegister_VAT6_2s
WHERE remarks != 'Opening'
GROUP BY
cast(Day(StartDateTime) as int)
,StartDateTime
,TransType
,VATRegistrationNo
,ProductName
,ProductCode
,UOM
,HSCodeNo
,remarks
,ItemNo


";
                    #endregion
                }
                #endregion

                #region SQL Execution

                cmd = new SqlCommand(sqlText, currConn, transaction);
                SqlDataAdapter da = new SqlDataAdapter(cmd);

                da.Fill(dsVAT6_2_Monthly);


                #endregion


                #endregion

                #region Commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion Commit
            }
            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {

                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ReportDSDAL", "VAT6_2_Monthly", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dsVAT6_2_Monthly;

        }

        public DataSet VAT6_2_Monthly(VAT6_2ParamVM paramVm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            DataSet dsVAT6_2_Monthly = new DataSet();
            DataTable dt = new DataTable();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string sqlText = "";
            int transResult = 0;

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction


                sqlText = "";
                sqlText = @"

CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200)
,CreatedDateTime   datetime  NULL, UnitRate decimal(25,9),ProductDesc varchar(500), ClosingRate decimal(25,9),AdjustmentValue decimal(25,9)
)

insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate,AdjustmentValue,ProductDesc)
select 
SerialNo,ItemNo
,cast(StartDateTime as date)
,sum(StartingQuantity)
,sum(StartingAmount),'-' CustomerID
,sum(Quantity)
,sum(UnitCost)
,'-'TransID
,TransType
,sum(VATRate)
,avg(SD),Remarks,cast(CreatedDateTime as date), avg(UnitRate),sum(AdjustmentValue)  
,ProductDesc
from VAT6_2 where UserId= @UserId
group by  SerialNo,ItemNo,cast(StartDateTime as date),TransType,Remarks,cast(CreatedDateTime as date),ProductDesc 
order by ItemNo,cast(StartDateTime as date),SerialNo;

select * from #VAT_17

delete from  VAT6_2 where UserId= @UserId

drop table #VAT_17

";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@UserId", paramVm.UserId);
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsVAT6_2_Monthly);

                dsVAT6_2_Monthly.Tables[0].Columns.Add(new DataColumn() { ColumnName = "UserId", DefaultValue = paramVm.UserId });

                CommonDAL commonDal = new CommonDAL();

                string[] result = commonDal.BulkInsert("VAT6_2", dsVAT6_2_Monthly.Tables[0], currConn, transaction);

                cmd.CommandText = GetVAT6_2PartitionQuery();
                cmd.ExecuteNonQuery();

                cmd.CommandText = GetVAT6_2SelectQuery();
                cmd.Parameters.AddWithValue("@StartDate", paramVm.StartDate);
                dsVAT6_2_Monthly.Clear();
                adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dsVAT6_2_Monthly);

                //dsVAT6_2_Monthly.Tables[0].Columns.Add(new DataColumn() {DefaultValue = "1",ColumnName = "Day"});

                #region Commit
                if (transaction != null)
                {
                    transaction.Commit();
                }
                #endregion Commit
            }
            #endregion

            #region Catch and Finally

            catch (Exception ex)
            {

                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ReportDSDAL", "VAT6_2_Monthly", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dsVAT6_2_Monthly;

        }

        public DataSet VAT6_2Toll(string ItemNo, string StartDate, string EndDate, string post1, string post2,
            int BranchId = 0, SysDBInfoVMTemp connVM = null, SqlConnection VcurrConn = null,
            SqlTransaction Vtransaction = null, VAT6_2ParamVM vm = null, bool openingValue = true)
        {
            //Delete all #VAT_17_0 information. It is not necessary for calculation. 
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");


            #endregion

            #region Try

            try
            {
                #region vat19 value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");

                #endregion vat19 value

                #region open connection and transaction
                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += " from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += " where p.ItemNo = '" + ItemNo + "'";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }

                var top = "";
                sqlText = " ";



                sqlText += @"  

create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                #region Conditions

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";

                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @" and pc.ReportType in('VAT6_2','VAT6_1_And_6_2')";

                sqlText += @"  ) as a";

                #region SQL

////////                string OpeningValue = @"
////////
////////		(SELECT  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
////////FROM Products p  WHERE p.ItemNo  in (Select ItemNo from #ProductReceive)  )  
////////
////////UNION ALL 
////////
////////";


                string OpeningValue = @"

		(SELECT  ItemNo, isnull(TollOpeningQuantity,0) Quantity, 0 Amount  
FROM Products p  WHERE p.ItemNo  in (Select ItemNo from #ProductReceive)  )  

UNION ALL 

";

                sqlText += @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);
--DECLARE @ItemNo VARCHAR(20);

--DECLARE @IsExport VARCHAR(20);
--SET @IsExport ='No';

--SET @Itemno='24';
--SET @post1='Y';
--SET @post2='N';
--SET @StartDate='2014-04-01';
--SET @EndDate= '2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL
,CustomerID   varchar (200) NULL
,CustomerName   varchar (1000) NULL
,Address1   varchar (1000) NULL
,Address2   varchar (1000) NULL
,Address3   varchar (1000) NULL
,VATRegistrationNo   varchar (50) NULL
, SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9))


CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9)) 
 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,rd.CostPrice
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in (Select ItemNo from #ProductReceive) 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('TollFinishReceive','TollFinishReceiveWithoutBOM')
AND rd.BranchId=@BranchId
 
 insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',rd.ReceiveDate,rd.PurchaseInvoiceNo,'Receive',ItemNo,
 isnull(rd.SubTotal,0)  SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'TollReceive',rd.ReceiveDate,rd.CostPrice
from PurchaseInvoiceDetails RD 
where rd.ReceiveDate >= @StartDate and rd.ReceiveDate <DATEADD(d,1,@EndDate) 
and rd.ItemNo in (Select ItemNo from #ProductReceive) 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('TollReceive-WIP')
AND rd.BranchId=@BranchId
 
 ------------------------------New Toll IN---------------------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',td.DateTime,th.Code,'Receive',td.ItemNo, isnull(td.SubTotal,0)  SubTotal, 
isnull(td.Quantity,0),0,0,td.TransactionType,td.DateTime,td.UnitCost
from TollClientInOutDetails td 
left outer join TollClientInOuts th on th.Id=td.HeaderId
where td.DateTime >= @StartDate and td.DateTime <DATEADD(d,1,@EndDate) 
and td.ItemNo in (Select ItemNo from #ProductReceive) 
AND (td.Quantity>0)
AND (td.Post =@post1 or td.Post= @post2)
AND td.TransactionType IN('TollClient6_4OutFG')
AND td.BranchId=@BranchId

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',td.DateTime,th.Code,'Receive',td.ItemNo, isnull(td.SubTotal,0)  SubTotal, 
isnull(td.Quantity,0),0,0,td.TransactionType,td.DateTime,td.UnitCost
from TollProductionConsumptionDetails td 
left outer join TollProductionConsumptions th on th.Id=td.HeaderId
where td.DateTime >= @StartDate and td.DateTime <DATEADD(d,1,@EndDate) 
and td.ItemNo in (Select ItemNo from #ProductReceive) 
AND (td.Quantity>0)
AND (td.Post =@post1 or td.Post= @post2)
AND td.TransactionType IN('TollContProductions')
AND td.BranchId=@BranchId


 ------------------------------New Toll IN---------------------


------end receive--------


------start Sale--------
 

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Sale',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in (Select ItemNo from #ProductReceive) 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollFinishIssue')
AND BranchId=@BranchId
 

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', IssueDateTime,IssueNo,'Sale',ID.ItemNo, 
ID.CostPrice SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Issue',IssueDateTime,ID.CostPrice
from IssueDetails ID
left outer join Products on ID.ItemNo= Products.itemNo
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in (Select ItemNo from #ProductReceive) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('OtherToll')
AND id.BranchId=@BranchId
and Products.TollProduct='Y'

 ------------------------------New Toll Out ---------------------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', td.DateTime,th.Code,'Sale',td.ItemNo, isnull(NULLIF(SubTotal,0),0) SubTotal, 
isnull(td.Quantity,0)Quantity,0,0,td.TransactionType,td.DateTime,td.UnitCost
from TollProductionConsumptionDetails td
left outer join TollProductionConsumptions th on th.Id=td.HeaderId
where td.DateTime >= @StartDate and 
td.DateTime < DATEADD(d,1,@EndDate) and ItemNo in (Select ItemNo from #ProductReceive) 
AND (td.Quantity>0)
AND (td.Post =@post1 or td.Post= @post2)
AND td.TransactionType IN('TollClientConsumptionsFG')
AND td.BranchId=@BranchId

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', td.DateTime,th.Code,'Sale',td.ItemNo, isnull(NULLIF(SubTotal,0),0) SubTotal, 
isnull(td.Quantity,0)Quantity,0,0,td.TransactionType,td.DateTime,td.UnitCost
from TollClientInOutDetails td
left outer join TollClientInOuts th on th.Id=td.HeaderId
where td.DateTime >= @StartDate and 
td.DateTime < DATEADD(d,1,@EndDate) and ItemNo in (Select ItemNo from #ProductReceive) 
AND (td.Quantity>0)
AND (td.Post =@post1 or td.Post= @post2)
AND td.TransactionType IN('TollClient6_4BacksFG')
AND td.BranchId=@BranchId

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', td.DateTime,th.Code,'Sale',td.ItemNo, isnull(NULLIF(SubTotal,0),0) SubTotal, 
isnull(td.Quantity,0)Quantity,0,0,td.TransactionType,td.DateTime,td.UnitCost
from TollContInOutDetails td
left outer join TollContInOuts th on th.Id=td.HeaderId
where td.DateTime >= @StartDate and 
td.DateTime < DATEADD(d,1,@EndDate) and ItemNo in (Select ItemNo from #ProductReceive) 
AND (td.Quantity>0)
AND (td.Post =@post1 or td.Post= @post2)
AND td.TransactionType IN('TollCont6_4Outs')
AND td.BranchId=@BranchId

 ------------------------------New Toll Out ---------------------


------end sale--------
 

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo in (Select ItemNo from #ProductReceive)

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate


insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
 SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost
	FROM (

";


                if (openingValue)
                {
                    sqlText += " " + OpeningValue;
                }
                else
                {
                    sqlText += @" (SELECT  ItemNo, 0 Quantity, 0 Amount  
FROM Products p  WHERE p.ItemNo  in (Select ItemNo from #ProductReceive)  )  

UNION ALL ";

                }

                sqlText += @"


(SELECT ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
 FROM ReceiveDetails WHERE Post='Y'  AND ReceiveDateTime< @StartDate   
--AND TransactionType IN('TollReceive')
AND TransactionType IN('TollFinishReceive','TollFinishReceiveWithoutBOM')

AND ItemNo  in (Select ItemNo from #ProductReceive) 
AND BranchId=@BranchId
group by ItemNo
) 
 
UNION ALL 

(SELECT  ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
 FROM PurchaseInvoiceDetails WHERE Post='Y'  AND ReceiveDate< @StartDate   
AND TransactionType IN('TollReceive-WIP')AND ItemNo  in (Select ItemNo from #ProductReceive) 
AND BranchId=@BranchId
group by ItemNo
) 

------------------New Toll IN--------------------
UNION ALL 

(SELECT  ItemNo,isnull(sum(isnull(Quantity,0)),0) ReceiveQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
 FROM TollClientInOutDetails WHERE Post='Y'  AND Datetime< @StartDate  
AND TransactionType IN('TollClient6_4OutFG')AND ItemNo  in (Select ItemNo from #ProductReceive) 
AND BranchId=@BranchId
group by ItemNo
) 

UNION ALL 

(SELECT  ItemNo,isnull(sum(isnull(Quantity,0)),0) ReceiveQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
 FROM TollProductionConsumptionDetails WHERE Post='Y'  AND Datetime< @StartDate  
AND TransactionType IN('TollContProductions')AND ItemNo  in (Select ItemNo from #ProductReceive) 
AND BranchId=@BranchId
group by ItemNo
) 
 
-------New Toll  IN-------------------
 
UNION ALL 

(SELECT   ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
-CASE WHEN @IsExport='Yes' THEN -1*isnull(sum(isnull(DollerValue,0)),0) ELSE -1*isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate     
AND TransactionType IN('TollFinishIssue')
AND ItemNo  in (Select ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)
 
UNION ALL 

(SELECT  ItemNo,-1*isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN -1*isnull(sum(isnull(SubTotal,0)),0) ELSE -1*isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
 FROM IssueDetails WHERE Post='Y'  AND IssueDateTime< @StartDate   
AND TransactionType IN('OtherToll')AND ItemNo  in (Select ItemNo from #ProductReceive) 
AND BranchId=@BranchId
group by ItemNo
) 
 
 ------------------------------Toll Out ---------------------

 UNION ALL 

(SELECT   ItemNo,-isnull(sum(isnull(Quantity,0)),0) SaleNewQuantity,
-1*isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TollProductionConsumptionDetails   WHERE Post='Y' AND DateTime< @StartDate 
AND TransactionType IN('TollClientConsumptionsFG')
AND ItemNo  in (Select ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)


 UNION ALL 

(SELECT   ItemNo,-isnull(sum(isnull(Quantity,0)),0) SaleNewQuantity,
-1*isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TollClientInOutDetails   WHERE Post='Y' AND DateTime< @StartDate 
AND TransactionType IN('TollClient6_4BacksFG')
AND ItemNo  in (Select ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)

 UNION ALL 

(SELECT   ItemNo,-isnull(sum(isnull(Quantity,0)),0) SaleNewQuantity,
-1*isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TollContInOutDetails   WHERE Post='Y' AND DateTime< @StartDate 
AND TransactionType IN('TollCont6_4Outs')
AND ItemNo  in (Select ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
)

 ------------------------------Toll Out ---------------------


) AS a GROUP BY a.ItemNo




insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate  
from #VATTemp_17
order by dailydate,SerialNo;

update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
and remarks not IN('TollClient6_4BacksFG','TollClient6_4OutFG','TollCont6_4Outs','TollClientConsumptionsFG','TollContProductions')
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)
AND BranchId=@BranchId

-------Toll New -------------------

update #VAT_17 set 
CustomerID=TollClientInOuts.CustomerID
from TollClientInOuts
where TollClientInOuts.Code=#VAT_17.TransID 
and #VAT_17.TransType in('Receive','Sale')
and remarks IN('TollClient6_4OutFG','TollClient6_4BacksFG')
AND (TollClientInOuts.Post =@post1 or TollClientInOuts.Post= @post2)
AND BranchId=@BranchId

update #VAT_17 set 
CustomerID=TollContInOuts.VendorID
from TollContInOuts
where TollContInOuts.Code=#VAT_17.TransID 
and #VAT_17.TransType in('Receive','Sale')
and remarks IN('TollClient6_4OutFG','TollClient6_4BacksFG')
AND (TollContInOuts.Post =@post1 or TollContInOuts.Post= @post2)
AND BranchId=@BranchId

update #VAT_17 set 
CustomerName=c.CustomerName
,Address1=c.Address1
,Address2=c.Address2
,Address3=c.Address3
,VATRegistrationNo=c.VATRegistrationNo
from Customers c
where c.CustomerId=#VAT_17.CustomerId 
and remarks Not IN('TollCont6_4Outs')

update #VAT_17 set 
CustomerName=v.VendorName
,Address1=v.Address1
,Address2=v.Address2
,Address3=v.Address3
,VATRegistrationNo=v.VATRegistrationNo
from Vendors v
where v.VendorId=#VAT_17.CustomerId 
and remarks IN('TollCont6_4Outs')

-------Toll New -------------------

------select #VAT_17.SerialNo
------,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime
------,#VAT_17.StartingQuantity
------,#VAT_17.StartingAmount
------,#VAT_17.TransID,#VAT_17.TransType
------,isnull(c.CustomerName,'-')CustomerName
------,isnull(c.Address1,'-')Address1
------,isnull(c.Address2,'-')Address2
------,isnull(c.Address3,'-')Address3
------,isnull(c.VATRegistrationNo,'-')VATRegistrationNo
------,p.ProductName,isnull(p.HSCodeNo,'NA')HSCodeNo
------,#VAT_17.Quantity,#VAT_17.VATRate
------,#VAT_17.SD,#vat_17.UnitCost,remarks
------,#VAT_17.ItemNo
------,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime
------, isnull(#vat_17.UnitRate ,0)UnitRate 
------from #VAT_17  left outer JOIN 
------Customers as C on #VAT_17.CustomerID=c.CustomerID left outer join 
------Products P on #VAT_17.ItemNo=p.ItemNo
------order by CreatedDateTime,SerialNo

select #VAT_17.SerialNo
,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime
,#VAT_17.StartingQuantity
,#VAT_17.StartingAmount
,#VAT_17.TransID,#VAT_17.TransType
,isnull(#VAT_17.CustomerName,'-')CustomerName
,isnull(#VAT_17.Address1,'-')Address1
,isnull(#VAT_17.Address2,'-')Address2
,isnull(#VAT_17.Address3,'-')Address3
,isnull(#VAT_17.VATRegistrationNo,'-')VATRegistrationNo
,p.ProductName,isnull(p.HSCodeNo,'NA')HSCodeNo
,#VAT_17.Quantity,#VAT_17.VATRate
,#VAT_17.SD,#vat_17.UnitCost,remarks
,#VAT_17.ItemNo
,isnull(#vat_17.CreatedDateTime,'2024-May-01')CreatedDateTime
, isnull(#vat_17.UnitRate ,0)UnitRate 
from #VAT_17  left outer JOIN 
Customers as C on #VAT_17.CustomerID=c.CustomerID left outer join 
Products P on #VAT_17.ItemNo=p.ItemNo

order by CreatedDateTime,SerialNo

DROP TABLE #VAT_17
DROP TABLE #VATTemp_17

                ";

                #endregion SQL

                top = "A";

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();

                objCommVAT17.Connection = currConn;
                objCommVAT17.Transaction = transaction;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter
                objCommVAT17.Parameters.AddWithValue("@BranchId", BranchId);

                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }

                if (!string.IsNullOrEmpty(vm.ItemNo))
                {
                    if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
                    }
                }

                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = post2;
                }

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                }

                #endregion Parameter
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

            }
            #endregion

            #region Catch & Finally
            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }


                FileLogger.Log("ReportDSDAL", "VAT6_2Toll", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_2Toll_MIS(VAT6_2ParamVM reportVm, SqlConnection connection = null, SqlTransaction transaction = null, SysDBInfoVMTemp connVM = null)
        {
            //Delete all #VAT_17_0 information. It is not necessary for calculation. 
            #region Variables

            SqlConnection currConn = connection;
            SqlTransaction vtransaction = transaction;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");


            #endregion

            #region Try

            try
            {
                #region vat19 value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");

                #endregion vat19 value

                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }

                if (vtransaction == null)
                {
                    vtransaction = currConn.BeginTransaction();
                }

                #endregion open connection and transaction

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += " from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += " where p.ItemNo = '" + reportVm.ItemNo + "'";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn);
                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }


                var top = "";
                sqlText = " ";


                #region SQL

                sqlText += @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);
--DECLARE @ItemNo VARCHAR(20);

--DECLARE @IsExport VARCHAR(20);
--SET @IsExport ='No';

--SET @Itemno='24';
--SET @post1='Y';
--SET @post2='N';
--SET @StartDate='2014-04-01';
--SET @EndDate= '2014-04-27';

 




             
declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9))

CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9), OpeningDate datetime null) 
 


";


                sqlText += @"  


create table #ProductsToll(ItemNo varchar(50))

insert into #ProductsToll(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
 

";
                if (!string.IsNullOrWhiteSpace(reportVm.ProdutType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";
                }

                else if (!string.IsNullOrWhiteSpace(reportVm.ProdutCategoryId))
                {
                    if (reportVm.ProdutCategoryLike)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(reportVm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }

                sqlText += @"  and pc.ReportType in ('VAT6_2')";

                sqlText += @"  ) as a ";



                sqlText += @" insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,rd.CostPrice
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo in (select ItemNo from #ProductsToll) 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('TollFinishReceive','TollFinishReceiveWithoutBOM')
AND rd.BranchId=@BranchId
 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',rd.ReceiveDate,rd.PurchaseInvoiceNo,'Receive',ItemNo,
 isnull(rd.SubTotal,0)  SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'TollReceive',rd.ReceiveDate,rd.CostPrice
from PurchaseInvoiceDetails RD 
where rd.ReceiveDate >= @StartDate and rd.ReceiveDate <DATEADD(d,1,@EndDate) 
and rd.ItemNo in (select ItemNo from #ProductsToll)
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('TollReceive-WIP')
AND rd.BranchId=@BranchId
 


------end receive--------


------start Sale--------
 

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Sale',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in (select ItemNo from #ProductsToll)
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollFinishIssue')
AND BranchId=@BranchId
 

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', IssueDateTime,IssueNo,'Sale',ID.ItemNo, 
ID.CostPrice SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Issue',IssueDateTime,ID.CostPrice
from IssueDetails ID
left outer join Products on ID.ItemNo= Products.itemNo
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in (select ItemNo from #ProductsToll) 
AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('OtherToll')
AND id.BranchId=@BranchId
and Products.TollProduct='Y'

 
 
 

-----------end sale--------------
 

--select @OpeningDate = p.OpeningDate from Products p
--WHERE ItemNo=@ItemNo

--IF(@OpeningDate<@StartDate)
--set @OpeningDate=@StartDate


insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)

SELECT distinct 'A' SerialNo,@StartDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
 SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost

FROM (
(

SELECT  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo in (select ItemNo from #ProductsToll)  
)  

UNION ALL 

(
SELECT  ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM ReceiveDetails WHERE Post='Y'  AND ReceiveDateTime< @StartDate   

AND TransactionType IN('TollFinishReceive','TollFinishReceiveWithoutBOM')

AND ItemNo in (select ItemNo from #ProductsToll)
AND BranchId=@BranchId
group by ItemNo
) 
 
UNION ALL 

(SELECT  ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
 FROM PurchaseInvoiceDetails WHERE Post='Y'  AND ReceiveDate< @StartDate   
AND TransactionType IN('TollReceive-WIP')AND ItemNo in (select ItemNo from #ProductsToll)
AND BranchId=@BranchId
group by ItemNo
) 
 
 
UNION ALL 

(SELECT   ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
-CASE WHEN @IsExport='Yes' THEN -1*isnull(sum(isnull(DollerValue,0)),0) ELSE -1*isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate     
AND TransactionType IN('TollFinishIssue')
AND ItemNo in (select ItemNo from #ProductsToll)
AND BranchId=@BranchId
group by ItemNo
)
 
UNION ALL 

(SELECT  ItemNo,-1*isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN -1*isnull(sum(isnull(SubTotal,0)),0) ELSE -1*isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
 FROM IssueDetails WHERE Post='Y'  AND IssueDateTime< @StartDate   
AND TransactionType IN('OtherToll')AND ItemNo in (select ItemNo from #ProductsToll) 
AND BranchId=@BranchId
group by ItemNo
) 
 
) AS a GROUP BY a.ItemNo



update #VATTemp_17 set OpeningDate = Products.OpeningDate
from Products
where #VATTemp_17.ItemNo = Products.ItemNo and #VATTemp_17.SerialNo = 'A'

update #VATTemp_17 set Dailydate = OpeningDate
where  #VATTemp_17.SerialNo = 'A' and OpeningDate > Dailydate


insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate)

select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate  
from #VATTemp_17
order by dailydate,SerialNo;

update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)
AND BranchId=@BranchId



select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
#VAT_17.StartingQuantity,#VAT_17.StartingAmount,#VAT_17.ItemNo,
#VAT_17.TransID,#VAT_17.TransType,
isnull(c.CustomerName,'-')CustomerName,
isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
isnull(c.Address3,'-')Address3,
isnull(c.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
,#VAT_17.SD,#vat_17.UnitCost,remarks
,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime, isnull(#vat_17.UnitRate ,0)UnitRate 
from #VAT_17  left outer JOIN 
Customers as C on #VAT_17.CustomerID=c.CustomerID left outer join 
Products P on #VAT_17.ItemNo=p.ItemNo

order by #VAT_17.ItemNo,CreatedDateTime,SerialNo

DROP TABLE #VAT_17
DROP TABLE #VATTemp_17

                ";

                #endregion SQL



                top = "A";


                if (reportVm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();

                objCommVAT17.Connection = currConn;
                objCommVAT17.Transaction = vtransaction;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter
                objCommVAT17.Parameters.AddWithValue("@BranchId", reportVm.BranchId);

                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }

                if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", reportVm.ItemNo);
                }
                else
                {
                    objCommVAT17.Parameters["@ItemNo"].Value = reportVm.ItemNo;
                }

                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", reportVm.StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = reportVm.StartDate;
                }
                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", reportVm.EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = reportVm.EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@StartDate_0"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@StartDate_0", StartDate_0);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@StartDate_0"].Value = StartDate_0;
                //}
                //if (!objCommVAT17.Parameters.Contains("@EndDate_0"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@EndDate_0", EndDate_0);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@EndDate_0"].Value = EndDate_0;
                //}

                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", reportVm.Post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = reportVm.Post1;
                }
                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", reportVm.Post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = reportVm.Post2;
                }

                if (!string.IsNullOrWhiteSpace(reportVm.ProdutType))
                {
                    objCommVAT17.Parameters.AddWithValue("@ProdutType", reportVm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(reportVm.ProdutCategoryId))
                {
                    if (reportVm.ProdutCategoryLike == true)
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutGroupName", reportVm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", reportVm.ProdutCategoryId);
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);


                if (transaction == null && vtransaction != null)
                {
                    vtransaction.Commit();
                }

            }
            #endregion

            #region Catch & Finally


            catch (Exception ex)
            {

                if (transaction == null && vtransaction != null)
                {
                    vtransaction.Rollback();
                }

                FileLogger.Log("ReportDSDAL", "VAT6_2Toll", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null && connection == null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        #region Comments - Nov-01-2020

        public DataSet VAT6_2_Backup(string ItemNo, string StartDate, string EndDate, string post1, string post2,
           int BranchId = 0, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null,
           bool Opening = false, bool Opening6_2 = false, SysDBInfoVMTemp connVM = null, string ProdutType = ""
          , string ProdutCategoryId = "", bool VAT6_2_1 = false, bool StockMovement = false)
        {
            return null;
        }

        #endregion

        #region VAT6_2Final - Comments - Nov-01-2020

        //        public DataSet VAT6_2Final(VAT6_2ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        //        {
        //            #region Variables

        //            SqlConnection currConn = null;
        //            SqlTransaction transaction = null;
        //            string sqlText = "";
        //            DataSet dataSet = new DataSet("ReportVAT17");
        //            string PDesc = "N";
        //            #endregion

        //            #region Try

        //            try
        //            {

        //                #region VAT 9.1 Value

        //                string vExportInBDT = "";
        //                CommonDAL commonDal = new CommonDAL();
        //                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");
        //                PDesc = commonDal.settingsDesktop("VAT6_2", "ProductDescription");

        //                #endregion vat19 value

        //                #region open connection and transaction
        //                if (VcurrConn != null)
        //                {
        //                    currConn = VcurrConn;
        //                }
        //                if (Vtransaction != null)
        //                {
        //                    transaction = Vtransaction;
        //                }

        //                if (currConn == null)
        //                {
        //                    currConn = _dbsqlConnection.GetConnectionNoPooling();
        //                    if (currConn.State != ConnectionState.Open)
        //                    {
        //                        currConn.Open();
        //                    }
        //                }
        //                if (transaction == null)
        //                {
        //                    transaction = currConn.BeginTransaction("");
        //                }
        //                #endregion open connection and transaction

        //                #region Checkpoint

        //                string IsExport = "No";

        //                if (vExportInBDT == "N")
        //                {
        //                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
        //                    sqlText += " from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
        //                    sqlText += " where p.ItemNo = '" + vm.ItemNo + "'";

        //                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
        //                    object objItemNo = cmd.ExecuteScalar();
        //                    if (objItemNo == null)
        //                        IsExport = "No";
        //                    else
        //                        IsExport = objItemNo.ToString();
        //                }

        //                #endregion

        //                sqlText = " ";

        //                #region SQL Text

        //                sqlText += @"
        //                
        //------DECLARE @StartDate DATETIME;
        //------DECLARE @EndDate DATETIME;
        //------DECLARE @post1 VARCHAR(2);
        //------DECLARE @post2 VARCHAR(2);
        //------DECLARE @ItemNo VARCHAR(20);
        //------DECLARE @IsExport VARCHAR(20);
        //------SET @IsExport ='No';
        //------SET @Itemno='24';
        //------SET @post1='Y';
        //------SET @post2='N';
        //------SET @StartDate='2014-04-01';
        //------SET @EndDate= '2014-04-27';
        //------DECLARE @BranchId  as int = 1;
        //
        //
        //declare @Present DECIMAL(25, 9);
        //DECLARE @OpeningDate DATETIME;
        //
        //
        //CREATE TABLE #VAT_17(
        //SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
        // StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
        // StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
        // SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
        // UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9),ProductDesc varchar(200))
        //
        //CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
        // TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
        // Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9)) 
        // 
        //";
        //                sqlText += @"  
        //select * into #ProductReceive from   ( 
        //select Products.ItemNo from Products 
        //left outer join ProductCategories pc
        //on pc.CategoryID=Products.CategoryID
        // where 1=1
        //
        //";
        //                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
        //                {
        //                    sqlText += @"  and IsRaw=@ProdutType";
        //                }
        //                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
        //                {
        //                    sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
        //                }
        //                else
        //                {
        //                    sqlText += @"  and ItemNo=@ItemNo";
        //                }
        //                sqlText += @"  ) as a
        //
        //";


        //                        sqlText += @"
        // 
        //insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        //
        //select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo, 
        //--CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
        //CurrencyValue AS SubTotal,
        //isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,SalesInvoiceDetails.TransactionType--'Sale'
        //,InvoiceDateTime,NBRPrice
        //from SalesInvoiceDetails
        //where InvoiceDateTime >= @StartDate and 
        //InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
        //AND (UOMQty>0)
        //AND (Post =@post1 or Post= @post2)
        //AND TransactionType IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
        //AND BranchId=@BranchId
        // 
        //
        //insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        //select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',ItemNo,
        //--CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
        //-CurrencyValue AS SubTotal,
        //
        //- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice
        //from SalesInvoiceDetails
        //where InvoiceDateTime >= @StartDate and 
        //InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive)
        // 
        //AND (UOMQty>0)
        //AND (Post =@post1 or Post= @post2)
        //AND TransactionType IN('Credit','RawCredit')
        //AND BranchId=@BranchId
        //
        //-------------------------------------------------- End Sale --------------------------------------------------
        //insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
        //,Quantity,VATRate,SD,Remarks,CreateDateTime)
        //select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
        //pd.ItemNo
        //";
        //                        if (TotalIncludeSD)
        //                        {
        //                            sqlText += @",isnull(subtotal,0)+isnull(pd.SDAmount,0) ";
        //                        }
        //                        else
        //                        {
        //                            sqlText += @",isnull(subtotal,0) ";
        //                        }
        //                        sqlText += @"
        //,isnull(UOMQty,0) ,
        //pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
        //from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
        //and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
        //AND  (pd.Post =@post1 or pd.Post= @post2)
        //AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')
        //AND pd.BranchId=@BranchId
        // 
        //insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
        //select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
        //,pd.BENumber,pd.ItemNo";
        //                        if (TotalIncludeSD)
        //                        {
        //                            sqlText += @"
        //,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.OthersAmount,0)+isnull(pd.SDAmount,0))";
        //                        }
        //                        else
        //                        {
        //                            sqlText += @"
        //,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+isnull(pd.OthersAmount,0))";
        //                        }
        //                        sqlText += @"
        //,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
        //from PurchaseInvoiceDetails PD 
        //where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
        //and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
        //AND (pd.Post =@post1 or pd.Post= @post2)
        //AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
        //AND pd.BranchId=@BranchId
        // 
        //insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
        //select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
        //,pd.BENumber,pd.ItemNo
        //";
        //                        if (TotalIncludeSD)
        //                        {
        //                            sqlText += @"
        //,-1*isnull(subtotal,0)+isnull(pd.SDAmount,0) ";

        //                        }
        //                        else
        //                        {
        //                            sqlText += @"
        //,-1*isnull(subtotal,0) ";
        //                        }
        //                        sqlText += @"
        //
        //,-isnull(UOMQty,0) ,
        //-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
        //from PurchaseInvoiceDetails PD 
        //where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
        //and pd.ItemNo in(select distinct ItemNo from #ProductReceive)
        //AND (pd.Post =@post1 or pd.Post= @post2)
        //AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
        //AND pd.BranchId=@BranchId
        //
        //--------------------------------------------------------------------------------------------------------------
        //";


        //                sqlText += @"
        //--select @OpeningDate = p.OpeningDate from Products p
        //--WHERE ItemNo=@ItemNo
        //--
        //--IF(@OpeningDate<@StartDate)
        //set @OpeningDate=@StartDate
        //
        //
        //insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)
        //SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
        // SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost
        //	FROM (
        //SELECT distinct  ItemNo, 0 Quantity, 0 Amount  
        //FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
        //AND BranchId='1'
        //
        //";

        //                    if (vm.BranchId > 1)
        //                    {
        //                        sqlText += @"		 
        //UNION ALL 
        //SELECT distinct  ItemNo, isnull(StockQuantity,0) Quantity, isnull(p.StockValue,0) Amount  
        //FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
        //AND BranchId=@BranchId
        //AND BranchId>1
        //--group by ItemNo
        //
        //";
        //                    }
        //                    else
        //                    {
        //                        sqlText += @"		 
        //UNION ALL 
        //SELECT distinct  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
        //FROM Products p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductReceive)
        //AND BranchId='1'
        //--group by ItemNo
        //
        // ";
        //                    }


        //                sqlText += @"
        //
        //UNION ALL 
        //(SELECT  distinct  ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
        //--CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
        //-isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
        //FROM SalesInvoiceDetails   WHERE 1=1
        // AND (Post =@post1 or Post= @post2)  
        // AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
        //AND TransactionType IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
        //AND ItemNo  in(select distinct ItemNo from #ProductReceive)
        //AND BranchId=@BranchId
        //group by ItemNo
        //)
        //
        //UNION ALL  
        //(SELECT distinct  ItemNo,isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleCreditQuantity,
        //--CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
        //isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
        //FROM SalesInvoiceDetails   WHERE 1=1
        // AND (Post =@post1 or Post= @post2)  
        // AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
        // AND TransactionType in( 'Credit','RawCredit') AND ItemNo  in(select distinct ItemNo from #ProductReceive)
        //AND BranchId=@BranchId
        //group by ItemNo
        //
        //)
        //    
        //
        //) AS a GROUP BY a.ItemNo
        //
        //insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
        //CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        //select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate  
        //from #VATTemp_17
        //order by dailydate,SerialNo;
        //
        //update #VAT_17 set StartDateTime=@StartDate where SerialNo='A' 
        //
        //update #VAT_17 set 
        //CustomerID=SalesInvoiceHeaders.CustomerID
        //from SalesInvoiceHeaders
        //where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
        //and #VAT_17.TransType='Sale'
        //AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)
        //AND BranchId=@BranchId 
        //
        //
        //update #VAT_17 set #VAT_17.ProductDesc=Products.productName
        //	 from Products where Products.itemNo=#VAT_17.ItemNo
        //";

        //                if (PDesc.ToLower() == "y")
        //                {
        //                    sqlText += @"  
        //update #VAT_17 set #VAT_17.ProductDesc=SalesInvoiceDetails.ProductDescription
        //from SalesInvoiceDetails where SalesInvoiceDetails.itemNo=#VAT_17.ItemNo and SalesInvoiceDetails.SalesInvoiceNo=#VAT_17.TransID
        //";
        //                }






        //                sqlText += @" 
        //select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
        //#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
        //#VAT_17.TransID,#VAT_17.TransType,
        //isnull(c.CustomerName,'-')CustomerName,
        //isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
        //isnull(c.Address3,'-')Address3,
        //isnull(c.VATRegistrationNo,'-')VATRegistrationNo
        //,#VAT_17.ProductDesc ProductName 
        //,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
        //,#VAT_17.SD,#vat_17.UnitCost,#VAT_17.remarks
        //,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime, isnull(#vat_17.UnitRate ,0)UnitRate ,#VAT_17.ItemNo
        //from #VAT_17  left outer JOIN 
        //Customers as C on #VAT_17.CustomerID=c.CustomerID 
        //left outer join Products P on #VAT_17.ItemNo=p.ItemNo
        //
        //
        //order by #VAT_17.StartDateTime,#VAT_17.SerialNo
        //
        //DROP TABLE #VAT_17
        //DROP TABLE #VATTemp_17
        //DROP TABLE #ProductReceive
        //
        //                ";

        //                #endregion SQL

        //                if (vm.BranchId == 0)
        //                {
        //                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //                }

        //                #region SQL Command

        //                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);


        //                #endregion

        //                #region Parameter
        //                objCommVAT17.Parameters.AddWithValue("@PDesc", PDesc);
        //                objCommVAT17.Parameters.AddWithValue("@BranchId", vm.BranchId);

        //                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
        //                }
        //                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
        //                }
        //                else
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
        //                }

        //                if (!objCommVAT17.Parameters.Contains("@IsExport"))
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
        //                }
        //                else
        //                {
        //                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
        //                }
        //                if (!objCommVAT17.Parameters.Contains("@StartDate"))
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@StartDate", vm.StartDate);
        //                }
        //                else
        //                {
        //                    objCommVAT17.Parameters["@StartDate"].Value = vm.StartDate;
        //                }
        //                if (!objCommVAT17.Parameters.Contains("@EndDate"))
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@EndDate", vm.EndDate);
        //                }
        //                else
        //                {
        //                    objCommVAT17.Parameters["@EndDate"].Value = vm.EndDate;
        //                }
        //                if (!objCommVAT17.Parameters.Contains("@post1"))
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@post1", vm.Post1);
        //                }
        //                else
        //                {
        //                    objCommVAT17.Parameters["@post1"].Value = vm.Post1;
        //                }
        //                if (!objCommVAT17.Parameters.Contains("@post2"))
        //                {
        //                    objCommVAT17.Parameters.AddWithValue("@post2", vm.Post2);
        //                }
        //                else
        //                {
        //                    objCommVAT17.Parameters["@post2"].Value = vm.Post2;
        //                }

        //                #endregion Parameter

        //                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
        //                dataAdapter.Fill(dataSet);

        //            }
        //            #endregion

        //            #region Catch & Finally

        //            catch (SqlException sqlex)
        //            {
        //                throw sqlex;
        //            }
        //            catch (Exception ex)
        //            {
        //                throw ex;
        //            }
        //            finally
        //            {

        //                if (VcurrConn == null)
        //                {
        //                    if (currConn != null)
        //                    {
        //                        if (currConn.State == ConnectionState.Open)
        //                        {
        //                            currConn.Close();
        //                        }
        //                    }
        //                }

        //            }

        //            #endregion

        //            return dataSet;
        //        }

        #endregion VAT6_2Final

        #region Comments - March-01-2020

        ////        public DataSet VAT6_2Backup09032020(string ItemNo, string StartDate, string EndDate, string post1, string post2, int BranchId = 0, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, bool Opening = false, bool Opening6_2 = false, SysDBInfoVMTemp connVM = null)
        ////        {
        ////            //Delete all #VAT_17_0 information. It is not necessary for calculation. 
        ////            #region Variables

        ////            SqlConnection currConn = null;
        ////            SqlTransaction transaction = null;
        ////            int transResult = 0;
        ////            int countId = 0;
        ////            string sqlText = "";
        ////            DataSet dataSet = new DataSet("ReportVAT17");
        ////            string PDesc = "N";

        ////            #endregion

        ////            #region Try

        ////            try
        ////            {

        ////                #region vat19 value

        ////                string vExportInBDT = "";
        ////                CommonDAL commonDal = new CommonDAL();
        ////                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");
        ////                PDesc = commonDal.settingsDesktop("VAT6_2", "ProductDescription");

        ////                #endregion vat19 value

        ////                #region open connection and transaction
        ////                if (VcurrConn != null)
        ////                {
        ////                    currConn = VcurrConn;
        ////                }
        ////                if (Vtransaction != null)
        ////                {
        ////                    transaction = Vtransaction;
        ////                }

        ////                if (currConn == null)
        ////                {
        ////                    currConn = _dbsqlConnection.GetConnectionNoPooling();
        ////                    if (currConn.State != ConnectionState.Open)
        ////                    {
        ////                        currConn.Open();
        ////                    }
        ////                }
        ////                if (transaction == null)
        ////                {
        ////                    transaction = currConn.BeginTransaction("");
        ////                }
        ////                #endregion open connection and transaction

        ////                string IsExport = "No";

        ////                if (vExportInBDT == "N")
        ////                {
        ////                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
        ////                    sqlText += " from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
        ////                    sqlText += " where p.ItemNo = '" + ItemNo + "'";

        ////                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
        ////                    object objItemNo = cmd.ExecuteScalar();
        ////                    if (objItemNo == null)
        ////                        IsExport = "No";
        ////                    else
        ////                        IsExport = objItemNo.ToString();
        ////                }


        ////                var top = "";
        ////                sqlText = " ";


        ////                #region SQL

        ////                sqlText += @"
        ////                
        ////--DECLARE @StartDate DATETIME;
        ////--DECLARE @EndDate DATETIME;
        ////--DECLARE @post1 VARCHAR(2);
        ////--DECLARE @post2 VARCHAR(2);
        ////--DECLARE @ItemNo VARCHAR(20);
        ////
        ////--DECLARE @IsExport VARCHAR(20);
        ////--SET @IsExport ='No';
        ////
        ////--SET @Itemno='24';
        ////--SET @post1='Y';
        ////--SET @post2='N';
        ////--SET @StartDate='2014-04-01';
        ////--SET @EndDate= '2014-04-27';
        ////
        //// 
        ////
        ////             
        ////declare @Present DECIMAL(25, 9);
        ////DECLARE @OpeningDate DATETIME;
        ////
        ////
        ////CREATE TABLE #VAT_17(
        ////SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
        //// StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
        //// StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
        //// SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
        //// UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9),ProductDesc varchar(200))
        ////
        ////CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
        //// TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
        //// Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9)) 
        //// 
        ////";
        ////                if (Opening == false)
        ////                {


        ////                    sqlText += @"
        ////
        ////insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        ////select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
        ////CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
        ////isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,rd.CostPrice
        ////from ReceiveDetails RD 
        ////where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
        ////and rd.ItemNo=@ItemNo 
        ////AND (Quantity>0)
        ////AND (rd.Post =@post1 or rd.Post= @post2)
        ////AND rd.TransactionType IN('Other','Tender','PackageProduction' 
        ////--- From Sale
        ////,'Wastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
        ////--- From Purchase
        ////,'TradingImport'
        ////)
        ////AND rd.BranchId=@BranchId
        ////
        ////insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        ////select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
        ////CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
        ////isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,rd.CostPrice
        ////from ReceiveDetails RD 
        ////left outer join products p on RD.ItemNo=p.ItemNo
        ////left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
        ////where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
        ////and rd.ItemNo=@ItemNo 
        ////AND (Quantity>0)
        ////AND (rd.Post =@post1 or rd.Post= @post2)
        ////AND rd.TransactionType IN('TollReceive')
        ////and pc.IsRaw in('finish')
        ////AND rd.BranchId=@BranchId
        ////
        ////insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        ////select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
        ////-CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
        ////-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),-rd.VATAmount
        ////,-rd.SDAmount,RD.TransactionType,rd.CreatedOn,rd.CostPrice
        ////from ReceiveDetails RD
        ////where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
        ////and rd.ItemNo=@ItemNo 
        ////AND (Quantity>0)
        ////AND (rd.Post =@post1 or rd.Post= @post2)
        ////AND RD.TransactionType IN('ReceiveReturn')
        ////AND rd.BranchId=@BranchId
        ////
        //// 
        ////
        ////------end receive--------
        ////
        ////
        ////------start Sale--------
        //// 
        ////insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        ////select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
        ////--CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
        ////CurrencyValue AS SubTotal,
        ////isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Sale',InvoiceDateTime,NBRPrice
        ////from SalesInvoiceDetails
        ////where InvoiceDateTime >= @StartDate and 
        ////InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
        ////AND (UOMQty>0)
        ////AND (Post =@post1 or Post= @post2)
        ////AND TransactionType IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
        ////AND BranchId=@BranchId
        //// 
        ////insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        ////select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
        ////--CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
        ////-CurrencyValue AS SubTotal,
        ////
        ////- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice
        ////from SalesInvoiceDetails
        ////where InvoiceDateTime >= @StartDate and 
        ////InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
        ////AND (UOMQty>0)
        ////AND (Post =@post1 or Post= @post2)
        ////AND TransactionType IN('Credit')
        ////AND BranchId=@BranchId
        ////
        ////------end sale--------
        ////
        ////------Start Disposee--------
        ////
        ////insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        ////select 'B1', DisposeDetails.DisposeDate,DisposeDetails.DisposeNumber,'Sale',@ItemNo,
        ////CASE WHEN @IsExport='Yes' THEN isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(DollarPrice,0),0) ELSE isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0) END AS SubTotal,
        ////isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,sih.TransactionType,DisposeDetails.DisposeDate,RealPrice
        ////from DisposeDetails  LEFT OUTER JOIN
        ////DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
        ////where DisposeDetails.DisposeDate >= @StartDate and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
        ////and ItemNo=@ItemNo 
        ////AND (Quantity+QuantityImport>0)
        ////AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
        ////AND sih.TransactionType IN('VAT27') and sih.FromStock in ('Y')
        ////AND sih.BranchId=@BranchId
        ////
        ////------end Disposee--------
        ////";
        ////                }

        ////                sqlText += @"
        ////select @OpeningDate = p.OpeningDate from Products p
        ////WHERE ItemNo=@ItemNo
        ////
        ////IF(@OpeningDate<@StartDate)
        ////set @OpeningDate=@StartDate
        ////
        ////
        ////insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)
        ////SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
        //// SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost
        ////	FROM (
        ////";
        ////                if (Opening6_2 == false)
        ////                {
        ////                    if (BranchId > 1)
        ////                    {
        ////                        sqlText += @"		 
        ////SELECT @itemNo ItemNo, isnull(StockQuantity,0) Quantity, isnull(p.StockValue,0) Amount  
        ////FROM ProductStocks p  WHERE p.ItemNo = @itemNo  
        ////AND BranchId=@BranchId
        ////AND BranchId>1
        ////UNION ALL 
        ////
        ////";
        ////                    }
        ////                    else
        ////                    {
        ////                        sqlText += @"		 
        ////SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
        ////FROM Products p  WHERE p.ItemNo = @itemNo  
        ////AND BranchId='1'
        ////UNION ALL ";
        ////                        if (Opening == false)
        ////                        {
        ////                            sqlText += @"		 
        ////SELECT @itemNo ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
        ////FROM ProductStocks p  WHERE p.ItemNo = @itemNo  
        ////AND BranchId=@BranchId
        ////AND BranchId>1
        ////UNION ALL 
        ////";
        ////                        }
        ////                    }
        ////                }
        ////                sqlText += @"		 
        ////
        ////(SELECT @itemNo ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) Quantity,
        ////CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS Amount
        //// FROM ReceiveDetails WHERE Post='Y'  AND ReceiveDateTime>= '07/01/2019' and ReceiveDateTime < @StartDate  
        ////AND TransactionType IN('Other','Tender','PackageProduction' 
        ////--- From Sale
        ////,'Wastage','Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
        ////--- From Purchase
        ////,'TradingImport'
        ////)AND ItemNo = @itemNo 
        ////AND BranchId=@BranchId
        ////
        ////
        ////) 
        ////
        ////UNION ALL 
        ////
        ////(SELECT @itemNo ItemNo,isnull(sum(isnull(RD.UOMQty,isnull(RD.Quantity,0))),0) ReceiveQuantity,
        ////CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(RD.DollerValue,0)),0) ELSE isnull(sum(isnull(RD.SubTotal,0)),0) END AS SubTotal
        //// FROM ReceiveDetails  RD
        ////left outer join products p on RD.ItemNo=p.ItemNo
        ////left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
        ////
        ////WHERE RD.Post='Y'   
        //// AND RD.ReceiveDateTime>= '07/01/2019' and RD.ReceiveDateTime < @StartDate  
        ////AND rd.TransactionType IN('TollReceive')
        ////and pc.IsRaw in('finish')
        ////AND RD.ItemNo = @itemNo
        ////AND rd.BranchId=@BranchId
        //// ) 
        ////
        ////UNION ALL
        ////(SELECT @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
        ////-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
        ////FROM ReceiveDetails WHERE Post='Y'   AND ReceiveDateTime>= '07/01/2019' and ReceiveDateTime < @StartDate  
        ////
        //// and TransactionType IN('ReceiveReturn') AND ItemNo = @itemNo 
        ////AND BranchId=@BranchId
        ////
        ////) 
        ////UNION ALL 
        ////
        ////(SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
        ////--CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
        ////-isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
        ////FROM SalesInvoiceDetails   WHERE Post='Y'  
        //// AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
        ////AND TransactionType IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
        ////AND ItemNo = @itemNo
        ////AND BranchId=@BranchId
        ////)
        ////UNION ALL  
        ////(SELECT @itemNo ItemNo,isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleCreditQuantity,
        ////--CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
        ////isnull(sum(isnull(CurrencyValue,0)),0)   AS SubTotal
        ////FROM SalesInvoiceDetails   WHERE Post='Y'  
        //// AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime < @StartDate  
        //// AND TransactionType in( 'Credit') AND ItemNo = @itemNo 
        ////AND BranchId=@BranchId
        ////)
        ////UNION ALL 
        ////(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
        ////CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(DollarPrice,0)),0) ELSE isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0) END 
        ////from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber  
        //// where ItemNo=@itemNo   
        //// AND DisposeDetails.DisposeDate>= '07/01/2019' and DisposeDetails.DisposeDate < @StartDate  
        ////
        ////AND (DisposeDetails.Post ='Y')  AND sih.TransactionType IN('VAT27')     and sih.FromStock in ('Y')
        ////AND sih.BranchId=@BranchId
        ////
        ////)    
        ////
        ////) AS a GROUP BY a.ItemNo
        ////
        ////insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
        ////CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate)
        ////select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate  
        ////from #VATTemp_17
        ////order by dailydate,SerialNo;
        ////update #VAT_17 set StartDateTime=@StartDate where SerialNo='A' 
        ////
        ////update #VAT_17 set 
        ////CustomerID=SalesInvoiceHeaders.CustomerID
        ////from SalesInvoiceHeaders
        ////where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
        ////and #VAT_17.TransType='Sale'
        ////AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)
        ////AND BranchId=@BranchId 
        ////
        //// update #VAT_17 set #VAT_17.ProductDesc=Products.productName
        ////	 from Products where Products.itemNo=#VAT_17.ItemNo
        ////";

        ////                if (PDesc.ToLower() == "y")
        ////                {
        ////                    sqlText += @"  update #VAT_17 set #VAT_17.ProductDesc=SalesInvoiceDetails.ProductDescription
        ////	 from SalesInvoiceDetails where SalesInvoiceDetails.itemNo=#VAT_17.ItemNo and SalesInvoiceDetails.SalesInvoiceNo=#VAT_17.TransID
        ////";
        ////                }






        ////                sqlText += @" 
        ////select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
        ////#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
        ////#VAT_17.TransID,#VAT_17.TransType,
        ////isnull(c.CustomerName,'-')CustomerName,
        ////isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
        ////isnull(c.Address3,'-')Address3,
        ////isnull(c.VATRegistrationNo,'-')VATRegistrationNo
        ////
        ////,#VAT_17.ProductDesc ProductName 
        ////
        ////
        ////,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
        ////,#VAT_17.SD,#vat_17.UnitCost,#VAT_17.remarks
        ////,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime, isnull(#vat_17.UnitRate ,0)UnitRate 
        ////from #VAT_17  left outer JOIN 
        ////Customers as C on #VAT_17.CustomerID=c.CustomerID 
        ////left outer join Products P on #VAT_17.ItemNo=p.ItemNo
        ////
        ////
        ////order by #VAT_17.CreatedDateTime,#VAT_17.SerialNo
        ////
        ////DROP TABLE #VAT_17
        ////DROP TABLE #VATTemp_17
        ////
        ////                ";

        ////                #endregion SQL


        ////                top = "A";


        ////                if (BranchId == 0)
        ////                {
        ////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        ////                }

        ////                #region SQL Command

        ////                SqlCommand objCommVAT17 = new SqlCommand(sqlText, currConn, transaction);


        ////                #endregion

        ////                #region Parameter
        ////                objCommVAT17.Parameters.AddWithValue("@PDesc", PDesc);
        ////                objCommVAT17.Parameters.AddWithValue("@BranchId", BranchId);

        ////                if (!objCommVAT17.Parameters.Contains("@IsExport"))
        ////                {
        ////                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
        ////                }
        ////                else
        ////                {
        ////                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
        ////                }

        ////                if (!objCommVAT17.Parameters.Contains("@ItemNo"))
        ////                {
        ////                    objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
        ////                }
        ////                else
        ////                {
        ////                    objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
        ////                }

        ////                if (!objCommVAT17.Parameters.Contains("@StartDate"))
        ////                {
        ////                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
        ////                }
        ////                else
        ////                {
        ////                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
        ////                }
        ////                if (!objCommVAT17.Parameters.Contains("@EndDate"))
        ////                {
        ////                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
        ////                }
        ////                else
        ////                {
        ////                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
        ////                }

        ////                //if (!objCommVAT17.Parameters.Contains("@StartDate_0"))
        ////                //{
        ////                //    objCommVAT17.Parameters.AddWithValue("@StartDate_0", StartDate_0);
        ////                //}
        ////                //else
        ////                //{
        ////                //    objCommVAT17.Parameters["@StartDate_0"].Value = StartDate_0;
        ////                //}
        ////                //if (!objCommVAT17.Parameters.Contains("@EndDate_0"))
        ////                //{
        ////                //    objCommVAT17.Parameters.AddWithValue("@EndDate_0", EndDate_0);
        ////                //}
        ////                //else
        ////                //{
        ////                //    objCommVAT17.Parameters["@EndDate_0"].Value = EndDate_0;
        ////                //}

        ////                if (!objCommVAT17.Parameters.Contains("@post1"))
        ////                {
        ////                    objCommVAT17.Parameters.AddWithValue("@post1", post1);
        ////                }
        ////                else
        ////                {
        ////                    objCommVAT17.Parameters["@post1"].Value = post1;
        ////                }
        ////                if (!objCommVAT17.Parameters.Contains("@post2"))
        ////                {
        ////                    objCommVAT17.Parameters.AddWithValue("@post2", post2);
        ////                }
        ////                else
        ////                {
        ////                    objCommVAT17.Parameters["@post2"].Value = post2;
        ////                }

        ////                #endregion Parameter

        ////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
        ////                dataAdapter.Fill(dataSet);

        ////            }
        ////            #endregion

        ////            #region Catch & Finally

        ////            catch (SqlException sqlex)
        ////            {
        ////                throw sqlex;
        ////            }
        ////            catch (Exception ex)
        ////            {
        ////                throw ex;
        ////            }
        ////            finally
        ////            {

        ////                if (VcurrConn == null)
        ////                {
        ////                    if (currConn != null)
        ////                    {
        ////                        if (currConn.State == ConnectionState.Open)
        ////                        {
        ////                            currConn.Close();
        ////                        }
        ////                    }
        ////                }

        ////            }

        ////            #endregion

        ////            return dataSet;
        ////        }

        #endregion

        #endregion

        #region Purchase-Sale Register

        public DataSet VAT6_2_1(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT6_2_1");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction


                #region SQL Statement

                #region SQLText

                sqlText = @"";


                sqlText = @"



--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--DECLARE @ItemNo VARCHAR(200);

--SET @Itemno=559;
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='01/09/2013';
--SET @EndDate='06/09/2023';


declare @Present DECIMAL(25, 9);
CREATE TABLE #VAT_Ka(	[SerialNo] [int] IDENTITY(1,1) NOT NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL)

CREATE TABLE #VATTemp_Ka(	[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL) 

---- start purchase---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.subtotal+pd.SDAmount,pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')

 insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)+isnull(pd.SDAmount,0)),pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')

 
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,-1*(pd.subtotal+pd.SDAmount),-1*pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseReturn','PurchaseDN')
 
 
---- end purchase---

-------- Start Sale---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, SubTotal,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Sale'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
 
 

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo,- SubTotal,-( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )Quantity,-VATAmount,-SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')
 
------ end Sale---


SELECT @Present= COUNT(itemno) FROM #VATTemp_Ka
where  ItemNo=@ItemNo
--IF (@Present =0)
--BEGIN
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
 VALUES(@StartDate,@StartDate,0,'Opening',0,@ItemNo,0,0,0,0,'Opening')			    
--END

insert into #VAT_Ka(ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks)
select @ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks
from #VATTemp_Ka
where  #VATTemp_Ka.ItemNo=@ItemNo
order by dailydate

------- Starting Qty
SET ROWCOUNT 1

update #VAT_Ka set 
StartingQuantity=isnull(Products.OpeningBalance,0)

+isnull(Purchase.PurchaseQuantity,0)+isnull(PurchaseI.PurchaseQuantity,0)-isnull(PurchaseR.PurchaseQuantity,0)
-isnull(sale.SaleQuantity ,0) +isnull(saleC.SaleQuantity ,0)
,StartingAmount=(isnull(Products.CostPrice,0)*isnull(Products.OpeningBalance,0))

+isnull(Purchase.PurchaseAmount,0)+isnull(PurchaseI.PurchaseAmount,0)-isnull(PurchaseR.PurchaseAmount,0)

-isnull(sale.SaleAmount,0) +isnull(saleC.SaleAmount,0)

from Products 
----------Purchase Start --------
left outer join
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount 
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) Purchase on Products.ItemNo=Purchase.itemno 

left outer join
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)+isnull(SDAmount,0)))PurchaseAmount 
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) PurchaseI on Products.ItemNo=PurchaseI.itemno 

left outer JOIN
(select ItemNo,-1*SUM(UOMQty)PurchaseQuantity,
-1*SUM(isnull(SubTotal,0))PurchaseAmount
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('PurchaseReturn','PurchaseDN') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) PurchaseR on Products.ItemNo=PurchaseR.itemno 

----------Purchase End --------

----------Sale Start --------

left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
group by ItemNo
) Sale on Products.ItemNo=Sale.ItemNo  left outer JOIN

 

(select distinct ItemNo, SUM( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails  LEFT OUTER JOIN
SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
where SalesInvoiceDetails.InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo 
AND (UOMQty>0)

AND (SalesInvoiceDetails.Post =@post1 or SalesInvoiceDetails.Post= @post2)
AND sih.TransactionType IN('Credit')
group by ItemNo
) SaleC on Products.ItemNo=SaleC.ItemNo 
where Products.ItemNo=@ItemNo

----------Sale End --------

SET ROWCOUNT 0
------- Starting Qty end

update #VAT_Ka set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='Purchase'

update #VAT_Ka set 
VendorID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='sale'

select #VAT_Ka.VendorID, #VAT_Ka.SerialNo,convert (varchar,#VAT_Ka.StartDateTime,120)StartDateTime,
#VAT_Ka.StartingQuantity,#VAT_Ka.StartingAmount
,TransID,#VAT_Ka.TransType,
case when #VAT_Ka.TransType='purchase' then isnull(v.VendorName,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.CustomerName,'-') 
else '-' end as VendorName

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address1,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address1,'-') 
else '-' end as Address1

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address2,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address2,'-') 
else '-' end as Address2

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address3,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address3,'-') 
else '-' end as Address3

,case when #VAT_Ka.TransType='purchase' then isnull(v.VATRegistrationNo,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.VATRegistrationNo,'-') 
else '-' end as VATRegistrationNo

--,isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
--isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
--isnull(v.VATRegistrationNo,'-')VATRegistrationNo,

--isnull(c.CustomerName,'-')CustomerName,isnull(c.Address1,'-')CustAddress1,
--isnull(c.Address2,'-')CustAddress2,isnull(c.Address3,'-')CustAddress3,
--isnull(c.VATRegistrationNo,'-')CustVATRegistrationNo,

,p.ProductName,#VAT_Ka.Quantity,#VAT_Ka.VATRate,#VAT_Ka.SD,#VAT_Ka.UnitCost,p.HSCodeNo,#VAT_Ka.BENumber,#VAT_Ka.InvoiceDateTime,#VAT_Ka.Remarks
from #VAT_Ka left outer join
Vendors as V on #VAT_Ka.VendorID=v.VendorID and #VAT_Ka.TransType='purchase' left outer join 
Customers as C on #VAT_Ka.VendorID=c.CustomerID and #VAT_Ka.TransType='sale' left outer join 
Products P on #VAT_Ka.ItemNo=p.ItemNo
where  #VAT_Ka.ItemNo=@ItemNo
order by #VAT_Ka.SerialNo

DROP TABLE #VAT_Ka
DROP TABLE #VATTemp_Ka


";

                #endregion



                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn);

                #endregion

                #region Parameter

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2_1", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2_1", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Adjustment / Debit Note, Credit Note

        public DataSet VAT6_7(string SalesInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"

----declare @SalesInvoiceNo as varchar(100)

----set @SalesInvoiceNo='CRN-0003/0719'


select
Credit.InvoiceLineNo
,ISNULL(CreditH.DeductionAmount,0) DeductionAmount
,ISNULL(Credit.CDNVATAmount,0)	 CDNVATAmount
,ISNULL(Credit.CDNSDAmount,0)		 CDNSDAmount
,ISNULL(Credit.CDNSubtotal,0)		 CDNSubtotal
,convert (varchar,oldSale.InvoiceDateTime,120) NInvoiceDateTime
,isnull(Credit.PromotionalQuantity,0)PromotionalQuantity
,Credit.NBRPrice
,CreditH.SalesInvoiceNo
,convert (varchar,CreditH.DeliveryDate,120)InvoiceDateTime
,p.ProductName,p.ItemNo,Credit.SubTotal SubCost
,Credit.SD SDRate
,Credit.SDAmount
,Credit.VATAmount
,Credit.VATRate
,Credit.Quantity
,Credit.UOM
,isnull(oldSale.SubTotal,0) OldSubTotal,isnull(oldSale.SDAmount,0) oldSDAmount ,isnull(oldSale.VATAmount,0) oldVATAmount,
isnull(oldSale.VATRate,0) oldVATRate
,isnull(oldSale.Quantity,0) oldQuantity,oldSale.UOM oldUOM

,CreditH.PreviousSalesInvoiceNo
, isnull(CreditH.BranchId,1)BranchId
,isnull(CreditH.SignatoryName,'N/A')SignatoryName
,isnull(CreditH.SignatoryDesig,'N/A')SignatoryDesig
,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments

from SalesInvoiceDetails AS Credit left outer join
SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join
Customers C on CreditH.CustomerID=c.customerID left outer join
Products P on Credit.ItemNo=p.ItemNo left outer join
Vehicles V on CreditH.VehicleID=v.VehicleID left outer join

SalesInvoiceDetails oldSale on Credit.PreviousSalesInvoiceNo=oldSale.SalesInvoiceNo and oldSale.ItemNo=Credit.ItemNo
where 1=1
AND Credit.salesInvoiceNo IN(@SalesInvoiceNo)
------AND CreditH.TransactionType='Credit' 

";

                if (!SalesInvoiceNo.Contains("'"))
                {
                    SalesInvoiceNo = "'" + SalesInvoiceNo + "'";
                }

                sqlText = sqlText.Replace("@SalesInvoiceNo", SalesInvoiceNo);


                // AND CreditH.Post='Y'  // start
                SqlCommand objCommCreditNote = new SqlCommand(sqlText, currConn);

                //////if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                //////{
                //////    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                //////}
                //////else
                //////{
                //////    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                //////}

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_7", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_7", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_8(string SalesInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportDebitNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"
----declare @SalesInvoiceNo as varchar(30)
----set @SalesInvoiceNo='DEN-0002/0919'


select
Debit.InvoiceLineNo
,ISNULL(DebitH.DeductionAmount,0) DeductionAmount
,ISNULL(Debit.CDNVATAmount,0)	 CDNVATAmount
,ISNULL(Debit.CDNSDAmount,0)		 CDNSDAmount
,ISNULL(Debit.CDNSubtotal,0)		 CDNSubtotal
,convert (varchar,oldSale.InvoiceDateTime,120) NInvoiceDateTime
,Debit.NBRPrice
,DebitH.SalesInvoiceNo
,isnull(Debit.PromotionalQuantity,0)PromotionalQuantity
,convert (varchar,DebitH.DeliveryDate,120)InvoiceDateTime
,p.ProductName,p.ItemNo,Debit.SubTotal SubCost,Debit.SDAmount,Debit.VATAmount,Debit.VATRate
,Debit.Quantity,Debit.UOM
,oldSale.SubTotal OldSubTotal,oldSale.SDAmount oldSDAmount ,oldSale.VATAmount oldVATAmount,oldSale.VATRate oldVATRate
,oldSale.Quantity oldQuantity,oldSale.UOM oldUOM
, isnull(DebitH.BranchId,1)BranchId
,isnull(DebitH.SignatoryName,'N/A')SignatoryName
,isnull(DebitH.SignatoryDesig,'N/A')SignatoryDesig
,DebitH.PreviousSalesInvoiceNo
,DebitH.DeliveryAddress1,DebitH.DeliveryAddress2,DebitH.DeliveryAddress3,
c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,DebitH.comments

from SalesInvoiceDetails AS Debit left outer join
SalesInvoiceHeaders DebitH on Debit.salesInvoiceNo=DebitH.salesInvoiceNo left outer join
Customers C on DebitH.CustomerID=c.customerID left outer join
Products P on Debit.ItemNo=p.ItemNo left outer join
Vehicles V on DebitH.VehicleID=v.VehicleID left outer join

SalesInvoiceDetails oldSale on Debit.PreviousSalesInvoiceNo=oldSale.SalesInvoiceNo and oldSale.ItemNo=Debit.ItemNo
where 1=1
AND Debit.salesInvoiceNo IN(@SalesInvoiceNo)
------AND DebitH.TransactionType='Debit' 
                                    
";
                //AND debit.post='Y'

                if (!SalesInvoiceNo.Contains("'"))
                {
                    SalesInvoiceNo = "'" + SalesInvoiceNo + "'";
                }

                sqlText = sqlText.Replace("@SalesInvoiceNo", SalesInvoiceNo);

                SqlCommand objCommDebitNote = new SqlCommand();
                objCommDebitNote.Connection = currConn;
                objCommDebitNote.CommandText = sqlText;
                objCommDebitNote.CommandType = CommandType.Text;

                ////if (!objCommDebitNote.Parameters.Contains("@SalesInvoiceNo"))
                ////{
                ////    objCommDebitNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                ////}
                ////else
                ////{
                ////    objCommDebitNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                ////}

                if (!objCommDebitNote.Parameters.Contains("@post1"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommDebitNote.Parameters["@post1"].Value = post1;
                }

                if (!objCommDebitNote.Parameters.Contains("@post2"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommDebitNote.Parameters["@post2"].Value = post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDebitNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_8", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_8", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Transfer Challan


        public DataSet TransferIssueNew(string TransferIssueNo, string IssueDateFrom, string IssueDateTo, string itemNo,
                                string categoryID, string productType, string TransactionType, string Post, string DBName = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Issue Report");
            #endregion
            #region Try
            try
            {
                #region Settings

                DataTable settingsDt = new DataTable();

                if (settingVM.SettingsDTUser == null)
                {
                    settingsDt = new CommonDAL().SettingDataAll(null, null);
                }

                string VAT6_5OrderByName = new CommonDAL().settingsDesktop("Reports", "VAT6_5OrderByProductName", settingsDt);


                #endregion


                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region SQL Statement
                sqlText =
                    @"
SELECT   
IH.TransferIssueNo TransferIssueNo
,convert (varchar,IH.TransactionDateTime,120)TransferDateTime
,ID.ItemNo ItemNo
,isnull(P.ProductName,'N/A')ProductName
,isnull(P.ProductCode,'N/A')ProductCode
,isnull(ID.UOM,'N/A')UOM
,isnull(ID.UOMn,'N/A')UOMn
,isnull(ID.UOMc,1)UOMc
,isnull(ID.UOMQty,isnull(ID.Quantity,0))UOMQty
,isnull(ID.UOMPrice,isnull(ID.CostPrice,0))UOMPrice
,isnull(ID.CostPrice,0)CostPrice 
,isnull(ID.Quantity ,0)Quantity
,isnull(ID.SubTotal  ,0)SubTotal
,isnull(ID.VATAmount ,0)VATAmount
,isnull(ID.SDAmount ,0)SDAmount
,isnull(ID.Weight,'')Weight
,pc.CategoryName,pc.IsRaw ProductType                             
,isnull(IH.Comments ,'N/A')Comments
,isnull(IH.ReferenceNo ,'-')ReferenceNo
,isnull(IH.TransferTo      ,0)TransferTo
,isnull(br.BranchLegalName,'N/A') BranchToName
,isnull(br.Address,'N/A') BranchToAddress
,isnull(IH.BranchId,'0') FromBranchId
,isnull(br1.BranchLegalName,'N/A') BranchName
,isnull(br1.Address,'N/A') BranchAddress
,isnull(IH.VehicleNo,'N/A') VehicleNo
,isnull(IH.VehicleType,'N/A') VehicleType
,isnull(IH.SignatoryName,'N/A') SignatoryName
,isnull(IH.SignatoryDesig,'N/A') SignatoryDesig
 
FROM  dbo.TransferIssueDetails AS ID 
LEFT OUTER JOIN dbo.TransferIssues AS IH ON ID.TransferIssueNo = IH.TransferIssueNo 
LEFT OUTER JOIN dbo.Products AS P ON ID.ItemNo = P.ItemNo 
left outer join dbo.ProductCategories PC on p.CategoryID=pc.CategoryID
left outer join BranchProfiles br on IH.TransferTo = br.BranchId
left outer join BranchProfiles br1 on  IH.BranchId=br1.BranchId

WHERE
1=1 AND 
(IH.TransferIssueNo IN(@TransferIssueNo) )
AND (ID.Quantity>0)
";
                #region Conditions


                if (!TransferIssueNo.Contains("'"))
                {
                    TransferIssueNo = "'" + TransferIssueNo + "'";
                }


                sqlText = sqlText.Replace("@TransferIssueNo", TransferIssueNo);

                //if (TransferIssueNo != "")
                //{
                //    sqlText += " and IH.TransferIssueNo='" + TransferIssueNo + "' ";
                //}
                if (itemNo != "")
                {
                    sqlText += " and p.ItemNo='" + itemNo + "' ";
                }
                if (categoryID != "")
                {
                    sqlText += " and pc.categoryID='" + categoryID + "' ";
                }
                if (productType != "")
                {
                    sqlText += " and pc.IsRaw='" + productType + "' ";
                }
                if (TransactionType != "")
                {
                    sqlText += " and IH.TransactionType='" + TransactionType + "' ";
                }
                if (Post != "")
                {
                    sqlText += " and IH.Post='" + Post + "' ";
                }
                if (IssueDateFrom != "")
                {
                    sqlText += " and IH.TransactionDateTime >='" + IssueDateFrom + "' ";
                }
                if (IssueDateTo != "")
                {
                    sqlText += " and IH.TransactionDateTime <dateadd(d,1, '" + IssueDateTo + "') ";
                }

                if (VAT6_5OrderByName.ToLower() == "y")
                {
                    sqlText += @"  order by P.ProductName";
                }
                else
                {
                    sqlText += @"  order by P.ProductCode";

                }

                #endregion Where

                #endregion
                #region SQL Command
                SqlCommand objComm = new SqlCommand();
                objComm.Connection = currConn;
                objComm.CommandText = sqlText;
                objComm.CommandType = CommandType.Text;
                #endregion


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objComm);
                dataAdapter.Fill(dataSet);
            }
            #endregion
            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TransferIssueNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TransferIssueNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return dataSet;
        }


        public DataSet MegnaTransferIssueNew(string TransferIssueNo, string IssueDateFrom, string IssueDateTo, string itemNo,
                               string categoryID, string productType, string TransactionType, string Post, string DBName = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Issue Report");
            #endregion
            #region Try
            try
            {
                #region Settings

                DataTable settingsDt = new DataTable();

                if (settingVM.SettingsDTUser == null)
                {
                    settingsDt = new CommonDAL().SettingDataAll(null, null);
                }

                string VAT6_5OrderByName = new CommonDAL().settingsDesktop("Reports", "VAT6_5OrderByProductName", settingsDt);


                #endregion


                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region SQL Statement
                sqlText =
                    @"
SELECT   
IH.TransferIssueNo TransferIssueNo
,convert (varchar,IH.TransferDateTime,120)TransferDateTime
,ID.ItemNo ItemNo
,isnull(P.ProductName,'N/A')ProductName
,isnull(P.ProductCode,'N/A')ProductCode
,isnull(ID.UOM,'N/A')UOM
,isnull(ID.UOMn,'N/A')UOMn
,isnull(ID.UOMc,1)UOMc
,isnull(ID.UOMQty,isnull(ID.Quantity,0))UOMQty
,isnull(ID.UOMPrice,isnull(ID.CostPrice,0))UOMPrice
,isnull(ID.CostPrice,0)CostPrice 
,isnull(ID.Quantity ,0)Quantity
,isnull(ID.SubTotal  ,0)SubTotal
,isnull(ID.VATAmount ,0)VATAmount
,isnull(ID.SDAmount ,0)SDAmount                         
,isnull(IH.Comments ,'N/A')Comments
,isnull(IH.ReferenceNo ,'-')ReferenceNo
,isnull(IH.TransferTo      ,0)TransferTo
,isnull(br.BranchLegalName,'N/A') BranchToName
,isnull(br.Address,'N/A') BranchToAddress
,isnull(br.BranchCode,'N/A') BranchToCode
,isnull(IH.BranchId,'0') FromBranchId
,isnull(br1.BranchLegalName,'N/A') BranchName
,isnull(br1.Address,'N/A') BranchAddress
,isnull(br1.BranchCode,'N/A') BranchCode
,isnull(IH.VehicleNo,'N/A') VehicleNo
,isnull(IH.VehicleType,'N/A') VehicleType
,isnull(IH.SignatoryName,'N/A') SignatoryName
,isnull(IH.SignatoryDesig,'N/A') SignatoryDesig
,isnull(IH.RailwayReceiptNo,'N/A') RailwayReceiptNo
,IH.RailwayReceiptDate
,isnull(IH.RailwayInvoiceNo,'N/A') RailwayInvoiceNo
,isnull(IH.WeightChargeed,0)WeightChargeed     
,isnull(IH.FreightToPay,0)FreightToPay     
,isnull(IH.FreightPrepaid,0)FreightPrepaid
,isnull(ID.RequestedQuantity,0)RequestedQuantity
,isnull(ID.RequestedVolumn,0)RequestedVolumn
,isnull(ID.Temperature,0)Temperature
,isnull(ID.SP_Gravity,0)SP_Gravity
,isnull(ID.QtyAt30Temperature,0)QtyAt30Temperature
,Tnk.TankCode
,isnull(IH.BatchNo,'N/A') BatchNo
,isnull(IH.TestReportNo,'N/A') TestReportNo
,IH.BatchDate
,IH.TestReportDate
,IH.DepartureDate
,IR.ArrivalDate
,isnull(IH.TestReportTempPF,0)TestReportTempPF     
,isnull(IH.TestReportSPGR,0)TestReportSPGR     
,IRD.ReceiveDateTime 
,isnull(IRD.Temperature,0)ReceiveTemperature
,isnull(IRD.SP_Gravity,0)ReceiveSP_Gravity
,isnull(IRD.QtyAt30Temperature,0)ReceiveQtyAt30Temperature
,RTnk.TankCode ReceiveTankCode
,IR.DIP ReceiveDIP
,IH.TransferType
FROM  dbo.TransferMPLIssueDetails AS ID 

LEFT OUTER JOIN dbo.TransferMPLIssues AS IH ON ID.TransferMPLIssueId = IH.Id 
LEFT OUTER JOIN dbo.TransferMPLReceives AS IR ON IH.TransferReceiveNo = IR.TransferReceiveNo 
LEFT OUTER JOIN dbo.TransferMPLReceiveDetails AS IRD ON IRD.TransferMPLReceiveId = IR.Id and ID.ItemNo=IRD.ItemNo
LEFT OUTER JOIN dbo.TankMPLs AS RTnk ON RTnk.Id = IRD.TankId 
LEFT OUTER JOIN dbo.TankMPLs AS Tnk ON Tnk.Id = ID.TankId 
LEFT OUTER JOIN dbo.Products AS P ON ID.ItemNo = P.ItemNo 
left outer join dbo.ProductCategories PC on p.CategoryID=pc.CategoryID
left outer join BranchProfiles br on IH.TransferTo = br.BranchId
left outer join BranchProfiles br1 on  IH.BranchId=br1.BranchId

WHERE
1=1 AND 
(IH.TransferIssueNo IN(@TransferIssueNo) )
";
                #region Conditions


                if (!TransferIssueNo.Contains("'"))
                {
                    TransferIssueNo = "'" + TransferIssueNo + "'";
                }


                sqlText = sqlText.Replace("@TransferIssueNo", TransferIssueNo);

                //if (TransferIssueNo != "")
                //{
                //    sqlText += " and IH.TransferIssueNo='" + TransferIssueNo + "' ";
                //}
                if (itemNo != "")
                {
                    sqlText += " and p.ItemNo='" + itemNo + "' ";
                }
                if (categoryID != "")
                {
                    sqlText += " and pc.categoryID='" + categoryID + "' ";
                }
                if (productType != "")
                {
                    sqlText += " and pc.IsRaw='" + productType + "' ";
                }
                if (TransactionType != "")
                {
                    sqlText += " and IH.TransactionType='" + TransactionType + "' ";
                }
                if (Post != "")
                {
                    sqlText += " and IH.Post='" + Post + "' ";
                }
                if (IssueDateFrom != "")
                {
                    sqlText += " and IH.TransactionDateTime >='" + IssueDateFrom + "' ";
                }
                if (IssueDateTo != "")
                {
                    sqlText += " and IH.TransactionDateTime <dateadd(d,1, '" + IssueDateTo + "') ";
                }

                if (VAT6_5OrderByName.ToLower() == "y")
                {
                    sqlText += @"  order by P.ProductName";
                }
                else
                {
                    sqlText += @"  order by P.ProductCode";

                }

                #endregion Where

                #endregion
                #region SQL Command
                SqlCommand objComm = new SqlCommand();
                objComm.Connection = currConn;
                objComm.CommandText = sqlText;
                objComm.CommandType = CommandType.Text;
                #endregion


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objComm);
                dataAdapter.Fill(dataSet);
            }
            #endregion
            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaTransferIssueNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaTransferIssueNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return dataSet;
        }

        #endregion

        #region Miscellenous

        #region Bill of Materials (BOM)

        public DataSet ReportBOMAnnexure(ParameterVM paramVM, SysDBInfoVMTemp connVM)
        {
            #region Declarations

            SqlConnection currConn = null;

            DataSet ds = new DataSet();
            string sqlText = "";

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region FIND Finish BOMId and WIP Items

                sqlText = "";

                sqlText = @"
------declare @FinishItemNo as varchar(100)='115'
------declare @EffectDate as varchar(100)='2020-Nov-17'

declare @BOMId as int=0

select top 1 @BOMId = BOMId from BOMs
where 1=1 and FinishItemNo=@FinishItemNo
and EffectDate<=@EffectDate
and Post='Y'
order by EffectDate desc

----select @BOMId


select RawItemNo WIPItemNo from BOMRaws
where 1=1 and BOMId=@BOMId
and RawItemType='WIP'
";


                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.Parameters.AddWithValue("@FinishItemNo", paramVM.ItemNo);
                cmd.Parameters.AddWithValue("@EffectDate", paramVM.Date);

                SqlDataAdapter da = new SqlDataAdapter(cmd);

                DataTable dtWIPItem = new DataTable();
                da.Fill(dtWIPItem);

                #endregion

                if (dtWIPItem != null && dtWIPItem.Rows.Count > 0)
                {

                    #region FIND WIP BOMId

                    sqlText = "";

                    sqlText = @"
----declare @WIPItemNo as varchar(100)='490'

select top 1 BOMId from BOMRaws
where 1=1 and FinishItemNo=@WIPItemNo
and EffectDate<=@EffectDate
and post='Y'
order by EffectDate desc
";
                    string BOMIds = "";



                    foreach (DataRow dr in dtWIPItem.Rows)
                    {

                        cmd = new SqlCommand(sqlText, currConn);
                        cmd.Parameters.AddWithValue("@WIPItemNo", dr["WIPItemNo"].ToString());
                        cmd.Parameters.AddWithValue("@EffectDate", paramVM.Date);

                        da = new SqlDataAdapter(cmd);

                        DataTable dt = new DataTable();
                        da.Fill(dt);

                        if (dt != null && dt.Rows.Count > 0)
                        {
                            BOMIds = BOMIds + dt.Rows[0]["BOMId"].ToString() + ",";
                        }
                    }

                    BOMIds = BOMIds.Trim(',');
                    #endregion

                    if (!string.IsNullOrWhiteSpace(BOMIds))
                    {

                        #region Find Raw Materials

                        #region SQL Text

                        sqlText = "";

                        sqlText = @"
------declare @FinishItemNo as varchar(100)='115'
------declare @EffectDate as varchar(100)='2020-11-17'

select
proAnx.ProductName AnnexureProductName
, proAnx.ProductCode AnnexureProductCode
, bmr.FinishItemNo
, pro.ProductCode
, pro.ProductName
, bmr.FinishItemNo
, bmr.RawItemNo
, bmr.UOM
, bmr.UOMPrice
, bmr.WastageQuantity
, bmr.TotalQuantity
, bmr.Cost TotalPrice
, bmr.EffectDate
, bmr.BOMId

from BOMRaws bmr
left outer join Products pro on bmr.RawItemNo=pro.ItemNo
left outer join Products proAnx on bmr.FinishItemNo=proAnx.ItemNo
where 1=1 and bmr.BOMId in( " + BOMIds + " )";


                        #endregion

                        #region SQL Execution

                        cmd.CommandText = sqlText;

                        da = new SqlDataAdapter(cmd);
                        da.Fill(ds);


                        #endregion

                        #endregion
                    }

                }

                #endregion

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ReportBOMAnnexure", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #endregion

            #region finally

            finally
            {

                if (currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }
            #endregion

            return ds;
        }

        #endregion

        public DataSet DisposeRaw(string DisposeNo, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("DisposeRaw Report");
            #endregion
            #region Try
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region SQL Statement
                sqlText =
                    @"
SELECT   
isnull(P.ProductName,'N/A')ProductName
,isnull(P.HSCodeNo,'-')HSCodeNo
,DRD.DisposeNo
,DRD.PurchaseNo
,DRD.Quantity
,DRD.SubTotal
,DRD.VATAmount
,(DRD.Quantity * DRD.OfferUnitPrice) OfferUnitPrice
,DRD.Comments
,DRD.BranchId
FROM  dbo.DisposeRawDetails AS DRD 
LEFT OUTER JOIN dbo.DisposeRaws AS DR ON DRD.DisposeNo = DR.DisposeNo 
LEFT OUTER JOIN dbo.Products AS P ON DRD.ItemNo = P.ItemNo 
left outer join BranchProfiles br on DRD.BranchId = br.BranchId

WHERE
1=1 AND 
DRD.DisposeNo=@DisposeNo
and DRD.BranchId=@BranchId
";

                #endregion
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                #region SQL Command
                SqlCommand objComm = new SqlCommand();
                objComm.Connection = currConn;
                objComm.CommandText = sqlText;
                objComm.CommandType = CommandType.Text;
                #endregion
                objComm.Parameters.AddWithValue("@DisposeNo", DisposeNo);
                objComm.Parameters.AddWithValue("@BranchId", BranchId);


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objComm);
                dataAdapter.Fill(dataSet);
            }
            #endregion
            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "DisposeRaw", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "DisposeRaw", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion
            return dataSet;
        }

        public DataSet DisposeFinish(string DisposeNo, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("DisposeFinish");

            #endregion

            #region Try Statement
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction

                #region SQL Statement
                sqlText =
                    @"
SELECT   
isnull(P.ProductName,'N/A')ProductName
,isnull(P.HSCodeNo,'-')HSCodeNo
,df.DisposeNo
,df.Quantity
,( df.Quantity * UnitPrice) Price
,(df.Quantity * df.OfferUnitPrice) OfferPrice
,df.Comments
,df.BranchId
FROM  DisposeFinishs AS df 
LEFT OUTER JOIN dbo.Products AS P ON df.FinishItemNo = P.ItemNo 
left outer join BranchProfiles br on df.BranchId = br.BranchId

WHERE
1=1 
AND df.DisposeNo=@DisposeNo
AND df.BranchId=@BranchId
";

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command
                SqlCommand objComm = new SqlCommand(sqlText, currConn);

                objComm.Parameters.AddWithValue("@DisposeNo", DisposeNo);
                objComm.Parameters.AddWithValue("@BranchId", BranchId);


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objComm);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "DisposeFinish", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "DisposeFinish", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }
            #endregion

            return dataSet;
        }

        public DataSet VAT6_10Report(string TotalAmount, string StartDate
            , string EndDate, string post1, string post2, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT6_10Report");
            //DataTable dataTable = new DataTable("ReportVAT16");
            #endregion
            #region Try
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                    //////if (!string.IsNullOrEmpty(DBName) && currConn.Database != DBName)
                    //////{
                    //////    currConn.ChangeDatabase(DBName);
                    //////}
                }
                #endregion open connection and transaction
                string gototop = string.Empty;

                #region statement
                sqlText = @"
------declare @TotalAmount as decimal(18,5)
------DECLARE @StartDate DATETIME;
------DECLARE  @EndDate DATETIME;
------DECLARE @post1 VARCHAR(200);
------DECLARE @post2 VARCHAR(200);
------SET @StartDate='2013/10/01'
------SET @EndDate='2013/10/31'
------SET @post1='Y';
------SET @post2='Y';
------set @TotalAmount=200000

select BType
,InvoiceNo
,TransactionDate
,EffectDate
,TotalAmount
,TotalVATAmount
,ClientName
,VATRegistrationNo
,ClientAddress
,TransactionType
 from (
select 'Sale' BType
,sih.SalesInvoiceNo InvoiceNo
,sih.InvoiceDateTime TransactionDate
,sih.DeliveryDate EffectDate 
,sih.TotalAmount
,sih.TotalVATAmount
,c.CustomerName ClientName
,c.VATRegistrationNo
,c.Address1 clientAddress
,sih.TransactionType
 from SalesInvoiceHeaders sih 
left outer join Customers c on sih.CustomerID=c.CustomerID
where TransactionType in('Tender','ServiceNS','Service','InternalIssue','ExportServiceNS','ExportTender','ExportService','ExportTradingTender','ExportTrading','Export','TradingTender','Trading','ExportPackage','PackageSale','Other','RawSale')
and TotalAmount>=@TotalAmount
 and sih.InvoiceDateTime >=  @StartDate and sih.InvoiceDateTime < DATEADD(d,1,  @EndDate)
AND (sih.Post =@post1 or sih.Post= @post2)
AND sih.BranchId=@BranchId

union all
select  'Purchase' BType
,pih.BENumber InvoiceNo
,pih.InvoiceDateTime TransactionDate
,pih.InvoiceDateTime EffectDate 
,pih.TotalAmount
,pih.TotalVATAmount
,v.VendorName ClientName
,v.VATRegistrationNo
,v.Address1 clientAddress
,pih.TransactionType
 from PurchaseInvoiceHeaders pih
left outer join Vendors v on pih.VendorID=v.VendorID
where 1=1
and TransactionType in('ServiceNS','Service','InputService','PurchaseTollcharge','Trading','Other')
------and TransactionType in('Other')
------and TransactionType in('Import','ServiceImport','ServiceNSImport','ServiceNS','Service','InputServiceImport','InputService','PurchaseTollcharge','TradingImport','Trading','Other')
and TotalAmount>=@TotalAmount
AND (pih.Post =@post1 or pih.Post= @post2)
and pih.ReceiveDate >=  @StartDate and pih.ReceiveDate < DATEADD(d,1,  @EndDate)
AND pih.BranchId=@BranchId
) as a
order by BType,TransactionDate
";

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion statement
                gototop = "Go";
                #region SQL Command
                SqlCommand _objComm = new SqlCommand();
                _objComm.Connection = currConn;
                _objComm.CommandText = sqlText;
                _objComm.CommandType = CommandType.Text;
                #endregion
                #region Parameter
                _objComm.Parameters.AddWithValue("@BranchId", BranchId);

                if (!_objComm.Parameters.Contains("@TotalAmount"))
                {
                    _objComm.Parameters.AddWithValue("@TotalAmount", TotalAmount);
                }
                else
                {
                    _objComm.Parameters["@TotalAmount"].Value = TotalAmount;
                }
                if (!_objComm.Parameters.Contains("@StartDate"))
                {
                    _objComm.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    _objComm.Parameters["@StartDate"].Value = StartDate;
                }
                if (!_objComm.Parameters.Contains("@EndDate"))
                {
                    _objComm.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    _objComm.Parameters["@EndDate"].Value = EndDate;
                }
                if (!_objComm.Parameters.Contains("@post1"))
                {
                    _objComm.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    _objComm.Parameters["@post1"].Value = post1;
                }
                if (!_objComm.Parameters.Contains("@post2"))
                {
                    _objComm.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    _objComm.Parameters["@post2"].Value = post2;
                }
                #endregion Parameter
                SqlDataAdapter dataAdapter = new SqlDataAdapter(_objComm);
                dataAdapter.Fill(dataSet);
            }
            #endregion
            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_10Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_10Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dataSet;
        }

        public DataSet VDS12KhaNew(string VendorId, string DepositNumber, string DepositDateFrom, string DepositDateTo,
                                   string IssueDateFrom, string IssueDateTo, string BillDateFrom, string BillDateTo,
                                   string PurchaseNumber, bool chkPurchaseVDS, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDS12Kha");
            #endregion
            #region Try
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region SQL Statement
                if (chkPurchaseVDS == true)
                {
                    sqlText = @"
SELECT 	
VDSId
,vds.VendorId
,v.VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
,isnull(B.BankName,'NA')BankName
,isnull(b.BranchName,'NA')BranchName
,d.BankDepositDate
";
                }
                else
                {
                    sqlText += @"
SELECT 	
VDSId
,vds.VendorId
,v.CustomerName VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.CustomerGroupName VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
";
                }
                sqlText += @"
,VDS.VDSId
,isnull(BillAmount,0) PayAmount
,BillNo
,convert (varchar(200),VDS.BillDate,120)PayDate
,isnull(BillDeductAmount,0) DeductAmount

,isnull(VDS.VATAmount,0) VATAmount
,isnull(VDS.PurchaseNumber,'NA') PurchaseNumber


,isnull(DepositNumber,'NA') DepositNumber
,convert (date,VDS.DepositDate,101)DepositDate
,isnull(Remarks,'NA')Remarks
, VDS.IssueDate IssueDate
,isnull(d.TreasuryNo,0) TreasuryNo
,isnull(d.ChequeBank,0) ChequeBank
,isnull(d.ChequeBankBranch,0) ChequeBankBranch
,d.DepositPerson,d.DepositPersonDesignation,d.DepositPersonContactNo,d.DepositPersonAddress

                            FROM VDS	LEFT OUTER JOIN 
                            Deposits d ON vds.VDSId=d.DepositId LEFT OUTER JOIN 
";
                if (chkPurchaseVDS == true)
                {
                    sqlText += @"  
                            BankInformations B ON B.BankID=d.BankID LEFT OUTER JOIN 
                            Vendors v ON vds.VendorId=v.VendorID LEFT OUTER JOIN
                            VendorGroups vg ON v.VendorGroupID=vg.VendorGroupID
                            WHERE (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)	
                            --(vds.VendorId = @VendorId OR @VendorId IS NULL) 
                            --AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                           
                             ";
                }
                else
                {
                    sqlText += @"  Customers v ON vds.VendorId=v.CustomerID LEFT OUTER JOIN
                            CustomerGroups vg ON v.CustomerGroupID=vg.CustomerGroupID
                            WHERE (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL) 	
                            --(vds.VendorId  = @VendorId OR @VendorId IS NULL) 
                            --AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                          
                             ";
                }
                #endregion
                #region SQL Command
                SqlCommand objCommVDS = new SqlCommand();
                objCommVDS.Connection = currConn;
                objCommVDS.CommandText = sqlText;
                objCommVDS.CommandType = CommandType.Text;
                #endregion
                #region Parameter
                //if (!objCommVDS.Parameters.Contains("@VendorId"))
                //{
                //    objCommVDS.Parameters.AddWithValue("@VendorId", VendorId);
                //}
                //else
                //{
                //    objCommVDS.Parameters["@VendorId"].Value = VendorId;
                //}

                if (!objCommVDS.Parameters.Contains("@DepositNumber"))
                {
                    objCommVDS.Parameters.AddWithValue("@DepositNumber", DepositNumber);
                }
                else
                {
                    objCommVDS.Parameters["@DepositNumber"].Value = DepositNumber;
                }
                //if (!objCommVDS.Parameters.Contains("@PurchaseNumber"))
                // { objCommVDS.Parameters.AddWithValue("@PurchaseNumber", PurchaseNumber); }
                //else { objCommVDS.Parameters["@PurchaseNumber"].Value = PurchaseNumber; }
                //if (!objCommVDS.Parameters.Contains("@DepositDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@DepositDateFrom", DepositDateFrom); }
                //else { objCommVDS.Parameters["@DepositDateFrom"].Value = DepositDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@DepositDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@DepositDateTo", DepositDateTo); }
                //else { objCommVDS.Parameters["@DepositDateTo"].Value = DepositDateTo; }
                //if (!objCommVDS.Parameters.Contains("@IssueDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@IssueDateFrom", IssueDateFrom); }
                //else { objCommVDS.Parameters["@IssueDateFrom"].Value = IssueDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@IssueDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@IssueDateTo", IssueDateTo); }
                //else { objCommVDS.Parameters["@IssueDateTo"].Value = IssueDateTo; }
                //if (!objCommVDS.Parameters.Contains("@BillDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@BillDateFrom", BillDateFrom); }
                //else { objCommVDS.Parameters["@BillDateFrom"].Value = BillDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@BillDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@BillDateTo", BillDateTo); }
                //else { objCommVDS.Parameters["@BillDateTo"].Value = BillDateTo; }
                #endregion Parameter
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVDS);
                dataAdapter.Fill(dataSet);
            }
            #endregion
            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VDS12KhaNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VDS12KhaNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dataSet;
        }

        public DataSet VDS12KhaNew_Multiple(string DepositNumbers, bool chkPurchaseVDS, SysDBInfoVMTemp connVM = null)
        {
            #region Variables
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDS12Kha");

            //bool chkPurchaseVDS = false;

            #endregion
            #region Try
            try
            {
                #region open connection and transaction
                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                #endregion open connection and transaction
                #region SQL Statement
                if (chkPurchaseVDS == true)
                {
                    sqlText = @"
SELECT 	
VDSId
,vds.VendorId
,v.VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
";
                }
                else
                {
                    sqlText += @"
SELECT 	
VDSId
,vds.VendorId
,v.CustomerName VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.CustomerGroupName VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
";
                }
                sqlText += @"
,VDS.VDSId
,isnull(BillAmount,0) PayAmount
,BillNo
,convert (varchar(200),VDS.BillDate,120)PayDate
,isnull(BillDeductAmount,0) DeductAmount

,isnull(VDS.VATAmount,0) VATAmount
,isnull(VDS.PurchaseNumber,'NA') PurchaseNumber


,isnull(DepositNumber,'NA') DepositNumber
,convert (date,VDS.DepositDate,101)DepositDate
,isnull(Remarks,'NA')Remarks
, VDS.IssueDate IssueDate
,isnull(d.TreasuryNo,0) TreasuryNo
,d.DepositPerson,d.DepositPersonDesignation,d.DepositPersonContactNo,d.DepositPersonAddress

                            FROM VDS	LEFT OUTER JOIN 
                            Deposits d ON vds.VDSId=d.DepositId LEFT OUTER JOIN 
";
                if (chkPurchaseVDS == true)
                {
                    sqlText += @"  Vendors v ON vds.VendorId=v.VendorID LEFT OUTER JOIN
                            VendorGroups vg ON v.VendorGroupID=vg.VendorGroupID
                            WHERE (DepositNumber IN(@DepositNumber))	
                            --(vds.VendorId = @VendorId OR @VendorId IS NULL) 
                            --AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                           
                             ";
                }
                else
                {
                    sqlText += @"  Customers v ON vds.VendorId=v.CustomerID LEFT OUTER JOIN
                            CustomerGroups vg ON v.CustomerGroupID=vg.CustomerGroupID
                            WHERE (DepositNumber IN(@DepositNumber)) 	
                            --(vds.VendorId  = @VendorId OR @VendorId IS NULL) 
                            --AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                          
                             ";
                }

                if (!DepositNumbers.Contains("'"))
                {
                    DepositNumbers = "'" + DepositNumbers + "'";
                }


                sqlText = sqlText.Replace("@DepositNumber", DepositNumbers);


                #endregion
                #region SQL Command
                SqlCommand objCommVDS = new SqlCommand();
                objCommVDS.Connection = currConn;
                objCommVDS.CommandText = sqlText;
                objCommVDS.CommandType = CommandType.Text;
                #endregion
                #region Parameter


                //if (!objCommVDS.Parameters.Contains("@DepositNumber"))
                //{
                //    objCommVDS.Parameters.AddWithValue("@DepositNumber", DepositNumber);
                //}
                //else
                //{
                //    objCommVDS.Parameters["@DepositNumber"].Value = DepositNumber;
                //}

                #endregion Parameter
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVDS);
                dataAdapter.Fill(dataSet);
            }
            #endregion
            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VDS12KhaNew_Multiple", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VDS12KhaNew_Multiple", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion
            return dataSet;
        }

        #endregion

        #region Comments Jul-12-2020

        //////        #region 2012 Law - VAT 9.1


        //////        public DataSet VAT9_1(string PeriodName, int BranchId = 0, string Date = "", SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            string PreviousPeriodID = "";
        //////            DataSet dataSet = new DataSet("VAT19Report");

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                if (!string.IsNullOrWhiteSpace((Date)))
        //////                {
        //////                    PreviousPeriodID = Convert.ToDateTime(Date).AddMonths(-1).ToString("MMyyyy");
        //////                }
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement
        //////                #region MyRegion
        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////declare @ATVRebate as varchar(100);
        //////declare @AutoPartialRebateProcess as varchar(1);
        //////
        //////----declare @periodName VARCHAR (200);
        //////----declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////----SET @periodName='December-2018';
        //////----SET @ExportInBDT='Y'
        //////
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////----declare @BranchId as int
        //////----set @BranchId = 0
        //////----declare @SelectBranchId as int = 0
        //////
        //////declare @PeriodId as varchar(100);
        //////----declare @PreviousPeriodID as int = 072019;
        //////
        //////declare @LastLine62 as decimal(18, 5);
        //////declare @LastLine63 as decimal(18, 5);
        //////
        //////
        //////----------------------------------Initialization------------------------
        //////------------------------------------------------------------------------
        //////select  @PeriodId=PeriodId, @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////select @ATVRebate=settingValue  FROM Settings where SettingGroup='ImportPurchase' and SettingName='ATVRebate';
        //////select @AutoPartialRebateProcess=settingValue  FROM Settings where SettingGroup='Sale' and SettingName='AutoPartialRebateProcess';
        //////
        //////-----------------------------Initialization/Rebate Cancel----------------------------
        //////-------------------------------------------------------------------------------------
        //////DECLARE @Line9Subtotal AS DECIMAL = 0
        //////DECLARE @Line23VAT AS DECIMAL = 0
        //////
        //////SELECT @Line9Subtotal=ISNULL(SUM(LineA),0)
        //////FROM VATReturns
        //////WHERE  1=1 AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 9
        //////
        //////SELECT @Line23VAT=ISNULL(SUM(LineB),0)
        //////FROM VATReturns
        //////WHERE  1=1 AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 23
        //////
        //////";
        //////                #region Clear Data

        //////                sqlText = sqlText + @"
        //////
        //////--------------------------------------------------------------------
        //////----------------------------------Clear Data------------------------
        //////delete VATReturns where  PeriodID = @PeriodId and BranchId = @SelectBranchId  
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Insert Data

        //////                #endregion

        //////                #region Note: 1-26

        //////                sqlText = sqlText + @"
        //////
        //////----------------------------------Insert Data-----------------------
        //////--------------------------------------------------------------------
        //////
        //////insert into VATReturns (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////--insert into VATReturns (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,  @UserName,@Branch,'1' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'Export'Remarks 
        //////union all
        //////select  @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'1' NoteNo,'1' SubNoteNo,ROUND( sum(CurrencyValue),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'Export'Remarks from SalesInvoiceDetails where 1=1 and post='Y' and  Type in('Export') 
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select  @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'1' NoteNo,'2' SubNoteNo,ROUND( sum(CurrencyValue),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'Export'Remarks from BureauSalesInvoiceDetails where 1=1 and post='Y' and  Type in('Export') 
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'2' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'DeemExport'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'2' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks from SalesInvoiceDetails where  1=1 and post='Y' and Type in('DeemExport')
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'2' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('DeemExport')
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturns (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'3' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'NonVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'3' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'NonVAT'Remarks from SalesInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'3' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'NonVAT'Remarks from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturns  (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'4' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'StandardVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'4' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'StandardVAT'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('TollFinishIssue','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS'
        //////,'Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'4' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'StandardVAT'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        ////// 
        //////
        //////insert into VATReturns  (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'5' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'MRPRate'Remarks 
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'5' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'MRPRate'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate','MRPRate(SC)')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'5' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'MRPRate'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate','MRPRate(SC)')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'6' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ga'SubFormName ,'FixedVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'6' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ga'SubFormName 
        //////,'FixedVAT'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'6' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ga'SubFormName 
        //////,'FixedVAT'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'OtherRate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'OtherRate'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','Tender','Trading','ExportTrading','TradingTender','InternalIssue')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'OtherRate'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'3' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'OtherRate'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('ServiceNS','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'8' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Kha'SubFormName ,'Retail'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'8' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Kha'SubFormName 
        //////,'Retail'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('Retail')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'8' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Kha'SubFormName 
        //////,'Retail'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('Retail')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'9' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,ROUND( sum( LineB),2)LineB,ROUND( sum( LineC),2)LineC,'-'SubFormName ,'SumSub3'Remarks 
        //////from VATReturns where NoteNo in(1,2,3,4,5,6,7,8)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'10' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseNonVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'10' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'10' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( 1*sum(VATAmount),2),ROUND( 1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'11' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseNonVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'11' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseNonVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        ////// 
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'12' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseExempted'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'12' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseExempted'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Exempted')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'12' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseExempted'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Exempted')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'13' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseExempted'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'13' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseExempted'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Exempted')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'14' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseStandardVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'14' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseStandardVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService','TollReceive')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'14' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseStandardVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'15' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseStandardVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'15' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseStandardVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'16' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseOtherRate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'16' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseOtherRate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'16' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseOtherRate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'17' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseOtherRate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'17' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseOtherRate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'18' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ga'SubFormName ,'LocalPurchaseFixedVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'18' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ga'SubFormName,'LocalPurchaseFixedVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'18' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ga'SubFormName,'LocalPurchaseFixedVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'19' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseTurnover'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'19' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseTurnover'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Turnover')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'19' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseTurnover'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Turnover')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'20' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseUnRegisterVendor'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'20' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseUnRegisterVendor'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('UnRegister')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'20' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseUnRegisterVendor'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('UnRegister')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'21' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseNonRebate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'21' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonRebate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'21' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonRebate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'22' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseNonRebate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'22' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseNonRebate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,ROUND( sum( LineB),2)LineB,ROUND( sum( LineC),2)LineC,'-'SubFormName ,'SumSub4'Remarks
        ////// from (
        //////select @BranchId BranchId,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'SumSub4'Remarks 
        //////from VATReturns where NoteNo in(10,11,12,13)
        //////
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum(LineA),2)LineA,ROUND( sum(LineB),2) LineB,0 LineC,'-'SubFormName ,'SumSub4'Remarks 
        //////from VATReturns where NoteNo in(14,15,16,17,18)
        //////
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'SumSub4'Remarks 
        //////from VATReturns where NoteNo in(19,20,21,22)
        //////
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'24' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Gha'SubFormName ,'PurcshaseVDS'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'24' NoteNo,'1' SubNoteNo,ROUND( sum(BillDeductAmount),2),0 VATAmount,0 SDAmount,'SubForm-Gha'SubFormName,'PurcshaseVDS'Remarks  
        //////from VDS where  1=1 and post='Y'   
        //////and IsPurchase in('Y'  )
        //////and DepositDate >= @Datefrom and DepositDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'25' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'AdjustmentWithoutBankPay'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'25' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'AdjustmentWithoutBankPay'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('WithoutBankPay')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'26' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SaleDebitNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'26' NoteNo,'1' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleDebitNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'26' NoteNo,'2' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleDebitNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";

        //////                #endregion

        //////                #region Note: 27

        //////                sqlText = sqlText + @"
        //////--------insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////--------select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////--------union all
        //////--------select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'27' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////--------from AdjustmentHistorys where  1=1 and post='Y'   
        //////--------and AdjType in('IncreasingAdjustment')
        //////--------and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////--------AND BranchId=@BranchId
        //////
        //////
        //////-----------------------------#TempAdjustmentHistorys/IncreasingAdjustment----------------------------Create/INSERT
        //////-----------------------------------------------------------------------------------------------------
        //////SELECT  *
        //////INTO #TempAdjustmentHistorys 
        //////
        //////FROM 
        //////(
        //////SELECT '27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////, '' AdjType, '' AdjName
        //////UNION ALL
        //////SELECT '27' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////, ah.AdjType, an.AdjName
        //////FROM AdjustmentHistorys ah
        //////LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId
        //////WHERE  1=1 and post='Y'   
        //////AND ah.AdjType in('IncreasingAdjustment')
        //////AND ah.AdjDate >= @Datefrom and ah.AdjDate <dateadd(d,1,@Dateto)
        //////AND ah.BranchId=@BranchId
        //////GROUP BY ah.AdjType, an.AdjName
        //////UNION ALL
        //////
        //////SELECT  '27' NoteNo,'2' SubNoteNo
        //////,ddbd.ClaimVAT Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment' Remarks
        //////,ddbd.TransactionType AdjType 
        //////,ddbd.TransactionType AdjName  
        //////FROM DutyDrawBackDetails ddbd
        //////LEFT OUTER JOIN PurchaseInvoiceDetails pid ON pid.PurchaseInvoiceNo=ddbd.PurchaseInvoiceNo
        //////WHERE 1=1 AND ddbd.BranchId=@BranchId
        //////AND ddbd.Post='Y'
        //////AND ddbd.DDBackDate >= @Datefrom and ddbd.DDBackDate <dateadd(d,1,@Dateto)
        //////AND ISNULL(ddbd.TransactionType,'DDB') = 'VDB'
        //////AND pid.Type IN('VAT','FixedVAT')
        //////
        //////
        //////UNION ALL
        //////SELECT '27' NoteNo,'3' SubNoteNo
        //////, CASE
        //////WHEN @AutoPartialRebateProcess='N' THEN 0 
        //////WHEN @Line9Subtotal > 0 THEN ISNULL(ROUND((SUM(LineA)*@Line23VAT/@Line9Subtotal),2),0) 
        //////ELSE 0 END AS Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////,'IncreasingAdjustment' AdjType, 'Exempted Goods/Service (Rebate Cancel)' AdjName
        //////FROM VATReturns
        //////WHERE  1=1
        //////AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 3
        //////
        //////UNION ALL
        //////SELECT '27' NoteNo,'4' SubNoteNo
        //////, CASE 
        //////WHEN @AutoPartialRebateProcess='N' THEN 0 
        //////WHEN @Line9Subtotal > 0 THEN ISNULL(ROUND((SUM(LineA)*@Line23VAT/@Line9Subtotal),2),0) 
        //////ELSE 0 END AS Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////,'IncreasingAdjustment' AdjType, 'Other Rated VAT (Rebate Cancel)' AdjName
        //////FROM VATReturns
        //////WHERE  1=1
        //////AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 7 AND SubNoteNo IN(1,2)
        //////
        //////) AS adj
        //////
        //////INSERT INTO VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, '27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////UNION ALL
        //////
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, NoteNo, SubNoteNo, Subtotal, VATAmount, SDAmount, SubFormName, Remarks
        //////FROM #TempAdjustmentHistorys
        //////where SubTotal>0
        //////
        //////
        //////
        //////-----------------------------END/Rebate Cancel----------------------------
        //////--------------------------------------------------------------------------
        //////
        //////";
        //////                #endregion

        //////                #region Note: 28-30

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'28' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'SumSub5'Remarks 
        //////from VATReturns where NoteNo in(24,25,26,27)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'29' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Umo'SubFormName ,'SaleVDS'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'29' NoteNo,'1' SubNoteNo,ROUND(sum(BillDeductAmount),2),0 VATAmount,0 SDAmount,'SubForm-Umo'SubFormName,'SaleVDS'Remarks  
        //////from VDS where  1=1 and post='Y'   
        //////and IsPurchase in('N' )
        //////and DepositDate >= @Datefrom and DepositDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'30' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Cha'SubFormName ,'PurchaseAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'30' NoteNo,'1' SubNoteNo
        //////,case when @ATVRebate='Y' then ROUND(sum(ATVAmount),2) else 0 end ,sum(0),sum(0),'SubForm-Cha'SubFormName,'PurchaseAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y'  
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 31

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'31' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'DDB'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'31' NoteNo,'1' SubNoteNo,ROUND(sum(SubTotalDDB),2),0 VATAmount,0 SDAmount,'-'SubFormName,'DDB'Remarks 
        //////from DutyDrawBackDetails where  1=1 and post='Y'   
        //////and DDBackDate >= @Datefrom and DDBackDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////AND ISNULL(TransactionType,'DDB') = 'DDB'
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'31' NoteNo,'2' SubNoteNo, SubTotal ,0 VATAmount,0 SDAmount,'-'SubFormName,'DDB'Remarks 
        //////from #TempAdjustmentHistorys
        //////WHERE 1=1 AND SubNoteNo IN (2)
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'31' NoteNo,'2' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'DDB'Remarks  
        //////from AdjustmentHistorys where  1=1 and post='Y'   
        //////and AdjType in('DDB')
        //////and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 32

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'32' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SaleCreditNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'32' NoteNo,'1' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleCreditNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'32' NoteNo,'2' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleCreditNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 33

        //////                sqlText = sqlText + @"
        //////
        //////--------insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////--------select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'33' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'DecreasingAdjustment'Remarks 
        //////--------union all
        //////--------select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'33' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'DecreasingAdjustment'Remarks  
        //////--------from AdjustmentHistorys where  1=1 and post='Y'   
        //////--------and AdjType in('DecreasingAdjustment')
        //////--------and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////--------AND BranchId=@BranchId
        //////
        //////
        //////SELECT  *
        //////INTO #TempDecrementAdjustmentHistorys 
        //////
        //////FROM
        //////(
        //////SELECT '33' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'DecreasingAdjustment'Remarks
        //////, '' AdjType, '' AdjName 
        //////UNION ALL
        //////SELECT '33' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'DecreasingAdjustment'Remarks  
        //////, ah.AdjType, an.AdjName
        //////FROM AdjustmentHistorys ah
        //////LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId
        //////WHERE  1=1 and post='Y'   
        //////AND ah.AdjType in('DecreasingAdjustment')
        //////AND ah.AdjDate >= @Datefrom and ah.AdjDate <dateadd(d,1,@Dateto)
        //////AND ah.BranchId=@BranchId
        //////GROUP BY ah.AdjType, an.AdjName
        //////
        //////UNION ALL
        //////
        //////SELECT  '33' NoteNo,'2' SubNoteNo
        //////,ddbd.ClaimVAT Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'DecreasingAdjustment' Remarks
        //////,'DecreasingAdjustment' AdjType 
        //////,ddbd.TransactionType AdjName  
        //////FROM DutyDrawBackDetails ddbd
        //////LEFT OUTER JOIN PurchaseInvoiceDetails pid ON pid.PurchaseInvoiceNo=ddbd.PurchaseInvoiceNo
        //////WHERE 1=1 AND ddbd.BranchId=@BranchId
        //////AND ddbd.Post='Y'
        //////AND ddbd.DDBackDate >= @Datefrom and ddbd.DDBackDate <dateadd(d,1,@Dateto)
        //////AND ISNULL(ddbd.TransactionType,'DDB') = 'VDB'
        //////AND pid.Type='NonRebate'
        //////) decAdj
        //////
        //////INSERT INTO VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, NoteNo, SubNoteNo
        //////, Subtotal
        //////, VATAmount, SDAmount, SubFormName,  Remarks  
        //////FROM #TempDecrementAdjustmentHistorys
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 34-49 [Excluding: 35, 36, 36, 37, 38]

        //////                sqlText = sqlText + @"
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'34' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'SumSub6'Remarks 
        //////from VATReturns where NoteNo in(29,30,31,32,33)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'39' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SDSaleDebitNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'39' NoteNo,'1' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleDebitNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'39' NoteNo,'2' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleDebitNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'40' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SDSaleCreditNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'40' NoteNo,'1' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleCreditNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'40' NoteNo,'2' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleCreditNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'41' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SDExportSale'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'41' NoteNo,'1' SubNoteNo,ROUND(sum(ApprovedSD),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDExportSale'Remarks 
        //////from DutyDrawBackHeader where  1=1 and post='Y'   
        ////// and ISNULL(DutyDrawBackHeader.TransactionType,'DDB') = 'SDB'
        //////
        //////and DDBackDate >= @Datefrom and DDBackDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'42' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'InterestOnOveredVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'42' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'InterestOnOveredVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredVAT')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'43' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'InterestOnOveredSD'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'43' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'InterestOnOveredSD'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredSD')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'44' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'FineOrPenalty'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'44' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'FineOrPenalty'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('FineOrPenalty')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'45' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'ExciseDuty'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'45' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'ExciseDuty'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ExciseDuty')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'46' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'DevelopmentSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'46' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'DevelopmentSurcharge'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('DevelopmentSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'47' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'ICTDevelopmentSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'47' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'ICTDevelopmentSurcharge'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ICTDevelopmentSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'48' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'HelthCareSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'48' NoteNo,'1' SubNoteNo,ROUND(sum(HPSAmount),2),0,0,'-'SubFormName,'HelthCareSurcharge'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate(SC)')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'49' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'EnvironmentProtectionSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'49' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'EnvironmentProtectionSurcharge'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('EnvironmentProtectionSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 50

        //////                sqlText = sqlText + @"
        //////
        //////---------------------------------Line50-----------------------------------------------
        //////--------------------------------------------------------------------------------------
        //////
        //////
        //////--select @PreviousPeriodID=format( DATEADD(M, -1,@DateFrom),'MMyyyy')
        //////select @LastLine62=ISNULL(sum(LineA),0) FROM VATReturns WHERE NoteNo='62' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;;
        //////select @LastLine63=ISNULL(sum(LineA),0) FROM VATReturns WHERE NoteNo='63' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;;
        //////
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'50' NoteNo,'1' SubNoteNo, sum(SubTotal)SubTotal,sum( VATAmount) VATAmount,sum( SDAmount)SDAmount ,'-'SubFormName ,'LastClosingVAT'Remarks
        //////from(
        //////
        //////select ISNULL(@LastLine62,0) SubTotal,0 VATAmount,0 SDAmount
        //////
        //////UNION ALL
        //////
        //////select ISNULL(DepositAmount,0) SubTotal,0 VATAmount,0 SDAmount
        //////
        //////from Deposits
        //////where 1=1
        //////AND Post='Y'  
        //////AND DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND DepositType = 'Opening'
        //////AND BranchId=@BranchId
        //////) as a
        //////
        //////";
        //////                #endregion

        //////                #region Note: 51, 35-38

        //////                sqlText = sqlText + @"
        ////// 
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'51' NoteNo,'0' SubNoteNo,isnull( @LastLine63,0) SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'LastClosingSD'Remarks 
        //////
        //////----------------------------------------
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'35' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'Line35'Remarks
        ////// from (
        //////select @BranchId BranchId,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'35' NoteNo,'0' SubNoteNo,ROUND(sum( LineC),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line35'Remarks 
        //////from VATReturns where NoteNo in(9)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'35' NoteNo,'0' SubNoteNo,ROUND(-1*sum(LineB),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line35'Remarks 
        //////from VATReturns where NoteNo in(23)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'35' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line35'Remarks 
        //////from VATReturns where NoteNo in(28)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'35' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line35'Remarks 
        //////from VATReturns where NoteNo in(34)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////
        //////";

        //////                sqlText = sqlText + @"
        //////
        ////// insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'36' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line36' Remarks
        ////// from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'36' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line36'Remarks 
        //////from VATReturns where NoteNo in(35)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'36' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line36'Remarks 
        //////from VATReturns where NoteNo in(50)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////
        //////";

        //////                sqlText = sqlText + @" 
        //////  insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'37' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line37' Remarks
        ////// from (
        //////select  @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'37' NoteNo,'0' SubNoteNo,ROUND(sum( LineB),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line37'Remarks 
        //////from VATReturns where NoteNo in(9)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'37' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line37'Remarks 
        //////from VATReturns where NoteNo in(39)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'37' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line37'Remarks 
        //////from VATReturns where NoteNo in(40)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'37' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line37'Remarks 
        //////from VATReturns where NoteNo in(41)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////";

        //////                sqlText = sqlText + @"
        //////
        ////// 
        ////// insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'38' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line38' Remarks
        ////// from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'38' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line38'Remarks 
        //////from VATReturns where NoteNo in(37)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'38' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line38'Remarks 
        //////from VATReturns where NoteNo in(51)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        ////// ";
        //////                #endregion

        //////                #region Note: 52-61

        //////                sqlText = sqlText + @" 
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'52' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'TotalDepositVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'52' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('Treasury')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'52' NoteNo,'2' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('VDS') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";

        //////                sqlText = sqlText + @"
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'53' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'TotalDepositSD'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'53' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositSD'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('SD')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'54' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'InterestOnOveredVATDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'54' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'InterestOnOveredVATDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredVAT') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'55' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'InterestOnOveredSDDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'55' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'InterestOnOveredSDDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredSD') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'56' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'FineOrPenaltyDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'56' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'FineOrPenaltyDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('FineOrPenalty') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'57' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'ExciseDutyDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'57' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'ExciseDutyDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ExciseDuty') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'58' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'DevelopmentSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'58' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'DevelopmentSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('DevelopmentSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'59' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'ICTDevelopmentSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'59' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'ICTDevelopmentSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ICTDevelopmentSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'60' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'HelthCareSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'60' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'HelthCareSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('HelthCareSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'61' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'EnvironmentProtectionSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'61' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'EnvironmentProtectionSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('EnvironmentProtectionSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 62

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'62' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line62' Remarks
        ////// from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'62' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line62'Remarks 
        //////from VATReturns where NoteNo in(52)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'62' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line38'Remarks 
        //////from VATReturns where NoteNo in(36)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////  
        //////insert into VATReturns(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'63' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line63' Remarks
        ////// from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'63' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line63'Remarks 
        //////from VATReturns where NoteNo in(53)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'63' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line63'Remarks 
        //////from VATReturns where NoteNo in(38)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////";
        //////                #endregion

        //////                #region 9.1 Report

        //////                sqlText = sqlText + @"
        //////
        //////select distinct Remarks NoteDescription,  NoteNo,ROUND( Sum(LineA),2)LineA,ROUND(Sum(LineB),2)LineB,ROUND(Sum(LineC),2)LineC,SubFormName
        //////from VATReturns
        ////// where  BranchId=@SelectBranchId 
        //////and PeriodID=@PeriodID
        //////group by NoteNo,SubFormName,Remarks
        //////order by NoteNo
        //////
        //////";
        //////                #endregion

        //////                #region DataTable 2

        //////                sqlText = sqlText + @"
        //////---------------------------------#TempAdjustmentHistorys/IncreasingAdjustment----------------------------SELECT
        //////---------------------------------------------------------------------------------------------------------
        //////
        //////SELECT DISTINCT  AdjType,ah.AdjName,ROUND(SUM(ah.SubTotal),2)AdjAmount FROM #TempAdjustmentHistorys ah
        //////WHERE AdjType='IncreasingAdjustment' and ah.SubTotal>0
        //////GROUP BY AdjType,ah.AdjName
        //////
        //////
        //////DROP TABLE #TempAdjustmentHistorys;
        //////
        //////---------------------------------END/TempAdjustmentHistorys-------------------------
        //////------------------------------------------------------------------------------------
        //////
        //////
        //////
        //////--------select distinct  AdjType,an.AdjName,ROUND(sum(ah.AdjAmount),2)AdjAmount from AdjustmentHistorys ah
        //////--------left outer join AdjustmentName an on ah.AdjId=an.AdjId
        //////--------where AdjType='IncreasingAdjustment'
        //////--------AND ah.BranchId=@BranchId
        //////--------and Post='Y'
        //////--------and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////--------group by AdjType,an.AdjName
        //////";
        //////                #endregion

        //////                #region DataTable 3
        //////                sqlText = sqlText + @"
        //////--------select distinct  AdjType,an.AdjName,ROUND(sum(ah.AdjAmount),2)AdjAmount from AdjustmentHistorys ah
        //////--------left outer join AdjustmentName an on ah.AdjId=an.AdjId
        //////--------where AdjType='DecreasingAdjustment'
        //////--------AND ah.BranchId=@BranchId
        //////--------and Post='Y'
        //////--------and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////--------group by AdjType,an.AdjName
        //////
        //////
        //////---------------------------------#TempDecrementAdjustmentHistorys/IncreasingAdjustment----------------------------SELECT
        //////------------------------------------------------------------------------------------------------------------------
        //////
        //////SELECT DISTINCT  AdjType,ah.AdjName,ROUND(SUM(ah.SubTotal),2)AdjAmount FROM #TempDecrementAdjustmentHistorys ah
        //////WHERE AdjType='DecreasingAdjustment' and ah.SubTotal>0
        //////GROUP BY AdjType,ah.AdjName
        //////
        //////
        //////DROP TABLE #TempDecrementAdjustmentHistorys;
        //////
        //////---------------------------------END/#TempDecrementAdjustmentHistorys-------------------------
        //////----------------------------------------------------------------------------------------------
        //////
        //////";
        //////                #endregion




        //////                #endregion
        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                    //sqlText = sqlText.Replace("=@SelectBranchId", ">@SelectBranchId");
        //////                }

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT19.Parameters.AddWithValue("@SelectBranchId", BranchId);
        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);
        //////                objCommVAT19.Parameters.AddWithValue("@PreviousPeriodID", PreviousPeriodID);



        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }




        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dataSet);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw new Exception(sqlText);
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw new Exception(sqlText);
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dataSet;
        //////        }




        //////        #region Not Used / Deprecated

        //////        public string[] VAT9_1_Process(string PeriodName, int BranchId = 0, string ExportInBDT = "Y", SysDBInfoVMTemp connVM = null)
        //////        {

        //////            #region Variables

        //////            string[] retResults = new string[4];
        //////            retResults[0] = "Fail";
        //////            retResults[1] = "Fail";
        //////            retResults[2] = "";
        //////            retResults[3] = "";

        //////            string sqlText = "";
        //////            int transResult = 0;

        //////            SqlConnection currConn = null;
        //////            SqlTransaction transaction = null;

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }
        //////                if (transaction == null)
        //////                {
        //////                    transaction = currConn.BeginTransaction("");
        //////                }
        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";

        //////                #region Initialization

        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////------declare @periodName VARCHAR (200);
        //////------declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////declare @PeriodId as varchar(100);
        //////------declare @BranchId as int
        //////
        //////
        //////------SET @periodName='July-2019';
        //////------SET @ExportInBDT='Y'
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////------set @BranchId = 1
        //////
        //////
        //////
        //////select @PeriodId=PeriodId, @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////--------------------------------------------------------------------
        //////----------------------------------Clear Data------------------------
        //////DELETE  VATReturnSubFormA WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////DELETE  VATReturnSubFormB WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////DELETE  VATReturnSubFormC WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////DELETE  VATReturnSubFormD WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////DELETE  VATReturnSubFormE WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////DELETE  VATReturnSubFormF WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////DELETE  VATReturnSubFormG WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////DELETE  VATReturnSubFormX WHERE 1=1 AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion


        //////                #region LineNo 1 - Form A
        //////                sqlText = sqlText + @" 
        //////
        //////INSERT INTO VATReturnSubFormA
        //////
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////, sal.BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,sal.Remarks
        //////
        //////
        ////// FROM (
        //////SELECT 
        //////@UserName UserName,sid.BranchId Branch,
        //////'1' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Export'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.TransactionType
        //////
        //////from SalesInvoiceDetails sid
        //////
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('Export') 
        //////and sid.TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////--AND sid.BranchId=@BranchId
        //////
        //////union all
        //////SELECT 
        //////@UserName,@Branch,
        //////'1' NoteNo,'2' SubNoteNo,SubTotal,SDAmount,VATAmount,'SubForm-Ka'SubFormName
        //////,'Export'Remarks 
        //////,ItemNo
        //////,SalesInvoiceNo
        //////,TransactionType
        //////from BureauSalesInvoiceDetails where 1=1 and post='Y' and  Type in('Export') 
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////
        //////";
        //////                #endregion

        //////                #region LineNo 2 - Form A

        //////                sqlText = sqlText + @" 
        //////
        //////INSERT INTO VATReturnSubFormA
        //////
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,sal.Remarks 
        //////
        //////
        //////from (
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'2' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.TransactionType
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('DeemExport')
        //////and sid.TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and sid.InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'2' NoteNo,'2' SubNoteNo, SubTotal,SDAmount,VATAmount,'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks
        //////,ItemNo
        //////,SalesInvoiceNo 
        //////,TransactionType
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('DeemExport')
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) AS sal
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////
        //////";
        //////                #endregion

        //////                #region LineNo 3 - Form A
        //////                sqlText = sqlText + @" 
        //////
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,sal.Remarks 
        //////
        //////
        //////
        //////
        ////// from (
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'3' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Non VAT'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.TransactionType
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('NonVAT')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'3' NoteNo,'2' SubNoteNo, SubTotal, SDAmount,VATAmount,'SubForm-Ka'SubFormName
        //////,'NonVAT'Remarks 
        //////,ItemNo
        //////,SalesInvoiceNo
        //////,TransactionType
        //////
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////";
        //////                #endregion

        //////                #region LineNo 4 - Form A
        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,sal.Remarks 
        //////
        //////
        ////// from (
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'4' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'VAT' Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.TransactionType
        //////
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and post='Y' 
        //////and Type in('VAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS'
        //////,'Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service','TollFinishIssue')
        //////and sid.InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'4' NoteNo,'2' SubNoteNo,SubTotal, SDAmount, VATAmount,'SubForm-Ka'SubFormName 
        //////,'StandardVAT'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo InvoiceNo
        //////,TransactionType
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////";
        //////                #endregion

        //////                #region LineNo 5 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,sal.Remarks 
        //////
        //////
        //////from (
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'5' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'MRP Rate'Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.TransactionType
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('MRPRate','MRPRate(SC)')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'5' NoteNo,'2' SubNoteNo, SubTotal, SDAmount, VATAmount,'SubForm-Ka'SubFormName 
        //////,'MRPRate'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////,TransactionType
        //////
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate','MRPRate(SC)')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////";
        //////                #endregion

        //////                #region LineNo 6 - Form C
        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormC
        //////
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,sal.UOM
        //////,sal.Quantity
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,sal.Remarks
        //////
        //////
        //////
        //////
        //////FROM
        //////(
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'6' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Tarrif'Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.UOM
        //////,sid.TransactionType
        //////,sid.Quantity
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('Tarrif')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'6' NoteNo,'2' SubNoteNo, SubTotal, SDAmount, VATAmount,'SubForm-Ga'SubFormName 
        //////,'Tarrif'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////,UOM
        //////,TransactionType
        //////,Quantity
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('Tarrif')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////";
        //////                #endregion

        //////                #region LineNo 7 - Form A
        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,sal.Remarks 
        //////
        //////
        //////
        //////from (
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'7' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Tarrif'Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.TransactionType
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('Tarrif')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'7' NoteNo,'2' SubNoteNo, SubTotal, SDAmount, VATAmount,'SubForm-Ka'SubFormName 
        //////,'OtherRate'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////,TransactionType
        //////
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////";
        //////                #endregion

        //////                #region LineNo 8 - Form B
        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormB
        //////
        //////
        //////select @PeriodId PeriodId
        //////,sal.NoteNo
        //////,sal.SubNoteNo
        //////,sal.SubFormName
        //////,sal.TransactionType
        //////,sal.InvoiceNo
        //////,sal.UserName
        //////,sal.Branch
        //////,@BranchId BranchId
        //////,sal.TotalPrice
        //////,sal.SDAmount
        //////,sal.VATAmount
        //////,'' ProductCategorey
        //////,sal.ItemNo
        //////,p.ProductCode
        //////,p.ProductName
        //////,p.ProductDescription
        //////,sal.Remarks
        //////
        //////
        //////FROM
        //////(
        //////
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'8' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Retail'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo InvoiceNo
        //////,sid.TransactionType
        //////
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('Retail')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////
        //////select 
        //////@UserName,@Branch,
        //////'8' NoteNo,'2' SubNoteNo, SubTotal, SDAmount, VATAmount,'SubForm-Kha'SubFormName 
        //////,'Retail'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////,TransactionType
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('Retail')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.InvoiceNo DESC
        //////
        //////";
        //////                #endregion

        //////                #region LineNo 9 - Form X
        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////select @PeriodId PeriodId
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'9' NoteNo,'1' SubNoteNo, ISNULL(sum( sfx.SubTotal),0) SubTotal, ISNULL(sum( sfx.VATAmount),0) VATAmount, ISNULL(sum( sfx.SDAmount),0) SDAmount   ,'-'SubFormName ,'SumSub3'Remarks 
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////select ROUND( sum( TotalPrice),2)SubTotal,ROUND( sum( VATAmount),2)VATAmount,ROUND( sum( SDAmount),2)SDAmount
        //////from VATReturnSubFormA WHERE 1=1 and NoteNo in(1,2,3,4,5,7) AND PeriodId = @PeriodId
        //////UNION ALL
        //////select ROUND( sum( TotalPrice),2)SubTotal,ROUND( sum( VATAmount),2)VATAmount,ROUND( sum( SDAmount),2)SDAmount
        //////from VATReturnSubFormC WHERE 1=1 and NoteNo in(6) AND PeriodId = @PeriodId
        //////UNION ALL
        //////select ROUND( sum( TotalPrice),2)SubTotal,ROUND( sum( VATAmount),2)VATAmount,ROUND( sum( SDAmount),2)SDAmount
        //////from VATReturnSubFormB WHERE 1=1 and NoteNo in(8) AND PeriodId = @PeriodId
        //////) as sfx
        //////) as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-10 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'10' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks  
        //////,pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('NonVAT')
        //////and pid.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'10' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks  
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////, pid.TransactionType
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('NonVAT')
        //////and pid.TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-11 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////
        ////// select @UserName UserName,@Branch Branch,'11' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'ImportPurchase'Remarks  
        //////, ItemNo
        //////, TransactionType
        //////, PurchaseInvoiceNo InvoiceNo
        //////from PurchaseInvoiceDetails pid 
        //////
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and pid.Type in('NonVAT')
        //////and pid.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-12 - Form A

        //////                sqlText = sqlText + @" 
        //////
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'12' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks, 
        //////pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('Exempted')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'12' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks
        //////,pid.PurchaseInvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y'
        //////and pid.Type in('Exempted')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-13 - Form A

        //////                sqlText = sqlText + @"
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select  @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        ////// 
        //////select @UserName UserName,@Branch Branch,'13' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'ImportPurchase'Remarks  
        //////, PurchaseInvoiceNo InvoiceNo
        //////, ItemNo
        //////, TransactionType
        //////from PurchaseInvoiceDetails pid 
        //////
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('Exempted')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-14 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select  @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'14' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,TransactionType Remarks, 
        //////pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('VAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService','TollReceive')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'14' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y'
        //////and Type in('VAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-15 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select  @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        ////// 
        //////
        //////select @UserName UserName,@Branch Branch,'15' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'ImportPurchase'Remarks
        //////, PurchaseInvoiceNo InvoiceNo  
        //////, ItemNo
        //////, TransactionType
        //////from PurchaseInvoiceDetails pid 
        //////
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('VAT')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-16 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select  @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'16' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks  
        //////,pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('OtherRate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'16' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName,'LocalPurchase'Remarks  
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('OtherRate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-17 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////
        //////select @UserName UserName,@Branch Branch,'17' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'ImportPurchase'Remarks  
        //////, ItemNo
        //////, TransactionType
        //////, PurchaseInvoiceNo InvoiceNo
        //////from PurchaseInvoiceDetails pid 
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('OtherRate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-18 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'18' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks  
        //////,pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and pid.post='Y' 
        //////and pid.Type in('FixedVAT')
        //////and pid.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'18' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks  
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////, pid.TransactionType
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and pid.post='Y' 
        //////and pid.Type in('FixedVAT')
        //////and pid.TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-19 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////
        //////select @UserName UserName,@Branch Branch,'19' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks 
        //////,pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('Turnover')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'19' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks 
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('Turnover')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-20 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////
        //////select @UserName UserName,@Branch Branch,'20' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks  
        //////,pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('UnRegister')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////union all
        //////select @UserName,@Branch,'20' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks 
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('UnRegister')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-21 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////
        //////select @UserName UserName,@Branch Branch,'21' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks  
        //////,pid.PurchaseInvoiceNo InvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('NonRebate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'21' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'LocalPurchase'Remarks 
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////,pid.TransactionType
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('NonRebate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-22 - Form A

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormA
        //////
        //////select @PeriodId PeriodId
        //////,pur.NoteNo
        //////,pur.SubNoteNo
        //////,pur.SubFormName
        //////,pur.TransactionType
        //////,pur.InvoiceNo
        //////,pur.UserName
        //////,pur.Branch
        //////,@BranchId BranchId
        //////,p.ProductDescription
        //////,p.ProductCode
        //////,p.ProductName
        //////,pur.TotalPrice
        //////,pur.SDAmount
        //////,pur.VATAmount
        //////,pur.Remarks 
        //////
        //////FROM
        //////(
        //////
        //////select @UserName UserName,@Branch Branch,'22' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'ImportPurchase'Remarks  
        //////, ItemNo
        //////, TransactionType
        //////, PurchaseInvoiceNo InvoiceNo
        //////from PurchaseInvoiceDetails pid 
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('NonRebate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.InvoiceNo
        //////";
        //////                #endregion

        //////                #region LineNo-23 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        ////// FROM (
        //////select @UserName UserName,@Branch Branch,'23' NoteNo,'0' SubNoteNo, a.SubTotal,a.VATAmount,a.SDAmount,'-'SubFormName ,'SumSub4'Remarks
        ////// from (
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////select ISNULL(ROUND(sum(TotalPrice),2),0) SubTotal,  ISNULL(ROUND( sum(VATAmount),2),0) VATAmount, ISNULL(ROUND( sum(SDAmount),2),0) SDAmount
        //////from VATReturnSubFormA where NoteNo in(10,11,12,13, 14,15,16,17,18, 19,20,21,22)
        ////// ) as a
        ////// )as f
        //////";
        //////                #endregion

        //////                #region LineNo-24 - Form D

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormD
        //////
        //////select  @PeriodId PeriodId
        //////
        //////
        //////,v.NoteNo
        //////,v.SubNoteNo
        //////,v.SubFormName
        //////,'' TransactionType
        //////,v.InvoiceNo
        //////,v.UserName
        //////,v.Branch
        //////,@BranchId BranchId
        //////,v.VendorBIN
        //////,v.VendorName
        //////,v.VendorAddress
        //////,v.TotalPrice
        //////,v.VDSAmount
        //////,v.InvoiceDate
        //////,v.AccountCode
        //////,v.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select  @UserName UserName,@Branch Branch,'24' NoteNo,'1' SubNoteNo, BillDeductAmount ,0 VATAmount,0 SDAmount,'SubForm-Gha'SubFormName
        //////,'PurcshaseVDS'Remarks  
        //////,v.VendorName
        //////,v.VATRegistrationNo VendorBIN
        //////,v.Address1 VendorAddress
        //////,vds.BillAmount TotalPrice
        //////,ISNULL(vds.VATAmount,0) VDSAmount
        //////,vds.PurchaseNumber InvoiceNo
        //////,vds.BillDate InvoiceDate
        //////,(select SettingValue from Settings WHERE 1=1 AND SettingGroup = 'OperationalCode' AND SettingName='TotalDepositVAT') AccountCode
        //////
        //////
        //////from VDS
        //////LEFT OUTER JOIN Vendors v ON vds.VendorId = v.VendorID 
        //////where  1=1 and post='Y'   
        //////and IsPurchase in('Y')
        //////and DepositDate >= @Datefrom and DepositDate <dateadd(d,1,@Dateto)
        //////AND VDS.BranchId=@BranchId
        //////) as v
        //////";
        //////                #endregion


        //////                #region LineNo-25 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        ////// FROM (
        //////SELECT @UserName UserName,@Branch Branch,'25' NoteNo,'1' SubNoteNo,SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'AdjustmentWithoutBankPay'Remarks 
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('WithoutBankPay')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////) as a
        ////// )as f
        //////";
        //////                #endregion

        //////                #region LineNo-26 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////
        //////SELECT  @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////FROM (
        //////SELECT @UserName UserName,@Branch Branch,'26' NoteNo,'1' SubNoteNo,SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'SaleDebitNote'Remarks 
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////select ROUND(sum(SubTotal),2),0 VATAmount,0 SDAmount
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////union all
        //////select ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-27 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        ////// FROM (
        //////SELECT @UserName UserName,@Branch Branch,'27' NoteNo,'1' SubNoteNo,SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'IncreasingAdjustment'Remarks 
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////select ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount 
        //////from AdjustmentHistorys where  1=1 and post='Y'   
        //////and AdjType in('IncreasingAdjustment')
        //////and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-28 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        ////// FROM (
        //////SELECT @UserName UserName,@Branch Branch,'28' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'SumSub5'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        ////// SELECT ROUND(sum( TotalPrice),2)SubTotal,0 VATAmount, 0 SDAmount
        //////from VATReturnSubFormD where 1=1 AND NoteNo in(24)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////UNION ALL
        ////// SELECT ROUND(sum( SubTotal),2)SubTotal,ROUND(sum( VATAmount),2)VATAmount,ROUND(sum( SDAmount),2)SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(25,26,27)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////
        //////) as a
        ////// )as f
        //////";
        //////                #endregion

        //////                #region LineNo-29 - --- Not Clear - SubFormAsks for Customer; But Query Provides Vendor ////Form E

        //////                sqlText = sqlText + @" 
        //////
        //////INSERT INTO VATReturnSubFormD
        //////
        //////select @PeriodId PeriodId
        //////
        //////
        //////,v.NoteNo
        //////,v.SubNoteNo
        //////,v.SubFormName
        //////,'' TransactionType
        //////,v.InvoiceNo
        //////,v.UserName
        //////,v.Branch
        //////,@BranchId BranchId
        //////,v.VendorBIN
        //////,v.VendorName
        //////,v.VendorAddress
        //////,v.TotalPrice
        //////,v.VDSAmount
        //////,v.InvoiceDate
        //////,v.AccountCode
        //////,v.Remarks
        //////
        //////
        //////
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'29' NoteNo,'1' SubNoteNo, BillDeductAmount,0 VATAmount,0 SDAmount,'SubForm-Umo'SubFormName
        //////,'SaleVDS'Remarks  
        //////,v.VendorName
        //////,v.VATRegistrationNo VendorBIN 
        //////,v.Address1 VendorAddress
        //////,vds.BillAmount TotalPrice
        //////,ISNULL(vds.VATAmount,0) VDSAmount
        //////,vds.PurchaseNumber 
        //////,vds.BillDate InvoiceDate
        //////,vds.DepositNumber InvoiceNo
        //////,(select SettingValue from Settings WHERE 1=1 AND SettingGroup = 'OperationalCode' AND SettingName='TotalDepositVAT') AccountCode
        //////
        //////
        //////from VDS 
        //////LEFT OUTER JOIN Vendors v ON vds.VendorId = v.VendorID 
        //////where  1=1 and post='Y'   
        //////and IsPurchase in('N' )
        //////and DepositDate >= @Datefrom and DepositDate <dateadd(d,1,@Dateto)
        //////AND VDS.BranchId=@BranchId
        //////) as v
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-30 - Form F - Verify that the Query is Okay

        //////                sqlText = sqlText + @" 
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-31 - Form X - ---- Incomplete/// Ist DDB or DecreasingAdjustment or Both; Need Clear

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'31' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName,'DDB'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ROUND(sum(ClaimVAT),2),0 VATAmount, 0 SDAmount
        //////from DutyDrawBackDetails where  1=1 and post='Y'   
        //////and DDBackDate >= @Datefrom and DDBackDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-32 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'32' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'SaleCreditNote'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////Select ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////union all
        //////select ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-33 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'33' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'DecreasingAdjustment'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount 
        //////from AdjustmentHistorys where  1=1 and post='Y'   
        //////and AdjType in('DecreasingAdjustment')
        //////and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-34 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'34' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'SumSub6'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ROUND(sum( TotalPrice),2)SubTotal, 0 VATAmount, 0 SDAMount
        //////from VATReturnSubFormE 
        //////where  1=1
        //////AND NoteNo in(29)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////
        //////union all
        //////select ROUND(sum( TotalPrice),2)SubTotal, 0 VATAmount, 0 SDAMount
        //////from VATReturnSubFormE 
        //////where  1=1
        //////AND NoteNo in(30)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////
        //////union all
        //////select ROUND(sum( SubTotal),2)SubTotal, 0 VATAmount, 0 SDAMount
        //////from VATReturnSubFormX 
        //////where  1=1
        //////AND NoteNo in(31,32,33)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////
        //////
        //////) as a
        ////// )as f
        //////
        //////
        //////
        //////";
        //////                #endregion


        //////                //////35 is Later On After 51

        //////                #region LineNo-39 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'39' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'SDSaleDebitNote'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ROUND(sum(SDAmount),2) SubTotal,0 VATAmount,0 SDAmount
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////
        //////select ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////";
        //////                #endregion

        //////                #region LineNo-40 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'40' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'SDSaleCreditNote'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////
        //////select ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-41 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'41' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'SDExportSale'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ROUND(sum(ClaimSD),2),0 VATAmount,0 SDAmount
        //////from DutyDrawBackDetails where  1=1 and post='Y'   
        //////and DDBackDate >= @Datefrom and DDBackDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-42 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'42' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'InterestOnOveredVAT'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount 
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredVAT')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-43 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'43' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'InterestOnOveredSD'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredSD')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////) as a
        ////// )as f
        //////
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-44 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'44' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'FineOrPenalty'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount 
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('FineOrPenalty')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////) as a
        ////// )as f
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-45 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'45' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'ExciseDuty'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ExciseDuty')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-46 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'46' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'DevelopmentSurcharge'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('DevelopmentSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-47 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'47' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'ICTDevelopmentSurcharge'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ICTDevelopmentSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-48 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'48' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'HelthCareSurcharge'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount 
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('HelthCareSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-49 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'49' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'EnvironmentProtectionSurcharge'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////
        ////// select ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('EnvironmentProtectionSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-50 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'50' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'LastClosingVAT'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////
        //////------and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////------AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-51 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'51' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'LastClosingSD'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////
        //////------and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////------AND BranchId=@BranchId
        //////
        //////) as a
        ////// )as f
        //////
        //////
        //////
        //////";
        //////                #endregion

        //////                /////////Restart from 35

        //////                #region LineNo-35 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'35' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'Line35'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ISNULL(ROUND(sum( SDAmount),2),0) SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormA where 1=1 AND NoteNo in(9)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////union all
        //////select ISNULL(ROUND(-1*sum(VATAmount),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(23)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////union all
        //////select ISNULL(ROUND(sum( SubTotal),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(28)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////union all
        //////select ISNULL(ROUND(-1*sum( SubTotal),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(34)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////) as a
        ////// )as f
        //////
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-36 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'36' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'Line36'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ISNULL(ROUND(sum( SubTotal),2),0) SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(35)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////
        //////union all
        //////select ISNULL(ROUND(-1*sum( SubTotal),2),0) SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(50)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////) as a
        ////// )as f
        //////
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-37 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'37' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'Line37'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////
        //////select ISNULL(ROUND(sum( VATAmount),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormA where 1=1 AND NoteNo in(9)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////union all
        //////select ISNULL(ROUND(sum(SubTotal),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(39)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////
        //////union all
        //////select ISNULL(ROUND(-1*sum( SubTotal),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(40)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////
        //////union all
        //////select ISNULL(ROUND(-1*sum( SubTotal),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(41)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-38 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'38' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'Line38'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////
        //////select ISNULL(ROUND(sum( SubTotal),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(37)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId
        //////union all
        //////select ISNULL(ROUND(-1*sum( SubTotal),2),0)SubTotal,0 VATAmount,0 SDAmount 
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(51)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId  
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-52 - Form G

        //////                sqlText = sqlText + @" 
        //////
        //////
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'52' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'TotalDepositVAT'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId InvoiceNo
        //////, d.TransactionType
        //////from Deposits d where  1=1 and post='Y'   
        //////and d.TransactionType in('Treasury')
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'52' NoteNo,'2' SubNoteNo, DepositAmount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositVAT'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId InvoiceNo
        //////, d.TransactionType
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('VDS')
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) AS dep
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-53 - Form G

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'53' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'TotalDepositSD'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('SD')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////";

        //////                #endregion

        //////                #region LineNo-54 - Form G

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'54' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'InterestOnOveredVATDeposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredVAT')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////";

        //////                #endregion

        //////                #region LineNo-55 - Form G

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'55' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'InterestOnOveredSDDeposit'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredSD')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-56 - Form G

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'56' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'FineOrPenaltyDeposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('FineOrPenalty')
        //////AND d.BranchId=@BranchId
        //////
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////";
        //////                sqlText = sqlText + @" ";

        //////                #endregion

        //////                #region LineNo-57 - Form G

        //////                sqlText = sqlText + @" 
        //////
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'57' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'ExciseDutyDeposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('ExciseDuty')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////
        //////";
        //////                sqlText = sqlText + @" ";

        //////                #endregion

        //////                #region LineNo-58 - Form G

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'58' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'DevelopmentSurchargeDeposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('DevelopmentSurcharge')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////
        //////
        //////";
        //////                sqlText = sqlText + @" ";

        //////                #endregion

        //////                #region LineNo-59 - Form G

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'59' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'ICTDevelopmentSurchargeDeposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('ICTDevelopmentSurcharge')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////
        //////";

        //////                #endregion

        //////                #region LineNo-60 - Form G

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormG
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'60' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'HealthCareSurchargeDeposit'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('HelthCareSurcharge')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////";
        //////                sqlText = sqlText + @" ";

        //////                #endregion

        //////                #region LineNo-61 - Form G

        //////                sqlText = sqlText + @" 
        //////
        //////
        //////select  @PeriodId PeriodId
        //////
        //////,dep.NoteNo
        //////,dep.SubNoteNo
        //////,dep.SubFormName
        //////,dep.TransactionType
        //////,dep.InvoiceNo
        //////,dep.UserName
        //////,dep.Branch
        //////,@BranchId BranchId
        //////,dep.ChallanNumber
        //////,dep.BankName
        //////,dep.BankBranch
        //////,dep.Date
        //////,dep.AccountCode
        //////,dep.Amount
        //////,dep.Remarks
        //////
        //////
        //////FROM
        //////(
        //////select @UserName UserName,@Branch Branch,'61' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,''SubFormName
        //////,'EnvironmentProtectionSurchargeDeposit'Remarks   
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////,d.TransactionType
        //////,d.DepositId InvoiceNo
        //////
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('EnvironmentProtectionSurcharge')
        //////AND d.BranchId=@BranchId
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////) AS dep
        //////
        //////";

        //////                #endregion

        //////                #region LineNo-62 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'62' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'Line62'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ISNULL(ROUND(sum( Amount),2),0) SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormG where 1=1 AND NoteNo in(52)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId  
        //////
        //////union all
        //////select ISNULL(ROUND(-1*sum( SubTotal),2),0) SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(36)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId   
        //////) as a
        ////// )as f
        //////
        //////";
        //////                #endregion

        //////                #region LineNo-63 - Form X

        //////                sqlText = sqlText + @" 
        //////INSERT INTO VATReturnSubFormX
        //////
        //////
        //////SELECT @PeriodId PeriodId
        //////
        //////
        //////,f.NoteNo
        //////,f.SubNoteNo
        //////,'' TransactionType
        //////,f.UserName
        //////,f.Branch
        //////,@BranchId BranchId
        //////,f.SubTotal
        //////,f.SDAmount
        //////,f.VATAmount
        //////,f.Remarks
        //////
        //////
        //////FROM (
        //////
        //////SELECT @UserName UserName,@Branch Branch,'63' NoteNo,'1' SubNoteNo, SUM(a.SubTotal)SubTotal,SUM(a.VATAmount)VATAmount,SUM(a.SDAmount)SDAmount,'-'SubFormName ,'Line63'Remarks 
        //////
        //////FROM
        //////(
        //////select 0 SubTotal,0 VATAmount,0 SDAmount
        //////union all
        //////
        //////select ISNULL(ROUND(sum( Amount),2),0)SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormG where 1=1 AND NoteNo in(53)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId   
        //////
        //////union all
        //////select ISNULL(ROUND(-1*sum( SubTotal),2),0) SubTotal,0 VATAmount,0 SDAmount
        //////from VATReturnSubFormX where 1=1 AND NoteNo in(38)
        //////AND BranchId=@BranchId AND PeriodId=@PeriodId   
        ////// 
        //////) as a
        ////// )as f
        //////";
        //////                #endregion


        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }


        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn, transaction);

        //////                #endregion

        //////                #region Parameter

        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);


        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                transResult = objCommVAT19.ExecuteNonQuery();

        //////                #region Commit
        //////                if (transaction != null)
        //////                {
        //////                    transaction.Commit();
        //////                }

        //////                #endregion
        //////                retResults[0] = "Success";
        //////                retResults[1] = "VAT 9.1 Processed Successfully";

        //////            }
        //////            #endregion Try

        //////            #region Catch
        //////            catch (Exception ex)
        //////            {

        //////                retResults[0] = "Fail";//Success or Fail
        //////                retResults[1] = ex.Message.Split(new[] { '\r', '\n' }).FirstOrDefault(); //catch ex

        //////                transaction.Rollback();

        //////                FileLogger.Log(MethodBase.GetCurrentMethod().Name, this.GetType().Name, ex.Message + Environment.NewLine + ex.StackTrace + Environment.NewLine + sqlText);

        //////            }
        //////            #endregion

        //////            #region finally
        //////            finally
        //////            {
        //////                if (currConn != null)
        //////                {
        //////                    if (currConn.State == ConnectionState.Open)
        //////                    {
        //////                        currConn.Close();
        //////                    }
        //////                }

        //////            }
        //////            #endregion
        //////            return retResults;
        //////        }

        //////        public DataSet VAT9_1_Report(string PeriodName, int BranchId = 0, string ExportInBDT = "Y", SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataSet dataSet = new DataSet("VAT19Report");

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////
        //////
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////------declare @periodName VARCHAR (200);
        //////------declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////declare @PeriodId as varchar(100);
        //////------declare @BranchId as int
        //////
        //////
        //////------SET @periodName='July-2019';
        //////------SET @ExportInBDT='Y'
        //////------set @UserName ='admin'
        //////------set @Branch ='HO_DB'
        //////------set @BranchId = 1
        //////
        //////
        //////select @PeriodId=PeriodId, @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////SELECT * FROM (
        //////select Remarks NoteDescription,  NoteNo, ROUND(SUM(TotalPrice),2) LineA,  ROUND(SUM(VATAmount),2)LineB, ROUND(SUM(SDAmount),2)LineC,SubFormName
        //////from VATReturnSubFormA
        ////// WHERE  1=1 
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,SubFormName,Remarks
        ////// UNION ALL
        ////// select Remarks NoteDescription,  NoteNo, ROUND(SUM(TotalPrice),2) LineA,  ROUND(SUM(VATAmount),2)LineB, ROUND(SUM(SDAmount),2)LineC,SubFormName
        //////from VATReturnSubFormB
        ////// WHERE  1=1
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,SubFormName,Remarks
        //////
        //////  UNION ALL
        ////// select Remarks NoteDescription,  NoteNo, ROUND(SUM(TotalPrice),2) LineA,  ROUND(SUM(VATAmount),2)LineB, ROUND(SUM(SDAmount),2)LineC,SubFormName
        //////from VATReturnSubFormC
        ////// WHERE  1=1
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,SubFormName,Remarks
        //////
        //////   UNION ALL
        ////// select Remarks NoteDescription,  NoteNo, ROUND(SUM(TotalPrice),2) LineA, 0 VATAmount, 0 SDAmount,SubFormName
        //////from VATReturnSubFormD
        ////// WHERE  1=1
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,SubFormName,Remarks
        //////
        //////    UNION ALL
        ////// select Remarks NoteDescription,  NoteNo, ROUND(SUM(TotalPrice),2) LineA, 0 VATAmount, 0 SDAmount,SubFormName
        //////from VATReturnSubFormE
        ////// WHERE  1=1
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,SubFormName,Remarks
        //////
        //////    UNION ALL
        ////// select Remarks NoteDescription,  NoteNo,  ROUND(SUM(ATAmount),2) LineA, 0 VATAmount, 0 SDAmount,SubFormName
        //////from VATReturnSubFormF
        ////// WHERE  1=1
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,SubFormName,Remarks
        //////
        ////// 
        //////    UNION ALL
        ////// select Remarks NoteDescription,  NoteNo, ROUND(SUM(Amount),2) LineA, 0 VATAmount, 0 SDAmount,SubFormName
        //////from VATReturnSubFormG
        ////// WHERE  1=1
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,SubFormName,Remarks
        //////
        //////     UNION ALL
        ////// select Remarks NoteDescription,  NoteNo, ROUND(SUM(SubTotal),2) LineA, 0 VATAmount, 0 SDAmount,''SubFormName
        //////from VATReturnSubFormX
        ////// WHERE  1=1
        ////// AND UserName=@UserName AND PeriodId=@PeriodId AND BranchId=@BranchId
        //////group by NoteNo,Remarks
        ////// ) a
        //////
        //////order by NoteNo
        //////
        //////
        //////
        //////
        //////
        //////
        //////select distinct  AdjType,an.AdjName,ROUND(sum(ah.AdjAmount),2)AdjAmount from AdjustmentHistorys ah
        //////left outer join AdjustmentName an on ah.AdjId=an.AdjId
        //////where AdjType='IncreasingAdjustment'
        //////AND ah.BranchId=@BranchId
        //////and Post='Y'
        //////and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////group by AdjType,an.AdjName
        //////
        //////select distinct  AdjType,an.AdjName,ROUND(sum(ah.AdjAmount),2)AdjAmount from AdjustmentHistorys ah
        //////left outer join AdjustmentName an on ah.AdjId=an.AdjId
        //////where AdjType='DecreasingAdjustment'
        //////AND ah.BranchId=@BranchId
        //////and Post='Y'
        //////and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////group by AdjType,an.AdjName
        //////
        //////
        //////
        //////";
        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);


        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dataSet);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dataSet;
        //////        }

        //////        #endregion


        //////        #endregion

        //////        #region 2012 Law - VAT 9.1 - Version 2

        //////        public DataSet VAT9_1_V2Save(string PeriodName, int BranchId = 0, string Date = "", SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            string PreviousPeriodID = "";
        //////            DataSet dataSet = new DataSet("VAT9_1_V2");

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                if (!string.IsNullOrWhiteSpace((Date)))
        //////                {
        //////                    PreviousPeriodID = Convert.ToDateTime(Date).AddMonths(-1).ToString("MMyyyy");
        //////                }
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                #region SQLText

        //////                sqlText = @" ";

        //////                #region Beginning

        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////declare @ATVRebate as varchar(100);
        //////declare @AutoPartialRebateProcess as varchar(1);
        //////
        //////----declare @periodName VARCHAR (200);
        //////----declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////----SET @periodName='December-2018';
        //////----SET @ExportInBDT='Y'
        //////
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////----declare @BranchId as int
        //////----set @BranchId = 0
        //////----declare @SelectBranchId as int = 0
        //////
        //////declare @PeriodId as varchar(100);
        //////----declare @PreviousPeriodID as int = 072019;
        //////
        //////declare @LastLine65 as decimal(18, 5) = 0;
        //////declare @LastLine66 as decimal(18, 5) = 0;
        //////
        //////declare @LastLine54 as decimal(18, 5) = 0;
        //////declare @LastLine55 as decimal(18, 5) = 0;
        //////declare @LastLine56 as decimal(18, 5) = 0;
        //////declare @LastLine57 as decimal(18, 5) = 0;
        //////
        //////
        //////declare @Line54 as decimal(18, 5) = 0;
        //////declare @Line55 as decimal(18, 5) = 0;
        //////
        //////
        //////
        //////----------------------------------Initialization------------------------
        //////------------------------------------------------------------------------
        //////select  @PeriodId=PeriodId, @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////select @ATVRebate=settingValue  FROM Settings where SettingGroup='ImportPurchase' and SettingName='ATVRebate';
        //////select @AutoPartialRebateProcess=settingValue  FROM Settings where SettingGroup='Sale' and SettingName='AutoPartialRebateProcess';
        //////
        //////-----------------------------Initialization/Rebate Cancel----------------------------
        //////-------------------------------------------------------------------------------------
        //////DECLARE @Line9Subtotal AS DECIMAL = 0
        //////DECLARE @Line23VAT AS DECIMAL = 0
        //////
        //////SELECT @Line9Subtotal=ISNULL(SUM(LineA),0)
        //////FROM VATReturnV2s
        //////WHERE  1=1 AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 9
        //////
        //////SELECT @Line23VAT=ISNULL(SUM(LineB),0)
        //////FROM VATReturnV2s
        //////WHERE  1=1 AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 23
        //////
        //////";
        //////                #endregion

        //////                #region Clear Data

        //////                sqlText = sqlText + @"
        //////
        //////--------------------------------------------------------------------
        //////----------------------------------Clear Data------------------------
        //////delete VATReturnV2s where  PeriodID = @PeriodId and BranchId = @SelectBranchId  
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Insert Data

        //////                #endregion

        //////                #region Note: 1-26

        //////                sqlText = sqlText + @"
        //////
        //////----------------------------------Insert Data-----------------------
        //////--------------------------------------------------------------------
        //////
        //////insert into VATReturnV2s (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////--insert into VATReturnV2s (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,  @UserName,@Branch,'1' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'Export'Remarks 
        //////union all
        //////select  @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'1' NoteNo,'1' SubNoteNo,ROUND( sum(CurrencyValue),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'Export'Remarks from SalesInvoiceDetails where 1=1 and post='Y' and  Type in('Export') 
        //////and TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select  @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'1' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'Export'Remarks from BureauSalesInvoiceDetails where 1=1 and post='Y' and  Type in('Export') 
        //////and TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'2' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'DeemExport'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'2' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks from SalesInvoiceDetails where  1=1 and post='Y' and Type in('DeemExport')
        //////and TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'2' NoteNo,'2' SubNoteNo,ROUND( sum(CurrencyValue),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('DeemExport')
        //////and TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturnV2s (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'3' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'NonVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'3' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'NonVAT'Remarks from SalesInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'3' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName
        //////,'NonVAT'Remarks from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturnV2s  (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'4' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'StandardVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'4' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'StandardVAT'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('ServiceNS','Service','TollFinishIssue','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS'
        //////,'Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'4' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'StandardVAT'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        ////// 
        //////
        //////insert into VATReturnV2s  (BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'5' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'MRPRate'Remarks 
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'5' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'MRPRate'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate','MRPRate(SC)')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'5' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'MRPRate'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate','MRPRate(SC)')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'6' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ga'SubFormName ,'FixedVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'6' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ga'SubFormName 
        //////,'FixedVAT'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'6' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ga'SubFormName 
        //////,'FixedVAT'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Ka'SubFormName ,'OtherRate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'OtherRate'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','Tender','Trading'
        //////,'ExportTrading','TradingTender','InternalIssue')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////,'OtherRate'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////--union all
        //////--select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'7' NoteNo,'3' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Ka'SubFormName 
        //////--,'OtherRate'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////--and TransactionType in('ServiceNS','Service')
        //////--and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////--AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'8' NoteNo,'0' SubNoteNo,0 SubTotal,0 SDAmount,0 VATAmount,'SubForm-Kha'SubFormName ,'Retail'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'8' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Kha'SubFormName 
        //////,'Retail'Remarks  from SalesInvoiceDetails where  1=1 and post='Y' and Type in('Retail')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'8' NoteNo,'2' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(SDAmount),2),ROUND( sum(VATAmount),2),'SubForm-Kha'SubFormName 
        //////,'Retail'Remarks  from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('Retail')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'9' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,ROUND( sum( LineB),2)LineB,ROUND( sum( LineC),2)LineC,'-'SubFormName ,'SumSub3'Remarks 
        //////from VATReturnV2s where NoteNo in(1,2,3,4,5,6,7,8)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'10' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseNonVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'10' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'10' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( 1*sum(VATAmount),2),ROUND( 1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'11' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseNonVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'11' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseNonVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        ////// 
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'12' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseExempted'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'12' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseExempted'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Exempted')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'12' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseExempted'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Exempted')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'13' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseExempted'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'13' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseExempted'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Exempted')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'14' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseStandardVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'14' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseStandardVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService','TollReceive')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'14' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseStandardVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'15' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseStandardVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'15' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseStandardVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'16' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseOtherRate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'16' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseOtherRate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'16' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseOtherRate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'17' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseOtherRate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'17' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseOtherRate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'18' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ga'SubFormName ,'LocalPurchaseFixedVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'18' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ga'SubFormName,'LocalPurchaseFixedVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'18' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ga'SubFormName,'LocalPurchaseFixedVAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'19' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseTurnover'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'19' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseTurnover'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Turnover')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'19' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseTurnover'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('Turnover')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'20' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseUnRegisterVendor'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'20' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseUnRegisterVendor'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('UnRegister')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'20' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseUnRegisterVendor'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('UnRegister')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'21' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'LocalPurchaseNonRebate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'21' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal),2),ROUND( sum(VATAmount),2),ROUND( sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonRebate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'21' NoteNo,'2' SubNoteNo,ROUND( -1*sum(SubTotal),2),ROUND( -1*sum(VATAmount),2),ROUND( -1*sum(SDAmount),2),'SubForm-Ka'SubFormName,'LocalPurchaseNonRebate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'22' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Ka'SubFormName ,'ImportPurchaseNonRebate'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'22' NoteNo,'1' SubNoteNo,ROUND( sum(SubTotal+CDAmount+RDAmount+SDAmount+TVBAmount),2),ROUND( sum(VATAmount),2),sum(0),'SubForm-Ka'SubFormName,'ImportPurchaseNonRebate'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y' and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,ROUND( sum( LineB),2)LineB,ROUND( sum( LineC),2)LineC,'-'SubFormName ,'SumSub4'Remarks
        ////// from (
        //////select @BranchId BranchId,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'SumSub4'Remarks 
        //////from VATReturnV2s where NoteNo in(10,11,12,13)
        //////
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum(LineA),2)LineA,ROUND( sum(LineB),2) LineB,0 LineC,'-'SubFormName ,'SumSub4'Remarks 
        //////from VATReturnV2s where NoteNo in(14,15,16,17,18)
        //////
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'23' NoteNo,'0' SubNoteNo,ROUND( sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'SumSub4'Remarks 
        //////from VATReturnV2s where NoteNo in(19,20,21,22)
        //////
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'24' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Gha'SubFormName ,'PurcshaseVDS'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'24' NoteNo,'1' SubNoteNo,ROUND( sum(BillDeductAmount),2),0 VATAmount,0 SDAmount,'SubForm-Gha'SubFormName,'PurcshaseVDS'Remarks  
        //////from VDS where  1=1 and post='Y'   
        //////and IsPurchase in('Y'  )
        //////and DepositDate >= @Datefrom and DepositDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'25' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'AdjustmentWithoutBankPay'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'25' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'AdjustmentWithoutBankPay'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('WithoutBankPay')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'26' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SaleDebitNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'26' NoteNo,'1' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleDebitNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'26' NoteNo,'2' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleDebitNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";

        //////                #endregion

        //////                #region Note: 27

        //////                sqlText = sqlText + @"
        //////--------insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////--------select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////--------union all
        //////--------select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'27' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////--------from AdjustmentHistorys where  1=1 and post='Y'   
        //////--------and AdjType in('IncreasingAdjustment')
        //////--------and AdjDate >= @Datefrom and AdjDate <dateadd(d,1,@Dateto)
        //////--------AND BranchId=@BranchId
        //////
        //////
        //////-----------------------------#TempAdjustmentHistorys/IncreasingAdjustment----------------------------Create/INSERT
        //////-----------------------------------------------------------------------------------------------------
        //////SELECT  *
        //////INTO #TempAdjustmentHistorys 
        //////
        //////FROM 
        //////(
        //////SELECT '27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////, '' AdjType, '' AdjName
        //////UNION ALL
        //////SELECT '27' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////, ah.AdjType, an.AdjName
        //////FROM AdjustmentHistorys ah
        //////LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId
        //////WHERE  1=1 and post='Y'   
        //////AND ah.AdjType in('IncreasingAdjustment')
        //////AND ah.AdjDate >= @Datefrom and ah.AdjDate <dateadd(d,1,@Dateto)
        //////AND ah.BranchId=@BranchId
        //////GROUP BY ah.AdjType, an.AdjName
        //////UNION ALL
        //////
        //////SELECT  '27' NoteNo,'2' SubNoteNo
        //////,ddbd.ClaimVAT Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment' Remarks
        //////,ddbd.TransactionType AdjType 
        //////,ddbd.TransactionType AdjName  
        //////FROM DutyDrawBackDetails ddbd
        //////LEFT OUTER JOIN PurchaseInvoiceDetails pid ON pid.PurchaseInvoiceNo=ddbd.PurchaseInvoiceNo
        //////WHERE 1=1 AND ddbd.BranchId=@BranchId
        //////AND ddbd.Post='Y'
        //////AND ddbd.DDBackDate >= @Datefrom and ddbd.DDBackDate <dateadd(d,1,@Dateto)
        //////AND ISNULL(ddbd.TransactionType,'DDB') = 'VDB'
        //////AND pid.Type IN('VAT','FixedVAT')
        //////
        //////
        //////UNION ALL
        //////SELECT '27' NoteNo,'3' SubNoteNo
        //////, CASE
        //////WHEN @AutoPartialRebateProcess='N' THEN 0 
        //////WHEN @Line9Subtotal > 0 THEN ISNULL(ROUND((SUM(LineA)*@Line23VAT/@Line9Subtotal),2),0) 
        //////ELSE 0 END AS Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////,'IncreasingAdjustment' AdjType, 'Exempted Goods/Service (Rebate Cancel)' AdjName
        //////FROM VATReturnV2s
        //////WHERE  1=1
        //////AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 3
        //////
        //////UNION ALL
        //////SELECT '27' NoteNo,'4' SubNoteNo
        //////, CASE 
        //////WHEN @AutoPartialRebateProcess='N' THEN 0 
        //////WHEN @Line9Subtotal > 0 THEN ISNULL(ROUND((SUM(LineA)*@Line23VAT/@Line9Subtotal),2),0) 
        //////ELSE 0 END AS Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////,'IncreasingAdjustment' AdjType, 'Other Rated VAT (Rebate Cancel)' AdjName
        //////FROM VATReturnV2s
        //////WHERE  1=1
        //////AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 7 AND SubNoteNo IN(1,2)
        //////
        //////) AS adj
        //////
        //////INSERT INTO VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, '27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////UNION ALL
        //////
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, NoteNo, SubNoteNo, Subtotal, VATAmount, SDAmount, SubFormName, Remarks
        //////FROM #TempAdjustmentHistorys
        //////where SubTotal>0
        //////
        //////
        //////
        //////-----------------------------END/Rebate Cancel----------------------------
        //////--------------------------------------------------------------------------
        //////
        //////";
        //////                #endregion

        //////                #region Note: 28-30

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'28' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'SumSub5'Remarks 
        //////from VATReturnV2s where NoteNo in(24,25,26,27)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'29' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Umo'SubFormName ,'SaleVDS'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'29' NoteNo,'1' SubNoteNo,ROUND(sum(BillDeductAmount),2),0 VATAmount,0 SDAmount,'SubForm-Umo'SubFormName,'SaleVDS'Remarks  
        //////from VDS where  1=1 and post='Y'   
        //////and IsPurchase in('N' )
        //////and DepositDate >= @Datefrom and DepositDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'30' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Cha'SubFormName ,'PurchaseAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'30' NoteNo,'1' SubNoteNo
        //////,case when @ATVRebate='Y' then ROUND(sum(ATVAmount),2) else 0 end ,sum(0),sum(0),'SubForm-Cha'SubFormName,'PurchaseAT'Remarks  
        //////from PurchaseInvoiceDetails where  1=1 and post='Y'  
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ReceiveDate >= @Datefrom and ReceiveDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 31 / Old 32

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'31' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SaleCreditNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'31' NoteNo,'1' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleCreditNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'31' NoteNo,'2' SubNoteNo,ROUND(sum(VATAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SaleCreditNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 32 / Old 33

        //////                sqlText = sqlText + @"
        //////
        //////
        //////SELECT  *
        //////INTO #TempDecrementAdjustmentHistorys 
        //////
        //////FROM
        //////(
        //////SELECT '32' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'DecreasingAdjustment'Remarks
        //////, '' AdjType, '' AdjName 
        //////UNION ALL
        //////SELECT '32' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'DecreasingAdjustment'Remarks  
        //////, ah.AdjType, an.AdjName
        //////FROM AdjustmentHistorys ah
        //////LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId
        //////WHERE  1=1 and post='Y'   
        //////AND ah.AdjType in('DecreasingAdjustment')
        //////AND ah.AdjDate >= @Datefrom and ah.AdjDate <dateadd(d,1,@Dateto)
        //////AND ah.BranchId=@BranchId
        //////GROUP BY ah.AdjType, an.AdjName
        //////
        //////UNION ALL
        //////
        //////SELECT  '32' NoteNo,'2' SubNoteNo
        //////,ddbd.ClaimVAT Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'DecreasingAdjustment' Remarks
        //////,'DecreasingAdjustment' AdjType 
        //////,ddbd.TransactionType AdjName  
        //////FROM DutyDrawBackDetails ddbd
        //////LEFT OUTER JOIN PurchaseInvoiceDetails pid ON pid.PurchaseInvoiceNo=ddbd.PurchaseInvoiceNo
        //////WHERE 1=1 AND ddbd.BranchId=@BranchId
        //////AND ddbd.Post='Y'
        //////AND ddbd.DDBackDate >= @Datefrom and ddbd.DDBackDate <dateadd(d,1,@Dateto)
        //////AND ISNULL(ddbd.TransactionType,'DDB') = 'VDB'
        //////AND pid.Type='NonRebate'
        //////) decAdj
        //////
        //////INSERT INTO VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, NoteNo, SubNoteNo
        //////, Subtotal
        //////, VATAmount, SDAmount, SubFormName,  Remarks  
        //////FROM #TempDecrementAdjustmentHistorys
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 33 / Old 34

        //////                sqlText = sqlText + @"
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'33' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'SumSub6'Remarks 
        //////from VATReturnV2s where NoteNo in(29,30,31,32)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 38-49 [Excluding: 34, 35, 36, 36, 37]

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'38' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SDSaleDebitNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'38' NoteNo,'1' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleDebitNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'38' NoteNo,'2' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleDebitNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Debit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'39' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SDSaleCreditNote'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'39' NoteNo,'1' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleCreditNote'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'39' NoteNo,'2' SubNoteNo,ROUND(sum(SDAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDSaleCreditNote'Remarks 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y'   
        //////and TransactionType in('Credit')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'40' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'SDExportSale'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'40' NoteNo,'1' SubNoteNo,ROUND(sum(ApprovedSD),2),0 VATAmount,0 SDAmount,'-'SubFormName,'SDExportSale'Remarks 
        //////from DutyDrawBackHeader where  1=1 and post='Y'   
        ////// and ISNULL(DutyDrawBackHeader.TransactionType,'DDB') = 'SDB'
        //////
        //////and DDBackDate >= @Datefrom and DDBackDate <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'41' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'InterestOnOveredVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'41' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'InterestOnOveredVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredVAT')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'42' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'InterestOnOveredSD'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'42' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'InterestOnOveredSD'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredSD')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'43' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'FinePenaltyForNonSubmissionOfReturn'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'43' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'FinePenaltyForNonSubmissionOfReturn'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('FinePenaltyForNonSubmissionOfReturn')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'44' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'FineOrPenalty'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'44' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'FineOrPenalty'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('FineOrPenalty')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'45' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'ExciseDuty'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'45' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'ExciseDuty'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ExciseDuty')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'46' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'DevelopmentSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'46' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'DevelopmentSurcharge'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('DevelopmentSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'47' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'ICTDevelopmentSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'47' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'ICTDevelopmentSurcharge'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ICTDevelopmentSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'48' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'HelthCareSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom, @UserName,@Branch,'48' NoteNo,'1' SubNoteNo,ROUND(sum(HPSAmount),2),0,0,'-'SubFormName,'HelthCareSurcharge'Remarks 
        //////from SalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate(SC)')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'49' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'EnvironmentProtectionSurcharge'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'49' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'EnvironmentProtectionSurcharge'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('EnvironmentProtectionSurcharge')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 52 / Old 50


        //////                DateTime PeriodStart = Convert.ToDateTime(PeriodName);

        //////                DateTime HardDecember2019 = Convert.ToDateTime("December-2019");

        //////                if (PeriodStart <= HardDecember2019)
        //////                {
        //////                    sqlText = sqlText + @"
        //////
        //////---------------------------------Line52-----------------------------------------------
        //////--------------------------------------------------------------------------------------
        //////
        //////select @LastLine65=ISNULL(sum(LineA),0) FROM VATReturns WHERE NoteNo='62' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;
        //////select @LastLine66=ISNULL(sum(LineA),0) FROM VATReturns WHERE NoteNo='63' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;
        //////
        //////
        //////";
        //////                }
        //////                else
        //////                {

        //////                    sqlText = sqlText + @"
        //////
        //////---------------------------------Line52-----------------------------------------------
        //////--------------------------------------------------------------------------------------
        //////
        //////
        //////----------select @PreviousPeriodID=format( DATEADD(M, -1,@DateFrom),'MMyyyy')
        //////select @LastLine65=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='65' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;;
        //////select @LastLine66=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='66' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;;
        //////
        //////
        //////
        //////";
        //////                }

        //////                sqlText = sqlText + @"
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'52' NoteNo,'1' SubNoteNo, sum(SubTotal)SubTotal,sum( VATAmount) VATAmount,sum( SDAmount)SDAmount ,'-'SubFormName ,'LastClosingVAT'Remarks
        //////from(
        //////
        //////select ISNULL(@LastLine65,0) SubTotal,0 VATAmount,0 SDAmount
        //////
        //////UNION ALL
        //////
        //////select ISNULL(DepositAmount,0) SubTotal,0 VATAmount,0 SDAmount
        //////
        //////from Deposits
        //////where 1=1
        //////AND Post='Y'  
        //////AND DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND DepositType = 'Opening'
        //////AND BranchId=@BranchId
        //////) as a
        //////
        //////";
        //////                #endregion

        //////                #region Note: 53 / Old 51

        //////                sqlText = sqlText + @"
        ////// 
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'53' NoteNo,'1' SubNoteNo, sum(SubTotal)SubTotal,sum( VATAmount) VATAmount,sum( SDAmount)SDAmount ,'-'SubFormName ,'LastClosingSD'Remarks
        //////from(
        //////
        //////select ISNULL(@LastLine66,0) SubTotal,0 VATAmount,0 SDAmount
        //////
        //////) as a
        //////";
        //////                #endregion

        //////                #region Note: 54 / New (Under Development)

        //////                sqlText = sqlText + @" 
        //////select @LastLine54=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='54' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;
        //////select @LastLine56=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='56' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'54' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'ClosingBalanceVAT(18.6)'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'54' NoteNo,'1' SubNoteNo
        //////,ISNULL((ROUND(sum(DepositAmount),2)),0)+ISNULL(@LastLine54,0)-ISNULL(@LastLine56,0)
        //////,0 VATAmount,0 SDAmount,'-'SubFormName,'ClosingBalanceVAT(18.6)'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('Treasury') and DepositType in('ClosingBalanceVAT(18.6)')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 55 / New (Under Development)


        //////                sqlText = sqlText + @" 
        //////
        //////select @LastLine55=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='55' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;
        //////select @LastLine57=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='57' and PeriodID=@PreviousPeriodID AND BranchId=@SelectBranchId;
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'55' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'ClosingBalanceSD(18.6)'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'55' NoteNo,'1' SubNoteNo
        //////,ISNULL((ROUND(sum(DepositAmount),2)),0)+ISNULL(@LastLine55,0)-ISNULL(@LastLine57,0)
        //////,0 VATAmount,0 SDAmount,'-'SubFormName,'ClosingBalanceSD(18.6)'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('SD') and DepositType in('ClosingBalanceSD(18.6)')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 58-64

        //////                sqlText = sqlText + @" 
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'58' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'TotalDepositVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'58' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('Treasury') and DepositType NOT IN('ClosingBalanceVAT(18.6)') and DepositType NOT IN('RequestedAmountForRefundVAT')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'58' NoteNo,'2' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('VDS') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'58' NoteNo,'3' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'
        //////and TransactionType
        //////in(
        //////'WithoutBankPay'
        //////,'DevelopmentSurcharge'
        //////,'EnvironmentProtectionSurcharge'
        //////,'ExciseDuty'
        //////,'FineOrPenalty'
        //////,'HelthCareSurcharge'
        //////,'ICTDevelopmentSurcharge'
        //////,'InterestOnOveredSD'
        //////,'InterestOnOveredVAT'
        //////,'FinePenaltyForNonSubmissionOfReturn'
        //////)
        //////and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////";

        //////                sqlText = sqlText + @"
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'59' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'TotalDepositSD'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'59' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'TotalDepositSD'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('SD') and DepositType NOT IN('ClosingBalanceSD(18.6)') and DepositType NOT IN('RequestedAmountForRefundSD')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'60' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'ExciseDutyDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'60' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'ExciseDutyDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ExciseDuty') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'61' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'DevelopmentSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'61' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'DevelopmentSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('DevelopmentSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'62' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'ICTDevelopmentSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'62' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'ICTDevelopmentSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('ICTDevelopmentSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'63' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'HelthCareSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'63' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'HelthCareSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('HelthCareSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'64' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName ,'EnvironmentProtectionSurchargeDeposit'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'64' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName,'EnvironmentProtectionSurchargeDeposit'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('EnvironmentProtectionSurcharge') and DepositType not in('NotDeposited')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 34 (9C-23B+28-33)

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'34' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'Line34'Remarks
        ////// from (
        //////select @BranchId BranchId,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'34' NoteNo,'0' SubNoteNo,ROUND(sum( LineC),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line34'Remarks 
        //////from VATReturnV2s where NoteNo in(9)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'34' NoteNo,'0' SubNoteNo,ROUND(-1*sum(LineB),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line34'Remarks 
        //////from VATReturnV2s where NoteNo in(23)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'34' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line34'Remarks 
        //////from VATReturnV2s where NoteNo in(28)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'34' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line34'Remarks 
        //////from VATReturnV2s where NoteNo in(33)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 56 / New (Under Development)

        //////                sqlText = sqlText + @"  
        //////select @Line54=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='54' and PeriodID=@PeriodID AND BranchId=@SelectBranchId;
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'56' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'DecreasingAdjustmentForNote54'Remarks
        //////from (
        //////select @BranchId BranchId,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'56' NoteNo,'0' SubNoteNo
        //////,CASE 
        //////WHEN SUM(ISNULL(LineA,0)) <= 0 then 0
        //////WHEN ROUND(sum(LineA)*10/100,2)>ISNULL(@Line54,0) then ISNULL(@Line54,0) 
        //////WHEN ROUND(sum(LineA)*10/100,2)<=ISNULL(@Line54,0) then ROUND(sum(LineA)*10/100,2) 
        //////else 0 end LineA
        //////,0 LineB,0 LineC,'-'SubFormName ,'Line56'Remarks 
        //////from VATReturnV2s where NoteNo in(34)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////) as a
        //////
        //////";
        //////                #endregion

        //////                #region Note: 35 (34-(52+56))

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'35' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line35' Remarks
        //////from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'35' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line35'Remarks 
        //////from VATReturnV2s where NoteNo in(34)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'35' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line35'Remarks 
        //////from VATReturnV2s where NoteNo in(52)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'35' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line35'Remarks 
        //////from VATReturnV2s where NoteNo in(56)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////) as a
        //////
        //////
        //////";
        //////                #endregion

        //////                #region Note: 50 / New (35+41+43+44)

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'50' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'Line50'Remarks
        ////// from (
        //////select @BranchId BranchId,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'50' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line50'Remarks 
        //////from VATReturnV2s where NoteNo in(35)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'50' NoteNo,'0' SubNoteNo,ROUND(sum(LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line50'Remarks 
        //////from VATReturnV2s where NoteNo in(41)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'50' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line50'Remarks 
        //////from VATReturnV2s where NoteNo in(43)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'50' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line50'Remarks 
        //////from VATReturnV2s where NoteNo in(44)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////";
        //////                #endregion

        //////                #region Note: 36 (9B+38-(39+40))

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'36' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line36' Remarks
        //////from (
        //////select  @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'36' NoteNo,'0' SubNoteNo,ROUND(sum( LineB),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line36'Remarks 
        //////from VATReturnV2s where NoteNo in(9)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'36' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line36'Remarks 
        //////from VATReturnV2s where NoteNo in(38)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'36' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line36'Remarks 
        //////from VATReturnV2s where NoteNo in(39)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'36' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line36'Remarks 
        //////from VATReturnV2s where NoteNo in(40)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////) as a
        //////";
        //////                #endregion

        //////                #region Note: 57 / New (Under Development)


        //////                sqlText = sqlText + @"  
        //////select @Line55=ISNULL(sum(LineA),0) FROM VATReturnV2s WHERE NoteNo='55' and PeriodID=@PeriodID AND BranchId=@SelectBranchId;
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'57' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2) LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-'SubFormName ,'DecreasingAdjustmentForNote55'Remarks
        //////from (
        //////select @BranchId BranchId,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'57' NoteNo,'0' SubNoteNo
        //////,CASE 
        //////WHEN SUM(ISNULL(LineA,0)) <= 0 then 0
        //////WHEN ROUND(sum(LineA)*10/100,2)>ISNULL(@Line55,0) then ISNULL(@Line55,0) 
        //////WHEN ROUND(sum(LineA)*10/100,2)<=ISNULL(@Line55,0) then ROUND(sum(LineA)*10/100,2) 
        //////else 0 end LineA
        //////,0 LineB,0 LineC,'-'SubFormName ,'Line57'Remarks 
        //////from VATReturnV2s where NoteNo in(36)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////) as a
        //////
        //////";
        //////                #endregion

        //////                #region Note: 37 (36-(53+57))

        //////                sqlText = sqlText + @"
        //////
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'37' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line37' Remarks
        //////from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'37' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line37'Remarks 
        //////from VATReturnV2s where NoteNo in(36)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'37' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line37'Remarks 
        //////from VATReturnV2s where NoteNo in(53)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'37' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line37'Remarks 
        //////from VATReturnV2s where NoteNo in(57)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////) as a
        ////// ";
        //////                #endregion

        //////                #region Note: 51 / New (37+42)

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'51' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line51' Remarks
        //////from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'51' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line51'Remarks 
        //////from VATReturnV2s where NoteNo in(37)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'51' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line51'Remarks 
        //////from VATReturnV2s where NoteNo in(42)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////) as a
        //////
        //////";


        //////                #endregion

        //////                #region Note: 67 / New (Under Development)

        //////                sqlText = sqlText + @" 
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'67' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'RequestedAmountForRefundVAT'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'67' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'RequestedAmountForRefundVAT'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('Treasury') and DepositType in('RequestedAmountForRefundVAT')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 68 / New (Under Development)

        //////                sqlText = sqlText + @" 
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'68' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'RequestedAmountForRefundSD'Remarks 
        //////union all
        //////select @BranchId,@PeriodId, @DateFrom,@UserName,@Branch,'68' NoteNo,'1' SubNoteNo,ROUND(sum(DepositAmount),2),0 VATAmount,0 SDAmount,'-'SubFormName,'RequestedAmountForRefundSD'Remarks  
        //////from Deposits where  1=1 and post='Y'   
        //////and TransactionType in('SD') and DepositType in('RequestedAmountForRefundSD')
        //////and DepositDateTime >= @Datefrom and DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////";
        //////                #endregion

        //////                #region Note: 65/ Old 62 (58-(50+67))

        //////                sqlText = sqlText + @"
        //////
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'65' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line65' Remarks
        //////from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'65' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line65'Remarks 
        //////from VATReturnV2s where NoteNo in(58)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'65' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line65'Remarks 
        //////from VATReturnV2s where NoteNo in(50)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'65' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line65'Remarks 
        //////from VATReturnV2s where NoteNo in(67)
        //////and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////) as a
        //////";
        //////                #endregion

        //////                #region Note: 66/ Old 63 (59-(51+68))

        //////                sqlText = sqlText + @"
        //////insert into VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////select @BranchId,@PeriodId, @DateFrom,@UserName UserName,@Branch Branch,'66' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,ROUND(sum( LineB),2)LineB,ROUND(sum( LineC),2)LineC,'-' SubFormName ,'Line66' Remarks
        ////// from (
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName UserName,@Branch Branch,'66' NoteNo,'0' SubNoteNo,ROUND(sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line66'Remarks 
        //////from VATReturnV2s where NoteNo in(59)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'66' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line66'Remarks 
        //////from VATReturnV2s where NoteNo in(51)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        //////
        //////union all
        //////select @BranchId BranchId ,@PeriodId PeriodId, @DateFrom DateFrom,@UserName,@Branch,'66' NoteNo,'0' SubNoteNo,ROUND(-1*sum( LineA),2)LineA,0 LineB,0 LineC,'-'SubFormName ,'Line66'Remarks 
        //////from VATReturnV2s where NoteNo in(68)
        ////// and PeriodID = @PeriodId and BranchId = @SelectBranchId 
        ////// ) as a
        //////
        //////";
        //////                #endregion

        //////                #region 9.1 Report

        //////                sqlText = sqlText + @"
        //////
        //////select distinct Remarks NoteDescription,  NoteNo,ROUND( Sum(LineA),2)LineA,ROUND(Sum(LineB),2)LineB,ROUND(Sum(LineC),2)LineC,SubFormName
        //////from VATReturnV2s
        ////// where  BranchId=@SelectBranchId 
        //////and PeriodID=@PeriodID
        //////group by NoteNo,SubFormName,Remarks
        //////order by NoteNo
        //////
        //////";
        //////                #endregion

        //////                #region DataTable 2 / IncreasingAdjustment

        //////                sqlText = sqlText + @"
        //////---------------------------------#TempAdjustmentHistorys/IncreasingAdjustment----------------------------SELECT
        //////---------------------------------------------------------------------------------------------------------
        //////
        //////SELECT DISTINCT  AdjType,ah.AdjName,ROUND(SUM(ah.SubTotal),2)AdjAmount FROM #TempAdjustmentHistorys ah
        //////WHERE AdjType='IncreasingAdjustment' and ah.SubTotal>0
        //////GROUP BY AdjType,ah.AdjName
        //////
        //////
        //////DROP TABLE #TempAdjustmentHistorys;
        //////
        //////";
        //////                #endregion

        //////                #region DataTable 3 / DecreasingAdjustment
        //////                sqlText = sqlText + @"
        //////
        //////---------------------------------#TempDecrementAdjustmentHistorys/DecreasingAdjustment----------------------------SELECT
        //////------------------------------------------------------------------------------------------------------------------
        //////
        //////SELECT DISTINCT  AdjType,ah.AdjName,ROUND(SUM(ah.SubTotal),2)AdjAmount FROM #TempDecrementAdjustmentHistorys ah
        //////WHERE AdjType='DecreasingAdjustment' and ah.SubTotal>0
        //////GROUP BY AdjType,ah.AdjName
        //////
        //////
        //////DROP TABLE #TempDecrementAdjustmentHistorys;
        //////
        //////";
        //////                #endregion

        //////                #endregion

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                    //sqlText = sqlText.Replace("=@SelectBranchId", ">@SelectBranchId");
        //////                }

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT19.Parameters.AddWithValue("@SelectBranchId", BranchId);
        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);
        //////                objCommVAT19.Parameters.AddWithValue("@PreviousPeriodID", PreviousPeriodID);



        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }




        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dataSet);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw new Exception(sqlText);
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw new Exception(sqlText);
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dataSet;
        //////        }

        //////        public DataSet VAT9_1_V2Load(string PeriodName, int BranchId = 0, string Date = "", SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            string PreviousPeriodID = "";
        //////            DataSet dataSet = new DataSet("VAT9_1_V2");

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                if (!string.IsNullOrWhiteSpace((Date)))
        //////                {
        //////                    PreviousPeriodID = Convert.ToDateTime(Date).AddMonths(-1).ToString("MMyyyy");
        //////                }
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction

        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                #region SQLText

        //////                sqlText = @" ";

        //////                #region Beginning

        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////declare @ATVRebate as varchar(100);
        //////declare @AutoPartialRebateProcess as varchar(1);
        //////
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////declare @PeriodId as varchar(100);
        //////
        //////
        //////
        //////
        //////
        //////----------------------------------Initialization------------------------
        //////------------------------------------------------------------------------
        //////select  @PeriodId=PeriodId, @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////select @ATVRebate=settingValue  FROM Settings where SettingGroup='ImportPurchase' and SettingName='ATVRebate';
        //////select @AutoPartialRebateProcess=settingValue  FROM Settings where SettingGroup='Sale' and SettingName='AutoPartialRebateProcess';
        //////
        //////
        //////----------------------------------Clear Data (Note 27, 32)------------------------
        //////------------------------------------------------------------------------
        //////delete VATReturnV2s where  PeriodID = @PeriodId and BranchId = @SelectBranchId  and NoteNo in (27,32)
        //////
        //////
        //////
        //////-----------------------------Initialization/Rebate Cancel----------------------------
        //////-------------------------------------------------------------------------------------
        //////DECLARE @Line9Subtotal AS DECIMAL = 0
        //////DECLARE @Line23VAT AS DECIMAL = 0
        //////
        //////SELECT @Line9Subtotal=ISNULL(SUM(LineA),0)
        //////FROM VATReturnV2s
        //////WHERE  1=1 AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 9
        //////
        //////SELECT @Line23VAT=ISNULL(SUM(LineB),0)
        //////FROM VATReturnV2s
        //////WHERE  1=1 AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 23
        //////
        //////-----------------------------#TempAdjustmentHistorys/IncreasingAdjustment----------------------------Create/INSERT
        //////-----------------------------------------------------------------------------------------------------
        //////SELECT  *
        //////INTO #TempAdjustmentHistorys 
        //////
        //////FROM 
        //////(
        //////--SELECT '27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////--, '' AdjType, '' AdjName
        //////--UNION ALL
        //////SELECT '27' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2)SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////, ah.AdjType, an.AdjName, ah.AdjDescription
        //////FROM AdjustmentHistorys ah
        //////LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId
        //////WHERE  1=1 and post='Y'   
        //////AND ah.AdjType in('IncreasingAdjustment')
        //////AND ah.AdjDate >= @Datefrom and ah.AdjDate <dateadd(d,1,@Dateto)
        //////AND ah.BranchId=@BranchId
        //////GROUP BY ah.AdjType, an.AdjName, ah.AdjDescription
        //////UNION ALL
        //////
        //////SELECT  '27' NoteNo,'2' SubNoteNo
        //////,ddbd.ClaimVAT Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment' Remarks
        //////,ddbd.TransactionType AdjType 
        //////,ddbd.TransactionType AdjName 
        //////,'' AdjDescription 
        //////FROM DutyDrawBackDetails ddbd
        //////LEFT OUTER JOIN PurchaseInvoiceDetails pid ON pid.PurchaseInvoiceNo=ddbd.PurchaseInvoiceNo
        //////WHERE 1=1 AND ddbd.BranchId=@BranchId
        //////AND ddbd.Post='Y'
        //////AND ddbd.DDBackDate >= @Datefrom and ddbd.DDBackDate <dateadd(d,1,@Dateto)
        //////AND ISNULL(ddbd.TransactionType,'DDB') = 'VDB'
        //////AND pid.Type IN('VAT','FixedVAT')
        //////
        //////
        //////UNION ALL
        //////SELECT '27' NoteNo,'3' SubNoteNo
        //////, CASE
        //////WHEN @AutoPartialRebateProcess='N' THEN 0 
        //////WHEN @Line9Subtotal > 0 THEN ISNULL(ROUND((SUM(LineA)*@Line23VAT/@Line9Subtotal),2),0) 
        //////ELSE 0 END AS Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////,'IncreasingAdjustment' AdjType, 'Exempted Goods/Service (Rebate Cancel)' AdjName
        //////,'' AdjDescription
        //////FROM VATReturnV2s
        //////WHERE  1=1
        //////AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 3
        //////
        //////UNION ALL
        //////SELECT '27' NoteNo,'4' SubNoteNo
        //////, CASE 
        //////WHEN @AutoPartialRebateProcess='N' THEN 0 
        //////WHEN @Line9Subtotal > 0 THEN ISNULL(ROUND((SUM(LineA)*@Line23VAT/@Line9Subtotal),2),0) 
        //////ELSE 0 END AS Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'IncreasingAdjustment'Remarks  
        //////,'IncreasingAdjustment' AdjType, 'Other Rated VAT (Rebate Cancel)' AdjName
        //////,'' AdjDescription
        //////FROM VATReturnV2s
        //////WHERE  1=1
        //////AND PeriodID = @PeriodId AND BranchId=@SelectBranchId AND NoteNo = 7 AND SubNoteNo IN(1,2)
        //////
        //////) AS adj
        //////
        //////INSERT INTO VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, '27' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'IncreasingAdjustment'Remarks 
        //////UNION ALL
        //////
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, NoteNo, SubNoteNo, Subtotal, VATAmount, SDAmount, SubFormName, Remarks
        //////FROM #TempAdjustmentHistorys
        //////where SubTotal>0
        //////
        //////
        //////
        //////-----------------------------END/Rebate Cancel----------------------------
        //////--------------------------------------------------------------------------
        ////// 
        //////";

        //////                sqlText = sqlText + @"
        //////
        //////
        //////SELECT  *
        //////INTO #TempDecrementAdjustmentHistorys 
        //////
        //////FROM
        //////(
        //////--SELECT '32' NoteNo,'0' SubNoteNo,0 SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName ,'DecreasingAdjustment'Remarks
        //////--, '' AdjType, '' AdjName 
        //////--UNION ALL
        //////SELECT '32' NoteNo,'1' SubNoteNo,ROUND(sum(AdjAmount),2)SubTotal,0 VATAmount,0 SDAmount,'-'SubFormName,'DecreasingAdjustment'Remarks  
        //////, ah.AdjType, an.AdjName, ah.AdjDescription
        //////FROM AdjustmentHistorys ah
        //////LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId
        //////WHERE  1=1 and post='Y'   
        //////AND ah.AdjType in('DecreasingAdjustment')
        //////AND ah.AdjDate >= @Datefrom and ah.AdjDate <dateadd(d,1,@Dateto)
        //////AND ah.BranchId=@BranchId
        //////GROUP BY ah.AdjType, an.AdjName, ah.AdjDescription
        //////
        //////UNION ALL
        //////
        //////SELECT  '32' NoteNo,'2' SubNoteNo
        //////,ddbd.ClaimVAT Subtotal
        //////, 0 VATAmount,0 SDAmount,'-'SubFormName,'DecreasingAdjustment' Remarks
        //////,'DecreasingAdjustment' AdjType 
        //////,ddbd.TransactionType AdjName  
        //////,'' AdjDescription
        //////FROM DutyDrawBackDetails ddbd
        //////LEFT OUTER JOIN PurchaseInvoiceDetails pid ON pid.PurchaseInvoiceNo=ddbd.PurchaseInvoiceNo
        //////WHERE 1=1 AND ddbd.BranchId=@BranchId
        //////AND ddbd.Post='Y'
        //////AND ddbd.DDBackDate >= @Datefrom and ddbd.DDBackDate <dateadd(d,1,@Dateto)
        //////AND ISNULL(ddbd.TransactionType,'DDB') = 'VDB'
        //////AND pid.Type='NonRebate'
        //////) decAdj
        //////
        //////INSERT INTO VATReturnV2s(BranchId,PeriodID,PeriodStart,UserName,Branch,NoteNo,SubNoteNo,LineA,LineB,LineC,SubFormName,Remarks)
        //////SELECT @BranchId,@PeriodId, @DateFrom,@UserName,@Branch, NoteNo, SubNoteNo
        //////, Subtotal
        //////, VATAmount, SDAmount, SubFormName,  Remarks  
        //////FROM #TempDecrementAdjustmentHistorys
        //////
        //////
        //////";
        //////                #endregion

        //////                #endregion

        //////                #region 9.1 Report

        //////                sqlText = sqlText + @"
        //////
        //////select distinct Remarks NoteDescription,  NoteNo,ROUND( Sum(LineA),2)LineA,ROUND(Sum(LineB),2)LineB,ROUND(Sum(LineC),2)LineC,SubFormName
        //////from VATReturnV2s
        ////// where  BranchId=@SelectBranchId 
        //////and PeriodID=@PeriodID
        //////group by NoteNo,SubFormName,Remarks
        //////order by NoteNo
        //////
        //////";
        //////                #endregion

        //////                #region DataTable 2 / IncreasingAdjustment

        //////                sqlText = sqlText + @"
        //////---------------------------------#TempAdjustmentHistorys/IncreasingAdjustment----------------------------SELECT
        //////---------------------------------------------------------------------------------------------------------
        //////
        //////SELECT DISTINCT  AdjType,ah.AdjName,ah.AdjDescription,ROUND(SUM(ah.SubTotal),2)AdjAmount FROM #TempAdjustmentHistorys ah
        //////WHERE AdjType='IncreasingAdjustment' and ah.SubTotal>0
        //////GROUP BY AdjType,ah.AdjName,ah.AdjDescription
        //////
        //////
        //////DROP TABLE #TempAdjustmentHistorys;
        //////
        //////";
        //////                #endregion

        //////                #region DataTable 3 / DecreasingAdjustment
        //////                sqlText = sqlText + @"
        //////
        //////---------------------------------#TempDecrementAdjustmentHistorys/DecreasingAdjustment----------------------------SELECT
        //////------------------------------------------------------------------------------------------------------------------
        //////
        //////SELECT DISTINCT  AdjType,ah.AdjName, ah.AdjDescription, ROUND(SUM(ah.SubTotal),2)AdjAmount FROM #TempDecrementAdjustmentHistorys ah
        //////WHERE AdjType='DecreasingAdjustment' and ah.SubTotal>0
        //////GROUP BY AdjType,ah.AdjName, ah.AdjDescription
        //////
        //////
        //////DROP TABLE #TempDecrementAdjustmentHistorys;
        //////
        //////";
        //////                #endregion

        //////                #region DataTable 4 / VATReturnHeaders
        //////                sqlText = sqlText + @"
        //////
        //////---------------------------------VATReturnHeaders----------------------------
        //////-----------------------------------------------------------------------------
        //////
        //////SELECT * FROM VATReturnHeaders ah
        //////WHERE 1=1
        //////and BranchId=@SelectBranchId 
        //////and PeriodID=@PeriodID
        //////
        //////";
        //////                #endregion



        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                    //sqlText = sqlText.Replace("=@SelectBranchId", ">@SelectBranchId");
        //////                }

        //////                #endregion

        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT19.Parameters.AddWithValue("@SelectBranchId", BranchId);
        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);



        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }




        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dataSet);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw new Exception(sqlText);
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw new Exception(sqlText);
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dataSet;
        //////        }


        //////        public string[] InsertToVATReturnHeaders(string PeriodName, string UserName, int BranchId, string BranchName, string MainOrginalReturn, string LateReturn, string AmendReturn, string AlternativeReturn, string NoActivites, string NoActivitesDetails, string DateOfSubmission, DateTime PeriodStart, string Remarks = "", SysDBInfoVMTemp connVM = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null)
        //////        {
        //////            #region Variables


        //////            string[] retResults = new string[3];
        //////            retResults[0] = "Fail";
        //////            retResults[1] = "Fail";
        //////            retResults[2] = "";

        //////            DataTable Dt = new DataTable();
        //////            SqlConnection currConn = null;
        //////            SqlTransaction transaction = null;
        //////            int transResult = 0;
        //////            int countId = 0;
        //////            string sqlText = "";

        //////            int nextId = 0;
        //////            int ID = 0;

        //////            #endregion

        //////            try
        //////            {
        //////                #region Validation


        //////                #endregion Validation

        //////                #region open connection and transaction

        //////                #region New open connection and transaction
        //////                if (VcurrConn != null)
        //////                {
        //////                    currConn = VcurrConn;
        //////                }
        //////                if (Vtransaction != null)
        //////                {
        //////                    transaction = Vtransaction;
        //////                }
        //////                #endregion New open connection and transaction
        //////                if (currConn == null)
        //////                {
        //////                    currConn = _dbsqlConnection.GetConnection(connVM);
        //////                    if (currConn.State != ConnectionState.Open)
        //////                    {
        //////                        currConn.Open();
        //////                    }
        //////                }
        //////                if (transaction == null)
        //////                {
        //////                    transaction = currConn.BeginTransaction("");
        //////                }

        //////                #endregion open connection and transaction


        //////                #region PeriodId find checking

        //////                sqlText = "select PeriodId FROM FiscalYear where PeriodName=@PeriodName";
        //////                SqlCommand PeriodId = new SqlCommand(sqlText, currConn);
        //////                PeriodId.Transaction = transaction;
        //////                PeriodId.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(PeriodId);
        //////                dataAdapter.Fill(Dt);
        //////                var PeriodID = Dt.Rows[0]["PeriodId"];

        //////                #endregion PeriodId find checking


        //////                #region Delete

        //////                sqlText = "delete VATReturnHeaders where  PeriodID = @PeriodId and BranchId = @BranchId";
        //////                SqlCommand cmdDelete = new SqlCommand(sqlText, currConn);
        //////                cmdDelete.Transaction = transaction;
        //////                cmdDelete.Parameters.AddWithValue("@PeriodID", PeriodID);
        //////                cmdDelete.Parameters.AddWithValue("@BranchId", BranchId);
        //////                transResult = (int)cmdDelete.ExecuteNonQuery();

        //////                #endregion Delete

        //////                #region VATReturnHeaders new id generation

        //////                sqlText = "select isnull(max(cast(Id as int)),0)+1 FROM  VATReturnHeaders";
        //////                SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
        //////                cmdNextId.Transaction = transaction;
        //////                nextId = Convert.ToInt32(cmdNextId.ExecuteScalar());
        //////                if (nextId <= 0)
        //////                {

        //////                    throw new ArgumentNullException("InsertToVATReturnHeaders", "Unable to create new CustomsHouse");
        //////                }

        //////                #endregion VATReturnHeaders new id generation

        //////                ID = nextId;

        //////                #region Insert new VATReturnHeaders

        //////                sqlText = "";
        //////                sqlText += @" 
        //////INSERT INTO VATReturnHeaders(
        //////Id
        //////,UserName
        //////,Branch
        //////,Remarks
        //////,PeriodID
        //////,PeriodStart
        //////,BranchId
        //////,MainOrginalReturn
        //////,LateReturn
        //////,AmendReturn
        //////,FullAdditionalAlternativeReturn
        //////,NoActivites
        //////,NoActivitesDetails
        //////,DateOfSubmission
        //////
        //////) VALUES (
        ////// @Id
        //////,@UserName
        //////,@Branch
        //////,@Remarks
        //////,@PeriodID
        //////,@PeriodStart
        //////,@BranchId
        //////,@MainOrginalReturn
        //////,@LateReturn
        //////,@AmendReturn
        //////,@FullAdditionalAlternativeReturn
        //////,@NoActivites
        //////,@NoActivitesDetails
        //////,@DateOfSubmission
        //////) 
        //////";


        //////                SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
        //////                cmdInsert.Transaction = transaction;
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@Id", ID);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@UserName", UserName);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@Branch", BranchName ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@Remarks", Remarks ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@PeriodID", PeriodID);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@PeriodStart", PeriodStart);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", BranchId);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@MainOrginalReturn", MainOrginalReturn ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@LateReturn", LateReturn ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@AmendReturn", AmendReturn ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@FullAdditionalAlternativeReturn", AlternativeReturn ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@NoActivites", NoActivites ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@NoActivitesDetails", NoActivitesDetails ?? Convert.DBNull);
        //////                cmdInsert.Parameters.AddWithValueAndNullHandle("@DateOfSubmission", DateOfSubmission ?? Convert.DBNull);

        //////                transResult = (int)cmdInsert.ExecuteNonQuery();

        //////                #region Commit

        //////                if (transaction != null && Vtransaction == null)
        //////                {
        //////                    if (transResult > 0)
        //////                    {
        //////                        transaction.Commit();
        //////                        retResults[0] = "Success";
        //////                        retResults[1] = "Requested VATReturnHeaders  Information successfully Added.";
        //////                        retResults[2] = "" + nextId;

        //////                    }

        //////                }
        //////                else
        //////                {
        //////                    retResults[0] = "Fail";
        //////                    retResults[1] = "Unexpected error to add VATReturnHeaders ";
        //////                    retResults[2] = "";
        //////                }

        //////                #endregion Commit

        //////                #endregion Insert new CustomsHouse

        //////            }
        //////            #region catch & Finally
        //////            #region Catch
        //////            catch (Exception ex)
        //////            {

        //////                retResults[0] = "Fail";//Success or Fail
        //////                retResults[1] = ex.Message.Split(new[] { '\r', '\n' }).FirstOrDefault(); //catch ex
        //////                retResults[2] = nextId.ToString(); //catch ex
        //////                if (transaction != null && Vtransaction == null)
        //////                {
        //////                    transaction.Rollback();
        //////                }

        //////                FileLogger.Log(MethodBase.GetCurrentMethod().Name, this.GetType().Name, ex.Message + Environment.NewLine + ex.StackTrace + Environment.NewLine + sqlText);
        //////                return retResults;
        //////            }
        //////            #endregion
        //////            finally
        //////            {
        //////                if (currConn != null && VcurrConn == null)
        //////                {
        //////                    if (currConn.State == ConnectionState.Open)
        //////                    {
        //////                        currConn.Close();
        //////                    }
        //////                }
        //////            }

        //////            #endregion

        //////            return retResults;
        //////        }



        //////        //// LineNo=58,59,60,61,62,63,64
        //////        public DataTable VAT9_1_SubFormGPart8_V2(string PeriodName, string ExportInBDT = "Y", int LineNo = 58, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////--------declare @BranchId int = 1
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 58)
        //////                {
        //////                    #region LineNo-58

        //////                    sqlText = sqlText + @" 
        //////select dep.*, dep.DepositId DetailRemarks  from (
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'58' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Total Deposit VAT'Remarks  
        //////, d.TreasuryNo ChallanNumber, b.BankName BankName, b.BranchName BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId
        //////
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and d.post='Y'   
        //////and d.TransactionType in('Treasury') and d.DepositType NOT IN('ClosingBalanceVAT(18.6)') and d.DepositType NOT IN('RequestedAmountForRefundVAT')
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'58' NoteNo,'2' SubNoteNo, DepositAmount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Total Deposit VAT'Remarks  
        //////, d.TreasuryNo ChallanNumber, b.BankName BankName, b.BranchName BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId
        //////
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and post='Y'   
        //////and d.TransactionType in('VDS') AND d.DepositType not in('NotDeposited')
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'58' NoteNo,'3' SubNoteNo, DepositAmount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Total Deposit VAT'Remarks  
        //////, d.TreasuryNo ChallanNumber, b.BankName BankName, b.BranchName BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId
        //////
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and post='Y'   
        //////and d.TransactionType
        //////in(
        //////'WithoutBankPay'
        //////,'DevelopmentSurcharge'
        //////,'EnvironmentProtectionSurcharge'
        //////,'ExciseDuty'
        //////,'FineOrPenalty'
        //////,'HelthCareSurcharge'
        //////,'ICTDevelopmentSurcharge'
        //////,'InterestOnOveredSD'
        //////,'InterestOnOveredVAT'
        //////,'FinePenaltyForNonSubmissionOfReturn'
        //////)
        //////and d.DepositType not in('NotDeposited')
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////) AS dep
        //////
        //////";
        //////                    #endregion
        //////                }
        //////                else if (LineNo == 59)
        //////                {
        //////                    #region LineNo-59

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'59' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Total Deposit SD'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and d.post='Y'   
        //////and d.TransactionType in('SD') and DepositType NOT IN('ClosingBalanceSD(18.6)') and d.DepositType NOT IN('RequestedAmountForRefundSD')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 60)
        //////                {
        //////                    #region LineNo-60

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'60' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Excise Duty Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and d.post='Y'   
        //////and d.TransactionType in('ExciseDuty') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 61)
        //////                {
        //////                    #region LineNo-61

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'61' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Development Surcharge Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and d.post='Y'   
        //////and d.TransactionType in('DevelopmentSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 62)
        //////                {
        //////                    #region LineNo-62

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'62' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'ICT Development Surcharge Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and d.post='Y'   
        //////and d.TransactionType in('ICTDevelopmentSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 63)
        //////                {
        //////                    #region LineNo-63

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'63' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Health Care Surcharge Deposit'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and d.post='Y'   
        //////and d.TransactionType in('HelthCareSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 64)
        //////                {
        //////                    #region LineNo-64

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'64' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Environment Protection Surcharge Deposit'Remarks   
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, b.AccountNumber AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d 
        //////left outer join BankInformations b on d.BankID=b.BankID
        //////where  1=1 and d.post='Y'   
        //////and d.TransactionType in('EnvironmentProtectionSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion

        //////                }

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT9_1 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT9_1.Parameters.AddWithValue("@BranchId", BranchId);

        //////                if (!objCommVAT9_1.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT9_1.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT9_1);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        #endregion

        //////        #region VAT9.1 SubForms

        //////        //// LineNo=1,2,3,4,5,7
        //////        public DataTable VAT9_1_SubFormAPart3(string PeriodName, string ExportInBDT = "Y", int LineNo = 1, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////--------declare @BranchId int = 1
        //////
        //////
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 1)
        //////                {
        //////                    #region LineNo-1

        //////                    sqlText = sqlText + @" 
        //////
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, sal.SalesInvoiceNo DetailRemarks  from (
        //////SELECT 
        //////@UserName UserName,@Branch Branch,
        //////'1' NoteNo,'1' SubNoteNo,sid.CurrencyValue TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Export'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////from SalesInvoiceDetails sid
        //////
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('Export') 
        //////and sid.TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////union all
        //////SELECT 
        //////@UserName,@Branch,
        //////'1' NoteNo,'2' SubNoteNo,CurrencyValue,SDAmount,VATAmount,'SubForm-Ka'SubFormName
        //////,'Export'Remarks 
        //////,ItemNo
        //////,SalesInvoiceNo
        //////from BureauSalesInvoiceDetails where 1=1 and post='Y' and  Type in('Export') 
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 2)
        //////                {
        //////                    #region LineNo-2

        //////                    sqlText = sqlText + @" 
        //////
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, sal.SalesInvoiceNo DetailRemarks  from (
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'2' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('DeemExport')
        //////and sid.TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and sid.InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'2' NoteNo,'2' SubNoteNo, SubTotal,SDAmount,VATAmount,'SubForm-Ka'SubFormName
        //////,'DeemExport'Remarks
        //////,ItemNo
        //////,SalesInvoiceNo 
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('DeemExport')
        //////and TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) AS sal
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 3)
        //////                {
        //////                    #region LineNo-3

        //////                    sqlText = sqlText + @" 
        //////
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, sal.SalesInvoiceNo DetailRemarks  from (
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'3' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Non VAT'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('NonVAT')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'3' NoteNo,'2' SubNoteNo, SubTotal, SDAmount,VATAmount,'SubForm-Ka'SubFormName
        //////,'NonVAT'Remarks 
        //////,ItemNo
        //////,SalesInvoiceNo
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('NonVAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 4)
        //////                {
        //////                    #region LineNo-4

        //////                    sqlText = sqlText + @" 
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, sal.SalesInvoiceNo DetailRemarks  from (
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'4' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Standard VAT' Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and post='Y' 
        //////and Type in('VAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS'
        //////,'Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service','TollFinishIssue')
        //////and sid.InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'4' NoteNo,'2' SubNoteNo,SubTotal, SDAmount, VATAmount,'SubForm-Ka'SubFormName 
        //////,'Standard VAT'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('VAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////";
        //////                    #endregion
        //////                }
        //////                else if (LineNo == 5)
        //////                {
        //////                    #region LineNo-5

        //////                    sqlText = sqlText + @" 
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, sal.SalesInvoiceNo DetailRemarks  from (
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'5' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'MRP Rate'Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('MRPRate','MRPRate(SC)')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'5' NoteNo,'2' SubNoteNo, SubTotal, SDAmount, VATAmount,'SubForm-Ka'SubFormName 
        //////,'MRP Rate'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('MRPRate','MRPRate(SC)')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////";
        //////                    #endregion
        //////                }
        //////                ////else if (LineNo == 6)   {}////Not Used
        //////                else if (LineNo == 7)
        //////                {
        //////                    #region LineNo-7

        //////                    sqlText = sqlText + @" 
        //////
        //////
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, sal.SalesInvoiceNo DetailRemarks  from (
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'7' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Other Rate'Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('OtherRate')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'7' NoteNo,'2' SubNoteNo, SubTotal, SDAmount, VATAmount,'SubForm-Ka'SubFormName 
        //////,'Other Rate'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('OtherRate')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////";
        //////                    #endregion

        //////                }

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }

        //////                //////                sqlText = sqlText + @" 
        //////                //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////                //////order by sid.SalesInvoiceNo
        //////                //////";

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter

        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);


        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        //// LineNo=10,11,12,13,14,15,16,17,19,20,21,22
        //////        public DataTable VAT9_1_SubFormAPart4(string PeriodName, string ExportInBDT = "Y", int LineNo = 10, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction

        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @BranchId as int
        //////--------set @BranchId = 1
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////";
        //////                if (LineNo == 10)
        //////                {
        //////                    #region LineNo-10

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks from
        //////(
        //////select @UserName UserName,@Branch Branch,'10' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Non-VAT)'Remarks  
        //////,pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('NonVAT')
        //////and pid.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'10' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'Local Purchase (Non-VAT)'Remarks  
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('NonVAT')
        //////and pid.TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 11)
        //////                {
        //////                    #region LineNo-11

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'11' NoteNo,'1' SubNoteNo
        //////,(pid.SubTotal+pid.CDAmount+pid.RDAmount+pid.SDAmount+pid.TVBAmount) SubTotal
        //////,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Import Purchase (Non-VAT)'Remarks  
        //////, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode
        //////, pid.PurchaseInvoiceNo DetailRemarks
        //////from PurchaseInvoiceDetails pid 
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pid.ItemNo 
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and pid.Type in('NonVAT')
        //////and pid.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////order by pid.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 12)
        //////                {
        //////                    #region LineNo-12

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks from
        //////(
        //////select @UserName UserName,@Branch Branch,'12' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Exempted)'Remarks, 
        //////pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('Exempted')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'12' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'Local Purchase (Exempted)'Remarks
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y'
        //////and pid.Type in('Exempted')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 13)
        //////                {
        //////                    #region LineNo-13

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'13' NoteNo,'1' SubNoteNo
        //////,(pid.SubTotal+pid.CDAmount+pid.RDAmount+pid.SDAmount+pid.TVBAmount) TotalPrice
        //////,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Import Purchase (Exempted)'Remarks  
        //////, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode
        //////, pid.PurchaseInvoiceNo DetailRemarks 
        //////from PurchaseInvoiceDetails pid 
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pid.ItemNo 
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('Exempted')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////order by pid.PurchaseInvoiceNo
        //////";
        //////                    #endregion
        //////                }
        //////                else if (LineNo == 14)
        //////                {
        //////                    #region LineNo-14

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks  from
        //////(
        //////select @UserName UserName,@Branch Branch,'14' NoteNo,'1' SubNoteNo
        //////,pid.SubTotal TotalPrice
        //////,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Standard VAT)' Remarks, 
        //////pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('VAT')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService','TollReceive')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'14' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'Local Purchase (Standard VAT)'Remarks
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y'
        //////and Type in('VAT')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion
        //////                }
        //////                else if (LineNo == 15)
        //////                {
        //////                    #region LineNo-15

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'15' NoteNo,'1' SubNoteNo
        //////,(pid.SubTotal+pid.CDAmount+pid.RDAmount+pid.SDAmount+pid.TVBAmount) TotalPrice
        //////,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Import Purchase (Standard VAT)'Remarks  
        //////, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode
        //////, pid.PurchaseInvoiceNo DetailRemarks 
        //////from PurchaseInvoiceDetails pid 
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pid.ItemNo 
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('VAT')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////order by pid.PurchaseInvoiceNo
        //////
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 16)
        //////                {
        //////                    #region LineNo-16

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks  from
        //////(
        //////select @UserName UserName,@Branch Branch,'16' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Other Rate)'Remarks  
        //////,pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('OtherRate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'16' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'Local Purchase (Other Rate)'Remarks  
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('OtherRate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 17)
        //////                {
        //////                    #region LineNo-17

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'17' NoteNo,'1' SubNoteNo
        //////,(pid.SubTotal+pid.CDAmount+pid.RDAmount+pid.SDAmount+pid.TVBAmount) SubTotal
        //////,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Import Purchase (Other Rate)'Remarks  
        //////, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode
        //////, pid.PurchaseInvoiceNo DetailRemarks 
        //////from PurchaseInvoiceDetails pid 
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pid.ItemNo 
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('OtherRate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////order by pid.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 19)
        //////                {
        //////                    #region LineNo-19

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks  from
        //////(
        //////select @UserName UserName,@Branch Branch,'19' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Turnover)'Remarks 
        //////,pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('Turnover')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'19' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'Local Purchase (Turnover)'Remarks 
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('Turnover')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 20)
        //////                {
        //////                    #region LineNo-20

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks  from
        //////(
        //////select @UserName UserName,@Branch Branch,'20' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Un-Register Vendor)'Remarks  
        //////,pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('UnRegister')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////union all
        //////select @UserName,@Branch,'20' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'Local Purchase (Un-Register Vendor)'Remarks 
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('UnRegister')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 21)
        //////                {
        //////                    #region LineNo-21

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks  from
        //////(
        //////select @UserName UserName,@Branch Branch,'21' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Non-Rebate)'Remarks  
        //////,pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and post='Y' 
        //////and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'21' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount),'SubForm-Ka'SubFormName
        //////,'Local Purchase (Non-Rebate)'Remarks 
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and post='Y' 
        //////and Type in('NonRebate','Local-NonRebate','Import-NonRebate')
        //////and TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }
        //////                else if (LineNo == 22)
        //////                {
        //////                    #region LineNo-22

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'22' NoteNo,'1' SubNoteNo
        //////,(pid.SubTotal+pid.CDAmount+pid.RDAmount+pid.SDAmount+pid.TVBAmount) TotalPrice
        //////,pid.VATAmount,pid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Import Purchase (Non-Rebate)'Remarks  
        //////, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode
        //////, pid.PurchaseInvoiceNo DetailRemarks 
        //////from PurchaseInvoiceDetails pid 
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pid.ItemNo 
        //////
        //////where  1=1 
        //////and pid.post='Y' 
        //////and Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
        //////and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////order by pid.PurchaseInvoiceNo
        //////";
        //////                    #endregion

        //////                }

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }
        //////                #endregion

        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);


        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        public DataTable VAT9_1_SubFormBPart3(string PeriodName, string ExportInBDT = "Y", int LineNo = 8, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////--------declare @BranchId int = 1
        //////
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 8)
        //////                {
        //////                    sqlText = sqlText + @" 
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode
        //////,pc.CategoryName ProductCategory 
        //////, sal.SalesInvoiceNo DetailRemarks
        //////from (
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'8' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount,'SubForm-Ka'SubFormName
        //////,'Retail'Remarks 
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('Retail')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////
        //////select 
        //////@UserName,@Branch,
        //////'8' NoteNo,'2' SubNoteNo, SubTotal, SDAmount, VATAmount,'SubForm-Kha'SubFormName 
        //////,'Retail'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('Retail')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////LEFT OUTER JOIN ProductCategories pc ON pc.CategoryID = p.CategoryID 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////";
        //////                }
        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }

        //////                ////                sqlText = sqlText + @" 
        //////                ////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////                ////order by sid.SalesInvoiceNo
        //////                ////";

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter

        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);


        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        public DataTable VAT9_1_SubFormCPart3(string PeriodName, string ExportInBDT = "Y", int LineNo = 6, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////--------declare @BranchId int = 1
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 6)
        //////                {
        //////                    sqlText = sqlText + @" 
        //////
        //////select sal.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, sal.SalesInvoiceNo DetailRemarks  from (
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'6' NoteNo,'1' SubNoteNo,sid.SubTotal TotalPrice,sid.VATAmount,sid.SDAmount
        //////,sid.UOM
        //////,sid.Quantity
        //////,'SubForm-Ka'SubFormName
        //////,'Tarrif'Remarks
        //////,sid.ItemNo
        //////,sid.SalesInvoiceNo
        //////
        //////from SalesInvoiceDetails sid
        //////where 1=1 
        //////and sid.post='Y' 
        //////and sid.Type in('FixedVAT')
        //////and sid.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND sid.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'6' NoteNo,'2' SubNoteNo, SubTotal, VATAmount, SDAmount
        //////,UOM
        //////,Quantity
        //////
        //////,'SubForm-Ga'SubFormName 
        //////,'Tarrif'Remarks  
        //////,ItemNo
        //////,SalesInvoiceNo
        //////from BureauSalesInvoiceDetails where  1=1 and post='Y' and Type in('FixedVAT')
        //////and TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //////and InvoiceDateTime >= @Datefrom and InvoiceDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS sal
        //////
        //////LEFT OUTER JOIN Products p ON p.ItemNo = sal.ItemNo 
        //////ORDER BY sal.SalesInvoiceNo DESC
        //////";
        //////                }

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }
        //////                //////                sqlText = sqlText + @" 
        //////                //////and sid.InvoiceDateTime >= @Datefrom and sid.InvoiceDateTime <dateadd(d,1,@Dateto)
        //////                //////order by sid.SalesInvoiceNo
        //////                //////";

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);

        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        public DataTable VAT9_1_SubFormCPart4(string PeriodName, string ExportInBDT = "Y", int LineNo = 18, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////--------declare @BranchId int = 1
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 18)
        //////                {
        //////                    #region LineNo-18

        //////                    sqlText = sqlText + @" 
        //////select pur.*, p.ProductDescription, p.ProductName, p.HSCodeNo ProductCode, pur.PurchaseInvoiceNo DetailRemarks from
        //////(
        //////select @UserName UserName,@Branch Branch,'18' NoteNo,'1' SubNoteNo,pid.SubTotal TotalPrice,pid.VATAmount,pid.SDAmount
        //////,pid.UOM,pid.Quantity
        //////,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Fixed VAT)'Remarks  
        //////,pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid
        //////where  1=1 and pid.post='Y' 
        //////and pid.Type in('FixedVAT')
        //////and pid.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS','InputService')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////union all
        //////select @UserName,@Branch,'18' NoteNo,'2' SubNoteNo,-1*(pid.SubTotal),1*(pid.VATAmount),1*(pid.SDAmount)
        //////,pid.UOM,pid.Quantity
        //////,'SubForm-Ka'SubFormName
        //////,'Local Purchase (Fixed VAT)'Remarks  
        //////, pid.PurchaseInvoiceNo,pid.ItemNo
        //////from PurchaseInvoiceDetails pid 
        //////where  1=1 and pid.post='Y' 
        //////and pid.Type in('FixedVAT')
        //////and pid.TransactionType in('PurchaseDN','PurchaseReturn')
        //////and pid.ReceiveDate >= @Datefrom and pid.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND pid.BranchId=@BranchId
        //////
        //////) as pur
        //////LEFT OUTER JOIN Products p ON p.ItemNo = pur.ItemNo 
        //////order by pur.PurchaseInvoiceNo
        //////";
        //////                    #endregion
        //////                }

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }


        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT19 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT19.Parameters.AddWithValue("@BranchId", BranchId);


        //////                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        public DataTable VAT9_1_SubFormDPart5(string PeriodName, string ExportInBDT = "Y", int LineNo = 24, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////--------declare @BranchId int = 1
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////declare @SettingValue VARCHAR (200);
        //////select @SettingValue=SettingValue from Settings WHERE 1=1 AND SettingGroup = 'OperationalCode' AND SettingName='TotalDepositVAT'
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 24)
        //////                {
        //////                    #region LineNo-24

        //////                    sqlText = sqlText + @" 
        //////select  @UserName UserName,@Branch Branch,'24' NoteNo,'1' SubNoteNo, BillDeductAmount ,0 VATAmount,0 SDAmount,'SubForm-Gha'SubFormName
        //////,'Purcshase VDS'Remarks  
        //////,v.VendorName
        //////,v.VATRegistrationNo VendorBIN
        //////,v.Address1 VendorAddress
        //////,vds.BillAmount TotalPrice
        //////,ISNULL(vds.BillDeductAmount,0) VDSAmount
        //////,pih.BENumber InvoiceNo
        //////,pih.InvoiceDateTime InvoiceDate
        //////
        //////,dep.DepositId VDSCertificateNo
        //////,dep.DepositDateTime  VDSCertificateDate
        //////,bk.AccountNumber AccountCode
        //////,dep.TreasuryNo TaxDepositSerialNo
        //////,dep.BankDepositDate TaxDepositDate
        //////,vds.VDSId DetailRemarks
        //////
        //////from VDS
        //////LEFT OUTER JOIN Vendors v ON vds.VendorId = v.VendorID 
        //////LEFT OUTER JOIN PurchaseInvoiceHeaders pih ON vds.PurchaseNumber=pih.PurchaseInvoiceNo
        //////LEFT OUTER JOIN Deposits dep on vds.VDSId=dep.DepositId
        //////left outer join BankInformations bk on dep.BankID =bk.BankID
        //////
        //////where  1=1 and vds.post='Y'   
        //////and vds.IsPurchase in('Y')
        //////and vds.DepositDate >= @Datefrom and vds.DepositDate <dateadd(d,1,@Dateto)
        //////AND VDS.BranchId=@BranchId
        //////";
        //////                    #endregion
        //////                }

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT9_1 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT9_1.Parameters.AddWithValue("@BranchId", BranchId);

        //////                if (!objCommVAT9_1.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT9_1.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT9_1);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        public DataTable VAT9_1_SubFormEPart6(string PeriodName, string ExportInBDT = "Y", int LineNo = 29, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 29)
        //////                {
        //////                    #region LineNo-29

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'29' NoteNo,'1' SubNoteNo, BillDeductAmount,0 VATAmount,0 SDAmount,'SubForm-Umo'SubFormName
        //////
        //////,'Sale VDS'Remarks  
        //////,c.CustomerName
        //////,c.VATRegistrationNo CustomerBIN
        //////,c.Address1 CustomerAddress
        //////,vds.BillAmount TotalPrice
        //////,vds.BillDeductAmount VDSAmount
        //////,vds.PurchaseNumber 
        //////,sih.SalesInvoiceNo InvoiceNo
        //////,sih.InvoiceDateTime InvoiceDate
        //////,dep.TreasuryNo VDSCertificateNo 
        //////,dep.BankDepositDate VDSCertificateDate 
        //////,dep.ChequeNo AccountCode
        //////,dep.ChequeBank SerialNo
        //////,dep.ChequeDate TaxDepositDate
        //////--,(select SettingValue from Settings WHERE 1=1 AND SettingGroup = 'OperationalCode' AND SettingName='TotalDepositVAT') AccountCode
        //////,vds.VDSId DetailRemarks
        //////
        //////FROM VDS 
        //////LEFT OUTER JOIN Customers c ON vds.VendorId = c.CustomerID 
        //////LEFT OUTER JOIN SalesInvoiceHeaders sih ON vds.PurchaseNumber=sih.SalesInvoiceNo
        //////LEFT OUTER JOIN Deposits dep on vds.VDSId=dep.DepositId
        //////where  1=1 
        //////and vds.post='Y'   
        //////and vds.IsPurchase in('N' )
        //////and vds.DepositDate >= @Datefrom and vds.DepositDate <dateadd(d,1,@Dateto)
        //////AND VDS.BranchId=@BranchId
        //////
        //////";
        //////                    #endregion
        //////                }
        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }


        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT9_1 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT9_1.Parameters.AddWithValue("@BranchId", BranchId);

        //////                if (!objCommVAT9_1.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT9_1.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT9_1);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        public DataTable VAT9_1_SubFormFPart6(string PeriodName, string ExportInBDT = "Y", int LineNo = 30, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////--------declare @BranchId int = 1
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 30)
        //////                {
        //////                    #region LineNo-30

        //////                    sqlText = sqlText + @" 
        //////declare @ATVRebate as varchar(100)
        //////select @ATVRebate=settingValue  FROM Settings where SettingGroup='ImportPurchase' and SettingName='ATVRebate';
        //////
        //////
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'30' NoteNo,'1' SubNoteNo
        //////,case when @ATVRebate='Y' then pid.ATVAmount  else 0 end ATAmount,0,0,'SubForm-Cha'SubFormName
        //////,'Purchase AT'Remarks 
        //////,ph.InvoiceDateTime Date, ph.CustomHouse, ph.BENumber
        //////,pid.PurchaseInvoiceNo DetailRemarks
        //////from PurchaseInvoiceDetails pid
        //////LEFT OUTER JOIN PurchaseInvoiceHeaders ph ON pid.PurchaseInvoiceNo = ph.PurchaseInvoiceNo
        //////where  1=1 and pid.post='Y'  
        //////and pid.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //////and ph.ReceiveDate >= @Datefrom and ph.ReceiveDate <dateadd(d,1,@Dateto)
        //////AND ph.BranchId=@BranchId
        //////
        //////";
        //////                    #endregion
        //////                }
        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT9_1 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT9_1.Parameters.AddWithValue("@BranchId", BranchId);

        //////                if (!objCommVAT9_1.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT9_1.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT9_1);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        //// LineNo=52,53,54,55,56,57,58,59,60,61
        //////        public DataTable VAT9_1_SubFormGPart8(string PeriodName, string ExportInBDT = "Y", int LineNo = 52, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //////        {
        //////            // LineNo=52,53,54,55,56,57,58,59,60,61
        //////            #region Variables

        //////            SqlConnection currConn = null;
        //////            string sqlText = "";
        //////            DataTable dt = new DataTable();

        //////            #endregion

        //////            #region Try

        //////            try
        //////            {
        //////                #region open connection and transaction

        //////                currConn = _dbsqlConnection.GetConnection(connVM);
        //////                if (currConn.State != ConnectionState.Open)
        //////                {
        //////                    currConn.Open();
        //////                }

        //////                #endregion open connection and transaction


        //////                CommonDAL commonDal = new CommonDAL();

        //////                #region Statement

        //////                sqlText = @" ";


        //////                sqlText = @" 
        //////declare @UserName as varchar(100);
        //////declare @Branch as varchar(100);
        //////
        //////--------declare @periodName VARCHAR (200);
        //////--------declare @ExportInBDT VARCHAR (200);
        //////declare @DateFrom [datetime];
        //////declare @DateTo [datetime];
        //////declare @MLock varchar(1);
        //////
        //////--------SET @periodName='July-2019';
        //////--------SET @ExportInBDT='Y'
        //////--------declare @BranchId int = 1
        //////set @UserName ='admin'
        //////set @Branch ='HO_DB'
        //////
        //////select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;
        //////
        //////
        //////
        //////
        //////";
        //////                if (LineNo == 52)
        //////                {
        //////                    #region LineNo-52

        //////                    sqlText = sqlText + @" 
        //////select dep.*, dep.DepositId DetailRemarks  from (
        //////
        //////select 
        //////@UserName UserName,@Branch Branch,
        //////'52' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Total Deposit VAT'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId
        //////
        //////from Deposits d where  1=1 and post='Y'   
        //////and d.TransactionType in('Treasury')
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////union all
        //////select 
        //////@UserName,@Branch,
        //////'52' NoteNo,'2' SubNoteNo, DepositAmount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Total Deposit VAT'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId
        //////
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('VDS') AND DepositType not in('NotDeposited')
        //////and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)
        //////AND BranchId=@BranchId
        //////
        //////
        //////) AS dep
        //////
        //////";
        //////                    #endregion
        //////                }
        //////                else if (LineNo == 53)
        //////                {
        //////                    #region LineNo-53

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'53' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Total Deposit SD'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('SD')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 54)
        //////                {
        //////                    #region LineNo-54

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'54' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Interest On Overed VAT Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredVAT') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 55)
        //////                {
        //////                    #region LineNo-55

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'55' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Interest On Overed SD Deposit'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('InterestOnOveredSD') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 56)
        //////                {
        //////                    #region LineNo-56

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'56' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Fine Or Penalty Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('FineOrPenalty') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 57)
        //////                {
        //////                    #region LineNo-57

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'57' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Excise Duty Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('ExciseDuty') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 58)
        //////                {
        //////                    #region LineNo-58

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'58' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Development Surcharge Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('DevelopmentSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 59)
        //////                {
        //////                    #region LineNo-59

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'59' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'ICT Development Surcharge Deposit'Remarks 
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('ICTDevelopmentSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 60)
        //////                {
        //////                    #region LineNo-60

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'60' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Health Care Surcharge Deposit'Remarks  
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('HelthCareSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion
        //////                }
        //////                else if (LineNo == 61)
        //////                {
        //////                    #region LineNo-61

        //////                    sqlText = sqlText + @" 
        //////select @UserName UserName,@Branch Branch,'61' NoteNo,'1' SubNoteNo,d.DepositAmount Amount,0 VATAmount,0 SDAmount,'SubForm-Chha'SubFormName
        //////,'Environment Protection Surcharge Deposit'Remarks   
        //////, d.TreasuryNo ChallanNumber, d.ChequeBank BankName, d.ChequeBankBranch BankBranch, d.ChequeDate Date, d.ChequeNo AccountCode
        //////, d.DepositId DetailRemarks
        //////from Deposits d where  1=1 and post='Y'   
        //////and TransactionType in('EnvironmentProtectionSurcharge') and d.DepositType not in('NotDeposited')
        //////AND d.BranchId=@BranchId
        //////
        //////";
        //////                    sqlText = sqlText + @" and d.DepositDateTime >= @Datefrom and d.DepositDateTime <dateadd(d,1,@Dateto)";

        //////                    #endregion

        //////                }

        //////                if (BranchId == 0)
        //////                {
        //////                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //////                }

        //////                #endregion


        //////                #region SQL Command

        //////                SqlCommand objCommVAT9_1 = new SqlCommand(sqlText, currConn);

        //////                #endregion

        //////                #region Parameter
        //////                objCommVAT9_1.Parameters.AddWithValue("@BranchId", BranchId);

        //////                if (!objCommVAT9_1.Parameters.Contains("@PeriodName"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@PeriodName", PeriodName);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@PeriodName"].Value = PeriodName;
        //////                }


        //////                if (!objCommVAT9_1.Parameters.Contains("@ExportInBDT"))
        //////                {
        //////                    objCommVAT9_1.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
        //////                }
        //////                else
        //////                {
        //////                    objCommVAT9_1.Parameters["@ExportInBDT"].Value = ExportInBDT;
        //////                }

        //////                #endregion Parameter

        //////                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT9_1);
        //////                dataAdapter.Fill(dt);

        //////            }
        //////            #endregion

        //////            #region Catch & Finally

        //////            catch (SqlException sqlex)
        //////            {
        //////                throw sqlex;
        //////            }
        //////            catch (Exception ex)
        //////            {
        //////                throw ex;
        //////            }
        //////            finally
        //////            {

        //////                if (currConn.State == ConnectionState.Open)
        //////                {
        //////                    currConn.Close();
        //////                }

        //////            }

        //////            #endregion

        //////            return dt;
        //////        }

        //////        #endregion

        #endregion

        #region Comments - April-28-2020

        public DataSet VAT6_2_1Backup28042020(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT6_2_1");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction


                #region SQL Statement

                #region SQLText

                sqlText = @"";


                sqlText = @"



--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--DECLARE @ItemNo VARCHAR(200);

--SET @Itemno=559;
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='01/09/2013';
--SET @EndDate='06/09/2023';


declare @Present DECIMAL(25, 9);
CREATE TABLE #VAT_Ka(	[SerialNo] [int] IDENTITY(1,1) NOT NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL)

CREATE TABLE #VATTemp_Ka(	[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL) 

---- start purchase---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.subtotal+pd.SDAmount,pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')

 insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)+isnull(pd.SDAmount,0)),pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')

 
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,-1*(pd.subtotal+pd.SDAmount),-1*pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseReturn','PurchaseDN')
 
 
---- end purchase---

-------- Start Sale---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, SubTotal,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Sale'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
 
 

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo,- SubTotal,-( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )Quantity,-VATAmount,-SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')
 
------ end Sale---


SELECT @Present= COUNT(itemno) FROM #VATTemp_Ka
where  ItemNo=@ItemNo
--IF (@Present =0)
--BEGIN
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
 VALUES(@StartDate,@StartDate,0,'Opening',0,@ItemNo,0,0,0,0,'Opening')			    
--END

insert into #VAT_Ka(ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks)
select @ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks
from #VATTemp_Ka
where  #VATTemp_Ka.ItemNo=@ItemNo
order by dailydate

------- Starting Qty
SET ROWCOUNT 1

update #VAT_Ka set 
StartingQuantity=isnull(Products.OpeningBalance,0)

+isnull(Purchase.PurchaseQuantity,0)+isnull(PurchaseI.PurchaseQuantity,0)-isnull(PurchaseR.PurchaseQuantity,0)
-isnull(sale.SaleQuantity ,0) +isnull(saleC.SaleQuantity ,0)
,StartingAmount=(isnull(Products.CostPrice,0)*isnull(Products.OpeningBalance,0))

+isnull(Purchase.PurchaseAmount,0)+isnull(PurchaseI.PurchaseAmount,0)-isnull(PurchaseR.PurchaseAmount,0)

-isnull(sale.SaleAmount,0) +isnull(saleC.SaleAmount,0)

from Products 
----------Purchase Start --------
left outer join
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount 
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) Purchase on Products.ItemNo=Purchase.itemno 

left outer join
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)+isnull(SDAmount,0)))PurchaseAmount 
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) PurchaseI on Products.ItemNo=PurchaseI.itemno 

left outer JOIN
(select ItemNo,-1*SUM(UOMQty)PurchaseQuantity,
-1*SUM(isnull(SubTotal,0))PurchaseAmount
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('PurchaseReturn','PurchaseDN') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) PurchaseR on Products.ItemNo=PurchaseR.itemno 

----------Purchase End --------

----------Sale Start --------

left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('Other','RawSale','Debit','PackageSale','Wastage','CommercialImporter','ServiceNS','Export','ExportServiceNS','ExportTender','Tender','ExportPackage','Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService')
group by ItemNo
) Sale on Products.ItemNo=Sale.ItemNo  left outer JOIN

 

(select distinct ItemNo, SUM( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails  LEFT OUTER JOIN
SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
where SalesInvoiceDetails.InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo 
AND (UOMQty>0)

AND (SalesInvoiceDetails.Post =@post1 or SalesInvoiceDetails.Post= @post2)
AND sih.TransactionType IN('Credit')
group by ItemNo
) SaleC on Products.ItemNo=SaleC.ItemNo 
where Products.ItemNo=@ItemNo

----------Sale End --------

SET ROWCOUNT 0
------- Starting Qty end

update #VAT_Ka set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='Purchase'

update #VAT_Ka set 
VendorID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='sale'

select #VAT_Ka.VendorID, #VAT_Ka.SerialNo,convert (varchar,#VAT_Ka.StartDateTime,120)StartDateTime,
#VAT_Ka.StartingQuantity,#VAT_Ka.StartingAmount
,TransID,#VAT_Ka.TransType,
case when #VAT_Ka.TransType='purchase' then isnull(v.VendorName,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.CustomerName,'-') 
else '-' end as VendorName

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address1,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address1,'-') 
else '-' end as Address1

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address2,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address2,'-') 
else '-' end as Address2

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address3,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address3,'-') 
else '-' end as Address3

,case when #VAT_Ka.TransType='purchase' then isnull(v.VATRegistrationNo,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.VATRegistrationNo,'-') 
else '-' end as VATRegistrationNo

--,isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
--isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
--isnull(v.VATRegistrationNo,'-')VATRegistrationNo,

--isnull(c.CustomerName,'-')CustomerName,isnull(c.Address1,'-')CustAddress1,
--isnull(c.Address2,'-')CustAddress2,isnull(c.Address3,'-')CustAddress3,
--isnull(c.VATRegistrationNo,'-')CustVATRegistrationNo,

,p.ProductName,#VAT_Ka.Quantity,#VAT_Ka.VATRate,#VAT_Ka.SD,#VAT_Ka.UnitCost,p.HSCodeNo,#VAT_Ka.BENumber,#VAT_Ka.InvoiceDateTime,#VAT_Ka.Remarks
from #VAT_Ka left outer join
Vendors as V on #VAT_Ka.VendorID=v.VendorID and #VAT_Ka.TransType='purchase' left outer join 
Customers as C on #VAT_Ka.VendorID=c.CustomerID and #VAT_Ka.TransType='sale' left outer join 
Products P on #VAT_Ka.ItemNo=p.ItemNo
where  #VAT_Ka.ItemNo=@ItemNo
order by #VAT_Ka.SerialNo

DROP TABLE #VAT_Ka
DROP TABLE #VATTemp_Ka


";

                #endregion



                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn);

                #endregion

                #region Parameter

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 01

        public DataTable MIS19(string StartDate, string EndDate, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataTable dataSet = new DataTable("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                #region StartSQL
                sqlText = @"
declare @DateFrom [datetime];
declare @DateTo [datetime];
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);
DECLARE @ProcessTime varchar(50)
";
                sqlText += @" set @DateFrom=@StartDate";
                sqlText += @"  set @DateTo=@EndDate";

                sqlText += @"

set @ProcessTime='01012016'
delete from mis19
insert into mis19(ProcessTime) select  @ProcessTime

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
-------------- 2 --------- start
 
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

 
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT       isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT       isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(ATVAmount),0),0,
0,'12','4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)

------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Treasury-Opening)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Treasury-Opening-Credit)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
------

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----

------------ Previous Purchase ----------------

---- 71 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'71','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'71','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 
 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'71','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate < @Datefrom  
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'71','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate< @Datefrom  
AND PIH.TransactionType IN('VAT27')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'71','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'81','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'81','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate < @Datefrom  
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'81','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate< @Datefrom    
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'101','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'101','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom and  Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'101','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'101','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'101','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'101','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'101','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and  Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')
 ----------- Previous Purchase------------

UPDATE mis19 SET  One='NA', Two='NA' , Three=0 


UPDATE mis19 SET  FourA =  isnull(FourA.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(16) and SubLineNumber in(1) ) AS FourA

UPDATE mis19 SET  FourB =  isnull(FourB.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(16) and SubLineNumber in(2,3) ) AS FourB

UPDATE mis19 SET  FourC =  isnull(FourC.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(16) and SubLineNumber in(4) ) AS FourC

UPDATE mis19 SET  FourD=FourA+FourB+FourC 
UPDATE mis19 SET  Five=0,Six=0 


UPDATE mis19 SET  SevenA =  isnull(SevenA.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(1,2,3)  ) AS SevenA

UPDATE mis19 SET  SevenB =  isnull(SevenB.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(5)  ) AS SevenB

UPDATE mis19 SET  SevenC =  isnull(SevenC.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(1,2,3)   ) AS SevenC
UPDATE mis19 SET  SevenD=SevenA+SevenB+SevenC 

UPDATE mis19 SET  EightA =  isnull(EightA.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(13)   and SubLineNumber not in(13,14,15,16,17)    ) AS EightA

UPDATE mis19 SET  EightB =  isnull(EightB.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(13)   and SubLineNumber in(13,14,15,16,17)   ) AS EightB

UPDATE mis19 SET  EightD = EightB+  isnull(EightD.A,0)
 FROM (

 select isnull(SUM(dd.A),0) A from(
SELECT -isnull(SUM(B),0) A FROM  #VAT19BreakDown
WHERE LineNumber in(1)   
union all
SELECT isnull(SUM(A),0) A FROM  #VAT19BreakDown
WHERE LineNumber in(16)     and SubLineNumber in(4)  
  ) as dd

) AS EightD



UPDATE mis19 SET  EightC =    isnull(EightC.A,0)-isnull(EightD,0)
 FROM (
 SELECT isnull(SUM(A),0) A FROM  #VAT19BreakDown
WHERE LineNumber in(17)    
) AS EightC

--UPDATE mis19 SET  EightB =  isnull(EightB.A,0)
 --FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
--WHERE LineNumber in(17)   ) AS EightB



--UPDATE mis19 SET  EightC=0, EightD=0 

UPDATE mis19 SET  Nine =  isnull(Nine.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(71,81,91,101)   ) AS Nine

UPDATE mis19 SET  Ten =  isnull(Ten.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(7,8,9,10)   ) AS Ten

UPDATE mis19 SET  Eleven=Nine+Ten


 UPDATE mis19 SET  Twelve =  isnull(Twelve.B,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(7,8,9,10)   ) AS Twelve

UPDATE mis19 SET  Thirteen =  isnull(Thirteen.SubTotal,0)
 FROM (
select   sum(SubTotal)SubTotal from(
select  p.ItemNo,OpeningBalance Quantity, p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
and p.OpeningDate <@Datefrom 
union all
select distinct rd.ItemNo,sum(isnull(rd.Quantity,0))Quantity,sum(isnull(rd.SubTotal,0))SubTotal  from ReceiveDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.ReceiveDateTime <@Datefrom 
group by rd.ItemNo
) as a
)  as Thirteen

UPDATE mis19 SET  Fourteen =  isnull(Fourteen.SubTotal,0)
 FROM (
select   sum(SubTotal)SubTotal from(
select    p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
and p.OpeningDate >= @Datefrom and OpeningDate <dateadd(d,1,@Dateto)
union all
select sum(isnull(rd.SubTotal,0))SubTotal  from ReceiveDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.ReceiveDateTime >= @Datefrom and ReceiveDateTime <dateadd(d,1,@Dateto)
) as a
)  as Fourteen


 UPDATE mis19 SET  Fifteen =  isnull(Fifteen.SubTotal,0)
 FROM (
 select   sum(SubTotal)SubTotal from(
select  p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Raw','Pack' )
and p.OpeningDate <dateadd(d,1,@Dateto)
union all
select  sum(isnull(rd.SubTotal,0))SubTotal  from PurchaseInvoiceDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Raw','Pack' )
  and rd.InvoiceDateTime <dateadd(d,1,@Dateto)
union all
select  -sum(isnull(rd.SubTotal,0))SubTotal  from IssueDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Raw','Pack' )
  and rd.IssueDateTime <dateadd(d,1,@Dateto)
) as a
 )  as Fifteen
 
UPDATE mis19 SET  Sixteen =  isnull(Sixteen.SubTotal,0)
 FROM (
 select   sum(SubTotal)SubTotal from(
select  p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
and p.OpeningDate <dateadd(d,1,@Dateto)
union all
select  sum(isnull(rd.SubTotal,0))SubTotal  from ReceiveDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.ReceiveDateTime <dateadd(d,1,@Dateto)
union all
select  -sum(isnull(rd.SubTotal,0))SubTotal  from SalesInvoiceDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.InvoiceDateTime <dateadd(d,1,@Dateto)
) as a
 )  as Sixteen

UPDATE mis19 SET  Seventeen =  isnull(Seventeen.A,0)
FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(2)   ) AS Seventeen
 

UPDATE mis19 SET  Eighteen='NA'


select * from mis19
 

 --SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown

 
";
                #endregion StartSQL

                SqlCommand objReport = new SqlCommand();
                objReport.Connection = currConn;

                objReport.CommandText = sqlText;
                objReport.CommandType = CommandType.Text;
                if (!objReport.Parameters.Contains("@StartDate"))
                {
                    objReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objReport.Parameters["@StartDate"].Value = StartDate;
                }
                if (!objReport.Parameters.Contains("@EndDate"))
                {
                    objReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objReport.Parameters["@EndDate"].Value = EndDate;
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objReport);
                dataAdapter.Fill(dataSet);

                #endregion

            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MIS19", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MIS19", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT11ReportCommercialImporterNew(string SalesInvoiceNo, string Post1, string Post2, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                sqlText = @"

 --declare @SalesInvoiceNo as varchar(100)
--set @SalesInvoiceNo='STP-0001/0918'

declare @ATVRate as decimal(18,3)
declare @WareHouseRentPerQuantity as decimal(18,3)
select @WareHouseRentPerQuantity=SettingValue from Settings where SettingGroup='Sale' and SettingName='WareHouseRentPerQuantity'
select @ATVRate=SettingValue from Settings where SettingGroup='Sale' and SettingName='ATVRate'
  
SELECT    
SIH.SalesInvoiceNo SalesInvoiceNo, 
isnull(SID.TradeVATAmount,0)+isnull(PST.TradeVATableValue,0)TotalValue,
isnull(SID.WareHouseRent,0)WareHouseRent,
isnull(SID.WareHouseVAT,0)WareHouseVAT,
isnull(PST.TradeVATableValue,0)ATVablePrice,
isnull(PST.TradeVATAmount,0)ATVAmount,
isnull(SID.IsCommercialImporter,0)IsCommercialImporter,
convert (varchar,SIH.InvoiceDateTime,120) InvoiceDate,
isnull(C.CustomerName,'N/A')CustomerName,
isnull(c.Address1,'N/A')Address1
,isnull(C.CustomerName,'N/A')Address2
,isnull(c.Address3,'N/A')Address3,
isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1
,isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2
,isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
isnull(v.VehicleType,'N/A')VehicleType,isnull(v.VehicleNo,'N/A')VehicleNo,
isnull(P.ProductCode,'N/A')+'~'+isnull(P.ProductName,'N/A') ProductName ,
isnull(PC.CategoryName,'N/A')ProductDescription ,
isnull(PC.CategoryName,'N/A')  ProductGroup,
isnull(SID.UOM,'N/A')UOM,
isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
isnull(SID.VATRate,0)VATRate,
isnull(PST.VATableValue,0)SubTotal,
isnull(PST.VATAmount,0)VATAmount,
isnull(SID.SD,0)SD,
0 SDAmount,
isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
SIH.Comments  AS Comments , 
isnull(SID.Weight,'')Weight, 
convert (varchar(30),SIH.LCDate,105) LCDate,
Isnull(SIH.LCNumber,'-') LCNumber,
isnull(SIH.LCBank,'N/A')LCBank,
'-'SerialNo,
isnull(SIH.SaleType,'N/A')SaleType,
isnull(SIH.PreviousSalesInvoiceNo,'N/A')PreviousSalesInvoiceNo,
isnull(SIH.TransactionType,'N/A')TransactionType,
isnull(SIH.SignatoryName,'N/A')SignatoryName,
isnull(SIH.SignatoryDesig,'N/A')SignatoryDesig,
isnull(SIH.CurrencyID,0)CurrencyID,
isnull(SIH.CurrencyRateFromBDT,0)CurrencyRateFromBDT,
isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))DeliveryDate,                                
--, 0 Subtotal
0 WareHouseRentPerQuantity
,0 ATVRate
,isnull(PST.BENumber,'N/A')+'~'+CONVERT(varchar, isnull(PIH.InvoiceDateTime,'01/01/1900'),3) BENumber

,isnull(PST.CustomHouse,'N/A')CustomHouse
,isnull(SID.NBRPrice,0)UnitCost
,isnull(PST.Qty,0)Quantity 

FROM  (select distinct SalesInvoiceNo,PurchaseInvoiceNo,PurchaseInvoiceDateTime,ReceiveDate,BENumber,CustomHouse, itemNo
,count(ItemNo)Qty 
,sum(VATableValue)VATableValue
,sum(VATAmount)VATAmount
,sum(TradeVATableValue)TradeVATableValue
,sum(TradeVATAmount)TradeVATAmount
,sum(TotalValue)TotalValue
 
from PurchaseSaleTrackings
where SalesInvoiceNo=@SalesInvoiceNo
group by SalesInvoiceNo,PurchaseInvoiceNo,PurchaseInvoiceDateTime,ReceiveDate,BENumber,CustomHouse,itemNo
) AS PST
LEFT OUTER JOIN dbo.SalesInvoiceDetails AS SID ON SID.SalesInvoiceNo = PST.SalesInvoiceNo and  SID.ItemNo=pst.ItemNo
LEFT OUTER JOIN dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo 
LEFT OUTER JOIN dbo.PurchaseInvoiceHeaders AS PIH ON PIH.PurchaseInvoiceNo = PST.PurchaseInvoiceNo 
LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

WHERE
(SIH.SalesInvoiceNo = @SalesInvoiceNo )
    AND (SIH.Post =@Post1 or SIH.Post= @Post2)

and (SID.Quantity>0)
order by ProductName,BENumber,CustomHouse
  
 ";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                //SqlCommand objCommSaleReport = new SqlCommand();
                //objCommSaleReport.Connection = currConn;
                //objCommSaleReport.CommandText = sqlText;
                //objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }
                //if (!objCommSaleReport.Parameters.Contains("@DbName"))
                //{
                //    objCommSaleReport.Parameters.AddWithValue("@DbName", dbName);
                //}
                //else
                //{
                //    objCommSaleReport.Parameters["@DbName"].Value = dbName;
                //}
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT11ReportCommercialImporterNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT11ReportCommercialImporterNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT11ReportCommercialImporterNewTemp(string SalesInvoiceNo, string Post1, string Post2, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                sqlText = @"

                --declare @SalesInvoiceNo as varchar(100)
                --set @SalesInvoiceNo='STP-0001/0918'
 
                select distinct SalesInvoiceNo,PurchaseInvoiceNo,PurchaseInvoiceDateTime,ReceiveDate,BENumber,CustomHouse, itemNo,count(ItemNo)Qty from PurchaseSaleTrackingTemps
                where SalesInvoiceNo=@SalesInvoiceNo
                group by SalesInvoiceNo,PurchaseInvoiceNo,PurchaseInvoiceDateTime,ReceiveDate,BENumber,CustomHouse,itemNo
  
                ";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT11ReportCommercialImporterNewTemp", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT11ReportCommercialImporterNewTemp", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SaleTrackingReport(string SalesInvoiceNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;

            if (SalesInvoiceNo.Contains("'"))
            {
                SalesInvoiceNo = SalesInvoiceNo.Replace("'", "");
            }
            DataSet dataSet = new DataSet("VAT11Report");

            #endregion
            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region Statement
                string sqlText = "";
                sqlText = @"
                        SELECT SID.SalesInvoiceNo SalesInvoiceNo, 
                        SID.ItemNo ItemNo,
                        T.Heading1 Heading1,
                        T.Heading2 Heading2
                        ,P.ProductName
                        From SalesInvoiceDetails AS SID Inner JOIN Trackings T ON T.SaleInvoiceNo = SID.SalesInvoiceNo
                        AND T.FinishItemNo=SID.ItemNo
                        Left outer join Products P ON P.ItemNo=SID.ItemNo
                        
                        where SID.SalesInvoiceNo = @SalesInvoiceNo
                        ";
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion

            }

            #endregion
            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleTrackingReport", sqlex.ToString());

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleTrackingReport", ex.ToString());

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet TransferTrackingReport(string TransferIssueNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;

            if (TransferIssueNo.Contains("'"))
            {
                TransferIssueNo = TransferIssueNo.Replace("'", "");
            }
            DataSet dataSet = new DataSet("VAT11Report");

            #endregion
            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region Statement
                string sqlText = "";
                sqlText = @"
                         SELECT 
                        TID.TransferIssueNo TransferIssueNo, 
                        TID.ItemNo ItemNo,
                        TT.Heading1 Heading1,
                        TT.Heading2 Heading2
                        ,P.ProductName
                        From TransferIssueDetails AS TID Inner JOIN TransferIssueTrackings TT ON TT.TransferIssueNo = TID.TransferIssueNo
                        AND TT.FinishItemNo=TID.ItemNo
                        Left outer join Products P ON P.ItemNo=TID.ItemNo
                        
                        where TID.TransferIssueNo = @TransferIssueNo
                        ";
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@TransferIssueNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@TransferIssueNo", TransferIssueNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@TransferIssueNo"].Value = TransferIssueNo;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion

            }

            #endregion
            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TransferTrackingReport", sqlex.ToString());

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TransferTrackingReport", ex.ToString());

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT20ReportNew(string SalesInvoiceNo, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT20Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"  SELECT  distinct   
     --SIH.SalesInvoiceNo SalesInvoiceNo, 
     --convert (varchar(200),SIH.InvoiceDateTime,120)InvoiceDate,
    isnull(C.CustomerName,'N/A')CustomerName,
    isnull(P.ProductName,'N/A')ProductName ,
    isnull(P.HSCodeNo,'N/A')HSCodeNo ,
    isnull(P.ProductDescription,'N/A')ProductDescription ,
    isnull(cur.CurrencyName,'Bangladeshi Taka')CurrencyName,
    isnull(SID.UOM,'N/A')UOM,
     isnull(sum(isnull(SID.NBRPrice,0) * isnull(SID.Quantity,0)),0) UnitCost,

     
    isnull(sum(SID.Quantity),0)Quantity ,
    isnull(sum(SID.VATAmount),0)VATAmount,
    isnull(sum(SID.SDAmount),0)SDAmount
 

    --isnull(SID.NBRPrice,0)UnitCost,
    --isnull(SID.VATRate,0)VATRate,--isnull(SID.SD,0)SD,
    --isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
    --isnull(SIH.Comments,'N/A') Comments
    --isnull(c.Address1,'N/A')Address1,
    --isnull(c.Address2,'N/A')Address2,
    --isnull(c.Address3,'N/A')Address3,
    --isnull(c.City,'N/A')City,
    --isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1,
    --isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2,
    --isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
    FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
    dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
    dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
    dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
    dbo.Currencies as cur on SIH.CurrencyID=cur.CurrencyId 

    WHERE
    (SIH.SalesInvoiceNo in(	select distinct SalesInvoiceNo from SaleExportInvoices
    WHERE 	(SaleExportNo =  @SaleExportNo)) )
    and (SID.Quantity>0)
    group by 
 --SIH.SalesInvoiceNo,convert (varchar(200),SIH.InvoiceDateTime,120),
isnull(C.CustomerName,'N/A')
    ,isnull(P.ProductName,'N/A'),isnull(P.HSCodeNo,'N/A'),isnull(P.ProductDescription,'N/A')
    ,isnull(cur.CurrencyName,'Bangladeshi Taka')
,isnull(SID.UOM,'N/A')--,isnull(SID.NBRPrice,0)
 


    select   sx.SaleExportNo
    ,isnull(sx.SaleExportDate,'1900/01/01')SaleExportDate
    ,isnull(sx.Description,'')Description
    ,isnull(sx.Comments		,'')Comments
    ,isnull(sx.Quantity		,'')Quantity
    ,isnull(sx.GrossWeight	,'')GrossWeight
    ,isnull(sx.NetWeight	,'')NetWeight
    ,isnull(sx.NumberFrom	,'')NumberFrom
    ,isnull(sx.NumberTo		,'')NumberTo
    ,isnull(sx.PortFrom		,'')PortFrom
    ,isnull(sx.PortTo		,'')PortTo

    from SaleExports sx


    --	SELECT   
    --	SalesInvoiceNo,  
    --	SaleLineNo,
    --	Description,
    --	Quantity,
    --	GrossWeight, NetWeight,
    --	NumberFrom, NumberTo,
    --	Comments
    --	FROM SaleExports
  where   (SaleExportNo = @SaleExportNo)";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SaleExportNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SaleExportNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SaleExportNo"].Value = SalesInvoiceNo;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT20ReportNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT20ReportNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 02

        public DataSet CreditNoteNew(string SalesInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"
--declare @SalesInvoiceNo as varchar(100)
--declare @post1 as varchar(100)
--declare @post2 as varchar(100)

--set @SalesInvoiceNo='CRN-0018/0319'
--set @post1='Y'
--set @post1='N'

select Credit.InvoiceLineNo ,Credit.salesInvoiceNo,
convert (varchar,Credit.InvoiceDateTime,120)InvoiceDateTime,p.productName,
(Credit.NBRPrice*Credit.Quantity)SubCost,Credit.SDAmount,Credit.VATAmount
,New.SDAmount NSDAmount,New.VATAmount NVATAmount,CreditSum.SDAmount CSSDAmount,CreditSum.VATAmount CSVATAmount
,Credit.PrevioussalesInvoiceNo,CreditH.CustomerID,CreditH.VehicleID,
convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
,credit.quantity,credit.uom

,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments

from SalesInvoiceDetails AS Credit left outer join
SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join

Customers C on CreditH.CustomerID=c.customerID left outer join
Vehicles V on CreditH.VehicleID=v.VehicleID left outer join
SalesInvoiceHeaders SIH on Credit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
left outer join
(select distinct salesInvoiceNo,ItemNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
from SalesInvoiceDetails
where salesInvoiceNo=(
select distinct PrevioussalesInvoiceNo from SalesInvoiceDetails
where salesInvoiceNo=@SalesInvoiceNo)
group by salesInvoiceNo,ItemNo
) New on Credit.PrevioussalesInvoiceNo=New.salesInvoiceNo and  Credit.ItemNo=New.ItemNo 


 left outer join
(select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
from SalesInvoiceDetails
where salesInvoiceNo=@SalesInvoiceNo
group by salesInvoiceNo
)CreditSum on Credit.salesInvoiceNo=CreditSum.salesInvoiceNo left outer join products P on
Credit.itemno=p.itemno
where  Credit.salesInvoiceNo=@SalesInvoiceNo
AND CreditH.TransactionType='Credit' 
                                   
AND (CreditH.Post =@post1 or CreditH.Post= @post2)

and Credit.Quantity>0

";
                // AND CreditH.Post='Y'  // start
                SqlCommand objCommCreditNote = new SqlCommand();
                objCommCreditNote.Connection = currConn;
                objCommCreditNote.CommandText = sqlText;
                objCommCreditNote.CommandType = CommandType.Text;

                if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommCreditNote.Parameters.Contains("@post1"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommCreditNote.Parameters["@post1"].Value = post1;
                }
                if (!objCommCreditNote.Parameters.Contains("@post2"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommCreditNote.Parameters["@post2"].Value = post2;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "CreditNoteNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "CreditNoteNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet CreditNoteAmountNew(string SalesInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"select Credit.InvoiceLineNo ,Credit.salesInvoiceNo,
                                    convert (varchar,Credit.InvoiceDateTime,120)InvoiceDateTime,p.productName
									,Credit.NBRPrice
                                    ,Credit.DiscountedNBRPrice
									,((Credit.DiscountedNBRPrice-Credit.NBRPrice)*Credit.Quantity)SubCost
									
									
									,Credit.SDAmount
									,((Credit.DiscountedNBRPrice-Credit.NBRPrice)*Credit.Quantity)*Credit.VATRate/100 VATAmount
									--,Credit.VATAmount
                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,CreditSum.SDAmount CSSDAmount,CreditSum.VATAmount CSVATAmount
                                    ,Credit.PrevioussalesInvoiceNo,CreditH.CustomerID,CreditH.VehicleID,
                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                                    ,credit.quantity,credit.uom

                                    ,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
                                    c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments

                                    from SalesInvoiceDetails AS Credit left outer join
                                    SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join

                                    Customers C on CreditH.CustomerID=c.customerID left outer join
                                    Vehicles V on CreditH.VehicleID=v.VehicleID left outer join
                                    SalesInvoiceHeaders SIH on Credit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
                                    left outer join
                                    (select distinct salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from SalesInvoiceDetails
                                    where salesInvoiceNo=(
                                    select distinct PrevioussalesInvoiceNo from SalesInvoiceDetails
                                    where salesInvoiceNo=@SalesInvoiceNo)
                                    group by salesInvoiceNo
                                    ) New on Credit.PrevioussalesInvoiceNo=New.salesInvoiceNo left outer join
                                    (select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from SalesInvoiceDetails
                                     where salesInvoiceNo=@SalesInvoiceNo
                                    group by salesInvoiceNo
                                    )CreditSum on Credit.salesInvoiceNo=CreditSum.salesInvoiceNo left outer join products P on
                                    Credit.itemno=p.itemno
                                    where  Credit.salesInvoiceNo=@SalesInvoiceNo
                                    AND CreditH.TransactionType='Credit' 
                                   
AND (CreditH.Post =@post1 or CreditH.Post= @post2)

                                    and Credit.Quantity>0";
                // AND CreditH.Post='Y'  // start
                SqlCommand objCommCreditNote = new SqlCommand();
                objCommCreditNote.Connection = currConn;
                objCommCreditNote.CommandText = sqlText;
                objCommCreditNote.CommandType = CommandType.Text;

                if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommCreditNote.Parameters.Contains("@post1"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommCreditNote.Parameters["@post1"].Value = post1;
                }
                if (!objCommCreditNote.Parameters.Contains("@post2"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommCreditNote.Parameters["@post2"].Value = post2;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "CreditNoteAmountNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "CreditNoteAmountNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet DebitNoteNew(string SalesInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportDebitNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText =
        @"--declare @SalesInvoiceNo as varchar(30)
--set @SalesInvoiceNo='DEN-0002/1118'
select 
Debit.InvoiceLineNo ,Debit.salesInvoiceNo,convert (varchar,Debit.InvoiceDateTime,120)InvoiceDateTime,p.productName,
        --(Debit.NBRPrice*Debit.Quantity)SubCost,Debit.SDAmount,Debit.VATAmount
        (sold.NBRPrice*sold.Quantity)SubCost,sold.SDAmount,sold.VATAmount
        ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,DebitSum.SDAmount DSSDAmount,DebitSum.VATAmount DSVATAmount
        ,Debit.PrevioussalesInvoiceNo,DebitH.CustomerID,DebitH.VehicleID,
        convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
        ,Debit.quantity,Debit.uom

        ,DebitH.DeliveryAddress1,DebitH.DeliveryAddress2,DebitH.DeliveryAddress3,
        c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,DebitH.comments
        ,isnull(isnull(OldInv.TotalAmount,0)-isnull(OldInv.TotalVATAmount,0),0) Col4

        from SalesInvoiceDetails AS Debit left outer join
        SalesInvoiceHeaders DebitH on Debit.salesInvoiceNo=DebitH.salesInvoiceNo left outer join
        SalesInvoiceHeaders OldInv on Debit.PreviousSalesInvoiceNo=OldInv.salesInvoiceNo left outer join

        Customers C on DebitH.CustomerID=c.customerID left outer join
        Vehicles V on DebitH.VehicleID=v.VehicleID 
        left outer join SalesInvoiceHeaders SIH on Debit.PrevioussalesInvoiceNo=sih.salesInvoiceNo 
        left outer join
        (select distinct salesInvoiceNo,ItemNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
        from SalesInvoiceDetails
        where salesInvoiceNo=(select distinct PrevioussalesInvoiceNo from SalesInvoiceDetails
        where  salesInvoiceNo=@SalesInvoiceNo)
        group by salesInvoiceNo,ItemNo
        ) New on Debit.PrevioussalesInvoiceNo=New.salesInvoiceNo and Debit.ItemNo=New.ItemNo  left outer join
        (select  salesInvoiceNo,ItemNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
        from SalesInvoiceDetails
        where salesInvoiceNo=@SalesInvoiceNo
        group by salesInvoiceNo,ItemNo
        )DebitSum on debit.salesInvoiceNo=DebitSum.salesInvoiceNo left outer join products P on
		
        Debit.itemno=p.itemno
		left outer join SalesInvoiceDetails sold on sold.SalesInvoiceNo= Debit.PreviousSalesInvoiceNo
		and sold.ItemNo=Debit.ItemNo
        where 
        DebitH.TransactionType='Debit'
        and Debit.salesInvoiceNo=@SalesInvoiceNo
        and Debit.Quantity>0
        AND (debit.Post =@Post1 or debit.Post= @Post2)
                                    
                                    ";
                //AND debit.post='Y'
                SqlCommand objCommDebitNote = new SqlCommand();
                objCommDebitNote.Connection = currConn;
                objCommDebitNote.CommandText = sqlText;
                objCommDebitNote.CommandType = CommandType.Text;

                if (!objCommDebitNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommDebitNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommDebitNote.Parameters.Contains("@post1"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommDebitNote.Parameters["@post1"].Value = post1;
                }

                if (!objCommDebitNote.Parameters.Contains("@post2"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommDebitNote.Parameters["@post2"].Value = post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDebitNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "DebitNoteNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "DebitNoteNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BatchTracking(string BatchNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";
            DataSet dataSet = new DataSet("BatchTracking");


            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement



                #region Backup

                //sqlText = @"
                //
                //
                //";

                #endregion

                #region Backup

                sqlText =
                    @"
                SELECT rh.SerialNo, rh.ReceiveNo,convert (varchar,rh.ReceiveDateTime,120)rh.ReceiveDateTime
,rd.ItemNo ReceiveItemNo,ReceiveItem.ProductCode ReceiveProductCode,ReceiveItem.ProductName ReceiveProductName
,ReceiveItem.HSCodeNo ReceiveHSCodeNo,ReceiveItem.CategoryName ReceiveCategoryName,ReceiveItem.IsRaw ReceiveProductType
,isnull(rd.UOMQty,rd.Quantity)R_UOMQty,isnull(rd.UOMn,rd.UOM)R_UOMn,isnull(rd.uomprice,rd.CostPrice)R_UOMPrice
,isnull(rd.Quantity,0)R_Quantity,isnull(rd.UOM,'-')R_UOM,isnull(rd.CostPrice,0)R_CostPrice

,id.ItemNo IssueItemNo,IssueItem.ProductCode IssueProductCode,IssueItem.ProductName IssueProductName
,IssueItem.HSCodeNo IssueHSCodeNo,IssueItem.CategoryName IssueCategoryName,IssueItem.IsRaw IssueProductType
,isnull(id.UOMQty,id.Quantity)I_UOMQty, isnull(id.UOMPrice,id.CostPrice)I_UOMPrice,ISNULL( id.UOMn,id.UOM)I_UOMn,isnull(id.UOMWastage,id.Wastage)I_UOMWastage
,isnull(id.Quantity,0)I_Quantity, isnull(id.CostPrice,0)I_CostPrice,ISNULL(id.UOM,'-')I_UOM,isnull(id.Wastage,0)I_Wastage

FROM ReceiveHeaders rh LEFT OUTER JOIN
ReceiveDetails rd ON rh.ReceiveNo=rd.ReceiveNo LEFT OUTER JOIN
IssueHeaders ih on rh.ReceiveNo=ih.IssueNo  AND rh.SerialNo=ih.SerialNo  LEFT OUTER JOIN
IssueDetails id on ih.IssueNo=id.IssueNo LEFT OUTER JOIN
(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) ReceiveItem ON rd.ItemNo=ReceiveItem.ItemNo  LEFT OUTER JOIN
(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) IssueItem ON id.ItemNo=IssueItem.ItemNo
";

                sqlText += "  WHERE REPLACE(rh.SerialNo,' ','') = @BatchNo";
                //sqlText += " AND (ih.Post ='" + post1 + "' or ih.Post= '" + post2 + "')";
                //sqlText += " AND (rh.Post ='" + post1 + "' or rh.Post= '" + post2 + "')";
                sqlText +=
                    " ORDER BY rh.SerialNo,rh.ReceiveNo,ReceiveItem.CategoryName,ReceiveItem.IsRaw,ReceiveItem.ItemNo," +
                    "IssueItem.CategoryName, IssueItem.IsRaw,IssueItem.ItemNo";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;
                objCommVAT16.Parameters.AddWithValue("@BatchNo", BatchNo);
                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BatchTracking", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BatchTracking", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BatchTracking1(string BatchNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";
            DataSet dataSet = new DataSet("BatchTracking");


            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement



                #region Backup

                //sqlText = @"
                //
                //
                //";

                #endregion

                #region Backup

                sqlText = " ";
                sqlText += @"
               
--DECLARE @batchNo VARCHAR(200)
--SET @batchNo='123456'  ;
SELECT 

'-' SerialNo, '-' ReceiveNo,'01/01/1900' ReceiveDateTime,b.ReceiveItemNo,b.ReceiveProductCode,b.ReceiveProductName
,b.ReceiveHSCodeNo,b.ReceiveCategoryName,b.ReceiveProductType,b.R_UOMQty,b.R_UOMn,b.R_UOMPrice,b.R_Quantity,b.R_UOM,b.R_CostPrice
,a.IssueItemNo,A.IssueProductCode,a.IssueProductName,a.IssueHSCodeNo,a.IssueCategoryName,a.IssueProductType,
a.I_UOMQty,a.I_UOMPrice,a.I_UOMn,a.I_UOMWastage,a.I_Quantity,a.I_CostPrice,a.I_UOM,a.I_Wastage


FROM 
(
SELECT id.FinishItemNo,id.ItemNo IssueItemNo,IssueItem.ProductCode IssueProductCode,IssueItem.ProductName IssueProductName
,ISNULL(id.UOM,'-')I_UOM,ISNULL( id.UOMn,id.UOM)I_UOMn,IssueItem.HSCodeNo IssueHSCodeNo,
IssueItem.CategoryName IssueCategoryName,IssueItem.IsRaw IssueProductType
,sum(isnull(id.UOMQty,id.Quantity))I_UOMQty, sum(isnull(id.UOMPrice,id.CostPrice))I_UOMPrice,sum(isnull(id.UOMWastage,id.Wastage))I_UOMWastage
,sum(isnull(id.Quantity,0))I_Quantity, sum(isnull(id.CostPrice,0))I_CostPrice,sum(isnull(id.Wastage,0))I_Wastage
FROM IssueDetails id 
LEFT OUTER JOIN(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) IssueItem ON id.ItemNo=IssueItem.ItemNo 
 WHERE id.IssueNo IN (	SELECT DISTINCT IssueNo FROM IssueHeaders ih 
";
                sqlText += "  WHERE REPLACE(SerialNo,' ','') =@BatchNo";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";

                sqlText += @" )
 GROUP BY id.FinishItemNo,id.ItemNo ,IssueItem.ProductCode ,IssueItem.ProductName 
,ISNULL(id.UOM,'-'),ISNULL( id.UOMn,id.UOM)
,IssueItem.HSCodeNo ,IssueItem.CategoryName ,IssueItem.IsRaw ) A LEFT OUTER JOIN

(SELECT distinct rd.ItemNo ReceiveItemNo,ReceiveItem.ProductCode ReceiveProductCode,ReceiveItem.ProductName ReceiveProductName
,isnull(rd.UOM,'-')R_UOM,isnull(rd.UOMn,rd.UOM)R_UOMn,ReceiveItem.HSCodeNo ReceiveHSCodeNo,ReceiveItem.CategoryName ReceiveCategoryName,ReceiveItem.IsRaw ReceiveProductType
,sum(isnull(rd.UOMQty,rd.Quantity))R_UOMQty,sum(isnull(rd.uomprice,rd.CostPrice))R_UOMPrice
,sum(isnull(rd.Quantity,0))R_Quantity,sum(isnull(rd.CostPrice,0))R_CostPrice
 FROM ReceiveDetails rd LEFT OUTER join  (SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) ReceiveItem ON rd.ItemNo=ReceiveItem.ItemNo  
 WHERE rd.ReceiveNo IN(  
SELECT DISTINCT ReceiveNo FROM ReceiveHeaders rh
";

                sqlText += "  WHERE REPLACE(SerialNo,' ','') = @BatchNo";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";


                sqlText += @" ) 
GROUP BY rd.ItemNo,ReceiveItem.ProductCode,ReceiveItem.ProductName,rd.UOM,isnull(rd.UOMn,rd.UOM),ReceiveItem.HSCodeNo,ReceiveItem.CategoryName,ReceiveItem.IsRaw
) AS b ON a.FinishItemNo=b.ReceiveItemNo

ORDER BY b.ReceiveProductName,a.IssueProductType,a.IssueCategoryName,a.IssueProductName
";

                #endregion

                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;
                objCommVAT16.Parameters.AddWithValue("@BatchNo", BatchNo);


                //if (!objCommVAT16.Parameters.Contains("@post1"))
                //{ objCommVAT16.Parameters.AddWithValue("@post1", post1); }
                //else { objCommVAT16.Parameters["@post1"].Value = post1; }

                //if (!objCommVAT16.Parameters.Contains("@post2"))
                //{ objCommVAT16.Parameters.AddWithValue("@post2", post2); }
                //else { objCommVAT16.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BatchTracking1", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BatchTracking1", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BatchTracking2(string BatchNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";
            DataSet dataSet = new DataSet("BatchTracking");


            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement



                #region Backup

                //sqlText = @"
                //
                //
                //";

                #endregion

                #region Backup

                sqlText = " ";
                sqlText +=
                    @"
              
--DECLARE @batchNo VARCHAR(200)
--SET @batchNo='123456'  ;
SELECT 
SerialNo, a.IssueItemNo,A.IssueProductCode,a.IssueProductName,a.IssueHSCodeNo,a.IssueCategoryName,a.IssueProductType,
a.I_UOMQty,a.I_UOMPrice,a.I_UOMn,a.I_UOMWastage,a.I_Quantity,a.I_CostPrice,a.I_UOM,a.I_Wastage,'-' ReceiveNo,'01/01/1900' ReceiveDateTime

FROM 
(
 SELECT DISTINCT 'B' SerialNo,id.ItemNo IssueItemNo,IssueItem.ProductCode IssueProductCode,IssueItem.ProductName IssueProductName
,ISNULL(id.UOM,'-')I_UOM,ISNULL( id.UOMn,id.UOM)I_UOMn,IssueItem.HSCodeNo IssueHSCodeNo,
IssueItem.CategoryName IssueCategoryName,IssueItem.IsRaw IssueProductType
,sum(isnull(id.UOMQty,id.Quantity))I_UOMQty, sum(isnull(id.UOMPrice,id.CostPrice))I_UOMPrice,sum(isnull(id.UOMWastage,id.Wastage))I_UOMWastage
,sum(isnull(id.Quantity,0))I_Quantity, sum(isnull(id.CostPrice,0))I_CostPrice,sum(isnull(id.Wastage,0))I_Wastage

 FROM IssueDetails id 
LEFT OUTER JOIN(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) IssueItem ON id.ItemNo=IssueItem.ItemNo 
 WHERE id.IssueNo IN (	SELECT DISTINCT IssueNo FROM IssueHeaders ih ";
                sqlText += "  WHERE REPLACE(SerialNo,' ','') =@BatchNo";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";

                sqlText += @"  
 ) GROUP BY id.ItemNo ,IssueItem.ProductCode ,IssueItem.ProductName 
,ISNULL(id.UOM,'-'),ISNULL( id.UOMn,id.UOM)
,IssueItem.HSCodeNo ,IssueItem.CategoryName ,IssueItem.IsRaw 


UNION All
SELECT DISTINCT 'A' SerialNo,  rd.ItemNo ReceiveItemNo,ReceiveItem.ProductCode ReceiveProductCode,ReceiveItem.ProductName ReceiveProductName
,isnull(rd.UOM,'-')R_UOM,isnull(rd.UOMn,rd.UOM)R_UOMn,ReceiveItem.HSCodeNo ReceiveHSCodeNo,ReceiveItem.CategoryName ReceiveCategoryName,ReceiveItem.IsRaw ReceiveProductType
,sum(isnull(rd.UOMQty,rd.Quantity))R_UOMQty, sum(isnull(rd.uomprice,rd.CostPrice))R_UOMPrice,0 R_UOMWastage
,sum(isnull(rd.Quantity,0))R_Quantity,sum(isnull(rd.CostPrice,0))R_CostPrice,0 R_Wastage

 FROM ReceiveDetails rd LEFT OUTER join  (SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) ReceiveItem ON rd.ItemNo=ReceiveItem.ItemNo  
 WHERE rd.ReceiveNo IN(  
SELECT DISTINCT ReceiveNo FROM ReceiveHeaders rh

";
                sqlText += "  WHERE REPLACE(SerialNo,' ','') = @BatchNo";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";

                sqlText += @"  
 )GROUP BY rd.ItemNo,ReceiveItem.ProductCode,ReceiveItem.ProductName,rd.UOM,isnull(rd.UOMn,rd.UOM),ReceiveItem.HSCodeNo,ReceiveItem.CategoryName,ReceiveItem.IsRaw
) AS a
ORDER BY a.SerialNo,a.IssueProductName
";


                #endregion

                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;
                objCommVAT16.Parameters.AddWithValue("@BatchNo", BatchNo);


                //if (!objCommVAT16.Parameters.Contains("@post1"))
                //{ objCommVAT16.Parameters.AddWithValue("@post1", post1); }
                //else { objCommVAT16.Parameters["@post1"].Value = post1; }

                //if (!objCommVAT16.Parameters.Contains("@post2"))
                //{ objCommVAT16.Parameters.AddWithValue("@post2", post2); }
                //else { objCommVAT16.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BatchTracking2", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BatchTracking2", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT16NewforTollRegister(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')

";

                if (ImportCostingIncludeATV)
                {
                    sqlText += @"insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')";
                }
                else
                {
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')";

                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,0 UnitCost
,0  UOMQty ,pd.ATVAmount ,0 SDAmount,'Import ATV' TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
and pd.ATVAmount>0
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')";

                }

                sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
---- end purchase---
---- start Issue---
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other'
--From Sale
,'Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
--From Toll
,'TollIssue'
--From Purchase
,'InputServiceImport','InputService','TollReceive'
From Production
,'Tender','WIP','PackageProduction'
)

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn','ReceiveReturn')


----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading', 'TollReceive-WIP','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  ";
                if (ImportCostingIncludeATV)
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }
                else
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";

                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0) +isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import' ) 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }


                sqlText += @"	 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 


UNION ALL 
(
SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('Other'
--From Sale
,'Trading','ExportTrading','TradingTender','ExportTradingTender','InternalIssue','Service','ExportService'
--From Toll
,'TollIssue'
--From Purchase
,'InputServiceImport','InputService','TollReceive'
From Production
,'Tender','WIP','PackageProduction'
)
AND ItemNo = @itemNo  AND (UOMQty>0))  

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   


 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 


UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y')   
and DisposeDetails.TransactionType IN('VAT26')  )

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-0--isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('RawSale')  
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL 
(
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16NewforTollRegister", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16NewforTollRegister", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_1_WithConnBackup09032020(string ItemNo, string UserName, string StartDate, string EndDate
            , string post1, string post2, string ReportName, int BranchId = 0
            , SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null
            , bool Opening = false, SysDBInfoVMTemp connVM = null, bool OpeningFromProducct = true)
        {
            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnectionNoPooling();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);
                bool IssueFrom6_1 = Convert.ToBoolean(_cDal.settings("Toll6_4", "IssueFrom6_1") == "Y" ? true : false);
                bool TollReceiveNotWIP = Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

";
                if (Opening == false)
                {

                    sqlText += @"
---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0)+isnull(pd.SDAmount,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Other','PurchaseCN','Trading','Service','ServiceNS','CommercialImporter','InputService')
AND pd.BranchId=@BranchId

---ReceiveDetails-----
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase', '' BENumber,
@ItemNo,isnull(subtotal,0)  ,isnull(UOMQty,0) ,
pd.VATAmount,0 SDAmount,'WIP',pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime  >=@StartDate  and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')
AND pd.BranchId=@BranchId

";
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)
--+ isnull(pd.ATVAmount,0)
+isnull(pd.OthersAmount,0)+isnull(pd.SDAmount,0))
--,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport')
AND pd.BranchId=@BranchId
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-1*(isnull(subtotal,0)+isnull(SDAmount,0)),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn','PurchaseDN')
AND pd.BranchId=@BranchId

 
---- end purchase---
---- start Issue---
 
 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','Trading','TradingAuto','ExportTrading','TradingTender'
,'ExportTradingTender','InternalIssue','Service','ExportService','InputServiceImport'
,'InputService','Tender','WIP','PackageProduction')
AND id.BranchId=@BranchId
";
                    if (IssueFrom6_1)
                    {
                        sqlText += @"   insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')
AND id.BranchId=@BranchId
";
                    }
                    else
                    {
                        if (TollReceiveNotWIP)
                        {
                            sqlText += @"   insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive-NotWIP')
AND id.BranchId=@BranchId
";
                        }
                    }

                    sqlText += @" 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive') and id.CostPrice>0
AND id.BranchId=@BranchId


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  
AND BranchId=@BranchId



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn','ReceiveReturn')
AND ID.BranchId=@BranchId

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)
AND TD.BranchId=@BranchId

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')
AND sih.BranchId=@BranchId

";
                }

                sqlText += @"

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo
IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
";
                if (OpeningFromProducct)
                {
                    if (BranchId > 1)
                    {
                        sqlText += @"		 
SELECT @itemNo ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) Amount  
FROM ProductStocks p  WHERE p.ItemNo = @itemNo  
AND BranchId=@BranchId
AND BranchId>1
UNION ALL 
";
                    }
                    else
                    {
                        sqlText += @"		 
SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo  
AND BranchId='1'
UNION ALL 
";
                    }
                }
                sqlText += @"		 
(
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)Quantity,isnull(sum(isnull(SubTotal,0)),0)Amount 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime>= '07/01/2019' and ReceiveDateTime < @StartDate      AND ItemNo = @itemNo

AND ItemNo = @itemNo
AND BranchId=@BranchId
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading' ,'PurchaseCN') 
AND ReceiveDate>= '07/01/2019' and ReceiveDate < @StartDate      AND ItemNo = @itemNo
AND BranchId=@BranchId
 )   	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)
+isnull(OthersAmount,0)+isnull(SDAmount,0)),0)),0)SubTotal 

--isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)+isnull(SDAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate>= '07/01/2019' and ReceiveDate < @StartDate      AND ItemNo = @itemNo
AND BranchId=@BranchId
 )  
UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)+isnull(SDAmount,0)),0)SubTotal     
FROM PurchaseInvoiceDetails 
WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  
AND ReceiveDate>= '07/01/2019' and ReceiveDate < @StartDate       AND ItemNo = @itemNo 
AND BranchId=@BranchId

) 
UNION ALL 
(
SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '07/01/2019' and IssueDateTime< @StartDate     
AND TransactionType IN ('Other'
,'Trading','TradingAuto','ExportTrading','TradingTender','ExportTradingTender'
,'InternalIssue','Service','ExportService','InputServiceImport'
,'InputService'
,'Tender','WIP','PackageProduction'
)
AND ItemNo = @itemNo  AND (UOMQty>0) 
AND BranchId=@BranchId
) 
";
                if (IssueFrom6_1)
                {
                    sqlText += @"
 UNION ALL 
 (
 SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'  
 AND IssueDateTime>= '07/01/2019' and IssueDateTime< @StartDate    
 AND TransactionType IN ('TollIssue')
 AND ItemNo = @itemNo  AND (UOMQty>0) 
 AND BranchId=@BranchId
) 
";
                }
                else
                {
                    if (TollReceiveNotWIP)
                    {
                        sqlText += @"
 UNION ALL 
 (
 SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
 FROM IssueDetails WHERE Post='Y'   
 AND IssueDateTime>= '07/01/2019' and IssueDateTime< @StartDate   
 AND TransactionType IN ('TollReceive-NotWIP')
 AND ItemNo = @itemNo  AND (UOMQty>0) 
 AND BranchId=@BranchId
) 
";
                    }
                }
                sqlText += @" UNION ALL 
(
SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   
AND IssueDateTime>= '07/01/2019' and IssueDateTime< @StartDate    
AND TransactionType IN ('TollFinishReceive') and CostPrice>0
AND ItemNo = @itemNo  AND (UOMQty>0) 
AND BranchId=@BranchId
) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'  
AND IssueDateTime>= '07/01/2019' and IssueDateTime< @StartDate   
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0)
AND BranchId=@BranchId
)   


 --Transfer to Raw
UNION ALL (
SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   
AND TransferDateTime>= '07/01/2019' and TransferDateTime< @StartDate   
AND ItemNo = @itemNo  AND (UOMQty>0)   
AND BranchId=@BranchId
 ) 


UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate>= '07/01/2019' and DisposeDetails.DisposeDate< @StartDate   

AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y')   
and DisposeDetails.TransactionType IN('VAT26')  
AND sih.BranchId=@BranchId
)

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime< @StartDate   
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
AND ItemNo = @itemNo  AND (UOMQty>0) 
AND BranchId=@BranchId

)   

UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-0--isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'  
AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime< @StartDate   

   and TransactionType IN('RawSale')  
     AND ItemNo = @itemNo  AND (UOMQty>0) 
AND BranchId=@BranchId
)   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   
AND InvoiceDateTime>= '07/01/2019' and InvoiceDateTime< @StartDate   

   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)
AND BranchId=@BranchId
) 
	 UNION ALL 
(
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   
AND TransferDateTime>= '07/01/2019' and TransferDateTime< @StartDate   
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)
AND BranchId=@BranchId   
 ) 
 
	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId


update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";


                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }


                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn, transaction);

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", BranchId);


                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConnBackup09032020", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_1_WithConnBackup09032020", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT6_1Toll(string ItemNo, string UserName, string StartDate, string EndDate, string post1,
            string post2
            , string ReportName, int BranchId = 0, SysDBInfoVMTemp connVM = null, bool IsOpening = true,
            SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, VAT6_1ParamVM vm = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT6_1Toll");
            SqlTransaction transaction = null;
            #endregion

            #region Try

            try
            {
                #region Settings Control

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);
                bool TollReceiveNotWIP = true; // Convert.ToBoolean(_cDal.settings("IssueFromBOM", "TollReceive-NotWIP") == "Y" ? true : false);

                #endregion

                #region open connection and transaction
                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = "";


                sqlText += @"  


create table #ProductReceive(ItemNo varchar(50))

insert into #ProductReceive(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
--and Products.BranchId=@BranchId
 

";

                #region Conditions

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";

                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }


                sqlText += @" and pc.ReportType in('VAT6_1','VAT6_1_And_6_2')";
                sqlText += @"  ) as a";


                #region SQL Text

                #region Beginning


                sqlText += @"
                          
------DECLARE @StartDate DATETIME;
------DECLARE @EndDate DATETIME;
------DECLARE @post1 VARCHAR(200);
------DECLARE @post2 VARCHAR(200);
------DECLARE @ItemNo VARCHAR(200);
------SET @Itemno='46';
------SET @post1='Y';
------SET @post2='N';
------SET @StartDate='2014-04-01';
------SET @EndDate='2014-04-27';
------DECLARE @BranchId as int = 1;


declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

--------------------------------------
------------13-May-2024--------------

------CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
------[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
------[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
------[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
------[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
------[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
------,TransactionType [varchar] (200)  
------)

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL
,[VendorID] [varchar](200) NULL
,[VendorName] [varchar](1000) NULL
,[Address1] [varchar](1000) NULL
,[Address2] [varchar](1000) NULL
,[Address3] [varchar](1000) NULL
,[VATRegistrationNo] [varchar](50) NULL

,[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

------------13-May-2024--------------
--------------------------------------

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

";

                #endregion

                #region Transaction Data

                #region Data IN

                #region 'TollIssue'

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in (Select ItemNo from #ProductReceive) 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollIssue')  
AND BranchId=@BranchId

";
                #endregion 'TollIssue'

                #region 'TollReceiveRaw'

                sqlText += @"

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in (Select ItemNo from #ProductReceive) AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceiveRaw')
AND pd.BranchId=@BranchId

";

                #endregion 'TollReceiveRaw'

                #region 'TollClient6_4Outs', TollClient6_4OutWIP

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', tcid.DateTime,tcid.DateTime,tcio.Code,'Purchase','-',tcid.ItemNo,
isnull(tcid.Quantity,0)*isnull(tcid.UnitCost,0), tcid.Quantity,'0',0,tcid.TransactionType,tcio.CreatedOn
from TollClientInOutDetails tcid
left outer join TollClientInOuts tcio on tcio.Id=tcid.HeaderId
where tcid.DateTime >= @StartDate and tcid.DateTime < DATEADD(d,1,@EndDate) 
and ItemNo in (Select ItemNo from #ProductReceive) 
AND (Quantity>0) AND (tcid.Post =@post1 or tcid.Post= @post2)
AND tcid.TransactionType IN('TollClient6_4Outs','TollClient6_4OutWIP')  
AND tcid.BranchId=@BranchId

";
                #endregion 'TollClient6_4Outs', TollClient6_4OutWIP

                #region 'TollClient6_4Outs', TollClient6_4OutWIP

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', tcid.DateTime,tcid.DateTime,tcio.Code,'Purchase','-',tcid.ItemNo,
isnull(tcid.Quantity,0)*isnull(tcid.UnitCost,0), tcid.Quantity,'0',0,tcid.TransactionType,tcio.CreatedOn
from TollContInOutDetails tcid
left outer join TollContInOuts tcio on tcio.Id=tcid.HeaderId
where tcid.DateTime >= @StartDate and tcid.DateTime < DATEADD(d,1,@EndDate) 
and ItemNo in (Select ItemNo from #ProductReceive) 
AND (Quantity>0) AND (tcid.Post =@post1 or tcid.Post= @post2)
AND tcid.TransactionType IN('TollCont6_4Ins')  
AND tcid.BranchId=@BranchId

";
                #endregion 'TollClient6_4Outs', TollClient6_4OutWIP

                #endregion Data IN

                #region Data OUT

                #region Issue Data

                sqlText += @"

-------------------------------------------------- Start Issue --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
";

                #region 'TollReceive-NotWIP'

                if (TollReceiveNotWIP)
                {
                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'TollIssue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in (Select ItemNo from #ProductReceive) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive-NotWIP')
AND id.BranchId=@BranchId
";
                }

                #endregion

                #region 'TollReceive'

                sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'TollIssue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in (Select ItemNo from #ProductReceive) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
AND id.BranchId=@BranchId

";
                #endregion

                #region 'TollFinishReceive'

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in (Select ItemNo from #ProductReceive) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive','TollitemIssueWithoutBOM') and ID.CostPrice=0
AND id.BranchId=@BranchId

";

                #endregion

                #region 'TollClientConsumptions','TollClientConsumptionsWIP','TollContConsumptions'

                sqlText += @"

-------------------------------------------------- Start Toll --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',tpcd.DateTime,tpcd.DateTime,tpc.Code,'Issue','-'
,ItemNo,isnull(Quantity,0)*isnull(UnitCost,0) ,isnull(Quantity,0) ,0,0,tpcd.TransactionType,tpcd.DateTime
from TollProductionConsumptionDetails tpcd
left outer join TollProductionConsumptions tpc on tpc.Id=tpcd.HeaderId
where tpcd.DateTime  >=@StartDate  and tpcd.DateTime < DATEADD(d,1, @EndDate)  
and tpcd.ItemNo in (Select ItemNo from #ProductReceive) AND (Quantity>0) AND (tpcd.Post =@post1 or tpcd.Post= @post2)
AND tpcd.TransactionType IN ('TollClientConsumptions','TollClientConsumptionsWIP','TollContConsumptions')
AND tpcd.BranchId=@BranchId


";

                #endregion 'TollClientConsumptions','TollClientConsumptionsWIP','TollContConsumptions'

                #region 'TollClient6_4Backs','TollClient6_4BacksWIP'

                sqlText += @"

-------------------------------------------------- Start Toll --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',tpcd.DateTime,tpcd.DateTime,tpc.Code,'Issue','-'
,ItemNo,isnull(Quantity,0)*isnull(UnitCost,0) ,isnull(Quantity,0) ,0,0,tpcd.TransactionType,tpcd.DateTime
from TollClientInOutDetails tpcd
left outer join TollClientInOuts tpc on tpc.Id=tpcd.HeaderId
where tpcd.DateTime  >=@StartDate  and tpcd.DateTime < DATEADD(d,1, @EndDate)  
and tpcd.ItemNo in (Select ItemNo from #ProductReceive) AND (Quantity>0) AND (tpcd.Post =@post1 or tpcd.Post= @post2)
AND tpcd.TransactionType IN ('TollClient6_4Backs','TollClient6_4BacksWIP')
AND tpcd.BranchId=@BranchId


";

                #endregion 'TollClient6_4Backs','TollClient6_4BacksWIP'

                #region 'TollCont6_4Backs'

                sqlText += @"

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',tpcd.DateTime,tpcd.DateTime,tpc.Code,'Issue','-'
,ItemNo,isnull(Quantity,0)*isnull(UnitCost,0) ,isnull(Quantity,0) ,0,0,tpcd.TransactionType,tpcd.DateTime
from TollContInOutDetails tpcd
left outer join TollContInOuts tpc on tpc.Id=tpcd.HeaderId
where tpcd.DateTime  >=@StartDate  and tpcd.DateTime < DATEADD(d,1, @EndDate)  
and tpcd.ItemNo in (Select ItemNo from #ProductReceive) AND (Quantity>0) AND (tpcd.Post =@post1 or tpcd.Post= @post2)
AND tpcd.TransactionType IN ('TollCont6_4Backs')
AND tpcd.BranchId=@BranchId


";

                #endregion 'TollCont6_4Backs'

                #endregion

                #endregion Data OUT

                #region Sales Data

                #region 'ContractorRawIssue'

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.InvoiceDateTime,ID.InvoiceDateTime,ID.SalesInvoiceNo,'Issue','-'
,ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,TransactionType,InvoiceDateTime
from SalesInvoiceDetails ID
where ID.InvoiceDateTime  >=@StartDate  and ID.InvoiceDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in (Select ItemNo from #ProductReceive) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ContractorRawIssue')
AND id.BranchId=@BranchId

";

                #endregion

                #endregion

                #endregion


                #endregion
                #region Opening Data

                sqlText += @"

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo in (Select ItemNo from #ProductReceive)

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate


insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
	
";


                if (IsOpening)
                {
////                    sqlText +=
////                        @"(SELECT  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
////FROM Products p  WHERE p.ItemNo  in (Select ItemNo from #ProductReceive) )  
//// UNION ALL ";

                    sqlText +=
                        @"(SELECT  ItemNo, isnull(TollOpeningQuantity,0) Quantity, 0 Amount  
FROM Products p  WHERE p.ItemNo  in (Select ItemNo from #ProductReceive) )  
 UNION ALL ";
                }
                else
                {
                    sqlText +=
                        @"(SELECT  ItemNo,0 Quantity, 0 Amount  
FROM Products p  WHERE p.ItemNo  in (Select ItemNo from #ProductReceive) )  
 UNION ALL ";
                }


                #region Data IN

                #region Sales Data

                #region 'TollIssue'

                sqlText += @"

(
SELECT  ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate     
AND TransactionType IN ('TollIssue')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
) 
  ";

                #endregion

                #endregion

                #region Purchase Data

                #region 'TollReceiveRaw'

                sqlText += @"	
UNION ALL 
(
SELECT  ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceiveRaw') 
AND ReceiveDate < @StartDate
AND ItemNo  in (Select ItemNo from #ProductReceive)
AND BranchId=@BranchId
group by ItemNo
 )  
 ";
                #endregion

                #endregion

                #region 'TollClient6_4Outs', TollClient6_4OutWIP

                sqlText += @"

UNION ALL 

(
SELECT  ItemNo,isnull(sum(Quantity),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)  
FROM TollClientInOutDetails WHERE Post='Y'   AND DateTime< @StartDate     
AND TransactionType IN ('TollClient6_4Outs','TollClient6_4OutWIP')
AND ItemNo in (Select ItemNo from #ProductReceive)  
AND (Quantity>0) 
AND BranchId=@BranchId
group by ItemNo
) 

 
  ";

                #endregion 'TollClient6_4Outs' , TollClient6_4OutWIP

                #region 'TollCont6_4Ins'

                sqlText += @"

UNION ALL 

(
SELECT  ItemNo,isnull(sum(Quantity),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)  
FROM TollContInOutDetails WHERE Post='Y'   AND DateTime< @StartDate     
AND TransactionType IN ('TollCont6_4Ins')
AND ItemNo in (Select ItemNo from #ProductReceive)  
AND (Quantity>0) 
AND BranchId=@BranchId
group by ItemNo
) 

  ";

                #endregion 'TollCont6_4Ins'

                #endregion Data IN

                #region Data OUT

                #region Issue Data

                #region 'TollReceive-NotWIP'

                if (TollReceiveNotWIP)
                {


                    sqlText += @"
UNION ALL 
(
SELECT ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('TollReceive-NotWIP')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
) 
";
                }

                #endregion

                #region 'TollReceive'

                sqlText += @"
UNION ALL 
(
SELECT ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('TollReceive')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
) 
";

                #endregion

                #region 'TollFinishReceive'

                sqlText += @"

UNION ALL 
(
SELECT ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('TollFinishReceive','TollitemIssueWithoutBOM')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
) 
 ";

                #endregion

                #region 'TollClientConsumptions','TollClientConsumptionsWIP','TollContConsumptions'

                sqlText += @"
UNION ALL 
(
SELECT ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM TollProductionConsumptionDetails WHERE Post='Y'   AND DateTime< @StartDate     
AND TransactionType IN ('TollClientConsumptions','TollClientConsumptionsWIP','TollContConsumptions')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (Quantity>0) 
AND BranchId=@BranchId
group by ItemNo
) 
";

                #endregion 'TollClientConsumptions','TollClientConsumptionsWIP','TollContConsumptions'

                #region 'TollClient6_4Backs','TollClient6_4BacksWIP'

                sqlText += @"
UNION ALL 
(
SELECT ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM TollClientInOutDetails WHERE Post='Y'   AND DateTime< @StartDate     
AND TransactionType IN ('TollClient6_4Backs','TollClient6_4BacksWIP')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (Quantity>0) 
AND BranchId=@BranchId
group by ItemNo
) 
";

                #endregion 'TollClient6_4Backs','TollClient6_4BacksWIP'

                #region 'TollCont6_4Backs'

                sqlText += @"
UNION ALL 
(
SELECT ItemNo,-isnull(sum(Quantity),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM TollContInOutDetails WHERE Post='Y'   AND DateTime< @StartDate     
AND TransactionType IN ('TollCont6_4Backs')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (Quantity>0) 
AND BranchId=@BranchId
group by ItemNo
) 
";

                #endregion 'TollCont6_4Backs'

                #endregion Issue Data

                #region Sales Data

                #region 'ContractorRawIssue'

                sqlText += @"
UNION ALL 
(
SELECT  ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate     
AND TransactionType IN ('ContractorRawIssue')
AND ItemNo  in (Select ItemNo from #ProductReceive)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
)  
";

                #endregion

                #endregion

                #endregion Data OUT


                sqlText += @"	
) 

AS a GROUP BY a.ItemNo

";

                #endregion

                #region Insert, Update, Select Data

                sqlText += @"

insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo


----update #VAT_16 set 
----VendorID=PurchaseInvoiceHeaders.VendorID
----from PurchaseInvoiceHeaders
----where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
----and #VAT_16.TransType='Purchase'
----AND BranchId=@BranchId

-----------------------------------------
------------13-May-2024--------------

------update #VAT_16 set 
------VendorID=PurchaseInvoiceHeaders.VendorID
------from PurchaseInvoiceHeaders
------where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
------and #VAT_16.TransType='Purchase'
------and #VAT_16.Remarks!='TollIssue'
------AND BranchId=@BranchId
------
------update #VAT_16 set 
------VendorID=SalesInvoiceHeaders.CustomerID
------from SalesInvoiceHeaders
------where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_16.TransID
------and #VAT_16.TransType='Purchase'
------and #VAT_16.Remarks='TollIssue'
------AND BranchId=@BranchId
------
------update #VAT_16 set 
------VendorID=TollClientInOuts.CustomerID
------from TollClientInOuts
------where TollClientInOuts.Code=#VAT_16.TransID
------and #VAT_16.TransType='Purchase'
------and #VAT_16.Remarks='TollClient6_4Outs'
------AND BranchId=@BranchId


update #VAT_16 set 
VendorID=ph.VendorID
,VendorName=v.VendorName
,Address1=v.Address1
,Address2=v.Address2
,Address3=v.Address3
,VATRegistrationNo=v.VATRegistrationNo
from PurchaseInvoiceHeaders ph
left outer join Vendors v on v.VendorID=ph.VendorID
where ph.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
and #VAT_16.Remarks!='TollIssue'
AND ph.BranchId=@BranchId

update #VAT_16 set 
VendorID=ph.VendorID
,VendorName=v.VendorName
,Address1=v.Address1
,Address2=v.Address2
,Address3=v.Address3
,VATRegistrationNo=v.VATRegistrationNo
from TollContInOuts ph
left outer join Vendors v on v.VendorID=ph.VendorID
where ph.Code=#VAT_16.TransID
and #VAT_16.TransType in('Purchase','Issue')
and #VAT_16.Remarks in('TollCont6_4Ins','TollCont6_4Backs')
AND ph.BranchId=@BranchId


update #VAT_16 set 
VendorID=sh.CustomerID
,VendorName=c.CustomerName
,Address1=c.Address1
,Address2=c.Address2
,Address3=c.Address3
,VATRegistrationNo=c.VATRegistrationNo
from SalesInvoiceHeaders sh
left outer join Customers c on c.CustomerID=sh.CustomerID
where sh.SalesInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
and #VAT_16.Remarks='TollIssue'
AND sh.BranchId=@BranchId

update #VAT_16 set 
VendorID=sh.CustomerID
,VendorName=c.CustomerName
,Address1=c.Address1
,Address2=c.Address2
,Address3=c.Address3
,VATRegistrationNo=c.VATRegistrationNo
from TollClientInOuts sh
left outer join Customers c on c.CustomerID=sh.CustomerID
where sh.Code=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
and #VAT_16.Remarks in('TollClient6_4Outs','TollClient6_4OutWIP')
AND sh.BranchId=@BranchId

update #VAT_16 set 
VendorID=sh.CustomerID
,VendorName=c.CustomerName
,Address1=c.Address1
,Address2=c.Address2
,Address3=c.Address3
,VATRegistrationNo=c.VATRegistrationNo
from TollClientInOuts sh
left outer join Customers c on c.CustomerID=sh.CustomerID
where sh.Code=#VAT_16.TransID
and #VAT_16.TransType='Issue'
and #VAT_16.Remarks in('TollClient6_4Backs','TollClient6_4BacksWIP')
AND sh.BranchId=@BranchId

------------13-May-2024--------------
-----------------------------------------

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId


----select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
----#VAT_16.StartingQuantity,#VAT_16.StartingAmount
----,TransID,#VAT_16.TransType,
----isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
----isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
----isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
----p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
----,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
----#VAT_16.CreateDateTime
----from #VAT_16 left outer join
----Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
----Products P on #VAT_16.ItemNo=p.ItemNo
----order by CreateDateTime ASC,#VAT_16.SerialNo ASC 

-----------------------------------------
------------13-May-2024--------------

---select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
---#VAT_16.StartingQuantity,#VAT_16.StartingAmount
---,TransID,#VAT_16.TransType
---,#VAT_16.VendorID
---,(case when #VAT_16.Remarks='TollIssue' then isnull(c.CustomerName,'-') when #VAT_16.Remarks='TollClient6_4Outs' then isnull(c.CustomerName,'-') else isnull(v.VendorName,'-') end)VendorName
---,(case when #VAT_16.Remarks='TollIssue' then isnull(c.Address1,'-') when #VAT_16.Remarks='TollClient6_4Outs' then isnull(c.Address1,'-') else isnull(v.Address1,'-') end)Address1
---,(case when #VAT_16.Remarks='TollIssue' then isnull(c.Address2,'-') when #VAT_16.Remarks='TollClient6_4Outs' then isnull(c.Address2,'-') else isnull(v.Address2,'-') end)Address2
---,(case when #VAT_16.Remarks='TollIssue' then isnull(c.Address3,'-') when #VAT_16.Remarks='TollClient6_4Outs' then isnull(c.Address3,'-') else isnull(v.Address3,'-') end)Address3
---,(case when #VAT_16.Remarks='TollIssue' then isnull(c.VATRegistrationNo,'-') when #VAT_16.Remarks='TollClient6_4Outs' then isnull(c.VATRegistrationNo,'-') else isnull(v.VATRegistrationNo,'-') end)VATRegistrationNo
---,p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
---,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,#VAT_16.ItemNo,
---#VAT_16.CreateDateTime
---from #VAT_16 left outer join
---Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
---Customers as c on #VAT_16.VendorID=c.CustomerID left outer join 
---Products P on #VAT_16.ItemNo=p.ItemNo
-----order by CreateDateTime ASC,#VAT_16.SerialNo ASC 
---order by StartDateTime ASC,#VAT_16.SerialNo ASC 


select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType
,#VAT_16.VendorID
,isnull(#VAT_16.VendorName,'-')VendorName
,isnull(#VAT_16.Address1,'-')Address1
,isnull(#VAT_16.Address2,'-')Address2
,isnull(#VAT_16.Address3,'-')Address3
,isnull(#VAT_16.VATRegistrationNo,'-')VATRegistrationNo
,p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,#VAT_16.ItemNo,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Customers as c on #VAT_16.VendorID=c.CustomerID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by StartDateTime ASC,#VAT_16.SerialNo ASC 

------------13-May-2024--------------
--------------------------------------


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16
                
                ";

                #endregion

                #endregion

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;
                objCommVAT16.Transaction = transaction;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);

                if (!string.IsNullOrEmpty(vm.ItemNo))
                {
                    if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                    }
                }

                if (!string.IsNullOrEmpty(vm.UserName))
                {
                    if (!objCommVAT16.Parameters.Contains("@UserName"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@UserName"].Value = UserName;
                    }
                }
                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                }

                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                }

                #endregion Parameter

                objCommVAT16.CommandTimeout = 500;
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

            }

            #endregion

            #region Catch & Finally


            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ReportDSDAL", "VAT6_1Toll", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet MISVAT6_1Toll(VAT6_1ParamVM vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = VcurrConn;
            SqlTransaction transaction = Vtransaction;
            string sqlText = "";
            DataSet dataSet = new DataSet("MISVAT6_1Toll");

            #endregion

            #region Try

            try
            {
                #region Settings Control

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y");
                bool TollReceiveNotWIP = true;

                #endregion

                #region open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }

                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = "";

                #region SQL Text

                #region Beginning


                sqlText += @"
                          
------DECLARE @StartDate DATETIME;
------DECLARE @EndDate DATETIME;
------DECLARE @post1 VARCHAR(200);
------DECLARE @post2 VARCHAR(200);
------DECLARE @ItemNo VARCHAR(200);
------SET @Itemno='46';
------SET @post1='Y';
------SET @post2='N';
------SET @StartDate='2014-04-01';
------SET @EndDate='2014-04-27';
------DECLARE @BranchId as int = 1;


declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;



CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)


CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200) , OpeningDate datetime null
) 

";
                sqlText += @"  


create table #ProductReceive1(ItemNo varchar(50))

insert into #ProductReceive1(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1
 

";
                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";
                }

                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        sqlText += @"  and Products.ProductName LIKE '%' +  @ProdutGroupName   + '%'";
                    }
                    else
                    {
                        sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                        sqlText += @"  and Products.ActiveStatus='Y'";
                    }
                }
                else if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }


                sqlText += @"  and pc.ReportType in ('VAT6_1')";


                sqlText += @"  ) as a";
                #endregion

                #region Transaction Data

                #region Data IN

                #region Sales Data

                #region 'TollIssue'

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo in(select distinct ItemNo from #ProductReceive1)
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollIssue')  
AND BranchId=@BranchId

";
                #endregion

                #endregion

                #region Purchase Data

                #region 'TollReceiveRaw'

                sqlText += @"

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
PD.ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo in(select distinct ItemNo from #ProductReceive1) AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('TollReceiveRaw')
AND pd.BranchId=@BranchId

";

                #endregion

                #endregion

                #endregion


                #region Data OUT

                #region Issue Data

                sqlText += @"

-------------------------------------------------- Start Issue --------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
";

                #region 'TollReceive-NotWIP'

                if (TollReceiveNotWIP)
                {
                    sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,ID.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'TollIssue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive1) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive-NotWIP')
AND id.BranchId=@BranchId
";
                }

                #endregion

                #region 'TollReceive'

                sqlText += @"
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,ID.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'TollIssue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive1) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
AND id.BranchId=@BranchId

";
                #endregion

                #region 'TollFinishReceive'

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,ID.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive1) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive','TollitemIssueWithoutBOM') and ID.CostPrice=0
AND id.BranchId=@BranchId

";

                #endregion

                #endregion

                #region Sales Data

                #region 'ContractorRawIssue'

                sqlText += @"
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)

select 'B',ID.InvoiceDateTime,ID.InvoiceDateTime,ID.SalesInvoiceNo,'Issue','-'
,ID.ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,TransactionType,InvoiceDateTime
from SalesInvoiceDetails ID
where ID.InvoiceDateTime  >=@StartDate  and ID.InvoiceDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo in(select distinct ItemNo from #ProductReceive1) AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ContractorRawIssue')
AND id.BranchId=@BranchId

";

                #endregion

                #endregion

                #endregion


                #endregion
                if (vm.Opening)
                {


                    #region Opening Data

                    sqlText += @"

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate


insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT distinct ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo in(select distinct ItemNo from #ProductReceive1) )  
";

                    #region Data IN
                }
                #region Sales Data

                #region 'TollIssue'

                sqlText += @"
 UNION ALL 
(
SELECT distinct ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate     
AND TransactionType IN ('TollIssue')
AND ItemNo in(select distinct ItemNo from #ProductReceive1)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
) 
  ";

                #endregion

                #endregion

                #region Purchase Data

                #region 'TollReceiveRaw'

                sqlText += @"	
UNION ALL 
(
SELECT distinct ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceiveRaw') 
AND ReceiveDate < @StartDate AND ItemNo in(select distinct ItemNo from #ProductReceive1)
AND BranchId=@BranchId
group by ItemNo
 )  
 ";
                #endregion

                #endregion

                    #endregion

                #region Data OUT

                #region Issue Data

                #region 'TollReceive-NotWIP'

                if (TollReceiveNotWIP)
                {


                    sqlText += @"
UNION ALL 
(
SELECT distinct ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('TollReceive-NotWIP')
AND ItemNo in(select distinct ItemNo from #ProductReceive1) AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
) 
";
                }

                #endregion

                #region 'TollReceive'

                sqlText += @"
UNION ALL 
(
SELECT distinct ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('TollReceive')
AND ItemNo in(select distinct ItemNo from #ProductReceive1)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo

";

                #endregion

                #region 'TollFinishReceive'

                sqlText += @"

UNION ALL 
(
SELECT distinct  ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
AND TransactionType IN ('TollFinishReceive','TollitemIssueWithoutBOM')
AND ItemNo in(select distinct ItemNo from #ProductReceive1)  AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
) 
 ";

                #endregion

                #endregion

                #region Sales Data

                #region 'ContractorRawIssue'

                sqlText += @"
UNION ALL 
(
SELECT  distinct ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate     
AND TransactionType IN ('ContractorRawIssue')
AND ItemNo in(select distinct ItemNo from #ProductReceive1) AND (UOMQty>0) 
AND BranchId=@BranchId
group by ItemNo
)  
";

                #endregion

                #endregion

                #endregion


                sqlText += @"	
) 
)


AS a GROUP BY a.ItemNo

";
                    #endregion

                #region Insert, Update, Select Data

                sqlText += @"




update #VATTemp_16 set OpeningDate = Products.OpeningDate
from Products
where #VATTemp_16.ItemNo = Products.ItemNo and #VATTemp_16.SerialNo = 'A'

update #VATTemp_16 set Dailydate = OpeningDate
where  #VATTemp_16.SerialNo = 'A' and OpeningDate > Dailydate

insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)

select SerialNo,ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo


update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId


update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'
AND BranchId=@BranchId


select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType, #VAT_16.ItemNo,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by #VAT_16.ItemNo, CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16
DROP TABLE #ProductReceive1          
                ";

                #endregion


                #endregion

                if (vm.BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;
                objCommVAT16.Transaction = transaction;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                objCommVAT16.Parameters.AddWithValue("@BranchId", vm.BranchId);


                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = vm.ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", vm.UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = vm.UserName;
                }
                if (vm.StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", vm.StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = vm.StartDate;
                    }
                } // Common Filed
                if (vm.EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", vm.EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = vm.EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", vm.Post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = vm.Post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", vm.Post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = vm.Post2;
                }

                if (!string.IsNullOrWhiteSpace(vm.ProdutType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", vm.ProdutType);
                }
                else if (!string.IsNullOrWhiteSpace(vm.ProdutCategoryId))
                {
                    if (vm.ProdutCategoryLike == true)
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutGroupName", vm.ProdutGroupName);
                    }
                    else
                    {
                        objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", vm.ProdutCategoryId);
                    }
                }
                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

            }
            #endregion

            #region Catch & Finally

            //catch (SqlException sqlex)
            //{
            //    FileLogger.Log("ReportDSDAL", "MISVAT6_1Toll", sqlex.ToString() + "\n" + sqlText);

            //    throw sqlex;
            //}
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MISVAT6_1Toll", ex.ToString() + "\n" + sqlText);

                if (transaction != null && Vtransaction == null)
                {
                    transaction.Rollback();
                }

                throw ex;
            }
            finally
            {

                if (VcurrConn == null && currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 03

        public DataSet VAT18New(string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();
                decimal WareHouseRentPerQuantity = 0;
                bool CommercialImporter = false;
                var vWareHouseRentPerQuantity = commonDal.settings("Sale", "WareHouseRentPerQuantity");
                var vCommercialImporter = commonDal.settings("CommercialImporter", "CommercialImporter");

                if (!string.IsNullOrEmpty(vWareHouseRentPerQuantity))
                    WareHouseRentPerQuantity = Convert.ToDecimal(vWareHouseRentPerQuantity);

                if (!string.IsNullOrEmpty(vCommercialImporter))
                    CommercialImporter = Convert.ToString(vCommercialImporter) == "Y" ? true : false;

                string gototop = string.Empty;

                #region statement
                // Delete all tarrife type info.
                sqlText = @"
DECLARE @CommercialImporter VARCHAR(200);
DECLARE @WareHouseRentPerQuantity decimal(18,2);
";
                sqlText += @" set @WareHouseRentPerQuantity='" + WareHouseRentPerQuantity + "' ";

                sqlText += @"
--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2015-03-01'
--SET @EndDate='2015-03-25'
--SET @post1='Y';
--SET @post2='N';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
--where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')

UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')


";
                if (CommercialImporter)
                {
                    sqlText += @" 
UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.Quantity),0)*@WareHouseRentPerQuantity*15/100 Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Trading')
";
                }
                else
                {
                    sqlText += @" 
UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Trading')
";
                }
                sqlText += @" 
 
UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL


SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Other','RawSale','ServiceStock','Service','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS','Wastage')

--UNION ALL
--SELECT 'Z9' Sl ,-isnull(sum(SID.VATAmount),0)Amt
--FROM SalesInvoiceDetails SID
--where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
--AND SID.TransactionType IN('debit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')

--add by ruba for calculating ATVAmount of InputServiceImport

UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

UNION ALL

select 'Z17' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

UNION ALL

select 'Z18' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury-Credit')


----close
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,-isnull(DepositAmount,0),'TreasuryCredit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Sale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Other','Wastage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'RawSale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('RawSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
 

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Service',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                if (CommercialImporter)
                {
                    sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.Quantity),0)*@WareHouseRentPerQuantity*15/100,'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                }
                else
                {
                    sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                }
                sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TradingTender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'Export',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportService',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportService')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTrading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTrading')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTradingTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Tender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Tender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Transfer',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('InternalIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Debit',
0,isnull(sum(SID.VATAmount),0),'Debit',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Debit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TollFinishIssue',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TollFinishIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceStock',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceStock')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageSale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageProduction',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageProduction')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ExportPackage',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportPackage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Credit',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'DDB',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat<>0 ) AND Remarks<>'Opening'

--UNION ALL
--select  Serial,  #VAT_18.StartDateTime StartDateTime,
--#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
--isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
--from #VAT_18    where Remarks in ('CreditPayble','ShortageRebatable','TreasuryCredit') AND (vat < 0)

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial, TransID


DROP TABLE #VAT_18

                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;


                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18New", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18New", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #region Unused
        public DataSet VAT18_OldFormat(string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            // Format before 30 June 2014
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement

                //                sqlText = @"
                //
                //";

                #endregion statement

                #region statement

                sqlText = @"
                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2013/10/01'
--SET @EndDate='2013/10/31'
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')

--add by ruba for calculating ATVAmount of InputServiceImport

UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


---close
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Sale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Other')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Service',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TradingTender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'Export',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportService',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportService')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTrading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTrading')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTradingTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Tender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Tender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Transfer',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('InternalIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Debit',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Debit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TollFinishIssue',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TollFinishIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceStock',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceStock')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageSale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageProduction',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageProduction')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ExportPackage',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportPackage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Purchase',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'Purchase',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18


                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18_OldFormat", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18_OldFormat", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet VAT6_2_1Old(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT6_2_1");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction


                #region SQL Statement

                #region SQLText

                sqlText = @"";


                sqlText = @"



--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--DECLARE @ItemNo VARCHAR(200);

--SET @Itemno=559;
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='01/09/2013';
--SET @EndDate='06/09/2023';

declare @Present DECIMAL(25, 9);
CREATE TABLE #VAT_Ka(	[SerialNo] [int] IDENTITY(1,1) NOT NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL)

CREATE TABLE #VATTemp_Ka(	[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL) 

---- start purchase---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(pd.UOMPrice,0),
pd.UOMQty,pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(pd.UOMPrice,0)
,pd.UOMQty,pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-pd.UOMPrice,-pd.UOMQty,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,TransactionType
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')


insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-pd.UOMPrice,-pd.UOMQty,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')
---- end purchase---

-------- Start Sale---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Sale'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Other')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Service')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Trading')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,
CurrencyValue*VATRate/100,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Export')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Tender')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Debit')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo,- UOMPrice,-( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )Quantity,-VATAmount,-SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('TollFinishIssue')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('ServiceStock')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Transfer'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('InternalIssue')
------ end Sale---


SELECT @Present= COUNT(itemno) FROM #VATTemp_Ka
where  ItemNo=@ItemNo
--IF (@Present =0)
--BEGIN
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
 VALUES(@StartDate,@StartDate,0,'Opening',0,@ItemNo,0,0,0,0,'Opening')			    
--END

insert into #VAT_Ka(ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks)
select @ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks
from #VATTemp_Ka
where  #VATTemp_Ka.ItemNo=@ItemNo
order by dailydate

------- Starting Qty
SET ROWCOUNT 1

update #VAT_Ka set 
StartingQuantity=isnull(Products.OpeningBalance,0)

+isnull(Purchase.PurchaseQuantity,0)-isnull(PurchaseR.PurchaseQuantity,0)
-isnull(sale.SaleQuantity ,0)-isnull(saleE.SaleQuantity ,0)+isnull(saleC.SaleQuantity ,0)
,StartingAmount=(isnull(Products.CostPrice,0)*isnull(Products.OpeningBalance,0))

+isnull(Purchase.PurchaseAmount,0)-isnull(PurchaseR.PurchaseAmount,0)

-isnull(sale.SaleAmount,0)-isnull(saleE.SaleAmount,0)+isnull(saleC.SaleAmount,0)

from Products 
----------Purchase Start --------
left outer join
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount 
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('Other','PurchaseCN','Trading','TradingImport','TollReceive','InputService','Import','TollReceiveRaw') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) Purchase on Products.ItemNo=Purchase.itemno 

left outer JOIN
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('PurchaseReturn','PurchaseDN') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) PurchaseR on Products.ItemNo=PurchaseR.itemno 

----------Purchase End --------

----------Sale Start --------

left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('other','Service','Trading','Tender','Debit','TollFinishIssue','ServiceStock','InternalIssue')
group by ItemNo
) Sale on Products.ItemNo=Sale.ItemNo  left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(CurrencyValue,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('Export')
group by ItemNo
) SaleE on Products.ItemNo=SaleE.ItemNo  left outer JOIN

(select distinct ItemNo, SUM( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails  LEFT OUTER JOIN
SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
where SalesInvoiceDetails.InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo 
AND (UOMQty>0)

AND (SalesInvoiceDetails.Post =@post1 or SalesInvoiceDetails.Post= @post2)
AND sih.TransactionType IN('Credit')
group by ItemNo
) SaleC on Products.ItemNo=SaleC.ItemNo 
where Products.ItemNo=@ItemNo

----------Sale End --------

SET ROWCOUNT 0
------- Starting Qty end

update #VAT_Ka set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='Purchase'

update #VAT_Ka set 
VendorID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='sale'

select #VAT_Ka.VendorID, #VAT_Ka.SerialNo,convert (varchar,#VAT_Ka.StartDateTime,120)StartDateTime,
#VAT_Ka.StartingQuantity,#VAT_Ka.StartingAmount
,TransID,#VAT_Ka.TransType,
case when #VAT_Ka.TransType='purchase' then isnull(v.VendorName,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.CustomerName,'-') 
else '-' end as VendorName

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address1,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address1,'-') 
else '-' end as Address1

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address2,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address2,'-') 
else '-' end as Address2

,case when #VAT_Ka.TransType='purchase' then isnull(v.Address3,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.Address3,'-') 
else '-' end as Address3

,case when #VAT_Ka.TransType='purchase' then isnull(v.VATRegistrationNo,'-') 
when #VAT_Ka.TransType='sale' then isnull(c.VATRegistrationNo,'-') 
else '-' end as VATRegistrationNo

--,isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
--isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
--isnull(v.VATRegistrationNo,'-')VATRegistrationNo,

--isnull(c.CustomerName,'-')CustomerName,isnull(c.Address1,'-')CustAddress1,
--isnull(c.Address2,'-')CustAddress2,isnull(c.Address3,'-')CustAddress3,
--isnull(c.VATRegistrationNo,'-')CustVATRegistrationNo,

,p.ProductName,#VAT_Ka.Quantity,#VAT_Ka.VATRate,#VAT_Ka.SD,#VAT_Ka.UnitCost,p.HSCodeNo,#VAT_Ka.BENumber,#VAT_Ka.InvoiceDateTime,#VAT_Ka.Remarks
from #VAT_Ka left outer join
Vendors as V on #VAT_Ka.VendorID=v.VendorID and #VAT_Ka.TransType='purchase' left outer join 
Customers as C on #VAT_Ka.VendorID=c.CustomerID and #VAT_Ka.TransType='sale' left outer join 
Products P on #VAT_Ka.ItemNo=p.ItemNo
where  #VAT_Ka.ItemNo=@ItemNo
order by #VAT_Ka.SerialNo

DROP TABLE #VAT_Ka
DROP TABLE #VATTemp_Ka



";

                #endregion



                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn);

                #endregion

                #region Parameter

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2_1Old", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT6_2_1Old", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet BOMNew_Backup_01072019(string BOMId, string VATName, string IsPercent, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1");

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"

--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @IsPercent AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @IsPercent='Y';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

DECLARE @WithOverhead AS VARCHAR(200);
select @WithOverhead=settingValue from Settings where SettingGroup='BOM' and SettingName='TollIssueCostWithOthers'
 

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

IF(@VATName='VAT 4.3 (Toll Issue)' and @WithOverhead='N')

	BEGIN
SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RebateTotal RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  
--pc.CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.BOMId=@BOMId  

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,
--isnull(CategoryName,'NA')CategoryName,
case when CHARINDEX ('(',CategoryName,1)>0 and CHARINDEX (')',CategoryName,1)>0 then  substring(isnull(CategoryName,'N/A'),CHARINDEX ('(',CategoryName,1)+1,(CHARINDEX (')',CategoryName,1)-CHARINDEX ('(',CategoryName,1))-1) else isnull(CategoryName,'N/A') end CategoryName

,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, '-'UOM, b.EffectDate, 0 UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 ) and b.RawItemType  IN('Overhead')

)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId
	END
ELSE
BEGIN


SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo, 
--pc.CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName
, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo  LEFT OUTER JOIN 
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.BOMId=@BOMId 

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
	SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType NOT IN('Finish','Overhead','Raw','Pack')
UNION
SELECT 'B' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType IN('Finish')
UNION
SELECT 'C' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType IN('Raw')
UNION
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType  IN('Pack')

UNION
SELECT 'E' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo,
CASE WHEN @IsPercent='Y' THEN '%' ELSE '-' END AS UOM,
b.EffectDate, 0 UseQuantity,
0 WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost,
 CASE WHEN @IsPercent='Y' THEN  isnull(b.RebateRate,0) ELSE 0 END AS TotalQuantity,
b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.BOMId=@BOMId 
AND (b.cost>0  ) and b.RawItemType  IN('Overhead')
)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId

	END

--SELECT b.BOMId, b.OHLineNo, 
--
--b.HeadName HeadNameOld,
--p.ProductCode OHCode,p.ProductName HeadName,
-- b.EffectDate, b.VATName, b.HeadAmount,
--b.RebatePercent, b.RebateAmount, b.AdditionalCost
--FROM BOMCompanyOverhead  b 
-- LEFT OUTER JOIN
--products p ON HeadID=p.ItemNo
--
--WHERE b.BOMId=@BOMId 
--AND b.AdditionalCost>0

select * from(
SELECT 'A'Sl, b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo

WHERE b.BOMId=@BOMId 
AND b.AdditionalCost>0
and p.ProductName not in('Margin','estimated profit')
--order by p.ProductName
union all
SELECT 'B'Sl, b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo

WHERE b.BOMId=@BOMId 
AND b.AdditionalCost>0
and p.ProductName  in('Margin','estimated profit')
--order by p.ProductName
) as a order by  a.Sl,a.HeadName--a.Sl,a.HeadName

INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.BOMId=@BOMId 
                 AND isnull(b.PBOMId,0) >0) AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType  IN('Raw')

UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.BOMId=@BOMId 
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId

SELECT b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
LEFT OUTER JOIN
products p ON HeadID=p.ItemNo
WHERE b.BOMId IN(
SELECT b.PBOMId FROM BOMRaws b
WHERE b.BOMId=@BOMId 

AND isnull(b.PBOMId,0) >0)
AND b.AdditionalCost>0



DROP TABLE #BOMRaws



";

                #endregion SQL Statement



                #region SQL Command

                SqlCommand objCommVAT1 = new SqlCommand();
                objCommVAT1.Connection = currConn;
                objCommVAT1.CommandText = sqlText;
                objCommVAT1.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1.Parameters.Contains("@IsPercent"))
                {
                    objCommVAT1.Parameters.AddWithValue("@IsPercent", IsPercent);
                }
                else
                {
                    objCommVAT1.Parameters["@IsPercent"].Value = IsPercent;
                }

                if (!objCommVAT1.Parameters.Contains("@BOMId"))
                {
                    objCommVAT1.Parameters.AddWithValue("@BOMId", BOMId);
                }
                else
                {
                    objCommVAT1.Parameters["@BOMId"].Value = BOMId;
                }
                CommonDAL commonDal = new CommonDAL();
                bool TollIssueWithRaw = false;

                TollIssueWithRaw = Convert.ToBoolean(commonDal.settingValue("BOM", "VAT4_3(TollIssue)WithRaw") == "Y" ? true : false);
                if (!TollIssueWithRaw)
                {
                    if (!objCommVAT1.Parameters.Contains("@VATName"))
                    {
                        objCommVAT1.Parameters.AddWithValue("@VATName", VATName);
                    }
                    else
                    {
                        objCommVAT1.Parameters["@VATName"].Value = VATName;
                    }
                }
                else
                {
                    if (!objCommVAT1.Parameters.Contains("@VATName"))
                    {
                        objCommVAT1.Parameters.AddWithValue("@VATName", "");
                    }
                    else
                    {
                        objCommVAT1.Parameters["@VATName"].Value = "";
                    }

                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BOMNew_Backup_01072019", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BOMNew_Backup_01072019", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        public DataSet SD_Data(string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region SQL Statement

                sqlText = @"


";

                #endregion

                #region SQL Statement

                sqlText = @"

--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='05/01/2013';
--SET @EndDate='05/31/2013';
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
CREATE TABLE #VAT_SDDep(	[StartDateTime] [datetime] NULL,[ReceiveDate] [datetime] NULL,	
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,	
[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL) 

SET @PVat=0;
select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0) Amt from  SDDeposits 
WHERE REPLACE(TransactionType,' ','') IN('Treasury-Opening')
AND (Post =@post1 or Post= @post2)
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0) Amt from  SDDeposits 
where DepositDateTime <  @StartDate AND TransactionType IN('Treasury') 
AND (Post =@post1 or Post= @post2)
UNION ALL
SELECT  'Z3' Sl ,  isnull(sum( SID.SDAmount) ,0) Amt    from  SalesInvoiceDetails SID
where SID.invoicedatetime <   @StartDate 
AND SID.TransactionType IN('Credit')
AND (SID.Post =@post1 or SID.Post= @post2)
UNION ALL
SELECT  'Z4' Sl , -isnull(sum( SID.SDAmount) ,0)  Amt   from  SalesInvoiceDetails SID
where SID.invoicedatetime <   @StartDate 
AND SID.TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit'
,'InternalIssue','TollFinishIssue','PackageSale','ServiceNS')

AND (SID.Post =@post1 or SID.Post= @post2)
UNION ALL

SELECT 'Z5' Sl ,  -isnull(sum( SID.SDAmount) ,0) Amt    from  SalesInvoiceDetails SID
where SID.invoicedatetime <   @StartDate 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender'
,'ExportTrading','ExportTradingTender','ExportPackage')
AND (SID.Post =@post1 or SID.Post= @post2)

UNION ALL

select 'Z6' Sl ,-isnull(sum(DepositAmount),0) Amt from  SDDeposits 
WHERE REPLACE(TransactionType,' ','') IN('Treasury-Opening-Credit')
AND (Post =@post1 or Post= @post2)

UNION ALL

select 'Z7' Sl ,-isnull(sum(DepositAmount),0) Amt from  SDDeposits 
where DepositDateTime <  @StartDate AND TransactionType IN('Treasury-Credit') 
AND (Post =@post1 or Post= @post2)

)AS a 

insert into #VAT_SDDep( StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
values(@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening')

insert into #VAT_SDDep(    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks)
select     DepositDateTime DepositDateTime, DepositDateTime ,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit'
from  SDDeposits    where DepositDateTime >=@StartDate and DepositDateTime < DATEADD(d,1, @EndDate)
AND TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_SDDep(    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks)
select     DepositDateTime DepositDateTime, DepositDateTime ,
depositId,'Deposit',0,-isnull(DepositAmount,0),'Credit Deposit'
from  SDDeposits    where DepositDateTime >=@StartDate and DepositDateTime < DATEADD(d,1, @EndDate)
AND TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Sale'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Other')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Service'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service') 
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Trading'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Trading')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'TradingTender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('TradingTender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'Export'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportService'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportService')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportServiceNS'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportServiceNS')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportTender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportTender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportTrading'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportTrading')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportTradingTender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportTradingTender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportPackage'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportPackage')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Tender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Tender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'PackageSale'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('PackageSale')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'ServiceNS'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ServiceNS')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Transfer'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('InternalIssue')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Debit'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Debit')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'TollFinishIssue'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('TollFinishIssue')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Service'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ServiceStock')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.SDAmount),0),'Credit'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Credit')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo


select StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
select     #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate  ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep   where   Remarks='Opening'

UNION ALL

select     #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep    where   (vat>0 ) AND Remarks<>'Opening'

UNION all

select   #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep    where  Remarks IN ('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0

UNION ALL

select     #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate ReceiveDate,TransID,TransType, 
-isnull(StartingVAT,0)StartingVAT,-isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep    where  Remarks in ('Credit Deposit')

) AS a ORDER BY StartDateTime


DROP TABLE #VAT_SDDep

";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SD_Data", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SD_Data", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT19NewNewformat(string PeriodName, string ExportInBDT, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction


                // create combine table


                string gotoTop = string.Empty;
                CommonDAL commonDal = new CommonDAL();

                string CommercialImporter = commonDal.settings("CommercialImporter", "CommercialImporter");
                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement
                #region declare
                sqlText = @"



--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='October-2014';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown([LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]

CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY] 


CREATE TABLE #VAT19NewFormat(	[MonthName] [datetime] NULL,	
 [Line1A] [decimal](25, 9) NULL,[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL
,[Line2A] [decimal](25, 9) NULL,[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL
,[Line3A] [decimal](25, 9) NULL,[Line3B] [decimal](25, 9) NULL,	[Line3C] [decimal](25, 9) NULL
,[Line4A] [decimal](25, 9) NULL,[Line4B] [decimal](25, 9) NULL,	[Line4C] [decimal](25, 9) NULL
,[Line5A] [decimal](25, 9) NULL,[Line5B] [decimal](25, 9) NULL,	[Line5C] [decimal](25, 9) NULL
,[Line6A] [decimal](25, 9) NULL,[Line6B] [decimal](25, 9) NULL,	[Line6C] [decimal](25, 9) NULL
,[Line7A] [decimal](25, 9) NULL
,[Line8A] [decimal](25, 9) NULL,[Line8B] [decimal](25, 9) NULL 
,[Line9A] [decimal](25, 9) NULL,[Line9B] [decimal](25, 9) NULL 
,[Line10A] [decimal](25, 9) NULL,[Line10B] [decimal](25, 9) NULL 
,[Line11A] [decimal](25, 9) NULL,[Line11B] [decimal](25, 9) NULL 
,[Line12A] [decimal](25, 9) NULL,[Line12B] [decimal](25, 9) NULL 
,[Line13A] [decimal](25, 9) NULL,[Line13B] [decimal](25, 9) NULL 
,[Line14A] [decimal](25, 9) NULL,[Line14B] [decimal](25, 9) NULL 
,[Line15A] [decimal](25, 9) NULL,[Line15B] [decimal](25, 9) NULL 
,[Line16A] [decimal](25, 9) NULL
,[Line17A] [decimal](25, 9) NULL
,[Line18A] [decimal](25, 9) NULL
,[Line19A] [decimal](25, 9) NULL
,[Line20A] [decimal](25, 9) NULL
,[Line21A] [decimal](25, 9) NULL
,[Line22A] [decimal](25, 9) NULL
,[Line23A] [decimal](25, 9) NULL
,[Line24A] [decimal](25, 9) NULL
,[Line25A] [decimal](25, 9) NULL
,[Line26A] [decimal](25, 9) NULL
,[Line27A] [decimal](25, 9) NULL
,[Line28A] [decimal](25, 9) NULL
,[Line29A] [decimal](25, 9) NULL
,[Line30A] [decimal](25, 9) NULL
,[Line31A] [decimal](25, 9) NULL
,[Line32A] [decimal](25, 9) NULL
,[Line33A] [decimal](25, 9) NULL
,[Line34A] [decimal](25, 9) NULL
,[Line35A] [decimal](25, 9) NULL
) ON [PRIMARY] 
 ";
                #endregion declare
                #region 1-19
                sqlText += @"
----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','12','Sale Local(Raw)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('RawSale')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.TradeVATableValue),0),0,
isnull(sum(SID.TradeVATAmount),0),'1','13','Sale(CommercialImporter)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('CommercialImporter')

--------------------

-------1 end-------
 

-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN
	INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','1','Export in BDT(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2','Export in BDT(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','4','Export in BDT(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','5','Export in BDT(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','6','Export in BDT(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','7','Export in BDT(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')
END
ELSE
	BEGIN
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

	END
-------2 end-------
 

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end
 

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----
 

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','2','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','4','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','5','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----
 

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----
 

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
 


-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
--,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
 

---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----
 

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount


------------------
";
                if (CommercialImporter.ToLower() == "y")
                {
                    sqlText += @"
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT       isnull(sum(TradeVATAmount),0)  
,0,0,'12','4','ATV Amount'
FROM SalesInvoiceDetails 
where post='Y'
 and InvoiceDateTime>= @Datefrom and  InvoiceDateTime <dateadd(d,1,@Dateto)
";
                }
                else
                {
                    sqlText += @"
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(ATVAmount),0) ,0,0,'12','4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)
";
                }
                sqlText += @"

-------12 End----
 

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','2','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','3','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','4','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','6','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','7','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','8','Purchase InputServiceImport Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','9','Purchase ATV Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
 

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','10','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','11','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','12','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','13','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','14','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','15','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','16','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','17','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','18','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','19','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','20','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','21','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','22','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','23','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','24','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','25','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------
 

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----

 


--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----
 

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'19','1','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')
-------19 End----
 ";
                #endregion 1-19

                #region Update #VAT 19 from #VAT19BreakDown

                sqlText += @"
   
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

INSERT INTO #VAT19NewFormat(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19NewFormat SET 
Line1A = isnull(0,0),
Line1B = isnull(0,0),
Line1C = isnull(0,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19NewFormat SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2
and SubLineNumber between 1 and 7
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line3A =  isnull(V191.A,0),Line3B = isnull(V191.b,0),Line3c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3
and SubLineNumber in(1,2,3,4,5,6,9,10,11,12)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line4A =  isnull(V191.A,0)
,Line4B = isnull(V191.c,0)
,Line4c = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1
and SubLineNumber in(1,2,3,4,5,6,9,10,11,12)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line5A = isnull(0,0),
Line5B = isnull(0,0),
Line5C = isnull(0,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19NewFormat SET 
Line6A = isnull(0,0),
Line6B = isnull(0,0),
Line6C = isnull(0,0) 

UPDATE #VAT19NewFormat SET 
Line7A = isnull(Line4B,0)+isnull(Line4C,0)+isnull(Line5B,0)+isnull(Line5C,0)+isnull(Line6B,0)+isnull(Line6C,0)


UPDATE #VAT19NewFormat SET 
Line8A =  isnull(V191.A,0)
,Line8B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10
and SubLineNumber in(1,3,4,6,7,8,9,14,15)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line9A =  isnull(V191.A,0)
,Line9B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10
and SubLineNumber in(2,5,12,13)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line10A = isnull(0,0),
Line10B = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line11A = isnull(0,0),
Line11B = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line12A =  isnull(V191.A,0)
,Line12B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7
and SubLineNumber between 1 and 12
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line13A =  isnull(V191.A,0)
,Line13B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8
and SubLineNumber between 1 and 12
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line14A =  isnull(V191.A,0)
,Line14B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10
and SubLineNumber in(10,11)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line15A = isnull(0,0),
Line15B = isnull(0,0)

UPDATE #VAT19NewFormat SET  Line16A = isnull(Line12B,0) +isnull(Line13B,0) +isnull(Line14B,0) 

UPDATE #VAT19NewFormat SET 
Line17A =  isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5
and SubLineNumber in(1,2)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line18A = isnull(0,0)
UPDATE #VAT19NewFormat SET Line19A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line20A =  isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5
and SubLineNumber in(3,4,5)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET  Line21A = isnull(Line17A,0) + isnull(Line18A,0)  + isnull(Line19A,0)   + isnull(Line20A,0)  
  
UPDATE #VAT19NewFormat SET Line22A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line23A =  -1*  isnull(V191.C,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 
and SubLineNumber in(7,8)
GROUP BY LineNumber) AS V191


UPDATE #VAT19NewFormat SET Line24A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line25A =  isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 
and SubLineNumber in(2,3)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET  Line26A = isnull(Line22A,0) + isnull(Line23A,0)  + isnull(Line24A,0)   + isnull(Line25A,0)  

UPDATE #VAT19NewFormat SET  Line27A = isnull(Line7A,0) - isnull(Line16A,0)  + isnull(Line21A,0)  - isnull(Line26A,0)  

UPDATE #VAT19NewFormat SET 
Line28A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 
and SubLineNumber in(4)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line29A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 
and SubLineNumber in(1)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line30A = isnull(0,0)
UPDATE #VAT19NewFormat SET Line31A = isnull(0,0)
--UPDATE #VAT19NewFormat SET  Line32A =isnull(Line27A,0)- isnull(Line28A,0) - isnull(Line29A,0)   

UPDATE #VAT19NewFormat SET 
Line32A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 
--and SubLineNumber in(1,2)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line33A = isnull(0,0)
UPDATE #VAT19NewFormat SET Line34A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line35A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 
--and SubLineNumber in(1,2)
GROUP BY LineNumber) AS V191

  ";
                sqlText += @" SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber ";
                sqlText += @" SELECT #VAT19NewFormat.*,isnull(@MLock,'N')MLock FROM #VAT19NewFormat   ";

                sqlText += @"
DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19NewFormat
DROP TABLE #VAT19
      ";



                #endregion Update #VAT 19 from #VAT19BreakDown

                #endregion


                gotoTop = string.Empty;

                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT19NewNewformat", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT19NewNewformat", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT18Breakdown(string PeriodName, string ExportInBDT, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"
 
 

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='July-2016';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] varchar(100),	[SubLineNumber] varchar(100),	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
 
----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','1_8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN
	INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_1','Export in BDT(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_2','Export in BDT(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_3','Export in BDT(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_4','Export in BDT(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_5','Export in BDT(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_6','Export in BDT(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_7','Export in BDT(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')
END
ELSE
	BEGIN
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','3_8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','4_1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','5_1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','5_1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','5_2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','5_3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','5_3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','6_1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','7_3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','7_5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','7_10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','7_11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','7_14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
--,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','8_5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','8_11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','8_12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','9_1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','10_1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','10_2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','10_3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','10_6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','10_7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10_10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10_11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','11_1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','12_1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','12_2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','12_3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(ATVAmount),0),0,
0,'12','12_4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)

------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','13_0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','13_0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','13_1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','13_1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','13_2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','13_3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','13_4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','13_4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','13_4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
------

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','13_5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','13_6','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','13_7','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','13_8','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','13_9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','13_10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','13_11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','13_12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13_13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13_13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13_14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13_14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','13_15','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','13_16','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','13_17','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','13_18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','14_1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','15_1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','16_1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','16_1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','16_2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','16_2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','16_3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','16_3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','16_4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','16_4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','17_1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','16_1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','19_1','Total VDS for supplier')
-------19 End----
 select SL,SubSL,LineNumber,A  from(
select distinct 'A' SL ,'A1' SubSL,'Opening Balance(VAT-18)' LineNumber, sum(A)A  from #VAT19BreakDown
 where LineNumber in(13)
 group by LineNumber
 union all 
 select distinct 'A' ,'B1' , 'Rebate from Import Purchase',   sum(B)B  from #VAT19BreakDown
 where LineNumber in(8)
 group by LineNumber
 union all
 select distinct 'A' ,'C1',  'Rebate from Local Purchase',   sum(B)B  from #VAT19BreakDown
 where LineNumber in(7) and SubLineNumber not in('7_3','7_5')
 group by LineNumber
  union all
 select distinct 'A' ,'D1',  'Rebate from Service Purchase',   sum(B)B  from #VAT19BreakDown
 where LineNumber in(7) and SubLineNumber in('7_5')
 group by LineNumber
   union all
 select distinct 'A' ,'E1',  'Adjustment (Purchase Return)',   -sum(B)B  from #VAT19BreakDown
 where LineNumber in(7) and SubLineNumber in('7_3')
 group by LineNumber

 

     union all
 select  'A' ,'F1', 'Treasury Deposit(Without VDS)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber not in('16_2','16_3')
     union all
 select distinct 'A' ,'G1', 'Treasury Deposit(VDS)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber  in('16_2')
   union all
 select distinct 'A' ,'G2', 'Treasury Deposit( Cash/Credit Payble)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber  in('16_3')

      union all
 select  'B' ,'H1', 'Less Payble VAT (Sale)',  sum(C)C from #VAT19BreakDown
 where LineNumber in(1,2,3,4) and SubLineNumber not in('1_7','1_8')
      union all
 select  'B' ,'I1', 'Adjustment(Debit Note)', sum(C)C  from #VAT19BreakDown
 where LineNumber in(1) and SubLineNumber in ('1_7')
       union all
 select  'B' ,'J1', 'Adjustment(Credit Note)', sum(C)C  from #VAT19BreakDown
 where LineNumber in(1) and SubLineNumber in ('1_8')
        union all
 select  'B' ,'K1', 'Adjustment(Shortable)',- sum(A)A  from #VAT19BreakDown
 where LineNumber in(12) 
       union all
 select  'B' ,'L1', 'Adjustment(VDS)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber in ('16_2')
      

 ) as VAT18Break

DROP TABLE #VAT19BreakDown


 
";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18Breakdown", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18Breakdown", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet RepFormKaTradingNew(string ItemNo, string UserName, string StartDate, string EndDate,
                                           string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                #region Backup

                sqlText = @"

";

                #endregion Backup

                #region Backup

                sqlText = @"

--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--DECLARE @ItemNo VARCHAR(200);

--SET @Itemno=11;
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='01/09/2013';
--SET @EndDate='06/09/2013';

declare @Present DECIMAL(25, 9);
CREATE TABLE #VAT_Ka(	[SerialNo] [int] IDENTITY(1,1) NOT NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL)

CREATE TABLE #VATTemp_Ka(	[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL) 

---- start purchase---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(pd.UOMPrice,0),
pd.UOMQty,pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(pd.UOMPrice,0)
,pd.UOMQty,pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-pd.UOMPrice,-pd.UOMQty,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,TransactionType
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')


insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-pd.UOMPrice,-pd.UOMQty,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')
---- end purchase---

-------- Start Sale---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Sale'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Other')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Service')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Trading')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,
CurrencyValue*VATRate/100,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Export')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Tender')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Debit')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo,- UOMPrice,-( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )Quantity,-VATAmount,-SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('TollFinishIssue')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('ServiceStock')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Transfer'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('InternalIssue')
------ end Sale---


SELECT @Present= COUNT(itemno) FROM #VATTemp_Ka
where  ItemNo=@ItemNo
IF (@Present =0)
BEGIN
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
 VALUES(@StartDate,@StartDate,0,0,0,@ItemNo,0,0,0,0,'Opening')			    
END

insert into #VAT_Ka(ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks)
select @ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks
from #VATTemp_Ka
where  #VATTemp_Ka.ItemNo=@ItemNo
order by dailydate

------- Starting Qty
SET ROWCOUNT 1

update #VAT_Ka set 
StartingQuantity=isnull(Products.OpeningBalance,0)

+isnull(Purchase.PurchaseQuantity,0)-isnull(PurchaseR.PurchaseQuantity,0)
-isnull(sale.SaleQuantity ,0)-isnull(saleE.SaleQuantity ,0)+isnull(saleC.SaleQuantity ,0)
,StartingAmount=(isnull(Products.CostPrice,0)*isnull(Products.OpeningBalance,0))

+isnull(Purchase.PurchaseAmount,0)-isnull(PurchaseR.PurchaseAmount,0)

-isnull(sale.SaleAmount,0)-isnull(saleE.SaleAmount,0)+isnull(saleC.SaleAmount,0)

from Products 
----------Purchase Start --------
left outer join
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount 
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('Other','PurchaseCN','Trading','TradingImport','TollReceive','InputService','Import','TollReceiveRaw') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) Purchase on Products.ItemNo=Purchase.itemno 

left outer JOIN
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('PurchaseReturn','PurchaseDN') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) PurchaseR on Products.ItemNo=PurchaseR.itemno 

----------Purchase End --------

----------Sale Start --------

left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('other','Service','Trading','Tender','Debit','TollFinishIssue','ServiceStock','InternalIssue')
group by ItemNo
) Sale on Products.ItemNo=Sale.ItemNo  left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(CurrencyValue,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('Export')
group by ItemNo
) SaleE on Products.ItemNo=SaleE.ItemNo  left outer JOIN

(select distinct ItemNo, SUM( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails  LEFT OUTER JOIN
SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
where SalesInvoiceDetails.InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo 
AND (UOMQty>0)

AND (SalesInvoiceDetails.Post =@post1 or SalesInvoiceDetails.Post= @post2)
AND sih.TransactionType IN('Credit')
group by ItemNo
) SaleC on Products.ItemNo=SaleC.ItemNo 
where Products.ItemNo=@ItemNo

----------Sale End --------

SET ROWCOUNT 0
------- Starting Qty end

update #VAT_Ka set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='Purchase'

select #VAT_Ka.SerialNo,convert (varchar,#VAT_Ka.StartDateTime,120)StartDateTime,
#VAT_Ka.StartingQuantity,#VAT_Ka.StartingAmount
,TransID,#VAT_Ka.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_Ka.Quantity,#VAT_Ka.VATRate,#VAT_Ka.SD,#VAT_Ka.UnitCost,p.HSCodeNo,#VAT_Ka.BENumber,#VAT_Ka.InvoiceDateTime,#VAT_Ka.Remarks
from #VAT_Ka left outer join
Vendors as V on #VAT_Ka.VendorID=v.VendorID left outer join 
Products P on #VAT_Ka.ItemNo=p.ItemNo
where  #VAT_Ka.ItemNo=@ItemNo
order by #VAT_Ka.SerialNo

DROP TABLE #VAT_Ka
DROP TABLE #VATTemp_Ka

";

                #endregion Backup


                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "RepFormKaTradingNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "RepFormKaTradingNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VDS12KhaNew(string VendorId, string DepositNumber, string DepositDateFrom, string DepositDateTo,
                                   string IssueDateFrom, string IssueDateTo, string BillDateFrom, string BillDateTo,
                                   string PurchaseNumber, bool chkPurchaseVDS, bool chkAll, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDS12Kha");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                if (chkPurchaseVDS == true)
                {
                    sqlText = @"
SELECT 	
VDSId
,vds.VendorId
,v.VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
";
                }
                else
                {
                    sqlText += @"
SELECT 	
VDSId
,vds.VendorId
,v.CustomerName VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.CustomerGroupName VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
";
                }

                sqlText += @"
,VDS.VDSId
,isnull(BillAmount,0) PayAmount
,convert (varchar(200),VDS.BillDate,120)PayDate
,isnull(BillDeductAmount,0) DeductAmount
,isnull(DepositNumber,'NA') DepositNumber
,convert (date,VDS.DepositDate,101)DepositDate
,isnull(Remarks,'NA')Remarks

, VDS.IssueDate IssueDate
,isnull(d.TreasuryNo,0) TreasuryNo
,isnull(DepositPerson,'NA') DepositPerson
,isnull(DepositPersonDesignation,'NA') DepositPersonDesignation
,isnull(DepositPersonContactNo,'NA') DepositPersonContactNo
,isnull(DepositPersonAddress,'NA') DepositPersonAddress


                            FROM VDS	LEFT OUTER JOIN 
                            Deposits d ON vds.VDSId=d.DepositId LEFT OUTER JOIN 
";
                if (chkPurchaseVDS == true)
                {
                    sqlText += @"  Vendors v ON vds.VendorId=v.VendorID LEFT OUTER JOIN
                            VendorGroups vg ON v.VendorGroupID=vg.VendorGroupID

                            WHERE 	(vds.VendorId  LIKE '%' +  @VendorId + '%' OR @VendorId IS NULL) 
                            AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                             ";
                }
                else
                {
                    sqlText += @"  Customers v ON vds.VendorId=v.CustomerID LEFT OUTER JOIN
                            CustomerGroups vg ON v.CustomerGroupID=vg.CustomerGroupID

                            WHERE 	(vds.VendorId  LIKE '%' +  @VendorId + '%' OR @VendorId IS NULL) 
                            AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                             ";
                }


                #endregion

                #region SQL Command

                SqlCommand objCommVDS = new SqlCommand();
                objCommVDS.Connection = currConn;

                objCommVDS.CommandText = sqlText;
                objCommVDS.CommandType = CommandType.Text;

                #endregion

                #region Parameter
                if (chkAll)
                {

                    if (!objCommVDS.Parameters.Contains("@VendorId"))
                    {
                        objCommVDS.Parameters.AddWithValue("@VendorId", "");
                    }
                    else
                    {
                        objCommVDS.Parameters["@VendorId"].Value = "";
                    }
                }
                else
                {
                    if (!objCommVDS.Parameters.Contains("@VendorId"))
                    {
                        objCommVDS.Parameters.AddWithValue("@VendorId", VendorId);
                    }
                    else
                    {
                        objCommVDS.Parameters["@VendorId"].Value = VendorId;
                    }
                }

                if (!objCommVDS.Parameters.Contains("@DepositNumber"))
                {
                    objCommVDS.Parameters.AddWithValue("@DepositNumber", DepositNumber);
                }
                else
                {
                    objCommVDS.Parameters["@DepositNumber"].Value = DepositNumber;
                }
                //if (!objCommVDS.Parameters.Contains("@PurchaseNumber"))
                // { objCommVDS.Parameters.AddWithValue("@PurchaseNumber", PurchaseNumber); }
                //else { objCommVDS.Parameters["@PurchaseNumber"].Value = PurchaseNumber; }
                //if (!objCommVDS.Parameters.Contains("@DepositDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@DepositDateFrom", DepositDateFrom); }
                //else { objCommVDS.Parameters["@DepositDateFrom"].Value = DepositDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@DepositDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@DepositDateTo", DepositDateTo); }
                //else { objCommVDS.Parameters["@DepositDateTo"].Value = DepositDateTo; }
                //if (!objCommVDS.Parameters.Contains("@IssueDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@IssueDateFrom", IssueDateFrom); }
                //else { objCommVDS.Parameters["@IssueDateFrom"].Value = IssueDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@IssueDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@IssueDateTo", IssueDateTo); }
                //else { objCommVDS.Parameters["@IssueDateTo"].Value = IssueDateTo; }
                //if (!objCommVDS.Parameters.Contains("@BillDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@BillDateFrom", BillDateFrom); }
                //else { objCommVDS.Parameters["@BillDateFrom"].Value = BillDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@BillDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@BillDateTo", BillDateTo); }
                //else { objCommVDS.Parameters["@BillDateTo"].Value = BillDateTo; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVDS);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VDS12KhaNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VDS12KhaNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT24(string ddbackno, string ddbFinishItemNo, string SalesInvoiceNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT24");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                

SELECT
d.DDBackNo
,convert (varchar,d.DDBackDate,120)DDBackDate
,d.BillOfEntry
,SD.SalesInvoiceNo
,pid.TransactionType
,FpC.CategoryName FinishCatagoryName
,fpc.israw FinishType
,d.FgItemNo
,pF.ProductName FinishGoodsName
,pF.ProductDescription FinishGoodsDescription
,pF.HSCodeNo FHSCode
,RpC.CategoryName RawCatagoryName
,d.ItemNo
,pR.ProductName RowGoodsName
,pR.ProductDescription RawGoodsDescription
,pR.HSCodeNo RHSCode
,rpc.IsRaw RawType
,d.PurchaseUom
,sd.UOM FUOM
,d.PurchaseQuantity PurchaseQuantity
,d.UseQuantity UsedQuantity
,d.UnitPrice PerUnitCost
,(d.ClaimCD/isnull(d.FGQty,0)+d.ClaimRD/isnull(d.FGQty,0)) ImportDuty
,(d.ClaimSD/isnull(d.FGQty,0)) SDOtherDuty
,d.VAT
,d.PurchaseInvoiceNo
,d.AV
,d.CD
,d.RD
,d.SD
,d.CnF
,d.Insurance
,d.TVB
,d.TVA
,d.ATV
,d.Others
,d.UseQuantity
,d.ClaimCD/isnull(d.FGQty,0)ClaimCD
,d.ClaimRD/isnull(d.FGQty,0)ClaimRD
,d.ClaimSD/isnull(d.FGQty,0)ClaimSD
,d.ClaimVAT/isnull(d.FGQty,0)ClaimVAT
,d.ClaimCnF/isnull(d.FGQty,0)ClaimCnF
,d.ClaimInsurance/isnull(d.FGQty,0)ClaimInsurance
,d.ClaimTVB/isnull(d.FGQty,0)ClaimTVB
,d.ClaimTVA/isnull(d.FGQty,0)ClaimTVA
,d.ClaimATV/isnull(d.FGQty,0)ClaimATV
,d.ClaimOthers/isnull(d.FGQty,0)ClaimOthers
,d.SubTotalDDB/isnull(d.FGQty,0)SubTotalDDB
,d.UOMc
,d.UOMn
,d.UOMCD
,d.UOMRD
,d.UOMSD
,d.UOMVAT
,d.UOMCnF
,d.UOMInsurance
,d.UOMTVB
,d.UOMTVA
,d.UOMATV
,d.UOMOthers
,d.UOMSubTotalDDB
,d.PurchaseInvoiceNo
--,isnull(d.FGQty,0) FGQty

FROM dbo.DutyDrawBackDetails d
LEFT OUTER JOIN PurchaseInvoiceHeaders pid on d.PurchaseInvoiceNo=pid.PurchaseInvoiceNo
left outer JOIN Products pR on pR.ItemNo=d.ItemNo
left outer join Products pF on pF.ItemNo=d.FgItemNo
left outer join ProductCategories FpC on FpC.CategoryID=pF.CategoryID
left outer join ProductCategories RpC on RpC.CategoryID=pR.CategoryID
LEFT OUTER join (SELECT DISTINCT pid.SalesInvoiceNo,pid.UOM,pid.ItemNo
FROM SalesInvoiceDetails pid WHERE ItemNo=@ddbFinishItemNo AND SalesInvoiceNo=@SalesInvoiceNo)sd on d.FgItemNo=sd.ItemNo AND D.SalesInvoiceNo=SD.SalesInvoiceNo


where d.DDBackNo=@ddbackno
and d.FGQty>0 and d.UseQuantity>0  AND d.FgItemNo=@ddbFinishItemNo
order by pF.ProductName,pid.TransactionType,rpc.IsRaw


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ddbackno"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbackno", ddbackno);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbackno"].Value = ddbackno;
                }
                if (!objCommVAT16.Parameters.Contains("@ddbFinishItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbFinishItemNo", ddbFinishItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbFinishItemNo"].Value = ddbFinishItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommVAT16.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }
                //if (StartDate == "")
                //{
                //    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value); }
                //    else { objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value; }
                //}
                //else
                //{
                //    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate); }
                //    else { objCommVAT16.Parameters["@StartDate"].Value = StartDate; }
                //}// Common Filed
                //if (EndDate == "")
                //{
                //    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value); }
                //    else { objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value; }
                //}
                //else
                //{
                //    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate); }
                //    else { objCommVAT16.Parameters["@EndDate"].Value = EndDate; }
                //}

                //if (!objCommVAT16.Parameters.Contains("@post1"))
                //{ objCommVAT16.Parameters.AddWithValue("@post1", post1); }
                //else { objCommVAT16.Parameters["@post1"].Value = post1; }

                //if (!objCommVAT16.Parameters.Contains("@post2"))
                //{ objCommVAT16.Parameters.AddWithValue("@post2", post2); }
                //else { objCommVAT16.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT24", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT24", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT22(string ddbackno, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT22");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                


SELECT DISTINCT d.FgItemNo,
convert (varchar,d.DDBackDate,120)DDBackDate
,pF.ProductName  FinishGoodsName
,pF.HSCodeNo FHSCode
 ,pF.UOM 
,d.SalesInvoiceNo
 ,cur.CurrencyCode

,sd.SubTotal ForeignCurrency,sd.CurrencyValue LocalCurrency
,d.FgQty Quantity
,SUM(d.SubTotalDDB)/d.FgQty DutyDrawBackPerQuantity
,SUM(d.SubTotalDDB) TotalDutyDrawBack
FROM DutyDrawBackDetails d LEFT OUTER JOIN
SalesInvoiceDetails sd on d.FgItemNo=sd.ItemNo AND d.SalesInvoiceNo= sd.SalesInvoiceNo
left outer join Products pF on d.FgItemNo=pF.ItemNo
LEFT OUTER JOIN SalesInvoiceHeaders sih ON sd.SalesInvoiceNo=sih.SalesInvoiceNo
left outer JOIN Currencies cur ON cur.CurrencyId=sih.CurrencyId
WHERE d.DDBackNo=@ddbackno
GROUP BY d.FgItemNo,
d.DDBackDate
,pF.ProductName 
,pF.HSCodeNo
 ,pF.UOM 
,d.SalesInvoiceNo
,cur.CurrencyCode
,sd.SubTotal,sd.CurrencyValue ,d.FgQty


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ddbackno"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbackno", ddbackno);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbackno"].Value = ddbackno;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT22", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT22", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VATDDB(string ddbackno, string salesInvoice, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 
SELECT dh.DDBackNo
,convert (varchar,dh.DDBackDate,120)DDBackDate,dh.SalesInvoiceNo,convert (varchar,dh.SalesDate,120)SalesDate,dh.CustormerID,c.CustomerName,c.Address1,c.Country,dh.CurrencyId
,cr.CurrencyCode,dh.ExpCurrency,dh.BDTCurrency,dh.FgItemNo,p.ProductName	 
,dh.TotalClaimCD,dh.TotalClaimRD,dh.TotalClaimSD,dh.TotalDDBack,dh.TotalClaimVAT
,dh.TotalClaimCnFAmount,dh.TotalClaimInsuranceAmount,dh.TotalClaimTVBAmount,dh.TotalClaimTVAAmount,dh.TotalClaimATVAmount,dh.TotalClaimOthersAmount
,dh.Comments,dh.CreatedBy,convert (varchar,dh.CreatedOn,120)CreatedOn,dh.LastModifiedBy,convert (varchar,dh.LastModifiedOn,120)LastModifiedOn,dh.Post
FROM DutyDrawBackHeader dh
left outer join Customers c on c.CustomerID=dh.CustormerID
left outer join Currencies cr on cr.CurrencyId=dh.CurrencyId
left outer join Products p on p.ItemNo=dh.FgItemNo
where DDBackNo =@ddbackno
              



SELECT 'Sale'RType,dd.DDBackNo,convert (varchar,dd.DDBackDate,120)DDBackDate
,dd.DDLineNo,dd.PurchaseInvoiceNo,convert (varchar,dd.PurchaseDate,120)PurchaseDate
,dd.FgItemNo,pf.ProductName finishgoodsname,fpc.israw Finishproducttype	,sd.UOM FUOM,sd.Quantity FQuantity	
,dd.ItemNo,pr.ProductName Rawgoodsname,rpc.israw Rawproducttype,dd.BillOfEntry,dd.PurchaseUom,dd.PurchaseQuantity,dd.UnitPrice
,dd.AV,dd.CD,dd.RD,dd.SD,dd.VAT,dd.CnF,dd.Insurance,dd.TVB,dd.TVA,dd.ATV,dd.Others
,dd.UseQuantity,dd.ClaimCD,dd.ClaimRD,dd.ClaimSD,dd.ClaimVAT,dd.ClaimCnF,dd.ClaimInsurance
,dd.ClaimTVB,dd.ClaimTVA,dd.ClaimATV,dd.ClaimOthers,dd.SubTotalDDB
,dd.UOMc,dd.UOMn,dd.UOMCD,dd.UOMRD,dd.UOMSD,dd.UOMVAT,dd.UOMCnF,dd.UOMInsurance,dd.UOMTVB,dd.UOMTVA,dd.UOMATV,dd.UOMOthers
,dd.UOMSubTotalDDB
,dd.Post,dd.CreatedBy,dd.CreatedOn,dd.LastModifiedBy,dd.LastModifiedOn
FROM DutyDrawBackDetails dd
left outer join Products pf on pf.ItemNo=dd.FgItemNo
left outer join Products pr on pr.ItemNo=dd.ItemNo 
left outer join ProductCategories fpc on FpC.CategoryID=pf.CategoryID
left outer join ProductCategories rpc on RpC.CategoryID=pr.CategoryID
left outer join DutyDrawBackHeader dh on dh.DDBackNo=dd.DDBackNo
left outer join PurchaseInvoiceDetails sd on sd.ItemNo=dd.ItemNo
where dd.DDBackNo =@ddbackno and sd.PurchaseInvoiceNo in(select PurchaseInvoiceNo from PurchaseInvoiceDetails where PurchaseInvoiceNo in(
select PurchaseInvoiceNo from  DutyDrawBackDetails where DDBackNo=@ddbackno))
union all
SELECT 'Purchase'RType,dd.DDBackNo,convert (varchar,dd.DDBackDate,120)DDBackDate
,dd.DDLineNo,dd.PurchaseInvoiceNo,convert (varchar,dd.PurchaseDate,120)PurchaseDate
,dd.FgItemNo,pf.ProductName finishgoodsname,fpc.israw Finishproducttype	,sd.UOM FUOM,sd.Quantity FQuantity	
,dd.ItemNo,pr.ProductName Rawgoodsname,rpc.israw Rawproducttype,dd.BillOfEntry,dd.PurchaseUom,dd.PurchaseQuantity,dd.UnitPrice
,dd.AV,dd.CD,dd.RD,dd.SD,dd.VAT,dd.CnF,dd.Insurance,dd.TVB,dd.TVA,dd.ATV,dd.Others
,dd.UseQuantity,dd.ClaimCD,dd.ClaimRD,dd.ClaimSD,dd.ClaimVAT,dd.ClaimCnF,dd.ClaimInsurance
,dd.ClaimTVB,dd.ClaimTVA,dd.ClaimATV,dd.ClaimOthers,dd.SubTotalDDB
,dd.UOMc,dd.UOMn,dd.UOMCD,dd.UOMRD,dd.UOMSD,dd.UOMVAT,dd.UOMCnF,dd.UOMInsurance,dd.UOMTVB,dd.UOMTVA,dd.UOMATV,dd.UOMOthers
,dd.UOMSubTotalDDB
,dd.Post,dd.CreatedBy,dd.CreatedOn,dd.LastModifiedBy,dd.LastModifiedOn
FROM DutyDrawBackDetails dd
left outer join Products pf on pf.ItemNo=dd.FgItemNo
left outer join Products pr on pr.ItemNo=dd.ItemNo 
left outer join ProductCategories fpc on FpC.CategoryID=pf.CategoryID
left outer join ProductCategories rpc on RpC.CategoryID=pr.CategoryID
left outer join DutyDrawBackHeader dh on dh.DDBackNo=dd.DDBackNo
left outer join SalesInvoiceDetails sd on sd.ItemNo=dd.FgItemNo    ";
                sqlText += @" where dd.DDBackNo =@ddbackno and sd.SalesInvoiceNo in(" + salesInvoice + ")  ";


                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ddbackno"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbackno", ddbackno);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbackno"].Value = ddbackno;
                }
                if (!objCommVAT16.Parameters.Contains("@salesInvoice"))
                {
                    objCommVAT16.Parameters.AddWithValue("@salesInvoice", salesInvoice);
                }
                else
                {
                    objCommVAT16.Parameters["@salesInvoice"].Value = salesInvoice;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VATDDB", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VATDDB", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet PurchaseMis(string PurchaseId, int BranchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 

SELECT ph.PurchaseInvoiceNo
      ,ph.VendorID
      ,convert (varchar,ph.InvoiceDateTime,120)InvoiceDateTime
      ,ph.TotalAmount
      ,ph.TotalVATAmount
      ,ph.SerialNo
      ,ph.Comments     
      ,ph.BENumber
      ,ph.ProductType
      ,ph.TransactionType
      ,convert (varchar,ph.ReceiveDate,120)ReceiveDate
      ,ph.Post
      ,ph.CurrencyID
      ,ph.CurrencyRateFromBDT
      ,ph.WithVDS
      ,ph.PurchaseReturnId
	  ,v.VendorCode
      ,v.VendorName
      ,v.VendorGroupID
      ,v.Address1
      ,v.City
      ,v.TelephoneNo
      ,v.FaxNo
      ,v.Email
      ,convert (varchar,v.StartDateTime,120)StartDateTime
      ,v.ContactPerson
      ,v.ContactPersonDesignation
      ,v.ContactPersonTelephone
      ,v.ContactPersonEmail
      ,v.VATRegistrationNo
      ,v.TINNo
      ,v.ActiveStatus
      ,v.Country
      ,v.VDSPercent
      ,d.Type
 from PurchaseInvoiceDetails d
	
	left outer join PurchaseInvoiceHeaders ph on ph.PurchaseInvoiceNo=d.PurchaseInvoiceNo
left outer join Vendors v on ph.VendorID=v.VendorID
  Where ph.PurchaseInvoiceNo=@PurchaseId
and ph.BranchId=@BranchId
and d.Type=@Type


SELECT d.PurchaseInvoiceNo
      ,d.POLineNo
      ,d.ItemNo PurchaseItemNo
      ,d.Quantity
      ,d.CostPrice
      ,d.NBRPrice
      ,d.UOM PurchaseUom
      ,d.Comments
      ,d.Type
      ,d.ProductType
      ,d.BENumber
      ,Convert (varchar,d.InvoiceDateTime,120)InvoiceDateTime
      ,Convert (varchar,d.ReceiveDate,120)ReceiveDate
      ,d.Post
      ,d.UOMQty
      ,d.UOMPrice
      ,d.UOMc
      ,d.UOMn
      ,d.DollerValue
      ,d.CurrencyValue
      ,d.RebateRate
      ,d.RebateAmount
      ,d.SubTotal
      ,d.CnFAmount
      ,d.InsuranceAmount
      ,d.AssessableValue
      ,d.CDAmount
      ,d.RDAmount
      ,d.SD
      ,d.SDAmount
      ,d.TVBAmount
      ,d.VATRate
      ,d.VATAmount
      ,d.TVAAmount
      ,d.ATVAmount
      ,d.OthersAmount
      ,d.TransactionType
      ,d.PurchaseReturnId
	  ,P.ItemNo ProductItemNo
      ,P.ProductCode
      ,P.ProductName
      ,P.ProductDescription
      ,P.CategoryID
      ,P.UOM ProductUom    
      ,P.OpeningBalance
      ,P.SerialNo
      ,P.HSCodeNo     
      ,P.Trading      
      ,P.NonStock 
      ,Pc.CategoryName     
      ,pc.IsRaw      
  FROM PurchaseInvoiceDetails d
  left outer join Products p on p.ItemNo=d.ItemNo
  left outer join ProductCategories pc on pc.CategoryID=p.CategoryID

   Where PurchaseInvoiceNo=@PurchaseId
and d.BranchId=@BranchId
and d.Type=@Type

SELECT pdu.PIDutyID
      ,pdu.PurchaseInvoiceNo
      ,pdu.CnFInp
      ,pdu.CnFRate
      ,pdu.CnFAmount
      ,pdu.InsuranceInp
      ,pdu.InsuranceRate
      ,pdu.InsuranceAmount
      ,pdu.AssessableInp
      ,pdu.AssessableValue
      ,pdu.CDInp
      ,pdu.CDRate
      ,pdu.CDAmount
      ,pdu.RDInp
      ,pdu.RDRate
      ,pdu.RDAmount
      ,pdu.TVBInp
      ,pdu.TVBRate
      ,pdu.TVBAmount
      ,pdu.SDInp
      ,pdu.SD
      ,pdu.SDAmount
      ,pdu.VATInp
      ,pdu.VATRate
      ,pdu.VATAmount
      ,pdu.TVAInp
      ,pdu.TVARate
      ,pdu.TVAAmount
      ,pdu.ATVInp
      ,pdu.ATVRate
      ,pdu.ATVAmount
      ,pdu.OthersInp
      ,pdu.OthersRate
      ,pdu.OthersAmount
      ,pdu.TransactionType
	  ,pdu.Post
      ,pdu.Remarks
      ,pdu.ItemNo
      ,pdu.DutyCompleteQuantity
      ,pdu.DutyCompleteQuantityPercent
      ,pdu.LineCost
      ,pdu.UnitCost
      ,pdu.Quantity
	  ,p.ProductCode
	  ,p.ProductName
	  ,p.ProductDescription
      ,d.Type
 from PurchaseInvoiceDetails d
	
	left outer join PurchaseInvoiceDuties pdu on pdu.PurchaseInvoiceNo=d.PurchaseInvoiceNo
  left outer join Products p on p.ItemNo=pdu.ItemNo

  Where pdu.PurchaseInvoiceNo=@PurchaseId
and pdu.BranchId=@BranchId
and d.Type=@Type


                ";

                top = "Go";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                if (string.IsNullOrEmpty(VatType))
                {
                    sqlText = sqlText.Replace("d.Type=@Type", "1=1");

                }
                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@PurchaseId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@PurchaseId", PurchaseId);
                }
                else
                {
                    objCommVAT16.Parameters["@PurchaseId"].Value = PurchaseId;
                }
                objCommVAT16.Parameters.AddWithValue("@BranchId", BranchId);
                objCommVAT16.Parameters.AddWithValue("@Type", VatType);
                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseMis", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseMis", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 04

        public DataSet SaleMis(string SaleId, string ShiftId = "0", int BranchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null, string OrderBy = "")
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 

SELECT sh.SalesInvoiceNo
      ,sh.CustomerID
      ,sh.DeliveryAddress1
      ,sh.VehicleID
      ,convert (varchar,sh.InvoiceDateTime,120)InvoiceDateTime
      ,convert (varchar,sh.DeliveryDate,120)DeliveryDate
      ,sh.TotalAmount
      ,sh.TotalVATAmount
      ,sh.SerialNo
      ,sh.Comments      
      ,sh.SaleType
      ,sh.PreviousSalesInvoiceNo
      ,sh.Trading
      ,sh.IsPrint
      ,sh.TenderId
      ,sh.TransactionType
      ,sh.Post
      ,isnull(sh.LCNumber,'nill')LCNumber
      ,isnull(sh.CurrencyID,'nill')CurrencyID
      ,isnull(sh.CurrencyRateFromBDT,0)CurrencyRateFromBDT
      ,isnull(sh.SaleReturnId,'nill')SaleReturnId
      ,isnull(sh.IsVDS,'nill')IsVDS
      ,isnull(sh.GetVDSCertificate,'nill')GetVDSCertificate 
	  ,c.CustomerName
      ,c.Address1
      ,c.City
      ,c.TelephoneNo
      ,c.FaxNo
      ,c.Email
      ,convert (varchar,c.StartDateTime,120)StartDateTime
      ,c.ContactPerson
      ,c.ContactPersonDesignation
      ,c.ContactPersonTelephone
      ,c.ContactPersonEmail
      ,c.TINNo
      ,c.VATRegistrationNo 
      ,c.ActiveStatus
      ,isnull(c.VDSPercent,0)VDSPercent
      ,isnull(v.VehicleCode,'nill')VehicleCode
      ,isnull(v.VehicleType,'nill')VehicleType
      ,isnull(v.VehicleNo,'nill')VehicleNo
      ,isnull(v.Description,'nill')Description
	  ,isnull(cu.CurrencyName,'nill')CurrencyName
      ,isnull(cu.CurrencyCode,'nill')CurrencyCode
      ,isnull(cu.Country,'nill')Country
      ,d.Type
  FROM SalesInvoiceDetails d
left outer join SalesInvoiceHeaders sh on sh.SalesInvoiceNo=d.SalesInvoiceNo
  left outer join Customers c on c.CustomerID = sh.CustomerID
  left outer join Vehicles v on v.VehicleID= sh.VehicleID
  left outer join Currencies cu on cu.CurrencyId= sh.CurrencyId
  Where sh.SalesInvoiceNo = @SaleId 
and sh.BranchId=@BranchId
and d.Type=@Type ";

                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and sh.ShiftId='" + ShiftId + "' ";
                }
                sqlText += @"
SELECT d.SalesInvoiceNo
      ,d.InvoiceLineNo
      ,d.ItemNo
      ,d.Quantity
      ,d.SalesPrice
      ,d.NBRPrice
      ,d.AVGPrice
      ,d.UOM
      ,d.VATRate
      ,d.VATAmount
      ,d.SubTotal
      ,d.Comments
      ,d.SD
      ,d.SDAmount
      ,d.SaleType
      ,d.PreviousSalesInvoiceNo
      ,d.Trading
      ,convert (varchar,d.InvoiceDateTime,120)InvoiceDateTime
      ,d.NonStock
      ,d.TradingMarkUp
      ,d.Type
      ,d.BENumber
      ,d.Post
      ,d.UOMQty
      ,d.UOMPrice
      ,d.UOMc
      ,d.UOMn
      ,isnull(d.DollerValue,0)DollerValue
      ,isnull(d.CurrencyValue,0)CurrencyValue
      ,d.TransactionType
      ,isnull(d.VATName,'nill')VATName
      ,isnull(d.SaleReturnId,'nill')SaleReturnId
      ,isnull(d.DiscountAmount,0)DiscountAmount
      ,isnull(d.DiscountedNBRPrice,0)DiscountedNBRPrice
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
  FROM SalesInvoiceDetails d
  left outer join Products p on p.ItemNo=d.ItemNo
  left outer join  SalesInvoiceHeaders sh  on sh.SalesInvoiceNo=d.SalesInvoiceNo
  Where d.SalesInvoiceNo = @SaleId
and sh.BranchId=@BranchId
and d.Type=@Type

";

                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and sh.ShiftId='" + ShiftId + "' ";
                }
                if (!string.IsNullOrWhiteSpace(OrderBy))
                {
                    sqlText += " order by P." + OrderBy + " ";
                }
                sqlText += @"

SELECT se.SalesInvoiceNo
      ,se.SaleLineNo
      ,se.RefNo
      ,se.Description
      ,se.Quantity
      ,se.GrossWeight
      ,se.NetWeight
      ,se.NumberFrom
      ,se.NumberTo
      ,se.Comments
      ,se.PortFrom
      ,se.PortTo 
      ,d.Type
  FROM SalesInvoiceDetails d 
left outer join SalesInvoiceHeadersExport se on se.SalesInvoiceNo=d.SalesInvoiceNo
  left outer join  SalesInvoiceHeaders sh  on sh.SalesInvoiceNo=se.SalesInvoiceNo
   Where se.SalesInvoiceNo = @SaleId
and se.BranchId=@BranchId
and d.Type=@Type
                 ";

                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and sh.ShiftId='" + ShiftId + "' ";
                }
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                if (string.IsNullOrEmpty(VatType))
                {
                    sqlText = sqlText.Replace("d.Type=@Type", "1=1");

                }
                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommVAT16.Parameters.Contains("@ShiftId"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ShiftId", ShiftId);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ShiftId"].Value = ShiftId;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@SaleId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@SaleId", SaleId);
                }
                else
                {
                    objCommVAT16.Parameters["@SaleId"].Value = SaleId;
                }
                objCommVAT16.Parameters.AddWithValue("@BranchId", BranchId);
                objCommVAT16.Parameters.AddWithValue("@Type", VatType);
                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleMis", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleMis", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet IssueMis(string IssueId, int BranchId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 
SELECT ih.IssueNo
      ,convert (varchar,ih.IssueDateTime,120)IssueDateTime
      ,ih.TotalVATAmount
      ,ih.TotalAmount
      ,ih.SerialNo
      ,ih.Comments
	  ,ih.ReceiveNo
      ,ih.TransactionType
      ,ih.IssueReturnId
      ,ih.Post
  FROM IssueHeaders ih

   where ih.IssueNo=@IssueId
    and ih.BranchId=@BranchId


SELECT id.IssueNo
      ,id.IssueLineNo
      ,id.ItemNo
      ,id.Quantity
      ,id.NBRPrice
      ,id.CostPrice
      ,id.UOM
      ,id.VATRate
      ,id.VATAmount
      ,id.SubTotal
      ,id.Comments
      ,id.ReceiveNo
      ,convert (varchar,id.IssueDateTime,120)IssueDateTime
      ,id.SD
      ,id.SDAmount
      ,id.Wastage * id.UOMc Wastage
      ,id.BOMDate
      ,id.FinishItemNo
      ,id.Post
      ,id.TransactionType
      ,id.IssueReturnId
      ,id.DiscountAmount
      ,id.DiscountedNBRPrice
      ,id.UOMQty
      ,id.UOMPrice
      ,id.UOMc
      ,id.UOMn
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
  FROM IssueDetails id
  left outer join Products p on p.ItemNo=id.ItemNo

  where id.IssueNo=@IssueId and id.BranchId=@BranchId






                ";

                top = "Go";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;
                objCommVAT16.Parameters.AddWithValue("@BranchId", BranchId);
                if (!objCommVAT16.Parameters.Contains("@IssueId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@IssueId", IssueId);
                }
                else
                {
                    objCommVAT16.Parameters["@IssueId"].Value = IssueId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "IssueMis", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "IssueMis", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet ReceiveMis(string ReceiveId, string ShiftId = "0", int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 
SELECT rh.ReceiveNo
      ,convert (varchar,rh.ReceiveDateTime,120)ReceiveDateTime
      ,rh.TotalAmount
      ,rh.TotalVATAmount
      ,rh.SerialNo
      ,rh.Comments
      ,rh.TransactionType
      ,rh.Post
      ,rh.ReceiveReturnId
  FROM ReceiveHeaders rh
  where ReceiveNo=@ReceiveId and rh.BranchId=@BranchId
";
                if (Convert.ToInt32(ShiftId) > 0) { sqlText += " and RH.ShiftId='" + ShiftId + "' "; }

                sqlText += @"
SELECT rd.ReceiveNo
      ,rd.ReceiveLineNo
      ,rd.ItemNo
      ,rd.Quantity
      ,rd.CostPrice
      ,rd.NBRPrice
      ,rd.UOM
      ,rd.VATRate
      ,rd.VATAmount
      ,rd.SubTotal
      ,rd.Comments
      ,rd.SD
      ,rd.SDAmount
      ,rd.TransactionType
      ,convert (varchar,rd.ReceiveDateTime,120)ReceiveDateTime
      ,rd.Post
      ,rd.VATName
      ,rd.ReceiveReturnId
      ,rd.DiscountAmount
      ,rd.DiscountedNBRPrice
      ,rd.BOMId
      ,rd.BOMId BOMId1
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
	  ,pc.CategoryName
      ,pc.Description   
      ,pc.IsRaw
      ,pc.HSCodeNo 
	  ,pc.Trading
      ,pc.NonStock
  FROM ReceiveDetails rd
    left outer join Products p on p.ItemNo=rd.ItemNo
	left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
	where rd.ReceiveNo=@ReceiveId and rd.BranchId=@BranchId
                ";
                if (Convert.ToInt32(ShiftId) > 0) { sqlText += " and RH.ShiftId='" + ShiftId + "' "; }

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;
                objCommVAT16.Parameters.AddWithValue("@BranchId", BranchId);

                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommVAT16.Parameters.Contains("@ShiftId"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ShiftId", ShiftId);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ShiftId"].Value = ShiftId;
                    }
                }


                if (!objCommVAT16.Parameters.Contains("@ReceiveId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ReceiveId", ReceiveId);
                }
                else
                {
                    objCommVAT16.Parameters["@ReceiveId"].Value = ReceiveId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ReceiveMis", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ReceiveMis", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SaleReceiveMIS(string StartDate, string EndDate, string ShiftId = "0", string Post = null, SysDBInfoVMTemp connVM = null, string Toll = "N")
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;

                if (Toll == "N")
                {
                    sqlText = @"
             create table #tbl(Sl  varchar(100) 
            , SalesInvoiceNo varchar(100)
            , ReferenceNo varchar(100)
            , Date varchar(100)
            , ShiftName varchar(100)
            , ProductName varchar(100)
            , CategoryName varchar(100)
            , Quantity decimal(18,8)
            , UOM varchar(100)
            , Transactiontype varchar(100)
            )
create table #tbl2(Sl  varchar(100) 
            , ReferenceNo varchar(100)
, SalesInvoiceNo varchar(100)
, Date varchar(1000))

            insert into #tbl
            select * from (
            select  'B'Sl,  h.SalesInvoiceNo,h.SerialNo ReferenceNo,h.InvoiceDateTime Date,isnull(s.ShiftName,'Any')ShiftName,p.ProductName ,pc.CategoryName,d.Quantity,d.UOM
,case when  h.TransactionType='other' then 'Sale'  else  h.TransactionType end  Transactiontype

            from SalesInvoiceDetails d
            left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
            left outer join customers C on h.CustomerID=c.CustomerID
            left outer join Shifts s on s.Id=h.ShiftId
            where   h.InvoiceDateTime >= @StartDate and h.InvoiceDateTime <= @EndDate
            ";
                    if (Convert.ToInt32(ShiftId) > 0)
                        sqlText += " and h.ShiftId='" + ShiftId + "' ";
                    if (!string.IsNullOrEmpty(Post))
                        sqlText += " and h.Post='" + Post + "' ";

                    sqlText += @"
           union all
            select  'A'Sl,  h.ReceiveNo,h.ReferenceNo,h.ReceiveDateTime,isnull(s.ShiftName,'Any')ShiftName,p.ProductName,pc.CategoryName,d.Quantity,d.UOM 
,case when  h.TransactionType='other' then 'Receive'  else  h.TransactionType end  Transactiontype
            from ReceiveDetails d
            left outer join ReceiveHeaders h on d.ReceiveNo=h.ReceiveNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join ProductCategories pc on pc.CategoryID=p.CategoryID

            left outer join customers C on h.CustomerID=c.CustomerID
            left outer join Shifts s on s.Id=h.ShiftId
            where  h.ReceiveDateTime >= @StartDate and h.ReceiveDateTime <= @EndDate
            ";
                    if (Convert.ToInt32(ShiftId) > 0)
                        sqlText += " and h.ShiftId='" + ShiftId + "' ";
                    if (!string.IsNullOrEmpty(Post))
                        sqlText += " and h.Post='" + Post + "' ";



                    sqlText += @"
              union all
            select  'B'Sl,  h.TransferIssueNo,h.TripNo,h.TransactionDateTime,isnull(s.ShiftName,'Any')ShiftName,p.ProductName,pc.CategoryName,d.Quantity,d.UOM 
,case when  h.TransactionType='62Out' then 'Transfer'  else  h.TransactionType end  Transactiontype
            from TransferIssueDetails d
            left outer join TransferIssues h on d.TransferIssueNo=h.TransferIssueNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join ProductCategories pc on pc.CategoryID=p.CategoryID

            --left outer join customers C on h.CustomerID=c.CustomerID
            left outer join Shifts s on s.Id=h.ShiftId
            ";
                    if (Convert.ToInt32(ShiftId) > 0)
                        sqlText += " and h.ShiftId='" + ShiftId + "' ";
                    if (!string.IsNullOrEmpty(Post))
                        sqlText += " and h.Post='" + Post + "' ";

                    sqlText += @"

            ) as a
            order by Sl,Date

insert into #tbl2
select distinct SL, ReferenceNo,SalesInvoiceNo,Date from #tbl

            select  'A'SL,a.SalesInvoiceNo,a.ReferenceNo
			,a.Date
			,a.ShiftName,a.ProductName,a.CategoryName
			,b.SaleQty,b.ReceiveQty
			,a.UOM from (
            SELECT  t.ReferenceNo,ShiftName,ProductName,CategoryName,UOM,
                    stuff(
                            (
                                select  ',' + t1.SalesInvoiceNo
                                from    #tbl2 t1
                                where   t.ReferenceNo = t1.ReferenceNo
								order by SL desc
                                for xml path('')
                            ),1,1,'') SalesInvoiceNo
							, stuff(
                            (
                                select  ',' + t1.Date
                                from    #tbl2 t1
                                where   t1.ReferenceNo = t.ReferenceNo
                                for xml path('')
                            ),1,1,'') Date
            FROM    #tbl t
            GROUP BY  t.ReferenceNo,ShiftName,ProductName,CategoryName,UOM
            ) as a
            left outer join
            (
            select distinct ReferenceNo,ProductName
            ,sum(case when Transactiontype in('Sale','Export') then Quantity else 0 end) SaleQty
            ,sum(case when Transactiontype='Receive' then Quantity else 0 end) ReceiveQty
            
            from #tbl
                      group by ReferenceNo,ProductName) b on a.ReferenceNo=b.ReferenceNo and a.ProductName=b.ProductName
            order by  (case when substring(SalesInvoiceNo,1,3)  in('INV','STR') then 1 else 2 end ) ,SalesInvoiceNo

            --select * from #tbl
            
            
                    
drop table #tbl
drop table #tbl2


            ";
                }
                else
                {

                    sqlText = @"
             create table #tbl(Sl  varchar(100) 
            , SalesInvoiceNo varchar(100)
            , ReferenceNo varchar(100)
            , Date varchar(100)
            , ShiftName varchar(100)
            , ProductName varchar(100)
            , CategoryName varchar(100)
            , Quantity decimal(18,8)
            , UOM varchar(100)
            , Transactiontype varchar(100)
            )
create table #tbl2( ReferenceNo varchar(100)
, SalesInvoiceNo varchar(100)
, Date varchar(1000))

            insert into #tbl
            select * from (
            select  'B'Sl,  h.SalesInvoiceNo,h.SerialNo ReferenceNo,h.InvoiceDateTime Date,isnull(s.ShiftName,'Any')ShiftName,p.ProductName ,pc.CategoryName,d.Quantity,d.UOM
,case when  h.TransactionType='TollSale' then 'Sale'  else  h.TransactionType end  Transactiontype

            from SalesInvoiceDetails d
            left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
            left outer join customers C on h.CustomerID=c.CustomerID
            left outer join Shifts s on s.Id=h.ShiftId
            where   h.InvoiceDateTime >= @StartDate and h.InvoiceDateTime <= @EndDate
            ";
                    if (Convert.ToInt32(ShiftId) > 0)
                        sqlText += " and h.ShiftId='" + ShiftId + "' ";
                    if (!string.IsNullOrEmpty(Post))
                        sqlText += " and h.Post='" + Post + "' ";

                    sqlText += @"
            union all
            select  'A'Sl,  h.PurchaseInvoiceNo,h.SerialNo,h.InvoiceDateTime,'Any'ShiftName,p.ProductName,pc.CategoryName,d.Quantity,d.UOM 
,case when  h.TransactionType='ClientFGReceiveWOBOM' then 'Receive'  else  h.TransactionType end  Transactiontype
            from PurchaseInvoiceDetails d
            left outer join PurchaseInvoiceHeaders h on d.PurchaseInvoiceNo=h.PurchaseInvoiceNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join ProductCategories pc on pc.CategoryID=p.CategoryID

            where  h.InvoiceDateTime >= @StartDate and h.InvoiceDateTime <= @EndDate
            ";
                    if (Convert.ToInt32(ShiftId) > 0)
                        sqlText += " and h.ShiftId='" + ShiftId + "' ";
                    if (!string.IsNullOrEmpty(Post))
                        sqlText += " and h.Post='" + Post + "' ";



                    sqlText += @"
            union all
            select  'B'Sl,  h.TransferIssueNo,h.TripNo,h.TransactionDateTime,isnull(s.ShiftName,'Any')ShiftName,p.ProductName,pc.CategoryName,d.Quantity,d.UOM 
,case when  h.TransactionType='62Out' then 'Transfer'  else  h.TransactionType end  Transactiontype
            from TransferIssueDetails d
            left outer join TransferIssues h on d.TransferIssueNo=h.TransferIssueNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join ProductCategories pc on pc.CategoryID=p.CategoryID

            --left outer join customers C on h.CustomerID=c.CustomerID
            left outer join Shifts s on s.Id=h.ShiftId
            ";
                    if (Convert.ToInt32(ShiftId) > 0)
                        sqlText += " and h.ShiftId='" + ShiftId + "' ";
                    if (!string.IsNullOrEmpty(Post))
                        sqlText += " and h.Post='" + Post + "' ";

                    sqlText += @"

            ) as a
            order by Sl,Date

insert into #tbl2
select distinct ReferenceNo,SalesInvoiceNo,Date from #tbl

            select 'A'SL,a.SalesInvoiceNo,a.ReferenceNo,a.Date,a.ShiftName,a.ProductName,a.CategoryName,b.SaleQty,b.ReceiveQty,a.UOM from (
            SELECT  t.ReferenceNo,ShiftName,ProductName,CategoryName,UOM,
                    stuff(
                            (
                                select  ',' + t1.SalesInvoiceNo
                                from    #tbl2 t1
                                where   t1.ReferenceNo = t.ReferenceNo
                                for xml path('')
                            ),1,1,'') SalesInvoiceNo,
            				 stuff(
                            (
                                select  ',' + t1.Date
                                from    #tbl2 t1
                                where   t1.ReferenceNo = t.ReferenceNo
                                for xml path('')
                            ),1,1,'') Date
            FROM    #tbl t
            GROUP BY t.ReferenceNo,ShiftName,ProductName,CategoryName,UOM
            ) as a
            left outer join
            (
            select distinct ReferenceNo
            ,sum(case when Transactiontype='Sale' then Quantity else 0 end) SaleQty
            ,sum(case when Transactiontype='Receive' then Quantity else 0 end) ReceiveQty
            
            from #tbl
            group by ReferenceNo) b on a.ReferenceNo=b.ReferenceNo
            order by SalesInvoiceNo
            --select * from #tbl
            
            
                    
drop table #tbl
drop table #tbl2

            ";
                }

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objComm = new SqlCommand();
                objComm.Connection = currConn;

                objComm.CommandText = sqlText;
                objComm.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objComm.CommandText = sqlText;
                objComm.CommandType = CommandType.Text;
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objComm.Parameters.Contains("@ShiftId"))
                    {
                        objComm.Parameters.AddWithValue("@ShiftId", ShiftId);
                    }
                    else
                    {
                        objComm.Parameters["@ShiftId"].Value = ShiftId;
                    }
                }
                if (!string.IsNullOrEmpty(Post))
                {
                    if (!objComm.Parameters.Contains("@Post"))
                    {
                        objComm.Parameters.AddWithValue("@Post", Post);
                    }
                    else
                    {
                        objComm.Parameters["@Post"].Value = Post;
                    }
                }


                if (!objComm.Parameters.Contains("@StartDate"))
                {
                    objComm.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objComm.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objComm.Parameters.Contains("@EndDate"))
                {
                    objComm.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objComm.Parameters["@EndDate"].Value = EndDate;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objComm);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleReceiveMIS", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleReceiveMIS", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1KaNew(string FinishItemNo, string EffectDate, string VATName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Ka");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Lock

                #endregion Lock

                sqlText = @"




--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=154;
--SET @VATName='VAT 1';
--SET @EffectDate='2013/04/20';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName


SELECT b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType not in ('Overhead');



                            ";


                #endregion

                #region SQL Command

                SqlCommand objCommVAT1Ka = new SqlCommand();
                objCommVAT1Ka.Connection = currConn;

                objCommVAT1Ka.CommandText = sqlText;
                objCommVAT1Ka.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Ka.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Ka.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Ka.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Ka.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Ka.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Ka.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Ka.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Ka.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Ka.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Ka);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1KaNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1KaNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1KhaNew(string FinishItemNo, string EffectDate, string VATName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Kha");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction



                #region SQL Statement


                sqlText = @"


--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=192;
--SET @VATName='VAT 1 Kha (Trading)';
--SET @EffectDate='2014-09-04';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,106)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
(b.NBRPrice-b.MarkUpValue) NBRPrice , b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName






                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT1Kha = new SqlCommand();
                objCommVAT1Kha.Connection = currConn;

                objCommVAT1Kha.CommandText = sqlText;
                objCommVAT1Kha.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Kha.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Kha.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Kha.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Kha.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Kha.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Kha.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Kha.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Kha.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Kha.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Kha);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1KhaNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1KhaNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1GaNew(string FinishItemNo, string EffectDate, string VATName, string IsPercent, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Ga");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"
        
        
--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
	SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType NOT IN('Finish','Overhead','Raw','Pack')
UNION
SELECT 'B' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Finish')
UNION
SELECT 'C' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Raw')
UNION
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Pack')

UNION
SELECT 'E' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo,
CASE WHEN @IsPercent='Y' THEN '%' ELSE '-' END AS UOM,
b.EffectDate, 0 UseQuantity,
0 WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, 
 CASE WHEN @IsPercent='Y' THEN  isnull(b.RebateRate,0) ELSE 0 END AS TotalQuantity,
b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Overhead')
)AS a ORDER BY a.SL,a.BOMRawId


INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId 
 FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
                 AND isnull(b.PBOMId,0) >0) AND b.cost>0  and b.RawItemType  IN('Raw')
UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId
----------BOM RawP
select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY a.SL,a.BOMRawId

DROP TABLE #BOMRaws
";

                #endregion SQL Statement

                #region SQL Command

                SqlCommand objCommVAT1Ga = new SqlCommand();
                objCommVAT1Ga.Connection = currConn;

                objCommVAT1Ga.CommandText = sqlText;
                objCommVAT1Ga.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Ga.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@IsPercent"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@IsPercent", IsPercent);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@IsPercent"].Value = IsPercent;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Ga);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1GaNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1GaNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1GhaNew(string finishitemno, string EffectDate, string VATName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Gha");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement


                sqlText = @"

--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=154;
--SET @VATName='VAT 1';
--SET @EffectDate='2013/04/20';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName


SELECT b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType not in ('Overhead');



                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT1Gha = new SqlCommand();
                objCommVAT1Gha.Connection = currConn;

                objCommVAT1Gha.CommandText = sqlText;
                objCommVAT1Gha.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Gha.Parameters.Contains("@finishitemno"))
                {
                    objCommVAT1Gha.Parameters.AddWithValue("@finishitemno", finishitemno);
                }
                else
                {
                    objCommVAT1Gha.Parameters["@finishitemno"].Value = finishitemno;
                }

                if (!objCommVAT1Gha.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Gha.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Gha.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Gha.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Gha.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Gha.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Gha);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1GhaNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT1GhaNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet FormKaNew(string FinishItemNo, string EffectDate, string VATName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportFormKa");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            --DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=154;
--SET @VATName='VAT 1';
--SET @EffectDate='2013/04/20';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName




                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommFormKa = new SqlCommand();
                objCommFormKa.Connection = currConn;

                objCommFormKa.CommandText = sqlText;
                objCommFormKa.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommFormKa.Parameters.Contains("@FinishItemNo"))
                {
                    objCommFormKa.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommFormKa.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommFormKa.Parameters.Contains("@EffectDate"))
                {
                    objCommFormKa.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommFormKa.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommFormKa.Parameters.Contains("@VATName"))
                {
                    objCommFormKa.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommFormKa.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommFormKa);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "FormKaNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "FormKaNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BOMNew_withFNo(string FinishItemNo, string EffectDate, string VATName, string IsPercent, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1");

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"

--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @IsPercent AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @IsPercent='Y';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

DECLARE @WithOverhead AS VARCHAR(200);
select @WithOverhead=settingValue from Settings where SettingGroup='BOM' and SettingName='TollIssueCostWithOthers'
 

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

IF(@VATName='VAT 4.3 (Toll Issue)' and @WithOverhead='N')

	BEGIN
SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RebateTotal RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, '-'UOM, b.EffectDate, 0 UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Overhead')

)AS a ORDER BY a.SL,a.BOMRawId
	END
ELSE
BEGIN


SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo  LEFT OUTER JOIN 
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
	SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType NOT IN('Finish','Overhead','Raw','Pack')
UNION
SELECT 'B' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Finish')
UNION
SELECT 'C' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Raw')
UNION
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Pack')

UNION
SELECT 'E' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo,
CASE WHEN @IsPercent='Y' THEN '%' ELSE '-' END AS UOM,
b.EffectDate, 0 UseQuantity,
0 WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost,
 CASE WHEN @IsPercent='Y' THEN  isnull(b.RebateRate,0) ELSE 0 END AS TotalQuantity,
b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Overhead')
)AS a ORDER BY a.SL,a.BOMRawId

	END

SELECT b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.AdditionalCost>0

INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
                 AND isnull(b.PBOMId,0) >0) AND b.cost>0  and b.RawItemType  IN('Raw')

UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY a.SL,a.BOMRawId

SELECT b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
LEFT OUTER JOIN
products p ON HeadID=p.ItemNo
WHERE b.BOMId IN(
SELECT b.PBOMId FROM BOMRaws b
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

AND isnull(b.PBOMId,0) >0)
AND b.AdditionalCost>0


DROP TABLE #BOMRaws



";

                #endregion SQL Statement



                #region SQL Command

                SqlCommand objCommVAT1 = new SqlCommand();
                objCommVAT1.Connection = currConn;
                objCommVAT1.CommandText = sqlText;
                objCommVAT1.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1.Parameters.Contains("@IsPercent"))
                {
                    objCommVAT1.Parameters.AddWithValue("@IsPercent", IsPercent);
                }
                else
                {
                    objCommVAT1.Parameters["@IsPercent"].Value = IsPercent;
                }

                if (!objCommVAT1.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1.Parameters.Contains("@VATName"))
                {
                    objCommVAT1.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BOMNew_withFNo", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BOMNew_withFNo", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BOMNew(string BOMId, string VATName, string IsPercent, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1");

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @IsPercent AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @IsPercent='Y';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

DECLARE @WithOverhead AS VARCHAR(200);
select @WithOverhead=settingValue from Settings where SettingGroup='BOM' and SettingName='TollIssueCostWithOthers'
 

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

IF(@VATName='VAT 4.3 (Toll Issue)' and @WithOverhead='N')

	BEGIN
SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RebateTotal RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  
--pc.CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
WHERE b.BOMId=@BOMId 
AND b.BranchId=@BranchId 

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,
--isnull(CategoryName,'NA')CategoryName,
case when CHARINDEX ('(',CategoryName,1)>0 and CHARINDEX (')',CategoryName,1)>0 then  substring(isnull(CategoryName,'N/A'),CHARINDEX ('(',CategoryName,1)+1,(CHARINDEX (')',CategoryName,1)-CHARINDEX ('(',CategoryName,1))-1) else isnull(CategoryName,'N/A') end CategoryName

,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, '-'UOM, b.EffectDate, 0 UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 ) and b.RawItemType  IN('Overhead')
AND b.BranchId=@BranchId 

)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId
	END
ELSE
BEGIN


SELECT b.BOMId, b.FinishItemNo, b.EffectDate, ISNULL(b.FirstSupplyDate,'19000101') FirstSupplyDate,  b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo, 
--pc.CategoryName
b.MasterComments,
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName
, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo  LEFT OUTER JOIN 
ProductCategories pc ON p.CategoryID=pc.CategoryID
WHERE b.BOMId=@BOMId 
AND b.BranchId=@BranchId 

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
	SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType NOT IN('Finish','Overhead','Raw','Pack')
AND b.BranchId=@BranchId 

UNION
SELECT 'B' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType IN('Finish')
AND b.BranchId=@BranchId 

UNION
SELECT 'C' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType IN('Raw')
AND b.BranchId=@BranchId 

UNION
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType  IN('Pack')
AND b.BranchId=@BranchId 

UNION
SELECT 'E' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo,
CASE WHEN @IsPercent='Y' THEN '%' ELSE '-' END AS UOM,
b.EffectDate, 0 UseQuantity,
0 WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost,
 CASE WHEN @IsPercent='Y' THEN  isnull(b.RebateRate,0) ELSE 0 END AS TotalQuantity,
b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0  ) and b.RawItemType  IN('Overhead')
AND b.BranchId=@BranchId 
)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId

	END

--SELECT b.BOMId, b.OHLineNo, 
--
--b.HeadName HeadNameOld,
--p.ProductCode OHCode,p.ProductName HeadName,
-- b.EffectDate, b.VATName, b.HeadAmount,
--b.RebatePercent, b.RebateAmount, b.AdditionalCost
--FROM BOMCompanyOverhead  b 
-- LEFT OUTER JOIN
--products p ON HeadID=p.ItemNo
--
--WHERE b.BOMId=@BOMId 
--AND b.AdditionalCost>0

select * from(
SELECT 'A'Sl, b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo
WHERE b.BOMId=@BOMId 
AND b.AdditionalCost>0
and p.ProductName not in('Margin','estimated profit')
AND b.BranchId=@BranchId 

--order by p.ProductName
union all
SELECT 'B'Sl, b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo
WHERE b.BOMId=@BOMId 
AND b.AdditionalCost>0
and p.ProductName  in('Margin','estimated profit')
AND b.BranchId=@BranchId

--order by p.ProductName
) as a order by  a.Sl,a.HeadName--a.Sl,a.HeadName

INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.BOMId=@BOMId 
                 AND isnull(b.PBOMId,0) >0) AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType  IN('Raw')
AND b.BranchId=@BranchId 

UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.BOMId=@BOMId 
      AND isnull(b.PBOMId,0) >0
AND b.BranchId=@BranchId
 
) p WHERE #BOMRaws.BOMId=p.pBOMId

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId

SELECT b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
LEFT OUTER JOIN
products p ON HeadID=p.ItemNo
WHERE b.BOMId IN(
SELECT b.PBOMId FROM BOMRaws b
WHERE b.BOMId=@BOMId 
AND isnull(b.PBOMId,0) >0)
AND b.AdditionalCost>0
AND b.BranchId=@BranchId 



DROP TABLE #BOMRaws



";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                #endregion SQL Statement

                #region SQL Command

                SqlCommand objCommVAT1 = new SqlCommand();
                objCommVAT1.Connection = currConn;
                objCommVAT1.CommandText = sqlText;
                objCommVAT1.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT1.Parameters.AddWithValue("@BranchId", BranchId);


                if (!objCommVAT1.Parameters.Contains("@IsPercent"))
                {
                    objCommVAT1.Parameters.AddWithValue("@IsPercent", IsPercent);
                }
                else
                {
                    objCommVAT1.Parameters["@IsPercent"].Value = IsPercent;
                }

                if (!objCommVAT1.Parameters.Contains("@BOMId"))
                {
                    objCommVAT1.Parameters.AddWithValue("@BOMId", BOMId);
                }
                else
                {
                    objCommVAT1.Parameters["@BOMId"].Value = BOMId;
                }
                CommonDAL commonDal = new CommonDAL();
                bool TollIssueWithRaw = false;

                TollIssueWithRaw = Convert.ToBoolean(commonDal.settingValue("BOM", "VAT4_3(TollIssue)WithRaw") == "Y" ? true : false);
                if (!TollIssueWithRaw)
                {
                    if (!objCommVAT1.Parameters.Contains("@VATName"))
                    {
                        objCommVAT1.Parameters.AddWithValue("@VATName", VATName);
                    }
                    else
                    {
                        objCommVAT1.Parameters["@VATName"].Value = VATName;
                    }
                }
                else
                {
                    if (!objCommVAT1.Parameters.Contains("@VATName"))
                    {
                        objCommVAT1.Parameters.AddWithValue("@VATName", "");
                    }
                    else
                    {
                        objCommVAT1.Parameters["@VATName"].Value = "";
                    }

                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BOMNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BOMNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BOMDownload(SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1");

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"

 select  b.BomId, f.ProductCode FCode,f.ProductName FName,r.ProductCode RCode,r.ProductName RName,b.EffectDate,b.VatName
,b.TotalQuantity, b.UseQuantity,b.WastageQuantity,b.Cost
 from BOMRaws b
left outer join Products f on b.FinishItemNo=f.ItemNo
left outer join Products r on b.RawItemNo=r.ItemNo
left outer join Customers c on b.CustomerID=c.CustomerID
where b.RawItemType not in('overhead')
--and f.ProductName='Yuka Solution-100ml'
order by f.ProductName,b.EffectDate,b.VATName

";

                #endregion SQL Statement



                #region SQL Command

                SqlCommand objCommVAT1 = new SqlCommand();
                objCommVAT1.Connection = currConn;
                objCommVAT1.CommandText = sqlText;
                objCommVAT1.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BOMDownload", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BOMDownload", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BankNew(string BankID, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Bank Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT   
                            BankID ,
BankCode ,
                            isnull(BankName,'N/A')BankName, 
                            isnull(BranchName,'N/A')BranchName,
                            isnull(Address1,'N/A')Address1,
                            isnull(Address2,'N/A')Address2,
                            isnull(Address3,'N/A')Address3,
                            isnull(TelephoneNo,'N/A')TelephoneNo, 
                            isnull(ContactPerson,'N/A')ContactPerson,
                            isnull(ContactPersonTelephone,'N/A')ContactPersonTelephone, 
                            isnull(ContactPersonEmail,'N/A')ContactPersonEmail,
                            isnull(AccountNumber,'N/A')AccountNumber
                            FROM         dbo.BankInformations   
 ";
                if (BankID != "")
                {
                    sqlText += " WHERE BankID=@BankID";
                }
                sqlText += " order by BankName";


                #endregion

                #region SQL Command

                SqlCommand objCommBankReport = new SqlCommand();
                objCommBankReport.Connection = currConn;

                objCommBankReport.CommandText = sqlText;
                objCommBankReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter
                objCommBankReport.Parameters.AddWithValue("@BankID", BankID);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBankReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BankNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BankNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 05

        public DataSet CustomerGroupNew(string CustomerGroupID, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Customer Group Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT    CustomerGroupID, CustomerGroupName, CustomerGroupDescription, GroupType,Comments, ActiveStatus
                            FROM         CustomerGroups 
";
                if (CustomerGroupID != "")
                {

                    sqlText += " WHERE CustomerGroupID = '" + CustomerGroupID + "' ";
                }
                sqlText += "  order by CustomerGroupName";

                #endregion

                #region SQL Command

                SqlCommand objCommCustomrGroupReport = new SqlCommand();
                objCommCustomrGroupReport.Connection = currConn;

                objCommCustomrGroupReport.CommandText = sqlText;
                objCommCustomrGroupReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (CustomerGroupID == "")
                {
                    if (!objCommCustomrGroupReport.Parameters.Contains("@CustomerGroupID"))
                    {
                        objCommCustomrGroupReport.Parameters.AddWithValue("@CustomerGroupID", System.DBNull.Value);
                    }
                    else
                    {
                        objCommCustomrGroupReport.Parameters["@CustomerGroupID"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommCustomrGroupReport.Parameters.Contains("@CustomerGroupID"))
                    {
                        objCommCustomrGroupReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID);
                    }
                    else
                    {
                        objCommCustomrGroupReport.Parameters["@CustomerGroupID"].Value = CustomerGroupID;
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCustomrGroupReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "CustomerGroupNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "CustomerGroupNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet CustomerNew(string CustomerID, string CustomerGroupID, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Customer Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT  
                            C.CustomerID,
                            isnull(C.CustomerCode,'N/A')CustomerCode,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            isnull(C.VATRegistrationNo,'N/A')VATRegistrationNo,
                            isnull(C.TINNo,'N/A')TINNo,
                            isnull(C.Address1,'N/A')Address1,
                            isnull(C.Address2,'N/A')Address2,
                            isnull(C.Address3,'N/A')Address3,
                            isnull(C.TelephoneNo,'N/A')TelephoneNo,
                            isnull(C.ContactPerson,'N/A')ContactPerson,
                            isnull(C.ContactPersonTelephone,'N/A')ContactPersonTelephone,
                            isnull(C.ContactPersonEmail,'N/A')ContactPersonEmail ,
                            isnull(CG.CustomerGroupName,'N/A')CustomerGroupName,

                            isnull(CG.GroupType,'N/A')GroupType

                            FROM         dbo.Customers AS C LEFT OUTER JOIN
                                                  dbo.CustomerGroups AS CG ON C.CustomerGroupID = CG.CustomerGroupID
where c.ActiveStatus in ('N','Y')
";

                if (CustomerID != "")
                {
                    sqlText += " and CustomerID=@CustomerID  ";

                }
                if (CustomerGroupID != "")
                {
                    sqlText += " and c.CustomerGroupID=@CustomerGroupID ";

                }
                sqlText += " order by C.CustomerName ";


                #endregion

                #region SQL Command

                SqlCommand objCommCustomrReport = new SqlCommand();
                objCommCustomrReport.Connection = currConn;

                objCommCustomrReport.CommandText = sqlText;
                objCommCustomrReport.CommandType = CommandType.Text;

                #endregion


                #region Parameters
                objCommCustomrReport.Parameters.AddWithValue("@CustomerID", CustomerID);
                objCommCustomrReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCustomrReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "CustomerNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "CustomerNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet DepositNew(string DepositNo,
                                 string DepositDateFrom, string DepositDateTo, string BankID, string Post,
                                 string transactionType, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Deposit Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 SELECT TType,DepositId,TreasuryNo,DepositType,DepositDateTime,DepositAmount,ChequeNo,
ChequeDate,BankName,BranchName,DepositPerson,TransactionType,Post
FROM 
(
SELECT    'Deposit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post,B.BankID

FROM         dbo.Deposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
where Transactiontype NOT IN('AdjCashPayble-Credit','Treasury-Credit','VDS-Credit')

UNION ALL

SELECT    'Deposit-Credit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
-isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post,B.BankID

FROM         dbo.Deposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
where Transactiontype IN('AdjCashPayble-Credit','Treasury-Credit','VDS-Credit')


  

UNION ALL

SELECT   'SD' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
--'SDDeposit' TransactionType,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post,B.BankID

FROM SDDeposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
  where  TransactionType NOT IN('Treasury-Opening','Treasury-Credit')

  UNION ALL

SELECT   'SD-Credit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
-isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
--'SDDeposit' TransactionType
isnull(D.TransactionType ,'N/A')TransactionType
,d.Post,B.BankID

FROM SDDeposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
  where  TransactionType IN('Treasury-Credit')


) AS A


WHERE 
--(DepositAmount>0) AND
 TransactionType NOT IN('Treasury-Opening')";
                if (DepositNo != "")
                {
                    sqlText += " and DepositId=@DepositNo ";
                }
                if (DepositDateFrom != "")
                {
                    sqlText += " and DepositDateTime >=@DepositDateFrom ";
                }
                if (DepositDateTo != "")
                {
                    sqlText += " and DepositDateTime <dateadd(d,1, @DepositDateTo) ";
                }


                if (BankID != "")
                {
                    sqlText += " and BankID=@BankID ";
                }
                if (Post != "")
                {
                    sqlText += " and Post=@Post ";
                }
                if (transactionType != "")
                {
                    sqlText += " and TransactionType=@transactionType ";
                }


                sqlText += "  order by TransactionType,DepositDateTime";

                #endregion

                #region SQL Command

                SqlCommand objCommDepositReport = new SqlCommand();
                objCommDepositReport.Connection = currConn;

                objCommDepositReport.CommandText = sqlText;
                objCommDepositReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommDepositReport.Parameters.AddWithValue("@DepositNo", DepositNo);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateFrom", DepositDateFrom);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateTo", DepositDateTo);
                objCommDepositReport.Parameters.AddWithValue("@BankID", BankID);
                objCommDepositReport.Parameters.AddWithValue("@Post", Post);
                objCommDepositReport.Parameters.AddWithValue("@transactionType", transactionType);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDepositReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "DepositNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "DepositNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet VATDisposeDsNew(string DisposeNumber, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT Dispose Ds");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 	
                            d.DisposeNumber RFId
                            ,isnull(SaleNumber,'NA')BENumber
                            ,isnull(PurchaseNumber,'NA')PurchaseNumber
                            ,LineNumber
                            ,d.ItemNo
                            ,p.ProductName
                            ,p.ProductCode
                            ,p.ProductDescription
                            ,d.UOM
                            ,isnull((Quantity+QuantityImport)*RealPrice,0) RealAmount
                            ,isnull(Quantity,0)+isnull(QuantityImport,0)Quantity
                            ,'NA' serialNumber
                            ,isnull(d.VATAmount,0) RealVAT
                            ,isnull(PresentPrice,0) PresentValue
                            ,d.Remarks
                            ,convert (varchar(200),D.DisposeDate,120)PostingDate,
                            isnull(dh.AppVATAmount,0)+ isnull(dh.AppVATAmountImport,0)AppVATAmount,
                            isnull(dh.AppTotalPrice,0)+isnull(dh.AppTotalPriceImport,0)AppTotalPrice,

                            convert (varchar(200),dh.AppDate,120)AppDate,
                            dh.AppRefNumber,
                            dh.AppRemarks

                            FROM DisposeDetails D LEFT OUTER JOIN
                            Products P ON D.ItemNo=p.ItemNo left outer  JOIN
                            DisposeHeaders DH on d.DisposeNumber=dh.DisposeNumber

                            WHERE 
                            (dh.DisposeNumber = @DisposeNumber) 
                            and Quantity>0
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommRRItem = new SqlCommand();
                objCommRRItem.Connection = currConn;

                objCommRRItem.CommandText = sqlText;
                objCommRRItem.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommRRItem.Parameters.Contains("@DisposeNumber"))
                {
                    objCommRRItem.Parameters.AddWithValue("@DisposeNumber", DisposeNumber);
                }
                else
                {
                    objCommRRItem.Parameters["@DisposeNumber"].Value = DisposeNumber;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommRRItem);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VATDisposeDsNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VATDisposeDsNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet MISVAT16New(string CategoryId, string StartDate, string EndDate, string UserName, string ItemNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report MIS VAT-16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            --DECLARE @Itemno VARCHAR(200);
                           -- DECLARE @CategoryId VARCHAR(200);

                           -- DECLARE @StartDate DATETIME;
                           -- DECLARE @EndDate DATETIME;

CREATE TABLE #VAT_16_Management(	[ItemNo] [varchar](200) NULL,	[Opening] [decimal](25, 9) NULL,	
[UCost] [decimal](25, 9) NULL,	[Purchase] [decimal](25, 9) NULL,	[Issue] [decimal](25, 9) NULL)

                            insert into #VAT_16_Management(ItemNo,Opening,UCost,Purchase,Issue)
                            select distinct itemno,0,IssuePrice,0,0 from Products
                            where (itemno in(select  distinct itemno from PurchaseInvoiceDetails 
                            where PurchaseInvoiceDetails.Post='Y' and InvoiceDateTime >= @StartDate and InvoiceDateTime <DATEADD(d,1,@EndDate)  )
                            or itemno in(select  distinct itemno from IssueDetails 
                            where Post='Y' and IssueDateTime >= @StartDate and IssueDateTime < DATEADD(d,1,@EndDate) ))
                            and (CategoryId = @CategoryId or @CategoryId is null )
                            and (ItemNo = @ItemNo or @ItemNo is null )

                            update #VAT_16_Management set Opening=
                            isnull(Products.OpeningBalance,0)+isnull(Purchase.PurchaseQuantity,0)-isnull(Issue.IssueQuantity,0)
                            from #VAT_16_Management left outer join
                            Products on #VAT_16_Management.ItemNo=Products.ItemNo  left outer join
                            (select ItemNo,SUM(Quantity)PurchaseQuantity
                            from PurchaseInvoiceDetails
                            where Post='Y' and InvoiceDateTime < @StartDate  
                            group by ItemNo) Purchase on #VAT_16_Management.ItemNo=Purchase.itemno left outer join
                            (select ItemNo, SUM(Quantity)IssueQuantity 
                            from IssueDetails
                            where  Post='Y' and IssueDateTime < @StartDate 
                            group by ItemNo) Issue on #VAT_16_Management.ItemNo=Issue.ItemNo 

                            update #VAT_16_Management set Purchase=
                            isnull(Purchase.PurchaseQuantity,0)
                            from #VAT_16_Management left outer join
                            (select ItemNo,SUM(Quantity)PurchaseQuantity
                            from PurchaseInvoiceDetails
                            where Post='Y' and InvoiceDateTime >= @StartDate and InvoiceDateTime <DATEADD(d,1,@EndDate)
                            group by ItemNo) Purchase on #VAT_16_Management.ItemNo=Purchase.itemno

                            update #VAT_16_Management set Issue=
                            isnull(Issue.IssueQuantity,0)
                            from #VAT_16_Management  left outer join
                            (select ItemNo, SUM(Quantity)IssueQuantity 
                            from IssueDetails
                            where  Post='Y' and  IssueDateTime >= @StartDate and IssueDateTime < DATEADD(d,1,@EndDate)
                            group by ItemNo) Issue on #VAT_16_Management.ItemNo=Issue.ItemNo 

                            select a.itemno,b.productname,b.uom,a.opening,a.ucost,a.Purchase,a.Issue
                            from #VAT_16_Management as a left outer join
                            Products as b on a.itemno=b.itemno

                            DROP table #VAT_16_Management

                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                //if (!objCommVAT16.Parameters.Contains("@CategoryId"))
                //{ objCommVAT16.Parameters.AddWithValue("@CategoryId", CategoryId); }
                //else { objCommVAT16.Parameters["@CategoryId"].Value = CategoryId; }

                if (CategoryId == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@CategoryId", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@CategoryId"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@CategoryId", CategoryId);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@CategoryId"].Value = CategoryId;
                    }
                }


                if (!objCommVAT16.Parameters.Contains("@StartDate"))
                {
                    objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT16.Parameters.Contains("@EndDate"))
                {
                    objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }

                if (ItemNo == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ItemNo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ItemNo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                    }
                }
                //if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                //{ objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo); }
                //else { objCommVAT16.Parameters["@ItemNo"].Value = ItemNo; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MISVAT16New", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MISVAT16New", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet MISVAT17New(string CategoryId, string UserName, string StartDate, string EndDate, string ItemNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report MIS VAT-17");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
CREATE TABLE #VAT_17_Management(	[ItemNo] [varchar](200) NULL,	[Opening] [decimal](25, 9) NULL,	
[UCost] [decimal](25, 9) NULL,	[Received] [decimal](25, 9) NULL,	[Sale] [decimal](25, 9) NULL) 

                            insert into #VAT_17_Management(ItemNo,Opening,UCost,Received,Sale)
                            select distinct itemno,0,NBRPrice,0,0 from Products
                            where (itemno in(select  distinct itemno from ReceiveDetails 
                                                where Post='Y' and ReceiveDateTime >= @StartDate and ReceiveDateTime <DATEADD(d,1,@EndDate) )
                            or itemno in(select  distinct itemno from SalesInvoiceDetails 
                                            where  Post='Y' and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) ))
                            and (CategoryId = @CategoryId or @CategoryId is null)
                            and (ItemNo = @ItemNo or @ItemNo is null)

                            update #VAT_17_Management set Opening=
                            isnull(Products.OpeningBalance,0)+isnull(Received.ReceivedQuantity,0)-
                            isnull(Sale.SaleQuantity,0)+isnull(SaleC.SaleQuantity,0)
                            from #VAT_17_Management left outer join
                            Products on #VAT_17_Management.ItemNo=Products.ItemNo 
                            left outer join
                            (select ItemNo,SUM(Quantity)ReceivedQuantity
                            from ReceiveDetails
                            where  Post='Y' and ReceiveDateTime < @StartDate 
                            group by ItemNo) Received on #VAT_17_Management.ItemNo=Received.itemno
                            left outer join
                            (select ItemNo, SUM( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,SUM(isnull(SubTotal,0)+isnull(SDAmount,0)+
                            isnull(VATAmount,0)+(isnull(SubTotal,0)*isnull(tradingMarkup,0)/100))SaleAmount 
                            from SalesInvoiceDetails LEFT OUTER JOIN
                            SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
                            where  sih.Post='Y' and sih.TransactionType NOT IN ('Credit') 
                            and SalesInvoiceDetails.InvoiceDateTime < @StartDate 
                            group by ItemNo) Sale on #VAT_17_Management.ItemNo=Sale.ItemNo  left outer join
                            (select ItemNo, SUM( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,SUM(isnull(SubTotal,0)+isnull(SDAmount,0)
                            +isnull(VATAmount,0)+(isnull(SubTotal,0)*isnull(tradingMarkup,0)/100))SaleAmount 
                            from SalesInvoiceDetails LEFT OUTER JOIN
                            SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
                            where  sih.Post='Y' and sih.TransactionType IN ('Credit') 
                            and SalesInvoiceDetails.InvoiceDateTime < @StartDate 
                            group by ItemNo) SaleC on #VAT_17_Management.ItemNo=SaleC.ItemNo


                            update #VAT_17_Management set Received=
                            isnull(Received.ReceivedQuantity,0)+isnull(SaleC.SaleQuantity,0)
                            from #VAT_17_Management left outer join
                            (select ItemNo,SUM(Quantity)ReceivedQuantity
                            from ReceiveDetails
                            where  Post='Y' and ReceiveDateTime >= @StartDate and ReceiveDateTime <DATEADD(d,1,@EndDate)
                            group by ItemNo) Received on #VAT_17_Management.ItemNo=Received.itemno
                            left outer join
                            (select ItemNo, SUM( case when isnull(SalesInvoiceDetails.ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity 
                            from SalesInvoiceDetails
                            where  Post='Y' and saleType in('Credit')
                            and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate)
                            group by ItemNo) SaleC on #VAT_17_Management.ItemNo=SaleC.ItemNo


                            update #VAT_17_Management set Sale=
                            isnull(Sale.SaleQuantity,0)
                            from #VAT_17_Management left outer join
                            (select ItemNo, SUM(Quantity)SaleQuantity 
                            from SalesInvoiceDetails
                            where saleType in('New','Debit') 
                            and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate)
                            group by ItemNo) Sale on #VAT_17_Management.ItemNo=Sale.ItemNo 


                            select a.itemno,b.productname,b.uom,a.opening,a.ucost,a.received,a.sale
                            from #VAT_17_Management as a left outer join
                            Products as b on a.itemno=b.itemno

                            DROP table #VAT_17_Management

                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();
                objCommVAT17.Connection = currConn;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (CategoryId == "")
                {
                    if (!objCommVAT17.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@CategoryId", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@CategoryId"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT17.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@CategoryId", CategoryId);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@CategoryId"].Value = CategoryId;
                    }
                }
                if (!objCommVAT17.Parameters.Contains("@UserName"))
                {
                    objCommVAT17.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT17.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
                }
                // Common Filed

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
                }


                if (ItemNo == "")
                {
                    if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@ItemNo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@ItemNo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MISVAT17New", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MISVAT17New", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet MISVAT18New(string UserName, string StartDate, string EndDate, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report MIS VAT-18");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            declare @cnt int
                            declare @UnitCount int
                            declare @PVat [decimal](18, 2);

CREATE TABLE #VAT_18_Management(	[Sl] [decimal](25, 9) NULL,	[PeriodName] [varchar](200) NULL,
[PeriodStart] [datetime] NULL,	[PeriodEnd] [datetime] NULL,	[Opening] [decimal](25, 9) NULL,	
[Deposit] [decimal](25, 9) NULL,	[Purchase] [decimal](25, 9) NULL,	[Sale] [decimal](25, 9) NULL) 

                            insert into #VAT_18_Management(Sl,PeriodName,PeriodStart,PeriodEnd,Opening,Deposit,Purchase,Sale)
                            select ROW_NUMBER() OVER(ORDER by PeriodStart),PeriodName,PeriodStart,PeriodEnd,0,0,0,0 from fiscalyear
                            where PeriodStart >=@StartDate
                            and PeriodEnd <=@EndDate
                            order by PeriodStart

                            set @cnt=1
                            set @UnitCount=(select max (sl) from #VAT_18_Management)
                            while @cnt<=@UnitCount
                            begin

                            select @PVat= isnull(sum(DepositAmount),0)    
                             from  Deposits WHERE Post='Y' and  DepositDateTime < 	(select PeriodStart from #VAT_18_Management where sl=@cnt )
                            select @PVat= @PVat+isnull(sum(totalvatamount) ,0)    
                            from  PurchaseInvoiceHeaders where invoicedatetime < (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            select @PVat= @PVat-isnull(sum(totalvatamount),0)    
                             from  SalesInvoiceHeaders 
                                  where SalesInvoiceHeaders.TransactionType NOT IN('Credit') AND  Post='Y' and invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            select @PVat= @PVat+isnull(sum(totalvatamount) ,0)   
                             from  SalesInvoiceHeaders     where Post='Y' and   SalesInvoiceHeaders.TransactionType IN('Credit')
                              and invoicedatetime < (select PeriodStart from #VAT_18_Management where sl=@cnt )

                            update #VAT_18_Management set Opening=@PVat where Sl=@cnt

                            update  #VAT_18_Management set 
                            deposit=
                            (select   isnull(sum(DepositAmount),0)
                            from  Deposits    where Post='Y' and DepositDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt) 
                            and DepositDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt)))
                            where sl=@cnt

                            update  #VAT_18_Management set sale=
                            (select isnull(sum(TotalVATAmount),0)
                            from  SalesInvoiceHeaders 
                            where Post='Y'   and SalesInvoiceHeaders.TransactionType NOT IN('Credit')and InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))) 

                             where sl=@cnt 

                            update  #VAT_18_Management set Purchase=
                            (select isnull(sum(TotalVATAmount),0)
                            from  SalesInvoiceHeaders 
                            where Post='Y' and SalesInvoiceHeaders.TransactionType IN('Credit')and InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt)))

                            where sl=@cnt

                            update  #VAT_18_Management set Purchase=
                            ( select  isnull(sum(TotalVATAmount),0)
                            from  PurchaseInvoiceHeaders
                            where Post='Y' and InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt)))
                            where sl=@cnt 

                            set @cnt=@cnt+1
                            End

                            select PeriodName,Opening,Deposit,Purchase ,sale from #VAT_18_Management 

                            DROP TABLE #VAT_18_Management
  
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MISVAT18New", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MISVAT18New", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ProductCategoryNew(string cgID, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Product Category Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 
                            CategoryID,
                            isnull(CategoryName,'N/A')CategoryName,
                            isnull(HSCodeNo,'N/A')HSCodeNo ,
                            isnull(VATRate,0)VATRate ,
                            isnull(IsRaw,'N/A')IsRaw,
                            isnull(Description,'N/A') Description,
                            isnull(ActiveStatus,'N')ActiveStatus

                            FROM         dbo.ProductCategories ";
                if (cgID != "")
                {
                    sqlText += " WHERE CategoryID=@cgID";

                }
                sqlText += " order by CategoryName";



                #endregion

                #region SQL Command

                SqlCommand objCommProductCategoryReport = new SqlCommand();
                objCommProductCategoryReport.Connection = currConn;

                objCommProductCategoryReport.CommandText = sqlText;
                objCommProductCategoryReport.CommandType = CommandType.Text;

                #endregion


                #region Parameter
                objCommProductCategoryReport.Parameters.AddWithValue("@cgID", cgID);
                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProductCategoryReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ProductCategoryNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ProductCategoryNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ProductNew(string ItemNo, string CategoryID, string IsRaw, SysDBInfoVMTemp connVM = null, string ProductCode = "")
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Product Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT  
                                                        p.ItemNo,

                            isnull(p.ProductName,'N/A')ProductName, 
                            isnull(PC.CategoryName,'N/A')CategoryName,
                            isnull(p.HSCodeNo,'N/A')HSCodeNo,
                            isnull(p.VATRate,0)VATRate,
                            isnull(p.SD,0)SD,
                            isnull(p.UOM,'N/A')UOM ,
                            isnull(p.NBRPrice,0)NBRPrice ,
                            isnull(p.SalesPrice,0)SalesPrice,
                            isnull(p.CostPrice,0)CostPrice,
                            isnull(p.PacketPrice,0)PacketPrice,
                            isnull(p.SerialNo,'N/A') SerialNo,
                            pc.IsRaw,p.ProductCode 

                            FROM         dbo.Products AS p LEFT OUTER JOIN
                            dbo.ProductCategories AS PC ON p.CategoryID = PC.CategoryID

                            WHERE p.ActiveStatus in ('Y','N') and p.IsArchive<>1";
                if (!string.IsNullOrWhiteSpace(ItemNo) && ItemNo != "0")
                {
                    sqlText += " and ItemNo=@ItemNo";
                }
                if (!string.IsNullOrWhiteSpace(CategoryID))
                {
                    sqlText += " and p.CategoryID=@CategoryID";
                }
                if (!string.IsNullOrWhiteSpace(IsRaw))
                {
                    sqlText += " and pc.IsRaw=@IsRaw";
                }
                if (!string.IsNullOrWhiteSpace(ProductCode))
                {
                    sqlText += " and p.ProductCode =@ProductCode";
                }

                sqlText += " order by ProductName";

                #endregion

                #region SQL Command

                SqlCommand objCommProductReport = new SqlCommand();
                objCommProductReport.Connection = currConn;

                objCommProductReport.CommandText = sqlText;
                objCommProductReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                if (!string.IsNullOrWhiteSpace(ItemNo) && ItemNo != "0")
                {
                    objCommProductReport.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                if (!string.IsNullOrWhiteSpace(CategoryID))
                {
                    objCommProductReport.Parameters.AddWithValue("@CategoryID", CategoryID);
                }
                if (!string.IsNullOrWhiteSpace(IsRaw))
                {
                    objCommProductReport.Parameters.AddWithValue("@IsRaw", IsRaw);
                }
                if (!string.IsNullOrWhiteSpace(ProductCode))
                {
                    objCommProductReport.Parameters.AddWithValue("@ProductCode", ProductCode);
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProductReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ProductNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ProductNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 06 / MIS Reports

        public DataSet PurchaseNew(string PurchaseInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo,
                             string VendorId, string ItemNo, string CategoryID, string ProductType,
                             string TransactionType, string Post,
                             string PurchaseType, string VendorGroupId, string FromBOM, string UOM, string UOMn,
                             decimal UOMc, decimal TotalQty, decimal rCostPrice, bool pCategoryLike = false, string PGroup = "", int BranchId = 0, string VatType = "", string IsRebate = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string purchaseInvoiceNo = PurchaseInvoiceNo;
            string invoiceDateFrom = InvoiceDateFrom;
            string invoiceDateTo = InvoiceDateTo;
            string vendorId = VendorId;
            string itemNo = ItemNo;
            string categoryID = CategoryID;
            string productType = ProductType;
            string transactionType = TransactionType;
            string post = Post;
            string purchaseType = PurchaseType;
            string sqlTextVatType = "";

            DataSet dataSet = new DataSet("Purchase Report");

            #endregion

            #region Try

            try
            {

                #region Settings Value

                CommonDAL _CommonDAL = new CommonDAL();

                string ImportCostingIncludeATV = "N";
                ImportCostingIncludeATV = _CommonDAL.settingValue("Purchase", "ImportCostingIncludeATV");

                #endregion

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = " ";
                sqlText =
                    @"
SELECT    
PIH.PurchaseInvoiceNo PurchaseInvoiceNo
,PIH.InvoiceDateTime InvoiceDateTime
,PIH.LCNumber LCNumber
,ISNULL(PIH.SerialNo,'-') RefNumber
,PIH.LCDate LCDate
,PIH.VendorID VendorID
,isnull(V.VendorName,'N/A')VendorName
,isnull(V.VATRegistrationNo,'N/A')VATRegistrationNo
,isnull(V.Address1,'N/A')Address1
,PID.ItemNo ItemNo
,isnull(P.ProductName,'N/A')ProductName
,p.ProductCode,isnull(UOMn,'NA')UOMn
,isnull(UOMQty,0)UOMQty
,isnull(UOMPrice,0)UOMPrice
,pc.CategoryName
,pc.IsRaw   
,PIH.ReceiveDate ReceiveDate
,isnull(PID.UOM,'N/A')UOM
,isnull(PID.Quantity,0)Quantity
,isnull(PID.CostPrice,0)CostPrice
,isnull(PID.SD,0)SD
,isnull(PID.SDAmount,0)SDAmount
,isnull(PID.VATRate,0)VATRate
,PID.CnFAmount
,PID.InsuranceAmount
,PID.CDAmount
,PID.RDAmount
,PID.TVBAmount
,PID.TVAAmount
,isnull(isnull(PID.SubTotal,0)+isnull(PID.CDAmount,0)+isnull(PID.RDAmount,0)+isnull(PID.SDAmount,0)+isnull(PID.VATAmount,0),0)Total

";

                #region Import Costing Include ATV

                if (ImportCostingIncludeATV == "Y")
                {
                    sqlText += @",PID.ATVAmount";
                }
                else
                {
                    sqlText += @",0.0 ATVAmount";
                }

                #endregion

                sqlText += @"  
,isnull(PID.AITAmount,0)AITAmount
,PID.OthersAmount
,PID.AssessableValue
--,CASE 
--WHEN PID.TransactionType='InputService' or PID.TransactionType='InputServiceImport' THEN isnull(PID.RebateAmount,0)
--ELSE isnull(PID.VATAmount,0) END AS VATAmount
, isnull(PID.VATAmount,0) AS VATAmount ";

                #region Condtional Values

                if (FromBOM == "Y")
                {
                    sqlText +=
                        @"  
, CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal
";
                }
                else
                {
                    sqlText +=
                        @" , isnull(PID.SubTotal,0)  AS SubTotal";
                }

                #endregion

                sqlText += @"  
,convert (varchar,PID.ReceiveDate,120)ReceiveDate
,isnull(PID.BENumber,'-')BENumber
";

                #region Direct Values

                sqlText += " ,'" + UOM + "' rUOM ";
                sqlText += " ,'" + UOMn + "' rUOMn ";
                sqlText += " ,cast(" + UOMc + " as decimal(25,9)) rUOMc";
                sqlText += " ,cast(" + TotalQty + "as decimal(25,9)) rTotalQty ";
                sqlText += " , cast(" + rCostPrice + " as decimal(25,9)) ItemCostPrice ";

                #endregion

                sqlText += @"  	
					
FROM         PurchaseInvoiceHeaders AS PIH 
LEFT OUTER JOIN PurchaseInvoiceDetails AS PID ON PIH.PurchaseInvoiceNo = PID.PurchaseInvoiceNo 
LEFT OUTER JOIN Products AS P ON PID.ItemNo = P.ItemNo 
LEFT OUTER JOIN ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER join Vendors AS V ON PIH.VendorID = V.VendorID  
LEFT OUTER JOIN vendorGroups vg ON v.VendorGroupID=vg.VendorGroupID 
WHERE PID.Quantity>0 
and PIH.BranchId=@BranchId
--------and PID.Type=@Type
";
                #region sqlText VAT Type

                sqlTextVatType = "";

                if (VatType.ToLower() == "NonVAT-Local".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('NonVAT')
                   and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
";
                }
                else if (VatType.ToLower() == "NonVAT-Import".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('NonVAT')
                   and PID.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')
";
                }
                else if (VatType.ToLower() == "Exempted-Local".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('Exempted')
                    and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')";
                }
                else if (VatType.ToLower() == "Exempted-Import".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('Exempted')
                   and PID.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')
";
                }
                else if (VatType.ToLower() == "VAT-Local".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('VAT')
                    and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')";
                }
                else if (VatType.ToLower() == "VAT-Import".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('VAT')
                   and PID.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')
";
                }
                else if (VatType.ToLower() == "OtherRate-Local".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('OtherRate')
                    and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')";
                }
                else if (VatType.ToLower() == "OtherRate-Import".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('OtherRate')
                   and PID.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')
";
                }
                else if (VatType.ToLower() == "NonRebate-Local".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
                    and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')";
                }
                else if (VatType.ToLower() == "NonRebate-Import".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
                   and PID.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')
";
                }
                else if (VatType.ToLower() == "NonVAT".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('NonVAT')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }

                else if (VatType.ToLower() == "Exempted".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('Exempted')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }

                else if (VatType.ToLower() == "VAT".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('VAT')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }

                else if (VatType.ToLower() == "OtherRate".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('OtherRate')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }
                else if (VatType.ToLower() == "FixedVAT".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('FixedVAT')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }
                else if (VatType.ToLower() == "Ternover".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('Ternover')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }
                else if (VatType.ToLower() == "UnRegister".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('UnRegister')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }
                else if (VatType.ToLower() == "NonRebate".ToLower())
                {
                    sqlTextVatType += @" and PID.Type in('NonRebate','Local-NonRebate', 'Import-NonRebate')
	and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter')";
                }
                else if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                {
                    sqlTextVatType += @"  and PID.Type in('NonVAT','Exempted','VAT','OtherRate','FixedVAT','Ternover','UnRegister','NonRebate','Local-NonRebate', 'Import-NonRebate')";
                    if (transactionType != "")
                    {
                        sqlTextVatType += " and pid.TransactionType='" + transactionType + "' ";
                    }
                    else
                    {
                        sqlTextVatType += @"  and PID.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService'
	,'Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter', 'TollReceive-WIP')";

                    }
                }

                #endregion

                sqlText += sqlTextVatType;

                #endregion

                #region Parameter

                if (FromBOM == "Y")
                {
                    sqlText += " and PIH.PurchaseInvoiceNo='" + purchaseInvoiceNo + "' ";
                    sqlText += " and p.ItemNo='" + itemNo + "' ";

                }
                else if (FromBOM == "N")
                {
                    //if (purchaseInvoiceNo != "")
                    if (!string.IsNullOrEmpty(purchaseInvoiceNo))
                    {
                        sqlText += " and PIH.PurchaseInvoiceNo='" + purchaseInvoiceNo + "' ";
                    }
                    if (!string.IsNullOrEmpty(itemNo))
                    {
                        sqlText += " and p.ItemNo='" + itemNo + "' ";
                    }
                    if (pCategoryLike)
                    {
                        sqlText += " and (pc.CategoryName LIKE '%' + '" + PGroup + "' + '%' )";

                    }
                    else
                    {

                        if (!string.IsNullOrEmpty(categoryID))
                        {
                            sqlText += " and pc.categoryID='" + categoryID + "' ";
                        }
                    }
                    if (!string.IsNullOrEmpty(productType))
                    {
                        sqlText += " and pc.IsRaw='" + productType + "' ";
                    }
                    if (!string.IsNullOrEmpty(vendorId))
                    {
                        sqlText += " and v.VendorID='" + vendorId + "' ";
                    }



                    if (!string.IsNullOrEmpty(invoiceDateFrom))
                    {
                        sqlText += " and pid.ReceiveDate >='" + invoiceDateFrom + "' ";
                    }
                    if (!string.IsNullOrEmpty(invoiceDateTo))
                    {
                        sqlText += " and pid.ReceiveDate <dateadd(d,1, '" + invoiceDateTo + "') ";
                    }
                    if (!string.IsNullOrEmpty(VendorGroupId))
                    {
                        sqlText += " and vg.VendorGroupID='" + VendorGroupId + "' ";
                    }
                }
                if (!string.IsNullOrEmpty(post))
                {
                    sqlText += " and pid.Post='" + post + "' ";
                }
                if (!string.IsNullOrEmpty(IsRebate))
                {
                    sqlText += " and PIH.IsRebate='" + IsRebate + "' ";
                }

                sqlText += " ORDER BY PIH.PurchaseInvoiceNo ";

                #endregion Parameter

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }


                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;

                #endregion

                objCommPurchaseReport.Parameters.AddWithValue("@BranchId", BranchId);
                objCommPurchaseReport.Parameters.AddWithValue("@Type", VatType);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                ////FileLogger.Log("PurchaseNew", "PurchaseNew", sqlex.ToString());

                FileLogger.Log("ReportDSDAL", "PurchaseNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                ////FileLogger.Log("PurchaseNew", "PurchaseNew", ex.ToString());

                FileLogger.Log("ReportDSDAL", "PurchaseNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataSet IssueNew(string IssueNo, string IssueDateFrom, string IssueDateTo, string itemNo,
                                string categoryID, string productType, string TransactionType, string Post, string waste, bool pCategoryLike = false, string PGroup = "", int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Issue Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT   
IH.IssueNo IssueNo, 
convert (varchar,IH.IssueDateTime,120)IssueDateTime,
ID.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName, 
isnull(P.ProductCode,'N/A')ProductCode,
isnull(ID.UOM,'N/A')UOM, 
isnull(ID.UOMn,'N/A')UOMn,
isnull(ID.UOMc,1)UOMc,
isnull(ID.UOMQty,isnull(ID.Quantity,0))UOMQty,
isnull(ID.Wastage,0)*isnull(ID.UOMc,1) UOMWastage,
isnull(ID.UOMPrice,isnull(ID.CostPrice,0))UOMPrice,
isnull(ID.CostPrice,0)CostPrice, 
isnull(ID.Quantity ,0)Quantity,
isnull(ID.Wastage ,0)Wastage,
isnull(ID.SubTotal ,0)SubTotal,
pc.CategoryName,pc.IsRaw ProductType,
                            
isnull(IH.Comments ,'N/A')Comments
,SUBSTRING(IH.ImportIDExcel,0,CHARINDEX('~',IH.ImportIDExcel,0)) AS ImportIDExcel
FROM  dbo.IssueDetails AS ID LEFT OUTER JOIN
dbo.IssueHeaders AS IH ON ID.IssueNo = IH.IssueNo LEFT OUTER JOIN
dbo.Products AS P ON ID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories PC on p.CategoryID=pc.CategoryID

                            WHERE (ID.Quantity>0) and ID.BranchId=@BranchId ";

                #region Where

                if (!string.IsNullOrWhiteSpace(IssueNo))
                {
                    sqlText += " and ID.IssueNo=@IssueNo";
                }

                if (waste == "Y")
                {
                    sqlText += " and ID.Wastage>0";
                }
                else if (waste == "N")
                {
                    sqlText += " and ID.Wastage<=0";
                }

                if (!string.IsNullOrWhiteSpace(itemNo))
                {
                    sqlText += " and p.ItemNo=@itemNo";
                }
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName LIKE '%' @PGroup '%' )";

                }
                else
                {
                    if (!string.IsNullOrWhiteSpace(categoryID))
                    {
                        sqlText += " and pc.categoryID=@categoryID ";
                    }
                }
                if (!string.IsNullOrWhiteSpace(productType))
                {
                    sqlText += " and pc.IsRaw=@productType ";
                }
                if (!string.IsNullOrWhiteSpace(TransactionType))
                {
                    sqlText += " and ID.TransactionType=@TransactionType  ";
                }

                if (!string.IsNullOrWhiteSpace(Post))
                {
                    sqlText += " and ID.Post=@Post ";
                }
                if (!string.IsNullOrWhiteSpace(IssueDateFrom))
                {
                    sqlText += " and ID.IssueDateTime >=@IssueDateFrom ";
                }
                if (!string.IsNullOrWhiteSpace(IssueDateTo))
                {
                    sqlText += " and ID.IssueDateTime <dateadd(d,1, @IssueDateTo) ";
                }



                #endregion Where

                sqlText += " order by ID.IssueNo ";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommIssueReport.Parameters.AddWithValue("@BranchId", BranchId);
                objCommIssueReport.Parameters.AddWithValue("@IssueNo", IssueNo);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@itemNo", itemNo);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@PGroup", PGroup);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@categoryID", categoryID);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@productType", productType);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@TransactionType", TransactionType);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@Post", Post);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateFrom", IssueDateFrom);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateTo", IssueDateTo);

                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "IssueNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "IssueNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ReceiveNew(string ReceiveNo, string ReceiveDateFrom, string ReceiveDateTo, string itemNo,
                                  string categoryID, string productType, string transactionType, string post, string ShiftId = "0", int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Receive Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT   
RH.ReceiveNo ReceiveNo, 
convert (varchar,RH.ReceiveDateTime,120)ReceiveDateTime,
RD.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
isnull(P.ProductCode,'N/A')ProductCode,
isnull(RD.UOM,'N/A')UOM, 
isnull(RD.UOMn,'N/A')UOMn,
isnull(RD.UOMc,1)UOMc,
isnull(RD.UOMQty,isnull(RD.Quantity,0))UOMQty,
isnull(RD.UOMPrice,isnull(RD.CostPrice,0))UOMPrice,
isnull(RD.Quantity,0) Quantity,
isnull(RD.CostPrice,0)CostPrice,
isnull(RD.SD,0)SD,
isnull(RD.SDAmount,0)SDAmount,
isnull(RD.VATRate,0)VATRate,
isnull(RD.VATAmount,0)VATAmount,
isnull(RD.SubTotal,0)SubTotal,
pc.CategoryName,pc.IsRaw ProductType,
isnull(RH.Comments,'N/A') Comments
FROM  ReceiveDetails AS RD LEFT OUTER JOIN
ReceiveHeaders AS RH ON RD.ReceiveNo = RH.ReceiveNo LEFT OUTER JOIN
Products AS P ON RD.ItemNo = P.ItemNo  left outer join
ProductCategories PC on p.CategoryID=pc.CategoryID  

                            WHERE (RD.Quantity>0) and  RD.BranchId=@BranchId ";
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and RH.ShiftId=@ShiftId ";
                }
                if (ReceiveNo != "")
                {
                    sqlText += " and RH.ReceiveNo=@ReceiveNo ";
                }

                if (itemNo != "")
                {
                    sqlText += " and RD.ItemNo=@itemNo ";
                }
                if (categoryID != "")
                {
                    sqlText += " and pc.categoryID=@categoryID ";
                }
                if (productType != "")
                {
                    sqlText += " and pc.IsRaw=@productType ";
                }
                if (transactionType != "")
                {
                    sqlText += " and RH.TransactionType=@transactionType ";
                }

                if (post != "")
                {
                    sqlText += " and RH.Post=@post ";
                }
                if (ReceiveDateFrom != "")
                {
                    sqlText += " and RH.ReceiveDateTime >=@ReceiveDateFrom ";
                }
                if (ReceiveDateTo != "")
                {
                    sqlText += " and RH.ReceiveDateTime <=@ReceiveDateTo ";
                    //sqlText += " and RH.ReceiveDateTime <dateadd(d,1, '" + ReceiveDateTo + "') ";
                }


                sqlText += "  order by RH.ReceiveDateTime";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                #endregion

                #region SQL Command

                SqlCommand objCommReceiveReport = new SqlCommand();
                objCommReceiveReport.Connection = currConn;

                objCommReceiveReport.CommandText = sqlText;
                objCommReceiveReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommReceiveReport.Parameters.AddWithValue("@BranchId", BranchId);
                objCommReceiveReport.Parameters.AddWithValue("@ShiftId", ShiftId);
                objCommReceiveReport.Parameters.AddWithValue("@ReceiveNo", ReceiveNo);
                objCommReceiveReport.Parameters.AddWithValue("@itemNo", itemNo);
                objCommReceiveReport.Parameters.AddWithValue("@categoryID", categoryID);
                objCommReceiveReport.Parameters.AddWithValue("@productType", productType);
                objCommReceiveReport.Parameters.AddWithValue("@transactionType", transactionType);
                objCommReceiveReport.Parameters.AddWithValue("@post", post);
                objCommReceiveReport.Parameters.AddWithValue("@ReceiveDateFrom", ReceiveDateFrom);
                objCommReceiveReport.Parameters.AddWithValue("@ReceiveDateTo", ReceiveDateTo);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommReceiveReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ReceiveNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ReceiveNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }
        public DataSet SaleNew(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                            string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                            string onlyDiscount, bool bPromotional, string CustomerGroupID, bool pCategoryLike = false, string PGroup = ""
            , string ShiftId = "0", int branchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null, string OrderBy = "", string DataSource = "", string Toll = "N", string Type = "", string ReportType = "")
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string sqlTextVatType = "";
            string orderByIni = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                //string CompanyCode =new CommonDAL().settings("CompanyCode", "Code");

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
SELECT    
SIH.SalesInvoiceNo SalesInvoiceNo, 
ISNULL(SIH.SerialNo,'-') AS RefNo,
convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
isnull(C.CustomerName,'N/A')CustomerName,
isnull(C.Address1,'N/A')Address1,
isnull(C.VATRegistrationNo,'N/A')VATRegistrationNo,
sid.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
isnull(P.ProductCode,'N/A')ProductCode,
isnull(SID.UOM,'N/A')UOM,
isnull(SID.UOMn,'N/A')UOMn,
isnull(SID.UOMc,1)UOMc,                            
isnull(SID.Quantity,0)Quantity,
isnull(V.VehicleNo,'N/A')VehicleNo,
isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
isnull(isnull(SID.Quantity,0)  -isnull(SID.PromotionalQuantity,0),0) SaleQuantity,
isnull(SID.UOMQty,isnull(SID.Quantity,0))UOMQty,
isnull(SID.NBRPrice,0)NBRPrice,
isnull(NULLIF(isnull(SID.DiscountedNBRPrice,0),0),
isnull(SID.NBRPrice,0))Discount,
isnull(SID.UOMPrice,isnull(SID.NBRPrice,0))UOMPrice,
isnull(SID.SD,0)SD,
isnull(SID.SDAmount,0)SDAmount,
isnull(SID.VATRate,0)VATRate,
isnull(SID.VATAmount,0)VATAmount ,
--isnull(SID.SubTotal,0) SubTotal,
-- isnull(isnull(SID.SubTotal,0)+isnull(SID.SDAmount,0)+isnull(SID.VATAmount,0),0)Total,
isnull(SID.CurrencyValue,0) SubTotal,
isnull(isnull(SID.CurrencyValue,0)+isnull(SID.SDAmount,0)+isnull(SID.VATAmount,0),0)Total,
SID.Trading,
SID.TradingMarkUp,
SID.NonStock,
SID.SaleType,
SIH.LCNumber,
SIH.LCDate,
isnull(SIH.DeliveryAddress1,'N/A')FinalDestination,
-- isnull(SECD.ChassisNumber,'N/A')ChassisNumber,
-- isnull(SECD.EngineNumber,'N/A')EngineNumber,
isnull(SIH.Comments,'N/A')Comments,

pc.CategoryName,pc.IsRaw ProductType
,isnull(trc.Heading1,'')Heading1
,isnull(trc.Heading2,'')Heading2
,isnull(SIH.OrderNumber,'-')OrderNumber

FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
--left outer join dbo.SaleEngineChassisDetails as SECD on SECD.SalesInvoiceNo=SIH.SalesInvoiceNo
      
                            WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
                           -- and P.ActiveStatus='Y'

                                                ";

                #region sqlTextVatType
                sqlTextVatType = "";
                if (Toll == "Y")
                {
                    sqlTextVatType += @"and SID.TransactionType in('TollSale')";
                }
                else
                {

                    if (VatType.ToLower() == "Export".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Export' 
                    and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "DeemExport".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='DeemExport' 
                  and  SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "NonVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='NonVAT' 
               and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "VAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='VAT' 
              and SID.TransactionType in('ServiceNS','Service','TollFinishIssue','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS' ,'Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "MRPRate".ToLower() || VatType.ToLower() == "MRPRate(SC)".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type in('MRPRate','MRPRate(SC)') 
             and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "FixedVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='FixedVAT' 
                    and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "OtherRate".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='OtherRate' 
              and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','Tender','Trading','TradingTender','InternalIssue')
";
                    }
                    else if (VatType.ToLower() == "Retail".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Retail' 
            and SID.TransactionType in('Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading','TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                    {
                        sqlTextVatType += @" and SID.Type in('Export','DeemExport','NonVAT','VAT','MRPRate','MRPRate(SC)','FixedVAT'
					,'OtherRate','Retail'  )";
                        if (vTransactionType != "")
                        {
                            sqlTextVatType += " and SID.TransactionType=@vTransactionType  ";
                        }
                        else
                        {
                            sqlTextVatType += @"  
 and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
,'ExportTrading','ExportTradingTender','ExportService'
,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
";
                        }
                    }
                }

                #endregion sqlTextVatType

                sqlText += sqlTextVatType;
                //DiscountAmount

                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (vTransactionType != "")
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }
                //if (CompanyCode.ToLower()=="nestle")
                //{
                //    sqlText += " and SID.ProductType in('P','R') ";
                //}
                if (!string.IsNullOrWhiteSpace(OrderBy))
                {


                    if (ReportType == "SummaryByProduct")
                    {
                        sqlText += " order by " + " P." + OrderBy;

                    }
                    else
                    {
                        orderByIni = "SIH.SalesInvoiceNo ASC";
                        //OrderBy += orderByIni+","+OrderBy; 
                        sqlText += " order by " + orderByIni + ", P." + OrderBy;

                    }

                }

                #endregion Parameter

                sqlText += @"     
SELECT    distinct shft.ShiftName,pc.CategoryName, sum( isnull(SID.UOMQty,isnull(SID.Quantity,0)))UOMQty

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
left outer join Shifts shft on SIH.ShiftId=shft.Id 
    WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
    and P.ActiveStatus='Y'

                       ";


                sqlText += sqlTextVatType;

                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo  ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (vTransactionType != "")
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }

                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }
                //if (CompanyCode.ToLower() == "nestle")
                //{
                //    sqlText += " and SID.ProductType in('P','R') ";
                //}
                sqlText += @" 	 group by  shft.ShiftName,pc.CategoryName
	 	  ";


                #endregion Parameter

                sqlText += @" 

  SELECT    distinct isnull(C.CustomerName,'N/A')CustomerName,pc.CategoryName,sum( isnull(SID.UOMQty,isnull(SID.Quantity,0)))UOMQty

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
WHERE 1=1
and SID.BranchId=@BranchId
and P.ActiveStatus='Y'

 
";

                sqlText += sqlTextVatType;



                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }

                //JBR
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";


                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateFrom))
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateTo))
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo  ";
                }
                if (!string.IsNullOrEmpty(vCustomerid))
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (!string.IsNullOrEmpty(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (!string.IsNullOrEmpty(vItemNo))
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (!string.IsNullOrEmpty(vCategoryID))
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (!string.IsNullOrEmpty(vproductType))
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (!string.IsNullOrEmpty(vTransactionType))
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (!string.IsNullOrEmpty(vPost))
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }
                //if (CompanyCode.ToLower() == "nestle")
                //{
                //    sqlText += " and SID.ProductType in('P','R') ";
                //}
                sqlText += " group by  isnull(C.CustomerName,'N/A'),pc.CategoryName ";
                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                //if (string.IsNullOrEmpty(VatType))
                //{
                //    sqlText = sqlText.Replace("SID.Type=@Type", "1=1");
                //}
                #endregion Parameter
                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 180;


                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);
                //objCommSaleReport.Parameters.AddWithValue("@Type", VatType);
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommSaleReport.Parameters.Contains("@ShiftId"))
                    { objCommSaleReport.Parameters.AddWithValue("@ShiftId", ShiftId); }
                    else { objCommSaleReport.Parameters["@ShiftId"].Value = ShiftId; }


                }
                if (vSalesInvoiceNo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vSalesInvoiceNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vSalesInvoiceNo", vSalesInvoiceNo); }
                    else { objCommSaleReport.Parameters["@vSalesInvoiceNo"].Value = vSalesInvoiceNo; }
                }





                if (InvoiceDateFrom != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommSaleReport.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }

                }
                if (InvoiceDateTo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateTo"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommSaleReport.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }

                }
                if (vCustomerid != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vCustomerid"))
                    { objCommSaleReport.Parameters.AddWithValue("@vCustomerid", vCustomerid); }
                    else { objCommSaleReport.Parameters["@vCustomerid"].Value = vCustomerid; }

                }

                if (CustomerGroupID != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@CustomerGroupID"))
                    { objCommSaleReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID); }
                    else { objCommSaleReport.Parameters["@CustomerGroupID"].Value = CustomerGroupID; }

                }
                if (vItemNo != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vItemNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vItemNo", vItemNo); }
                    else { objCommSaleReport.Parameters["@vItemNo"].Value = vItemNo; }

                }
                if (pCategoryLike)
                {

                    if (!objCommSaleReport.Parameters.Contains("@PGroup"))
                    { objCommSaleReport.Parameters.AddWithValue("@PGroup", PGroup); }
                    else { objCommSaleReport.Parameters["@PGroup"].Value = PGroup; }


                }
                else
                {
                    if (vCategoryID != "")

                        if (!objCommSaleReport.Parameters.Contains("@vCategoryID"))
                        { objCommSaleReport.Parameters.AddWithValue("@vCategoryID", vCategoryID); }
                        else { objCommSaleReport.Parameters["@vCategoryID"].Value = vCategoryID; }

                }
                if (vproductType != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vproductType"))
                    { objCommSaleReport.Parameters.AddWithValue("@vproductType", vproductType); }
                    else { objCommSaleReport.Parameters["@vproductType"].Value = vproductType; }

                }
                if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                {
                    if (vTransactionType != "")
                    {

                        if (!objCommSaleReport.Parameters.Contains("@vTransactionType"))
                        { objCommSaleReport.Parameters.AddWithValue("@vTransactionType", vTransactionType); }
                        else { objCommSaleReport.Parameters["@vTransactionType"].Value = vTransactionType; }

                    }
                }
                if (vPost != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vPost"))
                    { objCommSaleReport.Parameters.AddWithValue("@vPost", vPost); }
                    else { objCommSaleReport.Parameters["@vPost"].Value = vPost; }

                }

                if (!string.IsNullOrEmpty(DataSource))
                {

                    if (!objCommSaleReport.Parameters.Contains("@DataSource"))
                    { objCommSaleReport.Parameters.AddWithValue("@DataSource", DataSource); }
                    else { objCommSaleReport.Parameters["@DataSource"].Value = DataSource; }

                }

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SaleMISExcel(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                            string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                            string onlyDiscount, bool bPromotional, string CustomerGroupID, bool pCategoryLike = false, string PGroup = ""
            , string ShiftId = "0", int branchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null, string OrderBy = "", string DataSource = "", string Toll = "N", string Type = "", string ReportType = "")
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;

            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string sqlTextVatType = "";
            string orderByIni = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                //string CompanyCode =new CommonDAL().settings("CompanyCode", "Code");

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
SELECT    
SIH.SalesInvoiceNo SalesInvoiceNo, 
SIH.LCNumber,
SIH.LCDate,
convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
isnull(C.CustomerName,'N/A')CustomerName,
isnull(C.Address1,'N/A')Address1,
isnull(C.VATRegistrationNo,'N/A')VATRegistrationNo,
isnull(P.ProductName,'N/A')ProductName,
isnull(P.ProductCode,'N/A')ProductCode,
isnull(SID.Quantity,0)Quantity,
isnull(SID.UOM,'N/A')UOM,
isnull(SID.NBRPrice,0)NBRPrice,
isnull(SID.CurrencyValue,0) SubTotal,
isnull(SID.SD,0)SD,
isnull(SID.SDAmount,0)SDAmount,
isnull(SID.VATRate,0)VATRate,
isnull(SID.VATAmount,0)VATAmount 

FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
      
                            WHERE (SID.Quantity>0) and SID.BranchId=@BranchId

                                                ";

                #region sqlTextVatType
                sqlTextVatType = "";
                if (Toll == "Y")
                {
                    sqlTextVatType += @"and SID.TransactionType in('TollSale')";
                }
                else
                {

                    if (VatType.ToLower() == "Export".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Export' 
                    and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "DeemExport".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='DeemExport' 
                  and  SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "NonVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='NonVAT' 
               and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "VAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='VAT' 
              and SID.TransactionType in('ServiceNS','Service','TollFinishIssue','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS' ,'Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "MRPRate".ToLower() || VatType.ToLower() == "MRPRate(SC)".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type in('MRPRate','MRPRate(SC)') 
             and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "FixedVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='FixedVAT' 
                    and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "OtherRate".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='OtherRate' 
              and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','Tender','Trading','TradingTender','InternalIssue')
";
                    }
                    else if (VatType.ToLower() == "Retail".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Retail' 
            and SID.TransactionType in('Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading','TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                    {
                        sqlTextVatType += @" and SID.Type in('Export','DeemExport','NonVAT','VAT','MRPRate','MRPRate(SC)','FixedVAT'
					,'OtherRate','Retail'  )";
                        if (vTransactionType != "")
                        {
                            sqlTextVatType += " and SID.TransactionType=@vTransactionType  ";
                        }
                        else
                        {
                            sqlTextVatType += @"  
 and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
,'ExportTrading','ExportTradingTender','ExportService'
,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
";
                        }
                    }
                }

                #endregion sqlTextVatType

                sqlText += sqlTextVatType;

                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }
                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }

                if (!string.IsNullOrWhiteSpace(OrderBy))
                {
                    if (ReportType == "SummaryByProduct")
                    {
                        sqlText += " order by " + " P." + OrderBy;

                    }
                    else
                    {
                        orderByIni = "SIH.SalesInvoiceNo ASC";
                        sqlText += " order by " + orderByIni + ", P." + OrderBy;
                    }

                }

                #endregion Parameter

                sqlText += @"     
SELECT    distinct shft.ShiftName,pc.CategoryName, sum( isnull(SID.UOMQty,isnull(SID.Quantity,0)))UOMQty

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
left outer join Shifts shft on SIH.ShiftId=shft.Id 
    WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
    and P.ActiveStatus='Y'

                       ";


                sqlText += sqlTextVatType;

                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";
                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }

                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo  ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";
                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }

                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }

                sqlText += @" 	 group by  shft.ShiftName,pc.CategoryName
	 	  ";

                #endregion Parameter

                sqlText += @" 

  SELECT    distinct isnull(C.CustomerName,'N/A')CustomerName,pc.CategoryName,sum( isnull(SID.UOMQty,isnull(SID.Quantity,0)))UOMQty

FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
WHERE 1=1
and SID.BranchId=@BranchId
and P.ActiveStatus='Y'

";

                sqlText += sqlTextVatType;

                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";
                }

                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }

                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateFrom))
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateTo))
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo  ";
                }
                if (!string.IsNullOrEmpty(vCustomerid))
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (!string.IsNullOrEmpty(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (!string.IsNullOrEmpty(vItemNo))
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";
                }
                else
                {
                    if (!string.IsNullOrEmpty(vCategoryID))
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (!string.IsNullOrEmpty(vproductType))
                    sqlText += " and pc.IsRaw=@vproductType ";

                if (!string.IsNullOrEmpty(vPost))
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";
                }

                sqlText += " group by  isnull(C.CustomerName,'N/A'),pc.CategoryName ";

                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion Parameter

                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 180;

                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);

                #region Parameters

                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommSaleReport.Parameters.Contains("@ShiftId"))
                    { objCommSaleReport.Parameters.AddWithValue("@ShiftId", ShiftId); }
                    else { objCommSaleReport.Parameters["@ShiftId"].Value = ShiftId; }

                }
                if (vSalesInvoiceNo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vSalesInvoiceNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vSalesInvoiceNo", vSalesInvoiceNo); }
                    else { objCommSaleReport.Parameters["@vSalesInvoiceNo"].Value = vSalesInvoiceNo; }
                }

                if (InvoiceDateFrom != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommSaleReport.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }

                }
                if (InvoiceDateTo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateTo"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommSaleReport.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }

                }
                if (vCustomerid != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vCustomerid"))
                    { objCommSaleReport.Parameters.AddWithValue("@vCustomerid", vCustomerid); }
                    else { objCommSaleReport.Parameters["@vCustomerid"].Value = vCustomerid; }

                }

                if (CustomerGroupID != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@CustomerGroupID"))
                    { objCommSaleReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID); }
                    else { objCommSaleReport.Parameters["@CustomerGroupID"].Value = CustomerGroupID; }

                }
                if (vItemNo != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vItemNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vItemNo", vItemNo); }
                    else { objCommSaleReport.Parameters["@vItemNo"].Value = vItemNo; }

                }
                if (pCategoryLike)
                {

                    if (!objCommSaleReport.Parameters.Contains("@PGroup"))
                    { objCommSaleReport.Parameters.AddWithValue("@PGroup", PGroup); }
                    else { objCommSaleReport.Parameters["@PGroup"].Value = PGroup; }

                }
                else
                {
                    if (vCategoryID != "")

                        if (!objCommSaleReport.Parameters.Contains("@vCategoryID"))
                        { objCommSaleReport.Parameters.AddWithValue("@vCategoryID", vCategoryID); }
                        else { objCommSaleReport.Parameters["@vCategoryID"].Value = vCategoryID; }

                }
                if (vproductType != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vproductType"))
                    { objCommSaleReport.Parameters.AddWithValue("@vproductType", vproductType); }
                    else { objCommSaleReport.Parameters["@vproductType"].Value = vproductType; }

                }
                if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                {
                    if (vTransactionType != "")
                    {

                        if (!objCommSaleReport.Parameters.Contains("@vTransactionType"))
                        { objCommSaleReport.Parameters.AddWithValue("@vTransactionType", vTransactionType); }
                        else { objCommSaleReport.Parameters["@vTransactionType"].Value = vTransactionType; }

                    }
                }
                if (vPost != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vPost"))
                    { objCommSaleReport.Parameters.AddWithValue("@vPost", vPost); }
                    else { objCommSaleReport.Parameters["@vPost"].Value = vPost; }

                }

                if (!string.IsNullOrEmpty(DataSource))
                {

                    if (!objCommSaleReport.Parameters.Contains("@DataSource"))
                    { objCommSaleReport.Parameters.AddWithValue("@DataSource", DataSource); }
                    else { objCommSaleReport.Parameters["@DataSource"].Value = DataSource; }

                }

                #endregion

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleMISExcel", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataSet SaleSummaryByProduct(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                           string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                           string onlyDiscount, bool bPromotional, string CustomerGroupID, bool pCategoryLike = false, string PGroup = ""
           , string ShiftId = "0", int branchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null, string OrderBy = "", string DataSource = "", string Toll = "N", string Type = "", string ReportType = "")
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string sqlTextVatType = "";
            string orderByIni = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                //string CompanyCode =new CommonDAL().settings("CompanyCode", "Code");

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
   SELECT    
 pc.CategoryName
 ,isnull(P.ProductName,'N/A')ProductName
 ,isnull(P.ProductCode,'N/A')ProductCode
 ,isnull(SID.UOM,'N/A')UOM
 ,Sum(isnull(SID.Quantity,0))Quantity
 ,Sum(isnull(SID.UOMQty,isnull(SID.Quantity,0)))UOMQty
 ,Sum(isnull(SID.SDAmount,0))SDAmount
 ,Sum(isnull(SID.VATAmount,0))VATAmount 
 --,Sum(isnull(SID.SubTotal,0)) SubTotal
 --,Sum( isnull(isnull(SID.SubTotal,0)+isnull(SID.SDAmount,0)+isnull(SID.VATAmount,0),0))Total
 ,Sum(isnull(SID.CurrencyValue,0)) SubTotal
 ,Sum( isnull(isnull(SID.CurrencyValue,0)+isnull(SID.SDAmount,0)+isnull(SID.VATAmount,0),0))Total

 FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
 dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
 dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
 dbo.ProductCategories PC on p.CategoryID=pc.CategoryID 

 WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
 and P.ActiveStatus='Y'

                                                ";


                #region sqlTextVatType
                sqlTextVatType = "";
                if (Toll == "Y")
                {
                    sqlTextVatType += @"and SID.TransactionType in('TollSale')";
                }
                else
                {

                    if (VatType.ToLower() == "Export".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Export' 
                    and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "DeemExport".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='DeemExport' 
                  and  SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "NonVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='NonVAT' 
               and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "VAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='VAT' 
              and SID.TransactionType in('ServiceNS','Service','TollFinishIssue','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS' ,'Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "MRPRate".ToLower() || VatType.ToLower() == "MRPRate(SC)".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type in('MRPRate','MRPRate(SC)') 
             and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "FixedVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='FixedVAT' 
                    and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "OtherRate".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='OtherRate' 
              and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','Tender','Trading','TradingTender','InternalIssue')
";
                    }
                    else if (VatType.ToLower() == "Retail".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Retail' 
            and SID.TransactionType in('Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading','TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                    {
                        sqlTextVatType += @" and SID.Type in('Export','DeemExport','NonVAT','VAT','MRPRate','MRPRate(SC)','FixedVAT'
					,'OtherRate','Retail'  )";
                        if (vTransactionType != "")
                        {
                            sqlTextVatType += " and SID.TransactionType=@vTransactionType  ";
                        }
                        else
                        {
                            sqlTextVatType += @"  
 and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
,'ExportTrading','ExportTradingTender','ExportService'
,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
";
                        }
                    }
                }

                #endregion sqlTextVatType
                sqlText += sqlTextVatType;
                //DiscountAmount
                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (vTransactionType != "")
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";
                }


                sqlText += "  group by pc.CategoryName,P.ProductName,P.ProductCode,SID.UOM";


                #endregion Parameter

                if (!string.IsNullOrWhiteSpace(OrderBy))
                {
                    sqlText += " order by " + " P." + OrderBy;
                }

                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 180;


                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);
                //objCommSaleReport.Parameters.AddWithValue("@Type", VatType);
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommSaleReport.Parameters.Contains("@ShiftId"))
                    { objCommSaleReport.Parameters.AddWithValue("@ShiftId", ShiftId); }
                    else { objCommSaleReport.Parameters["@ShiftId"].Value = ShiftId; }


                }
                if (vSalesInvoiceNo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vSalesInvoiceNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vSalesInvoiceNo", vSalesInvoiceNo); }
                    else { objCommSaleReport.Parameters["@vSalesInvoiceNo"].Value = vSalesInvoiceNo; }
                }





                if (InvoiceDateFrom != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommSaleReport.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }

                }
                if (InvoiceDateTo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateTo"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommSaleReport.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }

                }
                if (vCustomerid != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vCustomerid"))
                    { objCommSaleReport.Parameters.AddWithValue("@vCustomerid", vCustomerid); }
                    else { objCommSaleReport.Parameters["@vCustomerid"].Value = vCustomerid; }

                }

                if (CustomerGroupID != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@CustomerGroupID"))
                    { objCommSaleReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID); }
                    else { objCommSaleReport.Parameters["@CustomerGroupID"].Value = CustomerGroupID; }

                }
                if (vItemNo != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vItemNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vItemNo", vItemNo); }
                    else { objCommSaleReport.Parameters["@vItemNo"].Value = vItemNo; }

                }
                if (pCategoryLike)
                {

                    if (!objCommSaleReport.Parameters.Contains("@PGroup"))
                    { objCommSaleReport.Parameters.AddWithValue("@PGroup", PGroup); }
                    else { objCommSaleReport.Parameters["@PGroup"].Value = PGroup; }


                }
                else
                {
                    if (vCategoryID != "")

                        if (!objCommSaleReport.Parameters.Contains("@vCategoryID"))
                        { objCommSaleReport.Parameters.AddWithValue("@vCategoryID", vCategoryID); }
                        else { objCommSaleReport.Parameters["@vCategoryID"].Value = vCategoryID; }

                }
                if (vproductType != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vproductType"))
                    { objCommSaleReport.Parameters.AddWithValue("@vproductType", vproductType); }
                    else { objCommSaleReport.Parameters["@vproductType"].Value = vproductType; }

                }
                if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                {
                    if (vTransactionType != "")
                    {

                        if (!objCommSaleReport.Parameters.Contains("@vTransactionType"))
                        { objCommSaleReport.Parameters.AddWithValue("@vTransactionType", vTransactionType); }
                        else { objCommSaleReport.Parameters["@vTransactionType"].Value = vTransactionType; }

                    }
                }
                if (vPost != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vPost"))
                    { objCommSaleReport.Parameters.AddWithValue("@vPost", vPost); }
                    else { objCommSaleReport.Parameters["@vPost"].Value = vPost; }

                }

                if (!string.IsNullOrEmpty(DataSource))
                {

                    if (!objCommSaleReport.Parameters.Contains("@DataSource"))
                    { objCommSaleReport.Parameters.AddWithValue("@DataSource", DataSource); }
                    else { objCommSaleReport.Parameters["@DataSource"].Value = DataSource; }

                }

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SaleNewWithChassisEngine(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID,
            string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, string chassis, string engine,
            string ShiftId = "0", int branchId = 0, SysDBInfoVMTemp connVM = null, string OrderBy = "")
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
                            convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,
                            isnull(SID.UOM,'N/A')UOM,
                            isnull(SID.UOMn,'N/A')UOMn,
                            isnull(SID.UOMc,1)UOMc,                            
                            isnull(SID.Quantity,0)Quantity,

                            isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
                            isnull(isnull(SID.Quantity,0)  -isnull(SID.PromotionalQuantity,0),0) SaleQuantity,

                            isnull(SID.UOMQty,isnull(SID.Quantity,0))UOMQty,
                            isnull(SID.NBRPrice,0)NBRPrice,
isnull(NULLIF(isnull(SID.DiscountedNBRPrice,0),0),isnull(SID.NBRPrice,0))Discount,
                            isnull(SID.UOMPrice,isnull(SID.NBRPrice,0))UOMPrice,
                            isnull(SID.SD,0)SD,
                            isnull(SID.SDAmount,0)SDAmount,
                            isnull(SID.VATRate,0)VATRate,
                            isnull(SID.VATAmount,0)VATAmount ,
                            isnull(SID.SubTotal,0) SubTotal,
                            SID.Trading,
                            SID.TradingMarkUp,
                            SID.NonStock,
                            SID.SaleType,
                            pc.CategoryName,pc.IsRaw ProductType
,isnull(trc.Heading1,'')Heading1,isnull(trc.Heading2,'')Heading2

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
      
                            WHERE (SID.Quantity>0)
                            and SID.BranchId=@BranchId";
                //DiscountAmount
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (!string.IsNullOrEmpty(vSalesInvoiceNo))
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateFrom))
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateTo))
                {
                    //sqlText += " and (SID.InvoiceDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo ";
                }
                if (!string.IsNullOrEmpty(vCustomerid))
                    sqlText += " and C.CustomerID=@vCustomerid ";

                if (!string.IsNullOrEmpty(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";

                if (!string.IsNullOrEmpty(chassis))
                    sqlText += " and trc.Heading1=@chassis ";
                if (!string.IsNullOrEmpty(engine))
                    sqlText += " and trc.Heading2=@engine ";

                if (!string.IsNullOrEmpty(vItemNo))
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (!string.IsNullOrEmpty(vCategoryID))
                    sqlText += " and P.CategoryID=@vCategoryID ";
                if (!string.IsNullOrEmpty(vproductType))
                    sqlText += " and pc.IsRaw=@vproductType ";
                if (!string.IsNullOrEmpty(vTransactionType))
                {
                    sqlText += " and SIH.TransactionType=@vTransactionType ";
                }

                if (!string.IsNullOrEmpty(vPost))
                {
                    sqlText += " and SIH.Post=@vPost ";
                }
                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                if (!string.IsNullOrWhiteSpace(OrderBy))
                {
                    sqlText += " order by P." + OrderBy + " ";
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);
                objCommSaleReport.Parameters.AddWithValue("@ShiftId", ShiftId);
                objCommSaleReport.Parameters.AddWithValue("@vSalesInvoiceNo", vSalesInvoiceNo);
                objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom);
                objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo);
                objCommSaleReport.Parameters.AddWithValue("@vCustomerid", vCustomerid);
                objCommSaleReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID);
                objCommSaleReport.Parameters.AddWithValue("@chassis", chassis);
                objCommSaleReport.Parameters.AddWithValue("@engine", engine);
                objCommSaleReport.Parameters.AddWithValue("@vItemNo", vItemNo);
                objCommSaleReport.Parameters.AddWithValue("@vCategoryID", vCategoryID);
                objCommSaleReport.Parameters.AddWithValue("@vproductType", vproductType);
                objCommSaleReport.Parameters.AddWithValue("@vPost", vPost);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNewWithChassisEngine", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNewWithChassisEngine", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet StockNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate,
                                string Post1, string Post2, bool WithoutZero = false, bool pCategoryLike = false, string PGroup = "", int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Stock Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL

                sqlText = @"
                                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='2013/05/01';
--SET @EndDate='2013/05/31';



CREATE TABLE #StockTemp(ItemNo varchar(200) NULL)


INSERT INTO #StockTemp(ItemNo) 
SELECT distinct p.ItemNo
FROM Products p
WHERE 
--isnull(p.OpeningBalance,0) > 0 and ";
                if (ProductNo != "")
                {
                    sqlText += "\r\n p.itemno='" + ProductNo + "' AND ";
                }
                sqlText += @" 

 p.CategoryID IN(
SELECT DISTINCT CategoryID FROM ProductCategories pc
WHERE  pc.ActiveStatus='Y' ";

                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName LIKE '%' + '" + PGroup + "' + '%' )";

                }
                else
                {
                    if (CategoryNo != "")
                    {
                        sqlText += " and pc.CategoryID='" + CategoryNo + "' ";
                    }
                }
                if (ItemType != "")
                {
                    sqlText += " and pc.IsRaw='" + ItemType + "' ";
                }


                sqlText += " ) ";

                sqlText += @" 
SELECT distinct a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw ItemType
,sum(OpeningQty)OpeningQty,sum(OpeningCost)OpeningCost
,sum(InQty)ReceiveQty,sum(InCost)ReceiveCost
,sum(OutQty)issueQty,sum(OutCost)IssueCost,'N' Trading,'N' NonStock,0 issueUCost,0 CloseQty ,0 CloseUCost,0 CloseCost
,'1900/01/01' TransDate, 'N' TransType,'N' TransNumber

 FROM(
 	
(
	SELECT distinct a.ItemNo, SUM(a.Quantity)OpeningQty,sum(a.Amount)OpeningCost,0 InQty,0 InCost ,0 OutQty,0 OutCost
	FROM (
		(SELECT  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) )  
UNION ALL (
		SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull((isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE (Post =@post1 or Post= @post2) and BranchId=@BranchId
and TransactionType in('other','Service','ServiceNS','InputService','Trading','TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN'

) 


AND ReceiveDate < @StartDate  
  AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 )  
 UNION ALL (
	
	SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2) and BranchId=@BranchId
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate     
 AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 ) 
 UNION ALL 
(	SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull((isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2)  and BranchId=@BranchId
and TransactionType in('PurchaseReturn','PurchaseDN') 
 AND ReceiveDate< @StartDate     
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) ) 
UNION ALL 


(SELECT  ItemNo,-isnull((UOMQty),0) IssueQuantity,-isnull((isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)   and BranchId=@BranchId 
AND IssueDateTime< @StartDate   
and TransactionType NOT IN('IssueReturn','ReceiveReturn','TollIssue') 
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0))  

UNION ALL 


(SELECT  ItemNo,isnull((UOMQty),0) IssueQuantity,isnull((isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)  and BranchId=@BranchId  
AND IssueDateTime< @StartDate   
and TransactionType IN('TollIssue') 
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0))  


UNION ALL 
(SELECT  ItemNo,isnull((UOMQty),0) IssueQuantity,isnull((isnull(SubTotal,0)),0)
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    and BranchId=@BranchId

AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)   AND (UOMQty>0))   
UNION ALL 

(SELECT  ItemNo,isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,isnull((isnull(SubTotal,0)),0)SubTotal   
 FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)  and BranchId=@BranchId 
  AND ReceiveDateTime< @StartDate  
  and TransactionType not IN('ReceiveReturn','InternalIssue','Trading') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL

(SELECT  ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,-isnull((isnull(SubTotal,0)),0)SubTotal    
FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)   and BranchId=@BranchId
AND ReceiveDateTime< @StartDate  
 and TransactionType IN('ReceiveReturn') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL 

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,-isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) and BranchId=@BranchId
 AND InvoiceDateTime< @StartDate     
AND TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender'
,'Tender','Debit','TollFinishIssue','ServiceStock') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL  

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleExpQuantity,-isnull(( CurrencyValue),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) and BranchId=@BranchId
 AND InvoiceDateTime< @StartDate      
AND TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL

(SELECT  ItemNo,isnull( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ,0) SaleCreditQuantity,isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2)  and BranchId=@BranchId
AND InvoiceDateTime< @StartDate    
 AND TransactionType in( 'Credit','RawCredit') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )
UNION ALL 

(select  ItemNo,-isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull((isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) and DisposeDetails.BranchId=@BranchId

AND DisposeDetails.DisposeDate< @StartDate     
 AND  (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)   
and sih.FromStock in ('Y'))    

) AS a GROUP BY a.ItemNo
	)


UNION ALL -- Receive  in
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM TransferReceiveDetails pID
where pID.TransactionDateTime >= @StartDate and pID.TransactionDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2) and pID.BranchId=@BranchId
AND pID.TransactionType in('62In','61In') 
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL -- Receive  in
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM PurchaseInvoiceDetails pID
where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2) and pID.BranchId=@BranchId
AND pID.TransactionType in('other','Service','ServiceNS','InputService','Trading'
,'TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN') 
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL -- Receive  in
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0),0)) Cost
,0,0
FROM PurchaseInvoiceDetails pID
where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Receive Return out
SELECT distinct pID.ItemNo,0,0 

,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM PurchaseInvoiceDetails pID
where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('PurchaseReturn','PurchaseDN')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Issue InputService out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType NOT IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

 

UNION ALL  -- Issue Return in
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost

FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo
 


UNION ALL  -- VAT26 out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(Quantity+QuantityImport,0)) Quantity,SUM(isnull(RealPrice,0)) Cost
FROM DisposeDetails pID 
where pID.DisposeDate >= @StartDate and pID.DisposeDate < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- ReceiveDetails in
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM ReceiveDetails pID
where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType NOT IN('ReceiveReturn','InternalIssue','Trading')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- ReceiveReturn out
SELECT distinct pID.ItemNo,0,0 

,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM ReceiveDetails pID
where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Sale out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender','Tender'
,'Debit','TollFinishIssue','ServiceStock')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Sale out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
FROM TransferIssueDetails pID
where pID.TransactionDateTime >= @StartDate and pID.TransactionDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('62Out','61Out')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo


UNION ALL  -- Sale out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.CurrencyValue,0)) Cost
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Credit In
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost

FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('Credit','RawCredit')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo
) AS a LEFT OUTER JOIN
Products p ON a.ItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
GROUP BY a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw 

                ";
                if (WithoutZero)
                {
                    sqlText += @" 
having sum(OpeningQty)>0 or sum(InQty)>0 or sum(OutQty)>0
";

                }
                sqlText += @" 
ORDER BY pc.IsRaw ,pc.CategoryName,p.ProductName
drop table #StockTemp

";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion SQL

                #region SQL Command

                SqlCommand objCommStockReport = new SqlCommand();
                objCommStockReport.Connection = currConn;

                objCommStockReport.CommandText = sqlText;
                objCommStockReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommStockReport.Parameters.AddWithValue("@BranchId", BranchId);

                if (!objCommStockReport.Parameters.Contains("@Post1"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommStockReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommStockReport.Parameters.Contains("@Post2"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommStockReport.Parameters["@Post2"].Value = Post2;
                }



                if (!objCommStockReport.Parameters.Contains("@StartDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommStockReport.Parameters["@StartDate"].Value = StartDate;
                }


                if (!objCommStockReport.Parameters.Contains("@EndDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommStockReport.Parameters["@EndDate"].Value = EndDate;
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommStockReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "StockNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "StockNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet StockWithAdjNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate,
                               string Post1, string Post2, bool WithoutZero = false, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Stock Adjastment Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction




                #region SQL

                sqlText = @"
                                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='2013/05/01';
--SET @EndDate='2013/05/31';



CREATE TABLE #StockTemp(ItemNo varchar(200) NULL)


INSERT INTO #StockTemp(ItemNo) 
SELECT distinct p.ItemNo
FROM Products p
WHERE 
--isnull(p.OpeningBalance,0) > 0 and ";
                if (ProductNo != "")
                {
                    sqlText += "\r\n p.itemno='" + ProductNo + "' AND ";
                }
                sqlText += @" 

 p.CategoryID IN(
SELECT DISTINCT CategoryID FROM ProductCategories pc
WHERE  pc.ActiveStatus='Y' ";

                if (CategoryNo != "")
                {
                    sqlText += " and pc.CategoryID='" + CategoryNo + "' ";
                }
                if (ItemType != "")
                {
                    sqlText += " and pc.IsRaw='" + ItemType + "' ";
                }


                sqlText += " ) ";

                sqlText += @" 
DECLARE @ClosingAvgRate decimal(25,9);

DECLARE @InAvgRate decimal(25,9);
DECLARE @OutAvgRate decimal(25,9);


CREATE TABLE #StockTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, OpenQty   decimal (25, 9) NULL, OpenAmt   decimal (25, 9) NULL ,
ReceiveQty   decimal (25, 9) NULL, ReceiveCost   decimal (25, 9) NULL ,
issueQty   decimal (25, 9) NULL, IssueCost   decimal (25, 9) NULL ,
CloseQty   decimal (25, 9) NULL, CloseCost   decimal (25, 9) NULL ,
AdjInAmt   decimal (25, 9) NULL,AdjOutAmt   decimal (25, 9) NULL,
TransactionType  varchar (50) NULL 
)

CREATE TABLE #OpenTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, OpenQty   decimal (25, 9) NULL, OpenAmt   decimal (25, 9) NULL ) 

CREATE TABLE #InTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, InQty   decimal (25, 9) NULL, InAmt   decimal (25, 9) NULL,AdjInAmt   decimal (25, 9) NULL,
TransactionType  varchar (50) NULL ) 

CREATE TABLE #OutTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, OutQty   decimal (25, 9) NULL, OutAmt   decimal (25, 9) NULL ,AdjOutAmt   decimal (25, 9) NULL,
TransactionType  varchar (50) NULL ) 
 

INSERT into #OpenTable(SerialNo,ItemNo,OpenQty,OpenAmt)
SELECT distinct 'Open' SerialNo, o.ItemNo,Sum (o.Quantity) OpenQty, sum(o.Amount) OpenAmt
	FROM (
		(SELECT  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) )  
UNION ALL (
		SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull((isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE (Post =@post1 or Post= @post2) and  BranchId=@BranchId
and TransactionType in('other','Service','ServiceNS','InputService','Trading','TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN'

) 
AND ReceiveDate < @StartDate  
  AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 )  
 UNION ALL (
	
	SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2) and  BranchId=@BranchId
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate     
 AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 ) 
 UNION ALL 
(	SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull((isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2) and  BranchId=@BranchId
and TransactionType in('PurchaseReturn','PurchaseDN') 
 AND ReceiveDate< @StartDate     
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) ) 
UNION ALL 


(SELECT  ItemNo,-isnull((UOMQty),0) IssueQuantity,-isnull((isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    and  BranchId=@BranchId
AND IssueDateTime< @StartDate   
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0))  
UNION ALL 
(SELECT  ItemNo,isnull((UOMQty),0) IssueQuantity,isnull((isnull(SubTotal,0)),0)
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)   and  BranchId=@BranchId 

AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)   AND (UOMQty>0))   
UNION ALL 

(SELECT  ItemNo,isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,isnull((isnull(SubTotal,0)),0)SubTotal   
 FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)   and  BranchId=@BranchId
  AND ReceiveDateTime< @StartDate  
  and TransactionType not IN('ReceiveReturn','InternalIssue','Trading') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL

(SELECT  ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,-isnull((isnull(SubTotal,0)),0)SubTotal    
FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)   and  BranchId=@BranchId
AND ReceiveDateTime< @StartDate  
 and TransactionType IN('ReceiveReturn') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL 

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,-isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) and  BranchId=@BranchId
 AND InvoiceDateTime< @StartDate     
AND TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender'
,'Tender','Debit','TollFinishIssue','ServiceStock') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL  

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleExpQuantity,-isnull(( CurrencyValue),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) and  BranchId=@BranchId
 AND InvoiceDateTime< @StartDate      
AND TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL

(SELECT  ItemNo,isnull( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ,0) SaleCreditQuantity,isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2)  and  BranchId=@BranchId
AND InvoiceDateTime< @StartDate    
 AND TransactionType in( 'Credit', 'RawCredit') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )
UNION ALL 

(select  ItemNo,-isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull((isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) and  DisposeDetails.BranchId=@BranchId

AND DisposeDetails.DisposeDate< @StartDate     
 AND  (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)   
and sih.FromStock in ('Y'))    

) AS o GROUP BY o.ItemNo

INSERT into #InTable(SerialNo,ItemNo,InQty,InAmt,TransactionType,AdjInAmt ) 

	SELECT distinct 'In' SerialNo, i.ItemNo,ISNULL(SUM(i.Quantity),0) InQty,ISNULL(sum(i.Cost),0) InCost,i.TransactionType ,0 AdjInAmt 
	FROM 
	
	(
					 -- Receive  in
					SELECT distinct pID.ItemNo,0 OpeningQty,0 OpeningCost
					,ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0 OutQty,0 OutCost,pID.TransactionType
					FROM PurchaseInvoiceDetails pID
					where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType in('other','Service','ServiceNS','InputService','Trading'
					,'TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN') 
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					UNION ALL -- Receive  in
					SELECT distinct pID.ItemNo,0,0 
					,ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,ISNULL(SUM(isnull(isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0),0)),0) Cost
					,0,0,pID.TransactionType
					FROM PurchaseInvoiceDetails pID
					where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
					and (pID.Post =@post1 or pID.Post= @post2) and pID.BranchId=@BranchId
					AND pID.TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					UNION ALL  -- Receive Return out
					SELECT distinct pID.ItemNo,0,0 
					,-ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,-ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0,0,pID.TransactionType
					FROM PurchaseInvoiceDetails pID
					where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType IN('PurchaseReturn','PurchaseDN')
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					
					UNION ALL  -- ReceiveDetails in
					SELECT distinct pID.ItemNo,0,0 
					,ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0,0,pID.TransactionType
					FROM ReceiveDetails pID
					where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType NOT IN('ReceiveReturn','InternalIssue','Trading')
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					UNION ALL  -- ReceiveReturn out
					SELECT distinct pID.ItemNo,0,0 
					,-ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,-ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0,0,pID.TransactionType
					FROM ReceiveDetails pID
					where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType IN('ReceiveReturn')
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

)  AS i GROUP BY i.ItemNo,i.TransactionType

INSERT into #OutTable(SerialNo,ItemNo,OutQty,OutAmt,TransactionType,AdjOutAmt)

SELECT distinct 'Out' SerialNo, c.ItemNo,ISNULL(SUM(c.Quantity),0) OutQty,ISNULL(sum(c.Cost),0) OutCost,c.TransactionType,0 AdjOutAmt 
	FROM 
	
	(

SELECT distinct pID.ItemNo,0 OpeningQty,0 OpeningCost 
,0 InQty,0 InCost
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender','Tender'
,'Debit','TollFinishIssue','ServiceStock')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Sale out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.CurrencyValue,0)) Cost,pID.TransactionType
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Credit In
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType

FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('Credit','RawCredit')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Issue InputService out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType
FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType NOT IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Issue Return in
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType

FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType


UNION ALL  -- VAT26 out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(Quantity+QuantityImport,0)) Quantity,SUM(isnull(RealPrice,0)) Cost,pID.TransactionType
FROM DisposeDetails pID 
where pID.DisposeDate >= @StartDate and pID.DisposeDate < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType


)AS c Group by c.ItemNo,c.TransactionType

--Opening Value
insert into #StockTable(SerialNo,ItemNo,OpenQty,OpenAmt)
select #OpenTable.SerialNo,#OpenTable.ItemNo,IsNull(OpenQty,0) OpenQty,ISNULL(OpenAmt,0) OpenAmt from #OpenTable

--Receive Value
insert into #StockTable(SerialNo,ItemNo,ReceiveQty,ReceiveCost,TransactionType,AdjInAmt)
select SerialNo,ItemNo,IsNull(InQty,0) InQty,IsNull(InAmt,0) InAmt,TransactionType,AdjInAmt from #InTable

--Issue Value
insert into #StockTable(SerialNo,ItemNo,issueQty,IssueCost,TransactionType,AdjOutAmt)
select SerialNo,ItemNo,IsNull(OutQty,0) OutQty,IsNull(OutAmt,0) OutAmt,TransactionType,AdjOutAmt from #OutTable

--For loop in sql Cursor
DECLARE @ItemNo varchar(50)
DECLARE CurItemNo CURSOR FOR 
SELECT DISTINCT Itemno FROM #StockTemp
OPEN CurItemNo
FETCH NEXT FROM  CurItemNo INTo @ItemNo
WHILE @@FETCH_STATUS = 0
BEGIN
--
Select @ClosingAvgRate=ISNULL(#OpenTable.OpenAmt/#OpenTable.OpenQty,0) from #OpenTable where OpenQty>0 
and #OpenTable.ItemNo= @ItemNo
Select @InAvgRate=ISNULL(#InTable.InAmt/#InTable.InQty,0) from #InTable where InQty>0
and #InTable.ItemNo= @ItemNo
Select @OutAvgRate=ISNULL(#OutTable.OutAmt/#OutTable.OutQty,0) from #OutTable where OutQty>0
and #OutTable.ItemNo= @ItemNo

if @ClosingAvgRate != @OutAvgRate
Begin

update #OutTable Set AdjOutAmt = adj.Adjout
from (
	(Select ISNULL((@ClosingAvgRate * #OutTable.OutQty)-(@OutAvgRate * #OutTable.OutQty),0) Adjout 
	from #OutTable where TransactionType not in( 'TradingTender','ExportTradingTender','ExportTender','Tender') AND  itemno =@ItemNo
	AND OutQty>0)

UNION ALL
	(Select ISNULL((@ClosingAvgRate * OutQty)-(OutAmt),0) Adjout 
	from #OutTable where TransactionType in( 'TradingTender','ExportTradingTender','ExportTender','Tender') AND  itemno =@ItemNo
	AND OutQty>0)
) as adj
where #OutTable.ItemNo = @ItemNo 
end	

if @ClosingAvgRate != @InAvgRate
Begin

UPDATE #InTable SET AdjInAmt = ISnull(NULLIF(adj1.AdjIn,0),0)
from (
	(Select ISNULL((@ClosingAvgRate * #InTable.InQty)-(@OutAvgRate * #InTable.InQty),0) AdjIn 
	from #InTable where 
	itemno =@ItemNo AND InQty>0)
	) as adj1
	Where #InTable.ItemNo = @ItemNo

end	

FETCH NEXT FROM  CurItemNo INTo @ItemNo
END
CLOSE CurItemNo
DEALLOCATE CurItemNo 

Update #StockTable SET AdjOutAmt=#OutTable.AdjOutAmt from #OutTable where #StockTable.ItemNo = #OutTable.ItemNo
Update #StockTable SET AdjInAmt=#InTable.AdjInAmt from #InTable where #StockTable.ItemNo = #InTable.ItemNo

SELECT distinct st.ItemNo,ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw ItemType
,ISNULL(sum(st.OpenQty),0)OpeningQty,ISNULL(sum(st.OpenAmt),0)OpeningCost
,ISNULL(sum(st.ReceiveQty),0) ReceiveQty,ISNULL((sum(st.ReceiveCost)+st.AdjInAmt),0) ReceiveCost
,ISNULL(sum(st.issueQty),0) issueQty,ISNULL((sum(st.IssueCost)+st.AdjOutAmt),0) IssueCost,ISNULL(st.AdjOutAmt,0) AdjOutAmt,
ISNULL(st.AdjInAmt,0) AdjInAmt,
'N' Trading,'N' NonStock,0 issueUCost,0 CloseQty ,0 CloseUCost,0 CloseCost
,'1900/01/01' TransDate, 'N' TransType,'N' TransNumber
from #StockTable st LEFT OUTER JOIN  
Products p ON st.ItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
GROUP BY st.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw,st.AdjOutAmt,st.AdjInAmt 


                ";

                if (WithoutZero)
                {
                    sqlText += @" 
 having sum(st.OpenQty)>0 or sum(st.ReceiveQty)>0 or sum(st.issueQty)>0
";

                }
                sqlText += @" 
ORDER BY pc.IsRaw ,pc.CategoryName,p.ProductName

Drop table #StockTable
Drop table #StockTemp
Drop table #OpenTable
Drop table #InTable
Drop table #OutTable

";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion SQL

                #region SQL Command

                SqlCommand objCommStockReport = new SqlCommand();
                objCommStockReport.Connection = currConn;

                objCommStockReport.CommandText = sqlText;
                objCommStockReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter
                objCommStockReport.Parameters.AddWithValue("@BranchId", BranchId);

                if (!objCommStockReport.Parameters.Contains("@Post1"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommStockReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommStockReport.Parameters.Contains("@Post2"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommStockReport.Parameters["@Post2"].Value = Post2;
                }



                if (!objCommStockReport.Parameters.Contains("@StartDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommStockReport.Parameters["@StartDate"].Value = StartDate;
                }


                if (!objCommStockReport.Parameters.Contains("@EndDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommStockReport.Parameters["@EndDate"].Value = EndDate;
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommStockReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "StockWithAdjNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "StockWithAdjNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet StockWastage(string ProductNo, string CategoryNo, string ItemType, string StartDate,
                                    string EndDate, string Post1, string Post2, bool WithoutZero = false, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Stock Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction


                #region SQL

                //                sqlText = @"
                //
                //";

                #endregion SQL

                #region SQL

                sqlText = @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='2013/05/01';
--SET @EndDate='2013/05/31';



CREATE TABLE #StockTemp(ItemNo varchar(200) NULL)


INSERT INTO #StockTemp(ItemNo) 
SELECT distinct p.ItemNo
FROM Products p
WHERE isnull(p.OpeningBalance,0) > 0 ";
                if (ProductNo != "")
                {
                    sqlText += " and p.itemno='" + ProductNo + "' ";
                }
                sqlText += @" 

AND p.CategoryID IN(
SELECT DISTINCT CategoryID FROM ProductCategories pc
WHERE  pc.ActiveStatus='Y' ";

                if (CategoryNo != "")
                {
                    sqlText += " and pc.CategoryID='" + CategoryNo + "' ";
                }
                if (ItemType != "")
                {
                    sqlText += " and pc.IsRaw='" + ItemType + "' ";
                }


                sqlText += " ) ";

                sqlText += @" 
SELECT distinct a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw ItemType
,sum(OpeningQty)OpeningQty,sum(OpeningCost)OpeningCost
,sum(InQty)ReceiveQty,sum(InCost)ReceiveCost
,sum(OutQty)issueQty,sum(OutCost)IssueCost,'N' Trading,'N' NonStock,0 issueUCost,0 CloseQty ,0 CloseUCost,0 CloseCost
,'1900/01/01' TransDate, 'N' TransType,'N' TransNumber

 FROM(
 	
SELECT distinct a.ItemNo, SUM(a.Quantity)OpeningQty,sum(a.Amount)OpeningCost,0 InQty,0 InCost ,0 OutQty,0 OutCost
	FROM (	
SELECT  ItemNo,
-isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0)Quantity,
-isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0)Amount 
FROM DisposeDetails WHERE (Post =@post1 or Post= @post2) and BranchId=@BranchId
and TransactionType in('VAT27')AND DisposeDetails.FromStock='Y' 
AND DisposeDate < @StartDate      AND itemno IN 
(SELECT DISTINCT Itemno FROM #StockTemp WHERE #StockTemp.ItemNo IN(SELECT DISTINCT ItemNo FROM Products p 
                                                                   WHERE p.CategoryID IN (SELECT CategoryID FROM ProductCategories pc WHERE pc.IsRaw='raw')))
UNION ALL
SELECT  ItemNo,isnull((UOMWastage),0) IssueQuantity,isnull((isnull(UOMWastage,0)*isnull(UOMPrice,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2) and BranchId=@BranchId   AND IssueDateTime< @StartDate     
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0)  
) AS a GROUP BY a.ItemNo
UNION ALL
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMWastage,0),isnull(UOMWastage,0) )) Quantity,SUM(isnull(UOMWastage,0)*isnull(UOMPrice,0)) Cost
,0,0
FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo
UNION ALL

SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0)) Quantity
,SUM(isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0)) Cost
FROM DisposeDetails pID
where pID.DisposeDate >= @StartDate and pID.DisposeDate < DATEADD(d,1, @EndDate) and pID.BranchId=@BranchId
and (pID.Post =@post1 or pID.Post= @post2)
and TransactionType in('VAT27')AND pID.FromStock='Y' 
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp WHERE #StockTemp.ItemNo
IN(SELECT DISTINCT ItemNo FROM Products p WHERE p.CategoryID IN (SELECT CategoryID FROM ProductCategories pc WHERE pc.IsRaw='raw')))
GROUP BY pID.ItemNo
) AS a LEFT OUTER JOIN
Products p ON a.ItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
GROUP BY a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw 

                ";

                if (WithoutZero)
                {
                    sqlText += @" 
 having sum(OpeningQty)>0 or sum(InQty)>0 or sum(OutQty)>0
";

                }
                sqlText += @" 
 ORDER BY pc.IsRaw ,pc.CategoryName,p.ProductName
 drop table #StockTemp

";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion SQL

                #region SQL Command

                SqlCommand objCommStockReport = new SqlCommand();
                objCommStockReport.Connection = currConn;

                objCommStockReport.CommandText = sqlText;
                objCommStockReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter
                objCommStockReport.Parameters.AddWithValue("@BranchId", BranchId);

                if (!objCommStockReport.Parameters.Contains("@Post1"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommStockReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommStockReport.Parameters.Contains("@Post2"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommStockReport.Parameters["@Post2"].Value = Post2;
                }



                if (!objCommStockReport.Parameters.Contains("@StartDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommStockReport.Parameters["@StartDate"].Value = StartDate;
                }


                if (!objCommStockReport.Parameters.Contains("@EndDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommStockReport.Parameters["@EndDate"].Value = EndDate;
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommStockReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "StockWastage", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "StockWastage", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        #endregion

        #region Reports 07

        public DataSet VehicleNew(string VehicleNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vehicle Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 
                            VehicleID,
                            VehicleType,
                            VehicleNo,
                            Description,
                            Comments,
                            ActiveStatus
 

                            FROM         Vehicles                      
                            WHERE
                            (VehicleNo = @VehicleNo or @VehicleNo is null) 
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVehicleReport = new SqlCommand();
                objCommVehicleReport.Connection = currConn;

                objCommVehicleReport.CommandText = sqlText;
                objCommVehicleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (VehicleNo == "")
                {
                    if (!objCommVehicleReport.Parameters.Contains("@VehicleNo"))
                    {
                        objCommVehicleReport.Parameters.AddWithValue("@VehicleNo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVehicleReport.Parameters["@VehicleNo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVehicleReport.Parameters.Contains("@VehicleNo"))
                    {
                        objCommVehicleReport.Parameters.AddWithValue("@VehicleNo", VehicleNo);
                    }
                    else
                    {
                        objCommVehicleReport.Parameters["@VehicleNo"].Value = VehicleNo;
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVehicleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VehicleNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VehicleNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet Adjustment(string HeadId, string AdjType, string StartDate, string EndDate, string Post, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vehicle Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT ah.AdjHistoryNo, 
isnull(nullif(an.AdjName,''),'NA')AdjName
,convert(varchar,isnull(ah.AdjDate,'1900/01/01'),120)AdjDate
,isnull(ah.AdjInputAmount,0)AdjInputAmount
,isnull(ah.AdjInputPercent,0)AdjInputPercent
,isnull(ah.AdjAmount,0)AdjAmount
,isnull(nullif(ah.AdjType,''),'NA')AdjType
,isnull(nullif(ah.AdjReferance,''),'NA')AdjReferance
,isnull(nullif(ah.AdjDescription,''),'NA')AdjDescription
FROM AdjustmentHistorys ah
LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId

WHERE ah.AdjInputAmount>0 and ah.BranchId=@BranchId

";
                if (HeadId != "")
                {
                    sqlText += " and an.AdjName='" + HeadId + "' ";
                }
                if (AdjType != "")
                {
                    sqlText += " and ah.AdjType='" + AdjType + "' ";
                }
                if (Post != "")
                {
                    sqlText += " and ah.Post='" + Post + "' ";
                }
                if (StartDate != "")
                {
                    sqlText += " and ah.AdjDate >='" + StartDate + "' ";
                }
                if (EndDate != "")
                {
                    sqlText += " and ah.AdjDate <dateadd(d,1, '" + EndDate + "') ";
                }
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                #endregion

                #region SQL Command

                SqlCommand objCommVehicleReport = new SqlCommand();
                objCommVehicleReport.Connection = currConn;

                objCommVehicleReport.CommandText = sqlText;
                objCommVehicleReport.CommandType = CommandType.Text;

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVehicleReport);
                dataAdapter.SelectCommand.Parameters.AddWithValue("@BranchId", BranchId);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "Adjustment", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "Adjustment", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet VendorGroupNew(string VendorGroupID, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vendor Group Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT     VendorGroupID, VendorGroupName, VendorGroupDescription, Comments, GroupType,ActiveStatus
                            FROM         VendorGroups
";
                if (VendorGroupID != "")
                {
                    sqlText += " where VendorGroupID=@VendorGroupID";
                }
                sqlText += " order by VendorGroupName";


                #endregion

                #region SQL Command

                SqlCommand objCommVendorGroupReport = new SqlCommand();
                objCommVendorGroupReport.Connection = currConn;

                objCommVendorGroupReport.CommandText = sqlText;
                objCommVendorGroupReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommVendorGroupReport.Parameters.AddWithValue("@VendorGroupID", VendorGroupID);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorGroupReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VendorGroupNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VendorGroupNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet InputOutputCoEfficient(string RawItemNo, string StartDate, string EndDate, string Post1, string Post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("InputOutputCoEfficientReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = "";
                //sqlText += "  DECLARE @StartDate DATETIME;";
                //sqlText += " DECLARE @EndDate DATETIME;";
                //sqlText += " DECLARE @RawItem VARCHAR(10);";
                sqlText += "  DECLARE @TotalIssueQuantity DECIMAL (25,9); ";
                sqlText += "  DECLARE @TotalIssueQuantityR DECIMAL (25,9); ";
                //sqlText += "  DECLARE @post1 VARCHAR(2); ";
                //sqlText += "  DECLARE @post2 VARCHAR(2); ";
                //sqlText += " SET @RawItemNo=@RawItemNoNo";
                //sqlText += " SET @StartDate=@StartDate;";
                //sqlText += " SET @EndDate=@EndDate;";
                //sqlText += " SET @post1=@Post1;";
                //sqlText += " SET @post2=@Post2;";
                sqlText += @"
CREATE TABLE #Table1(FinisgItemNo varchar(100) NULL,ReceiveNo varchar(100) NULL,BatchNo varchar(100) NULL,
	ReceiveQuantity decimal(25, 9) NULL,
	IssueQuantityBOMUom decimal(25, 9) NULL,BOMUom varchar(100) NULL,BOMUomc decimal(25, 9) NULL,
	ReceiveDate DATETIME,BOMID VARCHAR(100),TransactionType VARCHAR(100)
)
INSERT INTO #Table1(FinisgItemNo, ReceiveNo,TransactionType, BatchNo, ReceiveDate,ReceiveQuantity,
IssueQuantityBOMUom, BOMUom, BOMUomc,BOMID)

SELECT rd.ItemNo,isnull(rh.ReceiveNo,'-')ReceiveNo,rd.TransactionType,isnull(rh.SerialNo,'-')BatchNo,
rd.ReceiveDateTime ReceiveDate,SUM(isnull(rd.UOMQty,0))ReceiveQuantity
,0 IssueQuantityBOMUom,0 BOMUom,0 BOMUomc,0 BOMID
FROM ReceiveDetails rd  LEFT OUTER JOIN ReceiveHeaders rh ON rd.ReceiveNo=rh.ReceiveNo
WHERE ItemNo IN(SELECT distinct FinishItemNo  FROM BOMRaws WHERE RawItemNo=@RawItemNo)
AND rd.ReceiveDateTime >DATEADD(d,-1, @StartDate) and rd.ReceiveDateTime <DATEADD(d,1, @EndDate) 
AND rd.TransactionType IN ('Other','TollFinishReceive','WIP','PackageProduction','Tender')
AND (rd.Post =@post1 or rd.Post= @post2)
GROUP BY rd.ItemNo,rh.ReceiveNo,rd.TransactionType,rh.SerialNo,rd.ReceiveDateTime

INSERT INTO #Table1(FinisgItemNo, ReceiveNo,TransactionType, BatchNo, ReceiveDate,ReceiveQuantity,
IssueQuantityBOMUom, BOMUom, BOMUomc,BOMID)

SELECT rd.ItemNo,isnull(rh.ReceiveNo,'-')ReceiveNo,rd.TransactionType,isnull(rh.SerialNo,'-')BatchNo,rd.ReceiveDateTime ReceiveDate,
-SUM(isnull(rd.UOMQty,0))ReceiveQuantity
,0 IssueQuantityBOMUom,0 BOMUom,0 BOMUomc,0 BOMID
FROM ReceiveDetails rd  LEFT OUTER JOIN ReceiveHeaders rh ON rd.ReceiveNo=rh.ReceiveNo
WHERE ItemNo IN(SELECT distinct FinishItemNo  FROM BOMRaws WHERE RawItemNo=@RawItemNo)
AND rd.ReceiveDateTime >DATEADD(d,-1, @StartDate) and rd.ReceiveDateTime <DATEADD(d,1, @EndDate) 
AND rd.TransactionType IN ('ReceiveReturn')
AND (rd.Post =@post1 or rd.Post= @post2)
GROUP BY rd.ItemNo,rh.ReceiveNo,rd.TransactionType,rh.SerialNo,rd.ReceiveDateTime
UPDATE #Table1 SET BOMID=(select top 1 BOMID FROM BOMs b  WHERE EffectDate<=#Table1.ReceiveDate AND #Table1.FinisgItemNo=b.FinishItemNo )


UPDATE #Table1 SET 
IssueQuantityBOMUom =b.TotalQuantity,
BOMUOMc=b.UOMc,
BOMUom = b.UOM

FROM BOMRaws b
 WHERE b.BOMId=#Table1.BOMID AND b.RawItemNo=@RawItemNo
 

 
 SELECT @TotalIssueQuantity =SUM(isnull(id.UOMQty,0))
 FROM IssueDetails id
	where id.IssueDateTime >DATEADD(d,-1, @StartDate) and id.IssueDateTime <DATEADD(d,1, @EndDate)
	AND id.TransactionType IN('Other') AND id.ItemNo=@RawItemNo
--AND (id.Post =@post1 or id.Post= @post2)
	
	 SELECT @TotalIssueQuantityR =-SUM(isnull(id.UOMQty,0))
 FROM IssueDetails id
	where id.IssueDateTime >DATEADD(d,-1, @StartDate) and id.IssueDateTime <DATEADD(d,1, @EndDate)
	AND id.TransactionType IN('IssueReturn') AND id.ItemNo=@RawItemNo
--AND (id.Post =@post1 or id.Post= @post2)
	
SELECT p.ItemNo,p.ProductCode,p.ProductName,p.UOM,isnull(isnull(@TotalIssueQuantity,0)-isnull(@TotalIssueQuantityR,0),0) IssueQty
  FROM Products p WHERE p.ItemNo=@RawItemNo


SELECT t.FinisgItemNo,p.ProductCode,p.ProductName,p.UOM,
t.ReceiveNo,t.BatchNo,t.ReceiveQuantity,t.IssueQuantityBOMUom, t.BOMUom, t.BOMUomc,t.TransactionType,isnull(isnull(@TotalIssueQuantity,0)-isnull(@TotalIssueQuantityR,0),0) IssueQty
 FROM #Table1 t
LEFT OUTER JOIN Products p ON t.FinisgItemNo=p.ItemNo
DROP TABLE #Table1


";


                #endregion

                #region SQL Command

                SqlCommand objCommVendorGroupReport = new SqlCommand();
                objCommVendorGroupReport.Connection = currConn;

                objCommVendorGroupReport.CommandText = sqlText;
                objCommVendorGroupReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommVendorGroupReport.Parameters.AddWithValue("@RawItemNo", RawItemNo);
                objCommVendorGroupReport.Parameters.AddWithValue("@StartDate", StartDate);
                objCommVendorGroupReport.Parameters.AddWithValue("@EndDate", EndDate);
                objCommVendorGroupReport.Parameters.AddWithValue("@Post1", Post1);
                objCommVendorGroupReport.Parameters.AddWithValue("@Post2", Post2);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorGroupReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "InputOutputCoEfficient", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "InputOutputCoEfficient", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet VendorReportNew(string VendorID, string VendorGroupID, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vendor Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 
                            V.VendorID, 
                            isnull(V.VendorCode,'N/A')VendorCode ,
                            isnull(V.VendorName,'N/A')VendorName ,
                            isnull(V.VATRegistrationNo,'N/A')VATRegistrationNo,
                            isnull(V.TINNo,'N/A')TINNo ,
                            isnull(V.Comments,'N/A')Comments ,
                            isnull(V.Address1,'N/A')Address1,
                            isnull(V.Address2,'N/A')Address2,
                            isnull(V.Address3,'N/A')Address3,
                            isnull(V.TelephoneNo,'N/A')TelephoneNo,
                            isnull(V.ContactPerson,'N/A')ContactPerson,
                            isnull(V.ContactPersonTelephone,'N/A')ContactPersonTelephone ,
                            isnull(V.ContactPersonEmail,'N/A')ContactPersonEmail,
                            isnull(VG.VendorGroupName,'N/A') VendorGroupName,
                            isnull(VG.GroupType,'N/A') GroupType
                            FROM         dbo.Vendors AS V LEFT OUTER JOIN
                            dbo.VendorGroups AS VG ON V.VendorGroupID = VG.VendorGroupID
                        
                            WHERE v.ActiveStatus in ('Y','N')";
                if (VendorID != "")
                {
                    sqlText += " and VendorID =@VendorID ";

                }
                if (VendorGroupID != "")
                {
                    sqlText += " and v.VendorGroupID =@VendorGroupID ";

                }
                sqlText += " order by VendorName ";

                #endregion

                #region SQL Command

                SqlCommand objCommVendorReport = new SqlCommand();
                objCommVendorReport.Connection = currConn;

                objCommVendorReport.CommandText = sqlText;
                objCommVendorReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommVendorReport.Parameters.AddWithValue("@VendorID", VendorID);
                objCommVendorReport.Parameters.AddWithValue("@VendorGroupID", VendorGroupID);
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VendorReportNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VendorReportNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet TrasurryDepositeNew(string DepositId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TrasurryDepositeNew");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                
SELECT dp.DepositId
      ,dp.TreasuryNo
            ,convert (varchar,dp.BankDepositDate,120)DepositDateTime
      ,convert (varchar,dp.DepositDateTime,120)EffectDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,isnull(dp.DepositPerson,'NA')DepositPerson
      ,isnull(dp.DepositPersonDesignation,'NA')DepositPersonDesignation
      ,isnull(dp.DepositPersonContactNo,'NA')DepositPersonContactNo
      ,isnull(dp.DepositPersonAddress,'NA')DepositPersonAddress
      ,dp.TransactionType
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.Address1
      ,bk.City
      ,bk.TelephoneNo
      ,bk.FaxNo
      ,bk.Email
      ,bk.ContactPerson
      ,bk.ContactPersonDesignation
      ,bk.ContactPersonTelephone
      ,bk.ContactPersonEmail	 
  FROM Deposits dp
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TrasurryDepositeNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TrasurryDepositeNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        #region TDS Reports

        public DataSet TDSDeposit(string DepositId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TDSDeposit");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                
SELECT dp.DepositId
      ,dp.TreasuryNo
      ,convert (varchar,dp.DepositDateTime,120)DepositDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,isnull(dp.DepositPerson,'NA')DepositPerson
      ,isnull(dp.DepositPersonDesignation,'NA')DepositPersonDesignation
      ,isnull(dp.DepositPersonContactNo,'NA')DepositPersonContactNo
      ,isnull(dp.DepositPersonAddress,'NA')DepositPersonAddress
      ,dp.TransactionType
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.Address1
      ,bk.City
      ,bk.TelephoneNo
      ,bk.FaxNo
      ,bk.Email
      ,bk.ContactPerson
      ,bk.ContactPersonDesignation
      ,bk.ContactPersonTelephone
      ,bk.ContactPersonEmail	 
  FROM DepositTDSs dp
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDeposit", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDeposit", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet TDSDepositDetail(string DepositId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TDSDepositDetail");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                #region Backup

                string top;


                sqlText = @"
                
 
 
 SELECT dp.DepositId
      ,dp.TreasuryNo
      ,convert (varchar,dp.DepositDateTime,120)DepositDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,ISNULL(dp.DepositPerson,'-') DepositPerson
      ,dp.DepositPersonDesignation
      ,dp.TransactionType
	  ,d.VendorId
	  ,d.BillDeductAmount VDSAmount
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.City BankCity
	  ,v.VendorName
	  ,v.Address1
	  ,v.Address2
	  ,v.Address3
	  ,v.City
      
  FROM DepositTDSs dp inner join DepositTDSDetails d on d.TDSId=dp.DepositId
  left outer join Vendors v on v.VendorID=d.VendorID
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId

                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDepositDetail", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDepositDetail", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet TDSDepositDetail_MISReport(string DepositNo,
                               string DepositDateFrom, string DepositDateTo, string BankID, string Post,
                               string transactionType, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TDS Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
SELECT VendorName,Address1 VendorAddress,BusinessCode,BusinessType,BillAmount,VDSPercent,BillDeductAmount,TreasuryNo,DepositDateTime,
AccountNumber, VendorId,DepositNumber,BankID,DepositId,TransactionType
FROM
(
select vd.VendorName,vd.Address1,vd.BusinessCode,vd.BusinessType,v.BillAmount,v.VDSPercent,v.BillDeductAmount,d.TreasuryNo,
 d.DepositDateTime,b.AccountNumber, v.VendorId,v.DepositNumber,d.BankID,d.DepositId,d.TransactionType

from DepositTDSDetails v left outer join DepositTDSs d on v.TDSId=d.DepositId
 left outer join Vendors vd on v.VendorId=vd.VendorID
 left outer join BankInformations b on d.BankID=b.BankID
 where d.Transactiontype NOT IN('TDS-Credit')

 UNION ALL
 select vd.VendorName,vd.Address1 ,vd.BusinessCode,vd.BusinessType,v.BillAmount,v.VDSPercent,-v.BillDeductAmount,d.TreasuryNo,
d.DepositDateTime,b.AccountNumber, v.VendorId,v.DepositNumber,d.BankID,d.DepositId,d.TransactionType

from DepositTDSDetails v left outer join DepositTDSs d on v.TDSId=d.DepositId
 left outer join Vendors vd on v.VendorId=vd.VendorID
 left outer join BankInformations b on d.BankID=b.BankID
where d.Transactiontype IN('TDS-Credit') 

) a

WHERE 1=1 

";



                if (DepositNo != "")
                {
                    sqlText += "  and a.DepositId=@DepositNo ";
                }
                if (DepositDateFrom != "")
                {
                    sqlText += " and a.DepositDateTime >=@DepositDateFrom  ";
                }
                if (DepositDateTo != "" && !string.IsNullOrEmpty(DepositDateTo))
                {
                    sqlText += " and a.DepositDateTime <dateadd(d,1, @DepositDateTo) ";
                }


                if (BankID != "")
                {
                    sqlText += " and a.BankID=@BankID ";
                }
                if (Post != "")
                {
                    sqlText += " and a.Post=@Post ";
                }
                if (transactionType != "")
                {
                    sqlText += " and a.TransactionType=@transactionType ";
                }


                //sqlText += "  order by TransactionType,DepositDateTime";

                #endregion

                #region SQL Command

                SqlCommand objCommDepositReport = new SqlCommand();
                objCommDepositReport.Connection = currConn;

                objCommDepositReport.CommandText = sqlText;
                objCommDepositReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommDepositReport.Parameters.AddWithValue("@DepositNo", DepositNo);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateFrom", DepositDateFrom);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateTo", DepositDateTo);
                objCommDepositReport.Parameters.AddWithValue("@BankID", BankID);
                objCommDepositReport.Parameters.AddWithValue("@Post", Post);
                objCommDepositReport.Parameters.AddWithValue("@transactionType", transactionType);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDepositReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDepositDetail_MISReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDepositDetail_MISReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet TDSDeposit_MISReport(string DepositNo,
                                 string DepositDateFrom, string DepositDateTo, string BankID, string Post,
                                 string transactionType, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Deposit TDS Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 SELECT TType,DepositId,TreasuryNo,DepositType,DepositDateTime,DepositAmount,ChequeNo,
ChequeDate,BankName,BranchName,DepositPerson,TransactionType,Post
FROM 
(
SELECT    'Deposit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post

FROM         dbo.DepositTDSs AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
where Transactiontype NOT IN('AdjCashPayble-Credit','Treasury-Credit','TDS-Credit')

UNION ALL

SELECT    'Deposit-Credit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
-isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post

FROM         dbo.DepositTDSs AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
where Transactiontype IN('AdjCashPayble-Credit','Treasury-Credit','TDS-Credit')


) AS A


WHERE 
 TransactionType NOT IN('Treasury-Opening')
";
                if (DepositNo != "")
                {
                    sqlText += " and a.DepositId=@DepositNo ";
                }
                if (DepositDateFrom != "")
                {
                    sqlText += " and a.DepositDateTime >=@DepositDateFrom ";
                }
                if (DepositDateTo != "")
                {
                    sqlText += " and a.DepositDateTime <dateadd(d,1, @DepositDateTo) ";
                }


                if (BankID != "")
                {
                    sqlText += " and a.BankID=@BankID ";
                }
                if (Post != "")
                {
                    sqlText += " and a.Post=@Post ";
                }
                if (transactionType != "")
                {
                    sqlText += " and a.TransactionType=@transactionType ";
                }


                sqlText += "  order by a.TransactionType,a.DepositDateTime";

                #endregion

                #region SQL Command

                SqlCommand objCommDepositReport = new SqlCommand();
                objCommDepositReport.Connection = currConn;

                objCommDepositReport.CommandText = sqlText;
                objCommDepositReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommDepositReport.Parameters.AddWithValue("@DepositNo", DepositNo);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateFrom", DepositDateFrom);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateTo", DepositDateTo);
                objCommDepositReport.Parameters.AddWithValue("@BankID", BankID);
                objCommDepositReport.Parameters.AddWithValue("@Post", Post);
                objCommDepositReport.Parameters.AddWithValue("@transactionType", transactionType);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDepositReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDeposit_MISReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TDSDeposit_MISReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        #endregion

        public DataSet VDSDepositNew(string DepositId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDSDeposit");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                #region Backup

                string top;


                sqlText = @"
                
   SELECT dp.DepositId
      ,dp.TreasuryNo
      ,convert (varchar,dp.DepositDateTime,120)EffectDateTime
      ,convert (varchar,dp.DepositDateTime,120)DepositDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,ISNULL(dp.DepositPerson,'-') DepositPerson
      ,dp.DepositPersonDesignation
	  ,isnull(dp.DepositPersonContactNo,'NA')DepositPersonContactNo
      ,isnull(dp.DepositPersonAddress,'NA')DepositPersonAddress
      ,dp.TransactionType
	  ,vds.VendorId
	  ,vds.BillDeductAmount VDSAmount
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.City BankCity
	  ,v.VendorName
	  ,v.Address1
	  ,v.Address2
	  ,v.Address3
	  ,v.City
      
  FROM Deposits dp inner join VDS vds on vds.VDSId=dp.DepositId
  left outer join Vendors v on v.VendorID=vds.VendorID
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId

                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VDSDepositNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VDSDepositNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SDTrasurryDepositeNew(string DepositId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TrasurryDepositeNew");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                
SELECT dp.DepositId
      ,dp.TreasuryNo
      ,convert (varchar,dp.DepositDateTime,120)DepositDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,dp.DepositPerson
      ,dp.DepositPersonDesignation
      ,dp.TransactionType
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.Address1
      ,bk.City
      ,bk.TelephoneNo
      ,bk.FaxNo
      ,bk.Email
      ,bk.ContactPerson
      ,bk.ContactPersonDesignation
      ,bk.ContactPersonTelephone
      ,bk.ContactPersonEmail	 
  FROM SDDeposits dp
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SDTrasurryDepositeNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SDTrasurryDepositeNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ComapnyProfileString(string CompanyID, string UserId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataTable = new DataSet();

            #endregion

            #region try

            try
            {
                #region open connection

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection

                sqlText = @"
SELECT 
CompanyID,
CompanyName,
CompanyLegalName,
Address1,
Address2,
Address3,
City,
ZipCode,
TelephoneNo,
FaxNo,
Email,
ContactPerson,
ContactPersonDesignation,
ContactPersonTelephone,
ContactPersonEmail,
TINNo,
VatRegistrationNo,
Comments,
ActiveStatus,
isnull(License,'NA')License,
isnull(Section,'-')Section,
convert(varchar(200), FYearStart,120)FYearStart,
convert (varchar(200),FYearEnd,120)FYearEnd

FROM  CompanyProfiles
WHERE (CompanyId  =  @CompanyId ) ;

SELECT IssueFromBOM.IssueFromBOM,PrepaidVAT.PrepaidVAT
FROM
(SELECT s.SettingValue IssueFromBOM FROM Settings s
WHERE s.SettingName='IssueFromBOM') IssueFromBOM,
(SELECT s.SettingValue PrepaidVAT FROM Settings s
WHERE s.SettingName='PrepaidVAT') PrepaidVAT;

SELECT SettingGroup,SettingName,SettingValue  FROM Settings WHERE ActiveStatus='Y' ORDER BY SettingGroup

SELECT SettingGroup,SettingName,SettingValue  FROM SettingsRole  WHERE ActiveStatus='Y' and UserId=@UserId ORDER BY SettingGroup 
select * from UserInformations  WHERE ActiveStatus='Y' and UserId=@UserId 
";

                SqlCommand objCommBankInformation = new SqlCommand();
                objCommBankInformation.Connection = currConn;
                objCommBankInformation.CommandText = sqlText;
                objCommBankInformation.CommandType = CommandType.Text;

                if (!objCommBankInformation.Parameters.Contains("@CompanyID"))
                {
                    objCommBankInformation.Parameters.AddWithValue("@CompanyId", CompanyID);
                }
                else
                {
                    objCommBankInformation.Parameters["@CompanyID"].Value = CompanyID;
                }
                if (!objCommBankInformation.Parameters.Contains("@UserId"))
                {
                    objCommBankInformation.Parameters.AddWithValue("@UserId", UserId);
                }
                else
                {
                    objCommBankInformation.Parameters["@UserId"].Value = UserId;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBankInformation);
                dataAdapter.Fill(dataTable);

            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ComapnyProfileString", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ComapnyProfileString", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #endregion

            #region finally

            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }
            #endregion

            return dataTable;

        }

        public DataSet ComapnyProfile(string CompanyID, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                        SELECT 
CompanyID,
CompanyName,
CompanyLegalName,
Address1,
Address2,
Address3,
City,
ZipCode,
TelephoneNo,
FaxNo,
Email,
ContactPerson,
ContactPersonDesignation,
ContactPersonTelephone,
ContactPersonEmail,
TINNo,
VatRegistrationNo,
Comments,
ActiveStatus,
convert(varchar(200), FYearStart,120)FYearStart,
convert (varchar(200),FYearEnd,120)FYearEnd

FROM  CompanyProfiles
                 
WHERE 1=1
";
                if (!string.IsNullOrWhiteSpace(CompanyID))
                {
                    sqlText = sqlText + @"  AND (CompanyId  =  @CompanyId ) ";
                }
                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!string.IsNullOrWhiteSpace(CompanyID))
                {
                    if (!objCommVAT16.Parameters.Contains("@CompanyID"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@CompanyID", CompanyID);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@CompanyID"].Value = CompanyID;
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ComapnyProfile", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ComapnyProfile", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet CurrencyReportNew(SysDBInfoVMTemp connVM = null)
        {
            #region Objects & Variables


            SqlConnection currConn = null;
            string sqlText = "";
            DataSet reportDataset = new DataSet();

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = "";
                sqlText +=
                    " select cc.CurrencyConversionId,cc.CurrencyCodeFrom,cf.CurrencyName CurrencyNameF, cf.CurrencyCode CurrencyCodeF";
                sqlText += " ,cc.CurrencyCodeTo,ct.CurrencyName CurrencyNameT,ct.CurrencyCode CurrencyCodeT,";
                sqlText +=
                    " cc.CurrencyRate,cc.Comments,convert (varchar,cc.ConversionDate,120)ConversionDate,cc.ActiveStatus";
                sqlText += " from dbo.CurrencyConversion cc ";
                sqlText += " inner join dbo.Currencies cf on cc.CurrencyCodeFrom=cf.CurrencyId";
                sqlText += " inner join dbo.Currencies ct on cc.CurrencyCodeTo=ct.CurrencyId";
                sqlText += " order by cc.CurrencyConversionId";

                // sqlText += "WHERE 	(cc.CurrencyCodeFrom  LIKE '%' +  '" + CurrencyCodeFrom + "' + '%' OR cc.CurrencyCodeFrom IS NULL)";

                //sqlText += " and (cc.CurrencyCodeTo LIKE '%' + '" + CurrencyCodeTo + "' + '%' OR cc.CurrencyCodeTo IS NULL)";
                // sqlText += " and (cc.CurrencyRate LIKE '%' + '" +CurrencyRate  + "' + '%' OR cc.CurrencyRate IS NULL)";
                // sqlText += "and (cc.ConversionDate LIKE '%' + '" + ConversionDate + "' + '%' OR cc.ConversionDate IS NULL)";
                // sqlText += " and (cc.ActiveStatus LIKE '%' + '" + ActiveStatus + "' + '%' OR cc.ActiveStatus IS NULL)";

                SqlCommand objCommProductType = new SqlCommand();
                objCommProductType.Connection = currConn;
                objCommProductType.CommandText = sqlText;
                objCommProductType.CommandType = CommandType.Text;

                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeFrom"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeFrom", CurrencyCodeFrom); }
                //else { objCommProductType.Parameters["@CurrencyCodeFrom"].Value = CurrencyCodeFrom; }

                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeF"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeF", CurrencyCodeF); }
                //else { objCommProductType.Parameters["@CurrencyCodeF"].Value = CurrencyCodeF; }
                //if (!objCommProductType.Parameters.Contains("@CurrencyNameF"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyNameF", CurrencyNameF); }
                //else { objCommProductType.Parameters["@CurrencyNameF"].Value = CurrencyNameF; }

                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeTo"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeTo", CurrencyCodeTo); }
                //else { objCommProductType.Parameters["@CurrencyCodeTo"].Value = CurrencyCodeTo; }
                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeT"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeT", CurrencyCodeT); }
                //else { objCommProductType.Parameters["@CurrencyCodeT"].Value = CurrencyCodeT; }
                //if (!objCommProductType.Parameters.Contains("@CurrencyNameT"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyNameT", CurrencyNameT); }
                //else { objCommProductType.Parameters["@CurrencyNameT"].Value = CurrencyNameT; }

                //if (!objCommProductType.Parameters.Contains("@ActiveStatus"))
                //{ objCommProductType.Parameters.AddWithValue("@ActiveStatus", ActiveStatus); }
                //else { objCommProductType.Parameters["@ActiveStatus"].Value = ActiveStatus; }



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProductType);
                dataAdapter.Fill(reportDataset);

                #endregion
            }
            #endregion
            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "CurrencyReportNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "CurrencyReportNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #endregion
            #region finally

            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return reportDataset;
        }

        public DataSet CostingNew(string ID, string ItemNo, string UOM, string UOMn, decimal UOMc,
                                  decimal totalQty, decimal rCostPrice, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string invoiceDateFrom = ID;
            string itemNo = ItemNo;

            DataSet dataSet = new DataSet("Purchase Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = " ";
                sqlText =
                    @"
                            SELECT    
'' PurchaseInvoiceNo,
 c.InputDate InvoiceDateTime,
'' VendorID, 
'N/A' VendorName,
c.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
p.ProductCode,
'NA' UOMn,
isnull(c.Quantity,0) UOMQty,
isnull(c.UnitCost,0) UOMPrice,
pc.CategoryName,
pc.IsRaw,     
c.InputDate ReceiveDate,                         
'N/A' UOM,
isnull(c.Quantity,0) Quantity,
isnull(c.UnitCost,0) CostPrice,
Isnull(c.SD,0) SD,
isnull(c.SDAmount,0)SDAmount,
Isnull(c.SD,0) VATRate,
Isnull(c.SD,0) CnFAmount, 
Isnull(c.SD,0) InsuranceAmoount
,Isnull(c.CD,0) CDAmount
,Isnull(c.RD,0) RDAmount
,Isnull(c.TVB,0) TVBAmount
,Isnull(c.TVA,0) TVAAmount
,Isnull(c.ATV,0) ATVAmount
,Isnull(c.Other,0) OthersAmount
,Isnull(c.VATAmount,0) AS VATAmount,
Isnull(c.AV,0) AS SubTotal,  ";

                sqlText += @"  
convert (varchar,c.InputDate,120) ReceiveDate, 
isnull(c.BENumber,'-') BENumber
";
                sqlText += " ,'" + UOM + "' rUOM ";
                sqlText += " ,'" + UOMn + "' rUOMn ";
                sqlText += " ," + UOMc + " rUOMc";
                sqlText += " ," + totalQty + " rTotalQty ";
                sqlText += " , cast(" + rCostPrice + " as decimal(25,9)) ItemCostPrice ";


                sqlText += @"  	
					
FROM Costing AS C LEFT OUTER JOIN
Products AS P ON C.ItemNo = P.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
WHERE C.Quantity>0 and (pc.IsRaw= 'Raw' or pc.IsRaw= 'Finish')
";

                #endregion

                #region Parameter

                //sqlText += " and c.ItemNo='" + ItemNo + "' and c.InputDate<='" + effectDate + "'";
                sqlText += " and c.ItemNo ='" + ItemNo + "' and c.Id ='" + ID + "'";

                #endregion Parameter

                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "CostingNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "CostingNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 08

        public DataSet ComapnyProfileSecurity(string CompanyID, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataTable = new DataSet();

            #endregion

            #region try

            try
            {
                #region open connection

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection

                sqlText = @"
SELECT 
CompanyID,
CompanyName,
CompanyLegalName,
VatRegistrationNo,
Tom,
Jary,
Miki,
Mouse

FROM  CompanyProfiles
                 
WHERE (CompanyId  =  @CompanyId ) ;";

                SqlCommand objCommBankInformation = new SqlCommand();
                objCommBankInformation.Connection = currConn;
                objCommBankInformation.CommandText = sqlText;
                objCommBankInformation.CommandType = CommandType.Text;

                if (!objCommBankInformation.Parameters.Contains("@CompanyID"))
                {
                    objCommBankInformation.Parameters.AddWithValue("@CompanyID", CompanyID);
                }
                else
                {
                    objCommBankInformation.Parameters["@CompanyID"].Value = CompanyID;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBankInformation);
                dataAdapter.Fill(dataTable);

            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ComapnyProfileSecurity", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ComapnyProfileSecurity", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion

            #region finally

            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }
            #endregion

            return dataTable;

        }

        public DataTable MonthlySales(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo,
                                      string Customerid, string ItemNo, string CategoryID, string productType,
                                      string TransactionType, string Post, string onlyDiscount, bool bPromotional,
                                      string CustomerGroupID, string ShiftId = "1", int branchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("Monthly Sale");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT a.Product_Name,a.Product_Code,sum(a.SaleQuantity) Quantity,SUM(a.SubTotal) Amount,SUM(a.VATAmount) VAT,a.MonthNames,a.ItemNo,a.CustomerName,
                                    a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
	FROM(						
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
							 sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')Product_Name,
                            isnull(P.ProductCode,'N/A')Product_Code,
							isnull(C.CustomerName,'N/A')CustomerName,
isnull(C.CustomerID,'N/A')CustomerID,
							DATENAME(MM,SIH.InvoiceDateTime) + ' ' + DATENAME(YYYY,SIH.InvoiceDateTime) MonthNames,
DATEPart(M,SIH.InvoiceDateTime) MonthSerial, DATEPart(YY,SIH.InvoiceDateTime) YearSerial,
							isnull(isnull(SID.Quantity,0)  + isnull(SID.PromotionalQuantity,0),0) SaleQuantity,
							isnull(SID.VATAmount,0)VATAmount ,
                            isnull(SID.UOM,0) UOM,
                            --isnull(SID.SubTotal,0) SubTotal
                            isnull(SID.CurrencyValue,0) SubTotal
							 FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo 
      
                            WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
                                                   and SID.Type=@Type";

                if (InvoiceDateFrom != "")
                {
                    sqlText += " and (SID.InvoiceDateTime >=@InvoiceDateFrom)";
                }
                if (InvoiceDateTo != "")
                {
                    //sqlText += " and (SID.InvoiceDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                    sqlText += " and (SID.InvoiceDateTime <=@InvoiceDateTo)";
                }

                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (vCategoryID != "")
                    sqlText += " and P.CategoryID=@vCategoryID ";

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost ";

                }
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                sqlText +=
                    @"
                            ) As a
							                              group by a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
							                             order by a.CustomerID,a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM
                            ";

                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=BranchId", ">BranchId");
                }
                if (string.IsNullOrEmpty(VatType))
                {
                    sqlText = sqlText.Replace("SID.Type=@Type", "1=1");

                }
                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);
                objCommSaleReport.Parameters.AddWithValue("@Type", VatType);
                objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom);
                objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo);
                objCommSaleReport.Parameters.AddWithValue("@vCustomerid", vCustomerid);
                objCommSaleReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID);
                objCommSaleReport.Parameters.AddWithValue("@vItemNo", vItemNo);
                objCommSaleReport.Parameters.AddWithValue("@vCategoryID", vCategoryID);
                objCommSaleReport.Parameters.AddWithValue("@vPost", vPost);
                objCommSaleReport.Parameters.AddWithValue("@ShiftId", ShiftId);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataTable);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MonthlySales", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MonthlySales", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataTable;
        }

        public DataTable MonthlyPurchases(string PurchaseInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo,
          string VendorId, string ItemNo, string CategoryID, string ProductType, string TransactionType, string Post,
          string PurchaseType, string VendorGroupId, string FromBOM, string UOM, string UOMn, decimal UOMc, decimal TotalQty, decimal rCostPrice, int BranchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string purchaseInvoiceNo = PurchaseInvoiceNo;
            string invoiceDateFrom = InvoiceDateFrom;
            string invoiceDateTo = InvoiceDateTo;
            string vendorId = VendorId;
            string itemNo = ItemNo;
            string categoryID = CategoryID;
            string productType = ProductType;
            string transactionType = TransactionType;
            string post = Post;
            string purchaseType = PurchaseType;

            DataTable dataSet = new DataTable("Purchase Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                sqlText = " ";
                sqlText =
                    @"
                           
 SELECT purchase.Product_Name,purchase.Product_Code,SUM(purchase.Quantity) Quantity,SUM(purchase.SubTotal) Amount,
 SUM(purchase.VATAmount) VAT,purchase.MonthNames,purchase.ItemNo,purchase.VendorName,
                                    purchase.MonthSerial,purchase.YearSerial


	FROM(						
            SELECT    
PIH.PurchaseInvoiceNo PurchaseInvoiceNo,
PID.ItemNo ItemNo,
isnull(P.ProductName,'N/A')Product_Name,
                            isnull(P.ProductCode,'N/A')Product_Code,
							isnull(V.VendorName,'N/A')VendorName,
							DATENAME(MM,PIH.InvoiceDateTime) + ' ' + DATENAME(YYYY,PIH.InvoiceDateTime) MonthNames,
DATEPart(M,PIH.InvoiceDateTime) MonthSerial, DATEPart(YY,PIH.InvoiceDateTime) YearSerial,
isnull(PID.Quantity,0) Quantity,

CASE 
WHEN PID.TransactionType='InputService' or PID.TransactionType='InputServiceImport' THEN isnull(PID.RebateAmount,0)
ELSE isnull(PID.VATAmount,0) END AS VATAmount,";

                if (FromBOM == "Y")
                {
                    sqlText +=
                        @"  
CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal
";
                }
                else
                {
                    sqlText +=
                        @"  

CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal

";
                }

                sqlText += @"  	
					
FROM         PurchaseInvoiceHeaders AS PIH LEFT OUTER JOIN
PurchaseInvoiceDetails AS PID ON PIH.PurchaseInvoiceNo = PID.PurchaseInvoiceNo LEFT OUTER JOIN
Products AS P ON PID.ItemNo = P.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID LEFT OUTER join
Vendors AS V ON PIH.VendorID = V.VendorID  LEFT OUTER JOIN
vendorGroups vg ON v.VendorGroupID=vg.VendorGroupID 
--left outer join Costing c on PID.ItemNo=c.ItemNo
WHERE PID.Quantity>0
and PIH.BranchId=@BranchId
and PID.Type=@Type
";
                #endregion
                #region Parameter

                if (FromBOM == "Y")
                {
                    sqlText += " and PIH.PurchaseInvoiceNo='" + purchaseInvoiceNo + "' ";
                    sqlText += " and p.ItemNo='" + itemNo + "' ";

                }
                else if (FromBOM == "N")
                {
                    if (!string.IsNullOrEmpty(purchaseInvoiceNo))
                    {
                        sqlText += " and PIH.PurchaseInvoiceNo='" + purchaseInvoiceNo + "' ";
                    }
                    if (!string.IsNullOrEmpty(itemNo))
                    {
                        sqlText += " and p.ItemNo='" + itemNo + "' ";
                    }
                    if (!string.IsNullOrEmpty(categoryID))
                    {
                        sqlText += " and pc.categoryID='" + categoryID + "' ";
                    }
                    if (!string.IsNullOrEmpty(productType))
                    {
                        sqlText += " and pc.IsRaw='" + productType + "' ";
                    }
                    if (!string.IsNullOrEmpty(vendorId))
                    {
                        sqlText += " and v.VendorID='" + vendorId + "' ";
                    }
                    if (!string.IsNullOrEmpty(transactionType))
                    {
                        sqlText += " and pid.TransactionType='" + transactionType + "' ";
                    }


                    if (!string.IsNullOrEmpty(invoiceDateFrom))
                    {
                        sqlText += " and pid.ReceiveDate >='" + invoiceDateFrom + "' ";
                    }
                    if (!string.IsNullOrEmpty(invoiceDateTo))
                    {
                        sqlText += " and pid.ReceiveDate <dateadd(d,1, '" + invoiceDateTo + "') ";
                    }
                    if (!string.IsNullOrEmpty(VendorGroupId))
                    {
                        sqlText += " and vg.VendorGroupID='" + VendorGroupId + "' ";
                    }
                }
                if (!string.IsNullOrEmpty(post))
                {
                    sqlText += " and pid.Post='" + post + "' ";
                }
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                if (string.IsNullOrEmpty(VatType))
                {
                    sqlText = sqlText.Replace("PID.Type=@Type", "1=1");

                }
                sqlText += @"
)As purchase
 group by purchase.MonthNames,purchase.ItemNo,purchase.Product_Name,purchase.Product_Code,purchase.VendorName,purchase.MonthSerial,purchase.YearSerial
order by purchase.MonthNames,purchase.ItemNo,purchase.Product_Name,purchase.Product_Code,purchase.VendorName,purchase.MonthSerial,purchase.YearSerial
                            ";

                #endregion Parameter

                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;

                #endregion

                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@BranchId", BranchId);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@Type", VatType);
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally
            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MonthlyPurchases", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MonthlyPurchases", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataSet VDSReport(string DepositNo,
                                 string DepositDateFrom, string DepositDateTo, string BankID, string Post,
                                 string transactionType, string VendorId, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDS Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                           select VendorName,Address1 VendorAddress,BusinessCode,BusinessType,BillAmount,VDSPercent,BillDeductAmount,TreasuryNo,DepositDateTime,
AccountNumber, VendorId,DepositNumber,BankID,DepositId,TransactionType,VATRegistrationNo
FROM
(
select vd.VendorName,vd.Address1,vd.BusinessCode,vd.BusinessType,v.BillAmount,v.VDSPercent,v.BillDeductAmount,d.TreasuryNo,
 d.DepositDateTime,b.AccountNumber, v.VendorId,v.DepositNumber,d.BankID,d.DepositId,d.TransactionType,d.Post,vd.VATRegistrationNo

from VDS v left outer join Deposits d on v.DepositNumber=d.DepositId
 left outer join Vendors vd on v.VendorId=vd.VendorID
 left outer join BankInformations b on d.BankID=b.BankID
 where d.Transactiontype NOT IN('VDS-Credit')

 UNION ALL
 select vd.VendorName,vd.Address1 ,vd.BusinessCode,vd.BusinessType,v.BillAmount,v.VDSPercent,-v.BillDeductAmount,d.TreasuryNo,
d.DepositDateTime,b.AccountNumber, v.VendorId,v.DepositNumber,d.BankID,d.DepositId,d.TransactionType,d.Post,vd.VATRegistrationNo

from VDS v left outer join Deposits d on v.DepositNumber=d.DepositId
 left outer join Vendors vd on v.VendorId=vd.VendorID
 left outer join BankInformations b on d.BankID=b.BankID
where d.Transactiontype IN('VDS-Credit') 

) A

WHERE 1=1 
-- and (v.BillAmount>0) and 
";



                if (DepositNo != "")
                {
                    sqlText += "  and DepositId=@DepositNo ";
                }
                if (DepositDateFrom != "")
                {
                    sqlText += " and DepositDateTime >=@DepositDateFrom  ";
                }
                if (DepositDateTo != "" && !string.IsNullOrEmpty(DepositDateTo))
                {
                    sqlText += " and DepositDateTime <dateadd(d,1, @DepositDateTo) ";
                }


                if (BankID != "")
                {
                    sqlText += " and BankID=@BankID ";
                }
                if (Post != "")
                {
                    sqlText += " and Post=@Post ";
                }
                if (transactionType != "")
                {
                    sqlText += " and TransactionType=@transactionType ";
                }

                if (VendorId != "")
                {
                    sqlText += " and VendorId=@VendorId ";
                }


                //sqlText += "  order by TransactionType,DepositDateTime";

                #endregion

                #region SQL Command

                SqlCommand objCommDepositReport = new SqlCommand();
                objCommDepositReport.Connection = currConn;

                objCommDepositReport.CommandText = sqlText;
                objCommDepositReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommDepositReport.Parameters.AddWithValue("@DepositNo", DepositNo);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateFrom", DepositDateFrom);
                objCommDepositReport.Parameters.AddWithValue("@DepositDateTo", DepositDateTo);
                objCommDepositReport.Parameters.AddWithValue("@BankID", BankID);
                objCommDepositReport.Parameters.AddWithValue("@Post", Post);
                objCommDepositReport.Parameters.AddWithValue("@transactionType", transactionType);
                objCommDepositReport.Parameters.AddWithValue("@VendorId", VendorId);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDepositReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VDSReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VDSReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataTable SummaryVDSReport(DepositMISViewModel vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataTable Dt = new DataTable("VDS Summary");
            var post = vm.Post ? "Y" : "N";
            if (post == null)
            {
                post = "";
            }
            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
SELECT 	
d.TreasuryNo
 ,v.VendorName
,v.VATRegistrationNo
,isnull(B.BankName,'NA')BankName
, max (d.BankDepositDate)BankDepositDate
,Sum(isnull(BillAmount,0)) PayAmount
,Sum(isnull(BillDeductAmount,0)) DeductAmount

                            FROM VDS	LEFT OUTER JOIN 
                            Deposits d ON vds.VDSId=d.DepositId LEFT OUTER JOIN 
BankInformations B ON B.BankID=d.BankID LEFT OUTER JOIN 
                            Vendors v ON vds.VendorId=v.VendorID LEFT OUTER JOIN
                            VendorGroups vg ON v.VendorGroupID=vg.VendorGroupID
							where d.TransactionType='VDS'
";



                if (vm.DepositNo != "")
                {
                    sqlText += "  and d.DepositId=@DepositNo ";
                }
                if (vm.DepositDateFrom != "")
                {
                    sqlText += " and d.DepositDateTime >=@DepositDateFrom  ";
                }
                if (vm.DepositDateTo != "" && !string.IsNullOrEmpty(vm.DepositDateTo))
                {
                    sqlText += " and d.DepositDateTime <dateadd(d,1, @DepositDateTo) ";
                }



                if (post != "")
                {
                    sqlText += " and VDS.Post=@Post ";
                }


                if (vm.VendorId != "")
                {
                    sqlText += " and VDS.VendorId=@VendorId ";
                }


                sqlText += " group by d.TreasuryNo,v.VendorName,v.VATRegistrationNo,B.BankName";

                #endregion

                #region SQL Command

                SqlCommand objCommDepositReport = new SqlCommand();
                objCommDepositReport.Connection = currConn;

                objCommDepositReport.CommandText = sqlText;
                objCommDepositReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                if (vm.DepositNo != "")
                {
                    objCommDepositReport.Parameters.AddWithValue("@DepositNo", vm.DepositNo);
                }
                if (vm.DepositDateFrom != "")
                {
                    objCommDepositReport.Parameters.AddWithValue("@DepositDateFrom", vm.DepositDateFrom);
                }
                if (vm.DepositDateTo != "" && !string.IsNullOrEmpty(vm.DepositDateTo))
                {
                    objCommDepositReport.Parameters.AddWithValue("@DepositDateTo", vm.DepositDateTo);
                }
                if (post != "")
                {
                    objCommDepositReport.Parameters.AddWithValue("@Post", post);
                }
                if (vm.VendorId != "")
                {
                    objCommDepositReport.Parameters.AddWithValue("@VendorId", vm.VendorId);
                }


                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDepositReport);
                dataAdapter.Fill(Dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SummaryVDSReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SummaryVDSReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return Dt;
        }

        public DataSet DemandReport(string DemandNo, string DemandDateFrom, string DemandDateTo, string TransactionType, string Post, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Demand Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;
                sqlText = "";

                sqlText += @"
                
SELECT  
dh.DemandNo,
convert (varchar,dh.DemandDateTime,110)DemandDate,
isnull(dh.FiscalYear,'')FiscalYear,
isnull(dh.MonthFrom,'')MonthFrom, isnull(dh.MonthTo,'')MonthTo,
isnull(dh.TotalQty,0)TotalQty ,dh.Post,d.demandLineNo,
isnull(p.ProductName,'N/A')ProductName,
isnull(p.ProductCode,'N/A')ProductCode,

isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'')PackagingName,
isnull(NULLIF(pii.PackagingCapacity,''),'')PackagingSize,
isnull(NULLIF(pii.UOM,''),'')PackagingUom,

isnull(NULLIF(bp.BanderolId,''),'')BanderolId,
isnull(NULLIF(b.BanderolName,''),'')BanderolName,
isnull(NULLIF(b.BanderolSize,''),'')BanderolSize,
isnull(NULLIF(b.UOM,''),'')BanderolUom,

isnull(d.Quantity,0)Quantity ,
isnull(d.UOM,'N/A')UOM ,

isnull(d.NBRPrice,0)NBRPrice,
isnull(d.Comments,'N/A')Comments,
d.BandProductId,
--New add for receive
dh.RefDate,dh.RefNo,
dh.DemandDateTime From1DemandDate,convert (varchar,dh.DemandReceiveDate,110)DemandReceiveDate,
dh.DemandReceiveID ReturnDemandNo,
isnull(dh.VehicleID,'N/A')VehicleID,
isnull(Vehicles.VehicleType,'N/A')VehicleType,
isnull(Vehicles.VehicleNo,'N/A')VehicleNo,
isnull(Vehicles.DriverName,'N/A')DriverName

                            FROM         dbo.DemandHeaders dh LEFT OUTER JOIN demandDetails d on dh.DemandNo = d.DemandNo
							LEFT OUTER JOIN Vehicles ON dh.VehicleID = Vehicles.VehicleID  
							LEFT OUTER JOIN BanderolProducts bp on d.BandProductId = bp.BandProductId 
							LEFT OUTER JOIN Products p on bp.ItemNo = p.ItemNo
							LEFT OUTER JOIN Banderols b on bp.BanderolId = b.BanderolID 
							LEFT OUTER JOIN PackagingInformations pii on bp.PackagingId=pii.PackagingId 


                            WHERE

                            (dh.DemandNo  LIKE '%' +  @DemandNo   + '%' OR @DemandNo IS NULL) 
                            AND (dh.Post  LIKE '%' +  @Post   + '%' OR @Post IS NULL) 

                ";
                if (TransactionType == "Receive")
                {
                    sqlText += " AND (dh.DemandReceiveDate>= @demandDateFrom OR @demandDateFrom IS NULL)";
                    sqlText += " AND (dh.DemandReceiveDate <dateadd(d,1, @demandDateTo) OR @demandDateTo IS NULL)";
                }
                else
                {
                    sqlText += " AND (dh.DemandDateTime>= @demandDateFrom OR @demandDateFrom IS NULL)";
                    sqlText += " AND (dh.DemandDateTime <dateadd(d,1, @demandDateTo) OR @demandDateTo IS NULL)";
                }

                sqlText += " AND (dh.TransactionType='" + TransactionType + "') ";
                sqlText += "  order by dh.DemandNo  ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommDemand = new SqlCommand();
                objCommDemand.Connection = currConn;

                objCommDemand.CommandText = sqlText;
                objCommDemand.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommDemand.Parameters.Contains("@Post"))
                { objCommDemand.Parameters.AddWithValue("@Post", Post); }
                else { objCommDemand.Parameters["@Post"].Value = Post; }

                if (!objCommDemand.Parameters.Contains("@DemandNo"))
                { objCommDemand.Parameters.AddWithValue("@DemandNo", DemandNo); }
                else { objCommDemand.Parameters["@DemandNo"].Value = DemandNo; }

                if (DemandDateFrom == "")
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateFrom"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateFrom", System.DBNull.Value); }
                    else { objCommDemand.Parameters["@demandDateFrom"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateFrom"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateFrom", DemandDateFrom); }
                    else { objCommDemand.Parameters["@demandDateFrom"].Value = DemandDateFrom; }
                }
                if (DemandDateTo == "")
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateTo"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateTo", System.DBNull.Value); }
                    else { objCommDemand.Parameters["@demandDateTo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateTo"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateTo", DemandDateTo); }
                    else { objCommDemand.Parameters["@demandDateTo"].Value = DemandDateTo; }
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDemand);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "DemandReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "DemandReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet BanderolForm_4(string BanderolID, string post1, string StartDate, string EndDate, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportBanderolFrom4");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;


                sqlText = @"
                


                

--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);

--DECLARE @BanderolID VARCHAR(20);

--SET @BanderolID='1';
----SET @post1='Y'; --Form4
----SET @post2='Y'; --Form4
--SET @post1='Y'; --Preview
--SET @post2='N'; --Preview
--SET @StartDate='2014-04-01';
--SET @EndDate= '2014-04-30';
           
declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #Form_4(
SerialNo  varchar (2) NULL,FiscalYear varchar(50) NULL,BanderolID varchar(100) NULL,TranDate   datetime  NULL,
 DemandNo   varchar (200) NULL, ProductName   varchar (200) NULL, DemQuantity   decimal (25, 9) NULL,
 RecNoDate   varchar (200) NULL,	 RecQuantity   decimal (25, 9) NULL,
 UsedQty   decimal (25, 9) NULL,	 WastageQty   decimal (25, 9) NULL,	 SaleQty   decimal (25, 9) NULL,
 PackagingId VARCHAR(200),Pack VARCHAR(200),Remarks VARCHAR(200),TransType   varchar (200) NULL ) 

CREATE TABLE #FormTemp_4(SerialNo  varchar (2) NULL,FiscalYear varchar(50) NULL, TranDate   datetime  NULL,
 DemandNo   varchar (200) NULL, ProductName   varchar (200) NULL, DemQuantity   decimal (25, 9) NULL,
 RecNoDate   varchar (200) NULL,	 RecQuantity   decimal (25, 9) NULL,
 UsedQty   decimal (25, 9) NULL,	 WastageQty   decimal (25, 9) NULL,	 SaleQty   decimal (25, 9) NULL,
 PackagingId VARCHAR(200),Pack VARCHAR(200),Remarks VARCHAR(200),TransType   varchar (200) NULL,ItemNo   varchar (200) NULL) 

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate, RecQuantity, UsedQty, WastageQty, SaleQty, PackagingId, Pack, Remarks, TransType,ItemNo) 
SELECT 'A1' SerialNo, dh.FiscalYear,Convert(varchar,dh.DemandReceiveDate,120) TranDate,
rd.DemandReceiveID +' _'+Convert(varchar,dh.DemandDateTime,110) DemandNo,'' ProductName,
rd.DemandQty, rd.DemandNo+' '+Convert(varchar,dh.DemandReceiveDate,110) RecNoDate,rd.Quantity RecQuantity,
0 UsedQty ,0 WastageQty , 0 SaleQty,
isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
'Demand Receive','Receive',rd.ItemNo
from DemandDetails rd LEFT OUTER JOIN DemandHeaders dh on rd.DemandNo=dh.DemandNo
left outer join BanderolProducts bp on rd.BandProductId=bp.BandProductId 
Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId

where dh.DemandReceiveDate >= @StartDate and dh.DemandReceiveDate <DATEADD(d,1,@EndDate) 
and rd.BandProductId IN(Select BandProductId from BanderolProducts where BanderolId=@BanderolID) 
and dh.TransactionType='Receive'
AND (dh.Post =@post1 or dh.Post= @post2)

------start Receive--------

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty, PackagingId, Pack, Remarks, TransType,ItemNo)
select 'B1' SerialNo,
(select distinct SUBSTRING(FiscalYearName,8,4)+SUBSTRING(FiscalYearName,22,6) from fiscalyear where rd.ReceiveDateTime between PeriodStart and PeriodEnd ) FiscalYear,
 Convert(varchar,rd.ReceiveDateTime,120) TranDate,
rd.ReceiveNo,p.ProductName,0 DemandQty,'' DemandeRecNo,0 RecQuantity,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) as UsedQty ,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0) as WastageQty,
--isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
0 Quantity,
isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
'Sale',rd.TransactionType,rd.ItemNo
from  ReceiveDetails RD LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId
LEFT OUTER JOIN Products p on rd.ItemNo= p.ItemNo 
where bp.BanderolID = @BanderolID AND 
ReceiveDateTime >= @StartDate and 
ReceiveDateTime < DATEADD(d,1,@EndDate)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other')

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty, PackagingId, Pack, Remarks, TransType,ItemNo)
select 'B1' SerialNo,
(select distinct SUBSTRING(FiscalYearName,8,4)+SUBSTRING(FiscalYearName,22,6) from fiscalyear where rd.ReceiveDateTime between PeriodStart and PeriodEnd ) FiscalYear,
 Convert(varchar,rd.ReceiveDateTime,120) TranDate,
rd.ReceiveNo,p.ProductName,0 DemandQty,'' DemandeRecNo,0 RecQuantity,
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) as UsedQty ,
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0) as WastageQty,
---isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
0 Quantity,
isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
'Sale',rd.TransactionType,rd.ItemNo
from  ReceiveDetails RD LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId
LEFT OUTER JOIN Products p on rd.ItemNo= p.ItemNo 
where bp.BanderolID = @BanderolID AND 
ReceiveDateTime >= @StartDate and 
ReceiveDateTime < DATEADD(d,1,@EndDate)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ReceiveReturn')

--Opening Qty
select @OpeningDate = Isnull(b.OpeningDate,'1900-01-01') from BanderolProducts b
WHERE BanderolID=@BanderolID

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty, Remarks)
SELECT distinct 'A' SerialNo,'',@OpeningDate TranDate,' ' DemandNo, ItemNo, SUM(a.Quantity)Quantity,
0,0,0,0,0,'Opening' TransType
	FROM (
		(SELECT @BanderolID ItemNo, Sum(isnull(OpeningQty,0)) Quantity  
FROM BanderolProducts b  WHERE b.BanderolID = @BanderolID )  

UNION ALL 

(SELECT @BanderolID ItemNo,isnull(sum(isnull(Quantity,0)),0) ReceiveQuantity
 FROM DemandDetails WHERE Post='Y'  AND TransactionDate< @StartDate  AND TransactionType='Receive' 
  and BandProductId IN(Select BandProductId from BanderolProducts where BanderolId=@BanderolID) ) 
UNION ALL
(Select @BanderolID ItemNo,-ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y'
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('Other')
                    group by bp.BUsedQty)

UNION ALL
 (Select @BanderolID ItemNo, -ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y' 
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('Other')
                    group by bp.BUsedQty,bp.WastageQty)

UNION ALL
(Select @BanderolID ItemNo,ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y'
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('ReceiveReturn')
                    group by bp.BUsedQty)

UNION ALL
 (Select @BanderolID ItemNo, ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y' 
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('ReceiveReturn')
                    group by bp.BUsedQty,bp.WastageQty)

) AS a GROUP BY a.ItemNo

insert into #Form_4(SerialNo,FiscalYear,TranDate, DemandNo, ProductName, DemQuantity,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty,PackagingId,Pack, Remarks,TransType) 
select SerialNo,FiscalYear,TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty,PackagingId,Pack, Remarks,TransType from #FormTemp_4
 order by SerialNo,TranDate;

 UPDATE #Form_4 set BanderolID = Banderols.BanderolID
 from Banderols where Banderols.BanderolID = @BanderolID 

 Declare @CFyRecQty decimal(25,9)
 Select @CFyRecQty=isnull(sum(isnull(Quantity,0)),0) FROM DemandDetails WHERE Post='Y'  AND TransactionType='Receive'
 AND TransactionDate >= (Select min(PeriodStart) from fiscalyear where @StartDate between PeriodStart and PeriodEnd) 
 AND TransactionDate < @StartDate  
  and BandProductId IN(Select BandProductId from BanderolProducts where BanderolId=@BanderolID)

 select ISNULL(#Form_4.SerialNo,'-') SerialNo,
 ISNULL(#Form_4.FiscalYear,'-') FiscalYear,
 convert (varchar,#Form_4.TranDate,120) TranDate,
 ISNULL(#Form_4.DemandNo,'-') DemandNo,
 ISNULL(#Form_4.ProductName,'-') ProductName,
 ISNULL(#Form_4.DemQuantity,0) DemQuantity,
 ISNULL(#Form_4.RecNoDate,'-') RecNoDate,
 ISNULL(#Form_4.RecQuantity,'0') RecQuantity,
 ISNULL(#Form_4.UsedQty,'0') UsedQty,
 ISNULL(#Form_4.WastageQty,'0') WastageQty,
 ISNULL(#Form_4.SaleQty,'0') SaleQty,
 ISNULL(#Form_4.PackagingId,'-') PackagingId,
 ISNULL(#Form_4.Pack,'-') Pack,
 ISNULL(#Form_4.BanderolID,'-') BanderolID,
 ISNULL(#Form_4.Remarks,'-') Remarks,
 ISNULL(#Form_4.TransType,'-') TransType,
 ISNULL(@CFyRecQty,'0') CFyRecQty
 From #Form_4

 Select isnull(NULLIF(b.BanderolName,''),'')+'-'+isnull(NULLIF(b.BanderolSize,''),'')+' '+isnull(NULLIF(b.UOM,''),'')Banderol
 from Banderols b where b.BanderolID=@BanderolID

 CREATE TABLE #Temp_Sale(ItemNo   varchar (200) NULL,ProductName   varchar (200) NULL, SaleQuantity   decimal (25, 9) NULL)

DECLARE @ItemNo varchar(50)
DECLARE CurItemNo CURSOR FOR 
SELECT DISTINCT Itemno FROM #FormTemp_4
OPEN CurItemNo
FETCH NEXT FROM  CurItemNo INTo @ItemNo
WHILE @@FETCH_STATUS = 0
BEGIN
--
insert into  #Temp_Sale(ItemNo,ProductName,SaleQuantity)
Select @ItemNo,p.ProductName,SUM(Isnull(sd.Quantity,0)) SaleQty
  from SalesInvoiceDetails sd
  LEFT OUTER JOIN Products p on sd.ItemNo= p.ItemNo 
   where sd.ItemNo = @ItemNo
 AND (sd.InvoiceDateTime >= @StartDate and sd.InvoiceDateTime < DATEADD(d,1,@EndDate))
AND (Post =@post1 or Post= @post2) 
group by p.ProductName 


FETCH NEXT FROM  CurItemNo INTo @ItemNo
END
CLOSE CurItemNo
DEALLOCATE CurItemNo 

Select * from #Temp_Sale


 DROP table #FormTemp_4
 DROP table #Form_4
 DROP table #Temp_Sale

";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommForm4 = new SqlCommand();
                objCommForm4.Connection = currConn;

                objCommForm4.CommandText = sqlText;
                objCommForm4.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommForm4.Parameters.Contains("@BanderolID"))
                {
                    objCommForm4.Parameters.AddWithValue("@BanderolID", BanderolID);
                }
                else
                {
                    objCommForm4.Parameters["@BanderolID"].Value = BanderolID;
                }
                if (StartDate == "")
                {
                    if (!objCommForm4.Parameters.Contains("@StartDate"))
                    { objCommForm4.Parameters.AddWithValue("@StartDate", System.DBNull.Value); }
                    else { objCommForm4.Parameters["@StartDate"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommForm4.Parameters.Contains("@StartDate"))
                    { objCommForm4.Parameters.AddWithValue("@StartDate", StartDate); }
                    else { objCommForm4.Parameters["@StartDate"].Value = StartDate; }
                }
                if (EndDate == "")
                {
                    if (!objCommForm4.Parameters.Contains("@EndDate"))
                    { objCommForm4.Parameters.AddWithValue("@EndDate", System.DBNull.Value); }
                    else { objCommForm4.Parameters["@EndDate"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommForm4.Parameters.Contains("@EndDate"))
                    { objCommForm4.Parameters.AddWithValue("@EndDate", EndDate); }
                    else { objCommForm4.Parameters["@EndDate"].Value = EndDate; }
                }

                if (!objCommForm4.Parameters.Contains("@post1"))
                { objCommForm4.Parameters.AddWithValue("@post1", post1); }
                else { objCommForm4.Parameters["@post1"].Value = post1; }

                if (!objCommForm4.Parameters.Contains("@post2"))
                { objCommForm4.Parameters.AddWithValue("@post2", post2); }
                else { objCommForm4.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommForm4);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BanderolForm_4", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BanderolForm_4", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        // Used and Wastage qqty come from Sale table

        public DataSet BanderolForm_5(string PeriodName, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportBanderolFrom5");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;


                sqlText = @"

--declare @periodName VARCHAR (200);
--SET @periodName='April-2014';

declare @StartDate [datetime];
declare @EndDate [datetime];
declare @MLock varchar(1);
declare @FiscalYearName varchar(200);

select @StartDate=PeriodStart,@EndDate=periodEnd,@MLock=PeriodLock,@FiscalYearName= SUBSTRING(FiscalYearName,10,2)+'/'+SUBSTRING(FiscalYearName,25,4)  
FROM FiscalYear where periodName=@periodName;

CREATE TABLE #BanderolTemp(ItemNo varchar(200) NULL,BandeProductId varchar(100) NULL)

CREATE TABLE #Form_5(
SerialNo  varchar (2) NULL,ItemNo varchar (200) NULL, BandProductId varchar (200) NULL,DemandNo   varchar (200) NULL,
 ProductName   varchar (200) NULL, DemQuantity   decimal (25, 9) NULL, RefDate   varchar (200) NULL,RecQuantity   decimal (25, 9) NULL,
 UsedQty   decimal (25, 9) NULL, WastageQty   decimal (25, 9) NULL, SaleQty   decimal (25, 9) NULL,
 PackagingId VARCHAR(200),Pack VARCHAR(200),Remarks VARCHAR(200),TransType   varchar (200) NULL ) 

CREATE TABLE #FormTemp_5(SerialNo  varchar (2) NULL, ItemNo varchar (200) NULL, BandProductId varchar (200) NULL, DemandNo   varchar (200) NULL, 
 DemQuantity   decimal (25, 9) NULL, RefDate   varchar (200) NULL,	 RecQuantity   decimal (25, 9) NULL, UsedQty   decimal (25, 9) NULL,
 WastageQty   decimal (25, 9) NULL,	 SaleQty   decimal (25, 9) NULL,  Remarks VARCHAR(200),TransType   varchar (200) NULL) 

INSERT INTO #BanderolTemp(ItemNo,BandeProductId)
	Select Distinct stock.ItemNo,stock.BandProductId 
	From(
		Select Distinct ItemNo,BandProductId from BanderolProducts 
		where ItemNo IN (Select Distinct itemNo from SalesInvoiceDetails where InvoiceDateTime>=@StartDate and InvoiceDateTime<=@EndDate )

		UNION ALL 

		Select Distinct ItemNo,BandProductId from DemandDetails 
		where ItemNo IN (Select Distinct itemNo from DemandDetails where TransactionDate>=@StartDate and TransactionDate<=@EndDate ) 

		) stock

insert into #FormTemp_5(SerialNo, ItemNo, BandProductId, DemandNo, DemQuantity, RefDate, RecQuantity,Remarks, TransType) 
	SELECT 'A1' SerialNo, rd.ItemNo , rd.BandProductId, (rd.DemandReceiveID +' _'+Convert(varchar,dh.DemandDateTime,110)) DemandNo,
	Sum(ISNULL(rd.DemandQty,0)) DemandQty,(dh.RefNo+' '+Convert(varchar,dh.RefDate,110)) RefDate,SUM(ISNULL(rd.Quantity,0)) RecQuantity,
	'Receive' Remarks,'Receive' TransactionType
	from DemandDetails rd LEFT OUTER JOIN DemandHeaders dh on rd.DemandNo=dh.DemandNo
	left outer join BanderolProducts bp on rd.BandProductId=bp.BandProductId 
	where dh.DemandReceiveDate >= @StartDate and dh.DemandReceiveDate < DATEADD(d,1,@EndDate) 
	and rd.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
	and dh.TransactionType='Receive' AND dh.Post ='Y' 
	group by rd.DemandReceiveID,dh.DemandDateTime,dh.RefNo,dh.RefDate,rd.ItemNo,rd.BandProductId

------start Sale--------

insert into #FormTemp_5(SerialNo, ItemNo, BandProductId, DemandNo, UsedQty, WastageQty, SaleQty, Remarks, TransType)
	select 'B1' SerialNo,rd.ItemNo,bp.BandProductId,'-' DemandNo,
	SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0)) as UsedQty ,
    SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0)) as WastageQty,
	--SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) SaleQty,
	 0 SaleQty,
	'Sale' Remarks,rd.TransactionType
	from ReceiveDetails rd LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
	where (ReceiveDateTime >= @StartDate) and (ReceiveDateTime < DATEADD(d,1,@EndDate))
	AND (Post ='Y' ) AND (TransactionType IN('Other'))
	AND (rd.ItemNo IN (Select Distinct ItemNo from #BanderolTemp))
	group by rd.ItemNo,bp.BandProductId,rd.TransactionType

insert into #FormTemp_5(SerialNo, ItemNo, BandProductId, DemandNo, UsedQty, WastageQty, SaleQty, Remarks, TransType)
	select 'B1' SerialNo,rd.ItemNo,bp.BandProductId,'-'DemandNo,
	-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0)) as UsedQty ,
	-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0)) as WastageQty,
	---SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) SaleQty,
	0 SaleQty,
	'Sale' Remarks,rd.TransactionType
	from ReceiveDetails rd LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
	where (ReceiveDateTime >= @StartDate) and (ReceiveDateTime < DATEADD(d,1,@EndDate))
	AND (Post ='Y' ) AND (TransactionType IN('ReceiveReturn'))
	AND (rd.ItemNo IN (Select Distinct ItemNo from #BanderolTemp))
	group by rd.ItemNo,bp.BandProductId,rd.TransactionType

insert into #FormTemp_5(SerialNo,ItemNo,BandProductId, DemQuantity ,Remarks)
SELECT distinct 'A' SerialNo, a.ItemNo,a.BandProductId, SUM(a.Quantity)Quantity,'Opening' TransType
	FROM (
		(SELECT ItemNo,BandProductId, isnull(OpeningQty,0) Quantity  
FROM BanderolProducts b  WHERE BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
  and ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
   )  

UNION ALL 

(SELECT ItemNo,BandProductId,isnull(sum(isnull(Quantity,0)),0) ReceiveQuantity
 FROM DemandDetails WHERE Post='Y'  AND TransactionDate < @StartDate  AND TransactionType='Receive' 
  and BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
  and ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
  group by ItemNo,BandProductId
  ) 
UNION ALL
(Select bp.ItemNo,bp.BandProductId,-ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('ReceiveReturn'))
                    group by bp.BUsedQty,bp.ItemNo,bp.BandProductId)

UNION ALL
 (Select s.ItemNo,bp.BandProductId, -ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('ReceiveReturn'))
                    group by bp.BUsedQty,bp.WastageQty,s.ItemNo,bp.BandProductId)
					UNION ALL
(Select bp.ItemNo,bp.BandProductId,ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('Other'))
                    group by bp.BUsedQty,bp.ItemNo,bp.BandProductId)

UNION ALL
 (Select s.ItemNo,bp.BandProductId, ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('Other'))
                    group by bp.BUsedQty,bp.WastageQty,s.ItemNo,bp.BandProductId)

) AS a GROUP BY a.ItemNo,a.BandProductId


insert into #Form_5(SerialNo,DemandNo, ItemNo, DemQuantity, RefDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty,
Remarks,TransType,BandProductId) 
select SerialNo,DemandNo, ItemNo, DemQuantity ,
 RefDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty ,Remarks,TransType,BandProductId from #FormTemp_5
 order by SerialNo

 -- Calculate Sale Qty
 
CREATE TABLE #Temp_Sale(ItemNo   varchar (200) NULL,ProductName   varchar (200) NULL, SaleQuantity   decimal (25, 9) NULL)
DECLARE @ItemNo varchar(50)
DECLARE CurItemNo CURSOR FOR 
SELECT DISTINCT Itemno FROM #FormTemp_5
OPEN CurItemNo
FETCH NEXT FROM  CurItemNo INTo @ItemNo
WHILE @@FETCH_STATUS = 0
BEGIN
--
insert into  #Temp_Sale(ItemNo,ProductName,SaleQuantity)
Select @ItemNo,p.ProductName,SUM(Isnull(sd.Quantity,0)) SaleQty
  from SalesInvoiceDetails sd
  LEFT OUTER JOIN Products p on sd.ItemNo= p.ItemNo 
   where sd.ItemNo = @ItemNo
 AND (sd.InvoiceDateTime >= @StartDate and sd.InvoiceDateTime < DATEADD(d,1,@EndDate))
AND (Post ='Y') 
group by p.ProductName 


FETCH NEXT FROM  CurItemNo INTo @ItemNo
END
CLOSE CurItemNo
DEALLOCATE CurItemNo 

Update #Form_5 SET SaleQty =#Temp_Sale.SaleQuantity 
from #Temp_Sale  where #Form_5.ItemNo=#Temp_Sale.ItemNo

 select ISNULL(#Form_5.SerialNo,'-') SerialNo,
 ISNULL(#Form_5.DemandNo,'-') DemandNo,
 ISNULL(#Form_5.ItemNo,'-') ItemNo,
 ISNULL(p.ProductName,'-') ProductName,
 ISNULL(#Form_5.DemQuantity,0) DemQuantity,
 ISNULL(#Form_5.RefDate,'-') RefDate,
 ISNULL(#Form_5.RecQuantity,'0') RecQuantity,
 ISNULL(#Form_5.UsedQty,'0') UsedQty,
 ISNULL(#Form_5.WastageQty,'0') WastageQty,
 ISNULL(#Form_5.SaleQty,'0') SaleQty,
 ISNULL(#Form_5.Remarks,'-') Remarks,
 ISNULL(#Form_5.TransType,'-') TransType,
 ISNULL(#Form_5.BandProductId,'-') BandProductId,
 isnull(NULLIF(bp.PackagingId,''),'') PackagingId,
 isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
 isnull(NULLIF(bp.BanderolId,''),'') BanderolId,
 isnull(NULLIF(b.BanderolName,''),'')+'-'+isnull(NULLIF(b.BanderolSize,''),'')+' '+isnull(NULLIF(b.UOM,''),'')Banderol

 From #Form_5 Left outer join BanderolProducts bp on #Form_5.BandProductId=bp.BandProductId
    Left outer join Products p on #Form_5.ItemNo=p.ItemNo 
    Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId
    Left outer join Banderols b on bp.BanderolId=b.BanderolID
    where #Form_5.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND #Form_5.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)



 Select isnull(@MLock,'N')MLock,Convert(varchar,ISNULL(@StartDate,GETDATE()),110)StartDate,Convert(varchar,ISNULL(@EndDate,GETDATE()),110)EndDate,
 ISNULL(@FiscalYearName,'-') FiscalYearName
 
Select ItemNo from #BanderolTemp

DROP table #Temp_Sale
Drop table #BanderolTemp
DROP table #FormTemp_5
DROP table #Form_5


";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommForm4 = new SqlCommand();
                objCommForm4.Connection = currConn;

                objCommForm4.CommandText = sqlText;
                objCommForm4.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommForm4.Parameters.Contains("@PeriodName"))
                { objCommForm4.Parameters.AddWithValue("@PeriodName", PeriodName); }
                else { objCommForm4.Parameters["@PeriodName"].Value = PeriodName; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommForm4);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BanderolForm_5", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BanderolForm_5", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        // Used and Wastage qty come from Sale table

        public string GetReturnType(string itemNo, string transactionType, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string retResults = "";
            string sqlText = "";
            SqlConnection currConn = null;
            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }

                #endregion open connection and transaction

                #region Return GetReturnType

                sqlText = "  ";

                sqlText = " Select Distinct Isnull(ReturnTransactionType,'-') from SalesInvoiceDetails ";
                sqlText += " where ItemNo =@itemNo";
                sqlText += " and TransactionType =@transactionType";

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.Parameters.AddWithValue("@itemNo", itemNo);
                cmd.Parameters.AddWithValue("@transactionType", transactionType);
                cmd.CommandTimeout = 200;
                if (cmd.ExecuteScalar() == null)
                {
                    retResults = "";
                }
                else
                {
                    retResults = (string)cmd.ExecuteScalar();
                }

                #endregion Return GetReturnType

            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                //////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                ////throw sqlex;

                FileLogger.Log("ReportDSDAL", "GetReturnType", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                //////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                ////throw ex;
                FileLogger.Log("ReportDSDAL", "GetReturnType", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());


            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion
        }

        public DataSet SelectMultipleInvoices(int noOfChallan, string transactionType, string challanDateFrom, string challanDateTo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("MultipleVAT11");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;

                sqlText = "";
                sqlText = "Select Top " + noOfChallan;
                sqlText += @" SalesInvoiceNo,Trading from SalesInvoiceHeaders 
where 
(IsPrint='N' AND Post='Y')
AND (SalesInvoiceHeaders.InvoiceDateTime >= @challanDateFrom ) 
AND (SalesInvoiceHeaders.InvoiceDateTime<dateadd(d,1, @challanDateTo) ) 
AND (TransactionType = @transactionType)
order by SalesInvoiceNo,InvoiceDateTime


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT11 = new SqlCommand();
                objCommVAT11.Connection = currConn;

                objCommVAT11.CommandText = sqlText;
                objCommVAT11.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT11.CommandText = sqlText;
                objCommVAT11.CommandType = CommandType.Text;

                if (!objCommVAT11.Parameters.Contains("@noOfChallan"))
                {
                    objCommVAT11.Parameters.AddWithValue("@noOfChallan", noOfChallan);
                }
                else
                {
                    objCommVAT11.Parameters["@noOfChallan"].Value = noOfChallan;
                }
                if (challanDateFrom == "")
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateFrom"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateFrom", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateFrom"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateFrom"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateFrom", challanDateFrom);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateFrom"].Value = challanDateFrom;
                    }
                }
                if (challanDateTo == "")
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateTo"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateTo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateTo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateTo"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateTo", challanDateTo);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateTo"].Value = challanDateTo;
                    }
                }
                if (!objCommVAT11.Parameters.Contains("@transactionType"))
                {
                    objCommVAT11.Parameters.AddWithValue("@transactionType", transactionType);
                }
                else
                {
                    objCommVAT11.Parameters["@transactionType"].Value = transactionType;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT11);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SelectMultipleInvoices", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SelectMultipleInvoices", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 09

        #region RptBanderolProduct

        public DataSet RptBanderolProduct(string ProductCode, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dsBandePro = new DataSet("BanderolProducts");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                             @" SELECT isnull(NULLIF(bp.BandProductId,''),'')BandProductId,
                            isnull(NULLIF(bp.ItemNo,''),0)ItemNo, 
                            --convert (varchar,isnull (p.ProductCode,GETDATE()),120)ProductCode,
                            isnull(NULLIF(p.ProductCode,''),'')ProductCode,
                            isnull(NULLIF(p.ProductName,''),'')ProductName,
                            isnull(NULLIF(bp.BanderolId,''),'')BanderolId,
                            isnull(NULLIF(b.BanderolName,''),'')BanderolName,
                            isnull(NULLIF(b.BanderolSize,''),'')BanderolSize,
                            isnull(NULLIF(b.UOM,''),'')BanderolUom,
                            isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
                            isnull(NULLIF(pii.PackagingNature,''),'')PackagingName,
                            isnull(NULLIF(pii.PackagingCapacity,''),'')PackagingSize,
                            isnull(NULLIF(pii.UOM,''),'')PackagingUom,
                            isnull(NULLIF(bp.BUsedQty,0),0)BUsedQty,
                            isnull(NULLIF(bp.WastageQty,0),0)WastageQty,
                            isnull(NULLIF(bp.ActiveStatus,''),'')ActiveStatus,
                            isnull(NULLIF(bp.OpeningQty,0),0)OpeningQty,
                            bp.OpeningDate
                            --convert (varchar,isnull (bp.OpeningDate,GETDATE()),120)OpeningDate
                            FROM BanderolProducts bp Left Outer Join Products p
							on bp.ItemNo=p.ItemNo Left outer Join Banderols b
							on bp.BanderolId=b.BanderolID Left outer join PackagingInformations pii
							on bp.PackagingId=pii.PackagingId 
                 
                            WHERE 
                                (p.ProductCode = @ProductCode OR @ProductCode IS NULL) 
                                   
                            order by bp.BandProductId";

                #endregion

                #region SQL Command

                SqlCommand objCommBanderolProduct = new SqlCommand();
                objCommBanderolProduct.Connection = currConn;

                objCommBanderolProduct.CommandText = sqlText;
                objCommBanderolProduct.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                //if (!objCommBanderolProduct.Parameters.Contains("@ProductCode"))
                //{ objCommBanderolProduct.Parameters.AddWithValue("@ProductCode", ProductCode); }
                //else { objCommBanderolProduct.Parameters["@ProductCode"].Value = ProductCode; }

                if (ProductCode == "")
                {
                    if (!objCommBanderolProduct.Parameters.Contains("@ProductCode"))
                    { objCommBanderolProduct.Parameters.AddWithValue("@ProductCode", System.DBNull.Value); }
                    else { objCommBanderolProduct.Parameters["@ProductCode"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommBanderolProduct.Parameters.Contains("@ProductCode"))
                    { objCommBanderolProduct.Parameters.AddWithValue("@ProductCode", ProductCode); }
                    else { objCommBanderolProduct.Parameters["@ProductCode"].Value = ProductCode; }
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBanderolProduct);
                dataAdapter.Fill(dsBandePro);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "RptBanderolProduct", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "RptBanderolProduct", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dsBandePro;
        }

        #endregion

        #region Bureau
        public DataSet BureauVAT11Report(string SalesInvoiceNo, string Post1, string Post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"SELECT    
                                SIH.SalesInvoiceNo SalesInvoiceNo, 
                                isnull(SID.Type,'VAT')VATType,
                                convert (varchar,SIH.InvoiceDateTime,120) InvoiceDate,
                                isnull(C.CustomerName,'N/A')CustomerName,
                                isnull(c.Address1,'N/A')Address1,isnull(c.Address2,'N/A')Address2,isnull(c.Address3,'N/A')Address3,
                                isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1,isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2,isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
                                isnull(v.VehicleType,'N/A')VehicleType,isnull(v.VehicleNo,'N/A')VehicleNo,
                                --isnull(P.ProductName,'N/A')ProductName ,
								isnull(SID.InvoiceName,'N/A')ProductName ,
								isnull(SID.Quantity,1)Quantity ,
                                isnull(SID.UOM,'N/A') UOM,
								isnull(SID.SalesPrice,0)UnitCost,
                                isnull(SID.VATRate,0)VATRate,
                                isnull(SID.VATAmount,0)VATAmount,
                                isnull(SID.SD,0) SD,
                                isnull(SID.SDAmount,0) SDAmount,
                                isnull(SIH.BranchId,1)BranchId,

                                isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
                                --isnull(SIH.Comments,'N/A') Comments,
--isnull(SIH.SerialNo,'N/A')SerialNo,
'' Comments,
'' SerialNo,
isnull(SIH.SaleType,'N/A')SaleType,
isnull(SIH.AlReadyPrint,'0')AlReadyPrint,
isnull(SIH.PreviousSalesInvoiceNo,'N/A')PreviousSalesInvoiceNo,
isnull(SIH.TransactionType,'N/A')TransactionType,
isnull(SIH.CurrencyID,0)CurrencyID,
isnull(SIH.CurrencyRateFromBDT,0)CurrencyRateFromBDT,
isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))DeliveryDate,                                
case when SID.LastModifiedBy is null then SID.CreatedBy else SID.LastModifiedBy end EntryUserName,

                                Isnull(SIH.LCNumber,0) LCNumber,

                                isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0),0)Subtotal,
                                isnull(SIH.SignatoryName,'N/A')         AS SignatoryName,
                                isnull(SIH.SignatoryDesig,'N/A')       AS SignatoryDesig

                                FROM  dbo.BureauSalesInvoiceDetails AS SID LEFT OUTER JOIN
                                dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                                dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                                dbo.Products AS P ON SID.ItemNo = P.ItemNo 
								left outer join
                                dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

                                WHERE
                              (SIH.SalesInvoiceNo IN(@SalesInvoiceNo) )
                                ---(SIH.SalesInvoiceNo = @SalesInvoiceNo )
                                AND (SIH.Post =@Post1 or SIH.Post= @Post2)
                                and (SID.Quantity>0)
order by SID.InvoiceLineNo asc
                            ";

                if (!SalesInvoiceNo.Contains("'"))
                {
                    SalesInvoiceNo = "'" + SalesInvoiceNo + "'";
                }


                sqlText = sqlText.Replace("@SalesInvoiceNo", SalesInvoiceNo);
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                //if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                //{
                //    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                //}
                //else
                //{
                //    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                //}
                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT11Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT11Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT6_1Report(string ItemNo, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");


            #endregion

            #region Try

            try
            {
                #region vat19 value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");

                #endregion vat19 value

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += "from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += "where p.ItemNo = '" + ItemNo + "'";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn);
                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }


                var top = "";
                sqlText = " ";


                #region SQL Text

                sqlText += @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);
--DECLARE @ItemNo VARCHAR(20);

--DECLARE @IsExport VARCHAR(20);
--SET @IsExport ='No';

--SET @Itemno='189';
--SET @post1='Y';
--SET @post2='N';
--SET @StartDate='2014-01-01';
--SET @EndDate= '2014-08-01

             
CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL)

CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL) 
 

------start Sale--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime)
select 'B1', ChallanDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN SUM(isnull(NULLIF(DollerValue,0),0)) ELSE SUM(isnull(NULLIF(SubTotal,0),0)) END AS SubTotal, 
Sum(isnull(Quantity,1))Quantity,SUM(VATAmount) VATAmount,
--SUM(SDAmount) SDAmount,
0 SD,
TransactionType,ChallanDateTime
from BureauSalesInvoiceDetails
where ChallanDateTime >= @StartDate and 
ChallanDateTime < DATEADD(d,1,@EndDate)  
AND (Post =@post1 or Post= @post2)
and (ItemNo=@ItemNo) 
AND TransactionType IN('ServiceNS','ExportServiceNS')
group by SalesInvoiceNo,ChallanDateTime, TransactionType

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime)
select 'B1', ChallanDateTime,SalesInvoiceNo,'Sale',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN SUM(isnull(NULLIF(DollerValue,0),0)) ELSE SUM(isnull(NULLIF(SubTotal,0),0)) END AS SubTotal, 
-Sum(  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end )Quantity,-SUM(VATAmount) VATAmount,
---SUM(SDAmount) SDAmount,
0 SD,
TransactionType,CreatedOn
from BureauSalesInvoiceDetails
where ChallanDateTime >= @StartDate and 
ChallanDateTime < DATEADD(d,1,@EndDate) 
and ItemNo=@ItemNo 
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit','ExportServiceNSCredit')
group by SalesInvoiceNo,ChallanDateTime, TransactionType,CreatedOn

------end sale--------
------Start Disposee--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime)
select 'B1', DisposeDetails.DisposeDate,DisposeDetails.DisposeNumber,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(DollarPrice,0),0) ELSE isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0) END AS SubTotal,
isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >= @StartDate and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)            

AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT27') and sih.FromStock in ('Y')

------end Disposee--------


insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime)
select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime
from #VATTemp_17
order by dailydate,SerialNo;

update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)

select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
#VAT_17.TransID,#VAT_17.TransType,
isnull(c.CustomerName,'-')CustomerName,
isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
isnull(c.Address3,'-')Address3,
isnull(c.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName, p.ProductCode,   isnull(p.HSCodeNo,'NA')HSCodeNo

, 'nos.' UOM
, #VAT_17.TransType ReturnTransactionType

,ISNULL(#VAT_17.Quantity, 0) Quantity,#VAT_17.ItemNo

,#VAT_17.VATRate
,#VAT_17.SD,#vat_17.UnitCost,remarks,isnull(#vat_17.UnitCost,0) UnitRate
,#vat_17.CreatedDateTime
from #VAT_17  left outer JOIN 
Customers as C on #VAT_17.CustomerID=c.CustomerID left outer join 
Products P on #VAT_17.ItemNo=p.ItemNo

order by CreatedDateTime,SerialNo

DROP TABLE #VAT_17
DROP TABLE #VATTemp_17

                ";

                #endregion SQL

                top = "A";

                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();

                objCommVAT17.Connection = currConn;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }

                if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
                }

                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
                }
                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = post1;
                }
                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT6_1Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT6_1Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT18Report(string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement

                //                sqlText = @"
                //
                //";

                #endregion statement

                #region statement

                sqlText = @"
                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2013/10/01'
--SET @EndDate='2013/10/31'
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL

select 'Z2-1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('SaleVDS')
UNION ALL

SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')

UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')

UNION ALL

select 'Z17' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

UNION ALL

select 'Z18' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury-Credit')

)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,-isnull(DepositAmount,0),'Treasury-Credit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A5',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Purchase',0,isnull(DepositAmount,0),'SaleVDS',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('SaleVDS')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'DDB',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where Remarks in ('CreditPayble','ShortageRebatable','TreasuryCredit','SaleVDS') AND (vat < 0)

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18


                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT18Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT18Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT18_OldFormat(string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            //Format before 30 June2014
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement

                //                sqlText = @"
                //
                //";

                #endregion statement

                #region statement

                sqlText = @"
                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2013/10/01'
--SET @EndDate='2013/10/31'
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)


insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Purchase',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'Purchase',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18


                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT18_OldFormat", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT18_OldFormat", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataTable BureauMonthlySales(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo,
                                     string Customerid, string ItemNo, string CategoryID, string productType,
                                     string TransactionType, string Post, string onlyDiscount, bool bPromotional,
                                     string CustomerGroupID, string ShiftId = "1", int branchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("Monthly Sale");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT a.Product_Name,a.Product_Code,sum(a.SaleQuantity) Quantity,SUM(a.SubTotal) Amount,SUM(a.VATAmount) VAT,a.MonthNames,a.ItemNo,a.CustomerName,
                                    a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
	FROM(						
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
							 sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')Product_Name,
                            isnull(P.ProductCode,'N/A')Product_Code,
							isnull(C.CustomerName,'N/A')CustomerName,
                            isnull(C.CustomerID,'N/A')CustomerID,
							DATENAME(MM,SIH.InvoiceDateTime) + ' ' + DATENAME(YYYY,SIH.InvoiceDateTime) MonthNames,
                            DATEPart(M,SIH.InvoiceDateTime) MonthSerial, DATEPart(YY,SIH.InvoiceDateTime) YearSerial,
							isnull(SID.Quantity,0) SaleQuantity,
							--isnull(SID.VATAmount,0)VATAmount ,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.VATAmount,0) ELSE isnull(SID.VATAmount,0) END AS VATAmount,
                            isnull(SID.UOM,0) UOM,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.SubTotal,0) ELSE isnull(SID.SubTotal,0) END AS SubTotal
                            --isnull(SID.SubTotal,0) SubTotal
							 FROM  dbo.BureauSalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo 
      
                            WHERE (SID.Quantity>0)  and SID.BranchId=@BranchId";
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and (SID.ChallanDateTime >=@InvoiceDateFrom)";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and (SID.ChallanDateTime <=@InvoiceDateTo)";
                    //sqlText += " and (SID.ChallanDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                }

                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo";
                if (vCategoryID != "")
                    sqlText += " and P.CategoryID=@vCategoryID ";

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost";

                }
                sqlText +=
                    @"
                            ) As a
			
            group by a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
			order by a.CustomerID,a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM
                            ";

                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion


                #region Parameter
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@BranchId", branchId);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@ShiftId", ShiftId);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@InvoiceDateFrom", InvoiceDateFrom);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@InvoiceDateTo", InvoiceDateTo);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vCustomerid", vCustomerid);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@CustomerGroupID", CustomerGroupID);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vItemNo", vItemNo);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vCategoryID", vCategoryID);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vPost", vPost);
                #endregion


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataTable);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauMonthlySales", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauMonthlySales", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataTable;
        }

        public DataSet BureauSaleMis(string SaleId, string ShiftId = "0", int branchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 

SELECT sh.SalesInvoiceNo
      ,sh.CustomerID
      ,sh.DeliveryAddress1
      ,sh.VehicleID
      ,convert (varchar,sh.InvoiceDateTime,120)InvoiceDateTime
      ,convert (varchar,sh.DeliveryDate,120)DeliveryDate
      ,sh.TotalAmount
      ,sh.TotalVATAmount
      ,sh.SerialNo
      ,sh.Comments      
      ,sh.SaleType
      ,sh.PreviousSalesInvoiceNo
      ,sh.Trading
      ,sh.IsPrint
      ,sh.TenderId
      ,sh.TransactionType
      ,sh.Post
      ,isnull(sh.LCNumber,'nill')LCNumber
      ,isnull(sh.CurrencyID,'nill')CurrencyID
      ,isnull(sh.CurrencyRateFromBDT,0)CurrencyRateFromBDT
      ,isnull(sh.SaleReturnId,'nill')SaleReturnId
      ,isnull(sh.IsVDS,'nill')IsVDS
      ,isnull(sh.GetVDSCertificate,'nill')GetVDSCertificate 
	  ,c.CustomerName
      ,c.Address1
      ,c.City
      ,c.TelephoneNo
      ,c.FaxNo
      ,c.Email
      ,convert (varchar,c.StartDateTime,120)StartDateTime
      ,c.ContactPerson
      ,c.ContactPersonDesignation
      ,c.ContactPersonTelephone
      ,c.ContactPersonEmail
      ,c.TINNo
      ,c.VATRegistrationNo 
      ,c.ActiveStatus
      ,isnull(c.VDSPercent,0)VDSPercent
      ,isnull(v.VehicleCode,'nill')VehicleCode
      ,isnull(v.VehicleType,'nill')VehicleType
      ,isnull(v.VehicleNo,'nill')VehicleNo
      ,isnull(v.Description,'nill')Description
	  ,isnull(cu.CurrencyName,'nill')CurrencyName
      ,isnull(cu.CurrencyCode,'nill')CurrencyCode
      ,isnull(cu.Country,'nill')Country
  FROM SalesInvoiceHeaders sh
  left outer join Customers c on c.CustomerID = sh.CustomerID
  left outer join Vehicles v on v.VehicleID= sh.VehicleID
  left outer join Currencies cu on cu.CurrencyId= sh.CurrencyId
  Where sh.SalesInvoiceNo = @SaleId and sh.BranchId=@BranchId
";
                if (Convert.ToInt32(ShiftId) > 0) { sqlText += " and sh.ShiftId='" + ShiftId + "' "; }

                sqlText = @"

SELECT sd.SalesInvoiceNo
      ,sd.InvoiceLineNo
      ,sd.ItemNo
      ,sd.Quantity
      ,sd.SalesPrice
      ,0 NBRPrice
      ,0 AVGPrice
      ,sd.UOM
      ,sd.VATRate
      ,sd.VATAmount
      ,sd.SubTotal
      ,'N\A'Comments
      ,sd.SD
      ,sd.SDAmount
      ,'' SaleType
      ,sd.PreviousSalesInvoiceNo
      ,'' Trading
      ,convert (varchar,sd.ChallanDateTime,120)InvoiceDateTime
      ,'Y' NonStock
      ,' ' TradingMarkUp
      ,sd.Type
      ,'' BENumber
      ,sd.Post
      ,sd.Quantity UOMQty
      ,sd.SalesPrice UOMPrice
      ,0 UOMc
      ,sd.UOM UOMn
      ,isnull(sd.DollerValue,0)DollerValue
      ,isnull(sd.CurrencyValue,0)CurrencyValue
      ,sd.TransactionType
      ,'nill' VATName
      ,'nill' SaleReturnId
      ,0 DiscountAmount
      ,0 DiscountedNBRPrice
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
  FROM BureauSalesInvoiceDetails sd
  left outer join Products p on p.ItemNo=sd.ItemNo
  left outer join  SalesInvoiceHeaders sh on sh.SalesInvoiceNo=sd.SalesInvoiceNo
  Where sd.SalesInvoiceNo = @SaleId and sd.BranchId=@BranchId

";
                if (Convert.ToInt32(ShiftId) > 0) { sqlText += " and sh.ShiftId='" + ShiftId + "' "; }

                sqlText = @"
SELECT se.SalesInvoiceNo
      ,se.SaleLineNo
      ,se.RefNo
      ,se.Description
      ,se.Quantity
      ,se.GrossWeight
      ,se.NetWeight
      ,se.NumberFrom
      ,se.NumberTo
      ,se.Comments
      ,se.PortFrom
      ,se.PortTo 
  FROM SalesInvoiceHeadersExport se

  left outer join  SalesInvoiceHeaders sh on sh.SalesInvoiceNo=se.SalesInvoiceNo
  
   Where se.SalesInvoiceNo = @SaleId and se.BranchId=@BranchId

";
                if (Convert.ToInt32(ShiftId) > 0) { sqlText += " and sh.ShiftId='" + ShiftId + "' "; }


                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;
                objCommVAT16.Parameters.AddWithValue("@BranchId", branchId);
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommVAT16.Parameters.Contains("@ShiftId"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ShiftId", ShiftId);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ShiftId"].Value = ShiftId;
                    }

                }
                if (!objCommVAT16.Parameters.Contains("@SaleId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@SaleId", SaleId);
                }
                else
                {
                    objCommVAT16.Parameters["@SaleId"].Value = SaleId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauSaleMis", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauSaleMis", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauSaleNew(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                              string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                              string onlyDiscount, bool bPromotional, string CustomerGroupID, string ShiftId = "1", int branchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                             SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
                            convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,
                            isnull(SID.UOM,'N/A')UOM,
                            isnull(SID.UOM,'N/A')UOMn,
                            --isnull(SID.UOMc,1)UOMc,                            
                            isnull(SID.Quantity,0)Quantity,

                            --isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
                            isnull(SID.Quantity,0) SaleQuantity,

                            isnull(SID.Quantity,0)UOMQty,
                            isnull(SID.SalesPrice,0)NBRPrice,
                            --isnull(NULLIF(isnull(SID.DiscountedNBRPrice,0),0),isnull(SID.NBRPrice,0))Discount,
                            --isnull(SID.UOMPrice,isnull(SID.NBRPrice,0))UOMPrice,
                            isnull(SID.SD,0)SD,
                            isnull(SID.SDAmount,0)SDAmount,
                            isnull(SID.VATRate,0)VATRate,
                            --isnull(SID.VATAmount,0)VATAmount ,
                            --isnull(SID.SubTotal,0) SubTotal,
                            --SID.Trading,
                            --SID.TradingMarkUp,
                            --SID.NonStock,
                            --SID.SaleType,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.VATAmount,0) ELSE isnull(SID.VATAmount,0) END AS VATAmount,
                            isnull(SID.UOM,0) UOM,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.SubTotal,0) ELSE isnull(SID.SubTotal,0) END AS SubTotal,
                            pc.CategoryName,pc.IsRaw ProductType

                            FROM  dbo.BureauSalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
      
                            WHERE (SID.Quantity>0) 
                            and SID.BranchId=@BranchId";


                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }

                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo ";

                //if (onlyDiscount == "Y")
                //{
                //    sqlText += " and SID.DiscountAmount >0 ";
                //}
                //else if (onlyDiscount == "N")
                //{
                //    sqlText += " and SID.DiscountAmount <=0 ";
                //}


                //if (bPromotional == true)
                //{
                //    sqlText += " and SID.PromotionalQuantity >0 ";
                //}
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.ChallanDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    //sqlText += " and (SID.ChallanDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                    sqlText += " and SID.ChallanDateTime <=@InvoiceDateTo ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (vCategoryID != "")
                    sqlText += " and P.CategoryID=@vCategoryID ";
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType";
                if (vTransactionType != "")
                {
                    sqlText += " and SIH.TransactionType=@vTransactionType ";
                }

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost ";
                }

                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@BranchId", branchId);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@ShiftId", ShiftId);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vSalesInvoiceNo", vSalesInvoiceNo);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@InvoiceDateFrom", InvoiceDateFrom);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@InvoiceDateTo", InvoiceDateTo);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vCustomerid", vCustomerid);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@CustomerGroupID", CustomerGroupID);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vItemNo", vItemNo);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vCategoryID", vCategoryID);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vproductType", vproductType);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vTransactionType", vTransactionType);
                objCommSaleReport.Parameters.AddWithValueAndNullHandle("@vPost", vPost);

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauSaleNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauSaleNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet BureauCreditNoteOld(string SalesInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"select Credit.InvoiceLineNo ,Credit.salesInvoiceNo,
                                    convert (varchar,Credit.ChallanDateTime,120)InvoiceDateTime,p.productName,
                                    (Credit.SalesPrice*Credit.Quantity)SubCost,Credit.SDAmount,Credit.VATAmount
                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,CreditSum.SDAmount CSSDAmount,CreditSum.VATAmount CSVATAmount
                                    ,Credit.PrevioussalesInvoiceNo,CreditH.CustomerID,CreditH.VehicleID,
                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                                    ,credit.quantity,credit.uom

                                    ,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
                                    c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments

                                    from BureauSalesInvoiceDetails AS Credit left outer join
                                    SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join

                                    Customers C on CreditH.CustomerID=c.customerID left outer join
                                    Vehicles V on CreditH.VehicleID=v.VehicleID left outer join
                                    SalesInvoiceHeaders SIH on Credit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
                                    left outer join
                                    (select distinct salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from BureauSalesInvoiceDetails
                                    where salesInvoiceNo=(
                                    select distinct PrevioussalesInvoiceNo from BureauSalesInvoiceDetails
                                    where salesInvoiceNo=@SalesInvoiceNo)
                                    group by salesInvoiceNo
                                    ) New on Credit.PrevioussalesInvoiceNo=New.salesInvoiceNo left outer join
                                    (select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from BureauSalesInvoiceDetails
                                     where salesInvoiceNo=@SalesInvoiceNo
                                    group by salesInvoiceNo
                                    )CreditSum on Credit.salesInvoiceNo=CreditSum.salesInvoiceNo left outer join products P on
                                    Credit.itemno=p.itemno
                                    where  Credit.salesInvoiceNo=@SalesInvoiceNo
                                    AND CreditH.TransactionType='Credit' 
                                   
AND (CreditH.Post =@post1 or CreditH.Post= @post2)

                                    and Credit.Quantity>0
order by Credit.InvoiceLineNo asc
";
                SqlCommand objCommCreditNote = new SqlCommand();
                objCommCreditNote.Connection = currConn;
                objCommCreditNote.CommandText = sqlText;
                objCommCreditNote.CommandType = CommandType.Text;

                if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommCreditNote.Parameters.Contains("@post1"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommCreditNote.Parameters["@post1"].Value = post1;
                }
                if (!objCommCreditNote.Parameters.Contains("@post2"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommCreditNote.Parameters["@post2"].Value = post2;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauCreditNote", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauCreditNote", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauCreditNote(string SalesInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"
SELECT    
SIH.SalesInvoiceNo SalesInvoiceNo 

,convert (varchar,SIH.InvoiceDateTime,120)                                                                          AS InvoiceDate
,isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))                           AS DeliveryDate

,isnull(C.CustomerName,'N/A')                                                           AS CustomerName
,isnull(C.CustomerCode,'N/A')                                                           AS CustomerCode
,isnull(c.Address1,'N/A')                                                               AS Address1
,isnull(C.CustomerName,'N/A')                                                           AS Address2
,isnull(c.Address3,'N/A')                                                               AS Address3
,isnull(c.TelephoneNo,'N/A')                                                            AS TelephoneNo
,isnull(sih.DeliveryAddress1,'N/A')                                                     AS DeliveryAddress1
,isnull(sih.DeliveryAddress2,'N/A')                                                     AS DeliveryAddress2
,isnull(sih.DeliveryAddress3,'N/A')                                                     AS DeliveryAddress3
,isnull(v.VehicleType,'N/A')                                                            AS VehicleType
,isnull(v.VehicleNo,'N/A')                                                              AS VehicleNo
,isnull(P.ProductName,'N/A')                                                            AS ProductNameOld
,isnull(PC.CategoryName,'N/A')                                                          AS ProductDescription
,case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end ProductGroup
,isnull(SID.Quantity,SID.UOMQty)                                                        AS Quantity
,isnull(SID.UOM,'N/A')                                                                  AS UOM
,isnull(P.ProductName,'N/A')                                                            AS ProductName                            
,isnull(P.ShortName,'N/A')                                                              AS ShortName                            
--,isnull(SID.ProductDescription,'N/A')                                                   AS ProductCommercialName
,isnull(SID.SalesPrice,0)                                                               AS UnitCost
--,isnull(SID.PromotionalQuantity,0)                                                      AS PromotionalQuantity
,isnull(SID.VATRate,0)                                                                  AS VATRate
,isnull(SID.VATAmount,0)                                                                AS VATAmount
,isnull(SID.SD,0)                                                                       AS SD
,0                                                                                      AS SDAmount
--,isnull(SID.VDSAmount,0)                                                                AS VDSAmount
,ISNULL(SIH.HPSTotalAmount,0)                                                           AS HPSAmount
,isnull(c.VATRegistrationNo,'N/A')                                                      AS VATRegistrationNo
,isnull(sih.SerialNo,'N/A')                                                             AS SerialNo
,isnull(sih.AlReadyPrint,'0')                                                           AS AlReadyPrint
,isnull(sih.ImportIDExcel,'N/A')                                                        AS ImportIDExcel
,isnull(sih.Comments,'N/A')                                                             AS Comments
--,isnull(SID.Comments,0)                                                                 AS CommentD
,isnull(SID.Type,'VAT')                                                                 AS VATType
,isnull(SID.DollerValue,0)                                                              AS DollerValue
,isnull(SID.CurrencyValue,0)                                                            AS CurrencyValue                                                                                                                                                      
--,isnull(SID.Weight,'')                                                                  AS Weight
,SIH.LCDate                                                                             AS LCDate
,Isnull(SIH.LCNumber,'-')                                                               AS LCNumber
,isnull(SIH.LCBank,'N/A')                                                               AS LCBank
,isnull(SIH.PINo,'-')                                                                   AS PINo
,SIH.PIDate                                                                             AS PIDate
,isnull(SIH.EXPFormNo,'-')                                                              AS EXPFormNo
,SIH.EXPFormDate                                                                        AS EXPFormDate
,isnull(SIH.BranchId,1)                                                                 AS BranchId
,isnull(SIH.SignatoryName,'N/A')                                                        AS SignatoryName
,isnull(SIH.SignatoryDesig,'N/A')                                                       AS SignatoryDesig
,'-'                                                                                    AS SerialNo
,isnull(SIH.SaleType,'N/A')                                                             AS SaleType
,isnull(SIH.TransactionType,'N/A')                                                      AS TransactionType
,isnull(SIH.CurrencyID,0)                                                               AS CurrencyID
,isnull(SIH.CurrencyRateFromBDT,0)                                                      AS CurrencyRateFromBDT
,isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.SalesPrice,0)*0/100,0),0)    AS Subtotal
--,isnull(SID.TotalValue,0)                                                                                   AS TotalValue
,isnull(SID.Subtotal,0)                                                                                       AS Fixed_Subtotal
--,isnull(SID.DiscountAmount,0)                                                                               AS DiscountAmount
--,isnull(SID.DiscountedNBRPrice,0)                                                                           AS DiscountedNBRPrice
,case when SID.LastModifiedBy is null then SID.CreatedBy else SID.LastModifiedBy end                          AS EntryUserName
,isnull(SIH.PreviousSalesInvoiceNo,'N/A')                                                                     AS PreviousSalesInvoiceNo
,isnull(SIH.FileName,'-')                                                                                     AS FileName
,convert (varchar,isnull(SID.PreviousInvoiceDateTime,'01/01/1900'),120)                                       AS PreviousInvoiceDateTime
,isnull(SID.PreviousNBRPrice ,'0')                                                                            AS PreviousNBRPrice
,isnull(SID.PreviousQuantity,SID.UOMQty)                                                                      AS PreviousQuantity
--,isnull(SID.PreviousUOM ,'0')                                                                               AS PreviousUOM
--,isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.SalesPrice,0)*0/100,0),0)    AS PreviousSubTotal

,isnull(SID.PreviousSubTotal,0)                                                                               AS PreviousSubTotal
,isnull(SID.PreviousVATRate ,'0')                                                                              AS PreviousVATRate
,isnull(SID.PreviousVATAmount,0)  		    															      AS PreviousVATAmount
,isnull(SID.PreviousSD,0)																					  AS PreviousSD
,isnull(SID.PreviousSDAmount,0)                                                                               AS PreviousSDAmount
,isnull(SID.ReasonOfReturn ,'N/A')                                                                            AS ReasonOfReturn
,isnull(SID.PreviousSalesInvoiceNo,'N/A')                                                                     AS PreviousSalesInvoiceNoD
--,isnull(SID.SourcePaidVATAmount,0)                                                                          AS SourcePaidVATAmount
--,isnull(SID.OtherRef,'-')                                                                                   AS OtherRef
--,isnull(SID.LineTotal,0)                                                                                    AS LineTotal
--,isnull(SID.PreLineTotal,0)                                                                                 AS PreLineTotal
--,isnull(SID.ProductType,'-')                                                                                AS ProductType
,isnull(SIH.Section,'-')                                                                                    AS Section
,isnull(SIH.DataSource,'-')                                                                                 AS DataSource
,isnull(PS.TrackingQuantity,0)                                                                              AS TrackingQuantity
,PS.PurchaseInvoiceNo                                                                                       AS TPurchaseInvoiceNo
,PS.PurchaseInvoiceDateTime                                                                                 AS TPurchaseDateTime
,PS.BENumber                                                                                                AS TBENumber
,PS.CustomHouse                                                                                             AS TCustomHouse 
,SIE.EngineNumber
,SIE.ChassisNumber

FROM  dbo.BureauSalesInvoiceDetails AS SID LEFT OUTER JOIN
dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.SaleEngineChassisDetails AS SIE ON P.ItemNo = SIE.ItemNo and SIE.SalesInvoiceNo=SID.SalesInvoiceNo LEFT OUTER JOIN
dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID 
left outer join 
( 
select distinct '-' PurchaseInvoiceNo,PurchaseInvoiceDateTime,BENumber,CustomHouse,SalesInvoiceNo, ItemNo,count(id)TrackingQuantity 
from PurchaseSaleTrackings where SalesInvoiceNo IN(@SalesInvoiceNo)
group by 
PurchaseInvoiceDateTime,BENumber,CustomHouse,SalesInvoiceNo, ItemNo) PS 
on SID.SalesInvoiceNo=ps.SalesInvoiceNo and sid.ItemNo=ps.ItemNo

WHERE
(SIH.SalesInvoiceNo IN(@SalesInvoiceNo) )
AND (SIH.Post =@Post1 or SIH.Post= @Post2)
  order by P.ProductName OFFSET 0 ROWS FETCH NEXT 99999 ROWS ONLY 
SELECT DISTINCT uom, SUM(isnull(Quantity,UOMQty)) qty
FROM  BureauSalesInvoiceDetails 
WHERE (SalesInvoiceNo IN(@SalesInvoiceNo) )
and (isnull(UOMQty, Quantity)>0)
GROUP BY uom

                         ";

                #endregion

                #region sql statement old  Bureau Veritas

                //                sqlText = @"select Credit.InvoiceLineNo ,Credit.salesInvoiceNo,
                //                                    convert (varchar,Credit.ChallanDateTime,120)InvoiceDateTime,p.productName,
                //                                    (Credit.SalesPrice*Credit.Quantity)SubCost,Credit.SDAmount,Credit.VATAmount
                //                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,CreditSum.SDAmount CSSDAmount,CreditSum.VATAmount CSVATAmount
                //                                    ,Credit.PrevioussalesInvoiceNo,CreditH.CustomerID,CreditH.VehicleID,
                //                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                //                                    ,credit.quantity,credit.uom
                //
                //                                    ,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
                //                                    c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments
                //
                //                                    from BureauSalesInvoiceDetails AS Credit left outer join
                //                                    SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join
                //
                //                                    Customers C on CreditH.CustomerID=c.customerID left outer join
                //                                    Vehicles V on CreditH.VehicleID=v.VehicleID left outer join
                //                                    SalesInvoiceHeaders SIH on Credit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
                //                                    left outer join
                //                                    (select distinct salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                //                                    from BureauSalesInvoiceDetails
                //                                    where salesInvoiceNo=(
                //                                    select distinct PrevioussalesInvoiceNo from BureauSalesInvoiceDetails
                //                                    where salesInvoiceNo=@SalesInvoiceNo)
                //                                    group by salesInvoiceNo
                //                                    ) New on Credit.PrevioussalesInvoiceNo=New.salesInvoiceNo left outer join
                //                                    (select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                //                                    from BureauSalesInvoiceDetails
                //                                     where salesInvoiceNo=@SalesInvoiceNo
                //                                    group by salesInvoiceNo
                //                                    )CreditSum on Credit.salesInvoiceNo=CreditSum.salesInvoiceNo left outer join products P on
                //                                    Credit.itemno=p.itemno
                //                                    where  Credit.salesInvoiceNo=@SalesInvoiceNo
                //                                    AND CreditH.TransactionType='Credit' 
                //                                   
                //AND (CreditH.Post =@post1 or CreditH.Post= @post2)
                //
                //                                    and Credit.Quantity>0
                //order by Credit.InvoiceLineNo asc
                //";
                #endregion

                SqlCommand objCommCreditNote = new SqlCommand();
                objCommCreditNote.Connection = currConn;
                objCommCreditNote.CommandText = sqlText;
                objCommCreditNote.CommandType = CommandType.Text;

                if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommCreditNote.Parameters.Contains("@post1"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommCreditNote.Parameters["@post1"].Value = post1;
                }
                if (!objCommCreditNote.Parameters.Contains("@post2"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommCreditNote.Parameters["@post2"].Value = post2;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauCreditNote", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauCreditNote", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT19Report(string PeriodName, string ExportInBDT, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='February-2015';
--SET @ExportInBDT='Y'
    
declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(CurrencyValue),0),-isnull(sum(CurrencyValue * SID.SD/100),0),
-isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNSCredit')

END
ELSE
	BEGIN
		

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.DollerValue),0),-isnull(sum(DollerValue * SID.SD/100),0),
-isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNSCredit')
	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM BureauSalesInvoiceDetails sid
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

 
-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)
 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'12','4','Total SaleVDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('SaleVDS')

------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','11','SaleVDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('SaleVDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  BureauSalesInvoiceDetails SID
where  SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')
--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19



";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion Bureau

        public DataSet RptDeliveryReport(string challanNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dsDelivery = new DataSet("DeliveryReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                             @" select SaleH.DeliveryChallanNo DCNo, convert (varchar(20),SaleH.DeliveryDate,103)+' '+convert (varchar(20),SaleH.DeliveryDate,108) DeliveryDateTime,
                                SaleH.CustomerID, SaleH.DeliveryAddress1,
                                SaleH.DeliveryAddress2, SaleH.DeliveryAddress3, c.CustomerName,
                                SaleD.salesInvoiceNo ChallanNo,convert (varchar(20),SaleH.InvoiceDateTime,103)+' '+convert (varchar(20),SaleH.InvoiceDateTime,108) ChallanDateTime,
                                SaleD.InvoiceLineNo, SaleD.ItemNo Code, p.productName, SaleD.quantity, SaleD.uom,
                                (CASE WHEN SaleH.TransactionType='Other' then 'Local Sales' Else SaleH.TransactionType END) Purpose ,
                                SaleH.comments Remarks

                                from SalesInvoiceDetails AS SaleD left outer join
                                SalesInvoiceHeaders SaleH on SaleD.salesInvoiceNo=SaleH.salesInvoiceNo left outer join
                                Customers C on SaleH.CustomerID=c.customerID left outer join
                                Products p on SaleD.ItemNo=P.ItemNo
                 
                                WHERE 
                                (SaleD.salesInvoiceNo = @ChallanNo OR @ChallanNo IS NULL) 
                                   
                           ";

                #endregion

                #region SQL Command

                SqlCommand objCommDeliveryReport = new SqlCommand();
                objCommDeliveryReport.Connection = currConn;

                objCommDeliveryReport.CommandText = sqlText;
                objCommDeliveryReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (challanNo == "")
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@ChallanNo"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@ChallanNo", System.DBNull.Value); }
                    else { objCommDeliveryReport.Parameters["@ChallanNo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@ChallanNo"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@ChallanNo", challanNo); }
                    else { objCommDeliveryReport.Parameters["@ChallanNo"].Value = challanNo; }
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDeliveryReport);
                dataAdapter.Fill(dsDelivery);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "RptDeliveryReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "RptDeliveryReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dsDelivery;
        }

        public DataSet RptVAT7Report(string vat7No, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dsVat7 = new DataSet("VAT7Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                             @" SELECT 
	   VAT7.VAT7No
	  ,convert (varchar,VAT7.Vat7Date,120)Vat7Date
	  ,VAT7.FinishItemNo
      ,isnull(fp.ProductCode,'N/A') FinishProductCode
      ,isnull(fp.ProductName,'N/A') FinishProductName
      ,isnull(VAT7.FinishUOM,'N/A') FinishUOM
      ,cast(isnull(VAT7.Vat7LineNo,0) as varchar)+'.' Vat7LineNo 
      ,isnull(VAT7.ItemNo,'N/A') ItemNo
	  ,isnull(Products.ProductCode,'N/A') ProductCode
      ,isnull(Products.ProductName,'N/A') ProductName
      ,isnull(VAT7.UOM,'N/A') UOM
      ,isnull(VAT7.Quantity,0) Quantity
      ,isnull(VAT7.UOMQty,0) UOMQty
      ,isnull(VAT7.UOMc,0) UOMc
      ,isnull(VAT7.UOMn,'N/A') UOMn
	  
 FROM VAT7
            left outer join Products on VAT7.ItemNo=Products.ItemNo LEFT OUTER JOIN
                            Products fp on VAT7.FinishItemNo=fp.ItemNo 
                 
                                WHERE 
                                (VAT7.VAT7No = @VAT7No OR @VAT7No IS NULL) 
                                   
                           ";

                #endregion

                #region SQL Command

                SqlCommand objCommDeliveryReport = new SqlCommand();
                objCommDeliveryReport.Connection = currConn;

                objCommDeliveryReport.CommandText = sqlText;
                objCommDeliveryReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (vat7No == "")
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@VAT7No"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@VAT7No", System.DBNull.Value); }
                    else { objCommDeliveryReport.Parameters["@VAT7No"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@VAT7No"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@VAT7No", vat7No); }
                    else { objCommDeliveryReport.Parameters["@VAT7No"].Value = vat7No; }
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDeliveryReport);
                dataAdapter.Fill(dsVat7);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "RptVAT7Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "RptVAT7Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dsVat7;
        }

        public DataSet TollRegister(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 
 

---- end purchase---
---- start Issue---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,

-SubTotal,
-case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end,'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive','TollReceive-WIP','TollReceiveRaw') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  
 UNION ALL (
	
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) 
-- UNION ALL 
--(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
---isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
--and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end),0) IssueQuantity,-isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL (
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TollRegister", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TollRegister", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet TollRegisterRaw(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

 
declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveReturn')
 

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
--select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
--@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
--id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
--from IssueDetails id 
--  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
--and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
--AND id.TransactionType IN('TollReceiveReturn') 
 

---- end purchase---
---- start Issue---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')
 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
 

 insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('OtherToll')
 


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,
SubTotal,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollIssue')  

--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.ReceiveDateTime,id.ReceiveDateTime,id.ReceiveNo,'Purchase',isnull(pih.benumber ,id.ReceiveNo)ReceiveNo,
@ItemNo, isnull(id.subtotal,0) ,isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'TollReceive',id.ReceiveDateTime
from ReceiveDetails id 
left outer join PurchaseInvoiceHeaders pih on id.receiveNo=pih.PurchaseInvoiceNo 

  where id.ReceiveDateTime >=@StartDate and id.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceive') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)

 

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo
, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('TollReceive') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive','TollReceive-WIP','TollReceiveRaw') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  

 UNION ALL (
		SELECT @itemNo ItemNo, -isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceiveReturn') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  

 
 
 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType  IN('TollReceiveReturn','XX') 
AND ItemNo = @itemNo  AND (UOMQty>0))  

UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType  IN('TollReceiveRaw','TollFinishReceive','TollReceive','OtherToll') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('TollIssue')  
     AND ItemNo = @itemNo  AND (UOMQty>0) )   
 
	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('XX')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.Quantity,#VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16
 
 
 
 

                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TollRegisterRaw", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TollRegisterRaw", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT16AttachToll(string ItemNo, string UserName, string StartDate, string EndDate, string post1,
                               string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='36';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-12-01';
	--SET @EndDate='2014-12-07';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase',pd.ReceiveNo,
@ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,pd.TransactionType,pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime >=@StartDate and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNS')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNSImport')


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)),
isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 

AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')

--Add for TollReceive
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

-- Add by ruba for internalsale,service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,
 
SubTotal,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),0,SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

----Transfer Raw1 to Raw2(Receive Raw2)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Purchase','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.ItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)


---- end purchase---
---- start Issue---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other')

-- Only for toll register
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
 
-SubTotal,
-case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end,'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading','TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  
 UNION ALL (
	
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) 
 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end),0) IssueQuantity,-isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL (
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16

                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16AttachToll", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16AttachToll", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet PurchaseReturnNew(string PurchaseInvoiceNo, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportDebitNote");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText =
                    @"----DECLARE @post1 VARCHAR(2);
----DECLARE @post2 VARCHAR(2);
----DECLARE @SalesInvoiceNo VARCHAR(20);

----SET @SalesInvoiceNo='PRN-0001/0114';
----SET @post1='Y';
----SET @post2='Y';


select Debit.POLineNo InvoiceLineNo ,Debit.PurchaseInvoiceNo salesInvoiceNo,convert (varchar,Debit.InvoiceDateTime,120)InvoiceDateTime,p.productName,
                                    (Debit.CostPrice*Debit.Quantity)SubCost,Debit.SDAmount,Debit.VATAmount
                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,DebitSum.SDAmount DSSDAmount,DebitSum.VATAmount DSVATAmount
                                    ,Debit.PurchaseReturnId PrevioussalesInvoiceNo,
									DebitH.VendorID CustomerID, ' ' VehicleID,
                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                                    ,Debit.quantity,Debit.uom

                                    ,c.Address1 DeliveryAddress1,c.Address2 DeliveryAddress2,c.Address3 DeliveryAddress3,
                                    c.VendorName CustomerName,c.VATRegistrationNo,'N/A' VehicleType, 'N/A' VehicleNo,DebitH.comments

                                    from PurchaseInvoiceDetails AS Debit left outer join
                                    PurchaseInvoiceHeaders DebitH on Debit.PurchaseInvoiceNo=DebitH.PurchaseInvoiceNo left outer join

                                     Vendors C on DebitH.VendorID=c.VendorID 
									 --left outer join
          --                           Vehicles V on DebitH.VehicleID=v.VehicleID 
                                    left outer join PurchaseInvoiceHeaders SIH on Debit.PurchaseReturnId=sih.PurchaseInvoiceNo
                                    left outer join
                                    (select distinct PurchaseInvoiceNo salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from PurchaseInvoiceDetails
                                    where PurchaseInvoiceNo=(select distinct PurchaseReturnId from PurchaseInvoiceDetails
                                    where  PurchaseInvoiceNo=@SalesInvoiceNo)
                                    group by PurchaseInvoiceNo
                                    ) New on Debit.PurchaseReturnId=New.salesInvoiceNo left outer join
                                    (select PurchaseInvoiceNo salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from PurchaseInvoiceDetails
                                    where PurchaseInvoiceNo=@SalesInvoiceNo
                                    group by PurchaseInvoiceNo
                                    )DebitSum on debit.PurchaseInvoiceNo=DebitSum.salesInvoiceNo left outer join products P on
                                    Debit.itemno=p.itemno
                                    where 
                                     DebitH.TransactionType='PurchaseReturn'
                                    and Debit.PurchaseInvoiceNo=@SalesInvoiceNo
                                    and Debit.Quantity>0
AND (debit.Post =@Post1 or debit.Post= @Post2)
                                    ";
                //AND debit.post='Y'
                SqlCommand objCommDebitNote = new SqlCommand();
                objCommDebitNote.Connection = currConn;
                objCommDebitNote.CommandText = sqlText;
                objCommDebitNote.CommandType = CommandType.Text;

                if (!objCommDebitNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@SalesInvoiceNo", PurchaseInvoiceNo);
                }
                else
                {
                    objCommDebitNote.Parameters["@SalesInvoiceNo"].Value = PurchaseInvoiceNo;
                }

                if (!objCommDebitNote.Parameters.Contains("@post1"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommDebitNote.Parameters["@post1"].Value = post1;
                }

                if (!objCommDebitNote.Parameters.Contains("@post2"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommDebitNote.Parameters["@post2"].Value = post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDebitNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseReturnNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseReturnNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet Current_AC_VAT18(string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report Current_AC_VAT18");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                //Show only Vat value for type='VAT' and never show type='Tarrif' amount.
                sqlText = @"
                           

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2014-06-01'
--SET @EndDate='2015-07-30'
--SET @post1='Y';
--SET @post2='N';


 declare @cnt int;
declare @UnitCount int;
declare @PVat [decimal](18, 2);

CREATE TABLE #VAT_18_Management(	[Sl] [decimal](25, 9) NULL,	[PeriodName] [varchar](200) NULL,
[PeriodStart] [datetime] NULL,	[PeriodEnd] [datetime] NULL,	[Opening] [decimal](25, 9) NULL,
[Purchase_Import] [decimal](25, 9) NULL,[Purchase_Local] [decimal](25, 9) NULL,	
[Deposit] [decimal](25, 9) NULL,	[DDB] [decimal](25, 9) NULL,	[Sale] [decimal](25, 9) NULL ,
[Credit] [decimal](25, 9) NULL)

                            insert into #VAT_18_Management(Sl,PeriodName,PeriodStart,PeriodEnd,Opening,Purchase_Import,Purchase_Local,Deposit,DDB,Sale,Credit)
                            select ROW_NUMBER() OVER(ORDER by PeriodStart),PeriodName,PeriodStart,PeriodEnd,0,0,0,0,0,0,0 from fiscalyear
                            where PeriodStart >=@StartDate
                            and PeriodEnd <=@EndDate
                            order by PeriodStart

							set @cnt=1
                            set @UnitCount=(select max (sl) from #VAT_18_Management)
                            while @cnt<=@UnitCount
                            begin
							
                            select @PVat= isnull(sum(DepositAmount),0)    
                             from  Deposits WHERE DepositDateTime < =	(select  DATEADD(d,1,   PeriodStart) from #VAT_18_Management where sl=@cnt ) 
							AND Deposits.TransactionType  IN('Treasury-Opening')
							 AND (Post =@post1 or Post= @post2)
                            select @PVat= @PVat+isnull(sum(DepositAmount),0)    
                             from  Deposits WHERE DepositDateTime < 	(select PeriodStart from #VAT_18_Management where sl=@cnt )
							 AND Deposits.TransactionType  IN('Treasury')
							 AND (Post =@post1 or Post= @post2)
							select @PVat= @PVat-isnull(sum(DepositAmount) ,0)  
                            from  Deposits where DepositDateTime < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							AND Deposits.TransactionType  IN('Treasury-Opening-Credit','Treasury-Credit')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(VATAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							AND Type in('Local-VAT')
							AND TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS','TollReceive-WIP','PurchaseCN')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(VATAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Import-VAT')
							AND TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(RebateAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Local-VAT','Import-VAT')
							AND TransactionType IN('InputService','InputServiceImport')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(VATAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Local-VAT')
							AND TransactionType IN('PurchaseReturn','PurchaseDN')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(ATVAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Import-VAT')
							AND TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(VATAmount),0)    
                            from  SalesInvoiceDetails where invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS','Wastage')
   							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(CurrencyValue*VATRate/100),0)   
                            from  SalesInvoiceDetails where invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(VATAmount),0)   
                            from  SalesInvoiceDetails where invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('Credit')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0)),0) 
                            from  DisposeHeaders where DisposeDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('VAT26','VAT27')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys where AdjDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND AdjType IN('Credit Payable','Shortage Rebatable')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys where AdjDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND AdjType IN('Rebatable')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+ isnull(sum(TotalDDBack),0)
                            from  DutyDrawBackHeader where DDBackDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                          AND (Post =@post1 or Post= @post2)

						   update #VAT_18_Management set Opening=@PVat where Sl=@cnt

                            update  #VAT_18_Management set 
                            Deposit =
                            (select   isnull(sum(DepositAmount),0)
                            from  Deposits    where DepositDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt) 
                            and DepositDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and TransactionType IN('Treasury') AND (Post =@post1 or Post= @post2)
							) where sl=@cnt
							update  #VAT_18_Management set 
                            Deposit = Deposit-
                            (select   isnull(sum(DepositAmount),0)
                            from  Deposits    where DepositDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt) 
                            and DepositDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and TransactionType IN('Treasury-Credit') AND (Post =@post1 or Post= @post2)
							) where sl=@cnt


							update  #VAT_18_Management set Purchase_Import =
                            ( select  isnull(sum(VATAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Import-VAT')
							AND TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 
							
							update  #VAT_18_Management set Purchase_Import = Purchase_Import+
                            ( select  isnull(sum(RebateAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('InputServiceImport')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 

							update  #VAT_18_Management set Purchase_Import = Purchase_Import+
                            ( select  isnull(sum(ATVAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Import-VAT')
							AND TransactionType IN('InputServiceImport','Import','TradingImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 
							
							update  #VAT_18_Management set Purchase_Local =
                            ( select  isnull(sum(VATAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Local-VAT')
							AND TransactionType IN('Other','Service','PurchaseCN','Trading','TollReceive','TollReceive-WIP')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 

							update  #VAT_18_Management set Purchase_Local= Purchase_Local +
                            ( select  isnull(sum(RebateAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('InputService')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 

							update  #VAT_18_Management set Purchase_Local = Purchase_Local +
                            ( select  isnull(sum(VATAmount),0)
                            from  SalesInvoiceDetails
                            where invoicedatetime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and invoicedatetime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('Credit')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 


							update  #VAT_18_Management set DDB = 
                            ( select  isnull(sum(TotalDDBack),0)
                            from  DutyDrawBackHeader
                            where DDBackDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and DDBackDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							
							update  #VAT_18_Management set DDB = DDB +
                            ( select  isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys
                            where AdjDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and AdjDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND AdjType='Rebatable'
							AND (Post =@post1 or Post= @post2)) where sl=@cnt  

							update  #VAT_18_Management set DDB = DDB -
                            ( select  isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys
                            where AdjDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and AdjDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND AdjType='Shortage Rebatable'
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 



                            update  #VAT_18_Management set Sale =
                            (select isnull(sum(VATAmount),0)
                            from  SalesInvoiceDetails 
                            where InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('Other','Wastage','Service','ServiceNS','Trading','TradingTender',
							'Tender','InternalIssue','Debit','TollFinishIssue','ServiceStock','PackageSale','PackageProduction')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							 

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(sum(CurrencyValue*VATRate/100),0)
                            from  SalesInvoiceDetails 
                            where InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt

							
							Declare @countVAT26 int
							Set @countVAT26 =
							(select Count(isnull(AppVATAmount,0)) from DisposeHeaders 
									where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
									and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
									AND TransactionType IN('VAT26')
									AND (Post =@post1 or Post= @post2))

							if(@countVAT26>0)
							begin

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0)
                            from  DisposeHeaders 
                            where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('VAT26')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							end

							Declare @countVAT27 int
							Set @countVAT27 =
							(select Count(isnull(AppVATAmount,0)) from DisposeHeaders 
									where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
									and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
									AND TransactionType IN('VAT27')
									AND (Post =@post1 or Post= @post2))								
											
										if(@countVAT27>0)
							begin

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0)
                            from  DisposeHeaders 
                            where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('VAT27')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							end

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(sum(VATAmount),0)
                            from  PurchaseInvoiceDetails 
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Local-VAT')
							AND TransactionType IN('PurchaseReturn')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt

							update  #VAT_18_Management set Credit =   
                            (select isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys 
                            where AdjDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and AdjDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND AdjType='Credit Payable'
							AND (Post =@post1 or Post= @post2)) where sl=@cnt

							set @cnt=@cnt+1
                            End

                            select PeriodName,Opening,Purchase_Import,Purchase_Local,Deposit,DDB,Sale,Credit from #VAT_18_Management 
                            DROP TABLE #VAT_18_Management
							
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommVAT18.Parameters.Contains("@Post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@Post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@Post1"].Value = post1;
                }
                if (!objCommVAT18.Parameters.Contains("@Post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@Post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@Post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "Current_AC_VAT18", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "Current_AC_VAT18", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SerialStockStatus(string ItemNo, string CategoryID, string ProductType, string StartDate, string ToDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Serial Stock Status Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT  
                         t.ItemNo,
                isnull(t.Heading1,'N/A') Heading1,
                isnull(t.Heading2,'N/A') Heading2,
                isnull(t.IsPurchase,'N/A') IsPurchase,
                isnull(t.IsReceive,'N/A') IsReceive,
                isnull(t.Quantity,0) Quantity,
                isnull(t.UnitPrice,0) Value,
                --CASE WHEN isnull(t.UnitPrice,0)= 0 THEN isnull(pid.UOMPrice,0) ELSE ISNULL(t.UnitPrice,0) END Value,
                isnull(p.ProductCode,'N/A') ProductCode,
                isnull(p.ProductName,'N/A') ProductName,
                isnull(pc.CategoryName,'N/A') CategoryName

                from Trackings t 
                --Left Outer JOIN PurchaseInvoiceDetails pid on pid.PurchaseInvoiceNo=t.PurchaseInvoiceNo
                --Left Outer JOIN Products p on p.ItemNo=t.ItemNo
                --Left Outer JOIN ProductCategories pc on pc.CategoryID=p.CategoryID
                --where  (t.Post =@post1 or t.Post= @post2)
                --AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null)
               
				";
                #region ProductType

                if (ProductType == "Finish")
                {
                    sqlText += @" Left Outer JOIN Products p on p.ItemNo=t.FinishItemNo 
                                  Left Outer JOIN ProductCategories pc on pc.CategoryID=p.CategoryID
                                  where  (t.Post =@post1 or t.Post= @post2)
                                  AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null) ";

                    if (ItemNo != "")
                    {
                        sqlText += " and t.FinishItemNo='" + ItemNo + "'";

                    }
                    sqlText += "AND  t.IsReceive='Y' AND t.IsSale='N'";

                }
                else
                {
                    sqlText += @" Left Outer JOIN Products p on p.ItemNo=t.ItemNo 
                                  Left Outer JOIN ProductCategories pc on pc.CategoryID=p.CategoryID
                                  where  (t.Post =@post1 or t.Post= @post2)
                                  AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null) ";

                    if (ItemNo != "")
                    {
                        sqlText += " and t.ItemNo='" + ItemNo + "'";

                    }
                    if (!string.IsNullOrEmpty(ProductType))
                    {
                        sqlText += " and pc.IsRaw='" + ProductType + "'";
                    }
                    sqlText += " AND t.IsReceive='N'";
                }

                #endregion

                //if (CategoryID != "")
                //{
                //    sqlText += " and p.CategoryID='" + CategoryID + "'";
                //}
                if (!string.IsNullOrEmpty(StartDate) && !string.IsNullOrEmpty(ToDate))
                {
                    sqlText += " AND (t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                    sqlText += " AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null AND t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                }
                //if (ProductType != "")
                //{
                //    if (ProductType=="Finish")
                //    {
                //        sqlText += "AND  t.IsReceive='Y' AND t.IsSale='N'";
                //    }
                //    else
                //    {
                //        sqlText += " and pc.IsRaw='" + ProductType + "'";
                //        sqlText += " AND t.IsReceive='N'";

                //    }

                //}
                //if (string.IsNullOrEmpty(StartDate) && string.IsNullOrEmpty(ToDate))
                //{
                //    //sqlText += "AND t.IsReceive='N' OR t.ReturnReceive='Y'";
                //}
                //else
                //{
                //    //sqlText += "AND t.IsReceive='N'";
                //    //sqlText += "OR t.ReceiveDate not between @StartDate and DATEADD(d,1, @ToDate)";
                //    //sqlText += " AND (t.IsReceive='N'AND t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                //    sqlText += " AND (t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                //sqlText += " AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null AND t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                ////sqlText += " OR (t.ReturnReceive ='Y' AND t.ReturnReceiveDate between @StartDate and DATEADD(d,1, @ToDate) )";
                //}

                sqlText += " order by pc.CategoryName";


                #endregion

                #region SQL Command

                SqlCommand objCommSerial = new SqlCommand();
                objCommSerial.Connection = currConn;

                objCommSerial.CommandText = sqlText;
                objCommSerial.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommSerial.Parameters.Contains("@StartDate"))
                {
                    objCommSerial.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSerial.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSerial.Parameters.Contains("@ToDate"))
                {
                    objCommSerial.Parameters.AddWithValue("@ToDate", ToDate);
                }
                else
                {
                    objCommSerial.Parameters["@ToDate"].Value = ToDate;
                }
                if (!objCommSerial.Parameters.Contains("@Post1"))
                {
                    objCommSerial.Parameters.AddWithValue("@Post1", post1);
                }
                else
                {
                    objCommSerial.Parameters["@Post1"].Value = post1;
                }
                if (!objCommSerial.Parameters.Contains("@Post2"))
                {
                    objCommSerial.Parameters.AddWithValue("@Post2", post2);
                }
                else
                {
                    objCommSerial.Parameters["@Post2"].Value = post2;
                }

                #endregion Parameter


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSerial);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SerialStockStatus", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SerialStockStatus", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet PurchaseWithLCInfo(string PurchaseInvoiceNo, string LCDateFrom, string LCDateTo,
                                 string VendorId, string ItemNo, string VendorGroupId, string LCNo, string Post
                               , SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string purchaseInvoiceNo = PurchaseInvoiceNo;
            string lcDateFrom = LCDateFrom;
            string lcDateTo = LCDateTo;
            string vendorId = VendorId;
            string itemNo = ItemNo;
            string post = Post;


            string lcNo = LCNo;

            DataSet dataSet = new DataSet("Purchase LC Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = " ";
                sqlText =
                    @"
                            SELECT    
PIH.PurchaseInvoiceNo PurchaseInvoiceNo,
 PIH.InvoiceDateTime InvoiceDateTime,
PIH.VendorID VendorID, 
isnull(V.VendorName,'N/A')VendorName,
PID.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
p.ProductCode,
isnull(UOMn,'NA')UOMn,
isnull(UOMQty,0)UOMQty,
isnull(UOMPrice,0)UOMPrice,
convert (varchar,PIH.LCDate,120)  LCDate,
--Case when PIH.LCNumber='-' or PIH.LCNumber='' then '' ELSE convert (varchar,PIH.LCDate,120) END AS LCDate,

PIH.LCNumber LCNo, 
PIH.LandedCost LandedCost, 

  
 PIH.ReceiveDate ReceiveDate,                         
isnull(PID.UOM,'N/A')UOM,
isnull(PID.Quantity,0)Quantity,
isnull(PID.CostPrice,0)CostPrice,
isnull(PID.SD,0)SD,
isnull(PID.SDAmount,0)SDAmount,
isnull(PID.VATRate,0)VATRate,
PID.CnFAmount
,PID.InsuranceAmount
,PID.CDAmount
,PID.RDAmount
,PID.TVBAmount
,PID.TVAAmount
,PID.ATVAmount
,PID.OthersAmount,
CASE 
WHEN PID.TransactionType='InputService' or PID.TransactionType='InputServiceImport' THEN isnull(PID.RebateAmount,0)
ELSE isnull(PID.VATAmount,0) END AS VATAmount, 

CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal 
  	
					
FROM         PurchaseInvoiceHeaders AS PIH LEFT OUTER JOIN
PurchaseInvoiceDetails AS PID ON PIH.PurchaseInvoiceNo = PID.PurchaseInvoiceNo LEFT OUTER JOIN
Products AS P ON PID.ItemNo = P.ItemNo LEFT OUTER JOIN
Vendors AS V ON PIH.VendorID = V.VendorID  LEFT OUTER JOIN
vendorGroups vg ON v.VendorGroupID=vg.VendorGroupID 
WHERE PID.Quantity>0
AND PIH.LCNumber not in('-','')
";

                #endregion

                #region Parameter

                if (purchaseInvoiceNo != "")
                {
                    sqlText += " and PIH.PurchaseInvoiceNo=@purchaseInvoiceNo ";
                }
                else if (vendorId != "")
                {
                    sqlText += " and v.VendorID=@vendorId ";
                }
                else if (VendorGroupId != "")
                {
                    sqlText += " and vg.VendorGroupID=@VendorGroupId ";
                }
                else if (lcNo != "")
                {
                    sqlText += " and PIH.LCNumber=@lcNo ";
                }

                if (lcDateFrom != "")
                {
                    sqlText += " and PIH.LCDate >=@lcDateFrom ";
                }
                if (lcDateTo != "")
                {
                    sqlText += " and PIH.LCDate <dateadd(d,1,@lcDateTo) ";
                }
                if (post != "")
                {
                    sqlText += " and pid.Post=@post ";
                }
                sqlText += " ORDER BY PIH.PurchaseInvoiceNo ";

                #endregion Parameter

                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;

                #endregion
                objCommPurchaseReport.Parameters.AddWithValue("@purchaseInvoiceNo", purchaseInvoiceNo);
                objCommPurchaseReport.Parameters.AddWithValue("@vendorId", vendorId);
                objCommPurchaseReport.Parameters.AddWithValue("@VendorGroupId", VendorGroupId);
                objCommPurchaseReport.Parameters.AddWithValue("@lcNo", lcNo);
                objCommPurchaseReport.Parameters.AddWithValue("@lcDateFrom", lcDateFrom);
                objCommPurchaseReport.Parameters.AddWithValue("@lcDateTo", lcDateTo);
                objCommPurchaseReport.Parameters.AddWithValue("@post", post);


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseWithLCInfo", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "PurchaseWithLCInfo", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Reports 10

        public DataSet VAT18_Sanofi(string UserName, string StartDate, string EndDate, string post1, string post2, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement
                // Delete all tarrife type info.
                sqlText = @"

                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2015-03-01'
--SET @EndDate='2015-03-25'
--SET @post1='Y';
--SET @post2='N';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
--where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS','Wastage')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')


UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

UNION ALL

select 'Z17' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

UNION ALL

select 'Z18' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury-Credit')


----close
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,-isnull(DepositAmount,0),'TreasuryCredit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Sale',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Other','Wastage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo


insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Service',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Trading',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TradingTender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TradingTender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'Export',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportService',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportService')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
 AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTrading',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTrading')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTradingTender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTradingTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Tender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Tender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Transfer',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('InternalIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Debit',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo = SIH.SalesInvoiceNo
AND sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Debit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TollFinishIssue',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TollFinishIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceStock',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
ANd sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceStock')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageSale',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageProduction',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageProduction')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ExportPackage',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportPackage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SID.SalesInvoiceNo 
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'DDB',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where Remarks in ('CreditPayble','ShortageRebatable','TreasuryCredit') AND (vat < 0)

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18

                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18_Sanofi", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18_Sanofi", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet TDSReport(SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("TDSReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
Select 
Code
,Description
,MinValue
,MaxValue
,Rate
,Comments 
FROM TDSs

";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TDSReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TDSReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet LocalPurchaseReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("LocalPurchaseReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
--declare @DFrom as date
--declare @DTo as date
--set @DFrom='07/01/2019'
--set @DTo='07/31/2019'
select 
h.PurchaseInvoiceNo,d.ReceiveDate EntryDate,p.ProductName NameofItem
,p.HSCodeNo HSCode
,h.BENumber VAT6_3,h.InvoiceDateTime Date,v.VendorName NameofSupplier
,v.Address1 Address,v.VATRegistrationNo eBin,d.Quantity,d.UOM,d.SubTotal VatableValue,d.VATRate,d.VATAmount VAT,(d.SubTotal+d.VATAmount) TotalValue

 from PurchaseInvoiceDetails d
left outer join PurchaseInvoiceHeaders h on d.PurchaseInvoiceNo=h.PurchaseInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Vendors v on h.VendorID=v.VendorID
where 1=1
and d.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
and d.post='Y' --and d.Type in('VAT')
and d.ReceiveDate>=  @StartDate and d.ReceiveDate<= @EndDate
and h.BranchId=@BranchId

";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "LocalPurchaseReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SaleSummaryAllShiftReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("DsScblSaleSummary");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
create table #rtp(id int identity(1,1)
,ItemNo varchar(100)
,ProductGroup varchar(100)
,ProductName varchar(100)
,ProductCode varchar(100)
,ShiftA decimal(18,6)
,ShiftB decimal(18,6)
,ShiftC decimal(18,6))

insert into #rtp(ProductGroup,ItemNo,ProductName,ProductCode,ShiftA,ShiftB,ShiftC)
select distinct 'Bulk',p.ItemNo, p.ProductName,p.ProductCode,0,0,0 from SalesInvoiceDetails d
left outer join Products p on d.ItemNo=p.ItemNo
where 1=1
and d.TransactionType in('Other','Export')
and p.ProductName like '%bulk%'
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate  

insert into #rtp(ProductGroup,ItemNo,ProductName,ProductCode,ShiftA,ShiftB,ShiftC)
select distinct  'NotBulk',p.ItemNo, p.ProductName,p.ProductCode,0,0,0 from SalesInvoiceDetails d
left outer join Products p on d.ItemNo=p.ItemNo
where 1=1
and d.TransactionType in('Other','Export')
and p.ProductName not like '%bulk%'
and p.ProductName not like '%WIP%'
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate

update #rtp set ShiftA=S.quantity
from (
select distinct   p.ItemNo, SUM(quantity)quantity    from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Shifts s on h.ShiftId=s.Id
where 1=1
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and s.ShiftName='Shift-A'
and d.TransactionType in('Other','Export')
group by p.ItemNo) S
where #rtp.ItemNo=S.ItemNo

update #rtp set ShiftB=S.quantity
from (
select distinct   p.ItemNo, SUM(quantity)quantity    from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Shifts s on h.ShiftId=s.Id
where 1=1
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and s.ShiftName='Shift-B'
and d.TransactionType in('Other','Export')
group by p.ItemNo) S
where #rtp.ItemNo=S.ItemNo

update #rtp set ShiftC=S.quantity
from (
select distinct   p.ItemNo, SUM(quantity)quantity    from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Shifts s on h.ShiftId=s.Id
where 1=1
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and s.ShiftName='Shift-C'
and d.TransactionType in('Other','Export')
group by p.ItemNo) S
where #rtp.ItemNo=S.ItemNo

select ProductGroup,ProductName,ProductCode,ShiftA,ShiftB,ShiftC from  #rtp
order by ProductGroup desc,ProductName asc
drop table #rtp

";
                //if (BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                //if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                //{
                //    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                //}
                //else
                //{
                //    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                //}
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleSummaryAllShiftReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet ImportDataReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("ImportDataReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'
select 
h.PurchaseInvoiceNo,d.ReceiveDate EntryDate,p.ProductName NameofItem ,p.HSCodeNo HSCode,h.BENumber BillofEntryNo
,h.InvoiceDateTime Date,v.VendorName NameofSupplier,v.Address1 Address,d.Quantity,d.UOM,d.AssessableValue AssesementValue
,d.CDAmount CD,d.RDAmount RD,d.SDAmount SD,d.VATAmount VAT,0 AIT,d.ATVAmount AT,OthersAmount Other

 from PurchaseInvoiceDetails d
left outer join PurchaseInvoiceHeaders h on d.PurchaseInvoiceNo=h.PurchaseInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Vendors v on h.VendorID=v.VendorID
where  1=1
and d.TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport' ,'CommercialImporter' )
and d.ReceiveDate>=  @StartDate and d.ReceiveDate<=  @EndDate
and h.BranchId=@BranchId

";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ImportDataReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet ReceiedVsSaleReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null, string Toll = "N")
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReceiedVsSaleReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                if (Toll == "N")
                {
                    sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'
select * from(
select p.ProductName,c.CustomerName
,c.Address1 Address,c.VATRegistrationNo eBin,d.SalesInvoiceNo,d.InvoiceDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.NBRPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference
 from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Customers c on h.CustomerID=c.CustomerID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service'
,'Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
and d.post='Y' --and d.Type in('VAT')
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and h.BranchId=@BranchId
union all
select p.ProductName,bp.BranchName
,bp.Address,bp.BIN eBin,d.TransferReceiveNo,d.TransactionDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.CostPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference from TransferReceiveDetails d
left outer join Products p on d.ItemNo=p.ItemNo
left outer join BranchProfiles bp on d.TransferFrom=bp.BranchID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('62In')
--and d.post='Y' --and d.Type in('VAT')
and d.TransactionDateTime>=  @StartDate and d.TransactionDateTime<= @EndDate
and d.BranchId=@BranchId
) as a
";
                }
                else
                {
                    sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'
select * from(
select p.ProductName,c.CustomerName
,c.Address1 Address,c.VATRegistrationNo eBin,d.SalesInvoiceNo,d.InvoiceDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.NBRPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference
 from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Customers c on h.CustomerID=c.CustomerID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('TollSale')
and d.post='Y' --and d.Type in('VAT')
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and h.BranchId=@BranchId
union all
select p.ProductName,bp.BranchName
,bp.Address,bp.BIN eBin,d.PurchaseInvoiceNo,d.InvoiceDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.CostPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference from PurchaseInvoiceDetails d
left outer join Products p on d.ItemNo=p.ItemNo
left outer join BranchProfiles bp on d.BranchId=bp.BranchID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('62In')
--and d.post='Y' --and d.Type in('VAT')
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and d.BranchId=@BranchId
) as a
";
                }

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ReceiedVsSaleReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SalesStatementForServiceReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null, string Toll = "N")
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("SalesStatementForServiceReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                if (Toll == "N")
                {
                    sqlText = @" 
--declare @DFrom as date
--declare @DTo as date
--set @DFrom='07/01/2019'
--set @DTo='07/31/2019'
select p.ProductName,c.CustomerName
,c.Address1 Address,c.VATRegistrationNo eBin,d.SalesInvoiceNo,d.InvoiceDateTime,d.Quantity,d.UOM
,d.NBRPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference
 from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo 
left outer join Customers c on h.CustomerID=c.CustomerID

where 1=1
and d.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service'
,'Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
and d.post='Y'
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<=@EndDate
and p.IsTransport='Y'
and h.BranchId=@BranchId


";
                }
                else
                {

                    sqlText = @" 
--declare @DFrom as date
--declare @DTo as date
--set @DFrom='07/01/2019'
--set @DTo='07/31/2019'
select p.ProductName,c.CustomerName
,c.Address1 Address,c.VATRegistrationNo eBin,d.SalesInvoiceNo,d.InvoiceDateTime,d.Quantity,d.UOM
,d.NBRPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference
 from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo 
left outer join Customers c on h.CustomerID=c.CustomerID

where 1=1
and d.TransactionType in('TollSale')
and d.post='Y'
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<=@EndDate
and p.IsTransport='Y'
and h.BranchId=@BranchId


";
                }

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SalesStatementForServiceReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SalesStatementDeliveryReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null, string Toll = "N")
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("SalesStatementDeliveryReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                if (Toll == "N")
                {
                    sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'
select * from(
select p.ProductName,c.CustomerName,pc.CategoryName,pc.CategoryID
,c.Address1 Address,c.VATRegistrationNo eBin,d.SalesInvoiceNo,d.InvoiceDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.SubTotal VATableValue,d.VATAmount VAT,(d.SubTotal+d.VATAmount) TotalValue
, h.SerialNo Reference
 from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
left outer join Customers c on h.CustomerID=c.CustomerID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service'
,'Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
and d.post='Y' --and d.Type in('VAT')
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and h.BranchId=@BranchId
union all
select p.ProductName,bp.BranchName,pc.CategoryName,pc.CategoryID
,bp.Address,bp.BIN eBin,d.TransferIssueNo,d.TransactionDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.CostPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference from TransferIssueDetails d
left outer join Products p on d.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
left outer join BranchProfiles bp on d.TransferTo=bp.BranchID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('62out')
--and d.post='Y' --and d.Type in('VAT')
and d.TransactionDateTime>=  @StartDate and d.TransactionDateTime<= @EndDate
and d.BranchId=@BranchId
) as a
order by a.InvoiceDateTime
";
                }
                else
                {

                    sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'
select * from(
select p.ProductName,c.CustomerName,pc.CategoryName,pc.CategoryID
,c.Address1 Address,c.VATRegistrationNo eBin,d.SalesInvoiceNo,d.InvoiceDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.SubTotal VATableValue,d.VATAmount VAT,(d.SubTotal+d.VATAmount) TotalValue
, h.SerialNo Reference
 from SalesInvoiceDetails d
left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
left outer join Customers c on h.CustomerID=c.CustomerID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('TollSale')
and d.post='Y' --and d.Type in('VAT')
and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime<= @EndDate
and h.BranchId=@BranchId
union all
select p.ProductName,bp.BranchName,pc.CategoryName,pc.CategoryID
,bp.Address,bp.BIN eBin,d.TransferIssueNo,d.TransactionDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.CostPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference from TransferIssueDetails d
left outer join Products p on d.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID
left outer join BranchProfiles bp on d.TransferTo=bp.BranchID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('62out')
--and d.post='Y' --and d.Type in('VAT')
and d.TransactionDateTime>=  @StartDate and d.TransactionDateTime<= @EndDate
and d.BranchId=@BranchId
) as a
order by a.InvoiceDateTime
";
                }

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SalesStatementDeliveryReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        //        public DataSet StockReportFGReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //        {

        //            #region Variables

        //            SqlConnection currConn = null;
        //            string sqlText = "";

        //            DataSet dataSet = new DataSet("StockReportFGReport");

        //            #endregion

        //            try
        //            {
        //                #region open connection and transaction

        //                currConn = _dbsqlConnection.GetConnection(connVM);
        //                if (currConn.State != ConnectionState.Open)
        //                {
        //                    currConn.Open();
        //                }

        //                #endregion open connection and transaction

        //                #region sql statement

        //                sqlText = " ";
        //                sqlText = @" 
        //--declare @StartDate as date
        //--declare @EndDate as date
        //--set @StartDate='07/01/2019'
        //--set @EndDate='07/31/2019'
        //declare @OpeningQty as decimal(18,2)
        //declare @OpenAmnt as decimal(18,2)
        //create table #TempProduct(Id  int identity(1,1),ItemNo varchar(100),ProductName varchar(100)
        //,OpeningQty Decimal(18,2),OpenAmnt Decimal(18,2)
        //,RecQty Decimal(18,2),RecAmnt Decimal(18,2)
        //,RecDepoQty Decimal(18,2),RecDepoAmnt Decimal(18,2)
        //,TotalQty Decimal(18,2),TotalAmnt Decimal(18,2)
        //,TransToDepoQty Decimal(18,2),TransToDepoAmnt Decimal(18,2)
        //,SaleQty Decimal(18,2),SaleAmnt Decimal(18,2)
        //,SaleExpQty Decimal(18,2),SaleExpAmnt Decimal(18,2)
        //,CloseQty Decimal(18,2),CloseAmnt Decimal(18,2))
        //
        //insert into #TempProduct(ItemNo,ProductName,OpeningQty,OpenAmnt,RecQty,RecAmnt,RecDepoQty,RecDepoAmnt,TransToDepoQty,TransToDepoAmnt,SaleQty,SaleAmnt,SaleExpQty,SaleExpAmnt,TotalQty,TotalAmnt,CloseQty,CloseAmnt) 
        //select ItemNo,ProductName,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //from Products
        //left outer join ProductCategories on Products.CategoryID=ProductCategories.CategoryID
        //where 1=1 
        //and Products.BranchId=@BranchId
        //and ProductCategories.IsRaw in ('Finish')
        //update #TempProduct set OpeningQty=p.Quantity,OpenAmnt=p.CostPrice
        //from(
        //select distinct d.ItemNo,sum(d.Quantity)Quantity,sum(d.CostPrice)CostPrice from (
        //
        //select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from ReceiveDetails d
        //where 1=1 and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.ReceiveDateTime>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo
        //union all
        //select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from TransferReceiveDetails d
        //where 1=1 --and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.TransactionDateTime>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo
        //union all
        //
        //select distinct d.ItemNo,-1*sum(d.UOMQty)Quantity,-1*sum(d.CostPrice)CostPrice
        // from TransferIssueDetails d
        //where 1=1 --and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.TransactionDateTime>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo
        //union all
        //
        //select distinct d.ItemNo,-1*sum(d.UOMQty)Quantity,-1*sum(d.NBRPrice)CostPrice
        // from SalesInvoiceDetails d
        //where 1=1 and d.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //and d.post='Y'  
        //and d.InvoiceDateTime>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo
        //
        //union all
        //
        //select distinct d.ItemNo,-1*sum(d.UOMQty)Quantity,-1*sum(d.NBRPrice)CostPrice
        // from SalesInvoiceDetails d
        //where 1=1 and d.TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //and d.post='Y'  
        //and d.InvoiceDateTime>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo
        //) as d
        //group by d.ItemNo
        //) as p
        //
        //update #TempProduct set RecQty=p.Quantity,RecAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from ReceiveDetails d
        //where 1=1 and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.ReceiveDateTime>=  @StartDate and d.ReceiveDateTime< DATEADD(d,1,  @EndDate)
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //update #TempProduct set RecDepoQty=p.Quantity,RecDepoAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from TransferReceiveDetails d
        //where 1=1 --and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.TransactionDateTime>=  @StartDate and d.TransactionDateTime< DATEADD(d,1,  @EndDate)
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //
        //update #TempProduct set TransToDepoQty=p.Quantity,TransToDepoAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from TransferIssueDetails d
        //where 1=1 --and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.TransactionDateTime>=  @StartDate and d.TransactionDateTime< DATEADD(d,1,  @EndDate)
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //update #TempProduct set SaleQty=p.Quantity,SaleAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.NBRPrice)CostPrice
        // from SalesInvoiceDetails d
        //where 1=1 and d.TransactionType in('Other','RawSale','PackageSale','Wastage','CommercialImporter','ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
        //and d.post='Y'  
        //and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime< DATEADD(d,1,  @EndDate)
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //
        //update #TempProduct set SaleExpQty=p.Quantity,SaleExpAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.NBRPrice)CostPrice
        // from SalesInvoiceDetails d
        //where 1=1 and d.TransactionType in('Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
        //and d.post='Y'  
        //and d.InvoiceDateTime>=  @StartDate and d.InvoiceDateTime< DATEADD(d,1,  @EndDate)
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        // 
        //
        //update #TempProduct set TotalQty=isnull(OpeningQty,0)+isnull(RecQty,0)+isnull(RecDepoQty,0)
        //						,TotalAmnt=isnull(OpenAmnt,0)+isnull(RecAmnt,0)+isnull(RecDepoAmnt,0)
        //
        //
        //						
        //update #TempProduct set TotalQty=isnull(OpeningQty,0)+isnull(RecQty,0)+isnull(RecDepoQty,0)+isnull(TransToDepoQty,0)+isnull(SaleQty,0)
        //						,TotalAmnt=isnull(OpenAmnt,0)+isnull(RecAmnt,0)+isnull(RecDepoAmnt,0)+isnull(TransToDepoAmnt,0)+isnull(SaleAmnt,0)
        // 
        //update #TempProduct set CloseQty=isnull(TotalQty,0)-isnull(SaleQty,0)-isnull(TransToDepoQty,0)-isnull(SaleExpQty,0)
        //						,CloseAmnt=isnull(TotalAmnt,0)-isnull(SaleQty,0)-isnull(TransToDepoQty,0)-isnull(SaleExpAmnt,0)
        //
        //
        //select * from #TempProduct
        //
        //drop table #TempProduct
        //
        //";
        //                if (BranchId == 0)
        //                {
        //                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //                }
        //                SqlCommand objCommSaleReport = new SqlCommand();
        //                objCommSaleReport.Connection = currConn;
        //                objCommSaleReport.CommandText = sqlText;
        //                objCommSaleReport.CommandType = CommandType.Text;
        //                #region parameter
        //                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
        //                {
        //                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
        //                }
        //                else
        //                {
        //                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
        //                }

        //                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
        //                {
        //                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
        //                }
        //                else
        //                {
        //                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
        //                }
        //                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
        //                {
        //                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
        //                }
        //                else
        //                {
        //                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
        //                }
        //                #endregion

        //                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
        //                dataAdapter.Fill(dataSet);

        //                #endregion
        //            }
        //            #region catch


        //            catch (Exception ex)
        //            {
        //                throw ex;
        //            }

        //            #endregion
        //            #region finally

        //            finally
        //            {

        //                if (currConn.State == ConnectionState.Open)
        //                {
        //                    currConn.Close();
        //                }

        //            }

        //            #endregion

        //            return dataSet;
        //        }

        public DataSet StockReportFGReport(string tranDate, string tranDateTo, int BranchId = 0, SysDBInfoVMTemp connVM = null, string FiscalYear = null, string UserId = "")
        {
            #region Initializ

            string sqlText = "";
            DataSet retResults = new DataSet();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            SqlConnection VcurrConn = null;
            SqlTransaction Vtransaction = null;
            string FieldDelimeter = DBConstant.FieldDelimeter;

            #endregion

            #region Try

            try
            {
                tranDateTo = Convert.ToDateTime(tranDateTo).AddDays(-1).ToString("dd-MMM-yyyy HH:mm:ss");
                #region Validation
                //if (string.IsNullOrEmpty(itemNo))
                //{
                //    throw new ArgumentNullException("IssuePrice", "There is No data to find Issue Price");
                //}
                //else 
                if (Convert.ToDateTime(tranDate) < DateTime.MinValue || Convert.ToDateTime(tranDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException("IssuePrice", "There is No data to find Issue Price");

                }
                #endregion Validation

                #region open connection and transaction
                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Variables

                DataSet AvgPriceVAT16 = new DataSet();
                DataSet AvgPriceVAT17 = new DataSet();
                DataSet transferStock = new DataSet();
                DataSet transferIssue = new DataSet();
                DataSet transferReceive = new DataSet();

                ProductDAL productDal = new ProductDAL();
                ReportDSDAL _reportDal = new ReportDSDAL();
                TransferIssueDAL _treportDal = new TransferIssueDAL();
                VATRegistersDAL _vatRegistersDAL = new VATRegistersDAL();
                #endregion



                CommonDAL _CDal = new CommonDAL();

                _CDal.ExecuteQuery("delete from ProductStockMISs", currConn, transaction);
                //Loop Start from FiscalYear

                DataTable dt = new DataTable();

                AvgPriceVAT16 = new DataSet();
                AvgPriceVAT17 = new DataSet();
                transferIssue = new DataSet();
                transferReceive = new DataSet();

                //tranDate = "2014-04-01"; 
                //tranDateTo = "2024-04-27";

                #region Parmeter Assign (VAT 6.1)

                VAT6_1ParamVM varVAT6_1ParamVM = new VAT6_1ParamVM();

                varVAT6_1ParamVM.ItemNo = "";
                varVAT6_1ParamVM.UserName = "";
                varVAT6_1ParamVM.StartDate = tranDate;
                varVAT6_1ParamVM.EndDate = tranDateTo;
                varVAT6_1ParamVM.Post1 = "Y";
                varVAT6_1ParamVM.Post2 = "Y";
                varVAT6_1ParamVM.ReportName = "";
                varVAT6_1ParamVM.BranchId = BranchId;
                varVAT6_1ParamVM.Opening = false;
                varVAT6_1ParamVM.OpeningFromProduct = true;
                varVAT6_1ParamVM.ProdutType = "Finish";
                varVAT6_1ParamVM.ProdutCategoryId = "";
                varVAT6_1ParamVM.Flag = "";
                varVAT6_1ParamVM.VAT6_2_1 = false;
                varVAT6_1ParamVM.StockMovement = true;
                varVAT6_1ParamVM.UserId = UserId;

                #endregion

                #region Comments

                ////AvgPriceVAT16 = _reportDal.VAT6_1_WithConn_Backup(itemNo, "", tranDate, tranDateTo, Post1, Post2, "", BranchId,
                ////   currConn, transaction, false, null, true, ProdutType, ProdutCategoryId, false, true);

                #endregion



                AvgPriceVAT16 = _vatRegistersDAL.VAT6_1_WithConn(varVAT6_1ParamVM, currConn, transaction, null);

                string[] DeleteColumnName = { "SerialNo", "InvoiceDateTime", "StartingQuantity", "StartingAmount", "VendorName", "Address1", "Address2"
                                                , "Address3",  "VATRegistrationNo", "ProductName", "ProductCodeA","UOM",  "VATRate", "SD", "HSCodeNo", "BENumber", "CreateDateTime" ,"AvgRate","RunningTotal","RunningValue","RunningOpeningQuantity", "RunningOpeningValue"};


                dt = OrdinaryVATDesktop.DtDeleteColumns(AvgPriceVAT16.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "StartDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "VAT6_1", "string");
                //dt = OrdinaryVATDesktop.DtColumnAdd(dt, "PeriodName", "PeriodNameValue", "string");
                string[] tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                #region Parmeter Assign (6.2)

                VAT6_2ParamVM varVAT6_2ParamVM = new VAT6_2ParamVM();

                varVAT6_2ParamVM.ItemNo = "";
                varVAT6_2ParamVM.StartDate = tranDate;
                varVAT6_2ParamVM.EndDate = tranDateTo;
                varVAT6_2ParamVM.Post1 = "Y";
                varVAT6_2ParamVM.Post2 = "Y";
                varVAT6_2ParamVM.BranchId = BranchId;
                varVAT6_2ParamVM.Opening = false;
                varVAT6_2ParamVM.Opening6_2 = false;
                varVAT6_2ParamVM.Flag = "SCBL_Finish";
                varVAT6_2ParamVM.ProdutType = "Finish";
                varVAT6_2ParamVM.ProdutCategoryId = "";
                varVAT6_2ParamVM.UserId = UserId;


                #endregion

                AvgPriceVAT17 = _vatRegistersDAL.VAT6_2(varVAT6_2ParamVM, currConn, transaction, null);

                DeleteColumnName = new string[] { "SerialNo",   "StartingQuantity", "StartingAmount", "CustomerName", "Address1", "Address2"
                                                , "Address3",  "VATRegistrationNo", "ProductName", "ProductCode","UOM", "VATRate", "SD", "HSCodeNo", "BENumber", "CreatedDateTime","UnitRate","AdjustmentValue","ClosingRate", "RunningTotal", "DeclaredPrice", "RunningTotalValue", "RunningTotalValueFinal", "RunningOpeningValueFinal", "RunningOpeningQuantityFinal" };
                dt = new DataTable();
                dt = OrdinaryVATDesktop.DtDeleteColumns(AvgPriceVAT17.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "StartDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "remarks", "Remarks");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "VAT6_2", "string");
                tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                transferIssue = new ProductDAL().TransferIssue("", tranDate, tranDateTo, "Y", "Y", BranchId, false, currConn,
                    transaction, null, "", "");

                DeleteColumnName = new string[] { "SL" };
                dt = new DataTable();
                dt = OrdinaryVATDesktop.DtDeleteColumns(transferIssue.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "Amount", "UnitCost");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionType", "TransType");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "transferIssue", "string");
                tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                transferReceive = new ProductDAL().TransferReceive("", tranDate, tranDateTo, "Y", "Y", BranchId, false, currConn, transaction, null, "", "");
                DeleteColumnName = new string[] { "SL" };
                dt = new DataTable();
                dt = OrdinaryVATDesktop.DtDeleteColumns(transferReceive.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "Amount", "UnitCost");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionType", "TransType");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "TransferReceive", "string");
                tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                string deleteSQL = @"delete from ProductStockMISs where TransType='Receive' and Remarks='RawSale'";
                SqlCommand cmdDelete = new SqlCommand(deleteSQL, currConn, transaction);
                cmdDelete.ExecuteNonQuery();


                string update = @"update ProductStockMISs set TransactionDate='1900/01/01' where TransType='Opening'
                update ProductStockMISs set UnitCost=0 where Quantity<=0 and TransType='Opening' and Remarks='Opening'
                update ProductStockMISs set Quantity=0 where UnitCost<=0 and TransType='Opening' and Remarks='Opening'
";
                SqlCommand cmd = new SqlCommand(update, currConn, transaction);
                cmd.ExecuteNonQuery();

                //Loop end

                cmd.CommandText = @"
select distinct m.ItemNo,p.ProductName,
sum(case when TransType in('Opening') then m.Quantity else 0 end )OpeningQty
,sum(case when TransType in('Opening') then m.UnitCost else 0 end )OpenAmnt

,sum(case when TransType in('Receive') and Remarks in('Other') then m.Quantity else 0 end )RecQty
,sum(case when TransType in('Receive') and Remarks in('Other') then m.UnitCost else 0 end )RecAmnt
,0 RecDepoQty ,0 RecDepoAmnt 
,sum(case when TransType in('62Out') and Remarks in('62Out') then m.Quantity else 0 end )TransToDepoQty
,sum(case when TransType in('62Out') and Remarks in('62Out') then m.UnitCost else 0 end )TransToDepoAmnt
--,0 TransToDepoQty ,0 TransToDepoAmnt 

,sum(case when TransType in('Sale') and Remarks in('Debit','Other','Export')   then m.Quantity
when TransType in('Sale') and Remarks in('credit')   then -1*m.Quantity
else 0 end )SaleQty
,sum(case when TransType in('Sale') and Remarks in('Debit','Other','Export')   then m.UnitCost
when TransType in('Sale') and Remarks in('credit')   then -1*m.UnitCost
else 0 end )SaleAmnt

from ProductStockMISs m
left outer join PurchaseInvoiceDetails d on m.TransID=d.PurchaseInvoiceNo  and d.ItemNo=m.ItemNo
left outer join Products p on m.ItemNo= p.ItemNo
group by m.ItemNo,p.ProductName
order by p.ProductName

";


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(retResults);



            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ReportDSDAL", "StockReportFGReport", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReportDSDAL", "StockReportFGReport", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }
        public DataSet MonthlyProduction_DeliveryReport(string ItemNo, int BranchId = 0, SysDBInfoVMTemp connVM = null, string FiscalYear = null, string UserId = "")
        {
            #region Initializ

            string sqlText = "";
            string PriodName = null;
            string PeriodStart = null;
            string PeriodEnd = null;
            DataSet retResults = new DataSet();
            DataTable dtresult = new DataTable();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            SqlConnection VcurrConn = null;
            SqlTransaction Vtransaction = null;
            string FieldDelimeter = DBConstant.FieldDelimeter;


            #endregion

            #region Try

            try
            {

                #region Validation
                //if (string.IsNullOrEmpty(itemNo))
                //{
                //    throw new ArgumentNullException("IssuePrice", "There is No data to find Issue Price");
                //}
                //else 
                //if (Convert.ToDateTime(tranDate) < DateTime.MinValue || Convert.ToDateTime(tranDate) > DateTime.MaxValue)
                //{
                //    throw new ArgumentNullException("IssuePrice", "There is No data to find Issue Price");

                //}
                #endregion Validation

                #region open connection and transaction
                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Variables

                DataSet AvgPriceVAT16 = new DataSet();
                DataSet AvgPriceVAT17 = new DataSet();
                DataSet transferStock = new DataSet();
                DataSet transferIssue = new DataSet();
                DataSet transferReceive = new DataSet();

                ProductDAL productDal = new ProductDAL();
                ReportDSDAL _reportDal = new ReportDSDAL();
                FiscalYearDAL _FiscalYearDal = new FiscalYearDAL();
                TransferIssueDAL _treportDal = new TransferIssueDAL();
                #endregion

                dtresult = _FiscalYearDal.LoadYear(FiscalYear);

                CommonDAL _CDal = new CommonDAL();

                _CDal.ExecuteQuery("delete from ProductStockMISs", currConn, transaction);
                if (dtresult != null && dtresult.Rows.Count > 0)
                {
                    for (int i = 0; i < dtresult.Rows.Count; i++)
                    {
                        PriodName = dtresult.Rows[i]["PeriodName"].ToString();
                        PeriodStart = dtresult.Rows[i]["PeriodStart"].ToString();
                        PeriodEnd = dtresult.Rows[i]["PeriodEnd"].ToString();
                        PeriodEnd = Convert.ToDateTime(PeriodEnd).AddDays(-1).ToString("dd-MMM-yyyy HH:mm:ss");
                        DataTable dt = new DataTable();

                        AvgPriceVAT16 = new DataSet();
                        AvgPriceVAT17 = new DataSet();
                        transferIssue = new DataSet();
                        transferReceive = new DataSet();

                        //tranDate = "2014-04-01"; 
                        //tranDateTo = "2024-04-27";

                        #region Parmeter Assign (VAT 6.1)

                        VAT6_1ParamVM varVAT6_1ParamVM = new VAT6_1ParamVM();

                        varVAT6_1ParamVM.ItemNo = ItemNo;
                        varVAT6_1ParamVM.UserName = "";
                        varVAT6_1ParamVM.StartDate = PeriodStart;
                        varVAT6_1ParamVM.EndDate = PeriodEnd;
                        varVAT6_1ParamVM.Post1 = "Y";
                        varVAT6_1ParamVM.Post2 = "Y";
                        varVAT6_1ParamVM.ReportName = "";
                        varVAT6_1ParamVM.BranchId = BranchId;
                        varVAT6_1ParamVM.Opening = false;
                        varVAT6_1ParamVM.OpeningFromProduct = true;
                        varVAT6_1ParamVM.ProdutType = "Finish";
                        varVAT6_1ParamVM.ProdutCategoryId = "";
                        varVAT6_1ParamVM.Flag = "";
                        varVAT6_1ParamVM.VAT6_2_1 = false;
                        varVAT6_1ParamVM.StockMovement = true;
                        varVAT6_1ParamVM.UserId = UserId;

                        #endregion

                        #region Comments

                        ////AvgPriceVAT16 = _reportDal.VAT6_1_WithConn_Backup(itemNo, "", tranDate, tranDateTo, Post1, Post2, "", BranchId,
                        ////   currConn, transaction, false, null, true, ProdutType, ProdutCategoryId, false, true);

                        #endregion



                        AvgPriceVAT16 = _vatRegistersDAL.VAT6_1_WithConn(varVAT6_1ParamVM, currConn, transaction, null);

                        string[] DeleteColumnName = { "SerialNo", "InvoiceDateTime", "StartingQuantity", "StartingAmount", "VendorName", "Address1", "Address2"
                                                , "Address3",  "VATRegistrationNo", "ProductName","UOM","ProductCodeA", "VATRate", "SD", "HSCodeNo", "BENumber", "CreateDateTime","AvgRate","RunningTotal","RunningValue","RunningOpeningQuantity", "RunningOpeningValue" };

                        dt = OrdinaryVATDesktop.DtDeleteColumns(AvgPriceVAT16.Tables[0], DeleteColumnName);
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "StartDateTime", "TransactionDate");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "VAT6_1", "string");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "PeriodName", PriodName, "string");
                        string[] tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                        #region Parmeter Assign (6.2)

                        VAT6_2ParamVM varVAT6_2ParamVM = new VAT6_2ParamVM();

                        varVAT6_2ParamVM.ItemNo = ItemNo;
                        varVAT6_2ParamVM.StartDate = PeriodStart;
                        varVAT6_2ParamVM.EndDate = PeriodEnd;
                        varVAT6_2ParamVM.Post1 = "Y";
                        varVAT6_2ParamVM.Post2 = "Y";
                        varVAT6_2ParamVM.BranchId = BranchId;
                        varVAT6_2ParamVM.Opening = false;
                        varVAT6_2ParamVM.Opening6_2 = false;
                        varVAT6_2ParamVM.Flag = "";
                        varVAT6_2ParamVM.ProdutType = "Finish";
                        varVAT6_2ParamVM.ProdutCategoryId = "";
                        varVAT6_2ParamVM.UserId = UserId;


                        #endregion

                        AvgPriceVAT17 = _vatRegistersDAL.VAT6_2(varVAT6_2ParamVM, currConn, transaction, null);

                        DeleteColumnName = new string[] { "SerialNo",   "StartingQuantity", "StartingAmount", "CustomerName", "Address1", "Address2"
                                                , "Address3",  "VATRegistrationNo", "ProductName","ProductCode","UOM", "VATRate", "SD", "HSCodeNo", "BENumber", "CreatedDateTime","UnitRate","AdjustmentValue","ClosingRate", "RunningTotal", "DeclaredPrice", "RunningTotalValue", "RunningTotalValueFinal", "RunningOpeningValueFinal", "RunningOpeningQuantityFinal" };
                        dt = new DataTable();
                        dt = OrdinaryVATDesktop.DtDeleteColumns(AvgPriceVAT17.Tables[0], DeleteColumnName);
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "StartDateTime", "TransactionDate");
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "remarks", "Remarks");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "VAT6_2", "string");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "PeriodName", PriodName, "string");

                        tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                        transferIssue = new ProductDAL().TransferIssue(ItemNo, PeriodStart, PeriodEnd, "", "", BranchId, false, currConn,
                            transaction, null, "Finish", "");

                        DeleteColumnName = new string[] { "SL" };
                        dt = new DataTable();
                        dt = OrdinaryVATDesktop.DtDeleteColumns(transferIssue.Tables[0], DeleteColumnName);
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionDateTime", "TransactionDate");
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "Amount", "UnitCost");
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionType", "TransType");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "transferIssue", "string");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "PeriodName", PriodName, "string");

                        tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                        transferReceive = new ProductDAL().TransferReceive(ItemNo, PeriodStart, PeriodEnd, "", "", BranchId, false, currConn, transaction, null, "Finish", "");
                        DeleteColumnName = new string[] { "SL" };
                        dt = new DataTable();
                        dt = OrdinaryVATDesktop.DtDeleteColumns(transferReceive.Tables[0], DeleteColumnName);
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionDateTime", "TransactionDate");
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "Amount", "UnitCost");
                        dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionType", "TransType");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "TransferReceive", "string");
                        dt = OrdinaryVATDesktop.DtColumnAdd(dt, "PeriodName", PriodName, "string");

                        tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);



                        string deleteSQL = @"delete from ProductStockMISs where TransType='Receive' and Remarks='RawSale'";
                        SqlCommand cmdDelete = new SqlCommand(deleteSQL, currConn, transaction);
                        cmdDelete.ExecuteNonQuery();


                        string update = @"update ProductStockMISs set TransactionDate='1900/01/01' where TransType='Opening'";
                        SqlCommand cmd = new SqlCommand(update, currConn, transaction);
                        cmd.ExecuteNonQuery();

                    }
                }
                //Loop Start from FiscalYear




                //Loop end
                string Select = @"
select distinct m.PeriodName,F.PeriodID,
sum(case when TransType in('Opening') then m.Quantity else 0 end )OpeningQty
,sum(case when TransType in('Opening') then m.UnitCost else 0 end )OpenAmnt

,sum(case when TransType in('Receive') and Remarks in('Other') then m.Quantity else 0 end )RecQty
,sum(case when TransType in('Receive') and Remarks in('Other') then m.UnitCost else 0 end )RecAmnt
,0 RecDepoQty ,0 RecDepoAmnt 
,0 TransToDepoQty ,0 TransToDepoAmnt 

,sum(case when TransType in('Sale') and Remarks in('Debit','Other')   then m.Quantity
when TransType in('Sale') and Remarks in('credit')   then -1*m.Quantity
else 0 end )SaleQty
,sum(case when TransType in('Sale') and Remarks in('Debit','Other')   then m.UnitCost
when TransType in('Sale') and Remarks in('credit')   then -1*m.UnitCost
else 0 end )SaleAmnt

from ProductStockMISs m
left outer join PurchaseInvoiceDetails d on m.TransID=d.PurchaseInvoiceNo
left outer join Products p on m.ItemNo= p.ItemNo
left outer join FiscalYear F on m.PeriodName= F.PeriodName
group by m.PeriodName,F.PeriodID
order by F.PeriodID desc

";

                SqlCommand cm = new SqlCommand(Select, currConn, transaction);

                SqlDataAdapter adapter = new SqlDataAdapter(cm);
                adapter.Fill(retResults);



            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ReportDSDAL", "MonthlyProduction_DeliveryReport", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReportDSDAL", "MonthlyProduction_DeliveryReport", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public DataSet InputValue7_5percent(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("InputValue7_5percent");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'

Select 
CONVERT(varchar,PHD.InvoiceDateTime,103) as InvoiceDateTime
,CONVERT(varchar,PHD.ReceiveDate,103) as ReceiveDate
,PHD.BENumber
,PHD.ItemNo
,PHD.UOM
,P.ProductName
,P.ProductCode
,V.VendorName
,PHD.Quantity
,PHD.SubTotal
,CASE WHEN PHD.UOM='MT' THEN (PHD.SubTotal/PHD.Quantity)/1000 ELSE PHD.UOMPrice END UOMPrice
,br.UnitCost DeclaredPrice 
--,100.0*(PHD.UOMPrice -br.UOMPrice) / br.UOMPrice As PercentDiff
,100.0*(br.UnitCost -(CASE WHEN PHD.UOM='MT' THEN (PHD.SubTotal/PHD.Quantity)/1000 ELSE PHD.UOMPrice END)) / br.UnitCost As Difference
--,SubTotal*(100.0*(PHD.UOMPrice -br.UOMPrice) / br.UOMPrice)/100  As RebateAmountt
,SubTotal*(100.0*(br.UnitCost -(CASE WHEN PHD.UOM='MT' THEN (PHD.SubTotal/PHD.Quantity)/1000 ELSE PHD.UOMPrice END)) / br.UnitCost )/100  As DifferenceInRebateAmount
from PurchaseInvoiceDetails PHD
left outer join PurchaseInvoiceHeaders PH on  PHD.PurchaseInvoiceNo=PH.PurchaseInvoiceNo
left outer join BOMRaws br on  PHD.ItemNo=br.RawItemNo and PHD.BOMId=br.BOMId
left outer join Vendors V on  PH.VendorID=V.VendorID
left outer join Products P on  PHD.ItemNo=P.ItemNo
where PHD.ReceiveDate>=@StartDate and  PHD.ReceiveDate<=@EndDate
and PHD.TransactionType not in('ClientFGReceiveWOBOM')
and PHD.BranchId=1
and P.CategoryID in (Select CategoryID from ProductCategories where IsRaw  in('Raw','Pack'))
";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }

                sqlText += @" Order by PHD.ReceiveDate ";
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "InputValue7_5percent", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        //        public DataSet StockReportRMReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        //        {

        //            #region Variables

        //            SqlConnection currConn = null;
        //            string sqlText = "";

        //            DataSet dataSet = new DataSet("StockReportRMReport");

        //            #endregion

        //            try
        //            {
        //                #region open connection and transaction

        //                currConn = _dbsqlConnection.GetConnection(connVM);
        //                if (currConn.State != ConnectionState.Open)
        //                {
        //                    currConn.Open();
        //                }

        //                #endregion open connection and transaction

        //                #region sql statement

        //                sqlText = " ";
        //                sqlText = @" 
        //--declare @StartDate as date
        //--declare @EndDate as date
        //--set @StartDate='07/01/2019'
        //--set @EndDate='07/31/2019'
        //declare @OpeningQty as decimal(18,2)
        //declare @OpenAmnt as decimal(18,2)
        //create table #TempProduct(Id  int identity(1,1),ItemNo varchar(100),ProductName varchar(100)
        //,OpeningQty Decimal(18,2),OpenAmnt Decimal(18,2)
        //,LPRQty Decimal(18,2),LPRAmnt Decimal(18,2)
        //,LPURQty Decimal(18,2),LPURAmnt Decimal(18,2)
        //,ImpQty Decimal(18,2),ImpAmnt Decimal(18,2)
        //,LTQty Decimal(18,2),LTAmnt Decimal(18,2),TotalQty Decimal(18,2),TotalAmnt Decimal(18,2),ConsQty Decimal(18,2),ConsAmnt Decimal(18,2),LRQty Decimal(18,2),LRAmnt Decimal(18,2),CloseQty Decimal(18,2),CloseAmnt Decimal(18,2))
        //
        //insert into #TempProduct(ItemNo,ProductName,OpeningQty,OpenAmnt,LPRQty,LPRAmnt,LPURQty,LPURAmnt,ImpQty,ImpAmnt,LTQty,LTAmnt,TotalQty,TotalAmnt,ConsQty,ConsAmnt,LRQty,LRAmnt,CloseQty,CloseAmnt) 
        //select ItemNo,ProductName,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //from Products
        //left outer join ProductCategories on Products.CategoryID=ProductCategories.CategoryID
        //where 1=1 
        //and Products.BranchId=@BranchId
        //and ProductCategories.IsRaw in ('Raw')
        //update #TempProduct set OpeningQty=p.Quantity,OpenAmnt=p.CostPrice
        //from(
        //select distinct d.ItemNo,sum(d.Quantity)Quantity,sum(d.CostPrice)CostPrice from (
        //select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from PurchaseInvoiceDetails d
        //where 1=1 and d.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //and d.post='Y'  and Type not in('UnRegister')
        //and d.ReceiveDate>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo
        //union all
        //select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from PurchaseInvoiceDetails d
        //where 1=1 and d.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //and d.post='Y'  and Type in('UnRegister')
        //and d.ReceiveDate>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo
        //union all
        //select distinct d.ItemNo,-1*sum(d.UOMQty)Quantity,-1*sum(d.CostPrice)CostPrice
        // from IssueDetails d
        //where 1=1 and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.IssueDateTime>=  @StartDate
        //and d.BranchId=@BranchId
        //group by d.ItemNo) as d
        //group by d.ItemNo
        //) as p
        //update #TempProduct set LPRQty=p.Quantity,LPRAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from PurchaseInvoiceDetails d
        //where 1=1 and d.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //and d.post='Y'  and Type not in('UnRegister')
        //and d.ReceiveDate>=  @StartDate and d.ReceiveDate< DATEADD(d,1,  @EndDate)
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //update #TempProduct set LPURQty=p.Quantity,LPURAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from PurchaseInvoiceDetails d
        //where 1=1 and d.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
        //and d.post='Y'  and Type in('UnRegister')
        //and d.ReceiveDate>=  @StartDate and d.ReceiveDate< DATEADD(d,1,  @EndDate)
        //
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //update #TempProduct set ImpQty=p.Quantity,ImpAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from PurchaseInvoiceDetails d
        //where 1=1
        //and TransactionType in('Import','ServiceImport','ServiceNSImport','TradingImport','InputServiceImport','CommercialImporter'  )
        //and d.post='Y'   
        //and d.ReceiveDate>=  @StartDate and d.ReceiveDate< DATEADD(d,1,  @EndDate)
        //
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //update #TempProduct set TotalQty=isnull(OpeningQty,0)+isnull(LPRQty,0)+isnull(LPURQty,0)+isnull(ImpQty,0)+isnull(LTQty,0)
        //						,TotalAmnt=isnull(OpenAmnt,0)+isnull(LPRAmnt,0)+isnull(LPURAmnt,0)+isnull(ImpAmnt,0)+isnull(LTAmnt,0)
        //
        //
        //update #TempProduct set ConsQty=p.Quantity,ConsAmnt=p.CostPrice
        //from(select distinct d.ItemNo,sum(d.UOMQty)Quantity,sum(d.CostPrice)CostPrice
        // from IssueDetails d
        //where 1=1 and d.TransactionType in('Other')
        //and d.post='Y'  
        //and d.IssueDateTime>=  @StartDate and d.IssueDateTime< DATEADD(d,1,  @EndDate)
        //
        //group by d.ItemNo) p where p.itemNo=#TempProduct.itemNo
        //
        //
        //update #TempProduct set CloseQty=isnull(TotalQty,0)-isnull(ConsQty,0)-isnull(LRQty,0)
        //						,CloseAmnt=isnull(TotalAmnt,0)-isnull(ConsAmnt,0)-isnull(LRAmnt,0)
        //
        //
        //select * from #TempProduct
        //  
        //drop table #TempProduct
        //
        //";
        //                if (BranchId == 0)
        //                {
        //                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
        //                }
        //                SqlCommand objCommSaleReport = new SqlCommand();
        //                objCommSaleReport.Connection = currConn;
        //                objCommSaleReport.CommandText = sqlText;
        //                objCommSaleReport.CommandType = CommandType.Text;
        //                #region parameter
        //                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
        //                {
        //                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
        //                }
        //                else
        //                {
        //                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
        //                }

        //                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
        //                {
        //                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
        //                }
        //                else
        //                {
        //                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
        //                }
        //                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
        //                {
        //                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
        //                }
        //                else
        //                {
        //                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
        //                }
        //                #endregion

        //                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
        //                dataAdapter.Fill(dataSet);

        //                #endregion
        //            }
        //            #region catch


        //            catch (Exception ex)
        //            {
        //                throw ex;
        //            }

        //            #endregion
        //            #region finally

        //            finally
        //            {

        //                if (currConn.State == ConnectionState.Open)
        //                {
        //                    currConn.Close();
        //                }

        //            }

        //            #endregion

        //            return dataSet;
        //        }

        public DataSet StockReportRMReportXXX(string tranDate, string tranDateTo, int BranchId = 0, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            #region Initializ

            string sqlText = "";
            DataSet retResults = new DataSet();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            SqlConnection VcurrConn = null;
            SqlTransaction Vtransaction = null;
            string FieldDelimeter = DBConstant.FieldDelimeter;

            #endregion

            #region Try

            try
            {
                tranDateTo = Convert.ToDateTime(tranDateTo).AddDays(-1).ToString("dd-MMM-yyyy HH:mm:ss");

                #region Validation
                //if (string.IsNullOrEmpty(itemNo))
                //{
                //    throw new ArgumentNullException("IssuePrice", "There is No data to find Issue Price");
                //}
                //else 
                if (Convert.ToDateTime(tranDate) < DateTime.MinValue || Convert.ToDateTime(tranDate) > DateTime.MaxValue)
                {
                    throw new ArgumentNullException("IssuePrice", "There is No data to find Issue Price");

                }
                #endregion Validation

                #region open connection and transaction
                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Variables

                DataSet AvgPriceVAT16 = new DataSet();
                DataSet AvgPriceVAT17 = new DataSet();
                DataSet transferStock = new DataSet();
                DataSet transferIssue = new DataSet();
                DataSet transferReceive = new DataSet();

                ProductDAL productDal = new ProductDAL();
                ReportDSDAL _reportDal = new ReportDSDAL();
                TransferIssueDAL _treportDal = new TransferIssueDAL();
                #endregion



                CommonDAL _CDal = new CommonDAL();

                _CDal.ExecuteQuery("delete from ProductStockMISs", currConn, transaction);

                DataTable dt = new DataTable();

                AvgPriceVAT16 = new DataSet();
                AvgPriceVAT17 = new DataSet();
                transferIssue = new DataSet();
                transferReceive = new DataSet();

                //tranDate = "2014-04-01"; 
                //tranDateTo = "2024-04-27";

                #region Parmeter Assign (VAT 6.1)

                VAT6_1ParamVM varVAT6_1ParamVM = new VAT6_1ParamVM();

                varVAT6_1ParamVM.ItemNo = "";
                varVAT6_1ParamVM.UserName = "";
                varVAT6_1ParamVM.StartDate = tranDate;
                varVAT6_1ParamVM.EndDate = tranDateTo;
                varVAT6_1ParamVM.Post1 = "Y";
                varVAT6_1ParamVM.Post2 = "Y";
                varVAT6_1ParamVM.ReportName = "";
                varVAT6_1ParamVM.BranchId = BranchId;
                varVAT6_1ParamVM.Opening = false;
                varVAT6_1ParamVM.OpeningFromProduct = true;
                varVAT6_1ParamVM.ProdutType = "Raw";
                varVAT6_1ParamVM.ProdutCategoryId = "";
                varVAT6_1ParamVM.Flag = "SCBL";
                varVAT6_1ParamVM.VAT6_2_1 = false;
                varVAT6_1ParamVM.StockMovement = true;
                varVAT6_1ParamVM.UserId = UserId;

                #endregion

                #region Comments

                ////AvgPriceVAT16 = _reportDal.VAT6_1_WithConn_Backup(itemNo, "", tranDate, tranDateTo, Post1, Post2, "", BranchId,
                ////   currConn, transaction, false, null, true, ProdutType, ProdutCategoryId, false, true);

                #endregion


                #region Debugging

                ////varVAT6_1ParamVM.ProdutType = "";
                ////varVAT6_1ParamVM.ItemNo = "55";

                #endregion

                AvgPriceVAT16 = _vatRegistersDAL.VAT6_1_WithConn(varVAT6_1ParamVM, currConn, transaction, null);

                string[] DeleteColumnName = { "SerialNo", "InvoiceDateTime", "StartingQuantity", "StartingAmount", "VendorName", "Address1", "Address2"
                                                , "Address3",  "VATRegistrationNo", "ProductName", "ProductCodeA","UOM",  "VATRate", "SD", "HSCodeNo", "BENumber", "CreateDateTime" ,"AvgRate","RunningTotal","RunningValue","RunningOpeningQuantity", "RunningOpeningValue"};

                dt = OrdinaryVATDesktop.DtDeleteColumns(AvgPriceVAT16.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "StartDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "VAT6_1", "string");
                string[] tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                #region Parmeter Assign (6.2)

                VAT6_2ParamVM varVAT6_2ParamVM = new VAT6_2ParamVM();

                varVAT6_2ParamVM.ItemNo = "";
                varVAT6_2ParamVM.StartDate = tranDate;
                varVAT6_2ParamVM.EndDate = tranDateTo;
                varVAT6_2ParamVM.Post1 = "Y";
                varVAT6_2ParamVM.Post2 = "Y";
                varVAT6_2ParamVM.BranchId = BranchId;
                varVAT6_2ParamVM.Opening = false;
                varVAT6_2ParamVM.Opening6_2 = false;
                varVAT6_2ParamVM.Flag = "SCBL";
                varVAT6_2ParamVM.ProdutType = "Raw";
                varVAT6_2ParamVM.ProdutCategoryId = "";
                varVAT6_2ParamVM.UserId = UserId;


                #endregion

                #region Debugging

                ////varVAT6_2ParamVM.ProdutType = "";
                ////varVAT6_2ParamVM.ItemNo = "55";

                #endregion

                AvgPriceVAT17 = _vatRegistersDAL.VAT6_2(varVAT6_2ParamVM, currConn, transaction, null);

                DeleteColumnName = new string[] { "SerialNo",   "StartingQuantity", "StartingAmount", "CustomerName", "Address1", "Address2"
                                                , "Address3",  "VATRegistrationNo", "ProductName","ProductCode","UOM", "VATRate", "SD", "HSCodeNo", "BENumber", "CreatedDateTime","UnitRate","AdjustmentValue","ClosingRate", "RunningTotal", "DeclaredPrice", "RunningTotalValue", "RunningTotalValueFinal", "RunningOpeningValueFinal", "RunningOpeningQuantityFinal" };
                dt = new DataTable();
                dt = OrdinaryVATDesktop.DtDeleteColumns(AvgPriceVAT17.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "StartDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "remarks", "Remarks");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "VAT6_2", "string");
                tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                transferIssue = new ProductDAL().TransferIssue("", tranDate, tranDateTo, "", "", BranchId, false, currConn,
                    transaction, null, "", "");

                DeleteColumnName = new string[] { "SL" };
                dt = new DataTable();
                dt = OrdinaryVATDesktop.DtDeleteColumns(transferIssue.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "Amount", "UnitCost");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionType", "TransType");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "transferIssue", "string");
                tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                transferReceive = new ProductDAL().TransferReceive("", tranDate, tranDateTo, "", "", BranchId, false, currConn, transaction, null, "", "");
                DeleteColumnName = new string[] { "SL" };
                dt = new DataTable();
                dt = OrdinaryVATDesktop.DtDeleteColumns(transferReceive.Tables[0], DeleteColumnName);
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionDateTime", "TransactionDate");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "Amount", "UnitCost");
                dt = OrdinaryVATDesktop.DtColumnNameChange(dt, "TransactionType", "TransType");
                dt = OrdinaryVATDesktop.DtColumnAdd(dt, "StockType", "TransferReceive", "string");
                tt = _CDal.BulkInsert("ProductStockMISs", dt, currConn, transaction);


                string deleteSQL = @"delete from ProductStockMISs where TransType='Receive' and Remarks='RawSale'";
                SqlCommand cmdDelete = new SqlCommand(deleteSQL, currConn, transaction);
                cmdDelete.ExecuteNonQuery();


                string update = @"update ProductStockMISs set TransactionDate='1900/01/01' where TransType='Opening'
                ----------update ProductStockMISs set UnitCost=0 where Quantity<=0 and TransType='Opening' and Remarks='Opening'
                ----------update ProductStockMISs set Quantity=0 where UnitCost<=0 and TransType='Opening' and Remarks='Opening'";
                SqlCommand cmd = new SqlCommand(update, currConn, transaction);
                cmd.ExecuteNonQuery();

                cmd.CommandText = @"
select distinct m.ItemNo,p.ProductName,
sum(case when TransType in('Opening') then m.Quantity else 0 end )OpeningQty
,sum(case when TransType in('Opening') then m.UnitCost else 0 end )OpenAmnt
,sum(case when TransType in('Purchase') and Remarks in('Purchase')  then m.Quantity else 0 end )LPRQty
,sum(case when TransType in('Purchase') and Remarks in('Purchase')  then m.UnitCost else 0 end )LPRAmnt

,sum(case when TransType in('Purchase') and Remarks in('Purchase') and isnull(d.Type,'NA')='unregister' then m.Quantity else 0 end )LPURQty
,sum(case when TransType in('Purchase') and Remarks in('Purchase') and isnull(d.Type,'NA')='unregister' then m.UnitCost else 0 end )LPURAmnt

,sum(case when TransType in('Purchase') and Remarks in('Import') and isnull(d.Type,'NA')='vat' then m.Quantity else 0 end )ImpQty
,sum(case when TransType in('Purchase') and Remarks in('Import') and isnull(d.Type,'NA')='vat' then m.UnitCost else 0 end )ImpAmnt
,0 LTQty
,0 LTAmnt
,sum(case when TransType in('Issue') and Remarks in('Issue') then m.Quantity else 0 end )ConsQty
,sum(case when TransType in('Issue') and Remarks in('Issue') then m.UnitCost else 0 end )ConsAmnt
,0 LRQty
,0 LRAmnt


----------m.*,isnull(d.Type,'NA')VATType

from ProductStockMISs m
left outer join PurchaseInvoiceDetails d on m.TransID=d.PurchaseInvoiceNo and d.ItemNo=m.ItemNo
left outer join Products p on m.ItemNo= p.ItemNo
group by m.ItemNo,p.ProductName
order by p.ProductName

";


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(retResults);



            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ReportDSDAL", "StockReportRMReport", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ReportDSDAL", "StockReportRMReport", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion

        }

        public DataSet StockReportRMReport(string DateFrom, string DateTo, int BranchId = 0, SysDBInfoVMTemp connVM = null, string UserId = "")
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("StockReportRMReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
--declare @DateFrom as varchar(50)='07/02/2021'
--declare @DateTo as varchar(50)='07/10/2022'



create table #Product(id int identity(1,1),ItemNo varchar(50))
create table #ProductDetail(id int identity(1,1),TType varchar(100),ItemNo varchar(50)
,Quantity Decimal(18,6),Amount Decimal(18,6),AvgDate datetime,AvgRate Decimal(18,6) )
create table #ProductDetaiOpening(id int identity(1,1),ItemNo varchar(50)
,Quantity Decimal(18,6),Amount Decimal(18,6) 
,CloseQty Decimal(18,6),CloseAmnt Decimal(18,6)
)

insert into #Product(ItemNo)
select ItemNo  from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
where 1=1 and  pc.israw in('raw','pack')
) as a

insert into #ProductDetaiOpening(ItemNo,Quantity,Amount)
select distinct ItemNo, Sum(Quantity)ImpQty
, Sum(Amount)ImpAmnt from(
select 'Opening' TType,ItemNo, OpeningBalance Quantity,OpeningTotalCost Amount from Products
where ItemNo in(select ItemNo from #Product)
 
) as a
group by ItemNo

update #ProductDetaiOpening set  Quantity=a.ClosingQty,Amount=a.ClosingValue
from  (
select VAT6_1_Permanent.Id,VAT6_1_Permanent.ItemNo,RunningTotal ClosingQty,RunningValue ClosingValue
from VAT6_1_Permanent
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_1_Permanent
where StartDateTime <@DateFrom and ItemNo in (select distinct ItemNo from #ProductDetaiOpening)
group by ItemNo) as a
on   a.Id=VAT6_1_Permanent.ID) as a
where a.ItemNo=#ProductDetaiOpening.ItemNo  

update #ProductDetaiOpening set  CloseQty=a.ClosingQty,CloseAmnt=a.ClosingValue
from  (
select VAT6_1_Permanent.Id,VAT6_1_Permanent.ItemNo,RunningTotal ClosingQty,RunningValue ClosingValue
from VAT6_1_Permanent
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_1_Permanent
where StartDateTime <=@DateTo and ItemNo in (select distinct ItemNo from #ProductDetaiOpening)
group by ItemNo) as a
on   a.Id=VAT6_1_Permanent.ID) as a
where a.ItemNo=#ProductDetaiOpening.ItemNo  


insert into #ProductDetail(TType,ItemNo,Quantity,Amount)
select TType,ItemNo, ImpQty,ImpAmnt 
from(
select distinct 'Import' TType,ItemNo, Sum(UOMQty)ImpQty
, Sum(SubTotal+CDAmount+RDAmount)ImpAmnt from PurchaseInvoiceDetails
where 1=1
and transactionType in('Import')
and ReceiveDate >=@DateFrom and ReceiveDate <=@DateTo
--and ReceiveDate >=@DateFrom and ReceiveDate < dateadd(d,1,@DateTo)
and ItemNo in(select ItemNo from #Product)
group by ItemNo
union all
select distinct 'LocalReg',ItemNo
, Sum(UOMQty)LPRQty, Sum(SubTotal)LPRAmnt from PurchaseInvoiceDetails
where 1=1
and transactionType in('Other') and [Type] in('vat')
and ReceiveDate >=@DateFrom and ReceiveDate <=@DateTo
--and ReceiveDate >=@DateFrom and ReceiveDate < dateadd(d,1,@DateTo)
and ItemNo in(select ItemNo from #Product)
group by ItemNo
union all

select distinct 'LocalUnReg',ItemNo, Sum(UOMQty)LPURQty, Sum(SubTotal)LPURAmnt from PurchaseInvoiceDetails
where 1=1
and transactionType in('Other') and [Type] not in('vat')
and ReceiveDate >=@DateFrom and ReceiveDate <=@DateTo
--and ReceiveDate >=@DateFrom and ReceiveDate < dateadd(d,1,@DateTo)
and ItemNo in(select ItemNo from #Product)
group by ItemNo
union all
select distinct 'Issue',ItemNo, Sum(UOMQty)ConsQty, Sum(SubTotal)ConsAmnt from issueDetails
where 1=1
and IssueDateTime >=@DateFrom and IssueDateTime <=@DateTo
--and IssueDateTime >=@DateFrom and IssueDateTime < dateadd(d,1,@DateTo)
and ItemNo in(select ItemNo from #Product)
group by ItemNo
) as a
  update #ProductDetail set AvgDate=@DateTo


--update #ProductDetail set  AvgRate=ProductAvgPrice.AvgPrice
--from ProductAvgPrice
--where ProductAvgPrice.ItemNo=#ProductDetail.ItemNo
--and #ProductDetail.AvgDate >= ProductAvgPrice.FromDate 
--and #ProductDetail.AvgDate< DATEADD(d,1, ProductAvgPrice.AgvPriceDate) 
 
 
--update #ProductDetail set AvgRate=a.AvgPrice
--from(
--select ProductAvgPrice.ItemNo,AvgPrice from ProductAvgPrice
--right outer join (
--select distinct ItemNo,max(sl)SL from ProductAvgPrice 
--where 
--ItemNo in(select ItemNo from #ProductDetail 
--where AvgRate is null)

--group by ItemNo)as a
--on a.ItemNo=ProductAvgPrice.ItemNo and a.Sl=ProductAvgPrice.sl) as a
--where a.ItemNo=#ProductDetail.ItemNo
--and  #ProductDetail.ItemNo in(select ItemNo from #ProductDetail 
--where AvgRate is null  )

update #ProductDetail set  AvgRate=a.AvgPrice 
from  (
select VAT6_1_Permanent.Id,VAT6_1_Permanent.ItemNo,VAT6_1_Permanent.AvgRate AvgPrice 

from VAT6_1_Permanent
right outer join (
select distinct ItemNo, MAX(Id)Id from VAT6_1_Permanent
where StartDateTime <=@DateTo and ItemNo in (select distinct ItemNo from #ProductDetaiOpening)
group by ItemNo) as a
on   a.Id=VAT6_1_Permanent.ID) as a
where a.ItemNo=#ProductDetail.ItemNo  


select distinct a.ItemNo,p.ProductCode,pc.IsRaw,p.ProductName
,isnull(o.Quantity,0) OpeningQty, isnull(o.Amount,0) OpenAmnt
, sum(ImpQty)ImpQty, sum(ImpAmnt)ImpAmnt
, sum(ConsQty)ConsQty, sum(ConsAmnt)ConsAmnt
, sum(LPRQty)LPRQty, sum(LPRAmnt)LPRAmnt
, sum(LPURQty)LPURQty, sum(LPURAmnt)LPURAmnt,Max(AvgRate)AvgRate
,0 LRQty
,0 LRAmnt
,0 LTQty
,0 LTAmnt
,o.CloseQty,o.CloseAmnt

from(
select distinct ItemNo,AvgRate
,case when TType in('Import') then Quantity else 0 end ImpQty
,case when TType in('Import') then Amount else 0 end ImpAmnt
,case when TType in('Issue') then Quantity else 0 end ConsQty
,case when TType in('Issue') then Amount else 0 end ConsAmnt
,case when TType in('LocalReg') then Quantity else 0 end LPRQty
,case when TType in('LocalReg') then Amount else 0 end LPRAmnt
,case when TType in('LocalUnReg') then Quantity else 0 end LPURQty
,case when TType in('LocalUnReg') then Amount else 0 end LPURAmnt
from  #ProductDetail
) as a
left outer join Products p on a.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
left outer join #ProductDetaiOpening o on a.ItemNo=o.ItemNo
group by  a.ItemNo,p.ProductName,p.ProductCode, pc.IsRaw,o.Quantity, o.Amount 
,o.CloseQty,o.CloseAmnt

order by p.ProductCode

drop table #Product
drop table #ProductDetail
drop table #ProductDetaiOpening



";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@DateFrom"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateFrom", DateFrom);
                }
                else
                {
                    objCommSaleReport.Parameters["@DateFrom"].Value = DateFrom;
                }

                if (!objCommSaleReport.Parameters.Contains("@DateTo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateTo", DateTo);
                }
                else
                {
                    objCommSaleReport.Parameters["@DateTo"].Value = DateTo;
                }

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "StockReportRMReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet TransferToDepotReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("TransferToDepotReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'
select * from(

select p.ProductName,bp.BranchName
,bp.Address,bp.BIN eBin,d.TransferReceiveNo,d.TransactionDateTime,d.Quantity,d.UOM
,b.EffectDate DateofDeclaration,b.NBRPrice DeclaredValue,d.CostPrice VATableValue,d.VATAmount VAT,d.SubTotal TotalValue
,'' Reference from TransferReceiveDetails d
left outer join Products p on d.ItemNo=p.ItemNo
left outer join BranchProfiles bp on d.TransferFrom=bp.BranchID
left outer join BOMs b on d.bomId=b.BOMId

where 1=1
and d.TransactionType in('62out')
--and d.post='Y' --and d.Type in('VAT')
and d.TransactionDateTime>=  @StartDate and d.TransactionDateTime< DATEADD(d,1,  @EndDate)
and d.BranchId=@BranchId
) as a



";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TransferToDepotReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VDSStatementReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("VDSStatementReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
--declare @StartDate as date
--declare @EndDate as date
--set @StartDate='07/01/2019'
--set @EndDate='07/31/2019'
select
h.PurchaseInvoiceNo,h.InvoiceDateTime EntryDate,p.ProductName NameofItem
,p.HSCodeNo HSCode,h.BENumber VAT6_3,d.ReceiveDate Date
,v.VendorName NameofSupplier,v.Address1 Address,v.VATRegistrationNo eBin,d.Quantity,d.UOM
,d.SubTotal VatableValue,d.VATRate,d.VATAmount,(d.SubTotal+d.VATAmount) TotalValue
 from PurchaseInvoiceDetails d
left outer join PurchaseInvoiceHeaders h on d.PurchaseInvoiceNo=h.PurchaseInvoiceNo
left outer join Products p on d.ItemNo=p.ItemNo
left outer join Vendors v on h.VendorID=v.VendorID
where 1=1
and d.TransactionType in('Other','PurchaseCN','Trading','Service','ServiceNS' ,'InputService')
and d.post='Y'--- and d.Type not in('VAT')
and h.WithVDS='Y'
and d.ReceiveDate>=  @StartDate and d.ReceiveDate<= @EndDate
and h.BranchId=@BranchId
";
                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VDSStatementReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet Chak_kaReport(string StartDate, string EndDate, int BranchId = 0, int TransferTo = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("ChakkaReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
declare @centralRegistrationName as nvarchar(200);
declare @BIN as nvarchar(200);

select @centralRegistrationName=CompanyLegalName, @BIN=BIN  from CompanyProfiles

select 
@centralRegistrationName CentralRegistrationName
,@BIN BIN
,ti.BranchId
,bp.BranchName
,bp.Address
,ti.TransferTo
,tbp.BranchName ReceiverBranchName
,tbp.Address ReceiverBranchAddress
,ti.TransferIssueNo
,ti.TransactionDateTime
,tid.ItemNo
,p.ProductName
,p.ProductCode
,p.ProductDescription
,tid.Quantity
,tid.SubTotal
,tid.VATAmount
,tid.SDAmount
 from TransferIssueDetails tid 
LEFT OUTER JOIN TransferIssues ti ON tid.TransferIssueNo = ti.TransferIssueNo
LEFT OUTER JOIN BranchProfiles bp ON ti.BranchId = bp.BranchID
LEFT OUTER JOIN BranchProfiles tbp ON ti.TransferTo = tbp.BranchID
LEFT OUTER JOIN Products p ON tid.ItemNo = p.ItemNo
WHERE 1=1
and ti.Post = 'Y'
and ti.TransactionDateTime>=  @StartDate and ti.TransactionDateTime< DATEADD(d,1,  @EndDate)
and tid.BranchId=@BranchId
";

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                if (TransferTo != 0)
                {
                    sqlText += " and ti.TransferTo=@TransferTo";
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                if (TransferTo != 0)
                {
                    objCommSaleReport.Parameters.AddWithValue("@TransferTo", TransferTo);
                }
                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "Chak_kaReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet Chak_khaReport(string StartDate, string EndDate, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("ChakkhaReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
declare @centralRegistrationName as nvarchar(200);
declare @BIN as nvarchar(200);
declare @centralAddress as nvarchar(200);

select @centralRegistrationName=CompanyLegalName, @BIN=BIN, @centralAddress=Address1  from CompanyProfiles



SELECT 
@centralRegistrationName CentralRegistrationName
,@BIN BIN
,@centralAddress CentralAddress
,sh.BranchId
,bp.BranchCode
,bp.BranchName
,bp.Address
,sh.SalesInvoiceNo
,sh.InvoiceDateTime
,sd.ItemNo
,p.ProductName
,p.ProductCode
,p.ProductDescription
,sd.Quantity
,sd.SubTotal
,sd.VATAmount
,sd.SDAmount
,(sd.VATAmount+ sd.SDAmount)TotalTax 
FROM SalesInvoiceDetails sd
LEFT OUTER JOIN SalesInvoiceHeaders sh ON sh.SalesInvoiceNo = sd.SalesInvoiceNo
LEFT OUTER JOIN BranchProfiles bp ON sh.BranchId = bp.BranchID
LEFT OUTER JOIN Products p ON sd.ItemNo = p.ItemNo

WHERE 1=1
and sh.Post = 'Y'
AND sh.TransactionType in ('Other','Export')
and sh.InvoiceDateTime>=  @StartDate and sh.InvoiceDateTime< DATEADD(d,1,  @EndDate)
and sd.BranchId=@BranchId
";

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;


                #region parameter
                if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                }
                else
                {
                    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                }
                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "Chak_khaReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet TDS_Certificatet(string DepositId, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataSet dataSet = new DataSet("TDS_Certificatet");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = " ";
                sqlText = @" 
--declare @DepositId as varchar(100)
--set @DepositId='TDS-0007/0919'
--select * from DepositTDSs h  where DepositId=@DepositId
select pt.DepositId,dtds.DepositDateTime, v.VendorName,v.Address1 ,v.VATRegistrationNo 
,pt.PaymentDate,isnull(tds.Description,'')Description,isnull(tds.Section,'')Section,pt.PurchaseBillAmount,pt.TDSAmount,''Remarks
,dtds.TreasuryNo, dtds.BankDepositDate,b.BankName
,mxdate.MinDate,mxdate.MaxDate
  from PurchaseTDSs pt
left outer join PurchaseInvoiceHeaders ph on ph.PurchaseInvoiceNo=pt.PurchaseInvoiceNo
left outer join Vendors v on v.VendorID=ph.VendorId
left outer join (select distinct Section,Code,Description from TDSs) tds on tds.Code=pt.TDSCode
left outer join DepositTDSs dtds on dtds.DepositId=pt.DepositId
left outer join BankInformations b on b.BankID=dtds.BankId
left outer join (
select distinct DepositId,min(PaymentDate)MinDate,max(PaymentDate)MaxDate from PurchaseTDSs pt
where pt.DepositId=@DepositId
group by pt.DepositId) mxdate on mxdate.DepositId=pt.DepositId
where pt.DepositId=@DepositId
 ";

                //if (BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                objCommSaleReport.Parameters.AddWithValue("@DepositId", DepositId);

                #region parameter
                //if (!objCommSaleReport.Parameters.Contains("@StartDate"))
                //{
                //    objCommSaleReport.Parameters.AddWithValue("@StartDate", StartDate);
                //}
                //else
                //{
                //    objCommSaleReport.Parameters["@StartDate"].Value = StartDate;
                //}

                //if (!objCommSaleReport.Parameters.Contains("@EndDate"))
                //{
                //    objCommSaleReport.Parameters.AddWithValue("@EndDate", EndDate);
                //}
                //else
                //{
                //    objCommSaleReport.Parameters["@EndDate"].Value = EndDate;
                //}
                //if (!objCommSaleReport.Parameters.Contains("@BranchId"))
                //{
                //    objCommSaleReport.Parameters.AddWithValue("@BranchId", BranchId);
                //}
                //else
                //{
                //    objCommSaleReport.Parameters["@BranchId"].Value = BranchId;
                //}
                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TDS_Certificatet", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet IssueInformation(string IssueNo, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Issue Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
select   r.IssueNo,r.IssueDateTime
,  p.ProductCode ,p.ProductName,r.UOM ,r.Quantity,r.CostPrice from  IssueDetails r
left outer join Products p on r.ItemNo=p.ItemNo
left outer join Products Fp on r.FinishItemNo=Fp.ItemNo
where IssueNo =@IssueNo";



                //if (BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}
                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                //objCommIssueReport.Parameters.AddWithValue("@BranchId", BranchId);
                objCommIssueReport.Parameters.AddWithValue("@IssueNo", IssueNo);


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "IssueInformation", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "IssueInformation", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ReceiveInformation(string ReceiveNo, int BranchId = 0, SysDBInfoVMTemp connVM = null)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Receive Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
select r.ReceiveNo,r.ReceiveDateTime,p.ProductCode,p.ProductName,r.UOM,r.Quantity,r.CostPrice  from  ReceiveDetails r
left outer join Products p on r.ItemNo=p.ItemNo
where ReceiveNo =@ReceiveNo


select  r.IssueNo,r.IssueDateTime
, fp.ProductCode FinishProductCode,fp.ProductName FinishProductName,   p.ProductCode ,p.ProductName,r.UOM,r.Quantity,r.CostPrice  from  IssueDetails r
left outer join Products p on r.ItemNo=p.ItemNo
left outer join Products Fp on r.FinishItemNo=Fp.ItemNo
where IssueNo =@ReceiveNo


select distinct r.BOMId,b.EffectDate,b.VATName,  fp.ProductCode FinishProductCode,fp.ProductName FinishProductName, rp.ProductCode RawProductCode ,rp.ProductName RawProductName,b.UOM
,b.UseQuantity,b.WastageQuantity
  from   ReceiveDetails r 
left outer join BOMRaws b on r.BOMId=b.BOMId
left outer join Products fp on b.FinishItemNo=fp.ItemNo
left outer join Products rp on b.RawItemNo=rp.ItemNo
where  r.ReceiveNo =@ReceiveNo
and b.RawItemType not in('Overhead')";



                //if (BranchId == 0)
                //{
                //    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                //}
                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                //objCommIssueReport.Parameters.AddWithValue("@BranchId", BranchId);
                objCommIssueReport.Parameters.AddWithValue("@ReceiveNo", ReceiveNo);


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ReceiveInformation", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ReceiveInformation", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }
        #endregion

        #region Reports 11

        public DataSet TDSAmountReport(string[] conditionFields = null, string[] conditionValues = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable();



            DataSet dataSet = new DataSet("TDSAmountReport");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement
                sqlText = " ";
                sqlText = @" 
Select 
v.VendorCode,
v.VendorName,
h.PurchaseInvoiceNo,
h.ReceiveDate,
h.InvoiceDateTime,
h.BENumber,
ISNULL(d.SubTotal,0)SubTotal,
h.TotalAmount,
ISNULL(h.TotalVATAmount,0)TotalVATAmount,
ISNULL(d.VDSAmount,0)VDSAmount,
ISNULL(d.SDAmount,0)SDAmount,
ISNULL(h.TDSAmount,0)TDSAmount

    from PurchaseInvoiceHeaders h
left outer join (select distinct PurchaseInvoiceNo,sum(SubTotal)SubTotal,sum(VDSAmount)VDSAmount,sum(SDAmount)SDAmount from PurchaseInvoiceDetails
where 1=1 
group by PurchaseInvoiceNo) d on d.PurchaseInvoiceNo =h.PurchaseInvoiceNo
left outer join Vendors v on h.VendorID=v.VendorID
where 1=1

";
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                sqlText += " order by h.PurchaseInvoiceNo";
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            dataAdapter.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            dataAdapter.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }


                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TDSAmountReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TDSAmountReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet TransferIssueOutReport(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId = 0, int TransferTo = 0, SysDBInfoVMTemp connVM = null, string ShiftId = "0")
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TransferIssueOutReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
SELECT   
t.TransferIssueNo, t.TransactionDateTime
,br.BranchCode
,br.BranchName
,br1.BranchName BranchFrom
,br1.BranchCode BranchFromCode
,p.ProductCode
,p.ProductName
,td.Quantity
,td.UOM
,td.SubTotal
,td.SDAmount
,td.VATAmount
,td.TransactionType 
,td.BranchId 

from TransferIssueDetails td
LEFT OUTER JOIN TransferIssues t ON td.TransferIssueNo = t.TransferIssueNo
LEFT OUTER JOIN Products p ON td.ItemNo = p.ItemNo
LEFT OUTER JOIN BranchProfiles br ON br.BranchID=t.TransferTo
LEFT OUTER JOIN BranchProfiles br1 ON br1.BranchID=td.BranchId
Where
 td.BranchId=@BranchId  and t.TransferTo =@TransferTo          
";

                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }


                if (TransferTo == 0)
                {
                    sqlText = sqlText.Replace("=@TransferTo", ">@TransferTo");
                }

                if (IssueDateFrom != "")
                {
                    sqlText += " and td.TransactionDateTime >=@IssueDateFrom ";
                }
                if (IssueDateTo != "")
                {
                    ////////sqlText += " and td.TransactionDateTime< DATEADD(d,1,@IssueDateTo) ";
                    sqlText += " and td.TransactionDateTime<= @IssueDateTo ";
                }
                if (IssueNo != "")
                {
                    sqlText += " and td.TransferIssueNo =@IssueNo ";
                }

                if (!string.IsNullOrEmpty(TType))
                {
                    TType = TType.Replace(" ", "").Replace(".", "");
                    sqlText += " and td.TransactionType =@TType ";
                }

                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and t.ShiftId=@ShiftId ";

                }

                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommIssueReport.Parameters.AddWithValue("@BranchId", BranchId);
                objCommIssueReport.Parameters.AddWithValue("@TransferTo", TransferTo);
                objCommIssueReport.Parameters.AddWithValue("@IssueNo", IssueNo);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateFrom", IssueDateFrom);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateTo", IssueDateTo);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@TType", TType);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@ShiftId", ShiftId);

                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TransferIssueOutReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TransferIssueOutReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }


        public DataSet TransferReceiveInReport(string IssueNo, string IssueDateFrom, string IssueDateTo, string TType, int BranchId = 0, int BranchFromId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TransferReceiveInReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
select t.TransferReceiveNo, t.TransactionDateTime
,br.BranchCode
,br.BranchName
,br1.BranchCode ToCode
,br1.BranchName ToName
,p.ProductCode
,p.ProductName
,td.Quantity,td.UOM, td.SubTotal, td.SDAmount, td.VATAmount
,td.TransactionType 

from TransferReceiveDetails td
LEFT OUTER JOIN TransferReceives t ON td.TransferReceiveNo = t.TransferReceiveNo
LEFT OUTER JOIN Products p ON td.ItemNo = p.ItemNo
LEFT OUTER JOIN BranchProfiles br ON br.BranchID=t.TransferFrom
LEFT OUTER JOIN BranchProfiles br1 ON br1.BranchID=td.BranchId
Where
 td.BranchId=@BranchId    and    td.TransferFrom =@BranchFromId
";







                if (BranchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                if (BranchFromId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchFromId", ">@BranchFromId");
                }
                if (!string.IsNullOrEmpty(IssueDateFrom))
                {
                    sqlText += " and t.TransactionDateTime >=@IssueDateFrom ";
                }
                if (!string.IsNullOrEmpty(IssueDateTo))
                {
                    sqlText += " and t.TransactionDateTime< DATEADD(d,1,@IssueDateTo) ";
                }
                if (IssueNo != "")
                {
                    sqlText += " and t.TransferReceiveNo =@IssueNo ";
                }

                if (!string.IsNullOrEmpty(TType))
                {
                    TType = TType.Replace(" ", "").Replace(".", "");
                    sqlText += " and td.TransactionType =@TType ";
                }
                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommIssueReport.Parameters.AddWithValue("@BranchId", BranchId);
                objCommIssueReport.Parameters.AddWithValue("@BranchFromId", BranchFromId);
                objCommIssueReport.Parameters.AddWithValue("@IssueNo", IssueNo);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateFrom", IssueDateFrom);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateTo", IssueDateTo);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@TType", TType);

                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "TransferReceiveInReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "TransferReceiveInReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }
        public DataSet Wastage(string ItemNo, string ProdutCategoryId, string ProductType, string post1, string post2, string StartDate, string EndDate, int branchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Wastage");

            #endregion

            #region Try


            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                sqlText = "";



                sqlText += @"  
--declare @StartDate as date='01/01/2021';
--declare @EndDate as date='01/01/2031';
--
--declare @BranchId as varchar(10)='1';
--declare @post1 as varchar(10)='Y';
--declare @post2 as varchar(10)='N';

select * into #ProductInfo from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1

";
                if (!string.IsNullOrWhiteSpace(ProductType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";
                }
                else if (!string.IsNullOrWhiteSpace(ProdutCategoryId))
                {
                    sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                }
                else
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @"  ) as a";

                sqlText +=
                    @"

select * into #WastageOpening from (
 select distinct itemNo,sum(Wastage)Wastage from (
select distinct itemNo, sum(Wastage*UOMc) Wastage   from IssueDetails where 
TransactionType not in('IssueWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and IssueDateTime<@StartDate
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo

Union All
select distinct FromItemNo,-1*sum(FromQuantity)FromQuantity  from ProductTransfersDetails
where IsWastage='Y' and TransactionType in ('WastageCTC') 
and FromItemNo  in (select ItemNo from #ProductInfo)
and TransferDate<@StartDate
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by FromItemNo

Union All
select distinct ToItemNo,sum(ToQuantity)ToQuantity  from ProductTransfersDetails
where IsWastage='Y'
and ToItemNo  in (select ItemNo from #ProductInfo)
and TransferDate<@StartDate
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by ToItemNo

union all

SELECT distinct ItemNo, isnull(sum(p.WastageTotalQuantity),0) Wastage 
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductInfo)
AND BranchId=@BranchId
group by ItemNo


union all
select distinct itemNo,  -1*sum(UOMQty) Issue  from IssueDetails where 
TransactionType in('IssueWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and IssueDateTime<@StartDate
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
union all

select distinct itemNo , -1*sum(UOMQty) Sale from SalesInvoiceDetails where 
TransactionType in('SaleWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and InvoiceDateTime<@StartDate
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
) as aa
group by ItemNo
) as o


select distinct ItemNo,sum(Wastage)Wastage,sum(Issue)Issue,sum(Sale)Sale,sum(Transferin)TransferIn
,sum(TransferOut)TransferOut
into #Wastage from (

select distinct itemNo, sum(Wastage*UOMc) Wastage , 0 Issue, 0 Sale, 0 Transferin, 0 TransferOut from IssueDetails where 
TransactionType not in('IssueWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and IssueDateTime >= @StartDate and IssueDateTime <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
union all
select distinct itemNo,0 Wastage, sum(UOMQty) Issue, 0 Sale, 0 Transferin, 0 TransferOut from IssueDetails where 
TransactionType in('IssueWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and IssueDateTime >= @StartDate and IssueDateTime <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
union all

select distinct itemNo,0 Wastage, 0 Issue, sum(UOMQty) Sale, 0 Transferin, 0 TransferOut from SalesInvoiceDetails where 
TransactionType in('SaleWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and InvoiceDateTime   >= @StartDate and InvoiceDateTime <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo

union all

select distinct FromItemNo,0 Wastage, 0 Issue, 0 Sale, 0 Transferin , sum(FromQuantity) TransferOut 
from ProductTransfersDetails where 
IsWastage in('Y') and TransactionType in ('WastageCTC')
and FromItemNo in (select ItemNo from #ProductInfo)
and TransferDate   >= @StartDate and TransferDate <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by FromItemNo

union all

select distinct ToItemNo,0 Wastage, 0 Issue, 0 Sale, sum(ToQuantity) TransferIn  , 0 TransferOut
from ProductTransfersDetails where 
IsWastage in('Y') and TransactionType in ('WastageCTC')
and ToItemNo in (select ItemNo from #ProductInfo)
and TransferDate   >= @StartDate and TransferDate <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by ToItemNo

) as o
group by itemNo



select p.ProductName,p.ProductCode,pc.CategoryName,

 pinfo.ItemNo,isnull(o.Wastage,0) Opening,isnull(w.Wastage,0)Wastage,isnull(w.Issue,0)Issue,isnull(w.Sale,0)Sale
 ,isnull(w.TransferIn,0)TransferIn,isnull(w.TransferOut,0)TransferOut
,isnull(o.Wastage,0) +isnull(w.Wastage,0)-isnull(w.Issue,0)-isnull(w.Sale,0)+isnull(w.TransferIn,0)-isnull(w.TransferOut,0)WastageBalance
from #ProductInfo pinfo 
left outer join #WastageOpening  o on pinfo.ItemNo=o.ItemNo
left outer join #Wastage w on pinfo.ItemNo=w.ItemNo 
left outer join Products p on pinfo.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID

--select * from  #WastageOpening
--select * from  #ProductInfo
--select * from  #Wastage
drop table #WastageOpening
drop table #ProductInfo
drop table #Wastage
";





                #endregion

                #region SQL Command
                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn);

                #endregion

                #region Parameter
                objCommVAT16.Parameters.AddWithValue("@BranchId", branchId);


                if (!string.IsNullOrWhiteSpace(ProductType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", ProductType);
                }
                else if (!string.IsNullOrWhiteSpace(ProdutCategoryId))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", ProdutCategoryId);
                }


                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }

                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "Wastage", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "Wastage", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet WastageBackup(string ItemNo, string ProdutCategoryId, string ProductType, string post1, string post2, string StartDate, string EndDate, int branchId = 0, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Wastage");

            #endregion

            #region Try


            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                sqlText = "";

                sqlText += @"  select * into #ProductInfo from   ( 
select Products.ItemNo from Products 
left outer join ProductCategories pc
on pc.CategoryID=Products.CategoryID
 where 1=1

";
                if (!string.IsNullOrWhiteSpace(ProductType))
                {
                    sqlText += @"  and IsRaw=@ProdutType";
                }
                else if (!string.IsNullOrWhiteSpace(ProdutCategoryId))
                {
                    sqlText += @"  and Products.CategoryID=@ProdutCategoryId";
                }
                else
                {
                    sqlText += @"  and ItemNo=@ItemNo";
                }
                sqlText += @"  ) as a";

                sqlText +=
                    @"
select * into #WastageOpening from (

select distinct itemNo, sum(Wastage*UOMc) Wastage   from IssueDetails where 
TransactionType not in('IssueWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and IssueDateTime<@StartDate
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo

union all

SELECT distinct ItemNo, isnull(sum(p.WastageTotalQuantity),0) Wastage 
FROM ProductStocks p  WHERE p.ItemNo  in(select distinct ItemNo from #ProductInfo)
AND BranchId=@BranchId
group by ItemNo


--union all
--select distinct itemNo,  -1*sum(UOMQty) Issue  from IssueDetails where 
--TransactionType in('IssueWastage')
--and ItemNo in (select ItemNo from #ProductInfo)
--and IssueDateTime<@StartDate
--and BranchId=@BranchId
--AND (Post =@post1 or Post= @post2)
--group by itemNo
union all

select distinct itemNo , -1*sum(UOMQty) Sale from SalesInvoiceDetails where 
TransactionType in('SaleWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and InvoiceDateTime<@StartDate
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
) as o


select distinct ItemNo,sum(Wastage)Wastage,sum(Issue)Issue,sum(Sale)Sale into #Wastage from (

select distinct itemNo, sum(Wastage*UOMc) Wastage , 0 Issue, 0 Sale from IssueDetails where 
TransactionType not in('IssueWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and IssueDateTime >= @StartDate and IssueDateTime <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
union all
select distinct itemNo,0 Wastage, sum(UOMQty) Issue, 0 Sale from IssueDetails where 
TransactionType in('IssueWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and IssueDateTime >= @StartDate and IssueDateTime <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
union all

select distinct itemNo,0 Wastage, 0 Issue, sum(UOMQty) Sale from SalesInvoiceDetails where 
TransactionType in('SaleWastage')
and ItemNo in (select ItemNo from #ProductInfo)
and InvoiceDateTime   >= @StartDate and InvoiceDateTime <DATEADD(d,1,@EndDate) 
and BranchId=@BranchId
AND (Post =@post1 or Post= @post2)
group by itemNo
) as o
group by itemNo

select p.ProductName,p.ProductCode,pc.CategoryName,

 pinfo.ItemNo,isnull(o.Wastage,0) Opening,isnull(w.Wastage,0)Wastage,isnull(w.Issue,0)Issue,isnull(w.Sale,0)Sale
,isnull(o.Wastage,0) +isnull(w.Wastage,0)-isnull(w.Issue,0)-isnull(w.Sale,0)WastageBalance
from #ProductInfo pinfo 
left outer join #WastageOpening  o on pinfo.ItemNo=o.ItemNo
left outer join #Wastage w on pinfo.ItemNo=w.ItemNo 
left outer join Products p on pinfo.ItemNo=p.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID

--select * from  #WastageOpening
--select * from  #ProductInfo
--select * from  #Wastage
drop table #WastageOpening
drop table #ProductInfo
drop table #Wastage
";





                #endregion

                #region SQL Command
                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                SqlCommand objCommVAT16 = new SqlCommand(sqlText, currConn);

                #endregion

                #region Parameter
                objCommVAT16.Parameters.AddWithValue("@BranchId", branchId);


                if (!string.IsNullOrWhiteSpace(ProductType))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutType", ProductType);
                }
                else if (!string.IsNullOrWhiteSpace(ProdutCategoryId))
                {
                    objCommVAT16.Parameters.AddWithValue("@ProdutCategoryId", ProdutCategoryId);
                }


                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }

                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "Wastage", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "Wastage", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        #endregion

        #region Web Methods

        public List<VAT_16VM> VAT16List(DataSet ReportResult, SysDBInfoVMTemp connVM = null)
        {
            #region  Variables
            decimal vColumn1 = 0;
            DateTime vColumn2 = DateTime.MinValue;
            decimal vColumn3 = 0;
            decimal vColumn4 = 0;
            string vColumn5 = "-";
            DateTime vColumn6 = DateTime.MinValue;
            string vColumn7 = string.Empty;
            string vColumn8 = string.Empty;
            string vColumn9 = string.Empty;
            string vColumn10 = string.Empty;
            decimal vColumn11 = 0;
            decimal vColumn12 = 0;
            decimal vColumn13 = 0;
            decimal vColumn14 = 0;
            decimal vColumn15 = 0;
            decimal vColumn16 = 0;
            decimal vColumn17 = 0;
            decimal vColumn18 = 0;
            string vColumn19 = string.Empty;

            decimal vTempSerial = 0;
            DateTime vTempStartDateTime = DateTime.MinValue;
            decimal vTempStartingQuantity = 0;
            decimal vTempStartingAmount = 0;
            decimal vTempQuantity = 0;
            decimal vTempSubtotal = 0;
            string vTempVendorName = string.Empty;
            string vTempVATRegistrationNo = string.Empty;
            string vTempAddress1 = string.Empty;
            string vTempTransID = string.Empty;
            DateTime vTempInvoiceDateTime = DateTime.MinValue;
            string vTempProductName = string.Empty;
            string vTempBENumber = string.Empty;

            decimal vTempSDAmount = 0;
            decimal vTempVATAmount = 0;
            string vTempremarks = string.Empty;
            string vTemptransType = string.Empty;

            decimal vClosingQuantity = 0;
            decimal vClosingAmount = 0;
            decimal vClosingAvgRate = 0;

            decimal OpeningQty = 0;
            decimal OpeningAmnt = 0;
            decimal PurchaseQty = 0;
            decimal PurchaseAmnt = 0;
            decimal IssueQty = 0;
            decimal IssueAmnt = 0;
            decimal CloseQty = 0;
            decimal CloseAmnt = 0;

            decimal OpQty = 0;
            decimal OpAmnt = 0;
            decimal avgRate = 0;
            string HSCode = string.Empty;
            string ProductName = string.Empty;
            #endregion


            List<VAT_16VM> vat16s = new List<VAT_16VM>();
            VAT_16VM vat16 = new VAT_16VM();
            int i = 1;

            DataRow[] DetailRawsOpening = ReportResult.Tables[0].Select("transType='Opening'");
            foreach (DataRow row in DetailRawsOpening)
            {
                vTempremarks = row["Remarks"].ToString().Trim();
                vTemptransType = row["TransType"].ToString().Trim();
                ProductName = row["ProductName"].ToString().Trim();
                HSCode = row["HSCodeNo"].ToString().Trim();

                vTempStartDateTime = Convert.ToDateTime(row["StartDateTime"].ToString().Trim());

                OpQty = Convert.ToDecimal(row["Quantity"].ToString().Trim());
                OpAmnt = Convert.ToDecimal(row["UnitCost"].ToString().Trim());
                vat16 = new VAT_16VM();

                #region if row 1 Opening

                OpeningQty = OpQty;
                OpeningAmnt = OpAmnt;
                OpAmnt = 0;
                OpQty = 0;

                PurchaseQty = 0;
                PurchaseAmnt = 0;
                IssueQty = 0;
                IssueAmnt = 0;

                CloseQty =
                    (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                     Convert.ToDecimal(IssueQty));
                CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                             Convert.ToDecimal(IssueAmnt));
                vColumn2 = vTempStartDateTime;
                vColumn3 = OpeningQty;
                vColumn4 = OpeningAmnt;
                vColumn5 = "-";
                vColumn6 = vTempStartDateTime;
                vColumn7 = "-";
                vColumn8 = "-";
                vColumn9 = "-";
                vColumn10 = "-";
                vColumn11 = PurchaseQty;
                vColumn12 = PurchaseAmnt;
                vColumn13 = 0;
                vColumn14 = 0;
                vColumn15 = IssueQty;
                vColumn16 = IssueAmnt;
                vColumn17 = CloseQty;
                vColumn18 = CloseAmnt;
                vColumn19 = vTempremarks;

                vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                                    Convert.ToDecimal(IssueQty));
                if (vClosingQuantity == 0)
                {
                    vClosingAmount = 0;


                }
                else
                {
                    vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                      Convert.ToDecimal(IssueAmnt));
                    vClosingAvgRate = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));


                }

                #endregion

                #region AssignValue to List

                vat16.Column1 = vColumn1; //    i.ToString();      // Serial No   
                vat16.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                vat16.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                vat16.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                vat16.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                vat16.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                vat16.Column6String = ""; //    item["UnitCost"].ToString();      // Production Price
                vat16.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                vat16.Column8 = vColumn8;   //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                vat16.Column9 = vColumn9;   //    item["Address1"].ToString();      // Customer Address
                vat16.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                vat16.Column11 = vColumn11; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                vat16.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                vat16.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                vat16.Column14 = vColumn14; //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                vat16.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                vat16.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                vat16.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                vat16.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                vat16.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks



                vat16s.Add(vat16);
                i = i + 1;

                #endregion AssignValue to List
            }
            DataRow[] DetailRawsOthers = ReportResult.Tables[0].Select("transType<>'Opening'");
            if (DetailRawsOthers == null || !DetailRawsOthers.Any())
            {
                return new List<VAT_16VM>();
                //MessageBox.Show("There is no data to preview", this.Text);
                //return;
            }
            string strSort = "CreateDateTime ASC, SerialNo ASC";

            DataView dtview = new DataView(DetailRawsOthers.CopyToDataTable());
            dtview.Sort = strSort;
            DataTable dtsorted = dtview.ToTable();

            foreach (DataRow item in dtsorted.Rows)
            {
                #region Get from Datatable

                OpeningQty = 0;
                OpeningAmnt = 0;
                PurchaseQty = 0;
                PurchaseAmnt = 0;
                IssueQty = 0;
                IssueAmnt = 0;
                CloseQty = 0;
                CloseAmnt = 0;

                vColumn1 = i;
                vTempStartDateTime = Convert.ToDateTime(item["StartDateTime"].ToString()); // Date
                vTempQuantity = Convert.ToDecimal(item["Quantity"].ToString()); // Production Quantity
                vTempSubtotal = Convert.ToDecimal(item["UnitCost"].ToString()); // Production Price
                vTempVendorName = item["VendorName"].ToString(); // Customer Name
                vTempVATRegistrationNo = item["VATRegistrationNo"].ToString(); // Customer VAT Reg No
                vTempAddress1 = item["Address1"].ToString(); // Customer Address
                vTempTransID = item["TransID"].ToString(); // Sale Invoice No
                vTempInvoiceDateTime = Convert.ToDateTime(item["InvoiceDateTime"].ToString()); // Sale Invoice Date and Time
                vTempBENumber = item["BENumber"].ToString(); // Sale Invoice Date and Time
                vTempProductName = item["ProductName"].ToString(); // Sale Product Name
                vTempSDAmount = Convert.ToDecimal(item["SD"].ToString()); // SD Amount
                vTempVATAmount = Convert.ToDecimal(item["VATRate"].ToString()); // VAT Amount
                vTempremarks = item["remarks"].ToString(); // Remarks
                vTemptransType = item["TransType"].ToString().Trim();

                #endregion Get from Datatable

                if (vTemptransType == "Issue")
                {
                    vat16 = new VAT_16VM();
                    #region if row 1 Opening
                    if (vTempremarks.Trim() == "ServiceNS"
                       || vTempremarks.Trim() == "ServiceNSImport"
                       )
                    {
                        OpeningQty = 0;
                        OpeningAmnt = 0;
                    }
                    else
                    {


                        OpeningQty = OpQty + vClosingQuantity;
                        OpeningAmnt = OpAmnt + vClosingAmount;

                    }



                    OpAmnt = 0;
                    OpQty = 0;

                    PurchaseQty = 0;
                    PurchaseAmnt = 0;
                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        IssueQty = 0;
                        IssueAmnt = 0;
                    }
                    else
                    {
                        IssueQty = vTempQuantity;
                        IssueAmnt = vTempSubtotal;// vTempQuantity* vClosingAvgRate;
                    }

                    if (IssueQty == 0)
                    {
                        avgRate = 0;
                    }
                    else
                    {
                        avgRate = IssueAmnt / IssueQty;
                    }
                    CloseQty =
                        (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                         Convert.ToDecimal(IssueQty));
                    CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                 Convert.ToDecimal(IssueAmnt));

                    vColumn2 = vTempStartDateTime;

                    vColumn3 = OpeningQty;
                    vColumn4 = OpeningAmnt;

                    vColumn5 = "";
                    vColumn6 = vTempStartDateTime;

                    vColumn7 = vTempVendorName;
                    vColumn8 = vTempAddress1;
                    vColumn9 = vTempVATRegistrationNo;
                    vColumn10 = vTempProductName;
                    vColumn11 = PurchaseQty;
                    vColumn12 = PurchaseAmnt;
                    vColumn13 = vTempSDAmount;
                    vColumn14 = vTempVATAmount;
                    vColumn15 = IssueQty;
                    vColumn16 = IssueAmnt;

                    vColumn17 = CloseQty;
                    vColumn18 = CloseAmnt;

                    vColumn19 = vTempremarks;
                    vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                                        Convert.ToDecimal(IssueQty));
                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        vClosingQuantity = 0;
                        vClosingAmount = 0;
                    }
                    else if (vClosingQuantity == 0)
                    {
                        vClosingAmount = 0;
                    }
                    else
                    {
                        vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                          Convert.ToDecimal(IssueAmnt));

                    }
                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        vClosingQuantity = 0;
                        vClosingAmount = 0;

                    }

                    #endregion
                    #region AssignValue to List

                    vat16.Column1 = vColumn1; //   
                    vat16.Column2 = vColumn2; //   
                    vat16.Column3 = vColumn3; //   
                    vat16.Column4 = vColumn4; //   
                    vat16.Column5 = vColumn5; //   
                    vat16.Column6 = vColumn6; //   
                    vat16.Column6String = ""; //   
                    vat16.Column7 = vColumn7; //   
                    vat16.Column8 = vColumn8;//    
                    vat16.Column9 = vColumn9; //   
                    vat16.Column10 = vColumn10; // 
                    vat16.Column11 = vColumn11;//  
                    vat16.Column12 = vColumn12; // 
                    vat16.Column13 = vColumn13; // 
                    vat16.Column14 = vColumn14;//  
                    vat16.Column15 = vColumn15; // 
                    vat16.Column16 = vColumn16; // 
                    vat16.Column17 = vColumn17; // 
                    vat16.Column18 = vColumn18; // 
                    vat16.Column19 = vColumn19; // 


                    vat16s.Add(vat16);
                    i = i + 1;

                    #endregion AssignValue to List



                }
                else if (vTemptransType == "Purchase")
                {
                    vat16 = new VAT_16VM();

                    #region if row 1 Opening

                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        OpeningQty = 0;
                        OpeningAmnt = 0;
                    }
                    else
                    {
                        OpeningQty = OpQty + vClosingQuantity;
                        OpeningAmnt = OpAmnt + vClosingAmount;
                    }
                    OpeningQty = OpQty + vClosingQuantity;
                    OpeningAmnt = OpAmnt + vClosingAmount;
                    OpAmnt = 0;
                    OpQty = 0;

                    //if (vTempremarks.Trim() == "ServiceNS"
                    //  || vTempremarks.Trim() == "ServiceNSImport"
                    //  )
                    //{
                    //    PurchaseQty = 0;
                    //    PurchaseAmnt = 0;
                    //}
                    //else
                    //{
                    PurchaseQty = vTempQuantity;
                    PurchaseAmnt = vTempSubtotal;
                    //}

                    IssueQty = 0;
                    IssueAmnt = 0;
                    if (PurchaseQty == 0)
                    {
                        avgRate = 0;
                    }
                    else
                    {
                        avgRate = PurchaseAmnt / PurchaseQty;
                    }


                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        CloseQty = 0;
                        CloseAmnt = 0;
                    }
                    else
                    {
                        CloseQty =
                       (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                        Convert.ToDecimal(IssueQty));
                        CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                     Convert.ToDecimal(IssueAmnt));
                    }



                    vColumn2 = vTempStartDateTime;
                    vColumn3 = OpeningQty;
                    vColumn4 = OpeningAmnt;
                    vColumn5 = vTempBENumber;
                    vColumn6 = vTempInvoiceDateTime;
                    vColumn7 = vTempVendorName;
                    vColumn8 = vTempAddress1;
                    vColumn9 = vTempVATRegistrationNo;
                    vColumn10 = vTempProductName;
                    vColumn11 = PurchaseQty;
                    vColumn12 = PurchaseAmnt;
                    vColumn13 = vTempSDAmount;
                    vColumn14 = vTempVATAmount;
                    vColumn15 = IssueQty;
                    vColumn16 = IssueAmnt;
                    vColumn17 = CloseQty;
                    vColumn18 = CloseAmnt;
                    vColumn19 = vTempremarks;

                    vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                                        Convert.ToDecimal(IssueQty));
                    if (vClosingQuantity == 0)
                    {
                        vClosingAmount = 0;


                    }
                    else
                    {
                        vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                          Convert.ToDecimal(IssueAmnt));

                        vClosingAvgRate = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));

                    }

                    if (vTempremarks.Trim() == "ServiceNS" || vTempremarks.Trim() == "ServiceNSImport")
                    {
                        vClosingQuantity = 0;
                        vClosingAmount = 0;
                    }


                    #endregion



                    #region AssignValue to List

                    vat16.Column1 = vColumn1; //   
                    vat16.Column2 = vColumn2; //   
                    vat16.Column3 = vColumn3; //   
                    vat16.Column4 = vColumn4; //   
                    vat16.Column5 = vColumn5; //   
                    vat16.Column6 = vColumn6; //   
                    vat16.Column6String = Convert.ToDateTime(vColumn6).ToString("dd/MM/yyyy"); //    item["UnitCost"].ToString();      // Production Price
                    vat16.Column7 = vColumn7; //   
                    vat16.Column8 = vColumn8;   // 
                    vat16.Column9 = vColumn9;   // 
                    vat16.Column10 = vColumn10; // 
                    vat16.Column11 = vColumn11; // 
                    vat16.Column12 = vColumn12; // 
                    vat16.Column13 = vColumn13; // 
                    vat16.Column14 = vColumn14; // 
                    vat16.Column15 = vColumn15; // 
                    vat16.Column16 = vColumn16; // 
                    vat16.Column17 = vColumn17; // 
                    vat16.Column18 = vColumn18; // 
                    vat16.Column19 = vColumn19; // 


                    vat16s.Add(vat16);
                    i = i + 1;

                    #endregion AssignValue to List
                }
            }

            return vat16s;
        }
        public List<VAT_17VM> VAT17List(DataSet ReportResult, string itemNo, SysDBInfoVMTemp connVM = null)
        {
            #region
            decimal vColumn1 = 0;
            DateTime vColumn2 = DateTime.MinValue;
            decimal vColumn3 = 0;
            decimal vColumn4 = 0;
            decimal vColumn5 = 0;
            decimal vColumn6 = 0;
            string vColumn7 = string.Empty;
            string vColumn8 = string.Empty;
            string vColumn9 = string.Empty;
            string vColumn10 = string.Empty;
            DateTime vColumn11 = DateTime.MinValue;
            string vColumn12 = string.Empty;
            decimal vColumn13 = 0;
            decimal vColumn14 = 0;
            decimal vColumn15 = 0;
            decimal vColumn16 = 0;
            decimal vColumn17 = 0;
            decimal vColumn18 = 0;
            string vColumn19 = string.Empty;

            decimal vTempSerial = 0;
            DateTime vTempStartDateTime = DateTime.MinValue;
            decimal vTempStartingQuantity = 0;
            decimal vTempStartingAmount = 0;
            decimal vTempQuantity = 0;
            decimal vTempSubtotal = 0;
            string vTempCustomerName = string.Empty;
            string vTempVATRegistrationNo = string.Empty;
            string vTempAddress1 = string.Empty;
            string vTempTransID = string.Empty;
            DateTime vTemptransDate = DateTime.MinValue;
            string vTempProductName = string.Empty;
            decimal vTempSDAmount = 0;
            decimal vTempVATAmount = 0;
            string vTempremarks = string.Empty;
            string vTemptransType = string.Empty;

            decimal vClosingQuantity = 0;
            decimal vClosingAmount = 0;
            decimal vClosingAvgRatet = 0;

            decimal OpeningQty = 0;
            decimal OpeningAmnt = 0;
            decimal ProductionQty = 0;
            decimal ProductionAmnt = 0;
            decimal SaleQty = 0;
            decimal SaleAmnt = 0;
            decimal CloseQty = 0;
            decimal CloseAmnt = 0;

            decimal OpQty = 0;
            decimal OpAmnt = 0;
            decimal avgRate = 0;
            string HSCode = string.Empty;
            string ProductName = string.Empty;
            decimal vClosingQuantityNew = 0;
            decimal vClosingAmountNew = 0;
            decimal vUnitRate = 0;
            decimal vAdjustmentValue = 0;


            #endregion

            List<VAT_17VM> vat17s = new List<VAT_17VM>();
            VAT_17VM vat17 = new VAT_17VM();
            try
            {


                int i = 1;
                //if (rbtnWIP.Checked == false)
                if (true)
                {

                    //DataRow[] DetailRawsOpening = ReportResult.Tables[1].Select("transType='Opening'");
                    DataRow[] DetailRawsOpening = ReportResult.Tables[0].Select("transType='Opening'");

                    #region Opening
                    foreach (DataRow row in DetailRawsOpening)
                    {
                        ProductDAL productDal = new ProductDAL();
                        vTempremarks = row["remarks"].ToString().Trim();
                        vTemptransType = row["TransType"].ToString().Trim();
                        //vTemptransType = row["TransType"].ToString().Trim();
                        ProductName = row["ProductName"].ToString().Trim();
                        HSCode = row["HSCodeNo"].ToString().Trim();
                        string ItemNo = productDal.GetProductIdByName(ProductName);
                        vTempStartDateTime = Convert.ToDateTime(row["StartDateTime"].ToString().Trim());
                        decimal LastNBRPrice = productDal.GetLastNBRPriceFromBOM(ItemNo, Convert.ToDateTime(vTempStartDateTime).ToString("yyyy-MM-dd"), null, null);

                        //Convert.ToDecimal(dollerRate.ToString(), SalePlaceDollar));

                        decimal q11 = Convert.ToDecimal(row["Quantity"].ToString().Trim());
                        decimal q12 = Convert.ToDecimal(row["UnitCost"].ToString().Trim());
                        //OpQty = TCloseQty;//
                        //OpAmnt = TCloseAmnt;
                        OpQty = q11;//
                        OpAmnt = q12;//
                        vat17 = new VAT_17VM();

                        #region if row 1 Opening

                        OpeningQty = OpQty;
                        OpeningAmnt = OpAmnt;// OpQty* LastNBRPrice;
                        OpAmnt = 0;
                        OpQty = 0;

                        ProductionQty = 0;
                        ProductionAmnt = 0;
                        SaleQty = 0;
                        SaleAmnt = 0;

                        CloseQty =
                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                             Convert.ToDecimal(SaleQty));
                        CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) -
                                     Convert.ToDecimal(SaleAmnt));
                        vColumn2 = vTempStartDateTime;
                        vColumn3 = Convert.ToDecimal(OpeningQty.ToString());
                        vColumn4 = Convert.ToDecimal(OpeningAmnt.ToString());
                        vColumn5 = 0; // Convert.ToDecimal(ProductionQty.ToString());
                        vColumn6 = 0; // Convert.ToDecimal(ProductionAmnt.ToString());
                        vColumn7 = "-";
                        vColumn8 = "-";
                        vColumn9 = "-";
                        vColumn10 = "-";
                        vColumn11 = DateTime.MinValue;
                        vColumn12 = "-";
                        vColumn13 = 0; // Convert.ToDecimal(SaleQty.ToString());
                        vColumn14 = 0; // Convert.ToDecimal(SaleAmnt.ToString());
                        vColumn15 = 0;
                        vColumn16 = 0;
                        vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                        vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());
                        vColumn19 = vTempremarks;
                        vUnitRate = Convert.ToDecimal(row["UnitRate"].ToString().Trim());
                        vClosingQuantityNew = vColumn17;
                        vClosingAmountNew = vColumn18;

                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                            Convert.ToDecimal(SaleQty));

                        if (vClosingQuantity == 0)
                        {
                            vClosingAmount = 0;
                            vClosingAvgRatet = 0;

                        }
                        else
                        {
                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) -
                                              Convert.ToDecimal(SaleAmnt));
                            vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));

                        }

                        #endregion


                        #region AssignValue to List

                        vat17.Column1 = i; //    i.ToString();      // Serial No   
                        vat17.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                        vat17.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                        vat17.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                        vat17.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                        vat17.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                        vat17.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                        vat17.Column8 = vColumn8;   //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                        vat17.Column9 = vColumn9;   //    item["Address1"].ToString();      // Customer Address
                        vat17.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                        vat17.Column11 = vColumn11; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column11string = ""; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                        vat17.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                        vat17.Column14 = vColumn14; //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                        vat17.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                        vat17.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                        vat17.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                        vat17.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                        vat17.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks


                        vat17s.Add(vat17);
                        i = i + 1;

                        #endregion AssignValue to List

                    }
                    #endregion Opening
                }


                //DataRow[] DetailRawsOthers = ReportResult.Tables[1].Select("transType<>'Opening'");
                DataRow[] DetailRawsOthers = ReportResult.Tables[0].Select("transType<>'Opening'");
                if (DetailRawsOthers == null || !DetailRawsOthers.Any())
                {
                    //MessageBox.Show("There is no data to preview", this.Text);
                    //return;
                    throw new ArgumentNullException();

                }
                //string strSort = "StartDateTime ASC, SerialNo ASC";
                string strSort = "CreatedDateTime ASC, SerialNo ASC";

                DataView dtview = new DataView(DetailRawsOthers.CopyToDataTable());
                dtview.Sort = strSort;
                DataTable dtsorted = dtview.ToTable();
                #region Process

                foreach (DataRow item in dtsorted.Rows)
                {
                    #region Get from Datatable

                    OpeningQty = 0;
                    OpeningAmnt = 0;
                    ProductionQty = 0;
                    ProductionAmnt = 0;
                    SaleQty = 0;
                    SaleAmnt = 0;
                    CloseQty = 0;
                    CloseAmnt = 0;

                    vColumn1 = i;
                    vTempStartDateTime = Convert.ToDateTime(item["StartDateTime"].ToString()); // Date
                    vTempStartingQuantity = Convert.ToDecimal(item["StartingQuantity"].ToString()); // Opening Quantity
                    vTempStartingAmount = Convert.ToDecimal(item["StartingAmount"].ToString()); // Opening Price
                    vTempQuantity = Convert.ToDecimal(item["Quantity"].ToString()); // Production Quantity
                    vTempSubtotal = Convert.ToDecimal(item["UnitCost"].ToString()); // Production Price
                    vTempCustomerName = item["CustomerName"].ToString(); // Customer Name
                    vTempVATRegistrationNo = item["VATRegistrationNo"].ToString(); // Customer VAT Reg No
                    vTempAddress1 = item["Address1"].ToString(); // Customer Address
                    vTempTransID = item["TransID"].ToString(); // Sale Invoice No
                    vTemptransDate = Convert.ToDateTime(item["StartDateTime"].ToString()); // Sale Invoice Date and Time
                    vTempProductName = item["ProductName"].ToString(); // Sale Product Name
                    vTempSDAmount = Convert.ToDecimal(item["SD"].ToString()); // SD Amount
                    vTempVATAmount = Convert.ToDecimal(item["VATRate"].ToString()); // VAT Amount
                    vTempremarks = item["remarks"].ToString(); // Remarks
                    vTemptransType = item["TransType"].ToString().Trim();

                    #region Bureau
                    //if (Program.IsBureau == true)
                    if (false)
                    {
                        ProductName = item["ProductName"].ToString().Trim();
                        HSCode = item["HSCodeNo"].ToString().Trim();
                    }

                    #endregion

                    #endregion Get from Datatable

                    if (vTemptransType.Trim() == "Sale")
                    {
                        vat17 = new VAT_17VM();
                        #region if row 1 Opening

                        if (vTempremarks.Trim() == "ServiceNS"
                           || vTempremarks.Trim() == "ServiceNSImport"
                           )
                        {
                            OpeningQty = 0;
                            OpeningAmnt = 0;
                        }
                        else
                        {
                            OpeningQty = OpQty + vClosingQuantity;
                            OpeningAmnt = OpAmnt + vClosingAmount;
                        }


                        OpAmnt = 0;
                        OpQty = 0;

                        ProductionQty = 0;
                        ProductionAmnt = 0;
                        SaleQty = vTempQuantity;
                        if (vTempremarks.Trim() == "TradingTender"
                            || vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Tender"
                            || vTempremarks.Trim() == "Export"
                            )
                        {
                            //SaleAmnt = vTempQuantity * vClosingAvgRatet;
                            SaleAmnt = vTempSubtotal;

                        }
                        else
                        {
                            SaleAmnt = vTempSubtotal;
                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        { }
                        else
                        {
                            SaleAmnt = Convert.ToDecimal(SaleAmnt.ToString());
                        }


                        if (SaleQty == 0)
                        {
                            avgRate = 0;
                        }
                        else
                        {
                            avgRate = SaleAmnt / SaleQty;

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        { }
                        else
                        {
                            avgRate = Convert.ToDecimal(avgRate.ToString());
                        }
                        CloseQty =
                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                             Convert.ToDecimal(SaleQty));
                        CloseAmnt = CloseQty * avgRate;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                        vColumn2 = vTempStartDateTime;

                        string returnTransType = GetReturnType(itemNo, vTempremarks.Trim());

                        if (vTempremarks.Trim() == "ServiceNS"
                            || vTempremarks.Trim() == "ExportServiceNS"
                            || returnTransType == "ServiceNS"
                            )
                        {
                            vColumn3 = 0;
                            vColumn4 = 0;
                            vColumn5 = 0;
                            vColumn6 = 0;
                        }
                        else
                        {
                            vColumn3 = OpeningQty;// vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                            vColumn4 = OpeningAmnt;// vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());

                            vColumn5 = 0;// Convert.ToDecimal(ProductionQty.ToString());
                            vColumn6 = 0;// Convert.ToDecimal(ProductionAmnt.ToString());
                        }
                        vColumn7 = vTempCustomerName;
                        vColumn8 = vTempVATRegistrationNo;
                        vColumn9 = vTempAddress1;
                        vColumn10 = vTempTransID;
                        vColumn11 = vTemptransDate;
                        vColumn12 = vTempProductName;
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        {
                            vColumn13 = SaleQty;
                            vColumn14 = SaleAmnt;
                        }
                        else
                        {
                            vColumn13 = Convert.ToDecimal(SaleQty.ToString());
                            vColumn14 = Convert.ToDecimal(SaleAmnt.ToString());
                        }
                        vColumn15 = vTempSDAmount;
                        vColumn16 = vTempVATAmount;
                        if (vTempremarks.Trim() == "ServiceNS"
                            || vTempremarks.Trim() == "ExportServiceNS"
                            || returnTransType == "ServiceNS"
                            )
                        {
                            vColumn17 = 0;
                            vColumn18 = 0;
                        }
                        else
                        {
                            vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                            vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());

                            //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                            //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                        }
                        vColumn19 = vTempremarks;
                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                            Convert.ToDecimal(SaleQty));

                        vClosingQuantityNew = vColumn17;
                        vClosingAmountNew = vColumn18;
                        vUnitRate = Convert.ToDecimal(item["UnitRate"].ToString().Trim());

                        if (vClosingQuantity == 0)
                        {
                            //Change at 29-04-14
                            //vClosingAmount = 0;
                            //vClosingAvgRatet = 0;
                            vClosingAmount = CloseAmnt;

                        }
                        else
                        {
                            //vClosingAmount = vClosingQuantity * avgRate;
                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                            if (vTempremarks.Trim() == "TradingTender"
                            || vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Tender"
                            || vTempremarks.Trim() == "Export"
                            )
                            {

                            }
                            else
                            {
                                vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));
                            }

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        {

                        }
                        else
                        {
                            vClosingAvgRatet = Convert.ToDecimal(vClosingAvgRatet.ToString());
                        }
                        #endregion
                        #region AssignValue to List

                        vat17.Column1 = i; //    i.ToString();      // Serial No   
                        vat17.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                        vat17.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                        vat17.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                        vat17.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                        vat17.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                        vat17.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                        vat17.Column8 = vColumn8;//    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                        vat17.Column9 = vColumn9; //    item["Address1"].ToString();      // Customer Address
                        vat17.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                        vat17.Column11 = vColumn11;//    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column11string = Convert.ToDateTime(vColumn11).ToString("dd/MM/yy HH:mm"); //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                        vat17.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                        vat17.Column14 = vColumn14;//    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                        vat17.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                        vat17.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                        vat17.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                        vat17.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                        vat17.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks
                        if (vColumn18 != vColumn17 * vUnitRate)
                        {
                            //AutoAdjustment = true;
                            //vAdjustmentValue = vColumn18 - (vColumn17 * vUnitRate);
                            vAdjustmentValue = (vColumn17 * vUnitRate) - vColumn18;
                        }

                        vat17s.Add(vat17);
                        i = i + 1;

                        #endregion AssignValue to List

                        //// Service related company has no need auto adjustment
                        //if (Program.IsBureau == false)
                        if (true)
                        {
                            if (avgRate == vClosingAvgRatet)
                            {
                                //vat17s.Add(vat17);
                            }
                            //if (AutoAdjustment == true)
                            if (false)
                            {
                                #region SaleAdjustment
                                //if (avgRate != vClosingAvgRatet)
                                if (vColumn18 != vColumn17 * vUnitRate)
                                {

                                    decimal a = 0;
                                    decimal b = 0;
                                    if (vClosingQuantity == 0)
                                    {
                                        a = avgRate;          //1950
                                        b = vClosingAvgRatet; //1350
                                    }
                                    else
                                    {
                                        a = avgRate * vClosingQuantity;           //1950
                                        b = vClosingAvgRatet * vClosingQuantity; //1350

                                    }

                                    decimal c = b - a;// Convert.ToDecimal(b.ToString(),1)) - Convert.ToDecimal(a.ToString(),1));
                                    c = Convert.ToDecimal(c.ToString());
                                    //hide 0 value row
                                    if (c != 0)
                                    {
                                        VAT_17VM vat17Adj = new VAT_17VM();
                                        #region if row 1 Opening

                                        OpeningQty = OpQty + vClosingQuantity;
                                        OpeningAmnt = OpAmnt + vClosingAmount;
                                        OpAmnt = 0;
                                        OpQty = 0;

                                        ProductionQty = 0;
                                        ProductionAmnt = 0;
                                        SaleQty = 0;
                                        if (vTempremarks.Trim() == "TradingTender"
                                   || vTempremarks.Trim() == "ExportTradingTender"
                                   || vTempremarks.Trim() == "ExportTender"
                                   || vTempremarks.Trim() == "Tender"
                                            || vTempremarks.Trim() == "Export"
                                   )
                                        {
                                            if (vClosingQuantity == 0)
                                            {

                                                //SaleAmnt = (avgRate - vClosingAvgRatet) * vTempQuantity;
                                                SaleAmnt = (vClosingAvgRatet - avgRate) * vTempQuantity;
                                            }
                                            else
                                            {
                                                SaleAmnt = (vTempQuantity * vClosingAvgRatet) - vTempSubtotal;

                                            }
                                        }
                                        else
                                        {
                                            //SaleAmnt=(avgRate* vClosingQuantity)-(vClosingAvgRatet * vClosingQuantity);  
                                            if (vClosingQuantity == 0)
                                            {
                                                SaleAmnt = c * SaleQty;
                                            }
                                            else
                                            {
                                                SaleAmnt = c;
                                            }
                                        }
                                        if (vTempremarks.Trim() == "ExportTradingTender"
                                                || vTempremarks.Trim() == "ExportTender"
                                                || vTempremarks.Trim() == "Export"
                                        )
                                        {

                                        }
                                        else
                                        {
                                            SaleAmnt = Convert.ToDecimal(SaleAmnt.ToString());
                                        }


                                        //SaleAmnt = c;

                                        if (SaleQty == 0)
                                        {
                                            avgRate = 0;
                                        }
                                        else
                                        {
                                            avgRate = SaleAmnt / SaleQty;
                                        }
                                        if (vTempremarks.Trim() == "ExportTradingTender"
                                             || vTempremarks.Trim() == "ExportTender"
                                             || vTempremarks.Trim() == "Export")
                                        {

                                        }
                                        else
                                        {
                                            avgRate = Convert.ToDecimal(avgRate.ToString());
                                        }
                                        CloseQty =
                                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                             Convert.ToDecimal(SaleQty));

                                        CloseAmnt = CloseQty * avgRate;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                                        vColumn2 = vTempStartDateTime;
                                        vColumn3 = vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                                        vColumn4 = vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());
                                        vColumn5 = 0;// Convert.ToDecimal(ProductionQty.ToString());
                                        vColumn6 = 0;//Convert.ToDecimal(ProductionAmnt.ToString());
                                        vColumn7 = vTempCustomerName;
                                        vColumn8 = vTempVATRegistrationNo;
                                        vColumn9 = vTempAddress1;
                                        vColumn10 = vTempTransID;
                                        vColumn11 = vTemptransDate;
                                        vColumn12 = vTempProductName;
                                        if (vTempremarks.Trim() == "ExportTradingTender"
                                            || vTempremarks.Trim() == "ExportTender"
                                            || vTempremarks.Trim() == "Export")
                                        {
                                            vColumn13 = 0;
                                            vColumn14 = vAdjustmentValue;//;
                                        }
                                        else
                                        {
                                            vColumn13 = 0;// Convert.ToDecimal(SaleQty.ToString());
                                            vColumn14 = Convert.ToDecimal(vAdjustmentValue.ToString());
                                        }
                                        vColumn15 = 0;
                                        vColumn16 = 0;
                                        vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                                        vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());

                                        vClosingQuantityNew = vColumn17;
                                        vClosingAmountNew = vColumn18;

                                        //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                                        //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                                        vColumn19 = "SaleAdjustment";
                                        //vClosingAmount = vClosingQuantity * avgRate;

                                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) - Convert.ToDecimal(SaleQty));
                                        if (vClosingQuantity == 0)
                                        {
                                            vClosingAmount = 0;
                                            vClosingAvgRatet = 0;
                                        }
                                        else
                                        {
                                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) -
                                                              Convert.ToDecimal(SaleAmnt));
                                            vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));
                                        }

                                        #endregion
                                        #region AssignValue to List

                                        vat17Adj.Column1 = i; //    i.ToString();      // Serial No   
                                        vat17Adj.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                                        vat17Adj.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                                        vat17Adj.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                                        vat17Adj.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                                        vat17Adj.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                                        vat17Adj.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                                        vat17Adj.Column8 = vColumn8;//    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                                        vat17Adj.Column9 = vColumn9; //    item["Address1"].ToString();      // Customer Address
                                        vat17Adj.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                                        vat17Adj.Column11 = vColumn11;//    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                        vat17Adj.Column11string = Convert.ToDateTime(vColumn11).ToString("dd/MM/yy HH:mm"); //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                        vat17Adj.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                                        vat17Adj.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                                        vat17Adj.Column14 = vColumn14;//    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                                        vat17Adj.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                                        vat17Adj.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                                        vat17Adj.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                                        vat17Adj.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                                        vat17Adj.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks


                                        //vat17.Column18 = vat17.Column18 + vat17Adj.Column6;
                                        //vat17s.Add(vat17);

                                        vat17Adj.Column4 = vat17.Column18;
                                        vat17s.Add(vat17Adj);
                                        //AutoAdjustment = false;

                                        i = i + 1;


                                        #endregion AssignValue to List
                                    }
                                }
                                #endregion SaleAdjustment
                            }

                        }
                    }
                    else if (vTemptransType == "Receive")
                    {
                        vat17 = new VAT_17VM();

                        #region if row 1 Opening

                        OpeningQty = OpQty + vClosingQuantity;
                        OpeningAmnt = OpAmnt + vClosingAmount;
                        OpAmnt = 0;
                        OpQty = 0;

                        ProductionQty = vTempQuantity;
                        ProductionAmnt = vTempSubtotal;
                        SaleQty = 0;
                        SaleAmnt = 0;
                        if (ProductionQty == 0)
                        {
                            avgRate = 0;
                        }
                        else
                        {
                            avgRate = ProductionAmnt / ProductionQty;

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                                   || vTempremarks.Trim() == "ExportTender"
                                   || vTempremarks.Trim() == "Export")
                        {

                        }
                        else
                        {
                            avgRate = Convert.ToDecimal(avgRate.ToString());
                        }
                        CloseQty =
                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                             Convert.ToDecimal(SaleQty));
                        CloseAmnt = CloseQty * avgRate;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                        vColumn2 = vTempStartDateTime;
                        vColumn3 = vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                        vColumn4 = vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());
                        vColumn5 = Convert.ToDecimal(ProductionQty.ToString());
                        vColumn6 = Convert.ToDecimal(ProductionAmnt.ToString());
                        vColumn7 = "-";
                        vColumn8 = "-";
                        vColumn9 = "-";
                        vColumn10 = "-";
                        vColumn11 = Convert.ToDateTime("1900/01/01");
                        vColumn12 = "-";
                        vColumn13 = 0;
                        vColumn14 = 0;
                        vColumn15 = 0;
                        vColumn16 = 0;
                        vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                        vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());
                        vClosingQuantityNew = vColumn17;
                        vClosingAmountNew = vColumn18;
                        vUnitRate = Convert.ToDecimal(item["UnitRate"].ToString().Trim());
                        //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                        //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                        vColumn19 = vTempremarks;

                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                            Convert.ToDecimal(SaleQty));
                        if (vClosingQuantity == 0)
                        {
                            vClosingAmount = 0;
                            vClosingAvgRatet = 0;

                        }
                        else
                        {
                            //vClosingAmount = vClosingQuantity * avgRate;

                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                            if (vTempremarks.Trim() == "TradingTender"
                           || vTempremarks.Trim() == "ExportTradingTender"
                           || vTempremarks.Trim() == "ExportTender"
                           || vTempremarks.Trim() == "Tender"
                           || vTempremarks.Trim() == "Export"
                           )
                            {
                                // change at 20150324 for Nita requierment
                                vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) /
                                                     Convert.ToDecimal(vClosingQuantity));
                            }
                            else
                            {
                                vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) /
                                                    Convert.ToDecimal(vClosingQuantity));
                            }

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                                    || vTempremarks.Trim() == "ExportTender"
                                    || vTempremarks.Trim() == "Export")
                        {

                        }
                        else
                        {
                            vClosingAvgRatet = Convert.ToDecimal(vClosingAvgRatet.ToString());
                        }
                        #endregion

                        #region AssignValue to List

                        vat17.Column1 = i; //    i.ToString();      // Serial No   
                        vat17.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                        vat17.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                        vat17.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                        vat17.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                        vat17.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                        vat17.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                        vat17.Column8 = vColumn8;   //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                        vat17.Column9 = vColumn9;   //    item["Address1"].ToString();      // Customer Address
                        vat17.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                        vat17.Column11 = vColumn11; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column11string = ""; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                        vat17.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                        vat17.Column14 = vColumn14; //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                        vat17.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                        vat17.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                        vat17.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                        vat17.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                        vat17.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks


                        vat17s.Add(vat17);
                        i = i + 1;
                        if (vColumn18 != vColumn17 * vUnitRate)
                        {
                            //AutoAdjustment = true;
                            vAdjustmentValue = (vColumn17 * vUnitRate) - vColumn18;
                        }

                        #endregion AssignValue to List

                        //if (avgRate == vClosingAvgRatet)
                        //{
                        //    vat17s.Add(vat17);
                        //}
                        //if (AutoAdjustment == true)
                        if (false)
                        {
                            #region ProductionAdjustment


                            //if (avgRate != vClosingAvgRatet)
                            if (vColumn18 != vColumn17 * vUnitRate)
                            {
                                //vColumn4
                                //vClosingAvgRatet = vColumn4 / vColumn3;
                                //decimal x = vColumn4 / vColumn3;
                                decimal a = avgRate * vClosingQuantity;         //7200
                                decimal b = vClosingAvgRatet * vClosingQuantity;//7300
                                decimal c = a - b;
                                //  b = x * vClosingQuantity;//7300
                                //c = a - b;
                                if (vTempremarks.Trim() == "TradingTender"
                              || vTempremarks.Trim() == "ExportTradingTender"
                              || vTempremarks.Trim() == "ExportTender"
                              || vTempremarks.Trim() == "Tender"
                              || vTempremarks.Trim() == "Export"
                              )
                                {
                                    c = (vClosingAvgRatet - avgRate) * ProductionQty;
                                }
                                if (vTempremarks.Trim() == "ExportTradingTender"
                                       || vTempremarks.Trim() == "ExportTender"
                                       || vTempremarks.Trim() == "Export")
                                {

                                }
                                else
                                {
                                    c = Convert.ToDecimal(c.ToString());
                                }
                                //hide 0 value row
                                if (c != 0)
                                {
                                    VAT_17VM vat17Adj = new VAT_17VM();

                                    #region if row 1 Opening

                                    OpeningQty = OpQty + vClosingQuantity;
                                    OpeningAmnt = OpAmnt + vClosingAmount;
                                    OpAmnt = 0;
                                    OpQty = 0;

                                    ProductionQty = 0;
                                    ProductionAmnt = c;
                                    SaleQty = 0;
                                    SaleAmnt = 0;
                                    CloseQty =
                                        (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                         Convert.ToDecimal(SaleQty));
                                    CloseAmnt = avgRate * vClosingQuantity;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                                    vColumn2 = vTempStartDateTime;
                                    vColumn3 = vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                                    vColumn4 = vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());
                                    vColumn5 = Convert.ToDecimal(ProductionQty.ToString());
                                    vColumn6 = vAdjustmentValue;// vColumn18 - vColumn4;// Convert.ToDecimal(ProductionAmnt.ToString());
                                    vColumn7 = "-";
                                    vColumn8 = "-";
                                    vColumn9 = "-";
                                    vColumn10 = "-";
                                    vColumn11 = Convert.ToDateTime("1900/01/01");
                                    vColumn12 = "-";
                                    vColumn13 = 0;
                                    vColumn14 = 0;
                                    vColumn15 = 0;
                                    vColumn16 = 0;
                                    vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                                    vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());
                                    vClosingQuantityNew = vColumn17;
                                    vClosingAmountNew = vColumn18;
                                    //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                                    //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                                    vColumn19 = "ProductionAdjustment";

                                    vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                                        Convert.ToDecimal(SaleQty));
                                    if (vClosingQuantity == 0)
                                    {
                                        vClosingAmount = 0;
                                        vClosingAvgRatet = 0;

                                    }
                                    else
                                    {
                                        //vClosingAmount = vClosingQuantity * avgRate;
                                        vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                                        vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));

                                    }

                                    #endregion

                                    #region AssignValue to List

                                    vat17Adj.Column1 = i; //    i.ToString();      // Serial No   
                                    vat17Adj.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                                    vat17Adj.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                                    vat17Adj.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                                    vat17Adj.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                                    vat17Adj.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                                    vat17Adj.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                                    vat17Adj.Column8 = vColumn8;
                                    //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                                    vat17Adj.Column9 = vColumn9; //    item["Address1"].ToString();      // Customer Address
                                    vat17Adj.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                                    vat17Adj.Column11 = vColumn11;//    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                    vat17Adj.Column11string = ""; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                    vat17Adj.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                                    vat17Adj.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                                    vat17Adj.Column14 = vColumn14;
                                    //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                                    vat17Adj.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                                    vat17Adj.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                                    vat17Adj.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                                    vat17Adj.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                                    vat17Adj.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks



                                    //vat17.Column18 = vat17.Column18 + vat17Adj.Column6;
                                    //vat17s.Add(vat17);
                                    //vat17Adj.Column4 = vat17.Column18;
                                    vat17s.Add(vat17Adj);
                                    i = i + 1;

                                    #endregion AssignValue to List
                                }
                            }
                            #endregion ProductionAdjustment
                        }

                    }

                }

                #endregion Process
            }
            catch (Exception ex)
            {
                vat17s = new List<VAT_17VM>();
            }
            finally
            {

            }
            return vat17s;
        }

        public DataSet BOMWiseStock(string ReferenceNo, string IssueDateFrom, string IssueDateTo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("Stock Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
select distinct b.BOMId, b.ReferenceNo, p.ProductName,p.UOM, isnull(sum(rd.UOMQty),0) ProductionQuantity, isnull(sum(sd.UOMQty),0) SaleQuantity from boms b
left outer join  SalesInvoiceDetails sd on b.bomid=sd.bomid and   b.finishItemno=sd.ItemNo 
left outer join  ReceiveDetails rd on b.bomid=rd.bomid and   b.finishItemno=rd.ItemNo 
left outer join Products p on b.FinishItemNo=p.ItemNo
where 1=1
";

                #region Where

                if (!string.IsNullOrWhiteSpace(ReferenceNo))
                {
                    sqlText += " and b.ReferenceNo=@ReferenceNo";
                }

                if (!string.IsNullOrWhiteSpace(IssueDateFrom))
                {
                    sqlText += " and sd.InvoiceDateTime >=@IssueDateFrom ";
                }
                if (!string.IsNullOrWhiteSpace(IssueDateTo))
                {
                    sqlText += " and sd.InvoiceDateTime <=@IssueDateTo ";
                }

                #endregion Where

                sqlText += @" group by b.BOMId, b.ReferenceNo,  p.ProductName,p.UOM
order by  p.ProductName";


                sqlText +=
                  @"
select  isnull(b.ReferenceNo,'')ReferenceNo,sh.SalesInvoiceNo,c.CustomerName, sh.InvoiceDateTime,p.ProductName,sd.UOM,sd.Quantity,sd.NBRPrice,sd.SubTotal,sd.VATAmount  from SalesInvoiceDetails sd
left outer join SalesInvoiceHeaders sh on sd.SalesInvoiceNo=sh.SalesInvoiceNo
left outer join boms b on sd.BOMId=b.BOMId
left outer join Products p on sd.ItemNo=p.ItemNo
left outer join Customers c on sh.CustomerID=c.CustomerID
where 1=1
";
                #region Where

                if (!string.IsNullOrWhiteSpace(ReferenceNo))
                {
                    sqlText += " and b.ReferenceNo=@ReferenceNo";
                }

                if (!string.IsNullOrWhiteSpace(IssueDateFrom))
                {
                    sqlText += " and sh.InvoiceDateTime >=@IssueDateFrom ";
                }
                if (!string.IsNullOrWhiteSpace(IssueDateTo))
                {
                    sqlText += " and sh.InvoiceDateTime <=@IssueDateTo ";
                }

                #endregion Where
                sqlText += @" order by sh.SalesInvoiceNo,p.ProductName";


                sqlText +=
                @"
select isnull(b.ReferenceNo,'')ReferenceNo,sh.ReceiveNo , sh.ReceiveDateTime,p.ProductName,sd.UOM,sd.Quantity,sd.NBRPrice,sd.SubTotal,sd.VATAmount  from ReceiveDetails sd
left outer join ReceiveHeaders sh on sd.ReceiveNo=sh.ReceiveNo
left outer join boms b on sd.BOMId=b.BOMId
left outer join Products p on sd.ItemNo=p.ItemNo
where 1=1
";
                #region Where

                if (!string.IsNullOrWhiteSpace(ReferenceNo))
                {
                    sqlText += " and b.ReferenceNo=@ReferenceNo";
                }

                if (!string.IsNullOrWhiteSpace(IssueDateFrom))
                {
                    sqlText += " and sh.ReceiveDateTime >=@IssueDateFrom ";
                }
                if (!string.IsNullOrWhiteSpace(IssueDateTo))
                {
                    sqlText += " and sh.ReceiveDateTime <=@IssueDateTo ";
                }

                #endregion Where
                sqlText += @" order by sh.ReceiveNo,p.ProductName";

                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommIssueReport.Parameters.AddWithValue("@ReferenceNo", ReferenceNo);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateFrom", IssueDateFrom);
                objCommIssueReport.Parameters.AddWithValueAndNullHandle("@IssueDateTo", IssueDateTo);

                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BOMWiseStock", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BOMWiseStock", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }
        #endregion

        #region Export excel

        public DataTable ExportInvoiceWiseSalesData(string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable("InvoiceWise");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                sqlText = " ";
                sqlText = @" 

select 
 sid.SalesInvoiceNo SalesInvoiceNo
,format(sid.InvoiceDateTime,'dd-MMM-yyyy') InvoiceDateTime
,cus.CustomerName
, cus.CustomerCode
,isnull(cus.VATRegistrationNo,'-') VATRegistrationNo
,sih.DeliveryAddress1 DeliveryAddress
,sum(isnull(sid.UOMQty,0)) UOMQty
,sum(isnull(sid.SubTotal,0)) SubTotal
,sum(isnull(sid.VATAmount,0)) VATAmount
,'' Remarks
,SUM(ISNULL(sid.SDAmount, 0)) AS SDAmount
,SUM(ISNULL(sid.SubTotal, 0) * ISNULL(sih.TCSRate, 0) / 100) AS TCS 
, isnull(sih.TotalAmount,0) TotalAmount 
,ISNULL (sih.ImportIDExcel,0) AS  ImportID


from SalesInvoiceDetails sid
left outer join SalesInvoiceHeaders sih on sih.SalesInvoiceNo=sid.SalesInvoiceNo
left outer join Customers cus on sih.CustomerID=cus.CustomerID
left outer join CustomerGroups cg on cg.CustomerGroupID=cus.CustomerGroupID
left outer join Products p on p.ItemNo=sid.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID

where 1=1 
and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
,'ExportTrading','ExportTradingTender','ExportService'
,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')


";
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                sqlText += @"
group by

 sid.SalesInvoiceNo 
,sid.InvoiceDateTime
,cus.CustomerName
,cus.CustomerCode
,cus.VATRegistrationNo
,sih.DeliveryAddress1
,sih.ImportIDExcel
,sih.TotalAmount
";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            dataAdapter.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            dataAdapter.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                dataAdapter.Fill(dt);

                #region Rename Column Name

                dt.Columns["SalesInvoiceNo"].ColumnName = "VAT Challan No";
                dt.Columns["InvoiceDateTime"].ColumnName = "VAT Challan Date";
                dt.Columns["CustomerName"].ColumnName = "Customer Name";
                dt.Columns["CustomerCode"].ColumnName = "Customer Code";
                dt.Columns["VATRegistrationNo"].ColumnName = "Customer BIN";
                dt.Columns["DeliveryAddress"].ColumnName = "Customer Address";
                dt.Columns["UOMQty"].ColumnName = "Total Quantity";
                dt.Columns["SubTotal"].ColumnName = "Total VAT base Value";
                dt.Columns["VATAmount"].ColumnName = "Total VAT";
                dt.Columns["SDAmount"].ColumnName = "SD Amount";
                dt.Columns["TotalAmount"].ColumnName = "Grand Total";
                dt.Columns["ImportID"].ColumnName = "Import ID";

                


                #endregion


                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ExportInvoiceWiseSalesData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }

            #endregion

            return dt;
        }

        public DataTable ExportDateWiseSalesData(string[] conditionFields = null, string[] conditionValues = null, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable("InvoiceWise");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                sqlText = " ";
                sqlText = @" 

select 
format(sid.InvoiceDateTime,'dd-MMM-yyyy') InvoiceDateTime
,count(distinct sih.SalesInvoiceNo)NoOfInvoice
,sum(isnull(sid.UOMQty,0)) UOMQty
,sum(isnull(sid.SubTotal,0)) SubTotal
,sum(isnull(sid.VATAmount,0)) VATAmount
,'' Remarks
from SalesInvoiceDetails sid
left outer join SalesInvoiceHeaders sih on sih.SalesInvoiceNo=sid.SalesInvoiceNo
left outer join Customers cus on sih.CustomerID=cus.CustomerID
left outer join CustomerGroups cg on cg.CustomerGroupID=cus.CustomerGroupID
left outer join Products p on p.ItemNo=sid.ItemNo
left outer join ProductCategories pc on p.CategoryID=pc.CategoryID

where 1=1 
and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
,'ExportTrading','ExportTradingTender','ExportService'
,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')

";
                string cField = "";
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int i = 0; i < conditionFields.Length; i++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[i]) || string.IsNullOrEmpty(conditionValues[i]) || conditionValues[i] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[i].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[i].ToLower().Contains("like"))
                        {
                            sqlText += " AND " + conditionFields[i] + " '%'+ " + " @" + cField.Replace("like", "").Trim() + " +'%'";
                        }
                        else if (conditionFields[i].Contains(">") || conditionFields[i].Contains("<"))
                        {
                            sqlText += " AND " + conditionFields[i] + " @" + cField;

                        }
                        else
                        {
                            sqlText += " AND " + conditionFields[i] + "= @" + cField;
                        }
                    }
                }

                sqlText += @"

group by
format(sid.InvoiceDateTime,'dd-MMM-yyyy')

";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                if (conditionFields != null && conditionValues != null && conditionFields.Length == conditionValues.Length)
                {
                    for (int j = 0; j < conditionFields.Length; j++)
                    {
                        if (string.IsNullOrEmpty(conditionFields[j]) || string.IsNullOrEmpty(conditionValues[j]) || conditionValues[j] == "0")
                        {
                            continue;
                        }
                        cField = conditionFields[j].ToString();
                        cField = OrdinaryVATDesktop.StringReplacing(cField);
                        if (conditionFields[j].ToLower().Contains("like"))
                        {
                            dataAdapter.SelectCommand.Parameters.AddWithValue("@" + cField.Replace("like", "").Trim(), conditionValues[j]);
                        }
                        else
                        {
                            dataAdapter.SelectCommand.Parameters.AddWithValue("@" + cField, conditionValues[j]);
                        }
                    }
                }

                dataAdapter.Fill(dt);

                #region Rename Column Name

                dt.Columns["NoOfInvoice"].ColumnName = "No Of Invoice";
                dt.Columns["InvoiceDateTime"].ColumnName = "VAT Challan Date";
                dt.Columns["UOMQty"].ColumnName = "Total Quantity";
                dt.Columns["SubTotal"].ColumnName = "Total VAT base Value";
                dt.Columns["VATAmount"].ColumnName = "Total VAT";

                #endregion

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ExportDateWiseSalesData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }

            #endregion

            return dt;
        }


        #endregion

        #region Not Used from Year-2019

        public DataSet VAT16NewBackup3(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase',pd.ReceiveNo,
@ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,pd.TransactionType,pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime >=@StartDate and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNS')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNSImport')


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)),
isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
--select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
--,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
--pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
--from PurchaseInvoiceDetails PD 
--where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
--and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
--AND (pd.Post =@post1 or pd.Post= @post2)
--AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputServiceImport')";

                if (ImportCostingIncludeATV)
                {
                    sqlText += @"insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";
                }
                else
                {
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,0 UnitCost
,0  UOMQty ,pd.ATVAmount ,0 SDAmount,'Import ATV' TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                }

                sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 

AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')

--Add for TollReceive
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

-- Add by ruba for internalsale,service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,

SubTotal,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),0,SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

----Transfer Raw1 to Raw2(Receive Raw2)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Purchase','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.ItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)


---- end purchase---
---- start Issue---
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','OtherToll')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
--Quantity,VATRate,SD,Remarks,CreateDateTime)
--select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
--,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
--from IssueDetails ID
--where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
--and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
--AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
---isnull(NULLIF(SubTotal,0),0),
-isnull(UOMQty,0)*isnull(AVGPrice,0),
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading', 'TollReceive-WIP','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  ";
                if (ImportCostingIncludeATV)
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }
                else
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";

                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0) +isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import' ) 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }


                sqlText += @"	 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL (
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16NewBackup3", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16NewBackup3", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet VAT16NewOld(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase',pd.ReceiveNo,
@ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,pd.TransactionType,pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime >=@StartDate and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNS')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNSImport')


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)),
isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')
 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputServiceImport')";

                if (ImportCostingIncludeATV)
                {
                    sqlText += @"insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";
                }
                else
                {
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,0 UnitCost
,0  UOMQty ,pd.ATVAmount ,0 SDAmount,'Import ATV' TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
and pd.ATVAmount>0
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                }

                sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 

AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')

--Add for TollReceive
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

-- Add by ruba for internalsale,service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,
SubTotal,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),0,SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  

----Transfer Raw1 to Raw2(Receive Raw2)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Purchase','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.ItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)


---- end purchase---
---- start Issue---
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','OtherToll')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
--Quantity,VATRate,SD,Remarks,CreateDateTime)
--select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
--,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
--from IssueDetails ID
--where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
--and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
--AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
--Quantity,VATRate,SD,Remarks,CreateDateTime)
--select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
--,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
--from IssueDetails ID
--where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
--and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
--AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
---isnull(NULLIF(SubTotal,0),0),
-isnull(UOMQty,0)*isnull(AVGPrice,0),
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading', 'TollReceive-WIP','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  ";
                if (ImportCostingIncludeATV)
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }
                else
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";

                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0) +isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import' ) 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }


                sqlText += @"	 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn','TollIssue') 
AND ItemNo = @itemNo  AND (UOMQty>0))  



 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y') AND sih.TransactionType IN('VAT26')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-0--isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('RawSale')  
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL 
(
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16NewOld", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16NewOld", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT16New13052019(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL
,TransactionType [varchar] (200)  
) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase',pd.ReceiveNo,
@ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,pd.TransactionType,pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime >=@StartDate and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNS')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNSImport')


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)),
isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')
 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')  and pd.TransactionType not IN('PurchaseCN','PurchaseDN','PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputServiceImport')";

                if (ImportCostingIncludeATV)
                {
                    sqlText += @"insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";
                }
                else
                {
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,0 UnitCost
,0  UOMQty ,pd.ATVAmount ,0 SDAmount,'Import ATV' TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
and pd.ATVAmount>0
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                }

                sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 

AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')

--Add for TollReceive
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

-- Add by ruba for internalsale,service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,
SubTotal,isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),0,SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
isnull(UOMQty,0)*isnull(AVGPrice,0),
 (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('RawSale')  

----Transfer Raw1 to Raw2(Receive Raw2)

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
--Quantity,VATRate,SD,Remarks,CreateDateTime)
--
--select 'A1',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Purchase','-'
--,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
--from TransferRawDetails TD
--where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
--and TD.ItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)


---- end purchase---
---- start Issue---
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','OtherToll')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
--Quantity,VATRate,SD,Remarks,CreateDateTime)
--select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
--,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
--from IssueDetails ID
--where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
--and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
--AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
---isnull(NULLIF(SubTotal,0),0),
-isnull(UOMQty,0)*isnull(AVGPrice,0),
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive



----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading', 'TollReceive-WIP','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  ";
                if (ImportCostingIncludeATV)
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }
                else
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";

                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0) +isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import' ) 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }


                sqlText += @"	 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(
SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn')
AND ItemNo = @itemNo  AND (UOMQty>0))  

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   


 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 




UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y')   
and DisposeDetails.TransactionType IN('VAT26')  )

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-0--isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('RawSale')  
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL 
(
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16New13052019", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT16New13052019", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet VAT17New13052019(string ItemNo, string StartDate, string EndDate, string post1, string post2)
        {
            //Delete all #VAT_17_0 information. It is not necessary for calculation. 
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");


            #endregion

            #region Try

            try
            {
                #region vat19 value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT9_1", "ExportInBDT");

                #endregion vat19 value

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += "from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += "where p.ItemNo = '" + ItemNo + "'";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn);
                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }


                var top = "";
                sqlText = " ";


                #region SQL

                sqlText += @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);
--DECLARE @ItemNo VARCHAR(20);

--DECLARE @IsExport VARCHAR(20);
--SET @IsExport ='No';

--SET @Itemno='24';
--SET @post1='Y';
--SET @post2='N';
--SET @StartDate='2014-04-01';
--SET @EndDate= '2014-04-27';

 

             
declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9))

CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9)) 
 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('Other')

---- Only for wastage 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('Wastage')
------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select  'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('TollFinishReceive')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('Tender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),-rd.VATAmount
,-rd.SDAmount,RD.TransactionType,rd.CreatedOn,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ReceiveReturn')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('TollReceive')


insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('Service')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN discountednbrprice*UOMQty ELSE discountednbrprice*UOMQty END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,discountednbrprice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ExportService')


insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0)
,isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('Trading','TradingImport')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0)
,isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('PackageProduction')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' then discountednbrprice*UOMQty ELSE discountednbrprice*UOMQty END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,discountednbrprice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ExportTradingTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN discountednbrprice*UOMQty ELSE discountednbrprice*UOMQty END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,discountednbrprice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ExportTrading')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('TradingTender')
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,'Transfer',rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('InternalIssue')

-- Add by ruba for internalsale,Service Stock and trading(20140316)

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', InvoiceDateTime,SalesInvoiceNo,'Receive',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
- ( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
----


------end receive--------
------start Sale--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Sale',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other')

------Only for Wastage
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Sale',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Wastage')

------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('PackageSale')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('PackageProduction')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Service')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ServiceNS')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Trading')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TradingTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN discountednbrprice*UOMQty ELSE discountednbrprice*UOMQty END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) END AS VATRate, 
SDAmount,TransactionType,InvoiceDateTime,discountednbrprice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Export')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN discountednbrprice*UOMQty ELSE discountednbrprice*UOMQty END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) END AS VATRate, 
SDAmount,TransactionType,InvoiceDateTime,discountednbrprice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportService')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) END AS VATRate, 
SDAmount,TransactionType,InvoiceDateTime,discountednbrprice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportTrading')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) END AS VATRate, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*SD/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*SD/100,0),0) END AS SD, 
TransactionType,InvoiceDateTime,discountednbrprice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportTradingTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) END AS VATRate, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*SD/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*SD/100,0),0) END AS SD, 
TransactionType,InvoiceDateTime,discountednbrprice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportPackage')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*VATRate/100,0),0) END AS VATRate, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(discountednbrprice*UOMQty*SD/100,0),0) ELSE isnull(NULLIF(discountednbrprice*UOMQty*SD/100,0),0) END AS SD, 
TransactionType,InvoiceDateTime,discountednbrprice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Tender')

--Ruba
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,CreatedOn,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollFinishIssue')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ServiceStock')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Transfer',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('InternalIssue')

----Add for TollReceive
--insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
--select 'B1',id.IssueDateTime,id.IssueNo,'Sale',@ItemNo,
--isnull(id.subtotal,0) ,isnull(id.UOMQty,0) ,
--id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
--from IssueDetails id   where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
--and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
--AND id.TransactionType IN('TollReceiveReturn') 

------end sale--------
------Start Disposee--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', DisposeDetails.DisposeDate,DisposeDetails.DisposeNumber,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(DollarPrice,0),0) ELSE isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0) END AS SubTotal,
isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,sih.TransactionType,DisposeDetails.DisposeDate,RealPrice
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >= @StartDate and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)

AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT27') and sih.FromStock in ('Y')

------end Disposee--------

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate


insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
 SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  

UNION ALL 

(SELECT @itemNo ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
 FROM ReceiveDetails WHERE Post='Y'  AND ReceiveDateTime< @StartDate   
  and TransactionType not IN('ReceiveReturn') AND ItemNo = @itemNo ) 
UNION ALL
(SELECT @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM ReceiveDetails WHERE Post='Y'  AND ReceiveDateTime< @StartDate   
 and TransactionType IN('ReceiveReturn') AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate     
AND TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','Trading','TradingTender','Tender','Debit','TollFinishIssue','ServiceStock','InternalIssue') AND ItemNo = @itemNo )  
UNION ALL  
(SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleExpQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(discountednbrprice*UOMQty,0)),0) ELSE isnull(sum(isnull(discountednbrprice*UOMQty,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate      
AND TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender') AND ItemNo = @itemNo )  
UNION ALL
(SELECT @itemNo ItemNo,isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleCreditQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate    
 AND TransactionType in( 'Credit') AND ItemNo = @itemNo )
UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(DollarPrice,0)),0) ELSE isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0) END 
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber  
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')  AND sih.TransactionType IN('VAT27')     and sih.FromStock in ('Y'))    

) AS a GROUP BY a.ItemNo

insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate  
from #VATTemp_17
order by dailydate,SerialNo;

update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)

select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
#VAT_17.TransID,#VAT_17.TransType,
isnull(c.CustomerName,'-')CustomerName,
isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
isnull(c.Address3,'-')Address3,
isnull(c.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
,#VAT_17.SD,#vat_17.UnitCost,remarks
,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime, isnull(#vat_17.UnitRate ,0)UnitRate 
from #VAT_17  left outer JOIN 
Customers as C on #VAT_17.CustomerID=c.CustomerID left outer join 
Products P on #VAT_17.ItemNo=p.ItemNo

order by CreatedDateTime,SerialNo

DROP TABLE #VAT_17
DROP TABLE #VATTemp_17

                ";

                #endregion SQL



                top = "A";




                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();

                objCommVAT17.Connection = currConn;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }

                if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
                }

                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
                }
                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@StartDate_0"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@StartDate_0", StartDate_0);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@StartDate_0"].Value = StartDate_0;
                //}
                //if (!objCommVAT17.Parameters.Contains("@EndDate_0"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@EndDate_0", EndDate_0);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@EndDate_0"].Value = EndDate_0;
                //}

                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = post1;
                }
                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT17New13052019", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT17New13052019", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT18New10032019(string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();
                decimal WareHouseRentPerQuantity = 0;
                bool CommercialImporter = false;
                var vWareHouseRentPerQuantity = commonDal.settings("Sale", "WareHouseRentPerQuantity");
                var vCommercialImporter = commonDal.settings("Sale", "CommercialImporter");

                if (!string.IsNullOrEmpty(vWareHouseRentPerQuantity))
                    WareHouseRentPerQuantity = Convert.ToDecimal(vWareHouseRentPerQuantity);

                if (!string.IsNullOrEmpty(vCommercialImporter))
                    CommercialImporter = Convert.ToString(vCommercialImporter) == "Y" ? true : false;

                string gototop = string.Empty;

                #region statement
                // Delete all tarrife type info.
                sqlText = @"
DECLARE @CommercialImporter VARCHAR(200);
DECLARE @WareHouseRentPerQuantity decimal(18,2);
";
                sqlText += @" set @WareHouseRentPerQuantity='" + WareHouseRentPerQuantity + "' ";

                sqlText += @"
--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2015-03-01'
--SET @EndDate='2015-03-25'
--SET @post1='Y';
--SET @post2='N';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
--where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')

UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Other','RawSale','ServiceStock','Service','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS','Wastage')

";
                if (CommercialImporter)
                {
                    sqlText += @" 
UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.Quantity),0)*@WareHouseRentPerQuantity*15/100 Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Trading')
";
                }
                else
                {
                    sqlText += @" 
UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Trading')
";
                }
                sqlText += @" 
 
UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

SELECT 'Z9' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('debit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')

--add by ruba for calculating ATVAmount of InputServiceImport

UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

UNION ALL

select 'Z17' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

UNION ALL

select 'Z18' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury-Credit')


----close
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,-isnull(DepositAmount,0),'TreasuryCredit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Sale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Other','Wastage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'RawSale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('RawSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
 

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Service',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                if (CommercialImporter)
                {
                    sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.Quantity),0)*@WareHouseRentPerQuantity*15/100,'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                }
                else
                {
                    sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                }
                sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TradingTender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'Export',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportService',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportService')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTrading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTrading')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTradingTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Tender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Tender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Transfer',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('InternalIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Debit',
0,isnull(sum(SID.VATAmount),0),'Debit',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Debit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TollFinishIssue',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TollFinishIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceStock',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceStock')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageSale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageProduction',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageProduction')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ExportPackage',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportPackage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Credit',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'DDB',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat<>0 ) AND Remarks<>'Opening'

--UNION ALL
--select  Serial,  #VAT_18.StartDateTime StartDateTime,
--#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
--isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
--from #VAT_18    where Remarks in ('CreditPayble','ShortageRebatable','TreasuryCredit') AND (vat < 0)

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18

                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;


                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18New10032019", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT18New10032019", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT19New(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement
                #region declare
                sqlText = @"



--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='October-2014';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY] 
 ";
                #endregion declare
                #region 1
                sqlText += @"
----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
 ";
                #endregion 1
                #region 2

                sqlText += @"

-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN
	INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','1','Export in BDT(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2','Export in BDT(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','4','Export in BDT(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','5','Export in BDT(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','6','Export in BDT(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','7','Export in BDT(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')
END
ELSE
	BEGIN
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

	END
-------2 end-------
 ";
                #endregion 2
                #region 3

                sqlText += @"

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end
 ";
                #endregion 3
                #region 4

                sqlText += @"

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----
 ";
                #endregion 4
                #region 5

                sqlText += @"

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----
 ";
                #endregion 5
                #region 6

                sqlText += @"

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----
 ";
                #endregion 6
                #region 7

                sqlText += @"

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
 ";
                #endregion 7
                #region 8

                sqlText += @"


-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
--,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
 ";
                #endregion 8
                #region 9 & 10

                sqlText += @"

---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----
 ";
                #endregion 9 & 10
                #region 11 & 12

                sqlText += @"

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(ATVAmount),0),0,
0,'12','4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)

------------------
-------12 End----
 ";
                #endregion 11  12
                #region 13

                sqlText += @"

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase InputServiceImport Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','4','Purchase ATV Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
 

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------
 ";
                #endregion 13
                #region 14 & 15

                sqlText += @"

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----

 ";
                #endregion 14 & 15
                #region 16

                sqlText += @"


--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----
 ";
                #endregion 16
                #region 17 , 18 19

                sqlText += @"

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'19','1','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')
-------19 End----
 ";
                #endregion 17,18,19
                #region Update #VAT 19 from #VAT19BreakDown

                sqlText += @"


INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19
                 ";
                #endregion Update #VAT 19 from #VAT19BreakDown

                #endregion


                gotoTop = string.Empty;

                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT19New", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT19New", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet ReportVAT1GaNewBackup05102013(string FinishItemNo, string EffectDate, string VATName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Ga");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"
        
--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

SELECT SL,RawItemNo,ProductCode,ProductName, ProductDescription,
CategoryName,IsRaw,
BOMRawId, BOMId, BOMLineNo, FinishItemNo, UOM, EffectDate, UseQuantity,
WastageQuantity, Cost, VATRate, VATAmount, SD, SDAmount,
TradingMarkUp, MarkUpValue, RebateRate, UnitCost, TotalQuantity,RawItemType
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType not in ('Overhead')
UNION 
SELECT 'O' SL,b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType in ('Overhead')
) AS a

INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId 
 FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
                 AND isnull(b.PBOMId,0) >0) AND b.cost>0  and b.RawItemType  IN('Raw')
UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId
----------BOM RawP
select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY a.SL,a.BOMRawId

DROP TABLE #BOMRaws
";

                #endregion SQL Statement

                #region SQL Command

                SqlCommand objCommVAT1Ga = new SqlCommand();
                objCommVAT1Ga.Connection = currConn;

                objCommVAT1Ga.CommandText = sqlText;
                objCommVAT1Ga.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Ga.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Ga);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "ReportVAT1GaNewBackup05102013", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "ReportVAT1GaNewBackup05102013", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT19Report18012016(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='February-2015';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

END
ELSE
	BEGIN
		

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')


	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM BureauSalesInvoiceDetails sid
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

 
-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)
 
------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  BureauSalesInvoiceDetails SID
where  SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')
--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19


";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT19Report18012016", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT19Report18012016", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT19Report20150113(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='January-2014';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

END
ELSE
	BEGIN
		

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')


	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM BureauSalesInvoiceDetails sid
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

 
-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)
 
------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  BureauSalesInvoiceDetails SID
where  SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')
--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19


";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT19Report20150113", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BureauVAT19Report20150113", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT20ReportNewBackup(string SalesInvoiceNo, string Trading)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT20Report");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"SELECT    
                                SIH.SalesInvoiceNo SalesInvoiceNo, 
                                convert (varchar(200),SIH.InvoiceDateTime,120)InvoiceDate,
                                isnull(C.CustomerName,'N/A')CustomerName,
                                isnull(c.Address1,'N/A')Address1,
                                isnull(c.Address2,'N/A')Address2,
                                isnull(c.Address3,'N/A')Address3,
                                isnull(c.City,'N/A')City,
                                isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1,
                                isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2,
                                isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
                                isnull(P.ProductName,'N/A')ProductName ,
                                isnull(P.HSCodeNo,'N/A')HSCodeNo ,
                                isnull(P.ProductDescription,'N/A')ProductDescription ,
                                isnull(SID.Quantity,0)Quantity ,
                                isnull(SID.UOM,'N/A')UOM,
                                isnull(SID.NBRPrice,0)UnitCost,
                                isnull(SID.VATRate,0)VATRate,
                                isnull(SID.VATAmount,0)VATAmount,
                                isnull(SID.SD,0)SD,
                                isnull(SID.SDAmount,0)SDAmount,
                                isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
                                isnull(SIH.Comments,'N/A') Comments

                                FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                                dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                                dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                                dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                                dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

                                WHERE
                                (SIH.SalesInvoiceNo = @SalesInvoiceNo )
                                and (sih.Trading=@Trading)
                                AND SIh.Post='Y'
                                and (SID.Quantity>0)

                                SELECT   
                                SalesInvoiceNo,  
                                SaleLineNo,
                                Description,
                                Quantity,
                                GrossWeight, NetWeight,
                                NumberFrom, NumberTo,
                                Comments
                                FROM SalesInvoiceHeadersExport
                                WHERE 
                                (SalesInvoiceNo = @SalesInvoiceNo)";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }
                if (!objCommSaleReport.Parameters.Contains("@Trading"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Trading", Trading);
                }
                else
                {
                    objCommSaleReport.Parameters["@Trading"].Value = Trading;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #endregion

            #region catch

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "VAT20ReportNewBackup", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "VAT20ReportNewBackup", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion

        public DataTable GetYearlySaleData(SaleMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"


;with cte
as 
(
	Select VAT6_2_Permanent.periodid ,Quantity,UnitCost ,VATRate,ItemNo from VAT6_2_Permanent
	where 1=1
	and TransType != 'Opening'
	
)
select Format(cast('1900'+SUBSTRING(isnull(firstYear.periodid,secondYear.periodid),1,2)+'01' as datetime),'MMMM') [Month],
firstYear.Quantity QTY
,firstYear.UnitCost [VALUE]
,firstYear.VATRate [VAT]
,secondYear.Quantity QTY1
,secondYear.UnitCost VALUE1
,secondYear.VATRate  VAT1

from 

(   select periodid,sum(Quantity)Quantity,sum(UnitCost)UnitCost,sum(VATRate)VATRate from cte where 1=1 and  periodid in (Select periodid from FiscalYear 
	
	where CurrentYear in (@fDate)) ";
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And ItemNo=@ItemNo";
                }


                sqlText += @" 
                          group by periodid

)
as firstYear

full outer join 

(   select periodid,sum(Quantity)Quantity,sum(UnitCost)UnitCost,sum(VATRate)VATRate from cte where 1=1 and  periodid in (Select periodid from FiscalYear 
	
	where CurrentYear in (@sDate)) ";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                        And ItemNo=@ItemNo";
                }


                sqlText += @" 
                          group by periodid
)
as secondYear
on SUBSTRING(firstYear.periodid,1,2) = SUBSTRING(secondYear.periodid,1,2)

order by isnull(firstYear.periodid,secondYear.periodid)
";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", vm.DateFrom);
                cmd.Parameters.AddWithValue("@sDate", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataSet GetMonthlySaleData(SaleMISViewModel vm, string FirstPriodID, string SecondPriodID, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet table = new DataSet();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"

   Select Format(cast('1900'+SUBSTRING(periodid,1,2)+'01' as datetime),'MMMM') [Month],sum(Quantity)Qty,sum(UnitCost)VALUE ,sum(VATRate)VAT from VAT6_2_Permanent
	where 1=1
	and TransType != 'Opening'
	And periodid=@FirstPriodID";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And ItemNo=@ItemNo";
                }


                sqlText += @" 
                          group by periodid
	

	Select Format(cast('1900'+SUBSTRING(periodid,1,2)+'01' as datetime),'MMMM') [Month], sum(Quantity)Qty1,sum(UnitCost)VALUE1 ,sum(VATRate)VAT1 from VAT6_2_Permanent
	where 1=1
	and TransType != 'Opening'
    and periodid=@SecondPriodID";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And ItemNo=@ItemNo";
                }

                sqlText += @" 
                          group by periodid

";
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@FirstPriodID", FirstPriodID);
                cmd.Parameters.AddWithValue("@SecondPriodID", SecondPriodID);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);

                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetYearlyPurchaseData(PurchaseMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"


;with cte
as 
(
	Select VAT6_1_Permanent.periodid ,Quantity,UnitCost ,VATRate,ItemNo from VAT6_1_Permanent
	where 1=1
	and TransType != 'Opening'
	
)
select Format(cast('1900'+SUBSTRING(isnull(firstYear.periodid,secondYear.periodid),1,2)+'01' as datetime),'MMMM') [Month],
firstYear.Quantity QTY
,firstYear.UnitCost VALUE
,firstYear.VATRate VAT
,secondYear.Quantity QTY1
,secondYear.UnitCost VALUE1
,secondYear.VATRate  VAT1

from 

(   select periodid,sum(Quantity)Quantity,sum(UnitCost)UnitCost,sum(VATRate)VATRate from cte where 1=1 and  periodid in (Select periodid from FiscalYear 
	
	where CurrentYear in (@fDate))";
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And ItemNo=@ItemNo";
                }


                sqlText += @" 
                          group by periodid

)
as firstYear

full outer join 

(   select periodid,sum(Quantity)Quantity,sum(UnitCost)UnitCost,sum(VATRate)VATRate from cte where 1=1 and  periodid in (Select periodid from FiscalYear 
	
	where CurrentYear in (@sDate))";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                        And ItemNo=@ItemNo";
                }


                sqlText += @" 
                          group by periodid
)
as secondYear
on SUBSTRING(firstYear.periodid,1,2) = SUBSTRING(secondYear.periodid,1,2)

order by isnull(firstYear.periodid,secondYear.periodid)
";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@fDate", vm.ReceiveDateFrom);
                cmd.Parameters.AddWithValue("@sDate", vm.ReceiveDateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataSet GetMonthlyPurchaseData(PurchaseMISViewModel vm, string FirstPriodID, string SecondPriodID, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet table = new DataSet();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text

                sqlText = @"

   Select Format(cast('1900'+SUBSTRING(periodid,1,2)+'01' as datetime),'MMMM') [Month],sum(Quantity)Qty,sum(UnitCost)VALUE ,sum(VATRate)VAT from VAT6_1_Permanent
	where 1=1
	and TransType != 'Opening'
	And periodid=@FirstPriodID";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And ItemNo=@ItemNo";
                }


                sqlText += @" 
                          group by periodid
	

	Select Format(cast('1900'+SUBSTRING(periodid,1,2)+'01' as datetime),'MMMM') [Month], sum(Quantity)Qty1,sum(UnitCost)VALUE1 ,sum(VATRate)VAT1 from VAT6_1_Permanent
	where 1=1
	and TransType != 'Opening'
    and periodid=@SecondPriodID";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And ItemNo=@ItemNo";
                }

                sqlText += @" 
                          group by periodid

";
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@FirstPriodID", FirstPriodID);
                cmd.Parameters.AddWithValue("@SecondPriodID", SecondPriodID);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);

                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetTransferIssueDetailsData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"

  Select 
 tis.BranchId
 ,isnull(bp.BranchName,'N/A') [Transfer From]
,isnull(br.BranchName,'N/A') [Transfer To]
 ,p.ProductName
  ,p.ProductCode

,sum(UOMQty)Qty
,sum(SubTotal)[Total Value(Tk)]
,sum(VATAmount)[TotalVAT(Tk)]
from TransferIssueDetails  tis
LEFT OUTER JOIN Products p on tis.ItemNo = p.ItemNo
LEFT OUTER JOIN BranchProfiles br on tis.TransferTo = br.BranchID
LEFT OUTER JOIN BranchProfiles bp on tis.BranchId = bp.BranchID
where 1=1
and tis.Post='Y'
and tis.TransactionDateTime>=@DateFrom and tis.TransactionDateTime<=@DateTo

";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And tis.ItemNo=@ItemNo";
                }
                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.BranchId=@FromBranch";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.TransferTo=@TransferTo";
                }


                sqlText += @" 
                            group by tis.BranchId ,bp.BranchName,br.BranchName,p.ProductName,p.ProductCode
";
                if (!string.IsNullOrEmpty(vm.OrderBy))
                {
                    if (vm.OrderBy == "BP")
                        sqlText += " order by br.BranchName,p.ProductName";
                    else if (vm.OrderBy == "PB")
                        sqlText += " order by P.ProductName,br.BranchName";
                }
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetTransferIssueData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"

Select 
tis.BranchId
,isnull(bp.BranchName,'N/A') [Transfer From]
,isnull(br.BranchName,'N/A') [Transfer To]
,sum(UOMQty)Qty
from TransferIssueDetails  tis
LEFT OUTER JOIN BranchProfiles br on tis.TransferTo = br.BranchID
LEFT OUTER JOIN BranchProfiles bp on tis.BranchId = bp.BranchID
where 1=1
and tis.Post='Y'
and tis.TransactionDateTime>=@DateFrom and tis.TransactionDateTime<=@DateTo

";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And tis.ItemNo=@ItemNo";
                }
                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.BranchId=@FromBranch";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.TransferTo=@TransferTo";
                }


                sqlText += @" 
                            group by tis.BranchId ,bp.BranchName,br.BranchName

  order by tis.BranchId";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }
        public DataTable GetTransferReceiveData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"

  Select 
tis.BranchId
,isnull(bp.BranchName,'N/A') [Transfer To]
,isnull(br.BranchName,'N/A') [Transfer From]
,sum(UOMQty)Qty
from TransferReceiveDetails  tis
LEFT OUTER JOIN BranchProfiles br on tis.TransferFrom = br.BranchID
LEFT OUTER JOIN BranchProfiles bp on tis.BranchId = bp.BranchID
where 1=1
and tis.Post='Y'
and tis.TransactionDateTime>=@DateFrom and tis.TransactionDateTime<=@DateTo

";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And tis.ItemNo=@ItemNo";
                }
                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.BranchId=@TransferTo";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.TransferFrom=@FromBranch";
                }


                sqlText += @" 
                            group by tis.BranchId ,bp.BranchName,br.BranchName

  order by tis.BranchId";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetTransferReceiveDetailsData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"

  Select 
tis.BranchId
,isnull(bp.BranchName,'N/A') [Transfer To]
,isnull(br.BranchName,'N/A') [Transfer From]
 ,p.ProductName
  ,p.ProductCode
,sum(UOMQty)Qty
,sum(SubTotal)[Total Value(Tk)]
,sum(VATAmount)[TotalVAT(Tk)]
from TransferReceiveDetails  tis
LEFT OUTER JOIN Products p on tis.ItemNo = p.ItemNo
LEFT OUTER JOIN BranchProfiles br on tis.TransferFrom = br.BranchID
LEFT OUTER JOIN BranchProfiles bp on tis.BranchId = bp.BranchID
where 1=1
and tis.Post='Y'
and tis.TransactionDateTime>=@DateFrom and tis.TransactionDateTime<=@DateTo

";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And tis.ItemNo=@ItemNo";
                }
                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.BranchId=@TransferTo";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND tis.TransferFrom=@FromBranch";
                }


                sqlText += @" 
                            group by tis.BranchId ,bp.BranchName,br.BranchName,p.ProductName,p.ProductCode

";
                if (!string.IsNullOrEmpty(vm.OrderBy))
                {
                    if (vm.OrderBy == "BP")
                        sqlText += " order by bp.BranchName,p.ProductName";
                    else if (vm.OrderBy == "PB")
                        sqlText += " order by P.ProductName,bp.BranchName";
                }
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }
        public DataTable GetDownloadBranchSaleData(SaleMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"

select   distinct CurrentYear,  case when cast(FORMAT(f.periodstart,'MM') as int)<7 then cast(FORMAT(f.periodstart,'MM') as int)+6
when cast(FORMAT(f.periodstart,'MM') as int)>7 then cast(FORMAT(f.periodstart,'MM') as int)-6
else 1 end SL,f.PeriodName, b.BranchName,sum(uomQty)Quantity,sum(subtotal)Value,sum(VATAmount)VAT from SalesInvoiceDetails d
left outer join FiscalYear f on d.PeriodID=f.PeriodID
left outer join BranchProfiles b on d.BranchId=b.BranchID
left outer join Products p on d.ItemNo=p.ItemNo
Where d.Post='Y'
and d.InvoiceDateTime>=@DateFrom and d.InvoiceDateTime<=@DateTo

";


                if (vm.BranchId > 0)
                {
                    sqlText = sqlText + @" AND d.BranchId=@BranchId";
                }


                sqlText += @" 
                          group by currentYear, FORMAT(f.periodstart,'MM'),f.PeriodName,b.BranchName

";

                sqlText += @" 
                          order by currentYear, SL,f.PeriodName,b.BranchName

";
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);

                if (vm.BranchId > 0)
                {
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetDownloadBranchDetailsSaleData(SaleMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"

select   distinct CurrentYear,  case when cast(FORMAT(f.periodstart,'MM') as int)<7 then cast(FORMAT(f.periodstart,'MM') as int)+6
when cast(FORMAT(f.periodstart,'MM') as int)>7 then cast(FORMAT(f.periodstart,'MM') as int)-6
else 1 end SL,f.PeriodName, b.BranchName,p.ProductName ,sum(uomQty)Quantity,sum(subtotal)subtotal,sum(VATAmount)VATAmount from SalesInvoiceDetails d
left outer join FiscalYear f on d.PeriodID=f.PeriodID
left outer join BranchProfiles b on d.BranchId=b.BranchID
left outer join Products p on d.ItemNo=p.ItemNo
Where d.Post='Y'
and d.InvoiceDateTime>=@DateFrom and d.InvoiceDateTime<=@DateTo

";
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And d.ItemNo=@ItemNo";
                }

                if (vm.BranchId > 0)
                {
                    sqlText = sqlText + @" AND d.BranchId=@BranchId";
                }


                sqlText += @" 
                          group by currentYear, FORMAT(f.periodstart,'MM'),f.PeriodName,b.BranchName,p.ProductName

";

                sqlText += @" 
                          order by currentYear, SL,f.PeriodName,b.BranchName,p.ProductName

";
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (vm.BranchId > 0)
                {
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetBranchTransferIssueData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"



select   distinct CurrentYear,  case when cast(FORMAT(f.periodstart,'MM') as int)<7 then cast(FORMAT(f.periodstart,'MM') as int)+6
when cast(FORMAT(f.periodstart,'MM') as int)>7 then cast(FORMAT(f.periodstart,'MM') as int)-6
else 1 end SL,f.PeriodName, b.BranchName, bT.BranchName BranchTo

,sum(uomQty)TotalQuantity,sum(subtotal)TotalValue,sum(VATAmount)TotalVAT from TransferIssueDetails d
left outer join FiscalYear f on d.PeriodID=f.PeriodID
left outer join BranchProfiles b on d.BranchId=b.BranchID
left outer join BranchProfiles bT on d.TransferTo=bT.BranchID
left outer join Products p on d.ItemNo=p.ItemNo
Where d.Post='Y'
and d.TransactionDateTime>=@DateFrom and d.TransactionDateTime<=@DateTo
";


                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND d.BranchId=@FromBranch";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND d.TransferTo=@TransferTo";
                }


                sqlText += @" 
                        group by currentYear, FORMAT(f.periodstart,'MM'),f.PeriodName,b.BranchName, bT.BranchName

                         order by currentYear, SL,f.PeriodName,b.BranchName, bT.BranchName
";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);

                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetDetailsBranchTransferIssueData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"


select   distinct CurrentYear,  case when cast(FORMAT(f.periodstart,'MM') as int)<7 then cast(FORMAT(f.periodstart,'MM') as int)+6
when cast(FORMAT(f.periodstart,'MM') as int)>7 then cast(FORMAT(f.periodstart,'MM') as int)-6
else 1 end SL,f.PeriodName, b.BranchName, bT.BranchName BranchTo,p.ProductName

,sum(uomQty)TotalQuantity,sum(subtotal)TotalValue,sum(VATAmount)TotalVAT from TransferIssueDetails d
left outer join FiscalYear f on d.PeriodID=f.PeriodID
left outer join BranchProfiles b on d.BranchId=b.BranchID
left outer join BranchProfiles bT on d.TransferTo=bT.BranchID
left outer join Products p on d.ItemNo=p.ItemNo
Where d.Post='Y'
and d.TransactionDateTime>=@DateFrom and d.TransactionDateTime<=@DateTo
";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And d.ItemNo=@ItemNo";
                }
                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND d.BranchId=@FromBranch";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND d.TransferTo=@TransferTo";
                }


                sqlText += @" 
                        group by currentYear, FORMAT(f.periodstart,'MM'),f.PeriodName,b.BranchName, bT.BranchName,p.ProductName
                        order by currentYear, SL,f.PeriodName,b.BranchName, bT.BranchName,p.ProductName";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetBranchTransferReceiveData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"




select   distinct CurrentYear,  case when cast(FORMAT(f.periodstart,'MM') as int)<7 then cast(FORMAT(f.periodstart,'MM') as int)+6
when cast(FORMAT(f.periodstart,'MM') as int)>7 then cast(FORMAT(f.periodstart,'MM') as int)-6
else 1 end SL,f.PeriodName, b.BranchName, br.BranchName BranchFrom

,sum(uomQty)TotalQuantity,sum(subtotal)TotalValue,sum(VATAmount)TotalVAT from TransferReceiveDetails d
left outer join FiscalYear f on d.PeriodID=f.PeriodID
left outer join BranchProfiles b on d.BranchId=b.BranchID
left outer join BranchProfiles bR on d.TransferFrom=bR.BranchID
left outer join Products p on d.ItemNo=p.ItemNo
Where d.Post='Y'
and d.TransactionDateTime>=@DateFrom and d.TransactionDateTime<=@DateTo
";

                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND d.BranchId=@TransferTo";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND d.TransferFrom=@FromBranch";
                }


                sqlText += @" 
                       group by currentYear, FORMAT(f.periodstart,'MM'),f.PeriodName,b.BranchName, br.BranchName
order by currentYear, SL,f.PeriodName,b.BranchName, br.BranchName
";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);

                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataTable GetDetailsBranchTransferReceiveData(TransferMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable table = new DataTable();
            int executionResult = 0;

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region Sql Text
                sqlText = @"


select   distinct CurrentYear,  case when cast(FORMAT(f.periodstart,'MM') as int)<7 then cast(FORMAT(f.periodstart,'MM') as int)+6
when cast(FORMAT(f.periodstart,'MM') as int)>7 then cast(FORMAT(f.periodstart,'MM') as int)-6
else 1 end SL,f.PeriodName, b.BranchName, br.BranchName BranchFrom,p.ProductName

,sum(uomQty)TotalQuantity,sum(subtotal)TotalValue,sum(VATAmount)TotalVAT from TransferReceiveDetails d
left outer join FiscalYear f on d.PeriodID=f.PeriodID
left outer join BranchProfiles b on d.BranchId=b.BranchID
left outer join BranchProfiles bR on d.TransferFrom=bR.BranchID
left outer join Products p on d.ItemNo=p.ItemNo
Where d.Post='Y'
and d.TransactionDateTime>=@DateFrom and d.TransactionDateTime<=@DateTo
";

                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    sqlText += @"
                         And d.ItemNo=@ItemNo";
                }
                if (vm.FromBranch > 0)
                {
                    sqlText = sqlText + @" AND d.BranchId=@TransferTo";
                }
                if (vm.ToBranch > 0)
                {
                    sqlText = sqlText + @" AND d.TransferFrom=@FromBranch";
                }


                sqlText += @" 
                       group by currentYear, FORMAT(f.periodstart,'MM'),f.PeriodName,b.BranchName, br.BranchName,p.ProductName
order by currentYear, SL,f.PeriodName,b.BranchName, br.BranchName,p.ProductName

";

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                if (!string.IsNullOrWhiteSpace(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (vm.FromBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@FromBranch", vm.FromBranch);
                }
                if (vm.ToBranch > 0)
                {
                    cmd.Parameters.AddWithValue("@TransferTo", vm.ToBranch);
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(table);

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                if (Vtransaction == null && transaction != null)
                {
                    transaction.Rollback();
                }

                throw;

            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return table;
        }

        public DataSet BillInvoiceReportNew(string BillNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("BillInvoice Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

select
bih.BillNo,
bih.BillDate,
isnull(c.CustomerName,'N/A')CustomerName,
isnull(c.Address1,'N/A')Address1,
isnull(p.ProductName,'N/A')ProductName,
bid.Quantity,
bid.PeriodID,
bid.VATAmount,
bid.SubTotal,
isnull(bih.PONo,'0')PONo,
bih.ChallanNo,
bid.NBRPrice

from BillInvoiceHeaders as bih
left outer join Customers as  c on c.CustomerID=BIH.CustomerID
left outer join  BillInvoiceDetails bid on bid.BillId=bih.Id
left outer join Products as p on p.ItemNo= bid.ItemNo
WHERE 1=1";

                if (BillNo != "")
                {
                    sqlText += " and bih.BillNo =@BillNo ";

                }
                //if (VendorGroupID != "")
                //{
                //    sqlText += " and v.VendorGroupID =@VendorGroupID ";

                //}
                //sqlText += " order by VendorName ";

                #endregion

                #region SQL Command

                SqlCommand objCommVendorReport = new SqlCommand();
                objCommVendorReport.Connection = currConn;

                objCommVendorReport.CommandText = sqlText;
                objCommVendorReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommVendorReport.Parameters.AddWithValue("@BillNo", BillNo);
                //objCommVendorReport.Parameters.AddWithValue("@VendorGroupID", VendorGroupID);
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "BillInvoiceReportNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "BillInvoiceReportNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SaleDeliveryChallanReportNew(string DeliveryChallanNo, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("BillInvoice Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

select 
c.CustomerName,
c.Address1, 
sdc.DeliveryChallanNo,
sdc.ChallanDate,
sdc.PONo,
sdc.PODate,
p.ProductName,
sdc.Quantity,
sdc.UnitPrice,
sdc.SubTotal,
sdc.PartialDescription


from SalesDeliveryChallanTracking as sdc
left outer join Customers as c on c.CustomerID= sdc.CustomerID
left outer join Products as p on p.ItemNo= sdc.ItemNo
WHERE 1=1";

                if (DeliveryChallanNo != "")
                {
                    sqlText += " and sdc.DeliveryChallanNo =@DeliveryChallanNo ";

                }
                //if (VendorGroupID != "")
                //{
                //    sqlText += " and v.VendorGroupID =@VendorGroupID ";

                //}
                //sqlText += " order by VendorName ";

                #endregion

                #region SQL Command

                SqlCommand objCommVendorReport = new SqlCommand();
                objCommVendorReport.Connection = currConn;

                objCommVendorReport.CommandText = sqlText;
                objCommVendorReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommVendorReport.Parameters.AddWithValue("@DeliveryChallanNo", DeliveryChallanNo);
                //objCommVendorReport.Parameters.AddWithValue("@VendorGroupID", VendorGroupID);
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleDeliveryChallanReportNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleDeliveryChallanReportNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        #region Branch-Wise-Summary report

        public DataSet BranchWiseSummaryData(string fromDate, string toDate, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Declarations

            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataSet ds = new DataSet();
            DataTable data = new DataTable();

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();
                string companyCode = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

                fromDate = Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd 00:00:00.000");
                toDate = Convert.ToDateTime(toDate).ToString("yyyy-MM-dd 23:59:59.000");

                #region SQL Query

                sqlText = @"

create table ##Temp
(
[SL] [int] IDENTITY(1,1) NOT NULL,   
BranchId int, 
ItemNo Varchar(50), 
BranchName Varchar(120), 
ProductCode Varchar(50), 
ProductName Varchar(MAX), 
SalesQty decimal(25, 9), 
SalesValue decimal(25, 9),
VATPayableValue decimal(25, 9),

)

insert into ##Temp (BranchId,ItemNo,SalesQty,SalesValue,VATPayableValue)
select sih.BranchId,sid.ItemNo
,ISNULL(sid.Quantity,0)Quantity
,ISNULL(sid.SubTotal,0)SubTotal
,ISNULL(sid.VATAmount,0)VATAmount
from SalesInvoiceHeaders sih 
left outer join SalesInvoiceDetails sid on sid.SalesInvoiceNo=sih.SalesInvoiceNo
where 1=1
and sih.SalesInvoiceNo=sid.SalesInvoiceNo
and sih.TransactionType in('Other') 
@conditon

----------------------------------------
----Branch Name and product update -----
----------------------------------------

update ##Temp set ProductCode=Products.ProductCode,ProductName=Products.ProductName  
from Products where Products.ItemNo=##Temp.ItemNo  

update ##Temp set BranchName=BranchProfiles.BranchName
from BranchProfiles where BranchProfiles.BranchID=##Temp.BranchId  

----------------------------------------
---------Branch wise Data--------------
----------------------------------------

select BranchName
 ,Sum(SalesQty)Quantity
 ,Sum(SalesValue)Sales_Value
 ,Sum(VATPayableValue)VAT

from ##Temp
group by BranchName


----------------------------------------
---------Product wise Data--------------
----------------------------------------

select ProductCode,ProductName
 ,Sum(SalesQty)Quantity
 ,Sum(SalesValue)Sales_Value
 ,Sum(VATPayableValue)VAT

from ##Temp

group by ProductCode,ProductName

drop table ##Temp

";

                #endregion

                #region Sql Condition Apply

                string conditionText = "";

                if (!string.IsNullOrEmpty(fromDate))
                {
                    conditionText += " and sih.InvoiceDateTime >=@fromDate";
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    conditionText += " and sih.InvoiceDateTime <=@toDate";
                }

                sqlText = sqlText.Replace("@conditon", conditionText);

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Sql Parameters

                if (!string.IsNullOrEmpty(fromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", fromDate);
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", toDate);
                }

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(ds);

                ds.Tables[0].TableName = "BranchWiseSummary";
                ds.Tables[1].TableName = "ProductWiseSummary";

                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

            }

            #region Catch & Finally

            catch (Exception ex)
            {
                throw ex;
            }

            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }
            #endregion

            return ds;
        }

        public DataSet SaleNewEngine_Chassis(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                          string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                          string onlyDiscount, bool bPromotional, string CustomerGroupID, bool pCategoryLike = false, string PGroup = ""
          , string ShiftId = "0", int branchId = 0, string VatType = "", SysDBInfoVMTemp connVM = null, string OrderBy = "", string DataSource = "", string Toll = "N", string Type = "", string ReportType = "")
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string sqlTextVatType = "";
            string orderByIni = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                //string CompanyCode =new CommonDAL().settings("CompanyCode", "Code");

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
                            convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            isnull(C.Address1,'N/A')Address1,
                            isnull(C.VATRegistrationNo,'N/A')VATRegistrationNo,
                            sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,
                            isnull(SID.UOM,'N/A')UOM,
                            isnull(SID.UOMn,'N/A')UOMn,
                            isnull(SID.UOMc,1)UOMc,                            
                            isnull(SID.Quantity,0)Quantity,
                            isnull(V.VehicleNo,'N/A')VehicleNo,

                            isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
                            isnull(isnull(SID.Quantity,0)  -isnull(SID.PromotionalQuantity,0),0) SaleQuantity,

                            isnull(SID.UOMQty,isnull(SID.Quantity,0))UOMQty,
                            isnull(SID.NBRPrice,0)NBRPrice,
isnull(NULLIF(isnull(SID.DiscountedNBRPrice,0),0),isnull(SID.NBRPrice,0))Discount,
                            isnull(SID.UOMPrice,isnull(SID.NBRPrice,0))UOMPrice,
                            isnull(SID.SD,0)SD,
                            isnull(SID.SDAmount,0)SDAmount,
                            isnull(SID.VATRate,0)VATRate,
                            isnull(SID.VATAmount,0)VATAmount ,
                            --isnull(SID.SubTotal,0) SubTotal,
                           -- isnull(isnull(SID.SubTotal,0)+isnull(SID.SDAmount,0)+isnull(SID.VATAmount,0),0)Total,
                            isnull(SID.CurrencyValue,0) SubTotal,
                            isnull(isnull(SID.CurrencyValue,0)+isnull(SID.SDAmount,0)+isnull(SID.VATAmount,0),0)Total,

                            SID.Trading,
                            SID.TradingMarkUp,
                            SID.NonStock,
                            SID.SaleType,
                            SIH.LCNumber,
                            SIH.LCDate,
                            isnull(SIH.DeliveryAddress1,'N/A')FinalDestination,
                          -- isnull(SECD.ChassisNumber,'N/A')ChassisNumber,
                           -- isnull(SECD.EngineNumber,'N/A')EngineNumber,
                            isnull(SIH.Comments,'N/A')Comments,

                            pc.CategoryName,pc.IsRaw ProductType
,isnull(trc.Heading1,'')Heading1,isnull(trc.Heading2,'')Heading2

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
--left outer join dbo.SaleEngineChassisDetails as SECD on SECD.SalesInvoiceNo=SIH.SalesInvoiceNo
      
                            WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
                           -- and P.ActiveStatus='Y'


                                                ";

                #region sqlTextVatType
                sqlTextVatType = "";
                if (Toll == "Y")
                {
                    sqlTextVatType += @"and SID.TransactionType in('TollSale')";
                }
                else
                {

                    if (VatType.ToLower() == "Export".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Export' 
                    and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "DeemExport".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='DeemExport' 
                  and  SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "NonVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='NonVAT' 
               and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "VAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='VAT' 
              and SID.TransactionType in('ServiceNS','Service','TollFinishIssue','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS' ,'Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "MRPRate".ToLower() || VatType.ToLower() == "MRPRate(SC)".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type in('MRPRate','MRPRate(SC)') 
             and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "FixedVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='FixedVAT' 
                    and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "OtherRate".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='OtherRate' 
              and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','Tender','Trading','TradingTender','InternalIssue')
";
                    }
                    else if (VatType.ToLower() == "Retail".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Retail' 
            and SID.TransactionType in('Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading','TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                    {
                        sqlTextVatType += @" and SID.Type in('Export','DeemExport','NonVAT','VAT','MRPRate','MRPRate(SC)','FixedVAT'
					,'OtherRate','Retail'  )";
                        if (vTransactionType != "")
                        {
                            sqlTextVatType += " and SID.TransactionType=@vTransactionType  ";
                        }
                        else
                        {
                            sqlTextVatType += @"  
 and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
,'ExportTrading','ExportTradingTender','ExportService'
,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
";
                        }
                    }
                }

                #endregion sqlTextVatType

                sqlText += sqlTextVatType;
                //DiscountAmount
                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (vTransactionType != "")
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }
                //if (CompanyCode.ToLower()=="nestle")
                //{
                //    sqlText += " and SID.ProductType in('P','R') ";
                //}
                if (!string.IsNullOrWhiteSpace(OrderBy))
                {


                    if (ReportType == "SummaryByProduct")
                    {
                        sqlText += " order by " + " P." + OrderBy;

                    }
                    else
                    {
                        orderByIni = "SIH.SalesInvoiceNo ASC";
                        //OrderBy += orderByIni+","+OrderBy; 
                        sqlText += " order by " + orderByIni + ", P." + OrderBy;

                    }

                }

                #endregion Parameter




                sqlText += @"     

     SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo,
							SIH.ImportIDExcel ImportIDExcel,							
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,                      
                            isnull(SECD.ChassisNumber,'N/A')ChassisNumber,
                            isnull(SECD.EngineNumber,'N/A')EngineNumber

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.SaleEngineChassisDetails as SECD on SECD.SalesInvoiceNo=SID.SalesInvoiceNo and SECD.ItemNo=SID.ItemNo
      
                            WHERE 1=1 and SID.BranchId='1'

                       ";


                #region sqlTextVatType
                sqlTextVatType = "";
                if (Toll == "Y")
                {
                    sqlTextVatType += @"and SID.TransactionType in('TollSale')";
                }
                else
                {

                    if (VatType.ToLower() == "Export".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Export' 
                    and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "DeemExport".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='DeemExport' 
                  and  SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage','ExportTrading','ExportTradingTender','ExportService')
";
                    }
                    else if (VatType.ToLower() == "NonVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='NonVAT' 
               and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "VAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='VAT' 
              and SID.TransactionType in('ServiceNS','Service','TollFinishIssue','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS' ,'Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "MRPRate".ToLower() || VatType.ToLower() == "MRPRate(SC)".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type in('MRPRate','MRPRate(SC)') 
             and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "FixedVAT".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='FixedVAT' 
                    and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading' ,'TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "OtherRate".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='OtherRate' 
              and SID.TransactionType in('ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','Tender','Trading','TradingTender','InternalIssue')
";
                    }
                    else if (VatType.ToLower() == "Retail".ToLower())
                    {
                        sqlTextVatType += @" and SID.Type='Retail' 
            and SID.TransactionType in('Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter','ServiceNS','Tender','Trading','TradingTender','InternalIssue','Service')
";
                    }
                    else if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                    {
                        sqlTextVatType += @" and SID.Type in('Export','DeemExport','NonVAT','VAT','MRPRate','MRPRate(SC)','FixedVAT'
					,'OtherRate','Retail'  )";
                        if (vTransactionType != "")
                        {
                            sqlTextVatType += " and SID.TransactionType=@vTransactionType  ";
                        }
                        else
                        {
                            sqlTextVatType += @"  
 and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
,'ExportTrading','ExportTradingTender','ExportService'
,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
";
                        }
                    }
                }

                #endregion sqlTextVatType
                sqlText += sqlTextVatType;
                //DiscountAmount
                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (vTransactionType != "")
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }
                //if (CompanyCode.ToLower()=="nestle")
                //{
                //    sqlText += " and SID.ProductType in('P','R') ";
                //}
                if (!string.IsNullOrWhiteSpace(OrderBy))
                {


                    if (ReportType == "SummaryByProduct")
                    {
                        sqlText += " order by " + " P." + OrderBy;

                    }
                    else
                    {
                        orderByIni = "SIH.SalesInvoiceNo ASC";
                        //OrderBy += orderByIni+","+OrderBy; 
                        sqlText += " order by " + orderByIni + ", P." + OrderBy;

                    }

                }

                #endregion Parameter

                sqlText += @"     
SELECT    distinct shft.ShiftName,pc.CategoryName, sum( isnull(SID.UOMQty,isnull(SID.Quantity,0)))UOMQty

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
left outer join Shifts shft on SIH.ShiftId=shft.Id 
    WHERE (SID.Quantity>0) and SID.BranchId=@BranchId
    and P.ActiveStatus='Y'

                       ";


                sqlText += sqlTextVatType;

                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (InvoiceDateFrom != "")
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (InvoiceDateTo != "")
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo  ";
                }
                if (vCustomerid != "")
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (CustomerGroupID != "")
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (vItemNo != "")
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (vCategoryID != "")
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (vproductType != "")
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (vTransactionType != "")
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (vPost != "")
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }

                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }
                //if (CompanyCode.ToLower() == "nestle")
                //{
                //    sqlText += " and SID.ProductType in('P','R') ";
                //}
                sqlText += @" 	 group by  shft.ShiftName,pc.CategoryName
	 	  ";


                #endregion Parameter

                sqlText += @" 

  SELECT    distinct isnull(C.CustomerName,'N/A')CustomerName,pc.CategoryName,sum( isnull(SID.UOMQty,isnull(SID.Quantity,0)))UOMQty

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
WHERE 1=1
and SID.BranchId=@BranchId
and P.ActiveStatus='Y'

 
";

                sqlText += sqlTextVatType;



                #region Parameter
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    sqlText += " and SIH.ShiftId=@ShiftId ";

                }

                //JBR
                if (vSalesInvoiceNo != "")
                    sqlText += " and SID.SalesInvoiceNo=@vSalesInvoiceNo  ";


                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateFrom))
                {
                    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                }
                if (!string.IsNullOrEmpty(InvoiceDateTo))
                {
                    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo  ";
                }
                if (!string.IsNullOrEmpty(vCustomerid))
                    sqlText += " and C.CustomerID=@vCustomerid  ";

                if (!string.IsNullOrEmpty(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID=@CustomerGroupID ";
                if (!string.IsNullOrEmpty(vItemNo))
                    sqlText += " and SID.ItemNo=@vItemNo ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName =@PGroup )";

                }
                else
                {
                    if (!string.IsNullOrEmpty(vCategoryID))
                        sqlText += " and P.CategoryID=@vCategoryID  ";
                }
                if (!string.IsNullOrEmpty(vproductType))
                    sqlText += " and pc.IsRaw=@vproductType ";
                //if (!string.IsNullOrEmpty(vTransactionType))
                //{
                //    sqlText += " and SIH.TransactionType=@vTransactionType  ";
                //}

                if (!string.IsNullOrEmpty(vPost))
                {
                    sqlText += " and SIH.Post=@vPost  ";
                }
                if (!string.IsNullOrWhiteSpace(DataSource))
                {
                    sqlText += " and SIH.DataSource=@DataSource  ";

                }
                //if (CompanyCode.ToLower() == "nestle")
                //{
                //    sqlText += " and SID.ProductType in('P','R') ";
                //}
                sqlText += " group by  isnull(C.CustomerName,'N/A'),pc.CategoryName ";
                if (branchId == 0)
                {
                    sqlText = sqlText.Replace("=@BranchId", ">@BranchId");
                }
                //if (string.IsNullOrEmpty(VatType))
                //{
                //    sqlText = sqlText.Replace("SID.Type=@Type", "1=1");
                //}
                #endregion Parameter
                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 180;


                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);
                //objCommSaleReport.Parameters.AddWithValue("@Type", VatType);
                if (Convert.ToInt32(ShiftId) > 0)
                {
                    if (!objCommSaleReport.Parameters.Contains("@ShiftId"))
                    { objCommSaleReport.Parameters.AddWithValue("@ShiftId", ShiftId); }
                    else { objCommSaleReport.Parameters["@ShiftId"].Value = ShiftId; }


                }
                if (vSalesInvoiceNo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vSalesInvoiceNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vSalesInvoiceNo", vSalesInvoiceNo); }
                    else { objCommSaleReport.Parameters["@vSalesInvoiceNo"].Value = vSalesInvoiceNo; }
                }





                if (InvoiceDateFrom != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommSaleReport.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }

                }
                if (InvoiceDateTo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateTo"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommSaleReport.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }

                }
                if (vCustomerid != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@vCustomerid"))
                    { objCommSaleReport.Parameters.AddWithValue("@vCustomerid", vCustomerid); }
                    else { objCommSaleReport.Parameters["@vCustomerid"].Value = vCustomerid; }

                }

                if (CustomerGroupID != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@CustomerGroupID"))
                    { objCommSaleReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID); }
                    else { objCommSaleReport.Parameters["@CustomerGroupID"].Value = CustomerGroupID; }

                }
                if (vItemNo != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vItemNo"))
                    { objCommSaleReport.Parameters.AddWithValue("@vItemNo", vItemNo); }
                    else { objCommSaleReport.Parameters["@vItemNo"].Value = vItemNo; }

                }
                if (pCategoryLike)
                {

                    if (!objCommSaleReport.Parameters.Contains("@PGroup"))
                    { objCommSaleReport.Parameters.AddWithValue("@PGroup", PGroup); }
                    else { objCommSaleReport.Parameters["@PGroup"].Value = PGroup; }


                }
                else
                {
                    if (vCategoryID != "")

                        if (!objCommSaleReport.Parameters.Contains("@vCategoryID"))
                        { objCommSaleReport.Parameters.AddWithValue("@vCategoryID", vCategoryID); }
                        else { objCommSaleReport.Parameters["@vCategoryID"].Value = vCategoryID; }

                }
                if (vproductType != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vproductType"))
                    { objCommSaleReport.Parameters.AddWithValue("@vproductType", vproductType); }
                    else { objCommSaleReport.Parameters["@vproductType"].Value = vproductType; }

                }
                if (VatType.ToLower() == "All".ToLower() || string.IsNullOrWhiteSpace(VatType))
                {
                    if (vTransactionType != "")
                    {

                        if (!objCommSaleReport.Parameters.Contains("@vTransactionType"))
                        { objCommSaleReport.Parameters.AddWithValue("@vTransactionType", vTransactionType); }
                        else { objCommSaleReport.Parameters["@vTransactionType"].Value = vTransactionType; }

                    }
                }
                if (vPost != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vPost"))
                    { objCommSaleReport.Parameters.AddWithValue("@vPost", vPost); }
                    else { objCommSaleReport.Parameters["@vPost"].Value = vPost; }

                }

                if (!string.IsNullOrEmpty(DataSource))
                {

                    if (!objCommSaleReport.Parameters.Contains("@DataSource"))
                    { objCommSaleReport.Parameters.AddWithValue("@DataSource", DataSource); }
                    else { objCommSaleReport.Parameters["@DataSource"].Value = DataSource; }

                }

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataTable DownloadChasisForACI_SaleReport(List<string> Ids, string InvoiceDateFrom, string InvoiceDateTo, string TransactionType, string Post, int branchId = 0, string ReportType = "", SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vTransactionType = TransactionType;
            string vPost = Post;
            string VatType = "";


            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string sqlTextVatType = "";
            string orderByIni = "";
            DataTable dt = new DataTable("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                //string CompanyCode =new CommonDAL().settings("CompanyCode", "Code");

                #endregion open connection and transaction

                #region SQL Statement


//                sqlText = @"    
//                            SELECT    
//                            SIH.SalesInvoiceNo SalesInvoiceNo,
//							SIH.ImportIDExcel ImportIDExcel,							
//                            isnull(P.ProductName,'N/A')ProductName,
//                            isnull(P.ProductCode,'N/A')ProductCode,                      
//                            isnull(SECD.ChassisNumber,'N/A')ChassisNumber,
//                            isnull(SECD.EngineNumber,'N/A')EngineNumber
//
//                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
//                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
//                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
//                            dbo.SaleEngineChassisDetails AS 
//                            SECD on SECD.SalesInvoiceNo=SID.SalesInvoiceNo and SECD.ItemNo=SID.ItemNo
//      
//                            WHERE 1=1 and SID.BranchId='1'
//
//                       ";


                sqlText = @"    
                                            SELECT    
                            SECD.SalesInvoiceNo SalesInvoiceNo,
							SECD.ID ImportIDExcel,							
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,                      
                            isnull(SECD.ChassisNumber,'N/A')ChassisNumber,
                            isnull(SECD.EngineNumber,'N/A')EngineNumber

                            FROM SaleEngineChassisDetails SECD
                            left outer join dbo.Products AS P ON SECD.ItemNo = P.ItemNo 
                            WHERE 1=1 and SECD.BranchId='1'
                            
                
                                       ";



                #region sqlTextVatType
                sqlTextVatType = "";

//                if (string.IsNullOrWhiteSpace(VatType))
//                {
//                    sqlTextVatType += @" and SID.Type in('Export','DeemExport','NonVAT','VAT','MRPRate','MRPRate(SC)','FixedVAT'
//					,'OtherRate','Retail'  )";
//                    if (vTransactionType != "")
//                    {
//                        sqlTextVatType += " and SID.TransactionType=@vTransactionType  ";
//                    }
//                    else
//                    {
//                        sqlTextVatType += @"  
// and SID.TransactionType in('ServiceNS','Service','Export','ExportServiceNS','ExportTender','ExportPackage'
//,'ExportTrading','ExportTradingTender','ExportService'
//,'TollFinishIssue','ServiceNS','Service','Other','RawSale','PackageSale','Wastage', 'SaleWastage','CommercialImporter'
//,'ServiceNS','Tender','Trading','ExportTrading','TradingTender','InternalIssue','Service')
//";
//                    }
//                }

                #endregion sqlTextVatType

                sqlText += sqlTextVatType;

                //#region Parameter

                //if (InvoiceDateFrom != "")
                //{
                //    sqlText += " and SID.InvoiceDateTime >=@InvoiceDateFrom ";
                //}
                //if (InvoiceDateTo != "")
                //{
                //    sqlText += " and SID.InvoiceDateTime <=@InvoiceDateTo ";
                //}
                //if (vPost != "")
                //{
                //    sqlText += " and SIH.Post=@vPost  ";
                //}
                //#endregion Parameter


                var len = Ids.Count;

                if (len > 0)
                {
                    sqlText += " AND  SECD.SalesInvoiceNo in (";

                    for (int i = 0; i < len; i++)
                    {
                        sqlText += "'" + Ids[i] + "'";

                        if (i != (len - 1))
                        {
                            sqlText += ",";
                        }
                    }

                    if (len == 0)
                    {
                        sqlText += "''";
                    }

                    sqlText += ")";
                }





                sqlText += sqlTextVatType;

                sqlText += " ORDER BY SECD.SalesInvoiceNo ASC ";

                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;
                objCommSaleReport.CommandTimeout = 180;


                objCommSaleReport.Parameters.AddWithValue("@BranchId", branchId);

                if (InvoiceDateFrom != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateFrom"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateFrom", InvoiceDateFrom); }
                    else { objCommSaleReport.Parameters["@InvoiceDateFrom"].Value = InvoiceDateFrom; }

                }
                if (InvoiceDateTo != "")
                {
                    if (!objCommSaleReport.Parameters.Contains("@InvoiceDateTo"))
                    { objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTo", InvoiceDateTo); }
                    else { objCommSaleReport.Parameters["@InvoiceDateTo"].Value = InvoiceDateTo; }

                }

                if (string.IsNullOrWhiteSpace(VatType))
                {
                    if (vTransactionType != "")
                    {

                        if (!objCommSaleReport.Parameters.Contains("@vTransactionType"))
                        { objCommSaleReport.Parameters.AddWithValue("@vTransactionType", vTransactionType); }
                        else { objCommSaleReport.Parameters["@vTransactionType"].Value = vTransactionType; }

                    }
                }
                if (vPost != "")
                {

                    if (!objCommSaleReport.Parameters.Contains("@vPost"))
                    { objCommSaleReport.Parameters.AddWithValue("@vPost", vPost); }
                    else { objCommSaleReport.Parameters["@vPost"].Value = vPost; }

                }

                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "SaleNew", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dt;
        }

        #endregion

        #region Meghna

        public DataSet MegnaDayEndReport(ReportParamVM vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Megna DayEnd Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

Select MPLDayEndClosingHeaders.code,BranchProfiles.BranchCode,BranchProfiles.BranchName, MPLDayEndClosingSales.*from MPLDayEndClosingSales
left outer join MPLDayEndClosingHeaders on MPLDayEndClosingSales.DayEndClosingHeaderId=MPLDayEndClosingHeaders.id
left outer join BranchProfiles on BranchProfiles.BranchID=MPLDayEndClosingHeaders.BranchId
where DayEndClosingHeaderId=@DayEndClosingHeaderId and  TransactionType=@TransactionType

Select *from MPLDayEndClosingBank
where DayEndClosingHeaderId=@DayEndClosingHeaderId and  TransactionType=@TransactionType

Select *from MPLDayEndClosingOther
where DayEndClosingHeaderId=@DayEndClosingHeaderId and  TransactionType=@TransactionType";




                #endregion

                #region SQL Command

                SqlCommand objCommVendorReport = new SqlCommand();
                objCommVendorReport.Connection = currConn;

                objCommVendorReport.CommandText = sqlText;
                objCommVendorReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommVendorReport.Parameters.AddWithValue("@DayEndClosingHeaderId", vm.Id);
                objCommVendorReport.Parameters.AddWithValue("@TransactionType", vm.TransactionType);
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaDayEndReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaDayEndReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }
        public DataTable MegnaCA16Report(string Id, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("MegnaCA16Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
--Select 
-- DSH.Code
--,isnull (DSH.TransactionDateTime,'01/01/1990')TransactionDateTime
--,'-'BatchNo
--,isnull(br.BranchCode,'-')BranchCode
--,isnull(Sbk.BankName,'-') SelfBankName
--,isnull(Sbk.BankCode,'-') SelfBankCode
--,isnull(Sbk.AccountNumber,'-') SelfBankAccountNumber
--,isnull(Sbk.Address1 ,'-')SelfAddress1
--,isnull(Sbp.InstrumentNo,'-')
--,isnull(Sbp.InstrumentDate,'01/01/1990')InstrumentDate
--,isnull(Bbk.BankName,'-') BDBankName
--,isnull(Bbk.BankCode,'-') BDBankCode
--,isnull(Bbk.Address1,'-') BDAddress1
--,isnull(Sbp.Amount,0)Amount
--,isnull (ICR.CRCode,'-')CRCode
--
--from MPLBankDepositSlipDetails  DSD
--left outer join MPLBankDepositSlipHeaders  DSH on DSD.BankDepositSlipHeaderId=DSH.Id
--left outer join BranchProfiles  BR on DSH.BranchId=BR.BranchID
--left outer join SalesInvoiceMPLCRInfos  ICR on DSD.SalesInvoiceMPLHeaderId=ICR.SalesInvoiceMPLHeaderId
--left outer join SalesInvoiceMPLBankPayments  Sbp on DSD.SalesInvoiceMPLHeaderId=Sbp.SalesInvoiceMPLHeaderId
--left outer join MPLBDBankInformations  Bbk on DSD.BDBankId=Bbk.BankID
--left outer join MPLSelfBankInformations  Sbk on DSH.SelfBankId=Sbk.BankID
--Where
--1=1      


Select 
 DSH.Code
,isnull (DSH.TransactionDateTime,'01/01/1990')TransactionDateTime
,'-'BatchNo
,isnull(br.BranchCode,'-')BranchCode
,isnull(Sbk.BankName,'-') SelfBankName
,isnull(Sbk.BankCode,'-') SelfBankCode
,isnull(Sbk.AccountNumber,'-') SelfBankAccountNumber
,isnull(Sbk.Address1 ,'-')SelfAddress1
,isnull(DSD.InstrumentNo,'-')InstrumentNo
,isnull(DSD.InstrumentDate,'01/01/1990')InstrumentDate
,isnull(BDB.BankName,'-') BDBankName
,isnull(BDB.BankCode,'-') BDBankCode
,isnull(BDB.Address1,'-') BDAddress1
,isnull(DSD.Amount,0)Amount
,isnull (cr.CRCode,'-')CRCode


from MPLBankDepositSlipDetails  DSD
left outer join MPLBankDepositSlipHeaders  DSH on DSD.BankDepositSlipHeaderId=DSH.Id

left outer join SalesInvoiceMPLBankPayments p on DSD.RefId=p.Id and DSD.TType='P'
LEFT OUTER JOIN SalesInvoiceMPLHeaders SI ON   p.SalesInvoiceMPLHeaderId =SI.Id
LEFT OUTER JOIN SalesInvoiceMPLCRInfos cr ON   SI.Id =cr.SalesInvoiceMPLHeaderId
left outer join MPLBankPaymentReceives R on DSD.RefId=r.Id and DSD.TType='r'
left outer join BranchProfiles  BR on DSH.BranchId=BR.BranchID

LEFT OUTER JOIN MPLBDBankInformations BDB ON BDB.BankID = DSD.BDBankId 
left outer join MPLSelfBankInformations  Sbk on DSH.SelfBankId=Sbk.BankID
LEFT OUTER JOIN Customers c ON c.CustomerID=(case when DSD.TType='P' then  SI.CustomerID else r.CustomerId end )
 Where
 1=1   
";

                if (!string.IsNullOrWhiteSpace(Id))
                {
                    sqlText += " and DSD.BankDepositSlipHeaderId =@BankDepositSlipHeaderId ";

                }




                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommIssueReport.Parameters.AddWithValue("@BankDepositSlipHeaderId", Id);


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaCA16Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaCA16Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }

        public DataTable MegnaTradeChallan(string Id, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("MegnaCA16Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 
  Select 
      TRC.[Code]
      ,TRC.[BranchId]
      ,BR.[BranchName]
      ,BR.Address [BranchAddress]
      ,TRC.[TransactionDateTime]
      ,TRC.[SalesInvoiceRefId]
      ,SIH.[SalesInvoiceNo]
      ,SIH.[InvoiceDateTime]
      ,SIH.[DeliveryDate]
      ,TRC.[AgainstSupplyOrderNo]
      ,TRC.[Consignee]
      ,TRC.[ContractOrATNo]
      ,TRC.[AgreementDate]
      ,C.CustomerName
      ,C.CustomerCode
      ,isnull (P.PackSize,'-')PackSize
	  ,p.ProductCode
	  ,p.ProductName
	  ,SID.Quantity
	  , isnull (SIH.VehicleNo,'-')VehicleNo
      , isnull (SIH.VehicleType,'-')VehicleType
      ,Isnull(TRC.[Post],'N')Post
  FROM SalesInvoiceMPLDetails SID 
  left outer join SalesInvoiceMPLHeaders SIH on SIH.Id=SID.SalesInvoiceMPLHeaderId
  left outer join Products P on SID.ItemNo=P.ItemNo
  left outer join MPLTradeChallan TRC on TRC.SalesInvoiceRefId=SIH.Id
  left outer join Customers C on SIH.CustomerID=C.CustomerID
  left outer join BranchProfiles  BR on TRC.BranchId=BR.BranchID

WHERE  1=1 
";

                if (!string.IsNullOrWhiteSpace(Id))
                {
                    sqlText += " and TRC.Id =@Id ";

                }




                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommIssueReport.Parameters.AddWithValue("@Id", Id);


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaTradeChallan", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaTradeChallan", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }

        public DataTable AccountsReport(MeghnaMISViewModel vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("AccountsReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 
SELECT DISTINCT
    zp.ZoneCode,
    zp.ZoneName,
    bp.BranchName,
    bp.BranchCode,
    h.TransactionType,
    h.Code AS BankSlipNo,
    SLBank.BankName,
    SLBank.BankCode,
    SLBank.AccountNumber,
    FORMAT(CAST(h.TransactionDateTime AS DATETIME), 'yyyy-MM-dd') AS TransactionDateTime,
    SUM(d.Amount) AS Amount
FROM
    MPLBankDepositSlipDetails d
LEFT OUTER JOIN
    MPLBankDepositSlipHeaders h ON d.BankDepositSlipHeaderId = h.Id
LEFT OUTER JOIN
    MPLBDBankInformations BDBank ON d.BDBankId = BDBank.BankID
LEFT OUTER JOIN
    MPLSelfBankInformations SLBank ON h.SelfBankId = SLBank.BankID
LEFT OUTER JOIN
    MPLZoneBranchMapping ZBM ON h.BranchId = ZBM.BranchId
LEFT OUTER JOIN
    MPLZoneProfiles ZP ON ZBM.ZoneId = ZP.ZoneID
LEFT OUTER JOIN
    BranchProfiles bp ON h.BranchId = bp.BranchID

WHERE  1=1 
";
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.TransactionDateTime >=@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    sqlText += " and h.TransactionDateTime <=@DateTo";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    sqlText += " and ZP.ZoneId =@ZoneId";
                }
                if (!string.IsNullOrEmpty(vm.SelfBankId))
                {
                    sqlText += " and h.SelfBankId =@SelfBankId";
                }
                if (!string.IsNullOrEmpty(vm.ReportType))
                {
                    sqlText += " and  h.TransactionType =@ReportType";
                }
                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    sqlText += " and  h.TransactionType =@Post";
                //}


                #endregion

                sqlText += @" 
GROUP BY
    zp.ZoneCode,
    zp.ZoneName,
    bp.BranchName,
    bp.BranchCode,
    h.TransactionType,
    h.Code,
    SLBank.BankName,
    SLBank.BankCode,
    SLBank.AccountNumber,
    h.TransactionDateTime";

                #region SQL Command

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = currConn;

                cmd.CommandText = sqlText;
                cmd.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    cmd.Parameters.AddWithValue("@ZoneId", vm.ZoneId);

                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);
                }
                if (!string.IsNullOrEmpty(vm.SelfBankId))
                {
                    cmd.Parameters.AddWithValue("@SelfBankId", vm.SelfBankId);
                }
                if (!string.IsNullOrEmpty(vm.ReportType))
                {
                    cmd.Parameters.AddWithValue("@ReportType", vm.ReportType);
                }
                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    cmd.Parameters.AddWithValue("@Post", vm.Post);
                //}


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "AccountsReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "AccountsReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }

        public DataTable MeghnaBankDepositInfo(MeghnaMISViewModel vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("AccountsReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 
select zp.ZoneCode,zp.ZoneName,bp.BranchName,BDBank.BankName CustomerBank,sh.SalesInvoiceNo,sh.InvoiceDateTime,sh.TransactionType
,c.CustomerName,d.ModeOfPayment, d.InstrumentNo,d.InstrumentDate,d.Amount,h.Code BankSlipNo,SLBank.BankName, h.TransactionDateTime BankSlipEntryDate

from MPLBankDepositSlipDetails d
left outer join MPLBankDepositSlipHeaders h on d.BankDepositSlipHeaderId=h.Id
left outer join SalesInvoiceMPLHeaders sh on d.SalesInvoiceMPLHeaderId=sh.Id
left outer join MPLBDBankInformations BDBank on d.BDBankId=BDBank.BankID
left outer join MPLSelfBankInformations SLBank on h.SelfBankId=SLBank.BankID
left outer join MPLZoneBranchMapping ZBM on h.BranchId=ZBM.BranchId
left outer join MPLZoneProfiles ZP on ZBM.ZoneId=ZP.ZoneID
left outer join BranchProfiles bp on h.BranchId=bp.BranchID
left outer join Customers c on sh.CustomerID=c.CustomerID

WHERE  1=1 
";
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.TransactionDateTime >=@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    sqlText += " and h.TransactionDateTime <=@DateTo";
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    sqlText += " and ZP.ZoneId =@ZoneId";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }
                if (!string.IsNullOrEmpty(vm.SelfBankId))
                {
                    sqlText += " and SLBank.BankID =@SelfBankId";
                }
                if (!string.IsNullOrEmpty(vm.BDBankId))
                {
                    sqlText += " and BDBank.BankID =@BDBankId";
                }
                if (!string.IsNullOrEmpty(vm.ModeOfPayment))
                {
                    sqlText += " and d.ModeOfPayment =@ModeOfPayment";
                }
                if (!string.IsNullOrEmpty(vm.ReportType))
                {
                    sqlText += " and  sh.ReportType =@ReportType";
                }
                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    sqlText += " and  h.TransactionType =@Post";
                //}


                #endregion



                #region SQL Command

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = currConn;

                cmd.CommandText = sqlText;
                cmd.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    cmd.Parameters.AddWithValue("@ZoneId", vm.ZoneId);
                }
                if (!string.IsNullOrEmpty(vm.SelfBankId))
                {
                    cmd.Parameters.AddWithValue("@SelfBankId", vm.SelfBankId);
                }
                if (!string.IsNullOrEmpty(vm.BDBankId))
                {
                    cmd.Parameters.AddWithValue("@BDBankId", vm.BDBankId);
                }
                if (!string.IsNullOrEmpty(vm.ModeOfPayment))
                {
                    cmd.Parameters.AddWithValue("@ModeOfPayment", vm.ModeOfPayment);
                }
                if (!string.IsNullOrEmpty(vm.ReportType))
                {
                    cmd.Parameters.AddWithValue("@ReportType", vm.ReportType);
                }
                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    cmd.Parameters.AddWithValue("@Post", vm.Post);
                //}


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaBankDepositInfo", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaBankDepositInfo", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }

        public DataTable MeghnaInvoiceCreditInfo(MeghnaMISViewModel vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("MeghnaInvoiceCreditInfo");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 
select
zp.ZoneCode,zp.ZoneName,bp.BranchName,
h.SalesInvoiceNo,h.InvoiceDateTime,c.CustomerName,h.TransactionType,h.ReportType,h.VehicleType,h.VehicleNo,h.Post,h.CustomerOrder,h.CustomerOrderDate,h.Tarcat
,h.SupplyVAT,h.TC,h.LF,h.RF,h.SC,h.ShortExcessAmnt,h.Toll,h.DC,h.ATV,h.LessFrightToPay,h.OtherTotalAmnt,h.RailReceiptNo,h.RailReceiptDate,h.RlyInvNo,h.WetCharge
,h.ToPay,h.Prepaid,p.ProductCode,p.ProductName,t.TankCode,d.InputQuantity,d.UnitPriceWithVAT,d.NBRPrice,d.UOM,d.SDRate, d.SDAmount,d.VATRate,d.VATAmount,d.UOMn
,cr.CRCode,cr.Amount,BDBank.BankName DepositBankName,BPay.ModeOfPayment,BPay.InstrumentNo,BPay.InstrumentDate,BPay.Amount

from SalesInvoiceMPLDetails d
left outer join SalesInvoiceMPLHeaders h on d.SalesInvoiceMPLHeaderId=h.Id
left outer join MPLZoneBranchMapping ZBM on h.BranchId=ZBM.BranchId
left outer join MPLZoneProfiles ZP on ZBM.ZoneId=ZP.ZoneID
left outer join BranchProfiles bp on h.BranchId=bp.BranchID
left outer join Customers c on h.CustomerID=c.CustomerID
left outer join Products p on d.ItemNo=p.ItemNo
left outer join TankMPLs t on d.TankId=t.Id
left outer join SalesInvoiceMPLCRInfos cr on h.Id= cr.SalesInvoiceMPLHeaderId
left outer join SalesInvoiceMPLBankPayments BPay on h.Id= BPay.SalesInvoiceMPLHeaderId
left outer join MPLBDBankInformations BDBank on BPay.BankId=BDBank.BankID

WHERE  1=1 
";
                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    sqlText += " and h.CustomerId =@CustomerId";
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.TransactionDateTime >=@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    sqlText += " and h.TransactionDateTime <=@DateTo";
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    sqlText += " and ZP.ZoneId =@ZoneId";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }
                if (!string.IsNullOrEmpty(vm.ItemNo))
                {
                    sqlText += " and D.ItemNo =@ItemNo";
                }
                if (!string.IsNullOrEmpty(vm.BDBankId))
                {
                    sqlText += " and BPay.BankID =@BDBankId";
                }
                if (!string.IsNullOrEmpty(vm.ModeOfPayment))
                {
                    sqlText += " and d.ModeOfPayment =@ModeOfPayment";
                }
                if (!string.IsNullOrEmpty(vm.ReportType))
                {
                    sqlText += " and  sh.TransactionType =@ReportType";
                }
                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    sqlText += " and  h.TransactionType =@Post";
                //}


                #endregion



                #region SQL Command

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = currConn;

                cmd.CommandText = sqlText;
                cmd.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    cmd.Parameters.AddWithValue("@CustomerId", vm.CustomerId);
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    cmd.Parameters.AddWithValue("@ZoneId", vm.ZoneId);
                }
                if (!string.IsNullOrEmpty(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                if (!string.IsNullOrEmpty(vm.BDBankId))
                {
                    cmd.Parameters.AddWithValue("@BDBankId", vm.BDBankId);
                }
                if (!string.IsNullOrEmpty(vm.ModeOfPayment))
                {
                    cmd.Parameters.AddWithValue("@ModeOfPayment", vm.ModeOfPayment);
                }
                if (!string.IsNullOrEmpty(vm.ReportType))
                {
                    cmd.Parameters.AddWithValue("@ReportType", vm.ReportType);
                }
                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    cmd.Parameters.AddWithValue("@Post", vm.Post);
                //}


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaBankDepositInfo", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaBankDepositInfo", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }

        public DataTable MeghnaTransferIssueInfo(MeghnaMISViewModel vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("MeghnaTransferIssueInfo");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 
select zp.ZoneCode,zp.ZoneName,bp.BranchName,T_ZP.ZoneCode To_ZoneCode,T_zp.ZoneName To_ZoneName,T_bp.BranchName To_BranchName
,h.TransferTRCode ,h.TransferIssueNo,h.TransferDateTime,h.TransactionType,h.VehicleType,h.VehicleNo,
h.DIP,h.RailwayReceiptNo,h.RailwayReceiptDate,h.RailwayInvoiceNo,h.WeightChargeed,h.FreightToPay,h.FreightPrepaid,h.TestReportNo
,h.TestReportDate,h.TestReportTempPF,h.TestReportSPGR
,p.ProductCode,p.ProductName,d.UOM,d.RequestedQuantity,d.RequestedVolumn,d.Quantity,d.LCF,d.QU,d.IsExcise,d.IsCustoms,t.TankCode,d.Temperature,d.SP_Gravity,d.QtyAt30Temperature
 from TransferMPLIssueDetails d
left outer join TransferMPLIssues h on d.TransferMPLIssueId=h.Id

left outer join MPLZoneBranchMapping ZBM on h.BranchId=ZBM.BranchId
left outer join MPLZoneProfiles ZP on ZBM.ZoneId=ZP.ZoneID
left outer join BranchProfiles bp on h.BranchId=bp.BranchID

left outer join MPLZoneBranchMapping T_ZBM on h.TransferTo=T_ZBM.BranchId
left outer join MPLZoneProfiles T_ZP on T_ZBM.ZoneId=T_ZP.ZoneID
left outer join BranchProfiles T_bp on h.TransferTo=T_bp.BranchID

left outer join Products p on d.ItemNo=p.ItemNo
left outer join TankMPLs t on d.TankId=t.Id

WHERE  1=1 
";

                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.TransferDateTime >=@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    sqlText += " and h.TransferDateTime <=@DateTo";
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    sqlText += " and ZP.ZoneId =@ZoneId";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }
                if (!string.IsNullOrEmpty(vm.ItemNo))
                {
                    sqlText += " and D.ItemNo =@ItemNo";
                }

                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    sqlText += " and  h.TransactionType =@Post";
                //}


                #endregion



                #region SQL Command

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = currConn;

                cmd.CommandText = sqlText;
                cmd.CommandType = CommandType.Text;

                #endregion

                #region Parameters


                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    cmd.Parameters.AddWithValue("@BranchId", vm.BranchId);
                }
                if (!string.IsNullOrEmpty(vm.ZoneId))
                {
                    cmd.Parameters.AddWithValue("@ZoneId", vm.ZoneId);
                }
                if (!string.IsNullOrEmpty(vm.ItemNo))
                {
                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                }
                //if (!string.IsNullOrEmpty(vm.Post))
                //{
                //    cmd.Parameters.AddWithValue("@Post", vm.Post);
                //}


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaBankDepositInfo", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaBankDepositInfo", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }


        public DataTable MegnaCA29Report(string Id, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("MegnaCA29Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
Select
BPR.Id
,BPR.Code
,BPR.BranchId
,BPRD.BDBankId
,BDB.BankCode BDBankCode
,BDB.BankName BDBankName
,ISNULL(BP.BranchCode, '') BranchCode
,ISNULL(BP.BranchBanglaLegalName, '') BranchBanglaLegalName
,ISNULL(BP.BranchName, '') BranchName
,ISNULL(BP.Address, '') BranchAddress
,ISNULL(c.CustomerCode, '') CustomerCode
,ISNULL(c.CustomerName, '') CustomerName
,ISNULL(c.Address1, '') CustomerAddress
,BPR.CustomerId
,BPRD.ModeOfPayment
,BPRD.InstrumentNo
,BPR.TransactionDateTime
,FORMAT(BPRD.InstrumentDate,'dd-MMM-yyyy' )InstrumentDate
,BPRD.Amount


FROM MPLBankPaymentReceiveDetails BPRD
LEFT OUTER JOIN MPLBankPaymentReceives BPR ON BPR.Id = BPRD.BankPaymentReceiveId
LEFT OUTER JOIN MPLBDBankInformations BDB ON BDB.BankID = BPRD.BDBankId
LEFT OUTER JOIN BranchProfiles BP ON BP.BranchID = BPR.BranchId
LEFT OUTER JOIN Customers c on c.CustomerID=BPR.CustomerId 

WHERE  1=1

";

                if (!string.IsNullOrWhiteSpace(Id))
                {
                    sqlText += " and BPR.Id =@Id ";

                }




                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters

                objCommIssueReport.Parameters.AddWithValue("@Id", Id);


                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaCA29Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MegnaCA29Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }


        public DataSet MeghnaSaleReport(MeghnaMISViewModel vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("MeghnaSaleReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

--declare @InvoiceDateTime varchar(100)='2024-01-02'
select  SalesInvoiceNo,  FORMAT(CAST(h.InvoiceDateTime AS DATETIME), 'yyyy-MM-dd') AS InvoiceDateTime, 	h.ReportType,cg.CustomerGroupName,p.ProductName,p.ProductCode,p.PackSize,Quantity,SubTotal,VATAmount

from SalesInvoiceMPLDetails d
left outer join SalesInvoiceMPLHeaders h on d.SalesInvoiceMPLHeaderId=h.Id
left outer join Customers c on h.CustomerID=c.CustomerID
left outer join CustomerGroups cg on c.CustomerGroupID=cg.CustomerGroupID
left outer join Products p on d.ItemNo=p.ItemNo
WHERE 
 h.InvoiceDateTime> dateadd(d,0,@InvoiceDateTime) and h.InvoiceDateTime< dateadd(d,1,@InvoiceDateTime)

and h.Post='Y'
and h.ReportType='SA-2'
order by SalesInvoiceNo,p.ProductName


SELECT 
    V.ColName AS Type,
    SUM(
        CASE 
            WHEN ColName = 'SupplyVAT' THEN ISNULL(h.SupplyVAT, 0)
            WHEN ColName = 'TC' THEN ISNULL(h.TC, 0)
            WHEN ColName = 'LF' THEN ISNULL(h.LF, 0)
            WHEN ColName = 'RF' THEN ISNULL(h.RF, 0)
            WHEN ColName = 'SC' THEN ISNULL(h.SC, 0)
            WHEN ColName = 'ShortExcessAmnt' THEN ISNULL(h.ShortExcessAmnt, 0)
            WHEN ColName = 'Toll' THEN ISNULL(h.Toll, 0)
            WHEN ColName = 'DC' THEN ISNULL(h.DC, 0)
            WHEN ColName = 'ATV' THEN ISNULL(h.ATV, 0)
            ELSE 0 
        END
    ) AS TotalValue
FROM 
    SalesInvoiceMPLHeaders h
CROSS APPLY (
    VALUES ('SupplyVAT'), ('TC'), ('LF'), ('RF'), ('SC'), ('ShortExcessAmnt'), ('Toll'), ('DC'), ('ATV')
) AS V(ColName)
WHERE 
 h.InvoiceDateTime> dateadd(d,0,@InvoiceDateTime) and h.InvoiceDateTime< dateadd(d,1,@InvoiceDateTime)

    AND h.Post = 'Y'
and h.ReportType=@ReportType
GROUP BY 
    FORMAT(h.InvoiceDateTime, 'yyyy-MM-dd'), V.ColName
ORDER BY 
    FORMAT(h.InvoiceDateTime, 'yyyy-MM-dd'), V.ColName;






Select Sbnk.BankName,sum(D.Amount)Amount from MPLBankDepositSlipDetails D
left outer join MPLBankDepositSlipHeaders h on d.BankDepositSlipHeaderId=h.Id
left outer join MPLSelfBankInformations Sbnk on h.SelfBankId=Sbnk.BankID
WHERE 
 h.TransactionDateTime> dateadd(d,0,@InvoiceDateTime) and h.TransactionDateTime< dateadd(d,1,@InvoiceDateTime)
and  h.TransactionType=@ReportType
group by  Sbnk.BankName
";



                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommSaleReport.Parameters.AddWithValue("@InvoiceDateTime", vm.DateFrom);
                objCommSaleReport.Parameters.AddWithValue("@ReportType", vm.ReportType);
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaSaleReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaSaleReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataTable MeghnaCustemerLedgerReport(MeghnaMISViewModel vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dt = new DataTable("MeghnaCustemerLedgerReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 
select 
SL
,SalesInvoiceNo 
,InvoiceDateTime 
,c.CustomerID
,c.CustomerCode
,c.CustomerName
,a.Opening
,DrAmount
,CrAmount
,Remarks from (


------------------------------- Transaction --------------------------------------------
select a.*
from(
select 'D'SL, SalesInvoiceNo , InvoiceDateTime ,CustomerID,0 Opening, 0 DrAmount,TotalAmount CrAmount, 'Sales' Remarks from SalesInvoiceMPLHeaders h
where 1=1";
                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    sqlText += " and h.CustomerID =@CustomerID";
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.InvoiceDateTime >=@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    sqlText += " and h.InvoiceDateTime <=@DateTo";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }

                sqlText += @"
union all
select 'C'SL, s.SalesInvoiceNo, InvoiceDateTime,s.CustomerID,0 Opening, Amount DrAmount,0 CrAmount 
,ModeOfPayment + '~ '+ bank.BankName+ '~ '+ CONVERT(varchar(10), InstrumentDate, 121) + '~ '+InstrumentNo as Remarks  
from SalesInvoiceMPLBankPayments  b
left outer join SalesInvoiceMPLHeaders s on b.SalesInvoiceMPLHeaderId=s.Id
left outer join MPLBDBankInformations bank on b.BankId=bank.BankID
where bankPaymentReceiveid=0";

                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    sqlText += " and s.CustomerID =@CustomerID";
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and s.InvoiceDateTime >=@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    sqlText += " and s.InvoiceDateTime <=@DateTo";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and s.BranchId =@BranchId";
                }

                sqlText += @"
union all
select 'B'SL, isnull(s.SalesInvoiceNo,0), h.TransactionDateTime,isnull(h.CustomerID,0),0 Opening, b.Amount DrAmount,0 CrAmount  
,b.ModeOfPayment + '~ '+ bank.BankName+ '~ '+ CONVERT(varchar(10), b.InstrumentDate, 121) + '~ '+b.InstrumentNo as Remarks  
 from MPLBankPaymentReceiveDetails b
 left outer join MPLBankPaymentReceives h on b.BankPaymentReceiveId=h.Id
left outer join SalesInvoiceMPLHeaders s on b.SalesInvoiceRefId=s.Id
left outer join MPLBDBankInformations bank on b.BDBankId=bank.BankID
where 1=1";

                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    sqlText += " and h.CustomerID =@CustomerID";
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.TransactionDateTime >=@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    sqlText += " and h.TransactionDateTime <=@DateTo";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }
                sqlText += @"

) as a
------------------------------- Transaction --------------------------------------------


------------------------------- opening --------------------------------------------
union all
select  'A'SL,'-'SalesInvoiceNo, @Date TransactionDateTime, a.CustomerID,sum(a.Opening)Opening,0 DrAmount,0 CrAmount , 'Opening' Remarks
from(
select distinct CustomerID,sum(-1*TotalAmount) Opening from SalesInvoiceMPLHeaders h
where 1=1";
                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    sqlText += " and h.CustomerID =@CustomerID";
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.InvoiceDateTime <@DateFrom";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }


                sqlText += @"


group by h.CustomerID

union all
select distinct s.CustomerID,sum(Amount) Opening
from SalesInvoiceMPLBankPayments b
left outer join SalesInvoiceMPLHeaders s on b.SalesInvoiceMPLHeaderId=s.Id
where b.bankPaymentReceiveid=0";


                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    sqlText += " and s.CustomerID =@CustomerID";
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and s.InvoiceDateTime <@DateFrom";
                }
                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and s.BranchId =@BranchId";
                }

                sqlText += @"

group by s.CustomerID

union all
select distinct h.CustomerID , sum(b.Amount) Opening  
 from MPLBankPaymentReceiveDetails b
 left outer join MPLBankPaymentReceives h on b.BankPaymentReceiveId=h.Id
where 1=1";

                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    sqlText += " and h.CustomerID =@CustomerID";
                }
                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    sqlText += " and h.TransactionDateTime <@DateFrom";
                }

                if (!string.IsNullOrEmpty(vm.BranchId))
                {
                    sqlText += " and h.BranchId =@BranchId";
                }

                sqlText += @"

group by h.CustomerID";

                  sqlText += @"


union all

Select  C.CustomerID ,sum(c.opening)Opening 
from Customers c where 1=1

group by C.CustomerID
";


                sqlText += @"
) as a
 group by a.CustomerID
 ------------------------------- opening --------------------------------------------
) as a 
 left outer join Customers c on a.CustomerID=c.CustomerID
order by  a.InvoiceDateTime,SalesInvoiceNo,sl



";




                #endregion



                #region SQL Command

                SqlCommand cmd = new SqlCommand();
                cmd.Connection = currConn;

                cmd.CommandText = sqlText;
                cmd.CommandType = CommandType.Text;

                #endregion

                #region Parameters


                if (!string.IsNullOrEmpty(vm.DateFrom))
                {
                    cmd.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                    cmd.Parameters.AddWithValue("@Date", vm.DateFrom);

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Date", DateTime.Now.ToString("yyyy-MM-dd"));

                }
                if (!string.IsNullOrEmpty(vm.DateTo))
                {
                    cmd.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }
                if (!string.IsNullOrEmpty(vm.CustomerId))
                {
                    cmd.Parameters.AddWithValue("@CustomerId", vm.CustomerId);
                }



                #endregion
                SqlDataAdapter dataAdapter = new SqlDataAdapter(cmd);
                dataAdapter.Fill(dt);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaCustemerLedgerReport", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaCustemerLedgerReport", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dt;
        }


        public DataSet MeghnaIN89Report(ReportParamVM vm, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataset = new DataSet("MeghnaIN89Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

Select 
 MPLIN89Headers.Id
,MPLIN89Headers.Code
,MPLIN89Headers.BranchId
,BranchProfiles.BranchCode
,BranchProfiles.BranchName
,BranchProfiles.Address BranchAddress
,MPLIN89Headers.TransactionDateTime
,MPLIN89Headers.TransactionType
,MPLIN89Headers.Comments
,MPLIN89Headers.DIP
,MPLIN89Headers.Temperature
,MPLIN89Headers.SP_Gravity
,MPLIN89Headers.IssueNaturalQuantity
,MPLIN89Headers.Issueat30Quantity
,MPLIN89Headers.ReceiveNaturalQuantity
,MPLIN89Headers.Receiveat30Quantity
,MPLIN89Headers.GainNaturalQuantity
,MPLIN89Headers.Gainat30Quantity
,MPLIN89Headers.IsLoss
,MPLIN89Details.TransferMPLReceiveDetailId
,MPLIN89Details.TransferMPLReceiveId
,MPLIN89Details.ItemNo
,Products.ProductCode
,Products.ProductName
,MPLIN89Details.ReceiveNaturalQuantity

from MPLIN89Details 
left outer join MPLIN89Headers on MPLIN89Headers.Id=MPLIN89Details.MPLIN89HeaderId
left outer join BranchProfiles on BranchProfiles.BranchID=MPLIN89Headers.BranchId
left outer join Products on Products.ItemNo=MPLIN89Details.ItemNo
where MPLIN89Headers.Id=@Id


SELECT 
    TransferMPLIssues.TransferIssueNo
       ,MPLIN89IssueDetails.MPLIN89HeaderId
      ,MPLIN89IssueDetails.TransactionDateTime
      ,MPLIN89IssueDetails.TransactionType
      ,MPLIN89IssueDetails.TransferIssueMasterRefId
      ,MPLIN89IssueDetails.TransferIssueDetailsRefId
      ,MPLIN89IssueDetails.ItemNo
	  ,Products.ProductCode
      ,Products.ProductName
      ,MPLIN89IssueDetails.Temperature
      ,MPLIN89IssueDetails.SP_Gravity
      ,MPLIN89IssueDetails.DIP
      ,MPLIN89IssueDetails.WagonNo
      ,MPLIN89IssueDetails.IssueNaturalQuantity
      ,MPLIN89IssueDetails.Issueat30Quantity
  FROM MPLIN89IssueDetails
left outer join Products on Products.ItemNo=MPLIN89IssueDetails.ItemNo
left outer join TransferMPLIssues on TransferMPLIssues.Id=MPLIN89IssueDetails.TransferIssueMasterRefId

where MPLIN89IssueDetails.MPLIN89HeaderId=@Id



Select
TransferReceives.TransferReceiveNo
,TransferMPLReceiveDetails.ReceiveDateTime
,Products.ProductCode
,Products.ProductName
,TransferMPLReceiveDetails.Quantity
,TransferMPLReceiveDetails.WagonNo

from  TransferMPLReceiveDetails
left outer join TransferReceives on TransferMPLReceiveDetails.TransferMPLReceiveId=TransferReceives.id
left outer join MPLIN89Details on TransferMPLReceiveDetails.Id=MPLIN89Details.TransferMPLReceiveDetailId
left outer join Products on Products.ItemNo=TransferMPLReceiveDetails.ItemNo
where MPLIN89Details.MPLIN89HeaderId=@Id

";



                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameters
                objCommSaleReport.Parameters.AddWithValue("@Id", vm.Id);
                #endregion

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataset);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaIN89Report", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "MeghnaIN89Report", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataset;
        }


        #endregion

        public DataTable GetDayWiseSalesData(SaleMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable("DayWise");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                sqlText = " ";
                sqlText = @" 

select 
 format(InvoiceDateTime,'MM/dd/yyyy') InvoiceDate
,sum(uomqty)Quantity
,sum(subtotal)SubTotal
,sum(vatamount)VATAmount  
from SalesInvoiceDetails
where 1=1  
and TransactionType='Other'

";

                if (!string.IsNullOrWhiteSpace(vm.DateFrom))
                {
                    sqlText += @" and InvoiceDateTime>=@DateFrom";
                }
                if (!string.IsNullOrWhiteSpace(vm.DateTo))
                {
                    sqlText += @" and InvoiceDateTime<=@DateTo";
                }

                sqlText += @"

group by format(InvoiceDateTime,'MM/dd/yyyy')

ORDER BY format(InvoiceDateTime,'MM/dd/yyyy');
";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                if (!string.IsNullOrWhiteSpace(vm.DateFrom))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                }
                if (!string.IsNullOrWhiteSpace(vm.DateTo))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);

                dataAdapter.Fill(dt);

                #region Rename Column Name

                //dt.Columns["NoOfInvoice"].ColumnName = "No Of Invoice";
                //dt.Columns["InvoiceDateTime"].ColumnName = "VAT Challan Date";
                //dt.Columns["UOMQty"].ColumnName = "Total Quantity";
                //dt.Columns["SubTotal"].ColumnName = "Total VAT base Value";
                //dt.Columns["VATAmount"].ColumnName = "Total VAT";

                #endregion

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "GetDayWiseSalesData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }

            #endregion

            return dt;
        }

        public DataTable GetBranchWiseSalesData(SaleMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable("BranchWise");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                sqlText = " ";
                sqlText = @" 

select 
bf.BranchName
,sum(sid.uomqty)Quantity
,sum(sid.subtotal)SubTotal
,sum(sid.vatamount)VATAmount 
from SalesInvoiceDetails sid
left outer join BranchProfiles bf on sid.BranchId=bf.BranchID
where 1=1
and TransactionType='Other'

";

                if (!string.IsNullOrWhiteSpace(vm.DateFrom))
                {
                    sqlText += @" and sid.InvoiceDateTime>=@DateFrom";
                }
                if (!string.IsNullOrWhiteSpace(vm.DateTo))
                {
                    sqlText += @" and sid.InvoiceDateTime<=@DateTo";
                }

                sqlText += @"
group by 
sid.BranchId ,bf.BranchName
";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                if (!string.IsNullOrWhiteSpace(vm.DateFrom))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                }
                if (!string.IsNullOrWhiteSpace(vm.DateTo))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);

                dataAdapter.Fill(dt);

                #region Rename Column Name

                //dt.Columns["NoOfInvoice"].ColumnName = "No Of Invoice";
                //dt.Columns["InvoiceDateTime"].ColumnName = "VAT Challan Date";
                //dt.Columns["UOMQty"].ColumnName = "Total Quantity";
                //dt.Columns["SubTotal"].ColumnName = "Total VAT base Value";
                //dt.Columns["VATAmount"].ColumnName = "Total VAT";

                #endregion

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "GetBranchWiseSalesData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }

            #endregion

            return dt;
        }

        public DataTable GetProductWiseSalesData(SaleMISViewModel vm, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {

            #region Variables
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            string sqlText = "";
            DataTable dt = new DataTable("ProductWise");

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement
                sqlText = " ";
                sqlText = @" 

select 
 pro.ProductCode
,pro.ProductName
,sum(sid.uomqty)Quantity
,sum(sid.subtotal)SubTotal
,sum(sid.vatamount)VATAmount 
from SalesInvoiceDetails sid
left outer join Products pro on sid.ItemNo=pro.ItemNo
where 1=1
and TransactionType='Other'

";

                if (!string.IsNullOrWhiteSpace(vm.DateFrom))
                {
                    sqlText += @" and sid.InvoiceDateTime>=@DateFrom";
                }
                if (!string.IsNullOrWhiteSpace(vm.DateTo))
                {
                    sqlText += @" and sid.InvoiceDateTime<=@DateTo";
                }

                sqlText += @"
group by  
 pro.ProductCode
,pro.ProductName
";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                if (!string.IsNullOrWhiteSpace(vm.DateFrom))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateFrom", vm.DateFrom);
                }
                if (!string.IsNullOrWhiteSpace(vm.DateTo))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DateTo", vm.DateTo);
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);

                dataAdapter.Fill(dt);

                #endregion
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ReportDSDAL", "GetProductWiseSalesData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }

            #endregion

            #region finally

            finally
            {
                if (VcurrConn == null && currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }

            #endregion

            return dt;
        }

        public StockMISViewModel MISSalesData_Download(SaleMISViewModel Paramvm, SysDBInfoVMTemp connVM = null)
        {
            StockMISViewModel vm = new StockMISViewModel();

            try
            {

                DataTable dt = new DataTable();

                //////Program.FontSize = cmbFontSize.Text.Trim() == "" ? "7" : cmbFontSize.Text.Trim();

                DBSQLConnection _dbsqlConnection = new DBSQLConnection();

                if (Paramvm.reportName == "DayWise")
                {
                    vm.FileName = "DayWiseSalesData" + " " + DateTime.Now.ToString("yyy-MM-dd HHmmss");
                    vm.ReportHeaderName = "Day Wise Sale Summary";
                    dt = GetDayWiseSalesData(Paramvm, null, null, connVM);
                }
                else if (Paramvm.reportName == "BranchWise")
                {
                    vm.FileName = "BranchWiseSalesData" + " " + DateTime.Now.ToString("yyy-MM-dd HHmmss");
                    vm.ReportHeaderName = "Branch Wise Sale Summary";

                    dt = GetBranchWiseSalesData(Paramvm, null, null, connVM);
                }
                else if (Paramvm.reportName == "ItemWise")
                {
                    vm.FileName = "ItemWiseSalesData" + " " + DateTime.Now.ToString("yyy-MM-dd HHmmss");
                    vm.ReportHeaderName = "Product Wise Sale Summary";

                    dt = GetProductWiseSalesData(Paramvm, null, null, connVM);
                }

                //////vm = new _9_1_VATReturnDAL().VAT9_1_SubForm_Download(vm);

                DataTable dtComapnyProfile = new DataTable();

                DataSet tempDS = new DataSet();
                tempDS = new ReportDSDAL().ComapnyProfile("", connVM);
                dtComapnyProfile = tempDS.Tables[0];
                vm.dtComapnyProfile = dtComapnyProfile;
                DataRow dr = vm.dtComapnyProfile.Rows[0];

                string ComapnyName = dr["CompanyLegalName"].ToString();
                string VatRegistrationNo = dr["VatRegistrationNo"].ToString();
                string Address1 = dr["Address1"].ToString();

                string ParamFromDate;
                string ParamToDate;


                if (!string.IsNullOrWhiteSpace(Paramvm.DateFrom))
                {
                    ParamFromDate = Convert.ToDateTime(Paramvm.DateFrom).ToString("dd-MMM-yyyy");
                }
                else
                {
                    ParamFromDate = "All";
                }

                if (!string.IsNullOrWhiteSpace(Paramvm.DateTo))
                {
                    ParamToDate = Convert.ToDateTime(Paramvm.DateTo).ToString("dd-MMM-yyyy");
                }
                else
                {
                    ParamToDate = "All";
                }


                string[] ReportHeaders = new string[] { ComapnyName, VatRegistrationNo, Address1, vm.ReportHeaderName, "Form Date:" + ParamFromDate + "                To Date:" + ParamToDate };
                //////string[] ReportHeaders = new string[] { ComapnyName, VatRegistrationNo, Address1, "Stock Summery" };


                if (dt == null || dt.Rows.Count == 0)
                {
                    return vm;
                }

                #region Column Name Change


                dt = OrdinaryVATDesktop.DtSlColumnAdd(dt);

                string[] DtcolumnName = new string[dt.Columns.Count];
                int j = 0;
                foreach (DataColumn column in dt.Columns)
                {
                    DtcolumnName[j] = column.ColumnName;
                    j++;
                }

                for (int k = 0; k < DtcolumnName.Length; k++)
                {
                    dt = OrdinaryVATDesktop.DtColumnNameChange(dt, DtcolumnName[k], OrdinaryVATDesktop.AddSpacesToSentence(DtcolumnName[k]));
                }

                string pathRoot = AppDomain.CurrentDomain.BaseDirectory;
                string fileDirectory = pathRoot + "//Excel Files";
                Directory.CreateDirectory(fileDirectory);

                //vm.FileName = "_Stock_Report";

                fileDirectory += "\\" + vm.FileName + ".xlsx";
                FileStream objFileStrm = File.Create(fileDirectory);

                int TableHeadRow = 0;
                TableHeadRow = ReportHeaders.Length + 2;

                int RowCount = 0;
                RowCount = dt.Rows.Count;

                int ColumnCount = 0;
                ColumnCount = dt.Columns.Count;

                int GrandTotalRow = 0;
                GrandTotalRow = TableHeadRow + RowCount + 1;

                if (Paramvm.reportName == "DayWise")
                {
                    vm.SheetName = "DayWise";
                }
                else if (Paramvm.reportName == "BranchWise")
                {
                    vm.SheetName = "BranchWise";
                }
                else if (Paramvm.reportName == "ItemWise")
                {
                    vm.SheetName = "ItemWise";
                }
               
                #endregion

                ExcelPackage package = new ExcelPackage(objFileStrm);

                ////ExcelWorksheet ws = package.Workbook.Worksheets.Add("_Stock_Report");
                ExcelWorksheet ws = package.Workbook.Worksheets.Add("Sales");

                ////////ws.Cells["A1"].LoadFromDataTable(dt, true);
                ws.Cells[TableHeadRow, 1].LoadFromDataTable(dt, true);

                #region Format

                var format = new OfficeOpenXml.ExcelTextFormat();
                format.Delimiter = '~';
                format.TextQualifier = '"';
                format.DataTypes = new[] { eDataTypes.String };

                for (int i = 0; i < ReportHeaders.Length; i++)
                {
                    ws.Cells[i + 1, 1, (i + 1), ColumnCount].Merge = true;
                    ws.Cells[i + 1, 1, (i + 1), ColumnCount].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    ws.Cells[i + 1, 1, (i + 1), ColumnCount].Style.Font.Size = 16 - i;
                    ws.Cells[i + 1, 1].LoadFromText(ReportHeaders[i], format);

                }
                int colNumber = 0;

                foreach (DataColumn col in dt.Columns)
                {
                    colNumber++;
                    if (col.DataType == typeof(DateTime))
                    {
                        ws.Column(colNumber).Style.Numberformat.Format = "dd-MMM-yyyy hh:mm:ss AM/PM";
                    }
                    else if (col.DataType == typeof(Decimal))
                    {

                        ws.Column(colNumber).Style.Numberformat.Format = "#,##0.00_);[Red](#,##0.00)";

                        #region Grand Total
                        ws.Cells[GrandTotalRow, colNumber].Formula = "=Sum(" + ws.Cells[TableHeadRow + 1, colNumber].Address + ":" + ws.Cells[(TableHeadRow + RowCount), colNumber].Address + ")";
                        #endregion
                    }

                }

                //////ws.Cells[ReportHeaders.Length + 3, 1, ReportHeaders.Length + 3 + dt.Rows.Count, dt.Columns.Count].Style.Numberformat.Format = "#,##0.00_);[Red](#,##0.00)";

                ws.Cells[TableHeadRow, 1, TableHeadRow, ColumnCount].Style.Font.Bold = true;
                ws.Cells[GrandTotalRow, 1, GrandTotalRow, ColumnCount].Style.Font.Bold = true;

                ws.Cells["A" + (TableHeadRow) + ":" + OrdinaryVATDesktop.Alphabet[(ColumnCount - 1)] + (TableHeadRow + RowCount + 2)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                ws.Cells["A" + (TableHeadRow) + ":" + OrdinaryVATDesktop.Alphabet[(ColumnCount)] + (TableHeadRow + RowCount + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                ws.Cells[GrandTotalRow, 1].LoadFromText("Grand Total");
                #endregion


                vm.varFileDirectory = fileDirectory;
                vm.varExcelPackage = package;
                vm.varFileStream = objFileStrm;
                ////package.Save();
                ////objFileStrm.Close();

            }
            catch (Exception)
            {

                throw;
            }
            finally { }
            return vm;
        }


    }
}
