//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VATDesktop.Repo.CurrencyConversionWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyConversionWCF.ICurrencyConversionWCF")]
    public interface ICurrencyConversionWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/DoWork", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/DoWork", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/SelectAll", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/SelectAllResponse")]
        string SelectAll(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/SelectAll", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/SelectAllResponse")]
        System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/Delete", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/DeleteResponse")]
        string Delete(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/Delete", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/InsertToCurrencyConversion", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/InsertToCurrencyConversionResponse")]
        string InsertToCurrencyConversion(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/InsertToCurrencyConversion", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/InsertToCurrencyConversionResponse")]
        System.Threading.Tasks.Task<string> InsertToCurrencyConversionAsync(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/SearchCurrencyConversionNew", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/SearchCurrencyConversionNewResponse")]
        string SearchCurrencyConversionNew(string CurrencyCodeF, string CurrencyNameF, string CurrencyCodeT, string CurrencyNameT, string ActiveStatus, string convDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/SearchCurrencyConversionNew", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/SearchCurrencyConversionNewResponse")]
        System.Threading.Tasks.Task<string> SearchCurrencyConversionNewAsync(string CurrencyCodeF, string CurrencyNameF, string CurrencyCodeT, string CurrencyNameT, string ActiveStatus, string convDate, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/SelectAllList", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/SelectAllListResponse")]
        string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/SelectAllList", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/SelectAllListResponse")]
        System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/UpdateCurrencyConversion", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/UpdateCurrencyConversionResponse")]
        string UpdateCurrencyConversion(string vmwcf, string connVMwcf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyConversionWCF/UpdateCurrencyConversion", ReplyAction="http://tempuri.org/ICurrencyConversionWCF/UpdateCurrencyConversionResponse")]
        System.Threading.Tasks.Task<string> UpdateCurrencyConversionAsync(string vmwcf, string connVMwcf);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyConversionWCFChannel : VATDesktop.Repo.CurrencyConversionWCF.ICurrencyConversionWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyConversionWCFClient : System.ServiceModel.ClientBase<VATDesktop.Repo.CurrencyConversionWCF.ICurrencyConversionWCF>, VATDesktop.Repo.CurrencyConversionWCF.ICurrencyConversionWCF {
        
        public CurrencyConversionWCFClient() {
        }
        
        public CurrencyConversionWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyConversionWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConversionWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyConversionWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SelectAll(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf) {
            return base.Channel.SelectAll(Id, conditionField, conditionValue, Dt, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllAsync(int Id, string conditionField, string conditionValue, bool Dt, string connVMwcf) {
            return base.Channel.SelectAllAsync(Id, conditionField, conditionValue, Dt, connVMwcf);
        }
        
        public string Delete(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.Delete(vmwcf, idswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(string vmwcf, string idswcf, string connVMwcf) {
            return base.Channel.DeleteAsync(vmwcf, idswcf, connVMwcf);
        }
        
        public string InsertToCurrencyConversion(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToCurrencyConversion(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> InsertToCurrencyConversionAsync(string vmwcf, string connVMwcf) {
            return base.Channel.InsertToCurrencyConversionAsync(vmwcf, connVMwcf);
        }
        
        public string SearchCurrencyConversionNew(string CurrencyCodeF, string CurrencyNameF, string CurrencyCodeT, string CurrencyNameT, string ActiveStatus, string convDate, string connVMwcf) {
            return base.Channel.SearchCurrencyConversionNew(CurrencyCodeF, CurrencyNameF, CurrencyCodeT, CurrencyNameT, ActiveStatus, convDate, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SearchCurrencyConversionNewAsync(string CurrencyCodeF, string CurrencyNameF, string CurrencyCodeT, string CurrencyNameT, string ActiveStatus, string convDate, string connVMwcf) {
            return base.Channel.SearchCurrencyConversionNewAsync(CurrencyCodeF, CurrencyNameF, CurrencyCodeT, CurrencyNameT, ActiveStatus, convDate, connVMwcf);
        }
        
        public string SelectAllList(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllList(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> SelectAllListAsync(int Id, string conditionFieldswcf, string conditionValueswcf, string connVMwcf) {
            return base.Channel.SelectAllListAsync(Id, conditionFieldswcf, conditionValueswcf, connVMwcf);
        }
        
        public string UpdateCurrencyConversion(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateCurrencyConversion(vmwcf, connVMwcf);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCurrencyConversionAsync(string vmwcf, string connVMwcf) {
            return base.Channel.UpdateCurrencyConversionAsync(vmwcf, connVMwcf);
        }
    }
}
