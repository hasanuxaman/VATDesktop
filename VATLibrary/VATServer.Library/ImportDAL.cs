using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Odbc;
using System.Data.OleDb;
using System.Data.OracleClient;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using SymphonySofttech.Utilities;
using VATViewModel.DTOs;
using System.IO;
//using Excel;
using System.Globalization;
using VATServer.Interface;
using VATServer.Ordinary;
using ExcelDataReader;
//using IBM.Data.DB2;
using OfficeOpenXml;


namespace VATServer.Library
{
    public class ImportDAL : IImport
    {

        private string[] sqlResults;
        private DBSQLConnection _dbsqlConnection = new DBSQLConnection();
        private const string FieldDelimeter = DBConstant.FieldDelimeter;

        #region Master Data Import Methods

        public string[] ImportProduct(List<ProductVM> products, List<TrackingVM> trackings, List<ProductVM> productDetails = null, DataTable productStocks = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            TrackingDAL trackingDal = new TrackingDAL();
            string trackMsg = "";
            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction

                #region Settings

                bool AutoCode = false;

                AutoCode = Convert.ToBoolean(new CommonDAL().settings("AutoCode", "Item", currConn, transaction) == "Y");

                List<ProductVM> varProductVMs = new List<ProductVM>();

                if (AutoCode == false)
                {
                    #region Empty Product Code Check


                    if (products != null && products.Count > 0)
                    {
                        varProductVMs = products.Where(c => string.IsNullOrWhiteSpace(c.ProductCode)).ToList();

                        if (varProductVMs != null && varProductVMs.Count > 0)
                        {
                            throw new ArgumentNullException("ImportProduct", "AutoCode not Allowed in Settings! So Code is a Mandatory Field! " + Environment.NewLine + varProductVMs.FirstOrDefault().ProductName);
                        }
                    }

                    #endregion
                }

                #endregion

                #region Checkpoint

                #region Empty Product CategoryName Check

                varProductVMs = new List<ProductVM>();
                if (products != null && products.Count > 0)
                {
                    varProductVMs = products.Where(c => string.IsNullOrWhiteSpace(c.CategoryName)).ToList();

                    if (varProductVMs != null && varProductVMs.Count > 0)
                    {
                        throw new ArgumentNullException("ImportProduct", "Product Category is a Mandatory Field! " + Environment.NewLine + varProductVMs.FirstOrDefault().ProductName);
                    }
                }

                #endregion

                #region Product Category Exist Check

                List<ProductCategoryVM> varProductCategoryVMs = new List<ProductCategoryVM>();
                varProductCategoryVMs = new ProductCategoryDAL().SelectAllList(0, null, null, currConn, transaction, null);

                List<string> varProductCategorys = varProductCategoryVMs.Select(c => c.CategoryName.ToLower()).Distinct().ToList();

                List<string> varExcelProductCategorys = products.Select(c => c.CategoryName.ToLower().Trim()).Distinct().ToList();

                foreach (string PC in varExcelProductCategorys)
                {
                    if (!varProductCategorys.Contains(PC))
                    {
                        throw new ArgumentNullException("ImportProduct", "Product Category not exist in System (" + PC + ").");

                    }
                }

                #endregion

                #endregion

                #region Insert / Update

                int i = 0;
                PurchaseDAL purchaseDal = new PurchaseDAL();

                foreach (ProductVM Item in products.ToList())
                {
                    i++;

                    try
                    {


                        #region Checkpoint

                        sqlText = "select distinct CategoryID from ProductCategories where  CategoryName=@ItemCategoryName";
                        SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
                        cmdCId.Transaction = transaction;

                        cmdCId.Parameters.AddWithValue("@ItemCategoryName", Item.CategoryName.Trim());

                        string CID = Convert.ToString(cmdCId.ExecuteScalar());

                        #endregion

                        #region Product Code Exist or not

                        sqlText = "select count(ProductCode) from Products where  ProductCode=@ItemProductCode";
                        SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                        cmdCodeExist.Transaction = transaction;
                        cmdCodeExist.Parameters.AddWithValue("@ItemProductCode", Item.ProductCode);
                        countId = (int)cmdCodeExist.ExecuteScalar();

                        #endregion Product Code Exist

                        if (countId <= 0)
                        {
                            #region Insert
                            #region ProductID
                            sqlText = "select isnull(max(cast(ItemNo as int)),0)+1 FROM  Products WHERE SUBSTRING(ItemNo,1,3)<>'ovh'";
                            SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                            cmdNextId.Transaction = transaction;
                            int nextId = (int)cmdNextId.ExecuteScalar();
                            if (nextId <= 0)
                            {

                                throw new ArgumentNullException("ImportProduct",
                                                                "Unable to create new Product No");
                            }
                            #endregion ProductID

                            if (AutoCode == true)
                            {
                                Item.ProductCode = nextId.ToString();

                            }

                            Item.ItemNo = nextId.ToString();


                            sqlText = "";
                            sqlText += "insert into Products";
                            sqlText += "(";
                            sqlText += "ItemNo,";
                            sqlText += "ProductCode,";
                            sqlText += "ProductName,";
                            sqlText += "ProductDescription,";
                            sqlText += "CategoryID,";
                            sqlText += "UOM,";
                            sqlText += "CostPrice,";
                            sqlText += "SalesPrice,";
                            sqlText += "NBRPrice,";
                            sqlText += "ReceivePrice,";
                            sqlText += "IssuePrice,";
                            sqlText += "TenderPrice,";
                            sqlText += "ExportPrice,";
                            sqlText += "InternalIssuePrice,";
                            sqlText += "TollIssuePrice,";
                            sqlText += "TollCharge,";
                            sqlText += "OpeningBalance,";
                            sqlText += "SerialNo,";
                            sqlText += "HSCodeNo,";
                            sqlText += "VATRate,";
                            sqlText += "Comments,";
                            sqlText += "ActiveStatus,";
                            sqlText += "CreatedBy,";
                            sqlText += "CreatedOn,";
                            sqlText += "LastModifiedBy,";
                            sqlText += "LastModifiedOn,";
                            sqlText += "SD,";
                            sqlText += "PacketPrice,";
                            sqlText += "Trading,";
                            sqlText += "TradingMarkUp,";
                            sqlText += "NonStock,";
                            sqlText += "Quantityinhand,";
                            sqlText += "OpeningTotalCost,";
                            sqlText += "BranchId,";
                            sqlText += "IsArchive,";
                            sqlText += "GenericName,";
                            sqlText += "DARNo,";
                            sqlText += "OpeningDate,";
                            sqlText += "TradingSaleVATRate,";
                            sqlText += "TradingSaleSD,";
                            sqlText += "IsFixedVATRebate,";
                            sqlText += "ReportType";


                            sqlText += ")";
                            sqlText += " values(";
                            sqlText += "@nextId,";
                            sqlText += "@ItemProductCode,";
                            sqlText += "@ItemProductName,";
                            sqlText += "@ItemProductDescription,";
                            sqlText += "@CID,";
                            sqlText += "@ItemUOM,";
                            sqlText += "@ItemCostPrice,";//CostPrice
                            sqlText += "@ItemCostPrice,";//SalePrice
                            sqlText += "@ItemNBRPrice,";//ReceivePrice
                            sqlText += "@ItemCostPrice,";//NBRPrice

                            sqlText += "@ItemNBRPrice,";//IssuePrice
                            sqlText += "" + 0 + ",";//TenderPrice
                            sqlText += "" + 0 + ",";//ExportPrice
                            sqlText += "" + 0 + ",";//InternalIssuePrice
                            sqlText += "" + 0 + ",";//TollIssueprice
                            sqlText += "@ItemTollCharge,";//TollCharge
                            sqlText += "@ItemOpeningBalance,";//OpeningBalance
                            sqlText += "@ItemSerialNo,";
                            sqlText += "@ItemHSCodeNo,";
                            sqlText += "@ItemVATRate,";
                            sqlText += "@ItemComments,";
                            sqlText += "@ItemActiveStatus,";
                            sqlText += "@ItemCreatedBy,";
                            sqlText += "@ItemCreatedOn,";
                            sqlText += "@ItemCreatedBy,";
                            sqlText += "@ItemCreatedOn,";
                            sqlText += "@ItemSD,";
                            sqlText += "@ItemPacketprice,";
                            sqlText += "@ItemTrading,";
                            sqlText += "@ItemTradingMarkUp,";
                            sqlText += "@ItemNonStock,";
                            sqlText += " " + 0 + ",";//QuantityInHand
                            sqlText += "@ItemOpeningTotalCost,";
                            sqlText += "@BranchId,";
                            sqlText += "@IsArchive,";
                            sqlText += "@GenericName,";
                            sqlText += "@DARNo,";
                            sqlText += "@ItemOpeningDate,";//OpeningDate
                            sqlText += "@TradingSaleVATRate,";
                            sqlText += "@TradingSaleSD,";
                            sqlText += "@IsFixedVATRebate,";
                            sqlText += "@ReportType";
                            sqlText += ")";


                            SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                            cmdInsert.Transaction = transaction;

                            cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", Item.ItemNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductCode", string.IsNullOrWhiteSpace(Item.ProductCode) ? Item.ProductCode : Item.ProductCode.Trim());
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductName", string.IsNullOrWhiteSpace(Item.ProductName) ? Item.ProductName : Item.ProductName.Trim());
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductDescription", Item.ProductDescription);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@CID", CID);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemUOM", Item.UOM);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCostPrice", Item.CostPrice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemNBRPrice", Item.NBRPrice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTollCharge", Item.TollCharge);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningBalance", Item.OpeningBalance);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemSerialNo", Item.SerialNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemHSCodeNo", Item.HSCodeNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVATRate", Item.VATRate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemSD", Item.SD);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemPacketprice", Item.Packetprice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTrading", Item.Trading);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTradingMarkUp", Item.TradingMarkUp);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemNonStock", Item.NonStock);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningTotalCost", Item.OpeningTotalCost);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", Item.BranchId);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningDate", Item.OpeningDate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@GenericName", Item.GenericName);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@DARNo", Item.DARNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@TradingSaleVATRate", Item.TradingSaleVATRate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@TradingSaleSD", Item.TradingSaleSD);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@IsFixedVATRebate", Item.IsFixedVATRebate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ReportType", Item.ReportType);


                            transResult = (int)cmdInsert.ExecuteNonQuery();
                            if (transResult <= 0 || cmdInsert == null)
                            {
                                throw new ArgumentNullException("ImportProduct", "Unable to Insert Product('" + Item.ProductName + "')");
                            }


                            purchaseDal.UpdateProductAVGprice(Item.ItemNo, "", 0, 0, currConn, transaction);


                            #endregion Product Name and Category Id not exist,Insert new Product
                        }
                        else
                        {
                            #region Update product
                            sqlText = "";
                            sqlText = "update Products set";
                            sqlText += " ProductName        =@ItemProductName,";
                            sqlText += " ProductDescription =@ItemProductDescription,";
                            sqlText += " CategoryID         =@CID,";
                            sqlText += " UOM                =@ItemUOM,";
                            sqlText += " CostPrice          =@ItemCostPrice,";
                            sqlText += " OpeningBalance     =@ItemOpeningBalance,";
                            sqlText += " OpeningDate        =@ItemOpeningDate,";
                            sqlText += " SerialNo           =@ItemSerialNo,";
                            sqlText += " HSCodeNo           =@ItemHSCodeNo,";
                            sqlText += " VATRate            =@ItemVATRate,";
                            sqlText += " Comments           =@ItemComments,";
                            sqlText += " ActiveStatus       =@ItemActiveStatus,";
                            sqlText += " LastModifiedBy     =@ItemLastModifiedBy,";
                            sqlText += " LastModifiedOn     =@ItemLastModifiedOn,";
                            sqlText += " SD                 =@ItemSD,";
                            sqlText += " PacketPrice        =@ItemPacketprice,";
                            sqlText += " NBRPrice           =@ItemNBRPrice,";
                            sqlText += " receiveprice       =@ItemNBRPrice,";
                            sqlText += " Trading            =@ItemTrading,";
                            sqlText += " TradingMarkUp      =@ItemTradingMarkUp,";
                            sqlText += " NonStock           =@ItemNonStock,";
                            sqlText += " TollCharge         =@ItemTollCharge,";

                            sqlText += " GenericName         =@GenericName,";
                            sqlText += " DARNo               =@DARNo,";
                            sqlText += " TradingSaleVATRate  =@TradingSaleVATRate,";
                            sqlText += " TradingSaleSD       =@TradingSaleSD,";

                            sqlText += " OpeningTotalCost   =@ItemOpeningTotalCost,";
                            sqlText += " IsFixedVATRebate   =@IsFixedVATRebate,";
                            sqlText += " ReportType   =@ReportType";
                            sqlText += " where ProductCode  =@ItemProductCode";


                            SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                            cmdUpdate.Transaction = transaction;

                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductName", string.IsNullOrWhiteSpace(Item.ProductName) ? Item.ProductName : Item.ProductName.Trim());
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductDescription", Item.ProductDescription);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@CID", CID);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemUOM", Item.UOM);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemCostPrice", Item.CostPrice);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningBalance", Item.OpeningBalance);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningDate", Item.OpeningDate);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemSerialNo", Item.SerialNo);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemHSCodeNo", Item.HSCodeNo);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemVATRate", Item.VATRate);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedBy", Item.LastModifiedBy);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedOn", Item.LastModifiedOn);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemSD", Item.SD);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemPacketprice", Item.Packetprice);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNBRPrice", Item.NBRPrice);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTrading", Item.Trading);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTradingMarkUp", Item.TradingMarkUp);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNonStock", Item.NonStock);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTollCharge", Item.TollCharge);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningTotalCost", Item.OpeningTotalCost);

                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@GenericName", Item.GenericName);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@DARNo", Item.DARNo);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@TradingSaleVATRate", Item.TradingSaleVATRate);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@TradingSaleSD", Item.TradingSaleSD);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsFixedVATRebate", Item.IsFixedVATRebate);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ReportType", Item.ReportType);

                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductCode", string.IsNullOrWhiteSpace(Item.ProductCode) ? Item.ProductCode : Item.ProductCode.Trim());

                            transResult = (int)cmdUpdate.ExecuteNonQuery();
                            #endregion  Update product
                        }

                        #region Trackings
                        if (trackings != null)
                        {
                            if (trackings.Count > 0)
                            {
                                IEnumerable<TrackingVM> tracks = from x in trackings.ToList()
                                                                 where x.ProductName == Item.ProductName || x.ProductCode == Item.ProductCode
                                                                 select x;
                                if (tracks != null && tracks.Any())
                                {
                                    List<TrackingVM> trackinfos = tracks.ToList();
                                    foreach (TrackingVM trackItem in trackinfos)
                                    {
                                        trackItem.ItemNo = Item.ItemNo.ToString();
                                    }
                                    trackMsg = trackingDal.TrackingInsert(trackinfos, transaction, currConn);
                                    if (trackMsg == "Fail")
                                    {
                                        throw new ArgumentNullException("ImportProduct", "Tracking Information not added for Item (" + Item.ProductCode + " ) .");
                                    }
                                }

                            }
                        }

                        #endregion Trackings

                        if (transResult > 0)
                        {
                            InsertToProductDetails(Item, currConn, transaction);
                        }

                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                }
                #endregion Insert

                if (productDetails != null)
                {
                    foreach (ProductVM detail in productDetails)
                    {
                        InsertToProductDetails(detail, currConn, transaction);
                    }
                }


                //if (productStocks != null)
                //{
                //    ImportProductStock(productStocks, currConn, transaction);
                //}

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Products Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add Products";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add Products ";
                }

                #endregion Commit
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                transaction.Rollback();
                retResults[0] = "Fail";
                retResults[1] = ex.Message;

                FileLogger.Log("ImportDAL", "ImportProduct", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] InsertImportProductSync(List<ProductVM> products, List<TrackingVM> trackings, List<ProductVM> productDetails = null, DataTable productStocks = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string CompanyCode = "";

            TrackingDAL trackingDal = new TrackingDAL();
            string trackMsg = "";
            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction

                #region Settings

                bool AutoCode = false;

                AutoCode = Convert.ToBoolean(new CommonDAL().settings("AutoCode", "Item", currConn, transaction) == "Y");
                CompanyCode = new CommonDAL().settings("CompanyCode", "Code", currConn, transaction);

                List<ProductVM> varProductVMs = new List<ProductVM>();

                if (AutoCode == false)
                {
                    #region Empty Product Code Check


                    if (products != null && products.Count > 0)
                    {
                        varProductVMs = products.Where(c => string.IsNullOrWhiteSpace(c.ProductCode)).ToList();

                        if (varProductVMs != null && varProductVMs.Count > 0)
                        {
                            throw new ArgumentNullException("ImportProduct", "AutoCode not Allowed in Settings! So Code is a Mandatory Field! " + Environment.NewLine + varProductVMs.FirstOrDefault().ProductName);
                        }
                    }

                    #endregion
                }

                #endregion

                #region Checkpoint

                #region Empty Product CategoryName Check

                varProductVMs = new List<ProductVM>();
                if (products != null && products.Count > 0)
                {
                    varProductVMs = products.Where(c => string.IsNullOrWhiteSpace(c.CategoryName)).ToList();

                    if (varProductVMs != null && varProductVMs.Count > 0)
                    {
                        throw new ArgumentNullException("ImportProduct", "Product Category is a Mandatory Field! " + Environment.NewLine + varProductVMs.FirstOrDefault().ProductName);
                    }
                }

                #endregion

                #region Product Category Exist Check

                List<ProductCategoryVM> varProductCategoryVMs = new List<ProductCategoryVM>();
                varProductCategoryVMs = new ProductCategoryDAL().SelectAllList(0, null, null, currConn, transaction, null);

                List<string> varProductCategorys = varProductCategoryVMs.Select(c => c.CategoryName.ToLower()).Distinct().ToList();

                List<string> varExcelProductCategorys = products.Select(c => c.CategoryName.ToLower().Trim()).Distinct().ToList();

                foreach (string PC in varExcelProductCategorys)
                {
                    if (!varProductCategorys.Contains(PC))
                    {
                        throw new ArgumentNullException("ImportProduct", "Product Category not exist in System (" + PC + ").");

                    }
                }

                #endregion

                #endregion

                #region Insert / Update

                int i = 0;
                PurchaseDAL purchaseDal = new PurchaseDAL();

                foreach (ProductVM Item in products.ToList())
                {
                    i++;

                    try
                    {

                        #region Checkpoint

                        sqlText = "select distinct CategoryID from ProductCategories where  CategoryName=@ItemCategoryName";
                        SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
                        cmdCId.Transaction = transaction;

                        cmdCId.Parameters.AddWithValue("@ItemCategoryName", Item.CategoryName.Trim());

                        string CID = Convert.ToString(cmdCId.ExecuteScalar());

                        #endregion

                        #region VATRate Check
                        if (!OrdinaryVATDesktop.IsVATRateCheck(Item.VATRate))
                        {

                            Item.VATRate = 15;

                        }
                        #endregion

                        #region Product Code Exist or not

                        sqlText = "select count(ProductCode) from Products where  ProductCode=@ItemProductCode";
                        SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                        cmdCodeExist.Transaction = transaction;
                        cmdCodeExist.Parameters.AddWithValue("@ItemProductCode", Item.ProductCode);
                        countId = (int)cmdCodeExist.ExecuteScalar();

                        #endregion Product Code Exist

                        if (countId <= 0)
                        {
                            #region Insert
                            #region ProductID
                            sqlText = "select isnull(max(cast(ItemNo as int)),0)+1 FROM  Products WHERE SUBSTRING(ItemNo,1,3)<>'ovh'";
                            SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                            cmdNextId.Transaction = transaction;
                            int nextId = (int)cmdNextId.ExecuteScalar();
                            if (nextId <= 0)
                            {

                                throw new ArgumentNullException("ImportProduct",
                                                                "Unable to create new Product No");
                            }
                            #endregion ProductID

                            if (AutoCode == true)
                            {
                                Item.ProductCode = nextId.ToString();

                            }

                            Item.ItemNo = nextId.ToString();

                            sqlText = "";
                            sqlText += "insert into Products";
                            sqlText += "(";
                            sqlText += "ItemNo,";
                            sqlText += "ProductCode,";
                            sqlText += "ProductName,";
                            sqlText += "ShortName,";
                            sqlText += "ProductDescription,";
                            sqlText += "CategoryID,";
                            sqlText += "UOM,";
                            sqlText += "CostPrice,";
                            sqlText += "SalesPrice,";
                            sqlText += "NBRPrice,";
                            sqlText += "ReceivePrice,";
                            sqlText += "IssuePrice,";
                            sqlText += "TenderPrice,";
                            sqlText += "ExportPrice,";
                            sqlText += "InternalIssuePrice,";
                            sqlText += "TollIssuePrice,";
                            sqlText += "TollCharge,";
                            sqlText += "OpeningBalance,";
                            sqlText += "SerialNo,";
                            sqlText += "HSCodeNo,";
                            sqlText += "VATRate,";
                            sqlText += "TradingSaleVATRate,";
                            sqlText += "TradingSaleSD,";
                            sqlText += "Comments,";
                            sqlText += "ActiveStatus,";
                            sqlText += "CreatedBy,";
                            sqlText += "CreatedOn,";
                            sqlText += "LastModifiedBy,";
                            sqlText += "LastModifiedOn,";
                            sqlText += "SD,";
                            sqlText += "PacketPrice,";
                            sqlText += "Trading,";
                            sqlText += "TradingMarkUp,";
                            sqlText += "NonStock,";
                            sqlText += "Quantityinhand,";
                            sqlText += "OpeningTotalCost,";
                            sqlText += "BranchId,";
                            sqlText += "IsArchive,";
                            sqlText += "GenericName,";
                            sqlText += "DARNo,";
                            sqlText += "OpeningDate";

                            sqlText += ")";
                            sqlText += " values(";
                            sqlText += "@nextId,";
                            sqlText += "@ItemProductCode,";
                            sqlText += "@ItemProductName,";
                            sqlText += "@ShortName,";
                            sqlText += "@ItemProductDescription,";
                            sqlText += "@CID,";
                            sqlText += "@ItemUOM,";
                            sqlText += "@ItemCostPrice,";//CostPrice
                            sqlText += "@ItemCostPrice,";//SalePrice
                            sqlText += "@ItemNBRPrice,";//ReceivePrice
                            sqlText += "@ItemCostPrice,";//NBRPrice

                            sqlText += "@ItemNBRPrice,";//IssuePrice
                            sqlText += "" + 0 + ",";//TenderPrice
                            sqlText += "" + 0 + ",";//ExportPrice
                            sqlText += "" + 0 + ",";//InternalIssuePrice
                            sqlText += "" + 0 + ",";//TollIssueprice
                            sqlText += "@ItemTollCharge,";//TollCharge
                            sqlText += "@ItemOpeningBalance,";//OpeningBalance
                            sqlText += "@ItemSerialNo,";
                            sqlText += "@ItemHSCodeNo,";
                            sqlText += "@ItemVATRate,";
                            sqlText += "@ItemTradingSaleVATRate,";
                            sqlText += "@ItemTradingSaleSD,";
                            sqlText += "@ItemComments,";
                            sqlText += "@ItemActiveStatus,";
                            sqlText += "@ItemCreatedBy,";
                            sqlText += "@ItemCreatedOn,";
                            sqlText += "@ItemCreatedBy,";
                            sqlText += "@ItemCreatedOn,";
                            sqlText += "@ItemSD,";
                            sqlText += "@ItemPacketprice,";
                            sqlText += "@ItemTrading,";
                            sqlText += "@ItemTradingMarkUp,";
                            sqlText += "@ItemNonStock,";
                            sqlText += " " + 0 + ",";//QuantityInHand
                            sqlText += "@ItemOpeningTotalCost,";
                            sqlText += "@BranchId,";
                            sqlText += "@IsArchive,";
                            sqlText += "@GenericName,";
                            sqlText += "@DARNo,";
                            sqlText += "@ItemOpeningDate";//OpeningDate
                            sqlText += ")";


                            SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                            cmdInsert.Transaction = transaction;

                            cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", Item.ItemNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductCode", string.IsNullOrWhiteSpace(Item.ProductCode) ? Item.ProductCode : Item.ProductCode.Trim());
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductName", string.IsNullOrWhiteSpace(Item.ProductName) ? Item.ProductName : Item.ProductName.Trim());
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductDescription", Item.ProductDescription);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ShortName", Item.ShortName);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@CID", CID);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemUOM", Item.UOM);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCostPrice", Item.CostPrice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemNBRPrice", Item.NBRPrice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTollCharge", Item.TollCharge);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningBalance", Item.OpeningBalance);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemSerialNo", Item.SerialNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemHSCodeNo", Item.HSCodeNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVATRate", Item.VATRate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTradingSaleVATRate", Item.TradingSaleVATRate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTradingSaleSD", Item.TradingSaleSD);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemSD", Item.SD);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemPacketprice", Item.Packetprice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTrading", Item.Trading);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTradingMarkUp", Item.TradingMarkUp);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemNonStock", Item.NonStock);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningTotalCost", Item.OpeningTotalCost);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", Item.BranchId);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningDate", Item.OpeningDate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@GenericName", Item.GenericName);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@DARNo", Item.DARNo);

                            transResult = (int)cmdInsert.ExecuteNonQuery();
                            if (transResult <= 0 || cmdInsert == null)
                            {

                                throw new ArgumentNullException("ImportProduct", "Unable to Insert Product('" + Item.ProductName + "')");
                            }


                            purchaseDal.UpdateProductAVGprice(Item.ItemNo, "", 0, 0, currConn, transaction);


                            #endregion Product Name and Category Id not exist,Insert new Product
                        }
                        else
                        {
                            if (CompanyCode.ToLower() == "nestle" || OrdinaryVATDesktop.IsUnileverCompany(CompanyCode))
                            {
                                #region Update product
                                sqlText = "";
                                sqlText = "update Products set";
                                sqlText += " ProductName        =@ItemProductName,";
                                sqlText += " ShortName         =@ShortName,";
                                sqlText += " ProductDescription =@ItemProductDescription,";
                                sqlText += " CategoryID         =@CID,";
                                sqlText += " UOM                =@ItemUOM,";
                                sqlText += " CostPrice          =@ItemCostPrice,";
                                sqlText += " OpeningBalance     =@ItemOpeningBalance,";
                                sqlText += " OpeningDate        =@ItemOpeningDate,";
                                sqlText += " SerialNo           =@ItemSerialNo,";
                                sqlText += " HSCodeNo           =@ItemHSCodeNo,";
                                sqlText += " VATRate            =@ItemVATRate,";
                                sqlText += " Comments           =@ItemComments,";
                                sqlText += " ActiveStatus       =@ItemActiveStatus,";
                                sqlText += " LastModifiedBy     =@ItemLastModifiedBy,";
                                sqlText += " LastModifiedOn     =@ItemLastModifiedOn,";
                                sqlText += " SD                 =@ItemSD,";
                                sqlText += " PacketPrice        =@ItemPacketprice,";
                                sqlText += " NBRPrice           =@ItemNBRPrice,";
                                sqlText += " receiveprice       =@ItemNBRPrice,";
                                sqlText += " Trading            =@ItemTrading,";
                                sqlText += " TradingMarkUp      =@ItemTradingMarkUp,";
                                sqlText += " NonStock           =@ItemNonStock,";
                                sqlText += " TollCharge         =@ItemTollCharge,";

                                sqlText += " GenericName         =@GenericName,";
                                sqlText += " DARNo               =@DARNo,";

                                sqlText += " OpeningTotalCost   =@ItemOpeningTotalCost";
                                sqlText += " where ProductCode  =@ItemProductCode";

                                SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                                cmdUpdate.Transaction = transaction;

                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductName", string.IsNullOrWhiteSpace(Item.ProductName) ? Item.ProductName : Item.ProductName.Trim());
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductDescription", Item.ProductDescription);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@CID", CID);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemUOM", Item.UOM);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemCostPrice", Item.CostPrice);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningBalance", Item.OpeningBalance);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningDate", Item.OpeningDate);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemSerialNo", Item.SerialNo);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemHSCodeNo", Item.HSCodeNo);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemVATRate", Item.VATRate);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedBy", Item.LastModifiedBy);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedOn", Item.LastModifiedOn);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemSD", Item.SD);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemPacketprice", Item.Packetprice);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNBRPrice", Item.NBRPrice);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTrading", Item.Trading);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTradingMarkUp", Item.TradingMarkUp);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNonStock", Item.NonStock);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTollCharge", Item.TollCharge);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningTotalCost", Item.OpeningTotalCost);

                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@GenericName", Item.GenericName);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ShortName", Item.ShortName);
                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@DARNo", Item.DARNo);

                                cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductCode", string.IsNullOrWhiteSpace(Item.ProductCode) ? Item.ProductCode : Item.ProductCode.Trim());

                                transResult = (int)cmdUpdate.ExecuteNonQuery();
                                #endregion  Update product
                            }
                        }

                        #region Trackings
                        if (trackings.Count > 0)
                        {
                            IEnumerable<TrackingVM> tracks = from x in trackings.ToList()
                                                             where x.ProductName == Item.ProductName || x.ProductCode == Item.ProductCode
                                                             select x;
                            if (tracks != null && tracks.Any())
                            {
                                List<TrackingVM> trackinfos = tracks.ToList();
                                foreach (TrackingVM trackItem in trackinfos)
                                {
                                    trackItem.ItemNo = Item.ItemNo.ToString();
                                }
                                trackMsg = trackingDal.TrackingInsert(trackinfos, transaction, currConn);
                                if (trackMsg == "Fail")
                                {
                                    throw new ArgumentNullException("ImportProduct", "Tracking Information not added for Item (" + Item.ProductCode + " ) .");
                                }
                            }

                        }
                        #endregion Trackings


                        if (transResult > 0)
                        {
                            InsertToProductDetails(Item, currConn, transaction);
                        }

                    }
                    catch (Exception ex)
                    {

                        throw ex;
                    }

                }
                #endregion Insert

                if (productDetails != null)
                {
                    foreach (ProductVM detail in productDetails)
                    {
                        InsertToProductDetails(detail, currConn, transaction);
                    }
                }


                if (productStocks != null)
                {
                    ImportProductStock(productStocks, currConn, transaction);
                }

                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Products Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add Products";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add Products ";
                }

                #endregion Commit
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                transaction.Rollback();
                retResults[0] = "Fail";
                retResults[1] = ex.Message;

                FileLogger.Log("ImportDAL", "ImportProduct", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }


        public string[] ImportProductSync(List<ProductVM> products, List<TrackingVM> trackings, List<ProductVM> productDetails = null, DataTable productStocks = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            TrackingDAL trackingDal = new TrackingDAL();
            string trackMsg = "";
            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction

                #region Settings

                bool AutoCode = false;

                AutoCode = Convert.ToBoolean(new CommonDAL().settings("AutoCode", "Item", currConn, transaction) == "Y");

                List<ProductVM> varProductVMs = new List<ProductVM>();

                if (AutoCode == false)
                {
                    #region Empty Product Code Check


                    if (products != null && products.Count > 0)
                    {
                        varProductVMs = products.Where(c => string.IsNullOrWhiteSpace(c.ProductCode)).ToList();

                        if (varProductVMs != null && varProductVMs.Count > 0)
                        {
                            throw new ArgumentNullException("ImportProduct", "AutoCode not Allowed in Settings! So Code is a Mandatory Field! " + Environment.NewLine + varProductVMs.FirstOrDefault().ProductName);
                        }
                    }

                    #endregion
                }

                #endregion

                #region Checkpoint

                #region Empty Product CategoryName Check

                varProductVMs = new List<ProductVM>();
                if (products != null && products.Count > 0)
                {
                    varProductVMs = products.Where(c => string.IsNullOrWhiteSpace(c.CategoryName)).ToList();

                    if (varProductVMs != null && varProductVMs.Count > 0)
                    {
                        throw new ArgumentNullException("ImportProduct", "Product Category is a Mandatory Field! " + Environment.NewLine + varProductVMs.FirstOrDefault().ProductName);
                    }
                }

                #endregion

                #region Product Category Exist Check

                List<ProductCategoryVM> varProductCategoryVMs = new List<ProductCategoryVM>();
                varProductCategoryVMs = new ProductCategoryDAL().SelectAllList(0, null, null, currConn, transaction, null);

                List<string> varProductCategorys = varProductCategoryVMs.Select(c => c.CategoryName.ToLower()).Distinct().ToList();

                List<string> varExcelProductCategorys = products.Select(c => c.CategoryName.ToLower().Trim()).Distinct().ToList();

                foreach (string PC in varExcelProductCategorys)
                {
                    if (!varProductCategorys.Contains(PC))
                    {
                        throw new ArgumentNullException("ImportProduct", "Product Category not exist in System (" + PC + ").");

                    }
                }

                #endregion

                #endregion

                #region Insert / Update

                int i = 0;
                PurchaseDAL purchaseDal = new PurchaseDAL();

                foreach (ProductVM Item in products.ToList())
                {
                    i++;

                    try
                    {

                        #region Checkpoint

                        sqlText = "select distinct CategoryID from ProductCategories where  CategoryName=@ItemCategoryName";
                        SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
                        cmdCId.Transaction = transaction;

                        cmdCId.Parameters.AddWithValue("@ItemCategoryName", Item.CategoryName.Trim());

                        string CID = Convert.ToString(cmdCId.ExecuteScalar());

                        #endregion

                        #region VATRate Check
                        if (!OrdinaryVATDesktop.IsVATRateCheck(Item.VATRate))
                        {

                            Item.VATRate = 15;

                        }
                        #endregion

                        #region Product Code Exist or not

                        sqlText = "select count(ProductCode) from Products where  ProductCode=@ItemProductCode";
                        SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                        cmdCodeExist.Transaction = transaction;
                        cmdCodeExist.Parameters.AddWithValue("@ItemProductCode", Item.ProductCode);
                        countId = (int)cmdCodeExist.ExecuteScalar();

                        #endregion Product Code Exist

                        if (countId <= 0)
                        {
                            #region Insert
                            #region ProductID
                            sqlText = "select isnull(max(cast(ItemNo as int)),0)+1 FROM  Products WHERE SUBSTRING(ItemNo,1,3)<>'ovh'";
                            SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                            cmdNextId.Transaction = transaction;
                            int nextId = (int)cmdNextId.ExecuteScalar();
                            if (nextId <= 0)
                            {

                                throw new ArgumentNullException("ImportProduct",
                                                                "Unable to create new Product No");
                            }
                            #endregion ProductID

                            if (AutoCode == true)
                            {
                                Item.ProductCode = nextId.ToString();

                            }

                            Item.ItemNo = nextId.ToString();

                            sqlText = "";
                            sqlText += "insert into Products";
                            sqlText += "(";
                            sqlText += "ItemNo,";
                            sqlText += "ProductCode,";
                            sqlText += "ProductName,";
                            sqlText += "ShortName,";
                            sqlText += "ProductDescription,";
                            sqlText += "CategoryID,";
                            sqlText += "UOM,";
                            sqlText += "CostPrice,";
                            sqlText += "SalesPrice,";
                            sqlText += "NBRPrice,";
                            sqlText += "ReceivePrice,";
                            sqlText += "IssuePrice,";
                            sqlText += "TenderPrice,";
                            sqlText += "ExportPrice,";
                            sqlText += "InternalIssuePrice,";
                            sqlText += "TollIssuePrice,";
                            sqlText += "TollCharge,";
                            sqlText += "OpeningBalance,";
                            sqlText += "SerialNo,";
                            sqlText += "HSCodeNo,";
                            sqlText += "VATRate,";
                            sqlText += "TradingSaleVATRate,";
                            sqlText += "TradingSaleSD,";
                            sqlText += "Comments,";
                            sqlText += "ActiveStatus,";
                            sqlText += "CreatedBy,";
                            sqlText += "CreatedOn,";
                            sqlText += "LastModifiedBy,";
                            sqlText += "LastModifiedOn,";
                            sqlText += "SD,";
                            sqlText += "PacketPrice,";
                            sqlText += "Trading,";
                            sqlText += "TradingMarkUp,";
                            sqlText += "NonStock,";
                            sqlText += "Quantityinhand,";
                            sqlText += "OpeningTotalCost,";
                            sqlText += "BranchId,";
                            sqlText += "IsArchive,";
                            sqlText += "GenericName,";
                            sqlText += "DARNo,";
                            sqlText += "OpeningDate";

                            sqlText += ")";
                            sqlText += " values(";
                            sqlText += "@nextId,";
                            sqlText += "@ItemProductCode,";
                            sqlText += "@ItemProductName,";
                            sqlText += "@ShortName,";
                            sqlText += "@ItemProductDescription,";
                            sqlText += "@CID,";
                            sqlText += "@ItemUOM,";
                            sqlText += "@ItemCostPrice,";//CostPrice
                            sqlText += "@ItemCostPrice,";//SalePrice
                            sqlText += "@ItemNBRPrice,";//ReceivePrice
                            sqlText += "@ItemCostPrice,";//NBRPrice

                            sqlText += "@ItemNBRPrice,";//IssuePrice
                            sqlText += "" + 0 + ",";//TenderPrice
                            sqlText += "" + 0 + ",";//ExportPrice
                            sqlText += "" + 0 + ",";//InternalIssuePrice
                            sqlText += "" + 0 + ",";//TollIssueprice
                            sqlText += "@ItemTollCharge,";//TollCharge
                            sqlText += "@ItemOpeningBalance,";//OpeningBalance
                            sqlText += "@ItemSerialNo,";
                            sqlText += "@ItemHSCodeNo,";
                            sqlText += "@ItemVATRate,";
                            sqlText += "@ItemTradingSaleVATRate,";
                            sqlText += "@ItemTradingSaleSD,";
                            sqlText += "@ItemComments,";
                            sqlText += "@ItemActiveStatus,";
                            sqlText += "@ItemCreatedBy,";
                            sqlText += "@ItemCreatedOn,";
                            sqlText += "@ItemCreatedBy,";
                            sqlText += "@ItemCreatedOn,";
                            sqlText += "@ItemSD,";
                            sqlText += "@ItemPacketprice,";
                            sqlText += "@ItemTrading,";
                            sqlText += "@ItemTradingMarkUp,";
                            sqlText += "@ItemNonStock,";
                            sqlText += " " + 0 + ",";//QuantityInHand
                            sqlText += "@ItemOpeningTotalCost,";
                            sqlText += "@BranchId,";
                            sqlText += "@IsArchive,";
                            sqlText += "@GenericName,";
                            sqlText += "@DARNo,";
                            sqlText += "@ItemOpeningDate";//OpeningDate
                            sqlText += ")";


                            SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                            cmdInsert.Transaction = transaction;

                            cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", Item.ItemNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductCode", string.IsNullOrWhiteSpace(Item.ProductCode) ? Item.ProductCode : Item.ProductCode.Trim());
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductName", string.IsNullOrWhiteSpace(Item.ProductName) ? Item.ProductName : Item.ProductName.Trim());
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemProductDescription", Item.ProductDescription);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ShortName", Item.ShortName);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@CID", CID);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemUOM", Item.UOM);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCostPrice", Item.CostPrice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemNBRPrice", Item.NBRPrice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTollCharge", Item.TollCharge);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningBalance", Item.OpeningBalance);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemSerialNo", Item.SerialNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemHSCodeNo", Item.HSCodeNo);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVATRate", Item.VATRate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTradingSaleVATRate", Item.TradingSaleVATRate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTradingSaleSD", Item.TradingSaleSD);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemSD", Item.SD);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemPacketprice", Item.Packetprice);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTrading", Item.Trading);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTradingMarkUp", Item.TradingMarkUp);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemNonStock", Item.NonStock);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningTotalCost", Item.OpeningTotalCost);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", Item.BranchId);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOpeningDate", Item.OpeningDate);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@GenericName", Item.GenericName);
                            cmdInsert.Parameters.AddWithValueAndNullHandle("@DARNo", Item.DARNo);

                            transResult = (int)cmdInsert.ExecuteNonQuery();
                            if (transResult <= 0 || cmdInsert == null)
                            {

                                throw new ArgumentNullException("ImportProduct", "Unable to Insert Product('" + Item.ProductName + "')");
                            }


                            purchaseDal.UpdateProductAVGprice(Item.ItemNo, "", 0, 0, currConn, transaction);


                            #endregion Product Name and Category Id not exist,Insert new Product
                        }
                        else
                        {
                            #region Update product
                            sqlText = "";
                            sqlText = "update Products set";
                            sqlText += " ProductName        =@ItemProductName,";
                            sqlText += " ShortName         =@ShortName,";
                            sqlText += " ProductDescription =@ItemProductDescription,";
                            sqlText += " CategoryID         =@CID,";
                            //sqlText += " UOM                =@ItemUOM,";
                            sqlText += " CostPrice          =@ItemCostPrice,";
                            sqlText += " OpeningBalance     =@ItemOpeningBalance,";
                            sqlText += " OpeningDate        =@ItemOpeningDate,";
                            sqlText += " SerialNo           =@ItemSerialNo,";
                            sqlText += " HSCodeNo           =@ItemHSCodeNo,";
                            ////sqlText += " VATRate            =@ItemVATRate,";
                            sqlText += " Comments           =@ItemComments,";
                            sqlText += " ActiveStatus       =@ItemActiveStatus,";
                            sqlText += " LastModifiedBy     =@ItemLastModifiedBy,";
                            sqlText += " LastModifiedOn     =@ItemLastModifiedOn,";
                            sqlText += " SD                 =@ItemSD,";
                            sqlText += " PacketPrice        =@ItemPacketprice,";
                            //sqlText += " NBRPrice           =@ItemNBRPrice,";
                            sqlText += " receiveprice       =@ItemNBRPrice,";
                            sqlText += " Trading            =@ItemTrading,";
                            sqlText += " TradingMarkUp      =@ItemTradingMarkUp,";
                            sqlText += " NonStock           =@ItemNonStock,";
                            sqlText += " TollCharge         =@ItemTollCharge,";

                            sqlText += " GenericName         =@GenericName,";
                            sqlText += " DARNo               =@DARNo,";

                            sqlText += " OpeningTotalCost   =@ItemOpeningTotalCost";
                            sqlText += " where ProductCode  =@ItemProductCode";

                            SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                            cmdUpdate.Transaction = transaction;

                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductName", string.IsNullOrWhiteSpace(Item.ProductName) ? Item.ProductName : Item.ProductName.Trim());
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductDescription", Item.ProductDescription);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@CID", CID);
                            //cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemUOM", Item.UOM);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemCostPrice", Item.CostPrice);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningBalance", Item.OpeningBalance);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningDate", Item.OpeningDate);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemSerialNo", Item.SerialNo);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemHSCodeNo", Item.HSCodeNo);
                            //////cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemVATRate", Item.VATRate);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedBy", Item.LastModifiedBy);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedOn", Item.LastModifiedOn);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemSD", Item.SD);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemPacketprice", Item.Packetprice);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNBRPrice", Item.NBRPrice);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTrading", Item.Trading);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTradingMarkUp", Item.TradingMarkUp);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemNonStock", Item.NonStock);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemTollCharge", Item.TollCharge);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemOpeningTotalCost", Item.OpeningTotalCost);

                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@GenericName", Item.GenericName);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ShortName", Item.ShortName);
                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@DARNo", Item.DARNo);

                            cmdUpdate.Parameters.AddWithValueAndNullHandle("@ItemProductCode", string.IsNullOrWhiteSpace(Item.ProductCode) ? Item.ProductCode : Item.ProductCode.Trim());

                            transResult = (int)cmdUpdate.ExecuteNonQuery();
                            #endregion  Update product
                        }

                        #region Trackings
                        if (trackings.Count > 0)
                        {
                            IEnumerable<TrackingVM> tracks = from x in trackings.ToList()
                                                             where x.ProductName == Item.ProductName || x.ProductCode == Item.ProductCode
                                                             select x;
                            if (tracks != null && tracks.Any())
                            {
                                List<TrackingVM> trackinfos = tracks.ToList();
                                foreach (TrackingVM trackItem in trackinfos)
                                {
                                    trackItem.ItemNo = Item.ItemNo.ToString();
                                }
                                trackMsg = trackingDal.TrackingInsert(trackinfos, transaction, currConn);
                                if (trackMsg == "Fail")
                                {
                                    throw new ArgumentNullException("ImportProduct", "Tracking Information not added for Item (" + Item.ProductCode + " ) .");
                                }
                            }

                        }
                        #endregion Trackings


                        if (transResult > 0)
                        {
                            InsertToProductDetails(Item, currConn, transaction);
                        }

                    }
                    catch (Exception ex)
                    {

                        throw ex;
                    }

                }
                #endregion Insert

                if (productDetails != null)
                {
                    foreach (ProductVM detail in productDetails)
                    {
                        InsertToProductDetails(detail, currConn, transaction);
                    }
                }


                if (productStocks != null)
                {
                    ImportProductStock(productStocks, currConn, transaction);
                }

                #region Commit

                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Products Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add Products";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add Products ";
                }

                #endregion Commit
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                transaction.Rollback();
                retResults[0] = "Fail";
                retResults[1] = ex.Message;

                FileLogger.Log("ImportDAL", "ImportProduct", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        //currConn to VcurrConn 25-Aug-2020
        public string[] InsertToProductDetails(ProductVM vm, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            CustomerDAL customerDal = new CustomerDAL();
            string vendorCode;


            #endregion Initializ

            #region try

            try
            {
                #region Old connection

                #region open connection and transaction

                //currConn = VcurrConn;
                //transaction = Vtransaction;

                #endregion open connection and transaction

                #endregion Old connection

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }

                #endregion open connection and transaction


                sqlText = @"select count(Id) from ProductDetails where ItemNo = @cid and ProductName = @ca";

                string customerCode = @"select ItemNo from Products where ProductCode = @ProductCode;";
                string customerName = @"select ItemNo from Products where ProductName = @ProductName;";

                SqlCommand cmd = new SqlCommand(customerCode, currConn, transaction);
                cmd.Parameters.AddWithValue("@ProductCode", vm.ProductCode.Trim());


                object id = cmd.ExecuteScalar();

                if (id == null)
                {
                    cmd.CommandText = customerName;
                    cmd.Parameters.AddWithValue("@ProductName", vm.ProductName.Trim());

                    id = cmd.ExecuteScalar();

                    if (id == null)
                    {
                        throw new Exception("Product Not Found For Product Details! \nProduct: " + vm.ProductName);
                    }

                    vm.ItemNo = id.ToString();
                }
                else
                {
                    vm.ItemNo = id.ToString();
                }

                cmd.CommandText = sqlText;
                cmd.Parameters.AddWithValue("@cid", vm.ItemNo);
                cmd.Parameters.AddWithValue("@ca", vm.ProductName);

                int rows = (int)cmd.ExecuteScalar();

                if (rows == 0)
                {
                    // customerDal.InsertToCustomerAddress(new CustomerAddressVM() { CustomerID = vm.CustomerID, CustomerAddress = vm.Address1 });


                    sqlText = @"
INSERT INTO ProductDetails
(
[ItemNo]
,[ProductName]
)
                         VALUES
(
@ItemNo
,@ProductName
)";



                    cmd.CommandText = sqlText;

                    cmd.Parameters.AddWithValue("@ItemNo", vm.ItemNo);
                    cmd.Parameters.AddWithValueAndParamCheck("@ProductName", vm.ProductName);


                    cmd.ExecuteNonQuery();
                }


                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                retResults[0] = "Success";

                return retResults;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {

                //transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "InsertToProductDetails", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion Catch and Finally
        }

        public string[] ImportProductOld(List<ProductVM> products, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction
                #region Insert

                foreach (ProductVM Item in products.ToList())
                {

                    if (string.IsNullOrEmpty(Item.CategoryName))
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist");
                    }

                    sqlText = "select count(CategoryName) from ProductCategories where  CategoryName='" +
                              Item.CategoryName + "'";
                    SqlCommand cmdCatExist = new SqlCommand(sqlText, currConn);
                    cmdCatExist.Transaction = transaction;
                    countId = (int)cmdCatExist.ExecuteScalar();
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist in Database (" + Item.CategoryName + ").");
                    }

                    sqlText = "select distinct CategoryID from ProductCategories where  CategoryName='" +
                              Item.CategoryName + "'";
                    SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
                    cmdCId.Transaction = transaction;
                    string CID = (string)cmdCId.ExecuteScalar();
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist in Database (" + Item.CategoryName +
                                                        ").");
                    }

                    #region Product Exist or not
                    /*Checking existance of provided bank Id information*/
                    //if (!string.IsNullOrEmpty(Item.ProductName))
                    //{


                    //    sqlText = "select count(ItemNo) from Products where  ProductName='" + Item.ProductName +
                    //              "' and CategoryID='" + CID + "'";
                    //    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    //    cmdIdExist.Transaction = transaction;
                    //    countId = (int)cmdIdExist.ExecuteScalar();
                    //    if (countId > 0)
                    //    {
                    //        throw new ArgumentNullException("ImportProduct",
                    //                                        "Same product('" + Item.ProductName + "' ) under same category('"+Item.CategoryName +"') already exist");
                    //    }
                    //}
                    #endregion ProductExist
                    #region Product Code Exist or not
                    if (!string.IsNullOrEmpty(Item.ProductCode))
                    {


                        sqlText = "select count(ProductCode) from Products where  ProductCode='" + Item.ProductCode + "'";
                        SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                        cmdCodeExist.Transaction = transaction;
                        countId = (int)cmdCodeExist.ExecuteScalar();
                        if (countId > 0)
                        {
                            throw new ArgumentNullException("ImportProduct",
                                                            "Product Code('" + Item.ProductCode + "') already exist.");
                        }
                    }
                    #endregion Product Code Exist

                    #region Product Name and Category Id not exist,Insert new Product
                    #region ProductID
                    sqlText = "select isnull(max(cast(ItemNo as int)),0)+1 FROM  Products WHERE SUBSTRING(ItemNo,1,3)<>'ovh'";
                    SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                    cmdNextId.Transaction = transaction;
                    int nextId = (int)cmdNextId.ExecuteScalar();
                    if (nextId <= 0)
                    {

                        throw new ArgumentNullException("ImportProduct",
                                                        "Unable to create new Product No");
                    }
                    #endregion ProductID

                    sqlText = "";
                    sqlText += "insert into Products";
                    sqlText += "(";
                    sqlText += "ItemNo,";
                    sqlText += "ProductCode,";
                    sqlText += "ProductName,";
                    sqlText += "ProductDescription,";
                    sqlText += "CategoryID,";
                    sqlText += "UOM,";
                    sqlText += "CostPrice,";
                    sqlText += "SalesPrice,";
                    sqlText += "NBRPrice,";
                    sqlText += "ReceivePrice,";
                    sqlText += "IssuePrice,";
                    sqlText += "TenderPrice,";
                    sqlText += "ExportPrice,";
                    sqlText += "InternalIssuePrice,";
                    sqlText += "TollIssuePrice,";
                    sqlText += "TollCharge,";
                    sqlText += "OpeningBalance,";
                    sqlText += "SerialNo,";
                    sqlText += "HSCodeNo,";
                    sqlText += "VATRate,";
                    sqlText += "Comments,";
                    sqlText += "ActiveStatus,";
                    sqlText += "CreatedBy,";
                    sqlText += "CreatedOn,";
                    sqlText += "LastModifiedBy,";
                    sqlText += "LastModifiedOn,";
                    sqlText += "SD,";
                    sqlText += "PacketPrice,";
                    sqlText += "Trading,";
                    sqlText += "TradingMarkUp,";
                    sqlText += "NonStock,";
                    sqlText += "Quantityinhand,";
                    sqlText += "OpeningTotalCost,";
                    sqlText += "OpeningDate";

                    sqlText += ")";
                    sqlText += " values(";
                    sqlText += "'" + nextId + "',";
                    sqlText += "'" + Item.ProductCode + "',";
                    sqlText += "'" + Item.ProductName + "',";
                    sqlText += "'" + Item.ProductDescription + "',";
                    sqlText += "'" + CID + "',";
                    sqlText += "'" + Item.UOM + "',";
                    sqlText += "" + Item.CostPrice + ",";//CostPrice
                    sqlText += "" + Item.CostPrice + ",";//SalePrice
                    sqlText += "" + Item.CostPrice + ",";//NBRPrice
                    sqlText += "" + Item.NBRPrice + ",";//ReceivePrice
                    sqlText += "" + Item.NBRPrice + ",";//IssuePrice
                    sqlText += "" + 0 + ",";//TenderPrice
                    sqlText += "" + 0 + ",";//ExportPrice
                    sqlText += "" + 0 + ",";//InternalIssuePrice
                    sqlText += "" + 0 + ",";//TollIssueprice
                    sqlText += "" + Item.TollCharge + ",";//TollCharge
                    sqlText += "" + Item.OpeningBalance + ",";//OpeningBalance
                    sqlText += "'" + Item.SerialNo + "',";
                    sqlText += "'" + Item.HSCodeNo + "',";
                    sqlText += "" + Item.VATRate + ",";
                    sqlText += "'" + Item.Comments + "',";
                    sqlText += "'" + Item.ActiveStatus + "',";
                    sqlText += "'" + Item.CreatedBy + "',";
                    sqlText += "'" + Item.CreatedOn + "',";
                    sqlText += "'" + Item.CreatedBy + "',";
                    sqlText += "'" + Item.CreatedOn + "',";
                    sqlText += "" + Item.SD + ",";
                    sqlText += "" + Item.Packetprice + ",";
                    sqlText += "'" + Item.Trading + "',";
                    sqlText += "" + Item.TradingMarkUp + ",";
                    sqlText += "'" + Item.NonStock + "',";
                    sqlText += "" + 0 + ",";//QuantityInHand
                    sqlText += "" + Item.OpeningTotalCost + ",";

                    sqlText += "'" + Item.OpeningDate + "'";//OpeningDate
                    sqlText += ")";

                    SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                    cmdInsert.Transaction = transaction;
                    transResult = (int)cmdInsert.ExecuteNonQuery();
                    if (transResult <= 0 || cmdInsert == null)
                    {

                        throw new ArgumentNullException("ImportProduct",
                                                        "Unable to Insert Product('" + Item.ProductName + "')");
                    }
                    #endregion Product Name and Category Id not exist,Insert new Product
                }
                #endregion Insert

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Products Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add Products";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add Products ";
                }

                #endregion Commit
            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ImportDAL", "ImportProductOld", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {

                transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ImportDAL", "ImportProductOld", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall

            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ImportCustomer(List<CustomerVM> customers, List<CustomerVM> customeradd = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string customerCode;

            #endregion Initializ

            #region try

            try
            {
                #region settingsValue
                CommonDAL commonDal = new CommonDAL();
                bool Auto = Convert.ToBoolean(commonDal.settingValue("AutoCode", "Customer", connVM) == "Y" ? true : false);
                #endregion settingsValue

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction

                int counter = 0;
                foreach (CustomerVM Item in customers.ToList())
                {
                    customerCode = Item.CustomerCode;
                    if (string.IsNullOrEmpty(Item.CustomerGroup))
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist");
                    }

                    sqlText = "select count(CustomerGroupName) from CustomerGroups where  CustomerGroupName=@ItemCustomerGroup ";
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    cmdIdExist.Parameters.AddWithValue("@ItemCustomerGroup", Item.CustomerGroup);

                    countId = (int)cmdIdExist.ExecuteScalar();
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist in Database (" + Item.CustomerGroup + ").");
                    }

                    sqlText = "select distinct CustomerGroupID from CustomerGroups where  CustomerGroupName=@ItemCustomerGroup";
                    SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
                    cmdCId.Transaction = transaction;

                    cmdCId.Parameters.AddWithValue("@ItemCustomerGroup", Item.CustomerGroup);

                    string CID = Convert.ToString(cmdCId.ExecuteScalar());
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist in Database (" + Item.CustomerGroup + ").");
                    }
                    //#region Customer  name existence checking

                    ////select @Present = count(CustomerID) from Customers where CustomerID = @CustomerID;
                    //sqlText = "select count(CustomerID) from Customers where  CustomerName=@CustomerName and CustomerGroupID=@CustomerGroupID ";
                    //SqlCommand cmdNameExist = new SqlCommand(sqlText, currConn);
                    //cmdNameExist.Transaction = transaction;
                    //cmdNameExist.Parameters.AddWithValue("@CustomerName", Item.CustomerName);
                    //cmdNameExist.Parameters.AddWithValue("@CustomerGroupID", CID);
                    //countId = (int)cmdNameExist.ExecuteScalar();
                    //if (countId == 0)
                    //{
                    //    //goto UpdateCust;
                    //    //throw new ArgumentNullException("InsertToCustomer", "Same customer  name('" + Item.CustomerName + "') already exist under same Group('"+Item.CustomerGroup +"')");


                    //#endregion Customer Group name existence checking
                    #region Customer  Code existence checking

                    //select @Present = count(CustomerID) from Customers where CustomerID = @CustomerID;
                    sqlText = "select count(CustomerID) from Customers where  CustomerCode=@customerCode";
                    SqlCommand cmdcodeExist = new SqlCommand(sqlText, currConn);
                    cmdcodeExist.Transaction = transaction;
                    cmdcodeExist.Parameters.AddWithValue("@CustomerCode", Item.CustomerCode);
                    countId = (int)cmdcodeExist.ExecuteScalar();


                    string itemCustomerCode = string.IsNullOrWhiteSpace(Item.CustomerCode) ? Item.CustomerCode : Item.CustomerCode.Trim();
                    if (countId == 0)
                    {
                        ////goto UpdateCust;
                        //throw new ArgumentNullException("InsertToCustomer", "Same customer  Code('" + customerCode + "') already exist");


                    #endregion Customer Group name existence checking

                        #region Customer  new id generation
                        sqlText = "select isnull(max(cast(CustomerID as int)),0)+1 FROM  Customers";
                        SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                        cmdNextId.Transaction = transaction;
                        int nextId = (int)cmdNextId.ExecuteScalar();
                        if (nextId <= 0)
                        {
                            throw new ArgumentNullException("InsertToCustomer",
                                                            "Unable to create new Customer No");
                        }
                        #region Code
                        if (Auto == false)
                        {
                            if (string.IsNullOrEmpty(customerCode))
                            {
                                throw new ArgumentNullException("InsertToCustomer", "Code generation is Manual, but Code not Issued");
                            }
                            else
                            {
                                sqlText = "select count(CustomerID) from Customers where  CustomerCode=@customerCode";
                                SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                                cmdCodeExist.Transaction = transaction;

                                cmdCodeExist.Parameters.AddWithValue("@customerCode", customerCode);

                                countId = (int)cmdCodeExist.ExecuteScalar();
                                if (countId > 0)
                                {
                                    //goto UpdateCust;

                                    //throw new ArgumentNullException("InsertToCustomer", "Same customer  Code('" + customerCode + "') already exist");
                                }
                            }
                        }
                        else
                        {
                            customerCode = nextId.ToString();
                        }
                        #endregion Code

                        #endregion Customer  new id generation
                        #region Inser new customer
                        sqlText = "";
                        sqlText += "insert into Customers";
                        sqlText += "(";
                        sqlText += "CustomerID,";
                        sqlText += "CustomerName,";
                        sqlText += "CustomerBanglaName,";
                        sqlText += "CustomerGroupID,";
                        sqlText += "Address1,";
                        sqlText += "Address2,";
                        sqlText += "Address3,";
                        sqlText += "City,";
                        sqlText += "TelephoneNo,";
                        sqlText += "FaxNo,";
                        sqlText += "Email,";
                        sqlText += "StartDateTime,";
                        sqlText += "ContactPerson,";
                        sqlText += "ContactPersonDesignation,";
                        sqlText += "ContactPersonTelephone,";
                        sqlText += "ContactPersonEmail,";
                        sqlText += "TINNo,";
                        sqlText += "VATRegistrationNo,";
                        sqlText += "Comments,";
                        sqlText += "ActiveStatus,";
                        sqlText += "CreatedBy,";
                        sqlText += "CreatedOn,";
                        sqlText += "LastModifiedBy,";
                        sqlText += "LastModifiedOn,";
                        sqlText += "BranchId,";
                        sqlText += "IsArchive,";
                        sqlText += "IsInstitution,";
                        sqlText += "Country,CustomerCode";
                        sqlText += ",IsSpecialRate";
                        sqlText += ",IsTax";
                        sqlText += ")";
                        sqlText += " values(";
                        sqlText += "@nextId,";
                        sqlText += "@ItemCustomerName,";
                        sqlText += "@ItemCustomerBanglaName,";
                        sqlText += "@CID,";
                        sqlText += "@ItemAddress1,";
                        sqlText += "@ItemAddress2,";
                        sqlText += "@ItemAddress3,";
                        sqlText += "@ItemCity,";
                        sqlText += "@ItemTelephoneNo,";
                        sqlText += "@ItemFaxNo,";
                        sqlText += "@ItemEmail,";
                        sqlText += "@ItemStartDateTime,";
                        sqlText += "@ItemContactPerson,";
                        sqlText += "@ItemContactPersonDesignation,";
                        sqlText += "@ItemContactPersonTelephone,";
                        sqlText += "@ItemContactPersonEmail,";
                        sqlText += "@ItemTINNo,";
                        sqlText += "@ItemVATRegistrationNo,";
                        sqlText += "@ItemComments,";
                        sqlText += "@ItemActiveStatus,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@BranchId,";
                        sqlText += "@IsArchive,";
                        sqlText += "@IsInstitution,";
                        sqlText += "@ItemCountry,";
                        sqlText += "@customerCode,";
                        sqlText += "@IsSpecialRate,";
                        sqlText += "@IsTax";
                        sqlText += ")";


                        SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                        cmdInsert.Transaction = transaction;

                        cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", nextId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCustomerName", string.IsNullOrWhiteSpace(Item.CustomerName) ? Item.CustomerName : Item.CustomerName.Trim());
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCustomerBanglaName", Item.CustomerBanglaName ?? Convert.DBNull);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@CID", CID);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress1", Item.Address1);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress2", Item.Address2);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress3", Item.Address3);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCity", Item.City);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTelephoneNo", Item.TelephoneNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemFaxNo", Item.FaxNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemEmail", Item.Email);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemStartDateTime", Item.StartDateTime);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPerson", Item.ContactPerson);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonEmail", Item.ContactPersonEmail);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTINNo", Item.TINNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVATRegistrationNo", Item.VATRegistrationNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", Item.BranchId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsInstitution", Item.IsInstitution);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCountry", Item.Country);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@customerCode",
                            Auto ? customerCode : itemCustomerCode);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsSpecialRate", Item.IsSpecialRate);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsTax", Item.IsTax ?? Convert.DBNull);

                        transResult = (int)cmdInsert.ExecuteNonQuery();
                        if (transResult <= 0 || cmdInsert == null)
                        {

                            throw new ArgumentNullException("ImportCustomer",
                                                            "Unable to Insert Customer('" + Item.CustomerName + "')");
                        }

                        #endregion Inser new customer
                    }
                    else
                    {

                        #region Update Customer

                        sqlText = "";
                        sqlText += "update Customers set ";
                        sqlText += "  Address1                 =@Address1";
                        sqlText += " ,Address2                 =@Address2";
                        sqlText += " ,Address3                 =@Address3";
                        sqlText += " ,CustomerBanglaName       =@CustomerBanglaName";
                        sqlText += " ,City                     =@City";
                        sqlText += " ,TelephoneNo              =@TelephoneNo";
                        sqlText += " ,FaxNo                    =@FaxNo";
                        sqlText += " ,Email                    =@Email";
                        sqlText += " ,StartDateTime            =@StartDateTime";
                        sqlText += " ,ContactPerson            =@ContactPerson";
                        sqlText += " ,ContactPersonDesignation =@ContactPersonDesignation";
                        sqlText += " ,ContactPersonTelephone   =@ContactPersonTelephone";
                        sqlText += " ,ContactPersonEmail       =@ContactPersonEmail";
                        sqlText += " ,TINNo                    =@TINNo";
                        sqlText += " ,VATRegistrationNo        =@VATRegistrationNo";
                        sqlText += " ,Comments                 =@Comments";
                        sqlText += " ,ActiveStatus             =@ActiveStatus";
                        sqlText += " ,CreatedBy                =@CreatedBy";
                        sqlText += " ,CreatedOn                =@CreatedOn";
                        sqlText += " ,LastModifiedBy           =@LastModifiedBy";
                        sqlText += " ,LastModifiedOn           =@LastModifiedOn";
                        sqlText += " ,Country                  =@Country";
                        sqlText += " ,VDSPercent               =@VDSPercent";
                        sqlText += " ,BusinessType             =@BusinessType";
                        sqlText += " ,BusinessCode             =@BusinessCode";
                        sqlText += ",IsVDSWithHolder           =@IsVDSWithHolder";
                        sqlText += ",IsInstitution             =@IsInstitution";
                        sqlText += ",IsSpecialRate             =@IsSpecialRate";
                        sqlText += ",IsTax                     =@IsTax";
                        sqlText += " where CustomerCode      =@CustomerCode ";




                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;

                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerName", string.IsNullOrWhiteSpace(Item.CustomerName) ? Item.CustomerName : Item.CustomerName.Trim());
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerGroupID", CID);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address1", Item.Address1);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address2", Item.Address2);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address3", Item.Address3);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerBanglaName", Item.CustomerBanglaName);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@City", Item.City);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@TelephoneNo", Item.TelephoneNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@FaxNo", Item.FaxNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Email", Item.Email);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@StartDateTime", Item.StartDateTime);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPerson", Item.ContactPerson);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonEmail", Item.ContactPersonEmail);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@TINNo", Item.TINNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRegistrationNo", Item.VATRegistrationNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", Item.Comments);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ActiveStatus", Item.ActiveStatus);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", Item.CreatedBy);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", Item.CreatedOn);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Item.LastModifiedBy);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", Item.LastModifiedOn);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Country", Item.Country);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@VDSPercent", Item.VDSPercent);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@BusinessType", Item.BusinessType);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@BusinessCode", Item.BusinessCode);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsVDSWithHolder", Item.IsVDSWithHolder);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsInstitution", Item.IsInstitution);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsSpecialRate", Item.IsSpecialRate);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsTax", Item.IsTax);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerCode", itemCustomerCode);

                        transResult = (int)cmdUpdate.ExecuteNonQuery();
                        if (transResult <= 0 || cmdUpdate == null)
                        {

                            throw new ArgumentNullException("ImportCustomer",
                                "Unable to Update Customer('" + Item.CustomerName + "')");
                        }
                        #endregion
                    }


                    if (transResult > 0)
                    {
                        InsertToCustomerAddress(Item, currConn, transaction);
                    }

                    counter++;

                }

                if (customeradd != null)
                {
                    foreach (CustomerVM vm in customeradd)
                    {
                        InsertToCustomerAddress(vm, currConn, transaction);

                    }
                }

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested customers Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add customer";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add customer ";
                }

                #endregion Commit
            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ImportDAL", "ImportCustomer", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {

                transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ImportDAL", "ImportCustomer", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }

            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ImportCustomers(List<CustomerVM> customers, List<CustomerVM> customeradd = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string customerCode;

            #endregion Initializ

            #region try

            try
            {
                #region settingsValue
                CommonDAL commonDal = new CommonDAL();
                bool Auto = Convert.ToBoolean(commonDal.settingValue("AutoCode", "Customer", connVM) == "Y" ? true : false);
                #endregion settingsValue

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction

                int counter = 0;
                foreach (CustomerVM Item in customers.ToList())
                {
                    customerCode = Item.CustomerCode;
                    if (string.IsNullOrEmpty(Item.CustomerGroup))
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist");
                    }

                    sqlText = "select count(CustomerGroupName) from CustomerGroups where  CustomerGroupName=@ItemCustomerGroup ";
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    cmdIdExist.Parameters.AddWithValue("@ItemCustomerGroup", Item.CustomerGroup);

                    countId = (int)cmdIdExist.ExecuteScalar();
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist in Database (" + Item.CustomerGroup + ").");
                    }

                    sqlText = "select distinct CustomerGroupID from CustomerGroups where  CustomerGroupName=@ItemCustomerGroup";
                    SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
                    cmdCId.Transaction = transaction;

                    cmdCId.Parameters.AddWithValue("@ItemCustomerGroup", Item.CustomerGroup);

                    string CID = Convert.ToString(cmdCId.ExecuteScalar());
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportProduct",
                                                        "Group Name not exist in Database (" + Item.CustomerGroup + ").");
                    }

                    #region Customer  Code existence checking

                    sqlText = "select count(CustomerID) from Customers where  CustomerCode=@customerCode";
                    SqlCommand cmdcodeExist = new SqlCommand(sqlText, currConn);
                    cmdcodeExist.Transaction = transaction;
                    cmdcodeExist.Parameters.AddWithValue("@CustomerCode", Item.CustomerCode);
                    countId = (int)cmdcodeExist.ExecuteScalar();

                    string itemCustomerCode = string.IsNullOrWhiteSpace(Item.CustomerCode) ? Item.CustomerCode : Item.CustomerCode.Trim();

                    #endregion Customer Group name existence checking

                    if (countId == 0)
                    {

                        #region Customer  new id generation
                        sqlText = "select isnull(max(cast(CustomerID as int)),0)+1 FROM  Customers";
                        SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                        cmdNextId.Transaction = transaction;
                        int nextId = (int)cmdNextId.ExecuteScalar();
                        if (nextId <= 0)
                        {
                            throw new ArgumentNullException("InsertToCustomer",
                                                            "Unable to create new Customer No");
                        }
                        #region Code
                        if (Auto == false)
                        {
                            if (string.IsNullOrEmpty(customerCode))
                            {
                                throw new ArgumentNullException("InsertToCustomer", "Code generation is Manual, but Code not Issued");
                            }
                            else
                            {
                                sqlText = "select count(CustomerID) from Customers where  CustomerCode=@customerCode";
                                SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                                cmdCodeExist.Transaction = transaction;

                                cmdCodeExist.Parameters.AddWithValue("@customerCode", customerCode);

                                countId = (int)cmdCodeExist.ExecuteScalar();
                                if (countId > 0)
                                {
                                    //goto UpdateCust;

                                    //throw new ArgumentNullException("InsertToCustomer", "Same customer  Code('" + customerCode + "') already exist");
                                }
                            }
                        }
                        else
                        {
                            customerCode = nextId.ToString();
                        }
                        #endregion Code

                        #endregion Customer  new id generation

                        #region Inser new customer
                        sqlText = "";
                        sqlText += "insert into Customers";
                        sqlText += "(";
                        sqlText += "CustomerID,";
                        sqlText += "CustomerName,";
                        sqlText += "CustomerGroupID,";
                        sqlText += "Address1,";
                        sqlText += "Address2,";
                        sqlText += "Address3,";
                        sqlText += "City,";
                        sqlText += "TelephoneNo,";
                        sqlText += "FaxNo,";
                        sqlText += "Email,";
                        sqlText += "StartDateTime,";
                        sqlText += "ContactPerson,";
                        sqlText += "ContactPersonDesignation,";
                        sqlText += "ContactPersonTelephone,";
                        sqlText += "ContactPersonEmail,";
                        sqlText += "TINNo,";
                        sqlText += "VATRegistrationNo,";
                        sqlText += "Comments,";
                        sqlText += "ActiveStatus,";
                        sqlText += "CreatedBy,";
                        sqlText += "CreatedOn,";
                        sqlText += "LastModifiedBy,";
                        sqlText += "LastModifiedOn,";
                        sqlText += "BranchId,";
                        sqlText += "IsArchive,";
                        sqlText += "IsInstitution,";
                        sqlText += "Country,CustomerCode";
                        sqlText += ",IsSpecialRate";
                        sqlText += ")";
                        sqlText += " values(";
                        sqlText += "@nextId,";
                        sqlText += "@ItemCustomerName,";
                        sqlText += "@CID,";
                        sqlText += "@ItemAddress1,";
                        sqlText += "@ItemAddress2,";
                        sqlText += "@ItemAddress3,";
                        sqlText += "@ItemCity,";
                        sqlText += "@ItemTelephoneNo,";
                        sqlText += "@ItemFaxNo,";
                        sqlText += "@ItemEmail,";
                        sqlText += "@ItemStartDateTime,";
                        sqlText += "@ItemContactPerson,";
                        sqlText += "@ItemContactPersonDesignation,";
                        sqlText += "@ItemContactPersonTelephone,";
                        sqlText += "@ItemContactPersonEmail,";
                        sqlText += "@ItemTINNo,";
                        sqlText += "@ItemVATRegistrationNo,";
                        sqlText += "@ItemComments,";
                        sqlText += "@ItemActiveStatus,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@BranchId,";
                        sqlText += "@IsArchive,";
                        sqlText += "@IsInstitution,";
                        sqlText += "@ItemCountry,";
                        sqlText += "@customerCode,";
                        sqlText += "@IsSpecialRate";
                        sqlText += ")";


                        SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                        cmdInsert.Transaction = transaction;

                        cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", nextId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCustomerName", string.IsNullOrWhiteSpace(Item.CustomerName) ? Item.CustomerName : Item.CustomerName.Trim());
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@CID", CID);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress1", Item.Address1);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress2", Item.Address2);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress3", Item.Address3);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCity", Item.City);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTelephoneNo", Item.TelephoneNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemFaxNo", Item.FaxNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemEmail", Item.Email);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemStartDateTime", Item.StartDateTime);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPerson", Item.ContactPerson);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonEmail", Item.ContactPersonEmail);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTINNo", Item.TINNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVATRegistrationNo", Item.VATRegistrationNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", Item.BranchId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsInstitution", Item.IsInstitution);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCountry", Item.Country);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@customerCode",
                            Auto ? customerCode : itemCustomerCode);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsSpecialRate", Item.IsSpecialRate);

                        transResult = (int)cmdInsert.ExecuteNonQuery();
                        if (transResult <= 0 || cmdInsert == null)
                        {

                            throw new ArgumentNullException("ImportCustomer",
                                                            "Unable to Insert Customer('" + Item.CustomerName + "')");
                        }

                        #endregion Inser new customer

                    }
                    else
                    {

                        #region Update Customer

                        sqlText = "";
                        sqlText += "update Customers set ";
                        sqlText += "  Address1                 =@Address1";
                        sqlText += " ,Address2                 =@Address2";
                        sqlText += " ,Address3                 =@Address3";
                        sqlText += " ,City                     =@City";
                        sqlText += " ,TelephoneNo              =@TelephoneNo";
                        sqlText += " ,FaxNo                    =@FaxNo";
                        sqlText += " ,Email                    =@Email";
                        sqlText += " ,StartDateTime            =@StartDateTime";
                        sqlText += " ,ContactPerson            =@ContactPerson";
                        sqlText += " ,ContactPersonDesignation =@ContactPersonDesignation";
                        sqlText += " ,ContactPersonTelephone   =@ContactPersonTelephone";
                        sqlText += " ,ContactPersonEmail       =@ContactPersonEmail";
                        sqlText += " ,TINNo                    =@TINNo";
                        sqlText += " ,VATRegistrationNo        =@VATRegistrationNo";
                        sqlText += " ,Comments                 =@Comments";
                        sqlText += " ,ActiveStatus             =@ActiveStatus";
                        sqlText += " ,CreatedBy                =@CreatedBy";
                        sqlText += " ,CreatedOn                =@CreatedOn";
                        sqlText += " ,LastModifiedBy           =@LastModifiedBy";
                        sqlText += " ,LastModifiedOn           =@LastModifiedOn";
                        sqlText += " ,Country                  =@Country";
                        sqlText += " ,VDSPercent               =@VDSPercent";
                        sqlText += " ,BusinessType             =@BusinessType";
                        sqlText += " ,BusinessCode             =@BusinessCode";
                        sqlText += ",IsVDSWithHolder           =@IsVDSWithHolder";
                        sqlText += ",IsInstitution             =@IsInstitution";
                        sqlText += ",IsSpecialRate             =@IsSpecialRate";
                        sqlText += " where CustomerCode      =@CustomerCode ";




                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;

                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerName", string.IsNullOrWhiteSpace(Item.CustomerName) ? Item.CustomerName : Item.CustomerName.Trim());
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerGroupID", CID);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address1", Item.Address1);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address2", Item.Address2);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address3", Item.Address3);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@City", Item.City);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@TelephoneNo", Item.TelephoneNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@FaxNo", Item.FaxNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Email", Item.Email);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@StartDateTime", Item.StartDateTime);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPerson", Item.ContactPerson);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonEmail", Item.ContactPersonEmail);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@TINNo", Item.TINNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRegistrationNo", Item.VATRegistrationNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", Item.Comments);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ActiveStatus", Item.ActiveStatus);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", Item.CreatedBy);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", Item.CreatedOn);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Item.LastModifiedBy);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", Item.LastModifiedOn);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Country", Item.Country);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@VDSPercent", Item.VDSPercent);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@BusinessType", Item.BusinessType);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@BusinessCode", Item.BusinessCode);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsVDSWithHolder", Item.IsVDSWithHolder);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsInstitution", Item.IsInstitution);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsSpecialRate", Item.IsSpecialRate);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CustomerCode", itemCustomerCode);

                        transResult = (int)cmdUpdate.ExecuteNonQuery();
                        if (transResult <= 0 || cmdUpdate == null)
                        {

                            throw new ArgumentNullException("ImportCustomer",
                                "Unable to Update Customer('" + Item.CustomerName + "')");
                        }
                        #endregion
                    }


                    if (transResult > 0)
                    {
                        InsertToCustomerAddress(Item, currConn, transaction);
                    }

                    counter++;

                }

                if (customeradd != null)
                {
                    foreach (CustomerVM vm in customeradd)
                    {
                        InsertToCustomerAddress(vm, currConn, transaction);

                    }
                }

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested customers Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add customer";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add customer ";
                }

                #endregion Commit
            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportCustomers", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {

                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportCustomers", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }

            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }

            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }


        public string[] ImportProductStock(DataTable productStocks, SqlConnection vConnection = null, SqlTransaction vTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            DataTable table = new DataTable();
            string sqlText = "";

            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (vConnection != null)
                {
                    currConn = vConnection;
                }

                if (vTransaction != null)
                {
                    transaction = vTransaction;
                }

                if (vConnection == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();

                }

                if (vTransaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }
                #endregion

                sqlText = @"

update ProductStockTemp set 
ProductCode= Replace(RTRIM(ProductCode),char(160),'')
,ProductName= Replace(RTRIM(ProductName),char(160),'')

update ProductStockTemp set BranchId = BranchProfiles.BranchID
from BranchProfiles where ProductStockTemp.BranchCode = BranchProfiles.BranchCode


update ProductStockTemp set ItemNo = Products.ItemNo
from Products where ProductStockTemp.ProductCode = Products.ProductCode and ProductStockTemp.ItemNo is null


update ProductStockTemp set ItemNo = Products.ItemNo
from Products where ProductStockTemp.ProductName = Products.ProductName and ProductStockTemp.ItemNo is null";


                string UpdateCurrentStock = @"
update ProductStockTemp set CurrentStock = ProductStocks.CurrentStock
from ProductStocks where ProductStockTemp.ItemNo = ProductStocks.ItemNo
and ProductStockTemp.BranchId = ProductStocks.BranchId
";

                string getStocks = @"
select  SL, StockId Id, ItemNo, BranchId, StockQuantity,StockValue,Comments,ISNULL(CurrentStock,0)CurrentStock
from ProductStockTemp


";

                string getNullValues = @"
select ProductCode,BranchCode from ProductStockTemp where ProductCode is null or BranchCode is null";

                string getItemNullValues = @"
 Select 
       [BranchCode]
      ,[BranchName]
      ,[ProductCode]
      ,[ProductName]
      ,[StockQuantity]
      ,[StockValue]
      ,[ItemNo]
      ,[BranchId]
      ,[StockId]
      ,[CurrentStock]
      ,[SL]
  FROM [dbo].[ProductStockTemp]
  where ItemNo is null";


                string deleteTemp = @"
delete from ProductStockTemp " + " " + @" 
--DBCC CHECKIDENT ('ProductStockTemp', RESEED, 1) 

ALTER TABLE ProductStockTemp  DROP CONSTRAINT PK_ProductStockTemp;   
ALTER TABLE ProductStockTemp DROP COLUMN SL;
ALTER TABLE ProductStockTemp add   SL int CONSTRAINT PK_ProductStockTemp PRIMARY KEY (SL)  identity(1,1)

";
                string deleteCommon = @"
delete ProductStocks 
from  ProductStocks inner join ProductStockTemp 
on ProductStocks.ItemNo = ProductStockTemp.ItemNo
and ProductStocks.BranchId = ProductStockTemp.BranchId


declare @count int = 0
declare @lastId int = 0
declare @i int  = 1

select @count = (select count(SL) from ProductStockTemp )

select @lastId =  (select isnull(max(Id),0)+1 from ProductStocks )


while @i <= @count
begin 

	update ProductStockTemp set stockId = @lastId where SL = @i 

	set @lastId = @lastId +1
    set @i = @i +1
end

";
                string updateProducts = @"
update Products set OpeningBalance=ProductStocks.StockQuantity,OpeningTotalCost=ProductStocks.StockValue
from ProductStocks where Products.ItemNo=ProductStocks.ItemNo and Products.BranchId=ProductStocks.BranchId

";

                CommonDAL commondal = new CommonDAL();
                SqlCommand cmd = new SqlCommand(deleteTemp, currConn, transaction);
                SqlDataAdapter adapter = new SqlDataAdapter();
                cmd.ExecuteNonQuery();

                string[] tempRes = commondal.BulkInsert("ProductStockTemp", productStocks, currConn, transaction);
                if (tempRes[0].ToLower() == "success")
                {

                    cmd.CommandText = sqlText;
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = getNullValues;
                    adapter.SelectCommand = cmd;
                    adapter.Fill(table);

                    if (table.Rows.Count > 0)
                    {
                        throw new Exception("Product or Branch not found");
                    }
                    cmd.CommandText = getItemNullValues;
                    adapter.SelectCommand = cmd;
                    adapter.Fill(table);

                    if (table.Rows.Count > 0)
                    {
                        throw new Exception(table.Rows[0]["ProductName"] + "Product not found in Product table");
                    }
                    cmd.CommandText = UpdateCurrentStock;
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = deleteCommon;
                    int deleteCount = cmd.ExecuteNonQuery();


                    table = new DataTable();
                    cmd.CommandText = getStocks;
                    adapter.Fill(table);

                    table.Columns.Remove("SL");

                    retResults = commondal.BulkInsert("ProductStocks", table, currConn, transaction);

                    cmd.CommandText = updateProducts;

                    cmd.ExecuteNonQuery();


                    #region Update Stocks For Product AVG Price

                    UpdateStocksAVG(cmd);

                    #endregion

                }
                else
                {
                    throw new Exception("Stock Import Failed");
                }

                #region Commit


                if (retResults[0].ToLower() == "success" && vTransaction == null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return retResults;

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("ImportDAL", "ImportProductStock", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open && vConnection == null)
                {
                    currConn.Close();
                }
            }

            #endregion

        }

        public void UpdateStocksAVG(SqlCommand cmd, string itemNo = "", SysDBInfoVMTemp connVM = null)
        {
            string sqlText = "";

            #region try

            try
            {

                sqlText = @"
    declare @count int = (select count(BranchId) from BranchProfiles)

    IF @count = 2
    BEGIN
	    update ProductAvgPrice set RuntimeQty = p.OpeningBalance, 
	    RuntimeTotal=p.OpeningTotalCost
	    from Products p
	    where ProductAvgPrice.ItemNo = p.ItemNo and PurchaseQty = 0 and PurchaseValue = 0 @conditionText
    END

    ELSE

    BEGIN


	    create table #tempStocks(id int identity(1,1), ItemNo varchar(50), TotalQty decimal(25,9), TotalValue decimal(25,9))

	    insert into #tempStocks (ItemNo, TotalQty,TotalValue)
	    SELECT distinct ItemNo, isnull(sum(p.StockQuantity),0) Quantity, isnull(sum(p.StockValue),0) 
	    from ProductStocks p
		where 1=1 @conditionText
	    group by ItemNo

	    update ProductAvgPrice set RuntimeQty = #tempStocks.TotalQty, 
	    RuntimeTotal=#tempStocks.TotalValue
	    from #tempStocks 
	    where ProductAvgPrice.ItemNo = #tempStocks.ItemNo and PurchaseQty = 0 and PurchaseValue = 0

	    drop table #tempStocks

    END


    update ProductAvgPrice set AvgPrice = RuntimeTotal/RuntimeQty
    where PurchaseQty = 0 and PurchaseValue = 0
    and RuntimeQty >0";

                //string conditionText = "";

                if (string.IsNullOrEmpty(itemNo))
                {
                    sqlText = sqlText.Replace("@conditionText", "");
                }
                else
                {
                    sqlText = sqlText.Replace("@conditionText", " and p.ItemNo = '" + itemNo + "'");

                }

                cmd.CommandText = sqlText;
                cmd.ExecuteNonQuery();
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "UpdateStocksAVG", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            #endregion

        }

        public string[] InsertToCustomerAddress(CustomerVM vm, SqlConnection vConn, SqlTransaction vTransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            CustomerDAL customerDal = new CustomerDAL();
            string vendorCode;


            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = vConn;
                transaction = vTransaction;

                #endregion open connection and transaction


                sqlText = @"select count(Id) from CustomersAddress where CustomerID = @cid and CustomerAddress = @ca";

                string customerCode = @"select CustomerID from Customers where CustomerCode = @customerCode;";
                string customerName = @"select CustomerID from Customers where CustomerName = @CustomerName;";

                SqlCommand cmd = new SqlCommand(customerCode, currConn, transaction);
                cmd.Parameters.AddWithValue("@customerCode", string.IsNullOrWhiteSpace(vm.CustomerCode) ? vm.CustomerName : vm.CustomerCode.Trim());


                object id = cmd.ExecuteScalar();

                if (id == null)
                {
                    cmd.CommandText = customerName;
                    cmd.Parameters.AddWithValue("@CustomerName", string.IsNullOrWhiteSpace(vm.CustomerName) ? vm.CustomerName : vm.CustomerName.Trim());

                    id = cmd.ExecuteScalar();

                    if (id == null)
                    {
                        throw new Exception("Customer Id Not Found For Customer Address Insert");
                    }

                    vm.CustomerID = id.ToString();
                }
                else
                {
                    vm.CustomerID = id.ToString();
                }

                cmd.CommandText = sqlText;
                cmd.Parameters.AddWithValue("@cid", vm.CustomerID);
                cmd.Parameters.AddWithValue("@ca", vm.Address1);

                int rows = (int)cmd.ExecuteScalar();

                if (rows == 0 && !string.IsNullOrEmpty(vm.Address1))
                {
                    customerDal.InsertToCustomerAddress(new CustomerAddressVM() { CustomerID = vm.CustomerID, CustomerAddress = vm.Address1 });
                }

                //if (transaction != null)
                //{
                //    transaction.Commit();
                //}

                retResults[0] = "Success";

                return retResults;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {

                //transaction.Rollback();
                //throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "InsertToCustomerAddress", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {


            }
            #endregion Catch and Finally
        }

        public string[] ImportVendor(List<VendorVM> vendors, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string vendorCode;


            #endregion Initializ

            #region try

            try
            {
                #region settingsValue
                CommonDAL commonDal = new CommonDAL();
                bool Auto = Convert.ToBoolean(commonDal.settingValue("AutoCode", "Vendor", connVM) == "Y" ? true : false);
                #endregion settingsValue
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction

                foreach (VendorVM Item in vendors.ToList())
                {

                    vendorCode = Item.VendorCode;
                    sqlResults = new string[2];
                    if (string.IsNullOrEmpty(Item.VendorGroup))
                    {
                        throw new ArgumentNullException("ImportVendor",
                                                        "Group Name not exist");
                    }

                    sqlText = "select count(VendorGroupName) from VendorGroups where  VendorGroupName=@ItemVendorGroup";
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;

                    cmdIdExist.Parameters.AddWithValue("@ItemVendorGroup", Item.VendorGroup);

                    countId = (int)cmdIdExist.ExecuteScalar();
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportVendor",
                                                        "Group Name not exist in Database (" + Item.VendorGroup + ").");
                    }

                    sqlText = "select distinct VendorGroupID from VendorGroups where  VendorGroupName=@ItemVendorGroup";
                    SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
                    cmdCId.Transaction = transaction;
                    cmdCId.Parameters.AddWithValue("@ItemVendorGroup", Item.VendorGroup);

                    string CID = Convert.ToString(cmdCId.ExecuteScalar());
                    if (countId <= 0)
                    {
                        throw new ArgumentNullException("ImportVendor",
                                                        "Group Name not exist in Database (" + Item.VendorGroup +
                                                        ").");
                    }
                    sqlText = "select count(distinct VendorName) from Vendors where  VendorCode=@VendorCode --and VendorGroupID=@VendorGroupID";
                    SqlCommand cmdNameExist = new SqlCommand(sqlText, currConn);
                    cmdNameExist.Transaction = transaction;
                    cmdNameExist.Parameters.AddWithValue("@VendorCode", Item.VendorCode);
                    //cmdNameExist.Parameters.AddWithValue("@VendorGroupID", CID);
                    int countName = (int)cmdNameExist.ExecuteScalar();
                    if (countName == 0)
                    {

                        //throw new ArgumentNullException("InsertToVendorInformation",
                        //                                "Requested Vendor Name('" + Item.VendorName + "') is already exist under same Group('" + Item.VendorGroup + "')");
                        #region Insert Vendor Information
                        sqlText = "select isnull(max(cast(VendorID as int)),0)+1 FROM  Vendors";
                        SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                        cmdNextId.Transaction = transaction;
                        int nextId = (int)cmdNextId.ExecuteScalar();
                        if (nextId <= 0)
                        {
                            throw new ArgumentNullException("InsertToVendorInformation",
                                                            "Unable to create new Vendor information Id");
                        }
                        #region Code
                        if (Auto == false)
                        {
                            if (string.IsNullOrEmpty(vendorCode))
                            {
                                throw new ArgumentNullException("InsertToVendorInformation", "Code generation is Manual, but Code not Issued");
                            }
                            else
                            {
                                sqlText = "select count(VendorID) from Vendors where  VendorCode=@VendorCode";
                                SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                                cmdCodeExist.Transaction = transaction;
                                cmdCodeExist.Parameters.AddWithValue("@VendorCode", vendorCode);
                                countId = (int)cmdCodeExist.ExecuteScalar();
                                if (countId > 0)
                                {
                                    throw new ArgumentNullException("InsertToVendorInformation", "Same customer  Code('" + vendorCode + "') already exist");
                                }
                            }
                        }
                        else
                        {
                            vendorCode = nextId.ToString();

                        }
                        #endregion Code

                        sqlText = "";
                        sqlText += "insert into Vendors";
                        sqlText += "(";
                        sqlText += "VendorID,";
                        sqlText += "VendorName,";
                        sqlText += "VendorGroupID,";
                        sqlText += "Address1,";
                        sqlText += "Address2,";
                        sqlText += "Address3,";
                        sqlText += "City,";
                        sqlText += "TelephoneNo,";
                        sqlText += "FaxNo,";
                        sqlText += "Email,";
                        sqlText += "StartDateTime,";
                        sqlText += "ContactPerson,";
                        sqlText += "ContactPersonDesignation,";
                        sqlText += "ContactPersonTelephone,";
                        sqlText += "ContactPersonEmail,";
                        sqlText += "VATRegistrationNo,";
                        sqlText += "TINNo,";
                        sqlText += "Comments,";
                        sqlText += "ActiveStatus,";
                        sqlText += "CreatedBy,";
                        sqlText += "CreatedOn,";
                        sqlText += "LastModifiedBy,";
                        sqlText += "LastModifiedOn,";
                        sqlText += "Country,";
                        sqlText += "BranchId,";
                        sqlText += "IsArchive,";
                        sqlText += "VendorCode";
                        sqlText += ")";
                        sqlText += " values(";
                        sqlText += "@nextId,";
                        sqlText += "@ItemVendorName,";
                        sqlText += "@CID,";
                        sqlText += "@ItemAddress1,";
                        sqlText += "@ItemAddress2,";
                        sqlText += "@ItemAddress3,";
                        sqlText += "@ItemCity,";
                        sqlText += "@ItemTelephoneNo,";
                        sqlText += "@ItemFaxNo,";
                        sqlText += "@ItemEmail,";
                        sqlText += "@ItemStartDateTime,";
                        sqlText += "@ItemContactPerson,";
                        sqlText += "@ItemContactPersonDesignation,";
                        sqlText += "@ItemContactPersonTelephone,";
                        sqlText += "@ItemContactPersonEmail,";
                        sqlText += "@ItemVATRegistrationNo,";
                        sqlText += "@ItemTINNo,";
                        sqlText += "@ItemComments,";
                        sqlText += "@ItemActiveStatus,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@ItemCountry,";
                        sqlText += "@BranchId,";
                        sqlText += "@IsArchive,";
                        sqlText += "@vendorCode";

                        sqlText += ")";
                        SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                        cmdInsert.Transaction = transaction;

                        cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", nextId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVendorName", Item.VendorName.Trim());
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@CID", CID);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress1", Item.Address1);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress2", Item.Address2);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress3", Item.Address3);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCity", Item.City);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTelephoneNo", Item.TelephoneNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemFaxNo", Item.FaxNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemEmail", Item.Email);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemStartDateTime", Item.StartDateTime);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPerson", Item.ContactPerson);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonEmail", Item.ContactPersonEmail);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVATRegistrationNo", Item.VATRegistrationNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTINNo", Item.TINNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCountry", Item.Country);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", Item.BranchId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@vendorCode", vendorCode);

                        transResult = (int)cmdInsert.ExecuteNonQuery();
                        if (transResult <= 0 || cmdInsert == null)
                        {

                            throw new ArgumentNullException("ImportVendor",
                                                            "Unable to Insert Vendor('" + Item.VendorName + "')");
                        }

                        #endregion Insert
                    }
                    else
                    {
                        sqlText = "";
                        sqlText += "update Vendors set ";

                        sqlText += " Address1                =@Address1";
                        sqlText += ",Address2                =@Address2";
                        sqlText += ",Address3                =@Address3";
                        sqlText += ",City                    =@City";
                        sqlText += ",TelephoneNo             =@TelephoneNo";
                        sqlText += ",FaxNo                   =@FaxNo";
                        sqlText += ",Email                   =@Email";
                        sqlText += ",StartDateTime           =@StartDateTime";
                        sqlText += ",ContactPerson           =@ContactPerson";
                        sqlText += ",ContactPersonDesignation=@ContactPersonDesignation";
                        sqlText += ",ContactPersonTelephone  =@ContactPersonTelephone";
                        sqlText += ",ContactPersonEmail      =@ContactPersonEmail";
                        sqlText += ",VATRegistrationNo       =@VATRegistrationNo";
                        sqlText += ",TINNo                   =@TINNo";
                        sqlText += ",Comments                =@Comments";
                        sqlText += ",ActiveStatus            =@ActiveStatus";
                        sqlText += ",CreatedBy               =@CreatedBy";
                        sqlText += ",CreatedOn               =@CreatedOn";
                        sqlText += ",LastModifiedBy          =@LastModifiedBy";
                        sqlText += ",LastModifiedOn          =@LastModifiedOn";
                        sqlText += ",Country                 =@Country";
                        sqlText += ",VDSPercent              =@VDSPercent";
                        sqlText += ",BusinessType            =@BusinessType";
                        sqlText += ",BusinessCode            =@BusinessCode";
                        sqlText += ",IsRegister              =@IsRegister";
                        sqlText += ",IsTurnover              =@IsTurnover";
                        sqlText += ",IsVDSWithHolder         =@IsVDSWithHolder";
                        sqlText += " where VendorCode        =@VendorCode";
                        //sqlText += " and VendorGroupID       =@VendorGroupID";

                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@VendorCode", Item.VendorCode.Trim());
                        //cmdUpdate.Parameters.AddWithValueAndNullHandle("@VendorGroupID", CID);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address1", Item.Address1);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address2", Item.Address2);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Address3", Item.Address3);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@City", Item.City);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@TelephoneNo", Item.TelephoneNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@FaxNo", Item.FaxNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Email", Item.Email);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@StartDateTime", Item.StartDateTime);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPerson", Item.ContactPerson);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ContactPersonEmail", Item.ContactPersonEmail);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@VATRegistrationNo", Item.VATRegistrationNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@TINNo", Item.TINNo);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Comments", Item.Comments);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@ActiveStatus", Item.ActiveStatus);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedBy", Item.CreatedBy);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@CreatedOn", Item.CreatedOn);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Item.LastModifiedBy);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", Item.LastModifiedOn);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@Country", Item.Country);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@VDSPercent", Item.VDSPercent);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@BusinessType", Item.BusinessType);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@BusinessCode", Item.BusinessCode);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsRegister", Item.IsRegister);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsTurnover", Item.IsTurnover);
                        cmdUpdate.Parameters.AddWithValueAndNullHandle("@IsVDSWithHolder", Item.IsVDSWithHolder);
                        //cmdUpdate.Parameters.AddWithValueAndNullHandle("@VendorCode", Item.VendorCode);

                        transResult = (int)cmdUpdate.ExecuteNonQuery();
                        if (transResult <= 0 || cmdUpdate == null)
                        {

                            throw new ArgumentNullException("ImportVendor",
                                                            "Unable to update Vendor('" + Item.VendorName + "')");
                        }

                    }

                }
                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested customer Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add customer";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add customer ";
                }

                #endregion COMMIT

            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                //////throw sqlex;

                FileLogger.Log("ImportDAL", "ImportVendor", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());

            }
            catch (Exception ex)
            {
                transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                //////throw ex;

                FileLogger.Log("ImportDAL", "ImportVendor", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ImportVehicle(List<VehicleVM> vehicles, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string vehicleCode;


            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportVehicle");

                #endregion open connection and transaction

                foreach (VehicleVM Item in vehicles.ToList())
                {
                    sqlResults = new string[2];
                    if (string.IsNullOrEmpty(Item.VehicleNo))
                    {
                        throw new ArgumentNullException("ImportVehicle",
                                                        "Vehicle Name not exist");
                    }
                    sqlText = "select count(VehicleNo) from Vehicles where  VehicleNo=@ItemVehicleNo";
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;

                    cmdIdExist.Parameters.AddWithValue("@ItemVehicleNo", Item.VehicleNo.Trim());

                    countId = (int)cmdIdExist.ExecuteScalar();
                    if (countId > 0)
                    {
                        sqlText = "";
                        sqlText += "update Vehicles set ";

                        sqlText += " VehicleType                =@VehicleType";
                        sqlText += ",Description                =@Description";
                        sqlText += ",Comments                    =@Comments";
                        sqlText += ",ActiveStatus             =@ActiveStatus";

                        sqlText += " where VehicleNo        =@VehicleNo";

                        cmdIdExist.CommandText = sqlText;
                        cmdIdExist.Parameters.AddWithValue("@VehicleType", Item.VehicleType);
                        cmdIdExist.Parameters.AddWithValue("@Description", Item.Description);
                        cmdIdExist.Parameters.AddWithValue("@Comments", Item.Comments);
                        cmdIdExist.Parameters.AddWithValue("@VehicleNo", Item.VehicleNo.Trim());
                        cmdIdExist.Parameters.AddWithValue("@ActiveStatus", Item.ActiveStatus);


                        transResult = cmdIdExist.ExecuteNonQuery();

                    }
                    else
                    {

                        #region Vehicle new id generation

                        //select @VehicleID= isnull(max(cast(VehicleID as int)),0)+1 FROM  Vehicles;
                        sqlText = "select isnull(max(cast(VehicleID as int)),0)+1 FROM  Vehicles";
                        SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                        cmdNextId.Transaction = transaction;
                        int nextId = (int)cmdNextId.ExecuteScalar();
                        if (nextId <= 0)
                        {

                            throw new ArgumentNullException("InsertToVehicle", "Unable to create new vehicle");
                        }

                        #endregion Vehicle new id generation

                        vehicleCode = nextId.ToString();

                        #region Insert new vehicle

                        sqlText = "";
                        sqlText += "insert into Vehicles";
                        sqlText += "(";
                        sqlText += "VehicleID,";
                        sqlText += "VehicleType,";
                        sqlText += "VehicleNo,";
                        sqlText += "Description,";
                        sqlText += "Comments,";
                        sqlText += "ActiveStatus,";
                        sqlText += "CreatedBy,";
                        sqlText += "CreatedOn,";
                        sqlText += "LastModifiedBy,";
                        sqlText += "LastModifiedOn,";
                        sqlText += "VehicleCode,";
                        sqlText += "IsArchive";
                        sqlText += ")";
                        sqlText += " values(";
                        sqlText += "@nextId,";
                        sqlText += "@ItemVehicleType,";
                        sqlText += "@ItemVehicleNo,";
                        sqlText += "@ItemDescription,";
                        sqlText += "@ItemComments,";
                        sqlText += "@ItemActiveStatus,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@vehicleCode,";
                        sqlText += "@IsArchive";
                        sqlText += ")";

                        SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                        cmdInsert.Transaction = transaction;

                        cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", nextId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVehicleType", Item.VehicleType);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVehicleNo", Item.VehicleNo.Trim());
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemDescription", Item.Description);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@vehicleCode", vehicleCode.Trim());
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);

                        transResult = (int)cmdInsert.ExecuteNonQuery();
                        if (transResult <= 0 || cmdInsert == null)
                        {

                            throw new ArgumentNullException("ImportVehicle",
                                "Unable to Insert Vehicle('" + Item.VehicleNo + "')");
                        }

                        #endregion
                    }
                }

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Vehicle Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add Vehicle";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add Vehicle ";
                }

                #endregion COMMIT

            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportVehicle", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportVehicle", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ImportBranchProfile(List<BranchProfileVM> branchProfils, List<BranchProfileVM> branchProfilsDetails = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string vehicleCode;

            BranchProfileDAL _BranchprofiledDAL = new BranchProfileDAL();
            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportBranchProfile");

                #endregion open connection and transaction

                foreach (BranchProfileVM Item in branchProfils.ToList())
                {
                    sqlResults = new string[2];
                    if (string.IsNullOrEmpty(Item.BranchCode))
                    {
                        throw new ArgumentNullException("ImportBranchProfile",
                                                        "Branch Code  not exist");
                    }
                    sqlText = "select count(BranchCode) from BranchProfiles where  BranchCode=@ItemBranchCode";
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;

                    cmdIdExist.Parameters.AddWithValue("@ItemBranchCode", Item.BranchCode.Trim());

                    countId = (int)cmdIdExist.ExecuteScalar();
                    if (countId > 0)
                    {
                        sqlText = "";
                        sqlText += "update BranchProfiles set ";

                        sqlText += " BranchCode                               =@BranchCode";
                        sqlText += ",BranchName                               =@BranchName";
                        sqlText += ",BranchLegalName                          =@BranchLegalName";
                        sqlText += ",Address                                  =@Address";
                        sqlText += ",City                                     =@City";
                        sqlText += ",ZipCode                                  =@ZipCode";
                        sqlText += ",TelephoneNo                              =@TelephoneNo";
                        sqlText += ",FaxNo                                    =@FaxNo";
                        sqlText += ",Email                                    =@Email";
                        sqlText += ",ContactPerson                            =@ContactPerson";
                        sqlText += ",ContactPersonDesignation                 =@ContactPersonDesignation";
                        sqlText += ",ContactPersonTelephone                   =@ContactPersonTelephone";
                        sqlText += ",ContactPersonEmail                       =@ContactPersonEmail";
                        sqlText += ",VatRegistrationNo                        =@VatRegistrationNo";
                        sqlText += ",BIN                                      =@BIN";
                        sqlText += ",TINNo                                    =@TINNo";
                        sqlText += ",Comments                                 =@Comments";
                        sqlText += ",ActiveStatus                             =@ActiveStatus";
                        sqlText += ",IsCentral                                =@IsCentral";
                        sqlText += ",LastModifiedBy                           =@LastModifiedBy";
                        sqlText += ",LastModifiedOn                           =@LastModifiedOn";

                        sqlText += " where BranchCode                         =@BranchCode";

                        cmdIdExist.CommandText = sqlText;
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@BranchCode", Item.BranchCode);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@BranchName", Item.BranchName);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@BranchLegalName", Item.BranchLegalName);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@Address", Item.Address);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@City", Item.City);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@ZipCode", Item.ZipCode);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@FaxNo", Item.FaxNo);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@TelephoneNo", Item.TelephoneNo);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@Email", Item.Email);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@ContactPerson", Item.ContactPerson);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@ContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@ContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@ContactPersonEmail", Item.ContactPersonEmail);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@VatRegistrationNo", Item.VatRegistrationNo);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@BIN", Item.BIN);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@TINNo", Item.TINNo);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@Comments", Item.Comments);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@ActiveStatus", Item.ActiveStatus);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@IsCentral", Item.IsCentral == true ? "Y" : "N");
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@LastModifiedBy", Item.LastModifiedBy);
                        cmdIdExist.Parameters.AddWithValueAndNullHandle("@LastModifiedOn", Item.LastModifiedOn);

                        transResult = cmdIdExist.ExecuteNonQuery();

                    }
                    else
                    {

                        #region BranchProfile new id generation

                        sqlText = "select isnull(max(cast(BranchID as int)),0)+1 FROM  BranchProfiles";
                        SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                        cmdNextId.Transaction = transaction;
                        int nextId = (int)cmdNextId.ExecuteScalar();

                        if (nextId <= 0)
                        {

                            throw new ArgumentNullException("InsertToBranchProfiles", "Unable to create new BranchProfiles");
                        }

                        Item.BranchID = nextId;

                        #endregion BranchProfile new id generation


                        #region Insert new BranchProfile

                        sqlText = "";
                        sqlText += "insert into BranchProfiles";
                        sqlText += "(";
                        sqlText += "BranchID,";
                        sqlText += "BranchCode,";
                        sqlText += "BranchName,";
                        sqlText += "BranchLegalName,";
                        sqlText += "Address,";
                        sqlText += "City,";
                        sqlText += "ZipCode,";
                        sqlText += "TelephoneNo,";
                        sqlText += "FaxNo,";
                        sqlText += "Email,";
                        sqlText += "ContactPerson,";
                        sqlText += "ContactPersonDesignation,";
                        sqlText += "ContactPersonTelephone,";
                        sqlText += "ContactPersonEmail,";
                        sqlText += "VatRegistrationNo,";
                        sqlText += "BIN,";
                        sqlText += "TINNo,";
                        sqlText += "Comments,";
                        sqlText += "ActiveStatus,";
                        sqlText += "IsCentral,";
                        sqlText += "CreatedBy,";
                        sqlText += "CreatedOn,";
                        sqlText += "IsArchive";
                        sqlText += ")";
                        sqlText += " values(";
                        sqlText += "@nextId,";
                        sqlText += "@BranchCode,";
                        sqlText += "@BranchName,";
                        sqlText += "@BranchLegalName,";
                        sqlText += "@Address,";
                        sqlText += "@City,";
                        sqlText += "@ZipCode,";
                        sqlText += "@TelephoneNo,";
                        sqlText += "@FaxNo,";
                        sqlText += "@Email,";
                        sqlText += "@ContactPerson,";
                        sqlText += "@ContactPersonDesignation,";
                        sqlText += "@ContactPersonTelephone,";
                        sqlText += "@ContactPersonEmail,";
                        sqlText += "@VatRegistrationNo,";
                        sqlText += "@BIN,";
                        sqlText += "@TINNo,";
                        sqlText += "@Comments,";
                        sqlText += "@ActiveStatus,";
                        sqlText += "@IsCentral,";
                        sqlText += "@CreatedBy,";
                        sqlText += "@CreatedOn,";
                        sqlText += "@IsArchive";
                        sqlText += ")";

                        SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                        cmdInsert.Transaction = transaction;

                        cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", nextId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchCode", Item.BranchCode);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchName", Item.BranchName);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchLegalName", Item.BranchLegalName);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@Address", Item.Address);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@City", Item.City);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ZipCode", Item.ZipCode);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@TelephoneNo", Item.TelephoneNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@FaxNo", Item.FaxNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@Email", Item.Email);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ContactPerson", Item.ContactPerson);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ContactPersonEmail", Item.ContactPersonEmail);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@VatRegistrationNo", Item.VatRegistrationNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BIN", Item.BIN);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@TINNo", Item.TINNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@Comments", Item.Comments);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ActiveStatus", Item.ActiveStatus);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsCentral", Item.IsCentral == true ? "Y" : "N");
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@CreatedBy", Item.CreatedBy);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@CreatedOn", Item.CreatedOn);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);


                        transResult = (int)cmdInsert.ExecuteNonQuery();
                        if (transResult <= 0 || cmdInsert == null)
                        {

                            throw new ArgumentNullException("ImportBranchProfiles",
                                "Unable to Insert BranchProfiles('" + Item.BranchCode + "')");
                        }

                        #endregion
                    }
                    if (transResult > 0)
                    {
                        Item.IntegrationCode = Item.BranchCode;
                        Item.DetailsAddress = Item.Address;
                        InsertToBranchDetails(Item, currConn, transaction);

                    }

                }
                if (branchProfilsDetails != null)
                {
                    foreach (BranchProfileVM detail in branchProfilsDetails)
                    {

                        InsertToBranchDetails(detail, currConn, transaction);
                    }
                }
                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested BranchProfiles Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add BranchProfiles";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add BranchProfiles ";
                }

                #endregion COMMIT

            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportBranchProfiles", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportBranchProfiles", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        public string[] InsertToBranchDetails(BranchProfileVM vm, SqlConnection VcurrConn, SqlTransaction Vtransaction, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            CustomerDAL customerDal = new CustomerDAL();
            string vendorCode;


            #endregion Initializ

            #region try

            try
            {
                #region Old connection

                #region open connection and transaction

                //currConn = VcurrConn;
                //transaction = Vtransaction;

                #endregion open connection and transaction

                #endregion Old connection

                #region open connection and transaction

                #region New open connection and transaction

                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                #endregion New open connection and transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }

                #endregion open connection and transaction


                sqlText = @"select count(SL) from BranchMapDetails where BranchCode = @cid and IntegrationCode = @vIntegrationCode";

                ////var IntegrationCode = @"select BranchId from BranchProfiles where IntegrationCode = @IntegrationCode;";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@cid", vm.BranchCode);
                cmd.Parameters.AddWithValue("@vIntegrationCode", vm.IntegrationCode);

                int id = (int)cmd.ExecuteScalar();

                string BranchCode = @"select BranchId from BranchProfiles where BranchCode = @vBranchCode;";

                cmd = new SqlCommand(BranchCode, currConn, transaction);
                cmd.Parameters.AddWithValue("@vBranchCode", vm.BranchCode);

                int BranchId = (int)cmd.ExecuteScalar();

                vm.BranchID = BranchId;

                //////if (id == null)
                //////{
                //////    cmd.CommandText = IntegrationCode;
                //////    cmd.Parameters.AddWithValue("@IntegrationCode", vm.IntegrationCode);

                //////    id = cmd.ExecuteScalar();



                //////    vm.BranchID = Convert.ToInt32(id);
                //////}
                //////else
                //////{
                //////    vm.BranchID = Convert.ToInt32(id);

                //////}

                //////cmd.CommandText = sqlText;
                //////cmd.Parameters.AddWithValue("@cid", vm.BranchCode);
                //////////////cmd.Parameters.AddWithValue("@ca", vm.IntegrationCode);

                //////var rows = (int)cmd.ExecuteScalar();

                if (id == 0)
                {
                    //////// customerDal.InsertToCustomerAddress(new CustomerAddressVM() { CustomerID = vm.CustomerID, CustomerAddress = vm.Address1 });


                    sqlText = @"
INSERT INTO BranchMapDetails
(
[BranchCode]
,[IntegrationCode]
,[BranchId]
,[Address]
,[BranchName]
)
                         VALUES
(
@BranchCode
,@IntegrationCode
,@BranchId
,@Address
,@BranchName

)";

                    cmd.CommandText = sqlText;

                    cmd.Parameters.AddWithValueAndNullHandle("@BranchCode", vm.BranchCode);
                    cmd.Parameters.AddWithValueAndNullHandle("@IntegrationCode", vm.IntegrationCode);
                    cmd.Parameters.AddWithValueAndNullHandle("@BranchId", vm.BranchID);
                    cmd.Parameters.AddWithValueAndNullHandle("@Address", vm.DetailsAddress);
                    cmd.Parameters.AddWithValueAndNullHandle("@BranchName", vm.BranchName);



                    cmd.ExecuteNonQuery();
                }


                #region Commit

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion

                retResults[0] = "Success";

                return retResults;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {

                //transaction.Rollback();
                ////throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "InsertToBranchDetails", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion Catch and Finally
        }
        public string[] ImportBank(List<BankInformationVM> banks, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string bankCode;

            #endregion Initializ

            #region try

            try
            {
                #region settingsValue
                CommonDAL commonDal = new CommonDAL();
                bool Auto = Convert.ToBoolean(commonDal.settingValue("AutoCode", "Bank", connVM) == "Y" ? true : false);
                #endregion settingsValue
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportProduct");

                #endregion open connection and transaction

                foreach (BankInformationVM Item in banks.ToList())
                {

                    bankCode = Item.BankCode;
                    sqlResults = new string[2];
                    if (string.IsNullOrEmpty(Item.BankName))
                    {
                        throw new ArgumentNullException("ImportBank",
                                                        "Bank not exist");
                    }

                    sqlText = "select count(distinct BankName) from BankInformations where  BankName=@BankName and AccountNumber=@AccountNumber";
                    SqlCommand cmdNameExist = new SqlCommand(sqlText, currConn);
                    cmdNameExist.Transaction = transaction;

                    cmdNameExist.Parameters.AddWithValue("@BankName", Item.BankName);
                    cmdNameExist.Parameters.AddWithValue("@AccountNumber", Item.AccountNumber);

                    int countName = (int)cmdNameExist.ExecuteScalar();
                    if (countName > 0)
                    {

                        //throw new ArgumentNullException("InsertToBankInformation",
                        //                                "Requested Bank Name('" + Item.BankName + "') and Account number('" + Item.AccountNumber + "') is already exist");


                        sqlText = @"UPDATE [dbo].[BankInformations]
                        SET 

                            [Address1] = @Address1
                            ,[Address2] = @Address2
                            ,[Address3] = @Address3
                            ,[City] = @City
                            ,[TelephoneNo] = @TelephoneNo
                            ,[FaxNo] = @FaxNo
                            ,[Email] = @Email
                            ,[ContactPerson] = @ContactPerson
                            ,[ContactPersonDesignation] = @ContactPersonDesignation
                            ,[ContactPersonTelephone] = @ContactPersonTelephone
                            ,[ContactPersonEmail] = @ContactPersonEmail
                            ,[Comments] = @Comments
                            ,[ActiveStatus] = @ActiveStatus

                        WHERE BankName=@BankName1 and AccountNumber=@AccountNumber1";

                        cmdNameExist.CommandText = sqlText;

                        cmdNameExist.Parameters.AddWithValue("@Address1", Item.Address1);
                        cmdNameExist.Parameters.AddWithValue("@Address2", Item.Address2);
                        cmdNameExist.Parameters.AddWithValue("@Address3", Item.Address3);
                        cmdNameExist.Parameters.AddWithValue("@City", Item.City);
                        cmdNameExist.Parameters.AddWithValue("@TelephoneNo", Item.TelephoneNo);
                        cmdNameExist.Parameters.AddWithValue("@FaxNo", Item.FaxNo);
                        cmdNameExist.Parameters.AddWithValue("@Email", Item.Email);
                        cmdNameExist.Parameters.AddWithValue("@ContactPerson", Item.ContactPerson);
                        cmdNameExist.Parameters.AddWithValue("@ContactPersonDesignation", Item.ContactPersonDesignation);
                        cmdNameExist.Parameters.AddWithValue("@ContactPersonTelephone", Item.ContactPersonTelephone);
                        cmdNameExist.Parameters.AddWithValue("@ContactPersonEmail", Item.ContactPersonEmail);
                        cmdNameExist.Parameters.AddWithValue("@Comments", Item.Comments);
                        cmdNameExist.Parameters.AddWithValue("@ActiveStatus", Item.ActiveStatus);
                        cmdNameExist.Parameters.AddWithValue("@BankName1", Item.BankName.Trim());
                        cmdNameExist.Parameters.AddWithValue("@AccountNumber1", Item.AccountNumber.Trim());

                        transResult = cmdNameExist.ExecuteNonQuery();
                    }
                    else
                    {

                        #region Insert Bank Information
                        sqlText = "select isnull(max(cast(BankID as int)),0)+1 FROM  BankInformations";
                        SqlCommand cmdNextId = new SqlCommand(sqlText, currConn);
                        cmdNextId.Transaction = transaction;
                        int nextId = (int)cmdNextId.ExecuteScalar();
                        if (nextId <= 0)
                        {

                            throw new ArgumentNullException("InsertToBankInformation",
                                "Unable to create new Bank information Id");
                        }

                        #region Code

                        if (Auto == false)
                        {
                            if (string.IsNullOrEmpty(bankCode))
                            {
                                throw new ArgumentNullException("InsertToBankInformation",
                                    "Code generation is Manual, but Code not Issued");
                            }
                            else
                            {
                                sqlText = "select count(BankID) from BankInformations where  BankCode='" + bankCode +
                                          "'";
                                SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                                cmdCodeExist.Transaction = transaction;
                                countId = (int)cmdCodeExist.ExecuteScalar();
                                if (countId > 0)
                                {
                                    throw new ArgumentNullException("InsertToCustomer",
                                        "Same Bank  Code('" + bankCode + "') already exist");
                                }
                            }
                        }
                        else
                        {
                            bankCode = nextId.ToString();

                        }

                        #endregion Code

                        sqlText = "";
                        sqlText += "insert into BankInformations";
                        sqlText += "(";
                        sqlText += "BankID,";
                        sqlText += "BankName,";
                        sqlText += "BranchName,";
                        sqlText += "AccountNumber,";
                        sqlText += "Address1,";
                        sqlText += "Address2,";
                        sqlText += "Address3,";
                        sqlText += "City,";
                        sqlText += "TelephoneNo,";
                        sqlText += "FaxNo,";
                        sqlText += "Email,";
                        sqlText += "ContactPerson,";
                        sqlText += "ContactPersonDesignation,";
                        sqlText += "ContactPersonTelephone,";
                        sqlText += "ContactPersonEmail,";
                        sqlText += "Comments,";
                        sqlText += "ActiveStatus,";
                        sqlText += "CreatedBy,";
                        sqlText += "CreatedOn,";
                        //sqlText += "LastModifiedBy,";
                        //sqlText += "LastModifiedOn,";
                        sqlText += "BranchId,";
                        sqlText += "IsArchive,";
                        sqlText += "BankCode";
                        sqlText += ")";
                        sqlText += " values(";
                        sqlText += "@nextId,";
                        sqlText += "@ItemBankName,";
                        sqlText += "@ItemBranchName,";
                        sqlText += "@ItemAccountNumber,";
                        sqlText += "@ItemAddress1,";
                        sqlText += "@ItemAddress2,";
                        sqlText += "@ItemAddress3,";
                        sqlText += "@ItemCity,";
                        sqlText += "@ItemTelephoneNo,";
                        sqlText += "@ItemFaxNo,";
                        sqlText += "@ItemEmail,";
                        sqlText += "@ItemContactPerson,";
                        sqlText += "@ItemContactPersonDesignation,";
                        sqlText += "@ItemContactPersonTelephone,";
                        sqlText += "@ItemContactPersonEmail,";
                        sqlText += "@ItemComments,";
                        sqlText += "@ItemActiveStatus,";
                        sqlText += "@ItemCreatedBy,";
                        sqlText += "@ItemCreatedOn,";
                        sqlText += "@BranchId,";
                        sqlText += "@IsArchive,";
                        sqlText += "@bankCode";
                        sqlText += ")";
                        SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                        cmdInsert.Transaction = transaction;

                        cmdInsert.Parameters.AddWithValueAndNullHandle("@nextId", nextId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemBankName", Item.BankName);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemBranchName", Item.BranchName);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAccountNumber", Item.AccountNumber);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress1", Item.Address1);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress2", Item.Address2);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAddress3", Item.Address3);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCity", Item.City);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTelephoneNo", Item.TelephoneNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemFaxNo", Item.FaxNo);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemEmail", Item.Email);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPerson", Item.ContactPerson);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonDesignation",
                            Item.ContactPersonDesignation);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonTelephone",
                            Item.ContactPersonTelephone);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemContactPersonEmail",
                            Item.ContactPersonEmail);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                        //cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                        //cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@BranchId", Item.BranchId);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                        cmdInsert.Parameters.AddWithValueAndNullHandle("@bankCode", bankCode);

                        transResult = (int)cmdInsert.ExecuteNonQuery();

                        if (transResult <= 0 || cmdInsert == null)
                        {

                            throw new ArgumentNullException("ImportProduct",
                                "Unable to Insert BankName('" + Item.BankName + "')");
                        }

                        #endregion Insert
                    }
                }
                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Bank Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add customer";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add customer ";
                }

                #endregion COMMIT
            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {

                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportBank", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {

                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportBank", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ImportProductOpening(List<ProductVM> products, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string vehicleCode;


            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ProductOpening");

                #endregion open connection and transaction

                foreach (ProductVM Item in products.ToList())
                {
                    sqlResults = new string[2];
                    if (string.IsNullOrEmpty(Item.ItemNo))
                    {
                        throw new ArgumentNullException("ProductOpening",
                                                        "Item Number not exist");
                    }

                    sqlText = "select count(ItemNo) from Products where  ItemNo=@ItemNo";
                    SqlCommand cmdItemNoExist = new SqlCommand(sqlText, currConn);
                    cmdItemNoExist.Transaction = transaction;

                    cmdItemNoExist.Parameters.AddWithValue("@ItemNo", Item.ItemNo);

                    countId = (int)cmdItemNoExist.ExecuteScalar();
                    if (countId > 0)
                    {
                        sqlText = "";
                        sqlText += "update Products set ";

                        sqlText += " OpeningBalance                =@OpeningBalance";
                        sqlText += ",OpeningTotalCost              =@OpeningTotalCost";
                        sqlText += ",OpeningDate                   =@OpeningDate";

                        sqlText += " where ItemNo        =@ItemNo";

                        SqlCommand cmdUpdate = new SqlCommand(sqlText, currConn);
                        cmdUpdate.Transaction = transaction;
                        cmdUpdate.Parameters.AddWithValue("@OpeningBalance", Item.OpeningBalance);
                        cmdUpdate.Parameters.AddWithValue("@OpeningTotalCost", Item.OpeningTotalCost);
                        cmdUpdate.Parameters.AddWithValue("@OpeningDate", Item.OpeningDate);
                        cmdUpdate.Parameters.AddWithValue("@ItemNo", Item.ItemNo);

                        transResult = cmdUpdate.ExecuteNonQuery();

                    }
                    else
                    {

                        throw new ArgumentNullException("ProductOpening",
                                                       "Item No: " + Item.ItemNo + " not exist in Products");

                    }
                }

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested ProductOpening Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add ProductOpening";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add ProductOpening ";
                }

                #endregion COMMIT

            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {

                transaction.Rollback();
                FileLogger.Log("ImportDAL", "ImportProductOpening", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {

                transaction.Rollback();
                FileLogger.Log("ImportDAL", "ImportProductOpening", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ImportCosting(List<CostingVM> costings, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;

            string sqlText = "";


            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportCosting");

                #endregion open connection and transaction
                CommonImportDAL cImport = new CommonImportDAL();
                int countId = 0;
                #region Code

                sqlText = "select count(ItemNo) from Costing ";
                SqlCommand cmdCodeExist = new SqlCommand(sqlText, currConn);
                cmdCodeExist.Transaction = transaction;
                countId = (int)cmdCodeExist.ExecuteScalar();


                #endregion Code
                foreach (CostingVM Item in costings.ToList())
                {
                    sqlResults = new string[2];

                    #region FindItemId

                    string ItemNo = cImport.FindItemId(Item.ProductName, Item.ProductCode, null, null);
                    #endregion FindItemId

                    #region Insert Costing Information
                    countId++;


                    sqlText = "";
                    sqlText += " insert into Costing ";
                    sqlText += "(";
                    sqlText += " Id,";
                    sqlText += " ItemNo,";
                    sqlText += " BENumber,";
                    sqlText += " RefNo,";
                    sqlText += " InputDate,";
                    sqlText += " CostPrice,";
                    sqlText += " Quantity,";
                    sqlText += " UnitCost,";
                    sqlText += " AV,";
                    sqlText += " CD,";
                    sqlText += " RD,";
                    sqlText += " TVB,";
                    sqlText += " SDAmount,";
                    sqlText += " VATAmount,";
                    sqlText += " TVA,";
                    sqlText += " ATV,";
                    sqlText += " Other,";
                    sqlText += "CreatedBy,";
                    sqlText += "CreatedOn";

                    sqlText += ")";
                    sqlText += " values(";
                    sqlText += "@countId,";
                    sqlText += "@ItemNo,";
                    sqlText += "@ItemBENumber,";
                    sqlText += "@ItemRefNo,";
                    sqlText += "@ItemInputDate,";
                    sqlText += "@ItemCostPrice,";
                    sqlText += "@ItemQuantity,";
                    sqlText += "@ItemUnitCost,";
                    sqlText += "@ItemAV,";
                    sqlText += "@ItemCD,";
                    sqlText += "@ItemRD,";
                    sqlText += "@ItemTVB,";
                    sqlText += "@ItemSDAmount,";
                    sqlText += "@ItemVATAmount,";
                    sqlText += "@ItemTVA,";
                    sqlText += "@ItemATV,";
                    sqlText += "@ItemOther,";
                    sqlText += "@ItemCreatedBy,";
                    sqlText += "@ItemCreatedOn";
                    sqlText += ")";
                    SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                    cmdInsert.Transaction = transaction;

                    cmdInsert.Parameters.AddWithValueAndNullHandle("@countId", countId);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemNo", ItemNo);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemBENumber", Item.BENumber);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemRefNo", Item.RefNo);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemInputDate", Item.InputDate);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCostPrice", Item.CostPrice);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemQuantity", Item.Quantity);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemUnitCost", Item.UnitCost);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemAV", Item.AV);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCD", Item.CD);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemRD", Item.RD);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTVB", Item.TVB);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemSDAmount", Item.SDAmount);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemVATAmount", Item.VATAmount);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemTVA", Item.TVA);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemATV", Item.ATV);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemOther", Item.Other);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);

                    transResult = (int)cmdInsert.ExecuteNonQuery();

                    if (transResult <= 0 || cmdInsert == null)
                    {

                        throw new ArgumentNullException("ImportCosting",
                                                        "Unable to Insert Costing");
                    }
                    #endregion Insert


                }
                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested Costing Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to insert Costing Price";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to insert Costing Price ";
                }

                #endregion COMMIT
            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                transaction.Rollback();
                FileLogger.Log("ImportDAL", "ImportCosting", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                FileLogger.Log("ImportDAL", "ImportCosting", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        public string[] ImportUOM_Names(List<UOMNameVM> uoms, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportUOM");

                #endregion open connection and transaction

                foreach (UOMNameVM Item in uoms.ToList())
                {

                    sqlResults = new string[2];
                    if (string.IsNullOrEmpty(Item.UOMCode))
                    {
                        throw new ArgumentNullException("ImportUOM", "UOM Name not exist");
                    }
                    sqlText = "select count(UOMCode) from UOMName where  UOMCode=@ItemUOMCode";
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;

                    cmdIdExist.Parameters.AddWithValue("@ItemUOMCode", Item.UOMCode);

                    countId = (int)cmdIdExist.ExecuteScalar();
                    if (countId > 0)
                    {
                        throw new ArgumentNullException("InsertToUOMName", "UOM Name (" + Item.UOMName + ") is already exist");
                    }

                    sqlText = "select count(distinct UOMName) from UOMName where  UOMName=@ItemUOMName";
                    SqlCommand cmdNameExist = new SqlCommand(sqlText, currConn);
                    cmdNameExist.Transaction = transaction;
                    cmdNameExist.Parameters.AddWithValue("@ItemUOMName", Item.UOMName);
                    int countName = (int)cmdNameExist.ExecuteScalar();
                    if (countName > 0)
                    {

                        throw new ArgumentNullException("InsertToUOMName", "UOM Name (" + Item.UOMName + ") is already exist");
                    }

                    #region Insert new vehicle
                    sqlText = "";
                    sqlText += "insert into UOMName";
                    sqlText += "(";
                    sqlText += "UOMName,";
                    sqlText += "UOMCode,";
                    sqlText += "Comments,";
                    sqlText += "ActiveStatus,";
                    sqlText += "CreatedBy,";
                    sqlText += "CreatedOn,";
                    sqlText += "LastModifiedBy,";
                    sqlText += "IsArchive,";
                    sqlText += "LastModifiedOn";
                    sqlText += ")";

                    sqlText += " values(";

                    sqlText += "@ItemUOMName,";
                    sqlText += "@ItemUOMCode,";
                    sqlText += "@ItemComments,";
                    sqlText += "@ItemActiveStatus,";
                    sqlText += "@ItemCreatedBy,";
                    sqlText += "@ItemCreatedOn,";
                    sqlText += "@ItemLastModifiedBy,";
                    sqlText += "@IsArchive,";
                    sqlText += "@ItemLastModifiedOn";
                    sqlText += ")";

                    SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                    cmdInsert.Transaction = transaction;

                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemUOMName", Item.UOMName.Trim());
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemUOMCode", Item.UOMCode.Trim());
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemComments", Item.Comments);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemActiveStatus", Item.ActiveStatus);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedBy", Item.CreatedBy);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemCreatedOn", Item.CreatedOn);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedBy", Item.LastModifiedBy);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@IsArchive", false);
                    cmdInsert.Parameters.AddWithValueAndNullHandle("@ItemLastModifiedOn", Item.LastModifiedOn);

                    transResult = (int)cmdInsert.ExecuteNonQuery();

                    if (transResult <= 0 || cmdInsert == null)
                    {

                        throw new ArgumentNullException("ImportUOM", "Unable to Insert UOM('" + Item.UOMName + "')");
                    }

                    #endregion

                }

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested UOM Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add UOM";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add UOM ";
                }

                #endregion COMMIT

            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {

                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportUOM_Names", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {

                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportUOM_Names", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }

        #endregion

        #region Backup Oct-06-2020

        //public string[] ImportProduct1(List<ProductVM> products)
        //{
        //    #region Initializ

        //    string[] retResults = new string[3];
        //    retResults[0] = "Fail";
        //    retResults[1] = "Fail";

        //    SqlConnection currConn = null;
        //    SqlTransaction transaction = null;
        //    int transResult = 0;
        //    int countId = 0;
        //    string sqlText = "";

        //    #endregion Initializ
        //    try
        //    {
        //        #region open connection and transaction

        //        currConn = _dbsqlConnection.GetConnection(connVM);

        //        #endregion open connection and transaction

        //        foreach (var Item in products.ToList())
        //        {
        //            if (currConn.State != ConnectionState.Open)
        //            {
        //                currConn.Open();
        //            }
        //            transaction = currConn.BeginTransaction("InsertToProduct");

        //            sqlResults = new string[2];
        //            if (string.IsNullOrEmpty(Item.CategoryName))
        //            {
        //                throw new ArgumentNullException("ImportProduct",
        //                                                "Group Name not exist");
        //            }

        //            sqlText = "select count(CategoryName) from ProductCategories where  CategoryName='" +
        //                      Item.CategoryName + "'";
        //            SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
        //            cmdIdExist.Transaction = transaction;
        //            countId = (int)cmdIdExist.ExecuteScalar();
        //            if (countId <= 0)
        //            {
        //                throw new ArgumentNullException("ImportProduct",
        //                                                "Group Name not exist in Database (" + Item.CategoryName + ").");
        //            }

        //            sqlText = "select distinct CategoryID from ProductCategories where  CategoryName='" +
        //                      Item.CategoryName + "'";
        //            SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
        //            cmdCId.Transaction = transaction;
        //            string CID = (string)cmdCId.ExecuteScalar();
        //            if (countId <= 0)
        //            {
        //                throw new ArgumentNullException("ImportProduct",
        //                                                "Group Name not exist in Database (" + Item.CategoryName +
        //                                                ").");
        //            }
        //            if (currConn != null)
        //            {
        //                if (currConn.State == ConnectionState.Open)
        //                {
        //                    currConn.Close();

        //                }
        //            }
        //            ProductDAL productDal = new ProductDAL();
        //            sqlResults = productDal.InsertToProduct(Item.ItemNo, Item.ProductName, Item.ProductDescription, CID,
        //                                                    Item.UOM, Item.CostPrice, Item.SalesPrice, Item.NBRPrice,
        //                                                    Item.OpeningBalance, Item.SerialNo,
        //                                                    Item.HSCodeNo, Item.VATRate, Item.Comments,
        //                                                    Item.ActiveStatus, Item.CreatedBy, Item.CreatedOn,
        //                                                    Item.CreatedBy, Item.CreatedOn, Item.SD,
        //                                                    Item.Packetprice, Item.Trading, Item.TradingMarkUp,
        //                                                    Item.NonStock, Item.OpeningDate, Item.ProductCode,
        //                                                    Item.TollCharge);

        //            if (sqlResults.Length > 0)
        //            {
        //                retResults[0] = sqlResults[0];
        //                retResults[1] = sqlResults[1];

        //                if (string.IsNullOrEmpty(retResults[0]))
        //                {
        //                    return sqlResults;
        //                }
        //                else if (retResults[0] == "Fail")
        //                {
        //                    return sqlResults;
        //                }
        //            }
        //        }
        //    }

        //    #region Catch and Finall
        //    catch (SqlException sqlex)
        //    {
        //        throw sqlex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    finally
        //    {
        //        if (currConn != null)
        //        {
        //            if (currConn.State == ConnectionState.Open)
        //            {

        //                currConn.Close();

        //            }
        //        }

        //    }

        //    #endregion Catch and Finall
        //    #region Result
        //    return retResults;
        //    #endregion Result

        //}
        //public string[] ImportCustomer1(List<CustomerVM> customers)
        //{
        //    #region Initializ

        //    string[] retResults = new string[3];
        //    retResults[0] = "Fail";
        //    retResults[1] = "Fail";

        //    SqlConnection currConn = null;
        //    SqlTransaction transaction = null;
        //    int transResult = 0;
        //    int countId = 0;
        //    string sqlText = "";

        //    #endregion Initializ
        //    try
        //    {
        //        #region open connection and transaction

        //        currConn = _dbsqlConnection.GetConnection(connVM);

        //        #endregion open connection and transaction

        //        foreach (var Item in customers.ToList())
        //        {
        //            if (currConn.State != ConnectionState.Open)
        //            {
        //                currConn.Open();
        //            }
        //            transaction = currConn.BeginTransaction("ImportCustomer");

        //            sqlResults = new string[2];
        //            if (string.IsNullOrEmpty(Item.CustomerGroup))
        //            {
        //                throw new ArgumentNullException("ImportProduct",
        //                                                "Group Name not exist");
        //            }

        //            sqlText = "select count(CustomerGroupName) from CustomerGroups where  CustomerGroupName='" +
        //                      Item.CustomerGroup + "'";
        //            SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
        //            cmdIdExist.Transaction = transaction;
        //            countId = (int)cmdIdExist.ExecuteScalar();
        //            if (countId <= 0)
        //            {
        //                throw new ArgumentNullException("ImportProduct",
        //                                                "Group Name not exist in Database (" + Item.CustomerGroup + ").");
        //            }

        //            sqlText = "select distinct CustomerGroupID from CustomerGroups where  CustomerGroupName='" +
        //                      Item.CustomerGroup + "'";
        //            SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
        //            cmdCId.Transaction = transaction;
        //            string CID = (string)cmdCId.ExecuteScalar();
        //            if (countId <= 0)
        //            {
        //                throw new ArgumentNullException("ImportProduct",
        //                                                "Group Name not exist in Database (" + Item.CustomerGroup +
        //                                                ").");
        //            }
        //            if (currConn != null)
        //            {
        //                if (currConn.State == ConnectionState.Open)
        //                {
        //                    currConn.Close();

        //                }
        //            }

        //            CustomerDAL customerDal = new CustomerDAL();
        //            sqlResults = customerDal.InsertToCustomerNew(Item.CustomerID, Item.CustomerName, CID, Item.Address1, Item.Address2, Item.Address3, Item.City, Item.TelephoneNo, Item.FaxNo, Item.Email, Item.StartDateTime, Item.ContactPerson
        //                , Item.ContactPersonDesignation, Item.ContactPersonTelephone, Item.ContactPersonEmail, Item.TINNo, Item.VATRegistrationNo, Item.Comments, Item.ActiveStatus, Item.CreatedBy, Item.CreatedOn, Item.CreatedBy, Item.CreatedOn
        //                , Item.Country);

        //            if (sqlResults.Length > 0)
        //            {
        //                retResults[0] = sqlResults[0];
        //                retResults[1] = sqlResults[1];

        //                if (string.IsNullOrEmpty(retResults[0]))
        //                {
        //                    return sqlResults;
        //                }
        //                else if (retResults[0] == "Fail")
        //                {
        //                    return sqlResults;
        //                }
        //            }
        //        }
        //    }

        //    #region Catch and Finall
        //    catch (SqlException sqlex)
        //    {
        //        throw sqlex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    finally
        //    {
        //        if (currConn != null)
        //        {
        //            if (currConn.State == ConnectionState.Open)
        //            {

        //                currConn.Close();

        //            }
        //        }

        //    }

        //    #endregion Catch and Finall
        //    #region Result
        //    return retResults;
        //    #endregion Result

        //}
        //public string[] ImportVendor1(List<VendorVM> vendors)
        //{
        //    #region Initializ

        //    string[] retResults = new string[3];
        //    retResults[0] = "Fail";
        //    retResults[1] = "Fail";

        //    SqlConnection currConn = null;
        //    SqlTransaction transaction = null;
        //    int transResult = 0;
        //    int countId = 0;
        //    string sqlText = "";

        //    #endregion Initializ
        //    try
        //    {
        //        #region open connection and transaction

        //        currConn = _dbsqlConnection.GetConnection(connVM);

        //        #endregion open connection and transaction

        //        foreach (var Item in vendors.ToList())
        //        {
        //            if (currConn.State != ConnectionState.Open)
        //            {
        //                currConn.Open();
        //            }
        //            transaction = currConn.BeginTransaction("ImportVendor");

        //            sqlResults = new string[2];
        //            if (string.IsNullOrEmpty(Item.VendorGroup))
        //            {
        //                throw new ArgumentNullException("ImportVendor",
        //                                                "Group Name not exist");
        //            }

        //            sqlText = "select count(VendorGroupName) from VendorGroups where  VendorGroupName='" +
        //                      Item.VendorGroup + "'";
        //            SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
        //            cmdIdExist.Transaction = transaction;
        //            countId = (int)cmdIdExist.ExecuteScalar();
        //            if (countId <= 0)
        //            {
        //                throw new ArgumentNullException("ImportVendor",
        //                                                "Group Name not exist in Database (" + Item.VendorGroup + ").");
        //            }

        //            sqlText = "select distinct VendorGroupID from VendorGroups where  VendorGroupName='" +
        //                      Item.VendorGroup + "'";
        //            SqlCommand cmdCId = new SqlCommand(sqlText, currConn);
        //            cmdCId.Transaction = transaction;
        //            string CID = (string)cmdCId.ExecuteScalar();
        //            if (countId <= 0)
        //            {
        //                throw new ArgumentNullException("ImportVendor",
        //                                                "Group Name not exist in Database (" + Item.VendorGroup +
        //                                                ").");
        //            }
        //            if (currConn != null)
        //            {
        //                if (currConn.State == ConnectionState.Open)
        //                {
        //                    currConn.Close();

        //                }
        //            }

        //            VendorDAL vendorDal = new VendorDAL();
        //            sqlResults = vendorDal.InsertToVendorNewSQL(Item.VendorID, Item.VendorName, CID, Item.Address1, Item.Address2, Item.Address3, Item.City, Item.TelephoneNo, Item.FaxNo, Item.Email, Item.StartDateTime, Item.ContactPerson, Item.ContactPersonDesignation, Item.ContactPersonTelephone
        //                , Item.ContactPersonEmail, Item.VATRegistrationNo, Item.TINNo, Item.Comments, Item.ActiveStatus, Item.CreatedBy, Item.CreatedOn, Item.CreatedBy, Item.CreatedOn, Item.Country);

        //            if (sqlResults.Length > 0)
        //            {
        //                retResults[0] = sqlResults[0];
        //                retResults[1] = sqlResults[1];

        //                if (string.IsNullOrEmpty(retResults[0]))
        //                {
        //                    return sqlResults;
        //                }
        //                else if (retResults[0] == "Fail")
        //                {
        //                    return sqlResults;
        //                }
        //            }
        //        }
        //    }

        //    #region Catch and Finall
        //    catch (SqlException sqlex)
        //    {
        //        throw sqlex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    finally
        //    {
        //        if (currConn != null)
        //        {
        //            if (currConn.State == ConnectionState.Open)
        //            {

        //                currConn.Close();

        //            }
        //        }

        //    }

        //    #endregion Catch and Finall
        //    #region Result
        //    return retResults;
        //    #endregion Result

        //}
        //public string[] ImportVehicle1(List<VehicleVM> vehicles)
        //{
        //    #region Initializ

        //    string[] retResults = new string[3];
        //    retResults[0] = "Fail";
        //    retResults[1] = "Fail";

        //    SqlConnection currConn = null;
        //    SqlTransaction transaction = null;
        //    int transResult = 0;
        //    int countId = 0;
        //    string sqlText = "";

        //    #endregion Initializ
        //    try
        //    {
        //        #region open connection and transaction

        //        currConn = _dbsqlConnection.GetConnection(connVM);

        //        #endregion open connection and transaction

        //        foreach (var Item in vehicles.ToList())
        //        {
        //            if (currConn.State != ConnectionState.Open)
        //            {
        //                currConn.Open();
        //            }
        //            transaction = currConn.BeginTransaction("ImportVehicle");

        //            sqlResults = new string[2];
        //            if (string.IsNullOrEmpty(Item.VehicleNo))
        //            {
        //                throw new ArgumentNullException("ImportVehicle",
        //                                                "Vehicle Name not exist");
        //            }

        //            sqlText = "select count(VehicleNo) from Vehicles where  VehicleNo='" +
        //                      Item.VehicleNo + "'";
        //            SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
        //            cmdIdExist.Transaction = transaction;
        //            countId = (int)cmdIdExist.ExecuteScalar();
        //            if (countId > 0)
        //            {
        //                throw new ArgumentNullException("ImportVehicle",
        //                                                "Vehicle No not exist in Database (" + Item.VehicleNo + ").");
        //            }


        //            if (currConn != null)
        //            {
        //                if (currConn.State == ConnectionState.Open)
        //                {
        //                    currConn.Close();

        //                }
        //            }

        //            VehicleDAL vehicleDal = new VehicleDAL();
        //            sqlResults = vehicleDal.InsertToVehicle(Item.VehicleID, Item.VehicleType, Item.VehicleNo, Item.Description, Item.Comments, Item.ActiveStatus, Item.CreatedBy, Item.CreatedOn, Item.CreatedBy, Item.CreatedOn);

        //            if (sqlResults.Length > 0)
        //            {
        //                retResults[0] = sqlResults[0];
        //                retResults[1] = sqlResults[1];

        //                if (string.IsNullOrEmpty(retResults[0]))
        //                {
        //                    return sqlResults;
        //                }
        //                else if (retResults[0] == "Fail")
        //                {
        //                    return sqlResults;
        //                }
        //            }
        //        }
        //    }

        //    #region Catch and Finall
        //    catch (SqlException sqlex)
        //    {
        //        throw sqlex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    finally
        //    {
        //        if (currConn != null)
        //        {
        //            if (currConn.State == ConnectionState.Open)
        //            {

        //                currConn.Close();

        //            }
        //        }

        //    }

        //    #endregion Catch and Finall
        //    #region Result
        //    return retResults;
        //    #endregion Result

        //}
        //public string[] ImportBank1(List<BankVM> banks)
        //{
        //    #region Initializ

        //    string[] retResults = new string[3];
        //    retResults[0] = "Fail";
        //    retResults[1] = "Fail";

        //    SqlConnection currConn = null;
        //    SqlTransaction transaction = null;
        //    int transResult = 0;
        //    int countId = 0;
        //    string sqlText = "";

        //    #endregion Initializ
        //    try
        //    {
        //        #region open connection and transaction

        //        currConn = _dbsqlConnection.GetConnection(connVM);

        //        #endregion open connection and transaction

        //        foreach (var Item in banks.ToList())
        //        {
        //            if (currConn.State != ConnectionState.Open)
        //            {
        //                currConn.Open();
        //            }
        //            transaction = currConn.BeginTransaction("ImportBank");

        //            sqlResults = new string[2];
        //            if (string.IsNullOrEmpty(Item.BankName))
        //            {
        //                throw new ArgumentNullException("ImportBank",
        //                                                "Bank not exist");
        //            }

        //            sqlText = "select count(BankID) from BankInformations where  BankName='" +
        //                      Item.BankName + "'";
        //            SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
        //            cmdIdExist.Transaction = transaction;
        //            countId = (int)cmdIdExist.ExecuteScalar();
        //            if (countId > 0)
        //            {
        //                throw new ArgumentNullException("ImportBank",
        //                                                "Bank not exist in Database (" + Item.BankName + ").");
        //            }


        //            if (currConn != null)
        //            {
        //                if (currConn.State == ConnectionState.Open)
        //                {
        //                    currConn.Close();

        //                }
        //            }

        //            BankInformationDAL bankInformationDal = new BankInformationDAL();
        //            sqlResults = bankInformationDal.InsertToBankInformation(Item.BankID, Item.BankName, Item.BranchName, Item.AccountNumber, Item.Address1, Item.Address2, Item.Address3, Item.City, Item.TelephoneNo, Item.FaxNo, Item.Email
        //                , Item.ContactPerson, Item.ContactPersonDesignation, Item.ContactPersonTelephone, Item.ContactPersonEmail, Item.Comments, Item.ActiveStatus, Item.CreatedBy, Item.CreatedOn, Item.CreatedBy, Item.CreatedOn);

        //            if (sqlResults.Length > 0)
        //            {
        //                retResults[0] = sqlResults[0];
        //                retResults[1] = sqlResults[1];

        //                if (string.IsNullOrEmpty(retResults[0]))
        //                {
        //                    return sqlResults;
        //                }
        //                else if (retResults[0] == "Fail")
        //                {
        //                    return sqlResults;
        //                }
        //            }
        //        }
        //    }

        //    #region Catch and Finall
        //    catch (SqlException sqlex)
        //    {
        //        throw sqlex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    finally
        //    {
        //        if (currConn != null)
        //        {
        //            if (currConn.State == ConnectionState.Open)
        //            {

        //                currConn.Close();

        //            }
        //        }

        //    }

        //    #endregion Catch and Finall
        //    #region Result
        //    return retResults;
        //    #endregion Result

        //}

        #endregion New Backup

        #region Web methods

        public string[] ImportUOM(List<UOMVM> uoms, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ

            string[] retResults = new string[3];
            retResults[0] = "Fail";
            retResults[1] = "Fail";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";

            #endregion Initializ

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }
                transaction = currConn.BeginTransaction("ImportUOM");

                #endregion open connection and transaction

                foreach (UOMVM Item in uoms.ToList())
                {

                    sqlResults = new string[2];
                    if (string.IsNullOrEmpty(Item.UOMCode))
                    {
                        throw new ArgumentNullException("ImportUOM", "UOM Name not exist");
                    }
                    sqlText = "select count(UOMCode) from UOMName where  UOMCode=@ItemUOMCode ";
                    SqlCommand cmdIdExist = new SqlCommand(sqlText, currConn);
                    cmdIdExist.Transaction = transaction;
                    cmdIdExist.Parameters.AddWithValue("@ItemUOMCode", Item.UOMCode);

                    countId = (int)cmdIdExist.ExecuteScalar();
                    if (countId > 0)
                    {
                        throw new ArgumentNullException("InsertToUOMName", "UOM Name (" + Item.UOMName + ") is already exist");
                    }

                    sqlText = "select count(distinct UOMName) from UOMName where  UOMName=@ItemUOMName";
                    SqlCommand cmdNameExist = new SqlCommand(sqlText, currConn);
                    cmdNameExist.Transaction = transaction;
                    cmdNameExist.Parameters.AddWithValue("@ItemUOMName", Item.UOMName);

                    int countName = (int)cmdNameExist.ExecuteScalar();
                    if (countName > 0)
                    {

                        throw new ArgumentNullException("InsertToUOMName", "UOM Name (" + Item.UOMName + ") is already exist");
                    }

                    #region Insert new vehicle
                    sqlText = "";
                    sqlText += "insert into UOMName";
                    sqlText += "(";
                    sqlText += "UOMName,";
                    sqlText += "UOMCode,";
                    sqlText += "Comments,";
                    sqlText += "ActiveStatus,";
                    sqlText += "CreatedBy,";
                    sqlText += "CreatedOn,";
                    sqlText += "LastModifiedBy,";
                    sqlText += "LastModifiedOn";
                    sqlText += ")";

                    sqlText += " values(";

                    sqlText += "@ItemUOMName,";
                    sqlText += "@ItemUOMCode,";
                    sqlText += "@ItemComments,";
                    sqlText += "@ItemActiveStatus,";
                    sqlText += "@ItemCreatedBy,";
                    sqlText += "@ItemCreatedOn,";
                    sqlText += "@ItemLastModifiedBy,";
                    sqlText += "@ItemLastModifiedOn";
                    sqlText += ")";

                    SqlCommand cmdInsert = new SqlCommand(sqlText, currConn);
                    cmdInsert.Transaction = transaction;
                    cmdInsert.Parameters.AddWithValue("@ItemUOMName", Item.UOMName ?? Convert.DBNull);
                    cmdInsert.Parameters.AddWithValue("@ItemUOMCode", Item.UOMCode ?? Convert.DBNull);
                    cmdInsert.Parameters.AddWithValue("@ItemComments", Item.Comments ?? Convert.DBNull);
                    cmdInsert.Parameters.AddWithValue("@ItemActiveStatus", Item.ActiveStatus);
                    cmdInsert.Parameters.AddWithValue("@ItemCreatedBy", Item.CreatedBy ?? Convert.DBNull);
                    cmdInsert.Parameters.AddWithValue("@ItemCreatedOn", Item.CreatedOn);
                    cmdInsert.Parameters.AddWithValue("@ItemLastModifiedBy", Item.LastModifiedBy ?? Convert.DBNull);
                    cmdInsert.Parameters.AddWithValue("@ItemLastModifiedOn", Item.LastModifiedOn);

                    transResult = (int)cmdInsert.ExecuteNonQuery();

                    if (transResult <= 0 || cmdInsert == null)
                    {

                        throw new ArgumentNullException("ImportUOM", "Unable to Insert UOM('" + Item.UOMName + "')");
                    }
                    #endregion

                }

                #region Commit


                if (transaction != null)
                {
                    if (transResult > 0)
                    {
                        transaction.Commit();
                        retResults[0] = "Success";
                        retResults[1] = "Requested UOM Information successfully Added";

                    }
                    else
                    {
                        transaction.Rollback();
                        retResults[0] = "Fail";
                        retResults[1] = "Unexpected erro to add UOM";
                    }

                }
                else
                {
                    retResults[0] = "Fail";
                    retResults[1] = "Unexpected erro to add UOM ";
                }

                #endregion COMMIT

            }
            #endregion

            #region Catch and Finall
            catch (SqlException sqlex)
            {

                transaction.Rollback();

                FileLogger.Log("ImportDAL", "ImportUOM", sqlex.ToString() + "\n" + sqlText);

                throw sqlex;
            }
            catch (Exception ex)
            {

                transaction.Rollback();
                FileLogger.Log("ImportDAL", "ImportUOM", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {

                        currConn.Close();

                    }
                }

            }
            #endregion Catch and Finall
            #region Result
            return retResults;
            #endregion Result

        }
        public DataSet GetDataSetFromExcel(ImportVM paramVM)
        {
            DataSet ds = new DataSet();

            #region try

            try
            {
                string FileName;
                string newPath;
                string Fullpath = ReadFile(paramVM, out FileName, out newPath);

                FileStream stream = File.Open(newPath, FileMode.Open, FileAccess.Read);
                IExcelDataReader reader = null;
                if (FileName.EndsWith(".xls"))
                {
                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                }
                else if (FileName.EndsWith(".xlsx"))
                {
                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                }
                else if (FileName.EndsWith(".xlsm"))
                {
                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                }
                // reader.IsFirstRowAsColumnNames = true;

                ds = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration() { UseHeaderRow = true },
                    UseColumnDataType = false
                });
                reader.Close();
                if (paramVM.File != null && paramVM.File.ContentLength > 0)
                {
                    System.IO.File.Delete(Fullpath);
                }


                return ds;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetDataSetFromExcel", ex.ToString());

                throw ex;
            }
            #endregion

        }

        public DataSet GetDataTableFromCSV(ImportVM paramVM)
        {
            DataSet ds = new DataSet();

            #region try

            try
            {
                string FileName;
                string newPath;
                string Fullpath = ReadFile(paramVM, out FileName, out newPath);

                using (StreamReader stream = new StreamReader(newPath))
                {
                    string result = stream.ReadToEnd();

                }


                return ds;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetDataSetFromExcel", ex.ToString());

                throw ex;
            }
            #endregion

        }


        private string ReadFile(ImportVM paramVM, out string FileName, out string newPath)
        {
            string Fullpath = "";
            FileName = "";
            if (paramVM.File != null && paramVM.File.ContentLength > 0)
            {
                FileName = paramVM.File.FileName;
                Fullpath = AppDomain.CurrentDomain.BaseDirectory + "Files\\Export\\" + FileName;
                System.IO.File.Delete(Fullpath);
                paramVM.File.SaveAs(Fullpath);
            }
            else
            {
                Fullpath = paramVM.FilePath;
                FileName = Fullpath;
            }


            string copyPath = AppDomain.CurrentDomain.BaseDirectory + @"\Temp\";

            Directory.CreateDirectory(copyPath);

            newPath = copyPath + Path.GetFileName(Fullpath);

            if (File.Exists(newPath))
            {
                File.Delete(newPath);
            }


            File.Copy(Fullpath, newPath);
            return Fullpath;
        }


        public DataTable GetDataTableFromExcel(string path, bool hasHeader = true)
        {
            using (ExcelPackage pck = new OfficeOpenXml.ExcelPackage())
            {
                using (FileStream stream = File.OpenRead(path))
                {
                    pck.Load(stream);
                }
                ExcelWorksheet ws = pck.Workbook.Worksheets.First();
                DataTable tbl = new DataTable();
                foreach (ExcelRangeBase firstRowCell in ws.Cells[1, 1, 1, ws.Dimension.End.Column])
                {
                    tbl.Columns.Add(hasHeader ? firstRowCell.Text : string.Format("Column {0}", firstRowCell.Start.Column));
                }
                int startRow = hasHeader ? 2 : 1;
                for (int rowNum = startRow; rowNum <= ws.Dimension.End.Row; rowNum++)
                {
                    ExcelRange wsRow = ws.Cells[rowNum, 1, rowNum, ws.Dimension.End.Column];
                    DataRow row = tbl.Rows.Add();
                    foreach (ExcelRangeBase cell in wsRow)
                    {
                        row[cell.Start.Column - 1] = cell.Text;
                    }
                }
                return tbl;
            }
        }

        public DataTable GetDataTableFromExcel(ImportVM paramVM)
        {
            DataSet ds = new DataSet();
            DataTable dt = new DataTable();

            #region try

            try
            {
                string Fullpath = "";
                string FileName = "";
                if (paramVM.File != null && paramVM.File.ContentLength > 0)
                {
                    FileName = paramVM.File.FileName;
                    Fullpath = AppDomain.CurrentDomain.BaseDirectory + "Files\\Export\\" + FileName;
                    System.IO.File.Delete(Fullpath);
                    paramVM.File.SaveAs(Fullpath);
                }
                else
                {
                    Fullpath = paramVM.FilePath;
                    FileName = Fullpath;
                }

                FileStream stream = File.Open(Fullpath, FileMode.Open, FileAccess.Read);
                IExcelDataReader reader = null;
                if (FileName.EndsWith(".xls"))
                {
                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                }
                else if (FileName.EndsWith(".xlsx"))
                {
                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                }
                ds = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration() { UseHeaderRow = true },
                    UseColumnDataType = false
                });
                reader.Close();
                if (paramVM.File != null && paramVM.File.ContentLength > 0)
                {
                    System.IO.File.Delete(Fullpath);
                }

                //reader.IsFirstRowAsColumnNames = true;
                //ds = reader.AsDataSet();
                //reader.Close();
                //if (paramVM.File != null && paramVM.File.ContentLength > 0)
                //{
                //    System.IO.File.Delete(Fullpath);
                //}
                dt = ds.Tables[paramVM.TableName];

                return dt;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetDataTableFromExcel", ex.ToString());

                throw ex;
            }
            #endregion

        }

        public DataTable GetDataTableFromExcelWEB(ImportVM paramVM)//web
        {
            DataSet ds = new DataSet();
            DataTable dt = new DataTable();

            #region try

            try
            {
                // string Fullpath = "";
                // string FileName = "";
                string FileName = paramVM.File.FileName;
                //if (paramVM.File != null && paramVM.File.ContentLength > 0)
                //{
                //    FileName = paramVM.File.FileName;
                //    Fullpath = AppDomain.CurrentDomain.BaseDirectory + "Files\\Export\\" + FileName;
                //    System.IO.File.Delete(Fullpath);
                //    paramVM.File.SaveAs(Fullpath);
                //}
                //else
                //{
                //    Fullpath = paramVM.FilePath;
                //    FileName = Fullpath;
                //}

                //  FileStream stream = File.Open(Fullpath, FileMode.Open, FileAccess.Read);
                IExcelDataReader reader = null;
                if (FileName.EndsWith(".xls"))
                {
                    reader = ExcelReaderFactory.CreateBinaryReader(paramVM.File.InputStream);
                }
                else if (FileName.EndsWith(".xlsx"))
                {
                    reader = ExcelReaderFactory.CreateOpenXmlReader(paramVM.File.InputStream);
                }
                //reader.IsFirstRowAsColumnNames = true;
                ds = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration() { UseHeaderRow = true },
                    UseColumnDataType = false
                });
                reader.Close();
                //if (paramVM.File != null && paramVM.File.ContentLength > 0)
                //{
                //    System.IO.File.Delete(Fullpath);
                //}
                dt = ds.Tables[paramVM.TableName];

                return dt;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetDataTableFromExcelWEB", ex.ToString());

                throw ex;
            }
            #endregion

        }

        public DataSet GetDataTableFromExcelds(ImportVM paramVM)
        {
            #region Variables

            DataSet ds = new DataSet();
            DataTable dt = new DataTable();

            #endregion

            #region try

            try
            {
                string Fullpath = "";
                string FileName = "";
                if (paramVM.File != null && paramVM.File.ContentLength > 0)
                {
                    FileName = paramVM.File.FileName;
                    Fullpath = AppDomain.CurrentDomain.BaseDirectory + "Files\\Export\\" + FileName;
                    System.IO.File.Delete(Fullpath);
                    paramVM.File.SaveAs(Fullpath);
                }
                else
                {
                    Fullpath = paramVM.FilePath;
                    FileName = Fullpath;
                }

                FileStream stream = File.Open(Fullpath, FileMode.Open, FileAccess.Read);
                IExcelDataReader reader = null;
                if (FileName.ToLower().EndsWith(".xls"))
                {
                    reader = ExcelReaderFactory.CreateBinaryReader(stream);
                }
                else if (FileName.ToLower().EndsWith(".xlsx"))
                {
                    reader = ExcelReaderFactory.CreateOpenXmlReader(stream);
                }
                //reader.IsFirstRowAsColumnNames = true;
                ds = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration() { UseHeaderRow = true },
                    UseColumnDataType = false
                });
                reader.Close();
                if (paramVM.File != null && paramVM.File.ContentLength > 0)
                {
                    System.IO.File.Delete(Fullpath);
                }
                //dt = ds.Tables[paramVM.TableName];

                return ds;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetDataTableFromExcelds", ex.ToString());

                throw ex;
            }
            #endregion

        }

        public List<ErrorMessage> ImportExcelFile_Web(ImportVM paramVM)
        {
            #region Initializ
            string sqlText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "ImportExcelFile"; //Method Name

            List<ErrorMessage> errormessage = new List<ErrorMessage>();
            ErrorMessage errormessagevm;

            #endregion

            #region try
            try
            {
                DataTable dtMaster = new DataTable();
                //dtMaster = GetDataTableFromExcel(paramVM);
                dtMaster = GetDataTableFromExcelWEB(paramVM);

                //Check error

                //Check error list

                //retrun

                OrdinaryVATDesktop.EmptyRowCheckAndDelete(dtMaster, errormessage);

                if (errormessage.Count > 0)
                {
                    // FormErrorMessage.ShowDetails(errormessage);
                    //btnSave.Enabled = false;

                    //foreach (DataRow row in dtMaster.Rows)
                    //{
                    //    errormessagevm = new ErrorMessage();
                    //    errormessagevm.ColumnName = row["ColumnName"].ToString();
                    //    errormessagevm.Message = row["Message"].ToString();
                    //    errormessage.Add(errormessagevm);
                    //}
                    return errormessage;

                }



                // errormessage.Clear();

                //return errormessage;

                retResults = ImportExcelFile(paramVM, dtMaster);

                if (retResults[0] == "Fail")
                {
                    errormessagevm = new ErrorMessage();
                    errormessagevm.ColumnName = "Fail";
                    errormessagevm.Message = retResults[1].ToString();
                    errormessage.Add(errormessagevm);

                }

                errormessage.Clear();

                #region SuccessResult

                retResults[0] = "Success";
                retResults[1] = "Data Save Successfully.";

                #endregion SuccessResult

            }
            #endregion try

            #region Catch and Finall

            catch (Exception ex)
            {
                ////retResults[0] = "Fail";
                ////retResults[1] = ex.Message;
                ////retResults[4] = ex.Message.ToString(); //catch ex

                errormessagevm = new ErrorMessage();
                errormessagevm.ColumnName = "Fail";
                errormessagevm.Message = ex.Message;
                errormessage.Add(errormessagevm);

                FileLogger.Log("ImportDAL", "ImportExcelFile", ex.ToString() + "\n" + sqlText);

                //return retResults;
            }
            finally
            {
            }

            #endregion

            #region Results

            return errormessage;

            #endregion

        }

        public string[] ImportExcelFile(ImportVM paramVM, DataTable dt = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "ImportExcelFile"; //Method Name
            #endregion

            #region try
            try
            {
                DataTable dtMaster = new DataTable();

                if (dt != null && dt.Rows.Count > 0)
                {
                    dtMaster = dt;
                }
                else
                {
                    //dtMaster = GetDataTableFromExcel(paramVM);
                    dtMaster = GetDataTableFromExcelWEB(paramVM);

                }

                #region Data Insert

                if (paramVM.TableName == "Customer")
                {
                    List<CustomerVM> customers = DataTableToCustomer(dtMaster, paramVM);
                    retResults = ImportCustomer(customers, null, connVM);
                }
                if (paramVM.TableName == "Products")
                {

                    List<ProductVM> products = DataTableToProduct(dtMaster, paramVM);
                    List<TrackingVM> trackings = new List<TrackingVM>();
                    retResults = ImportProduct(products, trackings, null, null, connVM);
                }
                if (paramVM.TableName == "Vendor")
                {
                    List<VendorVM> vendors = DataTableToVendor(dtMaster, paramVM);
                    retResults = ImportVendor(vendors, connVM);
                }
                if (paramVM.TableName == "Vehicle")
                {
                    List<VehicleVM> vehicles = DataTableToVehicle(dtMaster, paramVM);
                    retResults = ImportVehicle(vehicles, connVM);
                }

                if (paramVM.TableName == "Product")// BOM Upload
                {
                    string singleImport = "Y";

                    if (singleImport.ToLower() == "y")
                    {
                        BOMDAL bomdal = new BOMDAL();

                        dtMaster.Columns.Add(new DataColumn() { ColumnName = "BranchId", DefaultValue = paramVM.BranchId });

                        bool useQtyFlag = dtMaster.Columns.Contains("UseQuantity");

                        string[] col;

                        if (useQtyFlag)
                        {
                            col = new string[] { "WastageQuantity", "TotalQuantity", "Cost", "UseQuantity" };

                        }
                        else
                        {
                            col = new string[] { "WastageQuantity", "TotalQuantity", "Cost" };

                        }

                        dtMaster = OrdinaryVATDesktop.ParseDecimal_Dt(dtMaster, col);

                        retResults = bomdal.ImportBOM(dtMaster, connVM);

                    }
                }

                //if (paramVM.TableName == "Bank")
                //{
                //    var Banks = DataTableToBank(dtMaster, paramVM);
                //    retResults = ImportBank(Banks);
                //}
                if (retResults[0] == "Fail")
                {
                    throw new ArgumentNullException("", retResults[1]);
                }
                #endregion

                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Save Successfully.";
                #endregion SuccessResult
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[4] = ex.Message.ToString(); //catch ex

                FileLogger.Log("ImportDAL", "ImportExcelFile", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

      

        private List<CustomerVM> DataTableToCustomer(DataTable dt, ImportVM paramVM)
        {
            #region try

            try
            {

                List<CustomerVM> vms = new List<CustomerVM>();
                CustomerVM vm;
                foreach (DataRow row in dt.Rows)
                {
                    vm = new CustomerVM();
                    vm.CustomerName = row["CustomerName"].ToString();
                    vm.CustomerCode = row["Code"].ToString();
                    vm.CustomerGroup = row["CustomerGroup"].ToString();
                    vm.Address1 = row["Address1"].ToString();
                    //vm.Address2 = row["Address2"].ToString();
                    //vm.Address3 = row["Address3"].ToString();
                    vm.City = row["City"].ToString();
                    vm.TelephoneNo = row["TelephoneNo"].ToString();
                    vm.FaxNo = row["FaxNo"].ToString();
                    vm.Email = row["Email"].ToString();
                    vm.StartDateTime = Convert.ToDateTime(row["StartDateTime"].ToString()).ToString("yyyy-MM-dd HH:mm:ss");
                    vm.ContactPerson = row["ContactPerson"].ToString();
                    vm.ContactPersonDesignation = row["ContactPersonDesignation"].ToString();
                    vm.ContactPersonTelephone = row["ContactPersonTelephone"].ToString();
                    vm.ContactPersonEmail = row["ContactPersonEmail"].ToString();
                    vm.TINNo = row["TIN"].ToString();
                    vm.VATRegistrationNo = row["VATRegistrationNo"].ToString();
                    vm.Comments = row["Comments"].ToString();
                    vm.ActiveStatus = row["ActiveStatus"].ToString();
                    vm.IsTax = row["IsTax"].ToString();
                    vm.CreatedBy = paramVM.CreatedBy;
                    vm.CreatedOn = paramVM.CreatedOn;
                    vm.LastModifiedBy = paramVM.LastModifiedBy;
                    vm.LastModifiedOn = paramVM.LastModifiedOn;
                    vm.Country = row["Country"].ToString();
                    vms.Add(vm);
                }
                return vms;

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "DataTableToCustomer", ex.ToString());

                throw;
            }
            #endregion
        }
        private List<ProductVM> DataTableToProduct(DataTable dt, ImportVM paramVM)
        {
            #region try

            try
            {
                List<ProductVM> vms = new List<ProductVM>();
                ProductVM vm;
                foreach (DataRow row in dt.Rows)
                {
                    vm = new ProductVM();
                    vm.ProductName = row["ProductName"].ToString();
                    vm.ProductDescription = row["Description"].ToString();
                    vm.CategoryName = row["Group"].ToString();
                    vm.UOM = row["UOM"].ToString();

                    string tprice = row["TotalPrice"].ToString();
                    string opbalance = row["OpeningQuantity"].ToString();

                    if (string.IsNullOrEmpty(tprice))
                    { tprice = "0"; }
                    if (string.IsNullOrEmpty(opbalance))
                    { opbalance = "0"; }

                    if (Convert.ToDecimal(opbalance) <= 0 || Convert.ToDecimal(tprice) <= 0)
                    {
                        vm.CostPrice = 0;
                    }
                    else
                    {
                        vm.CostPrice = Convert.ToDecimal(tprice) / Convert.ToDecimal(opbalance);//Convert.ToDecimal(row["TotalPrice"].ToString());
                    }

                    vm.OpeningBalance = Convert.ToDecimal(opbalance);
                    vm.OpeningTotalCost = Convert.ToDecimal(tprice);// Convert.ToDecimal(row["OpeningQuantity"].ToString());
                    vm.SerialNo = row["RefNo"].ToString();
                    vm.HSCodeNo = row["HSCode"].ToString();
                    vm.VATRate = Convert.ToDecimal(row["VATRate"].ToString());
                    vm.Comments = row["Comments"].ToString();
                    vm.ActiveStatus = row["ActiveStatus"].ToString();
                    vm.SD = Convert.ToDecimal(row["SDRate"].ToString());
                    vm.Packetprice = Convert.ToDecimal(row["PacketPrice"].ToString());
                    vm.Trading = row["Trading"].ToString();
                    vm.TradingMarkUp = Convert.ToDecimal(row["TradingMarkUp"].ToString());
                    vm.NonStock = row["NonStock"].ToString();
                    vm.OpeningDate = Convert.ToDateTime(row["OpeningDate"].ToString()).ToString("yyyy-MM-dd HH:mm:ss");
                    vm.CreatedBy = paramVM.CreatedBy;
                    vm.CreatedOn = paramVM.CreatedOn;
                    vm.LastModifiedBy = paramVM.LastModifiedBy;
                    vm.LastModifiedOn = paramVM.LastModifiedOn;
                    vm.ProductCode = row["Code"].ToString();
                    vm.TollCharge = Convert.ToDecimal(row["TollCharge"].ToString());
                    vms.Add(vm);
                }
                return vms;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "DataTableToProduct", ex.ToString());

                throw;
            }
            #endregion
        }
        private List<VendorVM> DataTableToVendor(DataTable dt, ImportVM paramVM)
        {
            #region try

            try
            {
                List<VendorVM> vms = new List<VendorVM>();
                VendorVM vm;
                foreach (DataRow row in dt.Rows)
                {
                    vm = new VendorVM();
                    vm.VendorCode = row["Code"].ToString();
                    vm.VendorName = row["VendorName"].ToString();
                    vm.VendorGroup = row["VendorGroup"].ToString();
                    vm.Address1 = row["Address1"].ToString();
                    vm.Address2 = row["Address2"].ToString();
                    vm.Address3 = row["Address3"].ToString();
                    vm.City = row["City"].ToString();
                    vm.TelephoneNo = row["TelephoneNo"].ToString();
                    vm.FaxNo = row["FaxNo"].ToString();
                    vm.Email = row["Email"].ToString();
                    vm.StartDateTime = Convert.ToDateTime(row["StartDateTime"].ToString()).ToString("yyyy-MM-dd HH:mm:ss");
                    vm.ContactPerson = row["ContactPerson"].ToString();
                    vm.ContactPersonDesignation = row["ContactPersonDesignation"].ToString();
                    vm.ContactPersonTelephone = row["ContactPersonTelephone"].ToString();
                    vm.ContactPersonEmail = row["ContactPersonEmail"].ToString();
                    vm.VATRegistrationNo = row["VATRegistrationNo"].ToString();
                    vm.TINNo = row["TIN"].ToString();
                    vm.Comments = row["Comments"].ToString();
                    vm.ActiveStatus = row["ActiveStatus"].ToString();
                    vm.CreatedBy = paramVM.CreatedBy;
                    vm.CreatedOn = paramVM.CreatedOn;
                    vm.LastModifiedBy = paramVM.LastModifiedBy;
                    vm.LastModifiedOn = paramVM.LastModifiedOn;
                    vm.Country = row["Country"].ToString();
                    vms.Add(vm);
                }
                return vms;

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "DataTableToVendor", ex.ToString());

                throw;
            }
            #endregion
        }
        private List<VehicleVM> DataTableToVehicle(DataTable dt, ImportVM paramVM)
        {
            #region try

            try
            {
                List<VehicleVM> vms = new List<VehicleVM>();
                VehicleVM vm;
                foreach (DataRow row in dt.Rows)
                {
                    vm = new VehicleVM();
                    vm.VehicleType = row["VehicleType"].ToString();
                    vm.Code = row["Code"].ToString();
                    vm.VehicleType = row["VehicleType"].ToString();
                    vm.VehicleNo = row["VehicleNo"].ToString();
                    vm.Description = row["Description"].ToString();
                    vm.Comments = row["Comments"].ToString();
                    vm.ActiveStatus = row["ActiveStatus"].ToString();
                    vm.CreatedBy = paramVM.CreatedBy;
                    vm.CreatedOn = paramVM.CreatedOn;
                    vm.LastModifiedBy = paramVM.LastModifiedBy;
                    vm.LastModifiedOn = paramVM.LastModifiedOn;
                    vms.Add(vm);
                }
                return vms;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "DataTableToVehicle", ex.ToString());

                throw;
            }
            #endregion
        }

        #endregion

        public DataTable GetSaleOtherDbDatax(string invoiceNo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            OleDbConnection currConn = null;
            OleDbTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction



                currConn = _dbsqlConnection.GetConnectionLink3OLEDB();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction


                sqlText = @"SELECT 
      sih.[SalesInvoiceNo] ID
      ,bp.BranchCode Branch_Code
	  ,cg.CustomerGroupName CustomerGroup
      ,c.CustomerName Customer_Name
	  ,c.CustomerCode Customer_Code
      ,sih.[DeliveryAddress1] Delivery_Address
      ,sih.[DeliveryAddress2] 
      ,sih.[DeliveryAddress3] 
      ,sih.Trading
      ,sih.IsVDS
      ,sih.VDSCertificateDate
      ,sih.GetVDSCertificate
      ,sih.AlReadyPrint
      ,sih.DeliveryChallanNo
      ,sih.IsGatePass
      ,sih.CompInvoiceNo

      ,sih.DeductionAmount
      ,sih.LCBank
      ,sih.LCDate
      ,sih.PINo
      ,sih.PIDate
      ,sih.EXPFormNo
      ,sih.EXPFormDate
      ,sih.IsDeemedExport
      ,sih.VDSAmount
      ,sih.Is6_3TollCompleted
      ,sih.ValueOnly
      ,cast(sih.[InvoiceDateTime] as varchar(100)) Invoice_Date_Time
      ,cast(sih.[DeliveryDate] as varchar(100))   Delivery_Date_Time
	 , sih.SerialNo Reference_No
      ,sih.[Comments]
      ,sih.[SaleType] Sale_Type
      ,sih.[PreviousSalesInvoiceNo] Previous_Invoice_No
	   ,sih.[IsPrint] Is_Print
      ,sih.[TenderId] Tender_Id
      ,cast(sih.[SaleReturnId] as decimal) ReturnId

      ,sih.[Post]
      ,sih.[LCNumber] LC_Number
      ,cc.CurrencyCode Currency_Code
      ,sids.Comments CommentsD
	  ,p.ProductCode Item_Code
	  ,p.ProductName Item_Name
	  , sids.Quantity
	  , sids.NBRPrice NBR_Price
	  ,sids.UOM
	  ,sids.VATRate VAT_Rate
	  ,sids.SD SD_Rate
	  ,sids.NonStock Non_Stock	  
	  ,sids.TradingMarkUp Trading_MarkUp
	  ,sids.Type 
	  ,sids.DiscountAmount Discount_Amount
	  ,sids.PromotionalQuantity Promotional_Quantity 	  	  
	  ,sids.VATName VAT_Name 	  	  
	  ,sids.SubTotal SubTotal 	  	  
	  ,sids.Weight	  	  
	  ,sids.WareHouseRent	  	  
	  ,sids.WareHouseVAT	  	  
	  ,sids.ATVRate	  	  
	  ,sids.ATVablePrice	  	  
	  ,sids.ATVAmount	  	  
	  ,sids.TradeVATRate	  	  
	  ,sids.Trading	  	TradingD  
	  ,sids.TradeVATAmount	  	  
	  ,sids.VDSAmount VDSAmountD	  	  
	  ,sids.DiscountedNBRPrice	  	  
  	  
	  ,sids.CDNVATAmount	  	  
	  ,sids.CDNSDAmount	  	  
	  ,sids.CDNSubtotal	  	  
	  ,sids.CConversionDate	  	  
	  ,sids.BENumber	  	  
	  ,vh.VehicleNo Vehicle_No	  	  

  FROM SalesInvoiceHeaders sih left outer join  SalesInvoiceDetails sids
  on sih.SalesInvoiceNo = sids.SalesInvoiceNo left outer join BranchProfiles bp
  on sih.BranchId = bp.BranchID left outer join Customers c
  on sih.CustomerID = c.CustomerID left outer join CustomerGroups cg
  on c.CustomerGroupID = cg.CustomerGroupID left outer join Vehicles vh
  on sih.[VehicleID] = vh.[VehicleID] left outer join Products p
  on  sids.ItemNo = p.ItemNo left outer join Currencies cc
  on sih.[CurrencyID] = cc.[CurrencyID] 

  where sih.SalesInvoiceNo like '%'+ ? + '%' and isnull(sih.IsVatCompleted, 'N') = 'N'";

                OleDbCommand cmd = new OleDbCommand(sqlText, currConn, transaction);

                cmd.Parameters.Add(new OleDbParameter("@invoiceNo", invoiceNo));

                DataTable table = new DataTable();
                OleDbDataAdapter adapter = new OleDbDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetSaleOtherDbDatax", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        // Reedisha oracle
        public DataTable GetSaleOtherDbData(string invoiceNo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            OleDbConnection currConn = null;
            OleDbTransaction transaction = null;

            OracleConnection oCon = null;
            OracleTransaction t1 = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                // HQDEVDB PDB_RFBLDB 
                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                oCon = new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.10.5)(PORT=64819))(CONNECT_DATA=(SERVICE_NAME=PDB_HQDEVDB)));
uid=RFBL_ERP;pwd=RFBL_ERP");

                if (oCon.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    oCon.Open();
                }
                t1 = oCon.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region old
                sqlText = @"SELECT 
      sih.[SalesInvoiceNo] ID
      ,bp.BranchCode Branch_Code
	  ,cg.CustomerGroupName CustomerGroup
      ,c.CustomerName Customer_Name
	  ,c.CustomerCode Customer_Code
      ,sih.[DeliveryAddress1] Delivery_Address
      ,sih.[DeliveryAddress2] 
      ,sih.[DeliveryAddress3] 
      ,sih.Trading
      ,sih.IsVDS
      ,sih.VDSCertificateDate
      ,sih.GetVDSCertificate
      ,sih.AlReadyPrint
      ,sih.DeliveryChallanNo
      ,sih.IsGatePass
      ,sih.CompInvoiceNo

      ,sih.DeductionAmount
      ,sih.LCBank
      ,sih.LCDate
      ,sih.PINo
      ,sih.PIDate
      ,sih.EXPFormNo
      ,sih.EXPFormDate
      ,sih.IsDeemedExport
      ,sih.VDSAmount
      ,sih.Is6_3TollCompleted
      ,sih.ValueOnly
      ,cast(sih.[InvoiceDateTime] as varchar(100)) Invoice_Date_Time
      ,cast(sih.[DeliveryDate] as varchar(100))   Delivery_Date_Time
	 , sih.SerialNo Reference_No
      ,sih.[Comments]
      ,sih.[SaleType] Sale_Type
      ,sih.[PreviousSalesInvoiceNo] Previous_Invoice_No
	   ,sih.[IsPrint] Is_Print
      ,sih.[TenderId] Tender_Id
      ,cast(sih.[SaleReturnId] as decimal) ReturnId

      ,sih.[Post]
      ,sih.[LCNumber] LC_Number
      ,cc.CurrencyCode Currency_Code
      ,sids.Comments CommentsD
	  ,p.ProductCode Item_Code
	  ,p.ProductName Item_Name
	  , sids.Quantity
	  , sids.NBRPrice NBR_Price
	  ,sids.UOM
	  ,sids.VATRate VAT_Rate
	  ,sids.SD SD_Rate
	  ,sids.NonStock Non_Stock	  
	  ,sids.TradingMarkUp Trading_MarkUp
	  ,sids.Type 
	  ,sids.DiscountAmount Discount_Amount
	  ,sids.PromotionalQuantity Promotional_Quantity 	  	  
	  ,sids.VATName VAT_Name 	  	  
	  ,sids.SubTotal SubTotal 	  	  
	  ,sids.Weight	  	  
	  ,sids.WareHouseRent	  	  
	  ,sids.WareHouseVAT	  	  
	  ,sids.ATVRate	  	  
	  ,sids.ATVablePrice	  	  
	  ,sids.ATVAmount	  	  
	  ,sids.TradeVATRate	  	  
	  ,sids.Trading	  	TradingD  
	  ,sids.TradeVATAmount	  	  
	  ,sids.VDSAmount VDSAmountD	  	  
	  ,sids.DiscountedNBRPrice	  	  
  	  
	  ,sids.CDNVATAmount	  	  
	  ,sids.CDNSDAmount	  	  
	  ,sids.CDNSubtotal	  	  
	  ,sids.CConversionDate	  	  
	  ,sids.BENumber	  	  
	  ,vh.VehicleNo Vehicle_No	  	  

  FROM SalesInvoiceHeaders sih left outer join  SalesInvoiceDetails sids
  on sih.SalesInvoiceNo = sids.SalesInvoiceNo left outer join BranchProfiles bp
  on sih.BranchId = bp.BranchID left outer join Customers c
  on sih.CustomerID = c.CustomerID left outer join CustomerGroups cg
  on c.CustomerGroupID = cg.CustomerGroupID left outer join Vehicles vh
  on sih.[VehicleID] = vh.[VehicleID] left outer join Products p
  on  sids.ItemNo = p.ItemNo left outer join Currencies cc
  on sih.[CurrencyID] = cc.[CurrencyID] 

  where sih.SalesInvoiceNo like '%'+ ? + '%' and isnull(sih.IsVatCompleted, 'N') = 'N'";
                #endregion


                //,side.VAT_Rate side.Vat_Amt (d.carton_Unit*d.crtn_Qnty)+d.PCS_Qnty Quantity side.NET_AMT S_CRTN_QNTY crtn_Qnty DO/01/202001/0553H

                sqlText = @"

select M.DO_ID ID,di.distrib_name Customer_Name, di.distrib_code Customer_Code,di.address1 Delivery_Address, '-' Vehicle_No

,To_Char( m.ENTER_DATE,'dd-mon-rrrr hh12:mm')Invoice_Date_Time

,To_Char( m.ENTER_DATE,'dd-mon-rrrr hh12:mm')Delivery_Date_Time

,M.DO_No  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No

,'N'Is_Print,'0'Tender_Id,'N' POST,'NA'LC_Number,'BDT'Currency_Code

, pd.prod_code Item_Code,pd.prod_Name Item_Name,(d.crtn_Qnty) Quantity

,d.CARTON_UNIT|| '('|| u.UNIT_NAME||')'  UOM,
side.VAT_Rate,(side.inv_Price_Vat*d.carton_Unit) NBR_Price, 1 UOMc, 0 SD_Rate,'N' Non_Stock,0 Trading_MarkUp,'OtherRate' Type, 0 Discount_Amount,0 Promotional_Quantity

,'VAT 4.3' VAT_Name, 0 SubTotal

from delivery_order_detail   d

, DELIVERY_ORDER_MASTER   m

, distributor_information   di

  , product_detail  pd

, sales_inv_detail side
, MSR_UNIT u

where d.do_id=m.Do_id

and m.distrib_id= di.distrib_id

and d.sales_id= side.sales_id

and d.product_id= side.product_id

and d.product_id= pd.product_id

and pd.product_id= side.product_id
and pd.UNIT_CODE= u.UNIT_ID

--cast(d.carton_Unit as varchar2(30)) +'('+ u.UNIT_NAME+')' 

and M.DO_No='" + invoiceNo + "' and MUSHAK_NO = '-' "; //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N' MUSHAK_DATE

                OracleCommand cmd = new OracleCommand(sqlText, oCon, t1);

                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                OracleDataAdapter adapter = new OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (t1 != null)
                {
                    t1.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    else if (clName.ToLower() == "uomqty")
                    {
                        clName = "UOMQty";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    string vatRate = row["VAT_Rate"].ToString().Trim();

                    if (vatRate == "15")
                    {
                        row["Type"] = "VAT";
                    }

                    if (vatRate == "0")
                    {
                        row["Type"] = "NonVAT";
                    }

                    if (vatRate != "15" && vatRate != "0")
                    {
                        row["Type"] = "OtherRate";
                    }


                    if (string.IsNullOrEmpty(row["Type"].ToString()))
                    {
                        row["Type"] = "NonVAT";
                    }

                }

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (t1 != null) { t1.Rollback(); }

                FileLogger.Log("ImportDAL", "GetSaleOtherDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (oCon != null)
                {
                    if (oCon.State == ConnectionState.Open)
                    {
                        oCon.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleKohinoorDbDataX(string invoiceNo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction



                currConn = _dbsqlConnection.GetConnectionLink3();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction


                sqlText = @"SELECT 
      sih.[SalesInvoiceNo] ID
      ,bp.BranchCode Branch_Code
	  ,cg.CustomerGroupName CustomerGroup
      ,c.CustomerName Customer_Name
	  ,c.CustomerCode Customer_Code
      ,sih.[DeliveryAddress1] Delivery_Address
      ,sih.[DeliveryAddress2] 
      ,sih.[DeliveryAddress3] 
      ,sih.Trading
      ,sih.IsVDS
      ,sih.VDSCertificateDate
      ,sih.GetVDSCertificate
      ,sih.AlReadyPrint
      ,sih.DeliveryChallanNo
      ,sih.IsGatePass
      ,sih.CompInvoiceNo

      ,sih.DeductionAmount
      ,sih.LCBank
      ,sih.LCDate
      ,sih.PINo
      ,sih.PIDate
      ,sih.EXPFormNo
      ,sih.EXPFormDate
      ,sih.IsDeemedExport
      ,sih.VDSAmount
      ,sih.Is6_3TollCompleted
      ,sih.ValueOnly
      ,cast(sih.[InvoiceDateTime] as varchar(100)) Invoice_Date_Time
      ,cast(sih.[DeliveryDate] as varchar(100))   Delivery_Date_Time
	 , sih.SerialNo Reference_No
      ,sih.[Comments]
      ,sih.[SaleType] Sale_Type
      ,sih.[PreviousSalesInvoiceNo] Previous_Invoice_No
	   ,sih.[IsPrint] Is_Print
      ,sih.[TenderId] Tender_Id
      ,cast(sih.[SaleReturnId] as decimal) ReturnId

      ,sih.[Post]
      ,sih.[LCNumber] LC_Number
      ,cc.CurrencyCode Currency_Code
      ,sids.Comments CommentsD
	  ,p.ProductCode Item_Code
	  ,p.ProductName Item_Name
	  , sids.Quantity
	  , sids.NBRPrice NBR_Price
	  ,sids.UOM
	  ,sids.VATRate VAT_Rate
	  ,sids.SD SD_Rate
	  ,sids.NonStock Non_Stock	  
	  ,sids.TradingMarkUp Trading_MarkUp
	  ,sids.Type 
	  ,sids.DiscountAmount Discount_Amount
	  ,sids.PromotionalQuantity Promotional_Quantity 	  	  
	  ,sids.VATName VAT_Name 	  	  
	  ,sids.SubTotal SubTotal 	  	  
	  ,sids.Weight	  	  
	  ,sids.WareHouseRent	  	  
	  ,sids.WareHouseVAT	  	  
	  ,sids.ATVRate	  	  
	  ,sids.ATVablePrice	  	  
	  ,sids.ATVAmount	  	  
	  ,sids.TradeVATRate	  	  
	  ,sids.Trading	  	TradingD  
	  ,sids.TradeVATAmount	  	  
	  ,sids.VDSAmount VDSAmountD	  	  
	  ,sids.DiscountedNBRPrice	  	  
  	  
	  ,sids.CDNVATAmount	  	  
	  ,sids.CDNSDAmount	  	  
	  ,sids.CDNSubtotal	  	  
	  ,sids.CConversionDate	  	  
	  ,sids.BENumber	  	  
	  ,vh.VehicleNo Vehicle_No	  	  

  FROM SalesInvoiceHeaders sih left outer join  SalesInvoiceDetails sids
  on sih.SalesInvoiceNo = sids.SalesInvoiceNo left outer join BranchProfiles bp
  on sih.BranchId = bp.BranchID left outer join Customers c
  on sih.CustomerID = c.CustomerID left outer join CustomerGroups cg
  on c.CustomerGroupID = cg.CustomerGroupID left outer join Vehicles vh
  on sih.[VehicleID] = vh.[VehicleID] left outer join Products p
  on  sids.ItemNo = p.ItemNo left outer join Currencies cc
  on sih.[CurrencyID] = cc.[CurrencyID] 

  where sih.SalesInvoiceNo like '%'+ @SalesInvoiceNo + '%' and isnull(sih.IsVatCompleted, 'N') = 'N'";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.AddWithValue("@SalesInvoiceNo", invoiceNo);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetSaleKohinoorDbDataX", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleKohinoorDbData(string invoiceNo, DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //if (DbName == "HeadOffice")
                //{
                //    currConn = _dbsqlConnection.GetKohinoorConnection();

                //}
                //else
                //{
                //    currConn = _dbsqlConnection.GetDepoConnection(DbName);

                //}

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @" SELECT A.TranNo ID, 
 C.Name Customer_Name, C.Code Customer_Code, 
 C.Address Delivery_Address, '-' Vehicle_No, 
 A.TranDate Invoice_Date_Time,
  A.TranDate Delivery_Date_Time, 
  A.TranNo Reference_No, 
  Remarks  Comments,

 'New' Sale_Type, 
 '' Previous_Invoice_No, 
 'N' Is_Print, 
 '0' Tender_Id, 
 'N' Post, 
 'NA' LC_Number, 
 'BDT' Currency_Code, 
 '-' Item_Code, 
 D.Name Item_Name, 
 B.Quantity, 
D.CostPrice NBR_Price,

  'Pcs' UOM, 
	0 VAT_Rate, 0 SD_Rate,
 'N' Non_Stock, 
 0 Trading_MarkUp, 
 '' Type, 
 0 Discount_Amount, 
 0 Promotional_Quantity, 
 'VAT 4.3' VAT_Name,
  (B.Quantity*D.CostPrice) SubTotal
 
  FROM TranMaster A INNER JOIN TranDetails B ON A.TranID=B.TranID 
  INNER JOIN Distributor C ON A.DistributorID=C.DistributorID INNER JOIN Products D ON B.ProductID=D.ProductID

 -- WHERE A.TranNo='DO/01/0060906'

  WHERE A.TranNo=@SalesInvoiceNo "; //07/0007401

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.AddWithValue("@SalesInvoiceNo", invoiceNo);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductName" }, new[] { tableRow["Item_Name"].ToString() }, null, null, null, connVM);

                    if (vms == null || !vms.Any())
                    {
                        List<ProductNameVM> nameVMs = dal.SelectProductName("0", new[] { "Pr.ProductName" }, new[] { tableRow["Item_Name"].ToString() }, null, null, null, connVM);

                        if (nameVMs != null && nameVMs.Any())
                        {
                            vms = dal.SelectAll(nameVMs.FirstOrDefault().ItemNo, null, null, null, null, null, connVM);

                            tableRow["VAT_Rate"] = vms.FirstOrDefault().VATRate;
                            tableRow["SD_Rate"] = vms.FirstOrDefault().SD;

                            if (vms.FirstOrDefault().VATRate == 15)
                            {
                                tableRow["Type"] = "VAT";
                            }
                            else if (vms.FirstOrDefault().VATRate < 0)
                            {
                                tableRow["Type"] = "NonVAT";

                            }
                            else if (vms.FirstOrDefault().VATRate < 15)
                            {
                                tableRow["Type"] = "OtherRate";

                            }

                        }
                    }
                    else
                    {
                        tableRow["VAT_Rate"] = vms.FirstOrDefault().VATRate;
                        tableRow["SD_Rate"] = vms.FirstOrDefault().SD;

                        if (vms.FirstOrDefault().VATRate == 15)
                        {
                            tableRow["Type"] = "VAT";
                        }
                        else if (vms.FirstOrDefault().VATRate < 0)
                        {
                            tableRow["Type"] = "NonVAT";

                        }
                        else if (vms.FirstOrDefault().VATRate < 15)
                        {
                            tableRow["Type"] = "OtherRate";

                        }

                    }

                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetSaleKohinoorDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleDHLAirportDbData(string invoiceNo = "", DataTable conInfo = null, string UserName = "", SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //if (DbName == "HeadOffice")
                //{
                //    currConn = _dbsqlConnection.GetKohinoorConnection();

                //}
                //else
                //{
                //    currConn = _dbsqlConnection.GetDepoConnection(DbName);

                //}

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @"
SELECT 
    ID, 
  CustomerName Customer_Name, 
  CustomerCode Customer_Code, 
CustomerBIN,
 Delivery_Address, 
 Delivery_Address CustomerAddress, 
 VehicleNo Vehicle_No, 
 Invoice_Date_Time,
 Delivery_Date_Time, 
  Reference_No, 
Comments,
'' Previous_Invoice_No, 
'N' Is_Print, 
'0' Tender_Id, 
'Y' Post, 
LC_Number, 
Currency_Code, 
ProductCode Item_Code, 
ProductName Item_Name, 
Quantity, 
NBR_Price,

 UOM, 
 VAT_Rate, 
 SD_Rate,
'N' Non_Stock, 
0 Trading_MarkUp, 
(case   
when VAT_Rate = 0 then 'NonVAT' when VAT_Rate >= 15 then 'VAT' else 'OtherRate' end)[Type], 
 Discount_Amount, 
 Promotional_Quantity, 
'VAT 4.3' VAT_Name,
0 SubTotal,
SaleType Sale_Type,
--Previous_Invoice_No  Previous_Invoice_No ,
(case when Transactiontype = '-' then 'other' else TransactionType end) TransactionType,
'GTW' Branch_Code,
AuthorizedPersonsNameDesignation CreatedBy
FROM SaleInvoices

WHERE (IsProcessed = '-' or IsProcessed = 'N')"; //07/0007401

                if (!string.IsNullOrWhiteSpace(invoiceNo))
                {
                    sqlText += @" and ID=@ID";
                }

                if (!string.IsNullOrWhiteSpace(UserName))
                {
                    sqlText += @" and AuthorizedPersonsNameDesignation=@UserName";
                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                if (!string.IsNullOrWhiteSpace(invoiceNo))
                {
                    cmd.Parameters.AddWithValue("@ID", invoiceNo);

                }
                if (!string.IsNullOrWhiteSpace(UserName))
                {
                    cmd.Parameters.AddWithValue("@UserName", UserName);

                }

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetSaleDHLAirportDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM PostSource_IssueData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                IssueMasterVM issueVM = new IssueMasterVM();

                IssueDAL _IssueDAL = new IssueDAL();
                int count = paramVM.IDs.Count();


                // get concate id from middleware  12706


                //List<string> list = new List<string>();
                DataTable resultDataTable;
                for (int i = 0; i < paramVM.IDs.Count(); i++)
                {


                    resultDataTable = GetIssueACI_ID(paramVM, paramVM.IDs[i].ToString());

                    if (resultDataTable.Rows.Count > 0)
                    {
                        DataColumn col = resultDataTable.Columns["IDStr"];

                        foreach (DataRow row in resultDataTable.Rows)
                        {
                            string singleData = row[col].ToString();  // paramVM.IDs[i]
                            IssueMasterVM vm = _IssueDAL.SelectAllList(0, new[] { "ImportIDExcel" }, new[] { singleData }, null, null, null, connVM).FirstOrDefault();
                            issueVM.IDs.Add(vm.Id);
                        }
                    }

                }
                issueVM.IDs.Add("");


                string[] resultIssue = _IssueDAL.MultiplePost(issueVM.IDs.ToArray(), connVM);
                rVM.Message = resultIssue[1].ToString();


                string TableName = "ACIData.dbo.Issues";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                string sqlText = @"";
                sqlText += @" 
UPDATE " + TableName +
@" SET 
Post = 'Y'
WHERE 1=1
";
                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    sqlText = sqlText + @" AND ID IN('" + IDs + "')";

                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();
                transaction.Commit();
                rVM.Status = rows > 0 ? "Success" : "Fail";

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "PostSource_SaleData", ex.ToString());

                rVM.Message = ex.Message;
                if (transaction != null)
                {
                    transaction.Rollback();
                }
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
            return rVM;
        }

        public DataTable GetIssueACI_ID(IntegrationParam param, string idstr, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "GetId"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();

            #endregion

            #region try

            try
            {
                try
                {

                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction
                    string code = commonDal.settingValue("CompanyCode", "Code", null, null, null);
                    #region sqlText

                    sqlText = @"
  SELECT DISTINCT ID+'~'+FORMAT(Issue_DateTime,'ddyy')+'~'+Reference_No IDStr FROM [dbo].[Issues] WHERE IsProcessed = 'Y' AND CompanyCode='" + code + "' AND ID='" + idstr + "'";



                    SqlCommand getRefCMD = new SqlCommand(sqlText, currConn, transaction);

                    SqlDataAdapter idAdapter = new SqlDataAdapter(getRefCMD);
                    idAdapter.Fill(table);


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }
                return table;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetIssueACI_ID", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        #region Not Use

        //public string[] UpdateDHLTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "SaleInvoices")
        //{
        //    #region variable
        //    string[] retResults = new string[4];
        //    retResults[0] = "Fail";
        //    retResults[1] = "Fail";
        //    retResults[2] = "";
        //    SqlConnection currConn = null;
        //    SqlTransaction transaction = null;
        //    int transResult = 0;
        //    #endregion variable

        //    try
        //    {
        //        #region Open Connection and Transaction

        //        if (currConn == null)
        //        {
        //            currConn = _dbsqlConnection.GetDepoConnection(db);
        //            currConn.Open();
        //            transaction = currConn.BeginTransaction();
        //        }

        //        #endregion

        //        #region Sql Text

        //        var sqlText = @"";


        //        #endregion

        //        #region Sql Command

        //        var len = table.Rows.Count;


        //        sqlText += " update " + tableName + " set IsProcessed = 'Y' where ID in ( ";


        //        for (int i = 0; i < len; i++)
        //        {
        //            sqlText += "'" + table.Rows[i]["ID"] + "',";
        //        }

        //        sqlText = sqlText.TrimEnd(',');

        //        sqlText += ")";

        //        var cmd = new SqlCommand(sqlText, currConn, transaction);


        //        var rows = cmd.ExecuteNonQuery();
        //        #endregion


        //        transaction.Commit();

        //        retResults[0] = rows > 0 ? "success" : "fail";

        //        return retResults;
        //    }
        //    #region Catch and finally

        //    catch (Exception ex)
        //    {
        //        if (transaction != null)
        //        {
        //            transaction.Rollback();
        //        }
        //        throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
        //    }
        //    finally
        //    {
        //        if (currConn.State == ConnectionState.Open)
        //        {
        //            currConn.Close();
        //        }
        //    }

        //    #endregion
        //}

        #endregion

        #region ACI

        #region Sales

        public DataTable GetSaleACIDbData(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region Pharma Select

                string ACISelect = @"

create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
,PreviousInvoiceDateTime varchar(500)
,PreviousNBRPrice decimal(25,9)
,PreviousQuantity decimal(25,9)
,PreviousUOM varchar(500)
,PreviousSubTotal decimal(25,9)
,PreviousVATAmount decimal(25,9)
,PreviousVATRate decimal(25,9)
,PreviousSD decimal(25,9)
,PreviousSDAmount decimal(25,9)
,ReasonOfReturn varchar(500)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
, format(Invoice_Date_Time,'yyyy-MM-dd HH:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,PreviouseInvoiceNo Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,PreviousInvoiceDateTime
,PreviousNBRPrice
,PreviousQuantity
,PreviousUOM
,PreviousSubTotal
,PreviousVATAmount
,PreviousVATRate
,PreviousSD
,PreviousSDAmount
,ReasonOfReturn
FROM SaleInvoices AS Sale


  WHERE 1=1  @condition


  update #temp set VAT_Rate = Products.VATRate, 
SD_Rate = Products.SD,
--NBR_Price = Products.UnitPrice,
UOM = Products.UOM 
  from @db.dbo.Products 
  where Products.ProductCode = #temp.Item_Code 


   @creditUpdateQuery




  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery

  select * from #temp order by InvoiceNo

  drop table #temp";

                #endregion

                #region Plastic select

                string plasticSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,TotalPrice SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

  update #temp set 
	UOM = p.UOM,
	VAT_Rate = pc.VATRate,
	SD_Rate = p.SD
  from @db.dbo.Products p join 
  @db.dbo.ProductCategories pc on p.CategoryID = pc.CategoryID
  where p.ProductCode = #temp.Item_Code



   @creditUpdateQuery

   

  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

@exportUpdateQuery

  select * from #temp order by InvoiceNo

  drop table #temp";



                #endregion

                #region CoreCB select

                string CoreCBSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

update #temp set 
UOM = Products.UOM,
NBR_Price = Products.NBRPrice,
VAT_Rate = Products.VATRate,
SD_Rate = Products.SD
from ACIC2012_Demo_DB.dbo.Products  
where Products.ProductCode = #temp.Item_Code


   @creditUpdateQuery

   update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery


  select * from #temp order by InvoiceNo

  drop table #temp";



                #endregion

                #region Update Text

                sqlText = @"";

                string conditionText = "";
                string updateCreditNote = @"
   update #temp set Sale_Type = 'credit', Quantity =  Quantity * -1
   where Quantity < 0";

                string updateExportVatrate = @"update #temp set VAT_Rate = 0;
                
    update #temp set Currency_Code = '@defaultCurr';
   -- update #temp set NBR_Price = subtotal/quantity;
    update #temp set Type = 'Export'
";
                #endregion

                CommonDAL commonDal = new CommonDAL();

                string code = commonDal.settingValue("CompanyCode", "Code");
                string defaultCurrency = commonDal.settingValue("Sale", "DefualtForeignCurrency");

                #region Query Switch

                if (code == "CEPL")
                {
                    sqlText = plasticSelect;
                }
                else if (code == "CORE CB")
                {
                    sqlText = CoreCBSelect;
                }
                else
                {
                    sqlText = ACISelect;
                }

                #endregion

                #region DB Select

                string dbName = "";
                //if (code == "ACI-1")
                //{
                //    dbName = "ACI2012_Demo_DB";
                //}
                //else if (code == "CEPL")
                //{
                //    dbName = "PPL2012_Demo_DB";
                //}
                //else if (code.ToLower() == "core cb")
                //{
                //    dbName = "ACIC2012_Demo_DB";
                //}
                //else
                //{
                //    dbName = DatabaseInfoVM.DatabaseName;
                //}

                dbName = DatabaseInfoVM.DatabaseName;

                #endregion

                string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                      param.dtConnectionInfo.Rows[0]["BranchId"];

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                #region Param
                if (param.WithIsProcessed)
                {
                    conditionText +=
                        " and IsProcessed = 'Y' and ID IN (select distinct ID from " + dbName +
                        ".dbo.SalesInvoiceHeaderMasterTemp) and Branch_Code in (";

                    //+
                    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                }
                else
                {
                    conditionText += " and IsProcessed = 'N' and Branch_Code in (";

                    //+
                    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                }

                foreach (DataRow dataRow in branchMap.Rows)
                {
                    conditionText += "'" + dataRow["IntegrationCode"] + "',";
                }

                conditionText = conditionText.TrimEnd(',') + ")";

                if (param.TransactionType == "Other")
                {
                    conditionText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and Quantity > 0 ";
                }
                else if (param.TransactionType == "Export")
                {
                    conditionText += " and TransactionType = 'Export'  and Quantity > 0 ";

                }
                else if (param.TransactionType.ToLower() == "credit")
                {
                    conditionText += " and Quantity < 0 or TransactionType = 'credit'";

                }
                else
                {
                    conditionText += " and TransactionType = '" + param.TransactionType + "' ";
                }


                if (param.TransactionType.ToLower() == "credit")
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", updateCreditNote);

                }
                else
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", "");
                }


                if (param.TransactionType.ToLower() == "export")
                {
                    updateExportVatrate = updateExportVatrate.Replace("@defaultCurr", defaultCurrency);
                    sqlText = sqlText.Replace("@exportUpdateQuery", updateExportVatrate);

                }
                else
                {
                    sqlText = sqlText.Replace("@exportUpdateQuery", "");
                }

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    conditionText += " and Sale.ID=@SalesInvoiceNo";
                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time <= @toDate";
                }

                conditionText += "  and CompanyCode = @CompanyCode";

                sqlText = sqlText.Replace("@condition", conditionText);
                sqlText = sqlText.Replace("@db", dbName);

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);

                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                }

                cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetSaleACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleACIDbData_Check(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region Pharma Select

                string ACISelect = @"

create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
,PreviousInvoiceDateTime varchar(500)
,PreviousNBRPrice decimal(25,9)
,PreviousQuantity decimal(25,9)
,PreviousUOM varchar(500)
,PreviousSubTotal decimal(25,9)
,PreviousVATAmount decimal(25,9)
,PreviousVATRate decimal(25,9)
,PreviousSD decimal(25,9)
,PreviousSDAmount decimal(25,9)
,ReasonOfReturn varchar(500)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
, format(Invoice_Date_Time,'yyyy-MM-dd HH:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,PreviouseInvoiceNo Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,PreviousInvoiceDateTime
,PreviousNBRPrice
,PreviousQuantity
,PreviousUOM
,PreviousSubTotal
,PreviousVATAmount
,PreviousVATRate
,PreviousSD
,PreviousSDAmount
,ReasonOfReturn
FROM SaleInvoices AS Sale


  WHERE 1=1  @condition


  update #temp set VAT_Rate = Products.VATRate, 
SD_Rate = Products.SD,
--NBR_Price = Products.UnitPrice,
UOM = Products.UOM 
  from @db.dbo.Products 
  where Products.ProductCode = #temp.Item_Code 


   @creditUpdateQuery




  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery

  select * from #temp order by InvoiceNo

  drop table #temp";

                #endregion

                #region Plastic select

                string plasticSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,TotalPrice SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

  update #temp set 
	UOM = p.UOM,
	VAT_Rate = pc.VATRate,
	SD_Rate = p.SD
  from @db.dbo.Products p join 
  @db.dbo.ProductCategories pc on p.CategoryID = pc.CategoryID
  where p.ProductCode = #temp.Item_Code



   @creditUpdateQuery

   

  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

@exportUpdateQuery

  select * from #temp order by InvoiceNo

  drop table #temp";



                #endregion

                #region CoreCB select

                string CoreCBSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

update #temp set 
UOM = Products.UOM,
NBR_Price = Products.NBRPrice,
VAT_Rate = Products.VATRate,
SD_Rate = Products.SD
from ACIC2012_Demo_DB.dbo.Products  
where Products.ProductCode = #temp.Item_Code


   @creditUpdateQuery

   update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery


  select * from #temp order by InvoiceNo

  drop table #temp";



                #endregion

                sqlText = @"";

                string conditionText = "";
                string updateCreditNote = @"
   update #temp set Sale_Type = 'credit', Quantity =  Quantity * -1
   where Quantity < 0";

                string updateExportVatrate = @"update #temp set VAT_Rate = 0;
                
    update #temp set Currency_Code = '@defaultCurr';
   -- update #temp set NBR_Price = subtotal/quantity;
    update #temp set Type = 'Export'
";

                CommonDAL commonDal = new CommonDAL();

                string code = commonDal.settingValue("CompanyCode", "Code");
                string defaultCurrency = commonDal.settingValue("Sale", "DefualtForeignCurrency");

                #region Query Switch

                if (code == "CEPL")
                {
                    sqlText = plasticSelect;
                }
                else if (code == "CORE CB")
                {
                    sqlText = CoreCBSelect;
                }
                else
                {
                    sqlText = ACISelect;
                }

                #endregion

                #region DB Select

                string dbName = "";


                dbName = DatabaseInfoVM.DatabaseName;

                #endregion



                if (param.TransactionType.ToLower() == "credit")
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", updateCreditNote);

                }
                else
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", "");
                }


                if (param.TransactionType.ToLower() == "export")
                {
                    updateExportVatrate = updateExportVatrate.Replace("@defaultCurr", defaultCurrency);
                    sqlText = sqlText.Replace("@exportUpdateQuery", updateExportVatrate);

                }
                else
                {
                    sqlText = sqlText.Replace("@exportUpdateQuery", "");
                }

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    conditionText += " and Sale.ID=@SalesInvoiceNo";
                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time <= @toDate";
                }

                conditionText += "  and CompanyCode = @CompanyCode";

                sqlText = sqlText.Replace("@condition", conditionText);
                sqlText = sqlText.Replace("@db", dbName);

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);

                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                }

                cmd.Parameters.AddWithValue("@CompanyCode", code);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetSaleACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateACISales(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, IntegrationParam paramVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();

            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                List<string> columnNames = new List<string>();

                //foreach (DataColumn column in table.Columns)
                //{
                //    if (column.ColumnName == "ID")
                //        continue;

                //    columnNames.Add(column.ColumnName);
                //}

                //foreach (string name in columnNames)
                //{
                //    table.Columns.Remove(name);
                //}


                SaleDAL saleDal = new SaleDAL();

                ResultVM result = saleDal.BulkInsertMasterTemp(table, currConn, transaction, connVM);

                string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);


                #endregion

                #region Sql Command

                int len = table.Rows.Count;

                //sqlText += " update " + tableName + " set IsProcessed = 'Y' where ID in ( ";

                sqlText =
                   @"UPDATE ACIData.dbo.SaleInvoices SET 
  IsProcessed = 'Y', Post =sih.Post 
, InvoiceNo=sih.SalesInvoiceNo   
FROM ACIData.dbo.SaleInvoices  sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1 ";

                sqlText += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";

                #region ACI CB HYGINE

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "AT")
                {
                    sqlText += @" UPDATE ACIData.dbo.TransferIssues SET 
  IsProcessed = 'Y', Post =sih.Post 
, InvoiceNo=sih.SalesInvoiceNo   
FROM ACIData.dbo.TransferIssues  sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1";
                    sqlText += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";

                }

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();

                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "UpdateACISales", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateACISalesDuplicateSave(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                List<string> columnNames = new List<string>();

                //foreach (DataColumn column in table.Columns)
                //{
                //    if (column.ColumnName == "ID")
                //        continue;

                //    columnNames.Add(column.ColumnName);
                //}

                //foreach (string name in columnNames)
                //{
                //    table.Columns.Remove(name);
                //}


                SaleDAL saleDal = new SaleDAL();

                ResultVM result = saleDal.BulkInsertMasterTemp(table, currConn, transaction, connVM);


                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                //sqlText += " update " + tableName + " set IsProcessed = 'Y' where ID in ( ";

                sqlText =
                   @"UPDATE ACIData.dbo.SaleInvoices SET 
  IsProcessed = 'Y', Post ='N',IsPrint='N'
, InvoiceNo= Isnull(sSal.InvoiceNo,'') + ',' + sih.SalesInvoiceNo
FROM ACIData.dbo.SaleInvoices  sSal
INNER JOIN SalesTempData sih on sSal.ID=sih.Reference_No 
WHERE 1=1 ";

                sqlText += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";

                sqlText += @" Update  ACIData.dbo.SaleInvoices  set InvoiceNo  = SUBSTRING(InvoiceNo, 2,len(InvoiceNo))
                where ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp) 
                and InvoiceNo like ',%'";
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "UpdateACISales", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateACIMasterID(IntegrationParam paramVM, string tableName = "SaleInvoices", SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);

                #region Sql Text

                string sqlText = @"";
                string Vehicle_No = null;
                string Vehicle_Type = null;

                if (!string.IsNullOrWhiteSpace(paramVM.VehicleNo))
                {
                    Vehicle_No = paramVM.VehicleNo;
                }
                if (!string.IsNullOrWhiteSpace(paramVM.VehicleType))
                {
                    Vehicle_Type = paramVM.VehicleType;
                }

                #endregion

                #region Sql Command

                int len = paramVM.IDs.Count;
                string ID = string.Join(",", paramVM.IDs);

                sqlText = sqlText + @" Update SaleInvoices Set PreID=ID, PreCustomerCode=CustomerCode " + "where ID in ( ";

                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + paramVM.IDs[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                sqlText += " update " + tableName + " set ID =" + "'" + ID + "'," + "CustomerCode =" + "'" + paramVM.CustomerCode +
                    "'" + "," + "Invoice_Date_Time =" + "'" + paramVM.InvoiceDateTime +
                    "'" + "," + "Delivery_Date_Time =" + "'" + paramVM.InvoiceDateTime +
                    "'" + "," + "VehicleNo =" + "'" + Vehicle_No +
                    "'" + "," + "VehicleType =" + "'" + Vehicle_Type + "'" + " where ID in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + paramVM.IDs[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                #region ACI CB HYGINE

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "AT")
                {
                    sqlText = sqlText + @" Update TransferIssues Set PreID=ID, PreCustomerCode=TransferToBranchCode " + "where ID in ( ";

                    for (int i = 0; i < len; i++)
                    {
                        sqlText += "'" + paramVM.IDs[i] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',');

                    sqlText += ")";

                    sqlText += " update TransferIssues set ID =" + "'" + ID + "'," + "TransferToBranchCode =" + "'" + paramVM.CustomerCode +
                        "'" + "," + "TransactionDateTime =" + "'" + paramVM.InvoiceDateTime +
                        "'" + "," + "VehicleNo =" + "'" + Vehicle_No +
                        "'" + "," + "VehicleType =" + "'" + Vehicle_Type + "'" + " where ID in ( ";

                    for (int i = 0; i < len; i++)
                    {
                        sqlText += "'" + paramVM.IDs[i] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',');

                    sqlText += ")";

                }

                #endregion


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";
                retResults[2] = ID;
                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateACIMasterID", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdatePreviousIds(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion


                #region Sql Command

                string sqlText = @"update SaleInvoices set PreID=ID 
where ID in ('" + string.Join("','", paramVM.IDs) + "')";


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";
                //retResults[2] = ID;

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "UpdateACIMasterID", ex.ToString());
                throw ex;

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] ReUpdateACIMaster(IntegrationParam paramVM, string tableName = "SaleInvoices", SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);

                #region Sql Text

                string sqlText = @"";

                #endregion

                #region Sql Command

                int len = paramVM.IDs.Count;
                string ID = string.Join(",", paramVM.IDs);

                sqlText = sqlText + @"Update SaleInvoices Set ID=PreID, CustomerCode=PreCustomerCode where ID=" + "'" + ID + "'";

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "AT")
                {
                    sqlText = sqlText + @" Update TransferIssues Set ID=PreID, TransferToBranchCode=PreCustomerCode where ID=" + "'" + ID + "'";
                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                int rows = cmd.ExecuteNonQuery();

                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";
                retResults[2] = ID;
                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateACIMasterID", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] PostACISaleData(DataTable master, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion


                #region Bulk Insert to Temp

                string deleteFromMasterTemp = "delete from SalesInvoiceHeaderMasterTemp";

                SqlCommand cmd = new SqlCommand(deleteFromMasterTemp, currConn, transaction);

                cmd.ExecuteNonQuery();
                string[] resultBulkInsert = commonDal.BulkInsert("SalesInvoiceHeaderMasterTemp", master, currConn, transaction);

                #endregion

                #region PostData

                string postData = @" UPDATE SalesInvoiceHeaders SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.InvoiceNo=sih.SalesInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )


UPDATE SalesInvoiceDetails SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN SalesInvoiceDetails sih on sSal.InvoiceNo=sih.SalesInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )


UPDATE PurchaseInvoiceHeaders SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN PurchaseInvoiceHeaders pih on sSal.InvoiceNo=pih.PurchaseInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )

UPDATE PurchaseInvoiceDetails SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN PurchaseInvoiceDetails pid on sSal.InvoiceNo=pid.PurchaseInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )


UPDATE ReceiveHeaders SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN ReceiveHeaders pih on sSal.InvoiceNo=pih.ReceiveNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )

UPDATE ReceiveHeaders SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN ReceiveHeaders pid on sSal.InvoiceNo=pid.ReceiveNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )



UPDATE IssueDetails SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN IssueDetails pih on sSal.InvoiceNo=pih.IssueNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )

UPDATE IssueDetails SET 
  Post = 'Y'  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN IssueDetails pid on sSal.InvoiceNo=pid.IssueNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )



UPDATE ACIData.dbo.SaleInvoices SET 
  Post = sih.Post  
FROM ACIData.dbo.SaleInvoices sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.InvoiceNo=sih.SalesInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp)";

                cmd.CommandText = postData;
                cmd.ExecuteNonQuery();


                #endregion

                transaction.Commit();

                retResults[0] = "success";
                retResults[1] = "Data Posted";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("ImportDAL", "PostACISaleData", ex.ToString());

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public DataTable GetSource_SaleData_Master_ACI(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtSalesMaster = new DataTable();

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                string TableName = "ACIData.dbo.SaleInvoices";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                sqlText = @"

create table #temp(
Selected bit,
InvoiceNo varchar(200),
ID varchar(6000),
Post  varchar(1),
IsPrint varchar(1),
ReferenceNo varchar(6000),
BranchCode varchar(200),
CustomerName varchar(200),
CustomerCode varchar(200),
InvoiceDateTime varchar(200),
DeliveryAddress varchar(500),
VehicleNo varchar(200),
VehicleType varchar(200),
TotalValue decimal(25,9),
TotalQuantity decimal(25,9),
TotalVATAmount decimal(25,9),
Processed  varchar(1),
PreId  varchar(100)
)

insert into #temp
SELECT
0							                                                        Selected
,InvoiceNo																			InvoiceNo
,ID																			        ID
,Post                                                                               Post
,IsPrint                                                                            IsPrint
,ID                                                                                 ReferenceNo
,Branch_Code																	    BranchCode
,CustomerName																	    CustomerName
,CustomerCode																	    CustomerCode
,cast(Invoice_Date_Time as varchar(20)) 										    InvoiceDateTime
,Delivery_Address																    DeliveryAddress
, VehicleNo 																		VehicleNo
, VehicleType 																		VehicleType
,SUM(TotalPrice)																	TotalValue
,SUM(Quantity)																		TotalQuantity
,0													                               TotalVATAmount
, IsProcessed																		Processed
, PreId																		PreId

FROM " + TableName +
@"
WHERE 1=1
------AND TransactionType != 'Credit'

----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                #region Filtering

                if (paramVM.TransactionType == "Other")
                {
                    if (code.ToUpper() == "MOTORSSERVICE")
                    {
                        sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue' or TransactionType is null) and Quantity > 0 ";
                    }
                    else
                    {
                        sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and Quantity > 0 ";
                    }
                }
                else if (paramVM.TransactionType == "Export")
                {
                    sqlText += " and TransactionType = 'Export'  and Quantity > 0 ";

                }
                else if (paramVM.TransactionType.ToLower() == "credit")
                {
                    sqlText += " and Quantity < 0 ";
                }
                else
                {
                    sqlText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                }

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText = sqlText + @" AND (ID = @SalesInvoiceNo OR PreID = @SalesInvoiceNo)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText = sqlText + @" AND Invoice_Date_Time >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText = sqlText + @" AND Invoice_Date_Time < dateadd(d,1,@toDate)";
                }
                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @" AND Branch_Code in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "AT")
                {
                    code = "Core CB";
                }

                if (code.ToUpper() == "MOTORCENTRAL".ToUpper())
                {
                    sqlText += @" and companyCode in ('Tractor Central','Foton Central','Foton Parts Central','Agri Machineries Central'
,'MotorCentral','Motors Spare Central')";

                }
                if (code.ToUpper() == "ACI Toiletries".ToUpper())
                {
                    sqlText += @" and companyCode in ('ACI CB Hygine','ACI Toiletries')";
                }
                else
                {
                    sqlText += " and companyCode = '" + code + "'";
                }

                if (code == "ACI CB HYGINE")
                {
                    sqlText += " and CustomerCode!='AT'";
                }

                ////if (code == "AH MODONPUR CENTRAL WH")
                ////{

                ////    sqlText += @" and CustomerCode not in('GA','GE','GK','GB','T','H','GJ','C','GD','GG','AE','GH','GF','GC','GI','D','GM','AG','GP','GT','GN','GL','GQ')";

                ////}

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
InvoiceNo
,ID
,Branch_Code
,CustomerName
,CustomerCode
,Invoice_Date_Time
,Delivery_Address
,VehicleNo
,VehicleType
,IsProcessed
,Post
,IsPrint
,ID
,PreId

";

                #endregion

                sqlText += " ORDER BY ID,Invoice_Date_Time";

                sqlText += @" 
update #temp set CustomerName = Customers.CustomerName 
from Customers where Customers.CustomerCode = #temp.CustomerCode

select * from #temp ORDER BY ID,InvoiceDateTime
drop table #temp";

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.CommandTimeout = 500;
                #region Add Parameter Values

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                }


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtSalesMaster);

                #endregion

                #region Selected Data

                if (dtSalesMaster != null && dtSalesMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtSalesMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtSalesMaster.Select("ID  IN ('" + IDs + "')");

                    if (rows.Count() == 0)
                    {
                        rows = dtSalesMaster.Select("PreId  IN ('" + IDs + "')");
                    }

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtSalesMaster = new DataTable();
                        dtSalesMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_SaleData_Master_ACI", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtSalesMaster;

        }

        public DataTable GetSource_SaleData_Master_ACI_CBHygine(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null, SqlConnection vConnection = null, SqlTransaction vTransaction = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtSalesMaster = new DataTable();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();

            #endregion

            #region try

            try
            {

                DataTable dt = new DataTable();

                dt = GetSource_SaleData_Master_ACI(paramVM, connVM);

                #region Open Connection and Transaction

                if (vConnection != null)
                {
                    currConn = vConnection;
                }

                if (vTransaction != null)
                {
                    transaction = vTransaction;
                }

                if (vConnection == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();

                }

                if (vTransaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }
                #endregion

                #region SQLText

                string TableName = "ACIData.dbo.TransferIssues";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                #region tempTable

                string tempTable = @"
create table #temp(
Selected bit,
InvoiceNo varchar(200),
ID varchar(200),
Post  varchar(1),
IsPrint varchar(1),
ReferenceNo varchar(200),
BranchCode varchar(200),
CustomerName varchar(200),
CustomerCode varchar(200),
InvoiceDateTime varchar(200),
DeliveryAddress varchar(500),
VehicleNo varchar(200),
VehicleType varchar(200),
TotalValue decimal(25,9),
TotalQuantity decimal(25,9),
TotalVATAmount decimal(25,9),
Processed  varchar(1),
PreId  varchar(100)
)

";

                #endregion

                #region sqlText

                sqlText = @"

insert into #temp
SELECT
0							                                                        Selected
,InvoiceNo																			InvoiceNo
,ID																			        ID
,Post                                                                               Post
,IsPrint                                                                            IsPrint
,ID                                                                                 ReferenceNo
,BranchCode											    						    BranchCode
,''						            											    CustomerName
,TransferToBranchCode															    CustomerCode
,cast(TransactionDateTime as varchar(20)) 										    InvoiceDateTime
,''														                		    DeliveryAddress
, VehicleNo 																		VehicleNo
, VehicleType 																		VehicleType
,SUM(CostPrice)												    					TotalValue
,SUM(Quantity)																		TotalQuantity
,0													                                TotalVATAmount
, IsProcessed																		Processed
, ID													        					PreId

FROM " + TableName +
@"
WHERE 1=1

----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                #endregion

                #region CustomersUpdate

                string CustomersUpdate = @" 
update #temp set CustomerName = Customers.CustomerName 
from Customers where Customers.CustomerCode = #temp.CustomerCode

select * from #temp ORDER BY ID,InvoiceDateTime
drop table #temp";

                #endregion

                #region getBranchMap

                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                #endregion

                #region Filtering

                #region Comments

                ////if (paramVM.TransactionType == "Other")
                ////{
                ////    if (code.ToUpper() == "MOTORSSERVICE")
                ////    {
                ////        sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue' or TransactionType is null) and Quantity > 0 ";
                ////    }
                ////    else
                ////    {
                ////        sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and Quantity > 0 ";
                ////    }
                ////}
                ////else if (paramVM.TransactionType == "Export")
                ////{

                ////}
                ////else if (paramVM.TransactionType.ToLower() == "credit")
                ////{
                ////    sqlText += " and Quantity < 0 ";

                ////}
                ////else
                ////{
                ////    sqlText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                ////}

                #endregion

                sqlText += " and Quantity > 0 ";


                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                }


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText = sqlText + @" AND (ID = @SalesInvoiceNo OR PreID = @SalesInvoiceNo)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText = sqlText + @" AND TransactionDateTime >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText = sqlText + @" AND TransactionDateTime < dateadd(d,1,@toDate)";
                }
                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @" AND BranchCode in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "AT")
                {
                    code = "Core CB";
                }

                sqlText += " and companyCode = '" + code + "'";

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
InvoiceNo
,ID
,BranchCode
,TransferToBranchCode
,TransactionDateTime
,VehicleNo
,VehicleType
,IsProcessed
,Post
,IsPrint

";

                #endregion

                sqlText += " ORDER BY ID,TransactionDateTime";

                #endregion

                #region SQLExecution

                #region tempTable

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                #endregion

                #region sqlText

                cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 500;

                #region Add Parameter Values

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                }


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                cmd.ExecuteNonQuery();

                #endregion

                #region BulkInsert

                if (dt != null && dt.Rows.Count > 0)
                {
                    result = commonDal.BulkInsert("#temp", dt, currConn, transaction);
                }

                #endregion

                #region Customers Update and get all data

                cmd = new SqlCommand(CustomersUpdate, currConn, transaction);
                cmd.CommandTimeout = 500;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtSalesMaster);

                #endregion

                #endregion

                #region Selected Data

                if (dtSalesMaster != null && dtSalesMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtSalesMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtSalesMaster.Select("ID  IN ('" + IDs + "')");

                    if (rows.Count() == 0)
                    {
                        rows = dtSalesMaster.Select("PreId  IN ('" + IDs + "')");
                    }

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtSalesMaster = new DataTable();
                        dtSalesMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_SaleData_Master_ACI_CBHygine", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null && vConnection == null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtSalesMaster;

        }

        public DataTable GetACISaleData_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                string AutoPost = "Y";
                CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();

                AutoPost = commonDal.settingValue("Integration", "FromDBSaleAutoPost", paramVM.SysDbInfoVmTemp);

                string TableName = "ACIData.dbo.SaleInvoices";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(paramVM.SysDbInfoVmTemp);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);

                #region SQLText

                sqlText = @"
create table #temp(
ID varchar(6000)
,Post                   varchar(100)
--,Branch_Code	varchar(100)
,Customer_Name varchar(100)
,Customer_Code	varchar(100)
,Delivery_Address	varchar(2000)
,Vehicle_No	varchar(100)
,VehicleType	varchar(100)
,Invoice_Date_Time	datetime
,Delivery_Date_Time datetime
,Reference_No  varchar(6000)
,Comments varchar(100)
,Sale_Type varchar(100)
,Previous_Invoice_No varchar(100)
,Is_Print varchar(100)
,Tender_Id varchar(100)
,LC_Number varchar(100)
,Currency_Code varchar(100)
,Item_Code varchar(100)
,Item_Name varchar(100)
,UOM varchar(100)
,Quantity decimal(25,9)
,NBR_Price decimal(25,9)
,VAT_Rate decimal(25,9)
,SD_Rate  decimal(25,9)
,TotalValue decimal(25,9)
,SubTotal decimal(25,9)
,VAT_Amount decimal(25,9)
,Non_Stock varchar(100)
,Trading_MarkUp decimal(25,9)
,Type varchar(100)

,VAT_Name varchar(100)
,TransactionType varchar(100)
,PreviousInvoiceDateTime datetime
,PreviousNBRPrice decimal(25,9)
,PreviousQuantity decimal(25,9)
,PreviousUOM varchar(100)
,PreviousSubTotal decimal(25,9)
,PreviousSD decimal(25,9)
,PreviousSDAmount decimal(25,9)
,PreviousVATRate decimal(25,9)
,PreviousVATAmount decimal(25,9)

,ReasonOfReturn varchar(100)
,PreID varchar(100)
)

insert into #temp
SELECT
ID																			        ID
,Post                                                                               Post
--,Branch_Code																	    Branch_Code
,LTRIM(RTRIM(CustomerName))															Customer_Name
,LTRIM(RTRIM(CustomerCode))															Customer_Code
,Delivery_Address																    Delivery_Address
,VehicleNo 																			Vehicle_No
,VehicleType 																		VehicleType
,Invoice_Date_Time 										                            Invoice_Date_Time
,Invoice_Date_Time										                            Delivery_Date_Time
,ID  																                Reference_No  
,Comments																		    Comments
,'New'																				Sale_Type
,'' 																				Previous_Invoice_No
,'N'																				Is_Print
,'0'																				Tender_Id
,''																		            LC_Number
,'BDT'																	            Currency_Code
,LTRIM(RTRIM(ProductCode))															Item_Code
,LTRIM(RTRIM(ProductName))															Item_Name
,UOM																			    UOM
,(Quantity+Promotional_Quantity)													Quantity
,(TotalPrice/(Quantity+Promotional_Quantity))										NBR_Price
,isnull(VAT_Rate,0)																	VAT_Rate
,isnull(SD_Rate,0)																	SD_Rate
--,(TotalPrice-Discount_Amount)														TotalValue
,isnull(TotalPrice,0)														        TotalValue
,0																		            SubTotal
,0 									                                                VAT_Amount
,'N'																				Non_Stock
,0																					Trading_MarkUp
,''															                        Type

,'VAT 4.3'																			VAT_Name
, case when TransactionType = 'Local' then 'Other' else TransactionType end         TransactionType
,PreviousInvoiceDateTime													        PreviousInvoiceDateTime
,PreviousNBRPrice															        PreviousNBRPrice
,PreviousQuantity															        PreviousQuantity
,PreviousUOM																        PreviousUOM
,(PreviousQuantity*PreviousNBRPrice)										        PreviousSubTotal
,PreviousSD																	        PreviousSD
,PreviousSDAmount															        PreviousSDAmount
,PreviousVATRate															        PreviousVATRate
,PreviousVATAmount					        PreviousVATAmount
,ReasonOfReturn	
,PreID	

FROM " + TableName +
@" where 1=1 @conditionText


update #temp set VAT_Rate = Products.VATRate, 
SD_Rate = Products.SD,
--NBR_Price = Products.NBRPrice,
UOM = Products.UOM,
Item_Name = Products.ProductName
from Products 
where Products.ProductCode = #temp.Item_Code 

--update #temp set Customer_Name = Customers.CustomerName
--from Customers 
--where Customers.CustomerCode = #temp.Customer_Code 

update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NonVAT' else 'OtherRate' end

@NBRPreiceUpdateQuery

@TotalPriceUpdateQuery

@exportUpdateQuery

@creditUpdateQuery

@TradingVATRateUpdateQuery

@typeUpdateCoreCB

@splitInvoiceByType

@CustomerUpdateQuery

update #temp set TotalValue=0

select * from #temp

drop table #temp

";


                #region Update Text

                string updateCreditNote = @"
   update #temp set Sale_Type = 'credit', Quantity =  Quantity * -1
   where Quantity < 0";

                string updateNBRPreice = @"
   update #temp set NBR_Price = Products.NBRPrice from Products 
where Products.ProductCode = #temp.Item_Code 
";

                if (code.ToUpper() == "MOTORCENTRAL".ToUpper())
                {
                    updateNBRPreice = "";

                    updateNBRPreice = @"

--update #temp set NBR_Price = (TotalValue -((TotalValue*VAT_Rate)/(100+VAT_Rate)))/Quantity
update #temp set NBR_Price = (TotalValue/Quantity)

--update #temp set NBR_Price = Products.NBRPrice from Products 
--where Products.ProductCode = #temp.Item_Code and Products.NBRPrice!=0

";
                }


                string updateTotalPrice = @"
 update #temp set NBR_Price = TotalValue/Quantity 
";

                string updateExportVatrate = @"
update #temp set VAT_Rate = 0;             
    update #temp set Currency_Code = '@defaultCurr';
   -- update #temp set NBR_Price = subtotal/quantity;
    update #temp set Type = 'Export'
";
                string typeUpdateCoreCB =
                    "update #temp set Type = case when Type = 'OtherRate' then 'retail' else Type end";

                string splitInvoiceByType =
                    "update #temp set ID = ID + '-'+Type" +
                    "" +
                    " update ACIData.dbo.SaleInvoices set ID = #temp.ID from #temp " +
                    "where #temp.PreID = ACIData.dbo.SaleInvoices.PreId and #temp.Item_Code = ACIData.dbo.SaleInvoices.ProductCode";

                string updateCustomer = @"
 update #temp set Customer_Name ='-' where 1=1 and (Customer_Name='' or Customer_Name=' ' or Customer_Name is null)
 update #temp set Post ='N' where 1=1 and (Post='' or Post=' ' or Post is null)

";

                string updateTradingVATRate = @"
 update #temp set VAT_Rate = p.TradingSaleVATRate, 
SD_Rate = p.TradingSaleSD
from Products p 
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where p.ProductCode = #temp.Item_Code and pc.IsRaw='Trading'

update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NonVAT' else 'OtherRate' end

";

                #endregion


                #region Filtering

                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);


                string defaultCurrency = commonDal.settingValue("Sale", "DefualtForeignCurrency", paramVM.SysDbInfoVmTemp);
                string conditionText = "";

                if (paramVM.TransactionType == "Other")
                {
                    if (code.ToUpper() == "MOTORSSERVICE")
                    {
                        conditionText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue' or TransactionType is null) and (Quantity+Promotional_Quantity) > 0 ";
                    }
                    else
                    {
                        conditionText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and (Quantity+Promotional_Quantity) > 0 ";
                    }
                }
                else if (paramVM.TransactionType == "Export")
                {
                    conditionText += " and TransactionType = 'Export'  and (Quantity+Promotional_Quantity) > 0 ";

                }
                else if (paramVM.TransactionType.ToLower() == "credit")
                {
                    conditionText += " and Quantity < 0 ";

                }
                else
                {
                    conditionText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                }

                #region Credit Note

                if (paramVM.TransactionType.ToLower() == "credit")
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", updateCreditNote);

                }
                else
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", "");
                }

                #endregion

                #region Export

                if (paramVM.TransactionType.ToLower() == "export")
                {
                    updateExportVatrate = updateExportVatrate.Replace("@defaultCurr", defaultCurrency);
                    sqlText = sqlText.Replace("@exportUpdateQuery", updateExportVatrate);

                }
                else
                {
                    sqlText = sqlText.Replace("@exportUpdateQuery", "");
                }

                #endregion

                #region Type Update

                DataTable company = companyprofileDal.SearchCompanyProfile(paramVM.SysDbInfoVmTemp);

                if (code.ToLower() == "core cb" || code.ToUpper() == "ACI CB TRADING" || code.ToUpper() == "MOTORCENTRAL"
                    || code.ToUpper() == "AH MODONPUR CENTRAL WH".ToUpper())
                {
                    sqlText = sqlText.Replace("@typeUpdateCoreCB", typeUpdateCoreCB);
                }
                else if (company.Rows[0]["CompanyType"].ToString() == "01")
                {
                    sqlText = sqlText.Replace("@typeUpdateCoreCB", typeUpdateCoreCB);
                }
                else
                {
                    sqlText = sqlText.Replace("@typeUpdateCoreCB", "");
                }

                #endregion

                #region Split Invoice By Type

                if (paramVM.IsInstitution && code == "ACI FOODS LIMITED")
                {
                    sqlText = sqlText.Replace("@splitInvoiceByType", splitInvoiceByType);
                }
                else
                {
                    sqlText = sqlText.Replace("@splitInvoiceByType", "");
                }

                #endregion

                #region NBRPrice Update

                if ((code.ToUpper() == "ACI FOODS LIMITED" && paramVM.TransactionType.ToLower() == "export")
                    || code.ToUpper() == "ACI EDIBLE OILS LIMITED"
                    || code.ToUpper() == "ACI PURE FLOUR LIMITED"
                    || code.ToLower() == "aci foods limited (rice unit)"
                    || code.ToLower() == "aci salt limited"
                    || paramVM.IsInstitution
                    ) //
                {
                    sqlText = sqlText.Replace("@NBRPreiceUpdateQuery", "");
                }
                else
                {
                    sqlText = sqlText.Replace("@NBRPreiceUpdateQuery", updateNBRPreice);
                }

                if (code.ToUpper() == "ACI PURE FLOUR LIMITED" || (code.ToUpper() == "ACI FOODS LIMITED" && (paramVM.BranchCode == "P005" || paramVM.BranchCode == "P011"))
                    || code.ToUpper() == "ACI-1")
                {
                    sqlText = sqlText.Replace("@TotalPriceUpdateQuery", updateTotalPrice);
                }
                else
                {
                    sqlText = sqlText.Replace("@TotalPriceUpdateQuery", "");
                }

                if (code.ToUpper() == "MOTORSSERVICE")
                {
                    sqlText = sqlText.Replace("@CustomerUpdateQuery", updateCustomer);
                }
                else
                {
                    sqlText = sqlText.Replace("@CustomerUpdateQuery", "");
                }

                if (code.ToUpper() == "ACI CB TRADING")
                {
                    sqlText = sqlText.Replace("@TradingVATRateUpdateQuery", updateTradingVATRate);
                }
                else
                {
                    sqlText = sqlText.Replace("@TradingVATRateUpdateQuery", "");
                }


                #endregion

                #region Condition Text

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    conditionText = conditionText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    conditionText = conditionText + @" AND ISNULL(Post,'N')=@PostStatus";
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    conditionText = conditionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                }

                #endregion

                #region Ingnoring Leg Gaurd

                if (code.ToUpper() == "YamahaFactory".ToUpper())
                {
                    conditionText = conditionText + @" AND ProductCode not in (
                                                   -- 'PABA'
                                                  --  ,'PBUA'
                                                    'C025'
                                                    ,'C026'
                                                    ,'C027'
                                                    ,'C106'
                                                   -- ,'R025'
                                                  --  ,'R026'
                                                   -- ,'R027'
                                                   -- ,'C107'
                                                    )";
                }

                #endregion

                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    conditionText = conditionText + @" AND (ID IN('" + IDs + "') OR PreID in ('" + IDs + "'))";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    conditionText = conditionText + @" AND Invoice_Date_Time >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    conditionText = conditionText + @" AND Invoice_Date_Time < dateadd(d,1,@toDate)";
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //}

                conditionText = conditionText + @" AND Branch_Code in (";

                foreach (DataRow dataRow in branchMap.Rows)
                {
                    conditionText += "'" + dataRow["IntegrationCode"] + "',";
                }

                conditionText = conditionText.TrimEnd(',') + ")";

                string CompanyCodeText = " ";

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "AT")
                {
                    code = "Core CB";
                }

                if (code.ToUpper() == "MOTORCENTRAL".ToUpper())
                {
                    CompanyCodeText += @" and companyCode in ('Tractor Central','Foton Central','Foton Parts Central','Agri Machineries Central'
,'MotorCentral','Motors Spare Central')";

                }
                if (code.ToUpper() == "ACI Toiletries".ToUpper())
                {
                    CompanyCodeText += @" and companyCode in ('ACI CB Hygine','ACI Toiletries')";
                }
                else
                {
                    CompanyCodeText += " and companyCode = '" + code + "'";
                }

                if (code == "ACI CB HYGINE")
                {
                    CompanyCodeText += " and CustomerCode!='AT'";
                }

                conditionText += " " + CompanyCodeText;

                sqlText = sqlText.Replace("@conditionText", conditionText);

                #endregion

                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Add Parameter Values

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                }




                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }

                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                DataTable dtSales = new DataTable();
                cmd.CommandTimeout = 500;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtSales);

                // remove extra column 
                dtSales.Columns.Remove("PreID");

                return dtSales;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetACISaleData_Web", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetACISaleData_Web_CBHygine(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null, SqlConnection vConnection = null, SqlTransaction vTransaction = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();

            #endregion

            #region try

            try
            {

                DataTable dt = GetACISaleData_Web(paramVM, connVM);

                string AutoPost = "Y";
                ////CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();

                AutoPost = commonDal.settingValue("Integration", "FromDBSaleAutoPost", paramVM.SysDbInfoVmTemp);

                string TableName = "ACIData.dbo.TransferIssues";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                #region Open Connection and Transaction

                if (vConnection != null)
                {
                    currConn = vConnection;
                }

                if (vTransaction != null)
                {
                    transaction = vTransaction;
                }

                if (vConnection == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();

                }

                if (vTransaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }
                #endregion

                #region SQLText

                #region tempTable

                string tempTable = @"
create table #temp(
ID varchar(6000)
,Post                   varchar(100)
--,Branch_Code	varchar(100)
,Customer_Name varchar(100)
,Customer_Code	varchar(100)
,Delivery_Address	varchar(2000)
,Vehicle_No	varchar(100)
,VehicleType	varchar(100)
,Invoice_Date_Time	datetime
,Delivery_Date_Time datetime
,Reference_No  varchar(6000)
,Comments varchar(100)
,Sale_Type varchar(100)
,Previous_Invoice_No varchar(100)
,Is_Print varchar(100)
,Tender_Id varchar(100)
,LC_Number varchar(100)
,Currency_Code varchar(100)
,Item_Code varchar(100)
,Item_Name varchar(100)
,UOM varchar(100)
,Quantity decimal(25,9)
,NBR_Price decimal(25,9)
,VAT_Rate decimal(25,9)
,SD_Rate  decimal(25,9)
,TotalValue decimal(25,9)
,SubTotal decimal(25,9)
,VAT_Amount decimal(25,9)
,Non_Stock varchar(100)
,Trading_MarkUp decimal(25,9)
,Type varchar(100)
,VAT_Name varchar(100)
,TransactionType varchar(100)
,PreviousInvoiceDateTime datetime
,PreviousNBRPrice decimal(25,9)
,PreviousQuantity decimal(25,9)
,PreviousUOM varchar(100)
,PreviousSubTotal decimal(25,9)
,PreviousSD decimal(25,9)
,PreviousSDAmount decimal(25,9)
,PreviousVATRate decimal(25,9)
,PreviousVATAmount decimal(25,9)
,ReasonOfReturn varchar(100)
,PreID varchar(100)
)
";

                #endregion

                #region sqlText

                sqlText = @"


insert into #temp
SELECT
ID																			        ID
,Post                                                                               Post
--,Branch_Code																	    Branch_Code
,''															Customer_Name
,LTRIM(RTRIM(TransferToBranchCode))															Customer_Code
,''																    Delivery_Address
,VehicleNo 																			Vehicle_No
,VehicleType 																		VehicleType
,TransactionDateTime 										                            Invoice_Date_Time
,TransactionDateTime										                            Delivery_Date_Time
,ID  																                Reference_No  
,Comments																		    Comments
,'New'																				Sale_Type
,'' 																				Previous_Invoice_No
,'N'																				Is_Print
,'0'																				Tender_Id
,''																		            LC_Number
,'BDT'																	            Currency_Code
,LTRIM(RTRIM(ProductCode))															Item_Code
,LTRIM(RTRIM(ProductName))															Item_Name
,UOM																			    UOM
,(Quantity)													Quantity
,(CostPrice/(Quantity))										NBR_Price
,isnull(VAT_Rate,0)																	VAT_Rate
,0																	SD_Rate
,isnull(CostPrice,0)														        TotalValue
,0																		            SubTotal
,0 									                                                VAT_Amount
,'N'																				Non_Stock
,0																					Trading_MarkUp
,''															                        Type
,'VAT 4.3'																			VAT_Name
, ''         TransactionType
,''													        PreviousInvoiceDateTime
,0															        PreviousNBRPrice
,0															        PreviousQuantity
,''																        PreviousUOM
,0										        PreviousSubTotal
,0																	        PreviousSD
,0															        PreviousSDAmount
,0															        PreviousVATRate
,0					        PreviousVATAmount
,'' ReasonOfReturn	
,ID PreID

FROM " + TableName +
@" where 1=1 
and Quantity > 0

@conditionText

update #temp set VAT_Rate = Products.VATRate, 
SD_Rate = Products.SD,
UOM = Products.UOM,
Item_Name = Products.ProductName
from Products 
where Products.ProductCode = #temp.Item_Code 

@NBRPreiceUpdateQuery

update #temp set Delivery_Address = Customers.Address1
from Customers 
where Customers.CustomerCode = #temp.Customer_Code and #temp.Delivery_Address =''


update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NonVAT' else 'OtherRate' end

update #temp set TotalValue=0

";

                string updateNBRPreice = @"
   update #temp set NBR_Price = Products.NBRPrice from Products 
where Products.ProductCode = #temp.Item_Code 
";


                #endregion

                #region Get all Data

                string getAll = @"
select * from #temp

drop table #temp
";

                #endregion

                #region Filtering

                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" + paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);
                string defaultCurrency = commonDal.settingValue("Sale", "DefualtForeignCurrency", paramVM.SysDbInfoVmTemp);
                string conditionText = "";

                #region Condition Text

                if ((code.ToUpper() == "ACI FOODS LIMITED" && paramVM.TransactionType.ToLower() == "export")
                    || code.ToUpper() == "ACI EDIBLE OILS LIMITED"
                    || code.ToUpper() == "ACI PURE FLOUR LIMITED"
                    || code.ToLower() == "aci foods limited (rice unit)"
                    || code.ToLower() == "aci salt limited"
                    || paramVM.IsInstitution
                    )
                {
                    sqlText = sqlText.Replace("@NBRPreiceUpdateQuery", "");
                }
                else
                {
                    sqlText = sqlText.Replace("@NBRPreiceUpdateQuery", updateNBRPreice);
                }

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    conditionText = conditionText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    conditionText = conditionText + @" AND ISNULL(Post,'N')=@PostStatus";
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    conditionText = conditionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                }

                #endregion

                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    //////////conditionText = conditionText + @" AND ID IN('" + IDs + "') OR PreID in ('" + IDs + "')";
                    conditionText = conditionText + @" AND (ID IN('" + IDs + "') OR PreID in ('" + IDs + "'))";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    conditionText = conditionText + @" AND TransactionDateTime >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    conditionText = conditionText + @" AND TransactionDateTime < dateadd(d,1,@toDate)";
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //}

                conditionText = conditionText + @" AND BranchCode in (";

                foreach (DataRow dataRow in branchMap.Rows)
                {
                    conditionText += "'" + dataRow["IntegrationCode"] + "',";
                }

                conditionText = conditionText.TrimEnd(',') + ")";

                sqlText = sqlText.Replace("@conditionText", conditionText);

                #endregion

                #endregion

                #region tempTable

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                #endregion

                #region BulkInsert

                if (dt != null && dt.Rows.Count > 0)
                {
                    result = commonDal.BulkInsert("#temp", dt, currConn, transaction);
                }

                #endregion

                #region sqlText

                cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Add Parameter Values

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }

                #endregion

                cmd.ExecuteNonQuery();

                #endregion

                #region getAll

                cmd = new SqlCommand(getAll, currConn, transaction);

                DataTable dtSales = new DataTable();
                cmd.CommandTimeout = 500;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtSales);

                #endregion

                // remove extra column 
                dtSales.Columns.Remove("PreID");

                return dtSales;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetACISaleData_Web_CBHygine", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null && vConnection == null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM SaveACISale_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            DataTable dtSale = new DataTable();
            CommonDAL commonDal = new CommonDAL();

            #region try

            try
            {

                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);

                #region Single Customer for Multiple Invoice

                if (paramVM.IsMultiple && !string.IsNullOrEmpty(paramVM.CustomerCode))
                {
                    string[] results = UpdateACIMasterID(paramVM, "SaleInvoices");
                    paramVM.IDs = new List<string>();
                    paramVM.IDs.Add(results[2]);
                }

                #endregion

                if (paramVM.IsInstitution)
                {
                    UpdatePreviousIds(paramVM);
                }

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "AT")
                {
                    dtSale = GetACISaleData_Web_CBHygine(paramVM, connVM);
                }
                else
                {
                    dtSale = GetACISaleData_Web(paramVM);
                }


                if (dtSale == null || dtSale.Rows.Count == 0)
                {
                    if (paramVM.IsMultiple && !string.IsNullOrEmpty(paramVM.CustomerCode))
                    {
                        string[] results = ReUpdateACIMaster(paramVM, "SaleInvoices");
                    }
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                #region Check Multiple Save

                CommonDAL commonDAL = new CommonDAL();

                string allowMultiple = commonDAL.settings("Integration", "AllowMultipleSave", null, null, paramVM.SysDbInfoVmTemp);

                if (allowMultiple == "N")
                {

                    DataTable dt = dtSale.DefaultView.ToTable(true, "ID");

                    if (dt.Rows.Count > 1)
                    {
                        rVM.Message = "Multiple Save is Not Allowed!";
                        return rVM;
                    }

                }

                #endregion

                paramVM.EngineChassis = GetEngineChassis(dtSale, paramVM, connVM);


                dtSale.Columns.Remove("TransactionType");
                sqlResults = new SaleDAL().SaveSaleACI(dtSale, paramVM.DefaultBranchId, paramVM.TransactionType, paramVM.Token, paramVM.SysDbInfoVmTemp, paramVM);

                if (sqlResults[0].ToLower() == "success")
                {
                    //string chassisTracking = commonDal.settingValue("Sale", "ChassisTracking", null);

                    //if (string.IsNullOrEmpty(chassisTracking) || chassisTracking.ToLower() == "n")
                    //{
                    dtSale = dtSale.DefaultView.ToTable(true, "ID");
                    if (paramVM.IsDuplicateInvoiceSave == "Y")
                    {
                        UpdateACISalesDuplicateSave(dtSale, null, paramVM.SysDbInfoVmTemp);
                    }
                    else
                    {
                        UpdateACISales(dtSale, null, paramVM.SysDbInfoVmTemp, paramVM);

                    }
                    //}

                }
                if (sqlResults[0].ToLower() == "fail")
                {
                    if (paramVM.IsMultiple && !string.IsNullOrEmpty(paramVM.CustomerCode))
                    {
                        string[] results = ReUpdateACIMaster(paramVM, "SaleInvoices");
                    }
                }
                rVM.Status = sqlResults[0];
                rVM.Message = "Saved Successfully";

            }
            #endregion

            #region catch

            catch (Exception ex)
            {

                if (paramVM.IsMultiple == true && !string.IsNullOrEmpty(paramVM.CustomerCode))
                {
                    string[] results = ReUpdateACIMaster(paramVM, "SaleInvoices");
                }
                FileLogger.Log("ImportDAL", "SaveACISale_Web", ex.ToString());

                rVM.Message = ex.Message + ex.StackTrace;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        private DataTable GetEngineChassis(DataTable dtSale, IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            DataTable table = new DataTable();

            #endregion
            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(paramVM.SysDbInfoVmTemp);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                // Get distinct IDs
                // Get engine values with IDs
                // send result table to SaveSaleACI

                DataTable dtIds = dtSale.DefaultView.ToTable(true, "ID");

                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp, currConn, transaction);


                sqlText = @"
CREATE TABLE ##tempEngine(
	[ID] [varchar](500) NULL,
	[ProductCode] [varchar](50) NULL,
	[BranchCode] [varchar](50) NULL,
	[EngineNumber] [varchar](300) NULL,
	[ChassisNumber] [varchar](300) NULL,
	[CompanyCode] [varchar](50) NULL,
	[ProcessTime] [varchar](50) NULL
) 

insert into ##tempEngine 
select * from  ACIData.dbo.SaleEngineChassisDetails 
                where ID in (" + dtIds.GetCommaSeparated("ID") +
                          ") and BranchCode in (" + branchMap.GetCommaSeparated("IntegrationCode") +
                          ") and CompanyCode=@CompanyCode ";


                if (code.ToUpper() == "YamahaFactory".ToUpper())
                {

                    sqlText = sqlText + @" AND ProductCode not in (
                                                   -- 'PABA'
                                                  --  ,'PBUA'
                                                    'C025'
                                                    ,'C026'
                                                    ,'C027'
                                                    ,'C106'
                                                  --  ,'R025'
                                                  --  ,'R026'
                                                  --  ,'R027'
                                                  --  ,'C107'
                                                    )";
                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@CompanyCode", code);
                cmd.ExecuteNonQuery();



                ////                sqlText += "" +
                ////                           @"delete #tempEngine from #tempEngine te inner join SaleEngineChassisDetails sed
                ////                on  te.ProductCode =  sed.ProductCode and te.ChassisNumber = sed.ChassisNumber " +

                ////                           " select * from #tempEngine";

                #region Get tempEngine for EngineNumber Delete

                sqlText = @"
select ID,
	te.ProductCode,
	p.ItemNo,
	BranchCode,
	EngineNumber,
	ChassisNumber,
	CompanyCode
	from ##tempEngine te
	left outer join Products p on p.ProductCode=te.ProductCode

";

                //cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandText = sqlText;
                cmd.Connection = currConn;
                cmd.Transaction = transaction;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(table);

                #endregion

                #region Engine Number Delete

                if (table != null && table.Rows.Count > 0)
                {

                    foreach (DataRow row in table.Rows)
                    {
                        string EngineNumber = row["EngineNumber"].ToString();
                        string itemNo = row["ItemNo"].ToString();
                        string PCode = row["ProductCode"].ToString();

                        sqlText = @"
select count(EngineNumber) from SaleEngineChassisDetails where 1=1 
and ItemNo=@ItemNo and EngineNumber=@EngineNumber  and TransactionType='Other'
";
                        cmd = new SqlCommand(sqlText, currConn, transaction);
                        ////cmd.CommandText = sqlText;
                        ////cmd.Connection = currConn;
                        ////cmd.Transaction = transaction;
                        cmd.Parameters.AddWithValue("@ItemNo", itemNo);
                        cmd.Parameters.AddWithValue("@EngineNumber", EngineNumber);
                        var rowCountOther = (int)cmd.ExecuteScalar();

                        string sqlTextCredit = @"
select count(EngineNumber) from SaleEngineChassisDetails where 1=1 
and ItemNo=@CreditItemNo and EngineNumber=@CreditEngineNumber  and TransactionType='Credit'
";
                        cmd = new SqlCommand(sqlTextCredit, currConn, transaction);
                        ////cmd.CommandText = sqlText;
                        ////cmd.Connection = currConn;
                        ////cmd.Transaction = transaction;
                        cmd.Parameters.AddWithValue("@CreditItemNo", itemNo);
                        cmd.Parameters.AddWithValue("@CreditEngineNumber", EngineNumber);
                        var rowCountCredit = (int)cmd.ExecuteScalar();

                        if (rowCountOther > rowCountCredit)
                        {
                            sqlText = @"
delete ##tempEngine where ProductCode=@ProductCode and EngineNumber=@vEngineNumber
";
                            cmd = new SqlCommand(sqlText, currConn, transaction);
                            ////cmd.CommandText = sqlText;
                            ////cmd.Connection = currConn;
                            ////cmd.Transaction = transaction;
                            cmd.Parameters.AddWithValue("@ProductCode", PCode);
                            cmd.Parameters.AddWithValue("@vEngineNumber", EngineNumber);
                            cmd.ExecuteNonQuery();

                        }

                    }

                }

                #endregion

                #region Get tempEngine for EngineNumber Delete

                sqlText = @"
select ID
,ProductCode
,BranchCode
,EngineNumber
,ChassisNumber
,CompanyCode from ##tempEngine

drop table ##tempEngine
";

                //cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandText = sqlText;
                cmd.Connection = currConn;
                cmd.Transaction = transaction;
                adapter = new SqlDataAdapter(cmd);

                table = new DataTable();
                adapter.Fill(table);

                #endregion

            }
            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetA Engine Chassis", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion


            return table;
        }

        public DataTable GetACISaleEngineChassisData(string ID, string ItemCode, string BranchCode, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            DataTable table = new DataTable();

            #endregion
            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                // Get distinct IDs
                // Get engine values with IDs
                // send result table to SaveSaleACI

                ////DataTable dtIds = dtSale.DefaultView.ToTable(true, "ID");

                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", connVM);


                sqlText = @"
select ID,ProductCode,EngineNumber,ChassisNumber from  ACIData.dbo.SaleEngineChassisDetails
                where ID in ('" + ID + "') and BranchCode in (" + branchMap.GetCommaSeparated("IntegrationCode") +
                          ") and CompanyCode=@CompanyCode ";

                if (!string.IsNullOrWhiteSpace(ItemCode))
                {
                    sqlText += @" and ProductCode=@ProductCode ";
                }


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@CompanyCode", code);
                if (!string.IsNullOrWhiteSpace(ItemCode))
                {
                    cmd.Parameters.AddWithValue("@ProductCode", ItemCode);
                }

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(table);

            }
            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetACISaleEngineChassisData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return table;
        }

        public ResultVM PostSource_SaleData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                SaleMasterVM varSaleMasterVM = new SaleMasterVM();
                varSaleMasterVM.IDs = paramVM.IDs;
                varSaleMasterVM.CurrentUser = paramVM.CurrentUser;
                SaleDAL _SaleDAL = new SaleDAL();

                rVM = _SaleDAL.Multiple_SalePost(varSaleMasterVM, transaction, currConn, connVM);

                string TableName = "ACIData.dbo.SaleInvoices";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }
                string sqlText = @"";

                if (paramVM.IsDuplicateInvoiceSave == "N")
                {

                    sqlText += @" 
UPDATE " + TableName +
    @" SET 
Post = 'Y'
FROM " + TableName + " sSal" +
    @"
INNER JOIN SalesInvoiceHeaders sih on sSal.InvoiceNo=sih.SalesInvoiceNo
WHERE 1=1
";
                    string IDs = "";
                    if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                    {
                        IDs = string.Join("','", paramVM.IDs);

                        sqlText = sqlText + @" AND sSal.InvoiceNo IN('" + IDs + "')";

                    }
                }
                else
                {
                    sqlText += @" 
UPDATE " + TableName +
    @" SET 
Post = 'Y'
FROM " + TableName + " sSal" +
    @"

WHERE 1=1
";
                    string IDs = "";
                    if (paramVM.DuplicateInvoiceIDs != null && paramVM.DuplicateInvoiceIDs.Count > 0)
                    {
                        IDs = string.Join("','", paramVM.DuplicateInvoiceIDs);

                        sqlText = sqlText + @" AND sSal.InvoiceNo IN('" + IDs + "')";

                    }
                }
                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();

                transaction.Commit();

                rVM.Status = rows > 0 ? "Success" : "Fail";

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "PostSource_SaleData", ex.ToString());

                rVM.Message = ex.Message;

                if (transaction != null)
                {
                    transaction.Rollback();
                }
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
            return rVM;
        }

        public ResultVM PrintSource_SaleData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                string TableName = "ACIData.dbo.SaleInvoices";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                string sqlText = @"";
                sqlText += @" 
UPDATE " + TableName +
@" SET 
IsPrint = 'Y'
FROM " + TableName + " sSal" +
@"
INNER JOIN SalesInvoiceHeaders sih on sSal.InvoiceNo=sih.SalesInvoiceNo
WHERE 1=1
";
                if (!string.IsNullOrWhiteSpace(paramVM.MulitipleInvoice))
                {
                    if (!paramVM.MulitipleInvoice.Contains("'"))
                    {
                        paramVM.MulitipleInvoice = "'" + paramVM.MulitipleInvoice + "'";
                    }
                    sqlText = sqlText + @" AND sSal.InvoiceNo IN(" + paramVM.MulitipleInvoice + ")";

                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();

                transaction.Commit();

                rVM.Status = "Print Flag Update SuccessFully!";

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "PrintSource_SaleData", ex.ToString());

                rVM.Message = ex.Message;

                if (transaction != null)
                {
                    transaction.Rollback();
                }
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
            return rVM;
        }

        #endregion

        #region Purchase

        public DataTable GetPurchaseACIDbData(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"

SELECT 
       [ID]
      ,[Vendor_Code]
      ,[BE_Number]
      --,[Invoice_Date]
      ,Receive_Date Invoice_Date
      ,[VAT_Amount]
      ,'-'[Vendor_Name]
      ,ID Referance_No
      ,[LC_No]
      ,[Receive_Date]
      ,[ProductCode] Item_Code
      ,'-'[Item_Name]
      ,[Quantity]
      , ([Quantity] * Unit_Price) Total_Price
      ,[UOM]
      ,(case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'Exempted' else 'OtherRate'end) [Type]
      ,[SD_Amount]
      ,[Assessable_Value]
      ,[CD_Amount]
      ,[RD_Amount]
      ,[AT_Amount]
      ,[AITAmount]
      ,[Others_Amount]
      ,[Remarks]
      ,[Post]
      ,[With_VDS]
      ,@cmRef Comments
, '0' Rebate_Rate
,  VAT_Rate
  FROM PurchaseInvoices where 1=1 

 
 "; //07/0007401

                VendorDAL vendorDal = new VendorDAL();

                if (string.IsNullOrEmpty(param.Processed))
                {
                    sqlText += " and IsProcessed = 'N'";
                }
                else if (param.Processed != "ALL")
                {
                    sqlText += " and IsProcessed = '" + param.Processed + "'";
                }


                if (param.TransactionType == "Other")
                {
                    sqlText += " and TransactionType = 'Local' ";
                }
                else if (param.TransactionType == "Import")
                {
                    sqlText += " and TransactionType = 'Import' ";
                }
                else if (param.TransactionType == "InputService")
                {
                    sqlText += " and TransactionType = 'InputService' ";

                }

                if (!string.IsNullOrEmpty(param.RefNo) || (param.IDs != null && param.IDs.Count > 0))
                {
                    if (param.SearchField == "grn_no")
                    {
                        sqlText += " and ID = @rid";

                        sqlText = sqlText.Replace("@cmRef", "ID");

                    }
                    else if (param.SearchField == "be_no")
                    {
                        sqlText += " and BE_Number = @rid";
                        sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    }
                    else if (param.SearchField == "po_no")
                    {
                        sqlText += " and PO_InvoiceRef = @rid";

                        sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    }
                    else if (param.SearchField == "vendor_name")
                    {

                        DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VendorName like" }, new[] { param.RefNo });
                        param.RefNo = "";
                        //if (dt != null && dt.Rows.Count > 0)
                        //{
                        //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                        //}
                        if (dt.Rows.Count > 0)
                        {
                            sqlText += " and Vendor_Code in (";

                            foreach (DataRow row in dt.Rows)
                            {
                                sqlText += "'" + row["VendorCode"] + "',";
                            }

                            sqlText = sqlText.TrimEnd(',');
                            sqlText = sqlText + ")";
                        }



                        sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    }
                    else if (param.SearchField == "bin")
                    {

                        DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VATRegistrationNo like" }, new[] { param.RefNo });

                        //if (dt != null && dt.Rows.Count > 0)
                        //{
                        //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                        //}

                        if (dt.Rows.Count > 0)
                        {
                            sqlText += " and Vendor_Code in (";

                            foreach (DataRow row in dt.Rows)
                            {
                                sqlText += "'" + row["VendorCode"] + "',";
                            }

                            sqlText = sqlText.TrimEnd(',');
                            sqlText = sqlText + ")";
                        }



                        sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    }
                    else if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and ID in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                        sqlText = sqlText.Replace("@cmRef", "");

                    }
                    else
                    {
                        sqlText += " and ID = @rid";

                        sqlText = sqlText.Replace("@cmRef", "");
                    }
                }
                else
                {
                    sqlText = sqlText.Replace("@cmRef", "");

                }
                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                }

                sqlText += "  and CompanyCode = @CompanyCode";

                // and BranchCode='" +
                //conInfo.Rows[0]["IntegrationCode"] + "'
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@rid", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", Convert.ToDateTime(param.FromDate).ToString("yyyy-MM-dd"));
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", Convert.ToDateTime(param.ToDate).ToString("yyyy-MM-dd"));
                }

                string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                    {
                        continue;
                    }
                    decimal vatRate = Convert.ToDecimal(tableRow["VAT_Rate"]);
                    tableRow["UOM"] = vm.UOM;
                    decimal sdAmount = (Convert.ToDecimal(tableRow["Total_Price"]) * vm.SD) / 100;

                    tableRow["SD_Amount"] = sdAmount;

                    tableRow["VAT_Amount"] = (sdAmount + Convert.ToDecimal(tableRow["Total_Price"])) * vatRate / 100;

                    //DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                    //    Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                    //tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                    //    ? "0"
                    //    : dt.Rows[0]["NBRPrice"].ToString();

                }

                table.Columns.Remove("VAT_Rate");
                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetPurchaseACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetPurchaseACI_CB_ElecticalDbData(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"

SELECT 
       [ID]
      ,'N/A'[Vendor_Code]
      ,''[BE_Number]
      ,[Receive_DateTime] Invoice_Date
      ,'0'[VAT_Amount]
      ,'N/A'[Vendor_Name]
      ,ID Referance_No
      ,'' [LC_No]
      ,[Receive_DateTime] Receive_Date
      ,Receives.[ProductCode] Item_Code
      ,'-'[Item_Name]
      ,[Quantity]
      , '1' Total_Price
      ,Receives.[UOM]
      ,'VAT'[Type]
      ,'0' [SD_Amount]
      ,'0' [Assessable_Value]
      ,'0' [CD_Amount]
      ,'0' [RD_Amount]
      ,'0' [AT_Amount]
      ,'0' [AITAmount]
      ,'0' [Others_Amount]
      ,'-'[Remarks]
      ,[Post]
      ,'N'[With_VDS]
      ,@cmRef Receives.Comments
, '0' Rebate_Rate
  FROM Receives 
--left outer join   ACIL2012CBElectrical_Demo_DB.dbo.Products p on p.ProductCode=Receives.ProductCode
--left outer join   ACIL2012CBElectrical_Demo_DB.dbo.ProductCategories pc on p.CategoryID=pc.CategoryID

left outer join   @dbName.dbo.Products p on p.ProductCode=Receives.ProductCode
left outer join   @dbName.dbo.ProductCategories pc on p.CategoryID=pc.CategoryID


WHERE 1=1
and pc.IsRaw='Trading'

 
 "; //07/0007401

                string dbName = DatabaseInfoVM.DatabaseName;

                sqlText = sqlText.Replace("@dbName", dbName);

                VendorDAL vendorDal = new VendorDAL();

                if (string.IsNullOrEmpty(param.Processed))
                {
                    sqlText += " and IsProcessed = 'N'";
                }
                else if (param.Processed != "ALL")
                {
                    sqlText += " and IsProcessed = '" + param.Processed + "'";
                }


                if (param.TransactionType == "Other")
                {
                    sqlText += " and TransactionType = 'Receive' ";
                }
                else if (param.TransactionType == "Import")
                {
                    sqlText += " and TransactionType = 'Receive' ";
                }
                else if (param.TransactionType == "InputService")
                {
                    sqlText += " and TransactionType = 'Receive' ";

                }

                if (!string.IsNullOrEmpty(param.RefNo) || (param.IDs != null && param.IDs.Count > 0))
                {
                    if (param.SearchField == "grn_no")
                    {
                        sqlText += " and ID = @rid";

                        sqlText = sqlText.Replace("@cmRef", "ID");

                    }
                    //else if (param.SearchField == "be_no")
                    //{
                    //    sqlText += " and BE_Number = @rid";
                    //    sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    //}
                    //else if (param.SearchField == "po_no")
                    //{
                    //    sqlText += " and PO_InvoiceRef = @rid";

                    //    sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    //}
                    //else if (param.SearchField == "vendor_name")
                    //{

                    //    DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VendorName like" }, new[] { param.RefNo });
                    //    param.RefNo = "";
                    //    //if (dt != null && dt.Rows.Count > 0)
                    //    //{
                    //    //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                    //    //}
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        sqlText += " and Vendor_Code in (";

                    //        foreach (DataRow row in dt.Rows)
                    //        {
                    //            sqlText += "'" + row["VendorCode"] + "',";
                    //        }

                    //        sqlText = sqlText.TrimEnd(',');
                    //        sqlText = sqlText + ")";
                    //    }



                    //    sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    //}
                    //else if (param.SearchField == "bin")
                    //{

                    //    DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VATRegistrationNo like" }, new[] { param.RefNo });

                    //    //if (dt != null && dt.Rows.Count > 0)
                    //    //{
                    //    //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                    //    //}

                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        sqlText += " and Vendor_Code in (";

                    //        foreach (DataRow row in dt.Rows)
                    //        {
                    //            sqlText += "'" + row["VendorCode"] + "',";
                    //        }

                    //        sqlText = sqlText.TrimEnd(',');
                    //        sqlText = sqlText + ")";
                    //    }



                    //    sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    //}
                    else if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and ID in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                        sqlText = sqlText.Replace("@cmRef", "");

                    }
                    else
                    {
                        sqlText += " and ID = @rid";

                        sqlText = sqlText.Replace("@cmRef", "");
                    }
                }
                else
                {
                    sqlText = sqlText.Replace("@cmRef", "");

                }
                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    sqlText += " and Format(cast(Receive_DateTime as datetime),'yyyy-MM-dd') >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    sqlText += " and Format(cast(Receive_DateTime as datetime),'yyyy-MM-dd') <= @toDate";
                }

                sqlText += "  and CompanyCode = @CompanyCode";

                // and BranchCode='" +
                //conInfo.Rows[0]["IntegrationCode"] + "'
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@rid", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", Convert.ToDateTime(param.FromDate).ToString("yyyy-MM-dd"));
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", Convert.ToDateTime(param.ToDate).ToString("yyyy-MM-dd"));
                }

                string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                    {
                        continue;
                    }
                    tableRow["UOM"] = vm.UOM;



                }

                //table.Columns.Remove("VAT_Rate");
                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetPurchaseACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetACIPurchaseDataWeb(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            DataTable dt = new DataTable();


            #endregion

            #region try

            try
            {

                CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();

                DataTable PDt = GetPurchaseACIDbData(paramVM, connVM);

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region SQLText

                #region tempTable

                string tempTable = @"
create table #temp(
ID varchar(100)
      ,Vendor_Code varchar(100)
      ,BE_Number varchar(100)
      ,Invoice_Date datetime
      ,VAT_Amount decimal(25,9)
      ,Vendor_Name varchar(100)
      ,Referance_No varchar(100)
      ,LC_No varchar(100)
      ,Receive_Date datetime
      ,Item_Code varchar(100)
      ,Item_Name varchar(100)
      ,Quantity decimal(25,9)
      ,Total_Price decimal(25,9)
      ,UOM varchar(100)
      ,Type varchar(100)
      ,SD_Amount decimal(25,9)
      ,Assessable_Value decimal(25,9)
      ,CD_Amount decimal(25,9)
      ,RD_Amount decimal(25,9)
      ,AT_Amount decimal(25,9)
      ,AITAmount decimal(25,9)
      ,Others_Amount decimal(25,9)
      ,Remarks varchar(100)
      ,Post varchar(100)
      ,With_VDS varchar(100)
      ,Comments varchar(300)
	  ,Rebate_Rate decimal(25,9)
	  ,VAT_Rate decimal(25,9)
)
";
                #endregion

                #region Update and Select Text

                string updateItemName = @"
update #temp set Item_Name = Products.ProductName from Products 
where Products.ProductCode = #temp.Item_Code 
";

                sqlText = @"
select * from #temp

drop table #temp
";

                #endregion

                #endregion

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                retResults = commonDal.BulkInsert("#temp", PDt, currConn, transaction);

                cmd.CommandText = updateItemName;
                cmd.ExecuteNonQuery();

                cmd.CommandText = sqlText;
                cmd.CommandTimeout = 500;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);

                return dt;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetACIPurchaseDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetACI_CB_ElecticalPurchaseDataWeb(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            DataTable dt = new DataTable();


            #endregion

            #region try

            try
            {

                CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();

                DataTable PDt = GetPurchaseACI_CB_ElecticalDbData(paramVM, connVM);

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region SQLText

                #region tempTable

                string tempTable = @"
create table #temp(
ID varchar(100)
      ,Vendor_Code varchar(100)
      ,BE_Number varchar(100)
      ,Invoice_Date datetime
      ,VAT_Amount decimal(25,9)
      ,Vendor_Name varchar(100)
      ,Referance_No varchar(100)
      ,LC_No varchar(100)
      ,Receive_Date datetime
      ,Item_Code varchar(100)
      ,Item_Name varchar(100)
      ,Quantity decimal(25,9)
      ,Total_Price decimal(25,9)
      ,UOM varchar(100)
      ,Type varchar(100)
      ,SD_Amount decimal(25,9)
      ,Assessable_Value decimal(25,9)
      ,CD_Amount decimal(25,9)
      ,RD_Amount decimal(25,9)
      ,AT_Amount decimal(25,9)
      ,AITAmount decimal(25,9)
      ,Others_Amount decimal(25,9)
      ,Remarks varchar(100)
      ,Post varchar(100)
      ,With_VDS varchar(100)
      ,Comments varchar(300)
	  ,Rebate_Rate decimal(25,9)
)
";
                #endregion

                #region Update and Select Text

                string updateItemName = @"
update #temp set Item_Name = Products.ProductName from Products 
where Products.ProductCode = #temp.Item_Code 
";

                sqlText = @"
select * from #temp

drop table #temp
";

                #endregion

                #endregion

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                retResults = commonDal.BulkInsert("#temp", PDt, currConn, transaction);

                cmd.CommandText = updateItemName;
                cmd.ExecuteNonQuery();

                cmd.CommandText = sqlText;
                cmd.CommandTimeout = 500;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);

                return dt;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetACI_CB_ElecticalPurchaseDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetPurchaseACIDbData_Web(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"

SELECT 
       [ID]
      ,[Vendor_Code]
      ,[BE_Number]
      --,[Invoice_Date]
      ,Receive_Date Invoice_Date
      ,[VAT_Amount]
      ,'-'[Vendor_Name]
      ,ID Referance_No
      ,[LC_No]
      ,[Receive_Date]
      ,[ProductCode] Item_Code
      ,'-'[Item_Name]
      ,[Quantity]
      , ([Quantity] * Unit_Price) Total_Price
      ,[UOM]
      ,(case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'Exempted' else 'OtherRate'end) [Type]
      ,[SD_Amount]
      ,[Assessable_Value]
      ,[CD_Amount]
      ,[RD_Amount]
      ,[AT_Amount]
      ,[AITAmount]
      ,[Others_Amount]
      ,[Remarks]
      ,[Post]
      ,[With_VDS]
      ,@cmRef Comments
, '0' Rebate_Rate
,  VAT_Rate
  FROM PurchaseInvoices where 1=1 

 
 "; //07/0007401

                VendorDAL vendorDal = new VendorDAL();

                if (string.IsNullOrEmpty(param.Processed))
                {
                    sqlText += " and IsProcessed = 'N'";
                }
                else if (param.Processed != "ALL")
                {
                    sqlText += " and IsProcessed = '" + param.Processed + "'";
                }

                if (param.TransactionType == "Other")
                {
                    sqlText += " and TransactionType = 'Local' ";
                }
                else if (param.TransactionType == "Import")
                {
                    sqlText += " and TransactionType = 'Import' ";
                }
                else if (param.TransactionType == "InputService")
                {
                    sqlText += " and TransactionType = 'InputService' ";
                }

                if (!string.IsNullOrEmpty(param.RefNo) || (param.IDs != null && param.IDs.Count > 0))
                {
                    if (param.SearchField == "grn_no")
                    {
                        sqlText += " and ID = @rid";

                        sqlText = sqlText.Replace("@cmRef", "ID");

                    }
                    else if (param.SearchField == "be_no")
                    {
                        sqlText += " and BE_Number = @rid";
                        sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    }
                    else if (param.SearchField == "po_no")
                    {
                        sqlText += " and PO_InvoiceRef = @rid";

                        sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    }
                    else if (param.SearchField == "vendor_name")
                    {

                        DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VendorName like" }, new[] { param.RefNo });
                        param.RefNo = "";
                        //if (dt != null && dt.Rows.Count > 0)
                        //{
                        //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                        //}
                        if (dt.Rows.Count > 0)
                        {
                            sqlText += " and Vendor_Code in (";

                            foreach (DataRow row in dt.Rows)
                            {
                                sqlText += "'" + row["VendorCode"] + "',";
                            }

                            sqlText = sqlText.TrimEnd(',');
                            sqlText = sqlText + ")";
                        }

                        sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    }
                    else if (param.SearchField == "bin")
                    {

                        DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VATRegistrationNo like" }, new[] { param.RefNo });

                        //if (dt != null && dt.Rows.Count > 0)
                        //{
                        //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                        //}

                        if (dt.Rows.Count > 0)
                        {
                            sqlText += " and Vendor_Code in (";

                            foreach (DataRow row in dt.Rows)
                            {
                                sqlText += "'" + row["VendorCode"] + "',";
                            }

                            sqlText = sqlText.TrimEnd(',');
                            sqlText = sqlText + ")";
                        }

                        sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    }
                    else if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and ID in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                        sqlText = sqlText.Replace("@cmRef", "");

                    }
                    else
                    {
                        sqlText += " and ID = @rid";

                        sqlText = sqlText.Replace("@cmRef", "");
                    }
                }
                else
                {
                    sqlText = sqlText.Replace("@cmRef", "");

                }
                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    ////sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate";
                    sqlText += " and Format(cast(Receive_Date as datetime),'yyyy-MM-dd') >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    ////sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText += " and Format(cast(Receive_Date as datetime),'yyyy-MM-dd') <= @toDate";
                }

                sqlText += "  and CompanyCode = @CompanyCode";

                // and BranchCode='" +
                //conInfo.Rows[0]["IntegrationCode"] + "'
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@rid", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", Convert.ToDateTime(param.FromDate).ToString("yyyy-MM-dd"));
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", Convert.ToDateTime(param.ToDate).ToString("yyyy-MM-dd"));
                }

                string code = commonDal.settingValue("CompanyCode", "Code");

                cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                    {
                        continue;
                    }
                    decimal vatRate = Convert.ToDecimal(tableRow["VAT_Rate"]);
                    tableRow["UOM"] = vm.UOM;
                    decimal sdAmount = (Convert.ToDecimal(tableRow["Total_Price"]) * vm.SD) / 100;

                    tableRow["SD_Amount"] = sdAmount;

                    tableRow["VAT_Amount"] = (sdAmount + Convert.ToDecimal(tableRow["Total_Price"])) * vatRate / 100;

                    //DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                    //    Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                    //tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                    //    ? "0"
                    //    : dt.Rows[0]["NBRPrice"].ToString();

                }

                table.Columns.Remove("VAT_Rate");
                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetPurchaseACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateACI_CB_ElecticalPurchaseTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += @" UPDATE ACIData.dbo.Receives SET 
  IsProcessed = 'Y'
FROM ACIData.dbo.Receives  p
INNER JOIN PurchaseInvoiceHeaders pih on p.ID=pih.ImportIDExcel 
WHERE 1=1

and p.ID in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "UpdateACITransactions", ex.ToString());
                throw ex;

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateACIPurchaseTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion


                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", connVM);


                #region Sql Command

                int len = table.Rows.Count;


                sqlText += @" UPDATE ACIData.dbo.PurchaseInvoices SET 
  IsProcessed = 'Y'
, InvoiceNo=pih.PurchaseInvoiceNo   
FROM ACIData.dbo.PurchaseInvoices  p
INNER JOIN PurchaseInvoiceHeaders pih on p.ID=pih.ImportIDExcel 
WHERE 1=1

and p.ID in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                sqlText += " and p.companyCode = '" + code + "'";


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "UpdateACITransactions", ex.ToString());
                throw ex;

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public ResultVM SaveACIPurchase_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();

            #region try

            try
            {

                DataTable dtPurchase = new DataTable();
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode }, null, null, true, connVM);
                paramVM.dtConnectionInfo = dtBranchInfo;

                ////dtPurchase = GetPurchaseACIDbData(paramVM);
                if (paramVM.CompanyCode == "ACI CB ELECTRICAL" && paramVM.IsTrading)
                {
                    dtPurchase = GetPurchaseACI_CB_ElecticalDbData(paramVM, connVM);
                }
                else
                {
                    dtPurchase = GetPurchaseACIDbData_Web(paramVM, connVM);

                }

                if (dtPurchase == null || dtPurchase.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                PurchaseDAL purchaseDal = new PurchaseDAL();

                sqlResults = purchaseDal.SaveTempPurchase(dtPurchase, paramVM.BranchCode, paramVM.TransactionType, paramVM.CurrentUser, 0, () => { }, null, null, connVM);

                if (sqlResults[0].ToLower() == "success")
                {
                    if (paramVM.CompanyCode == "ACI CB ELECTRICAL" && paramVM.IsTrading)
                    {
                        string[] results = UpdateACI_CB_ElecticalPurchaseTransactions(dtPurchase, dtBranchInfo, connVM);

                    }
                    else
                    {
                        string[] results = UpdateACIPurchaseTransactions(dtPurchase, dtBranchInfo, connVM);

                    }
                    rVM.Message = "Saved Successfully";

                }
                else
                {
                    rVM.Message = sqlResults[1];

                }


                rVM.Status = sqlResults[0];

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveACISale_Web", ex.ToString());

                rVM.Message = ex.Message;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public DataTable GetSource_PurchaseData_Master_ACI(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtPurchasemaster = new DataTable();

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                string TableName = "ACIData.dbo.PurchaseInvoices";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                sqlText = @"
SELECT
0							                                                        Selected
,InvoiceNo																			InvoiceNo
,ID																			        ID
,Post                                                                               Post

,ID                                                                                 ReferenceNo
,BranchCode																	    BranchCode
--,Vendor_Name																	    VendorName
,ven.VendorName																	    VendorName
,pur.Vendor_Code																	    VendorCode
--,cast(Invoice_Date as varchar(20)) 										    InvoiceDateTime
,cast(Receive_Date as varchar(20)) 										    InvoiceDateTime
,cast(Receive_Date as varchar(20)) 										    Receive_Date

,SUM(Unit_Price*Quantity)																	TotalValue
,SUM(Quantity)																		TotalQuantity
,0													                               TotalVATAmount
--, IsProcessed	
, pur.IsProcessed	

FROM " + TableName + @" pur
left outer join ACIData.dbo.Vendors ven on ven.VendorCode=pur.Vendor_Code and ven.CompanyCode=@VenCompanyCode

WHERE 1=1


----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);


                #region Filtering

                if (paramVM.TransactionType == "Other")
                {
                    sqlText += " and (TransactionType = 'Local') and Quantity > 0 ";
                }
                else if (paramVM.TransactionType == "Import")
                {
                    sqlText += " and TransactionType = 'Import'  and Quantity > 0 ";

                }
                else
                {
                    sqlText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                }


                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(pur.IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(pur.Post,'N')=@PostStatus";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    if (paramVM.SearchField == "BE_No")
                    {
                        sqlText = sqlText + @" AND BE_Number = @PurchaseInvoiceNo";

                    }
                    else if (paramVM.SearchField == "Vendor_Name")
                    {
                        sqlText = sqlText + @" AND ven.VendorName = @PurchaseInvoiceNo";

                    }
                    else if (paramVM.SearchField == "Vendor_Code")
                    {
                        sqlText = sqlText + @" AND pur.Vendor_Code = @PurchaseInvoiceNo";

                    }
                    else
                    {
                        sqlText = sqlText + @" AND ID = @PurchaseInvoiceNo";

                    }
                }
                else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    sqlText += @" and ID in (";
                    foreach (string id in paramVM.IDs)
                    {
                        sqlText += "'" + id + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate ";
                    sqlText = sqlText + @" AND Format(cast(Receive_Date as datetime),'yyyy-MM-dd') >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText = sqlText + @" AND Format(cast(Receive_Date as datetime),'yyyy-MM-dd') <= @toDate";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @" AND pur.BranchCode in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                sqlText += " and pur.companyCode = '" + code + "'";

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
 InvoiceNo							
	 ,ID									
	 ,Post                               

	 ,ID                                 
	 ,BranchCode							
	 --,Vendor_Name	
     ,ven.VendorName						
	 ,Vendor_Code						
	 ,Invoice_Date 
	 ,Receive_Date 
	 ,pur.IsProcessed


";

                #endregion

                //sqlText += " ORDER BY Invoice_Date_Time";

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Add Parameter Values

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@PurchaseInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", Convert.ToDateTime(paramVM.FromDate).ToString("yyyy-MM-dd"));
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", Convert.ToDateTime(paramVM.ToDate).ToString("yyyy-MM-dd"));
                }
                cmd.Parameters.AddWithValue("@VenCompanyCode", code);


                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtPurchasemaster);

                #endregion

                #region Selected Data

                if (dtPurchasemaster != null && dtPurchasemaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtPurchasemaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtPurchasemaster.Select("ID  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtPurchasemaster = new DataTable();
                        dtPurchasemaster = rows.CopyToDataTable();

                    }

                }

                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_PurchaseData_Master_ACI", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtPurchasemaster;

        }

        public DataTable GetSource_PurchaseData_Master_ACI_CB_ELECTRICAL(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtPurchasemaster = new DataTable();

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                string TableName = "ACIData.dbo.Receives";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_Sales";
                }

                sqlText = @"
SELECT
0							                                                        Selected
,''																			InvoiceNo
,ID																			        ID
,Post                                                                               Post

,ID                                                                                 ReferenceNo
,BranchCode																	    BranchCode
--,Vendor_Name																	    VendorName
,'N/A'																	    VendorName
,'N/A'																	    VendorCode
,cast(Receive_DateTime as varchar(20)) 										    InvoiceDateTime
,cast(Receive_DateTime as varchar(20)) 										    Receive_Date

,'0'																	TotalValue
,SUM(Quantity)																		TotalQuantity
,0													                               TotalVATAmount
--, IsProcessed	
,IsProcessed	

FROM " + TableName + @" 

left outer join   ACIL2012CBElectrical_Demo_DB.dbo.Products p on p.ProductCode=Receives.ProductCode
left outer join   ACIL2012CBElectrical_Demo_DB.dbo.ProductCategories pc on p.CategoryID=pc.CategoryID


WHERE 1=1
and pc.IsRaw='Trading'


----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                #region Filtering

                if (paramVM.TransactionType == "Other")
                {
                    sqlText += " and (TransactionType = 'Receive') and Quantity > 0 ";
                }
                else if (paramVM.TransactionType == "Import")
                {
                    sqlText += " and TransactionType = 'Receive'  and Quantity > 0 ";

                }
                else
                {
                    sqlText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                }


                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText = sqlText + @" AND ID = @PurchaseInvoiceNo";

                }
                else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    sqlText += @" and ID in (";
                    foreach (string id in paramVM.IDs)
                    {
                        sqlText += "'" + id + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate ";
                    sqlText = sqlText + @" AND Format(cast(Receive_DateTime as datetime),'yyyy-MM-dd') >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText = sqlText + @" AND Format(cast(Receive_DateTime as datetime),'yyyy-MM-dd') <= @toDate";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @" AND BranchCode in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                sqlText += " and companyCode = '" + code + "'";

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
					
	 ID									
	 ,Post                               

	 ,BranchCode							
					
	 ,Receive_DateTime 
	  
	 ,IsProcessed


";

                #endregion

                //sqlText += " ORDER BY Invoice_Date_Time";

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Add Parameter Values

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@PurchaseInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", Convert.ToDateTime(paramVM.FromDate).ToString("yyyy-MM-dd"));
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", Convert.ToDateTime(paramVM.ToDate).ToString("yyyy-MM-dd"));
                }
                cmd.Parameters.AddWithValue("@VenCompanyCode", code);

                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtPurchasemaster);

                #endregion

                #region Selected Data

                if (dtPurchasemaster != null && dtPurchasemaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtPurchasemaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtPurchasemaster.Select("ID  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtPurchasemaster = new DataTable();
                        dtPurchasemaster = rows.CopyToDataTable();

                    }

                }

                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_PurchaseData_Master_ACI", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtPurchasemaster;

        }

        #endregion

        #region Receive

        public DataTable GetReceiveACIDbData(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM);

            #endregion

            #region try

            try
            {
                try
                {

                    if (OrdinaryVATDesktop.IsACIFGReturnFromSales(code, param.TransactionType))
                    {
                        table = GetReceiveReturnData_ACIPharma(param, connVM);
                        return table;

                    }


                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


update Receives set ProductType = Products.IsRaw
from (select p.ProductCode,pc.IsRaw from @db.dbo.Products p left outer join @db.dbo.ProductCategories pc
on p.CategoryID = pc.CategoryID)Products
where products.ProductCode = Receives.ProductCode and CompanyCode = @CompanyCode and ProductType is null


SELECT 
      [ID]
      ,[BranchCode]
      ,cast( [Receive_DateTime] as varchar(200))Receive_DateTime
      ,[ProductCode] Item_Code
      ,[ProductName] Item_Name
      ,[Quantity]
      ,[UOM]
      ,[Reference_No]
      ,[Comments]
      ,[Post]
	  ,'' Return_Id
	  ,'N' With_Toll
	  ,'0' NBR_Price
	  ,'VAT 4.3' VAT_Name
, 'N/A' CustomerCode
  FROM Receives where IsProcessed = 'N'  and (ProductType = 'Finish' or ProductType = 'Export')  
 "; //07/0007401

                    string dbName = "";
                    ////if (code == "ACI-1")
                    ////{
                    ////    dbName = DatabaseInfoVM.DatabaseName;
                    ////}
                    ////else if (code == "CEPL")
                    ////{
                    ////    dbName = "PPL2012_Demo_DB";

                    ////}
                    ////else if (code.ToLower() == "core cb")
                    ////{
                    ////    dbName = "ACIC2012_Demo_DB";

                    ////}
                    ////else
                    ////{
                    ////    dbName = DatabaseInfoVM.DatabaseName;
                    ////}

                    dbName = DatabaseInfoVM.DatabaseName;

                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and TransactionType = 'Receive' ";
                    }
                    else if (param.TransactionType == "ReceiveReturn")
                    {
                        sqlText += " and TransactionType = 'ReceiveReturn' ";

                    }

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        if (param.SearchField.ToLower() == "productcode")
                        {
                            sqlText += " and  ID in ( select distinct ID from receives where  ProductCode = @rid)";

                        }
                        else
                        {
                            sqlText += " and ID = @rid";

                        }

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and Receive_DateTime >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and Receive_DateTime <= @toDate";
                    }

                    //if (code != "ACI-1")
                    //{
                    //    sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    //    foreach (DataRow dataRow in branchMap.Rows)
                    //    {
                    //        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //    }

                    //    sqlText = sqlText.TrimEnd(',') + ")";
                    //}
                    //else
                    //{
                    //    sqlText += "  and CompanyCode = @CompanyCode"; 
                    //}

                    sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                    sqlText = sqlText.Replace("@db", dbName);

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                ProductDAL dal = new ProductDAL();

                //table.Columns["Receive_DateTime"].ReadOnly = false;

                foreach (DataRow tableRow in table.Rows)
                {
                    string itemCode = tableRow["Item_Code"].ToString();

                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { itemCode });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                        continue;

                    tableRow["UOM"] = vm.UOM;

                    DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                        Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                    //tableRow["Receive_DateTime"] =
                    //Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd");

                    tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                        ? "0"
                        : dt.Rows[0]["NBRPrice"].ToString();


                }
                table.AcceptChanges();

                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceiveACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetReceiveACIDbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


SELECT 
      [ID]
      ,0 Selected
      ,[BranchCode]
      ,cast( [Receive_DateTime] as varchar(200))Receive_DateTime
      , Sum ([Quantity]) [Quantity]
      ,[UOM]    
      ,[Post]
	  ,'' Return_Id
	  ,'N' With_Toll
	  ,'0' NBR_Price
	  ,'VAT 4.3' VAT_Name
      ,'N/A' CustomerCode
  FROM Receives where IsProcessed = 'N'  
 "; //07/0007401

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;
                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and TransactionType = 'Receive' ";
                    }
                    else if (param.TransactionType == "ReceiveReturn")
                    {
                        sqlText += " and TransactionType = 'ReceiveReturn' ";

                    }

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        if (param.SearchField.ToLower() == "productcode")
                        {
                            sqlText += " and  ID in ( select distinct ID from receives where  ProductCode = @rid)";

                        }
                        else
                        {
                            sqlText += " and ID = @rid";

                        }

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and Receive_DateTime >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and Receive_DateTime <= @toDate";
                    }

                    //if (code != "ACI-1")
                    //{
                    //    sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    //    foreach (DataRow dataRow in branchMap.Rows)
                    //    {
                    //        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //    }

                    //    sqlText = sqlText.TrimEnd(',') + ")";
                    //}
                    //else
                    //{
                    //    sqlText += "  and CompanyCode = @CompanyCode"; 
                    //}

                    sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                    if (code.ToUpper() == "FORMULATION")
                    {
                        bool IsCBTradingBranch = false;

                        foreach (DataRow dataRow in branchMap.Rows)
                        {
                            string branchCode = dataRow["IntegrationCode"].ToString();

                            if (branchCode != "X" || branchCode != "P002" || branchCode != "02")
                            {
                                IsCBTradingBranch = true;
                            }

                        }

                        if (IsCBTradingBranch)
                        {
                            sqlText += @" and Comments not in ('ACI LTD','FL Rework','ACI LTD Refurbish') ";
                        }
                    }



                    #endregion

                    #region Group By

                    sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
      [ID]   
      ,[BranchCode]
      ,Receive_DateTime 
      ,[UOM]
      ,[Post]

";

                    #endregion


                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }



                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceiveACIDbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetReceive_DetailACIData_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            DataTable dt = new DataTable();


            #endregion

            #region try

            try
            {

                CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();

                DataTable ReceiveDt = GetReceive_DetailACIDbDataWeb(paramVM, connVM);

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region SQLText

                #region tempTable

                string tempTable = @"
create table #temp(
ID varchar(100)
,BranchCode varchar(100)      
,Receive_DateTime datetime
,Item_Code varchar(100)
,Item_Name varchar(100)
,Quantity decimal(25,9)
,UOM varchar(100)
,Reference_No varchar(100)
,Comments varchar(300)
,Post varchar(100)
,Return_Id varchar(100)
,With_Toll varchar(100)
,NBR_Price decimal(25,9)
,VAT_Name varchar(100)
,CustomerCode varchar(100)
)
";
                #endregion

                #region Update and Select Text

                string updateItemName = @"
update #temp set Item_Name = Products.ProductName from Products 
where Products.ProductCode = #temp.Item_Code 
";

                sqlText = @"
select * from #temp

drop table #temp
";

                #endregion

                #endregion

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                retResults = commonDal.BulkInsert("#temp", ReceiveDt, currConn, transaction);

                cmd.CommandText = updateItemName;
                cmd.ExecuteNonQuery();

                cmd.CommandText = sqlText;
                cmd.CommandTimeout = 500;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);

                return dt;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetReceive_DetailACIData_Web", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetReceive_DetailACIDbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


SELECT 
      [ID]
      ,[BranchCode]
      ,cast( [Receive_DateTime] as varchar(200))Receive_DateTime
      ,[ProductCode] Item_Code
      ,[ProductName] Item_Name
      ,[Quantity]
      ,[UOM]
      ,[Reference_No]
      ,[Comments]
      ,[Post]
	  ,'' Return_Id
	  ,'N' With_Toll
	  ,'0' NBR_Price
	  ,'VAT 4.3' VAT_Name
, 'N/A' CustomerCode
  FROM Receives where IsProcessed = 'N'  
 "; //07/0007401

                    string dbName = "";
                    //if (code == "ACI-1")
                    //{
                    //    dbName = "ACI2012_Demo_DB";
                    //}
                    //else if (code == "CEPL")
                    //{
                    //    dbName = "PPL2012_Demo_DB";

                    //}
                    //else if (code.ToLower() == "core cb")
                    //{
                    //    dbName = "ACIC2012_Demo_DB";

                    //}
                    //else
                    //{
                    //    dbName = DatabaseInfoVM.DatabaseName;
                    //}

                    dbName = DatabaseInfoVM.DatabaseName;

                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and TransactionType = 'Receive' ";
                    }
                    else if (param.TransactionType == "ReceiveReturn")
                    {
                        sqlText += " and TransactionType = 'ReceiveReturn' ";

                    }


                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and ID in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }



                    sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";


                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    //if (!string.IsNullOrEmpty(param.RefNo))
                    //{
                    //    cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    //}

                    //if (!string.IsNullOrEmpty(param.FromDate))
                    //{
                    //    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    //}

                    //if (!string.IsNullOrEmpty(param.ToDate))
                    //{
                    //    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    //}

                    cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                ProductDAL dal = new ProductDAL();

                //table.Columns["Receive_DateTime"].ReadOnly = false;

                foreach (DataRow tableRow in table.Rows)
                {
                    string itemCode = tableRow["Item_Code"].ToString();

                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { itemCode });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                        continue;

                    tableRow["UOM"] = vm.UOM;

                    DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                        Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                    //tableRow["Receive_DateTime"] =
                    //Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd");

                    tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                        ? "0"
                        : dt.Rows[0]["NBRPrice"].ToString();


                }
                table.AcceptChanges();

                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceive_DetailACIDbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM SaveACIReceive_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();

            #region try

            try
            {

                DataTable dtReceive = new DataTable();
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode });
                paramVM.dtConnectionInfo = dtBranchInfo;

                dtReceive = GetReceive_DetailACIDbDataWeb(paramVM);

                if (dtReceive == null || dtReceive.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }
                IntegrationParam param = new IntegrationParam
                {
                    Data = dtReceive,
                    callBack = () => { },
                    SetSteps = (s) => { },
                    DefaultBranchId = paramVM.DefaultBranchId,
                    TransactionType = paramVM.TransactionType,
                    CurrentUser = paramVM.CurrentUser,
                };
                ReceiveDAL ReceiveDal = new ReceiveDAL();

                sqlResults = ReceiveDal.SaveReceive_Split(param);


                //////////if (sqlResults[0].ToLower() == "success")
                //////////{


                //////////    string[] results = UpdateACITransactions(dtReceive, dtBranchInfo, null, "Receives");

                //////////}

                if (sqlResults[0].ToLower() == "success")
                {
                    rVM.Status = sqlResults[0];
                    rVM.Message = "Saved Successfully";
                }
                else
                {
                    rVM.Status = sqlResults[0];
                    rVM.Message = MessageVM.saleMsgSaveNotSuccessfully;
                }                

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveACIReceive_Web", ex.ToString());

                rVM.Message = ex.Message;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        #endregion

        #region Issue

        public DataTable GetIssueACIDbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


SELECT 
      [ID]
      ,0 Selected
      ,[BranchCode]
      , Sum ([Quantity]) [Quantity]
      ,[UOM]    
      ,[Post]
      
      ,[IsProcessed]
	  
  FROM Issues where  1=1
 "; //07/0007401
                    //IsProcessed = 'N'  ,[IsProcessed] Added by JUBAYER

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;
                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);


                    //Starting JUBAYER



                    if (string.IsNullOrEmpty(param.Processed))
                    {
                        sqlText += " and IsProcessed = 'N'";
                    }
                    else if (param.Processed != "ALL")
                    {
                        sqlText += " and IsProcessed = '" + param.Processed + "'";
                    }


                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += @" and ID in (";
                        foreach (string id in param.IDs)
                        {
                            sqlText += "'" + id + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }

                    /**       
                       if (param.Processed == "Y" || param.Processed == "N")
                       {
                           sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                       }
                       if (param.PostStatus == "Y" || param.PostStatus == "N")
                       {
                           sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                       }

                                   


               
     
                                      
              
                                      */






                    ///Added By jubayer

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and TransactionType = 'Issue' ";
                    }
                    else if (param.TransactionType == "IssueReturn")
                    {
                        sqlText += " and TransactionType = 'IssueReturn' ";

                    }

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and ID = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and Issue_DateTime >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and Issue_DateTime <= @toDate";
                    }



                    sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";


                    #endregion

                    #region Group By

                    sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
      [ID]   
      ,[BranchCode]
      ,[UOM]
      ,[Post]

      ,[IsProcessed]

";
                    //      ,[IsProcessed] JUBAYER
                    #endregion


                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetIssueACIDbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetIssue_DetailACIDbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


SELECT 
      [ID]
      ,[BranchCode]
      ,cast( [Issue_DateTime] as varchar(200))Issue_DateTime
      ,[ProductCode] Item_Code
      ,[ProductName] Item_Name
      ,[Quantity]
      ,[UOM]
      ,[Reference_No]
      ,''[Comments]
      ,[Post]
	  ,IsProcessed

  FROM Issues where 1=1   
 "; //07/0007401
                    //removed and IsProcessed = 'N' 	  ,IsProcessed JUBAYER 4152021

                    if (string.IsNullOrEmpty(param.Processed))
                    {
                        sqlText += " and IsProcessed = 'N'";
                    }
                    else if (param.Processed != "ALL")
                    {
                        sqlText += " and IsProcessed = '" + param.Processed + "'";
                    }



                    ///Added By jubayer


                    string dbName = "";
                    ////if (code == "ACI-1")
                    ////{
                    ////    dbName = "ACI2012_Demo_DB";
                    ////}
                    ////else if (code == "CEPL")
                    ////{
                    ////    dbName = "PPL2012_Demo_DB";

                    ////}
                    ////else if (code.ToLower() == "core cb")
                    ////{
                    ////    dbName = "ACIC2012_Demo_DB";

                    ////}
                    ////else
                    ////{
                    ////    dbName = DatabaseInfoVM.DatabaseName;
                    ////}

                    dbName = DatabaseInfoVM.DatabaseName;

                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and TransactionType = 'Issue' ";
                    }
                    else if (param.TransactionType == "IssueReturn")
                    {
                        sqlText += " and TransactionType = 'IssueReturn' ";

                    }


                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and ID in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }



                    sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";


                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram


                    cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                ProductDAL dal = new ProductDAL();

                //table.Columns["Receive_DateTime"].ReadOnly = false;

                foreach (DataRow tableRow in table.Rows)
                {
                    string item_Code = tableRow["Item_Code"].ToString();
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() }, null, null, null, connVM);

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                    {
                        continue;
                        //throw new Exception("Product Code not found in system " +item_Code);
                    }

                    tableRow["UOM"] = vm.UOM;

                }
                //table.AcceptChanges();

                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                //retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetIssue_DetailACIDbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM SaveACIIssue_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();

            #region try

            try
            {

                DataTable dtIssue = new DataTable();
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode }, null, null, true, connVM);
                paramVM.dtConnectionInfo = dtBranchInfo;

                dtIssue = GetIssue_DetailACIDbDataWeb(paramVM, connVM);

                if (dtIssue == null || dtIssue.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }
                IntegrationParam param = new IntegrationParam
                {
                    Data = dtIssue,
                    callBack = () => { },
                    SetSteps = (s) => { },
                    DefaultBranchId = paramVM.DefaultBranchId,
                    TransactionType = paramVM.TransactionType,
                    CurrentUser = paramVM.CurrentUser,
                };
                IssueDAL IssueDal = new IssueDAL();

                sqlResults = IssueDal.SaveIssue_Split(param, connVM);


                //if (sqlResults[0].ToLower() == "success")
                //{


                //    string[] results = UpdateACITransactions(dtIssue, dtBranchInfo, null, "Issues");

                //}

                //Ju rVM.Status = sqlResults[0];
                rVM.Status = "success";
                rVM.Message = "Saved Successfully";

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveACIIssue_Web", ex.ToString());

                rVM.Message = ex.Message;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public DataTable GetIssueACIDbData(string invoiceNo, string transactionType,
            string fromDate, string toDate, DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"



SELECT 
      [ID]
      ,[BranchCode]
      ,[Issue_DateTime]
      ,[ProductCode] Item_Code
      ,'-' Item_Name
      ,[Quantity]
      ,'-' [UOM]
      ,[Reference_No]
      ,''[Comments]
      ,[Post]

  FROM Issues where IsProcessed = 'N'   
 "; //07/0007401


                if (transactionType == "Other")
                {
                    sqlText += " and TransactionType = 'Issue' ";
                }
                else if (transactionType == "IssueReturn")
                {
                    sqlText += " and TransactionType = 'IssueReturn' ";

                }

                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    sqlText += " and ID = @rid";
                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    sqlText += " and Format(cast(Issue_DateTime as datetime),'yyyy-MM-dd') >= @fromDate";
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    sqlText += " and Format(cast(Issue_DateTime as datetime),'yyyy-MM-dd') <= @toDate";
                }

                sqlText += "  and CompanyCode = @CompanyCode ";
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    cmd.Parameters.AddWithValue("@rid", invoiceNo);

                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", fromDate);
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", toDate);
                }
                string code = commonDal.settingValue("CompanyCode", "Code");
                cmd.Parameters.AddWithValue("@CompanyCode", code);

                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                //foreach (DataRow tableRow in table.Rows)
                //{
                //    var item_Code = tableRow["Item_Code"].ToString();
                //    var vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                //    var vm = vms.FirstOrDefault();

                //    if (vm == null)
                //    {
                //        continue;
                //        //throw new Exception("Product Code not found in system " +item_Code);
                //    }

                //    tableRow["UOM"] = vm.UOM;

                //}

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetIssueACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        #endregion

        #region Transfer

        public DataTable GetTransferACIDbData(string invoiceNo, string transactionType,
           string fromDate, string toDate, DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText


                string updateIntegrationTable = @"

update TransferIssues set BranchFromVAT = @db.dbo.BranchMapDetails.BranchCode
from @db.dbo.BranchMapDetails 
where @db.dbo.BranchMapDetails.IntegrationCode = TransferIssues.BranchCode and TransferIssues.BranchFromVAT is null @condition


update TransferIssues set BranchToVAT = @db.dbo.BranchMapDetails.BranchCode
from @db.dbo.BranchMapDetails 
where @db.dbo.BranchMapDetails.IntegrationCode = TransferIssues.TransferToBranchCode and TransferIssues.BranchToVAT is null @condition";


                sqlText = @"
SELECT [ID]
      ,BranchFromVAT BranchCode
      ,BranchToVAT TransferToBranchCode
      ,format([TransactionDateTime],'yyyy-MM-dd')TransactionDateTime
      ,[ProductType] TransactionType
      ,[ProductCode]
      ,[ProductName]
      ,[UOM]
      ,[Quantity]
      ,[CostPrice]
      ,[Post]
      ,[VAT_Rate]
      ,ID ReferenceNo
      ,BranchCode BranchFromRef
      ,TransferToBranchCode BranchToRef
      , Comments 
      , ISNULL(NULLIF(VehicleNo, ''), 'NA')VehicleNo
      , ISNULL(NULLIF(VehicleType, ''), 'NA')VehicleType
  FROM TransferIssues where IsProcessed = 'N'  and isnull(BranchToVAT,'#') != BranchFromVAT    @condition 
 "; //07/0007401


                string conditionText = "";

                if (transactionType.ToLower() == "finish")
                {
                    conditionText += " and ProductType = 'Finish' ";
                }
                else if (transactionType.ToLower() == "raw")
                {
                    conditionText += " and ProductType = 'Raw' ";

                }

                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    conditionText += " and ID = @rid";
                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    conditionText += " and TransactionDateTime >= @fromDate";
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    conditionText += " and TransactionDateTime <= @toDate";
                }

                conditionText += "  and CompanyCode = @CompanyCode ";


                string code = commonDal.settingValue("CompanyCode", "Code");
                string dbName = "";

                #region DB Select

                if (code == "ACI-1")
                {
                    dbName = "ACI2012_Demo_DB";
                }
                else if (code == "CEPL")
                {
                    dbName = "PPL2012_Demo_DB";
                }
                else if (code.ToLower() == "core cb")
                {
                    dbName = "ACIC2012_Demo_DB";
                }
                else
                {
                    dbName = DatabaseInfoVM.DatabaseName;
                }
                #endregion

                updateIntegrationTable = updateIntegrationTable.Replace("@db", dbName);
                updateIntegrationTable = updateIntegrationTable.Replace("@condition", conditionText);

                conditionText += "  and BranchFromVAT = '" +
                                 conInfo.Rows[0]["BranchCode"] + "'";

                sqlText = sqlText.Replace("@condition", conditionText);

                #endregion

                SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn, transaction);
                cmd.CommandTimeout = 500;

                #region Peram

                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    cmd.Parameters.AddWithValue("@rid", invoiceNo);

                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", fromDate);
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", toDate);
                }

                cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                cmd.ExecuteNonQuery();
                cmd.CommandText = sqlText;

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["ProductCode"].ToString() });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm != null)
                    {
                        tableRow["UOM"] = vm.UOM;
                        tableRow["CostPrice"] = vm.NBRPrice;
                        tableRow["VAT_Rate"] = vm.VATRate;
                    }

                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetTransferACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateACIMasterID_Transfer(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);

                #region Sql Text

                string sqlText = @"";
                string Vehicle_No = null;
                string Vehicle_Type = null;

                if (!string.IsNullOrWhiteSpace(paramVM.VehicleNo))
                {
                    Vehicle_No = paramVM.VehicleNo;
                }
                if (!string.IsNullOrWhiteSpace(paramVM.VehicleType))
                {
                    Vehicle_Type = paramVM.VehicleType;
                }

                #endregion

                #region Sql Command

                int len = paramVM.IDs.Count;
                string ID = string.Join(",", paramVM.IDs);

                sqlText = sqlText + @" Update TransferIssues Set PreID=ID, PreCustomerCode=TransferToBranchCode " + "where ID in ( ";

                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + paramVM.IDs[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                sqlText += " update TransferIssues set ID =" + "'" + ID + "'," + "TransferToBranchCode =" + "'" + paramVM.ToBranchCode +
                    "'" + "," + "TransactionDateTime =" + "'" + paramVM.InvoiceDateTime +
                    "'" + "," + "VehicleNo =" + "'" + Vehicle_No +
                    "'" + "," + "VehicleType =" + "'" + Vehicle_Type + "'" + " where ID in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + paramVM.IDs[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                #region ACI CB HYGINE

                if (code == "ACI CB HYGINE" && paramVM.BranchCode == "P001") //|| code.ToLower() == "ah modonpur central wh" && paramVM.BranchCode == "001"
                {
                    sqlText = @" Update SaleInvoices Set PreID=ID, PreCustomerCode=CustomerCode " + "where ID in ( ";

                    for (int i = 0; i < len; i++)
                    {
                        sqlText += "'" + paramVM.IDs[i] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',');

                    sqlText += ")";

                    sqlText += " update SaleInvoices set ID =" + "'" + ID + "'," + "CustomerCode =" + "'" + paramVM.ToBranchCode +
                        "'" + "," + "Invoice_Date_Time =" + "'" + paramVM.InvoiceDateTime +
                        "'" + "," + "Delivery_Date_Time =" + "'" + paramVM.InvoiceDateTime +
                        "'" + "," + "VehicleNo =" + "'" + Vehicle_No +
                        "'" + "," + "VehicleType =" + "'" + Vehicle_Type + "'" + " where ID in ( ";

                    for (int i = 0; i < len; i++)
                    {
                        sqlText += "'" + paramVM.IDs[i] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',');

                    sqlText += ")";

                }

                #endregion


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";
                retResults[2] = ID;
                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "UpdateACIMasterID_Transfer", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

        }

        public string[] ReUpdateACIMaster_Transfer(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);

                #region Sql Text

                string sqlText = @"";

                #endregion

                #region Sql Command

                int len = paramVM.IDs.Count;
                string ID = string.Join(",", paramVM.IDs);

                sqlText = @"Update TransferIssues Set ID=PreID, TransferToBranchCode=PreCustomerCode where ID=" + "'" + ID + "'";

                if (code.ToLower() == "ACI CB HYGINE".ToLower() && paramVM.BranchCode == "P001")
                {
                    sqlText = @" Update SaleInvoices Set ID=PreID, CustomerCode=PreCustomerCode where ID=" + "'" + ID + "'";
                }
                ////                else if (code.ToLower() == "ah modonpur central wh".ToLower())
                ////                {
                ////                    if (paramVM.BranchCode == "001" || paramVM.BranchCode.ToLower() == "AE".ToLower() || paramVM.BranchCode.ToLower() == "GA".ToLower() || paramVM.BranchCode.ToLower() == "GB".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GC".ToLower() || paramVM.BranchCode.ToLower() == "GD".ToLower() || paramVM.BranchCode.ToLower() == "GE".ToLower() || paramVM.BranchCode.ToLower() == "GF".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GG".ToLower() || paramVM.BranchCode.ToLower() == "GH".ToLower() || paramVM.BranchCode.ToLower() == "GI".ToLower() || paramVM.BranchCode.ToLower() == "GJ".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GK".ToLower() || paramVM.BranchCode.ToLower() == "GL".ToLower() || paramVM.BranchCode.ToLower() == "GN".ToLower() || paramVM.BranchCode.ToLower() == "GP".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GQ".ToLower() || paramVM.BranchCode.ToLower() == "GT".ToLower())
                ////                    {
                ////                        sqlText = @" Update SaleInvoices Set ID=PreID, CustomerCode=PreCustomerCode where ID=" + "'" + ID + "'";                    
                ////                    }
                ////                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                int rows = cmd.ExecuteNonQuery();

                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";
                retResults[2] = ID;
                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "UpdateACIMasterID", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public DataTable GetSource_TransferData_Master(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtTransferMaster = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {
                string code = commonDal.settingValue("CompanyCode", "Code");

                if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "P001")
                {
                    dtTransferMaster = GetSource_TransferData_Master_CBHygine(paramVM, connVM);

                    return dtTransferMaster;

                }

                #region Comments

                ////                else if (code.ToLower() == "ah modonpur central wh")
                ////                {
                ////                    if (paramVM.BranchCode == "001" || paramVM.BranchCode.ToLower() == "AE".ToLower() || paramVM.BranchCode.ToLower() == "GA".ToLower() || paramVM.BranchCode.ToLower() == "GB".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GC".ToLower() || paramVM.BranchCode.ToLower() == "GD".ToLower() || paramVM.BranchCode.ToLower() == "GE".ToLower() || paramVM.BranchCode.ToLower() == "GF".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GG".ToLower() || paramVM.BranchCode.ToLower() == "GH".ToLower() || paramVM.BranchCode.ToLower() == "GI".ToLower() || paramVM.BranchCode.ToLower() == "GJ".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GK".ToLower() || paramVM.BranchCode.ToLower() == "GL".ToLower() || paramVM.BranchCode.ToLower() == "GN".ToLower() || paramVM.BranchCode.ToLower() == "GP".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GQ".ToLower() || paramVM.BranchCode.ToLower() == "GT".ToLower())
                ////                    {
                ////                        dtTransferMaster = GetSource_TransferData_Master_CBHygine(paramVM, connVM);

                ////                        return dtTransferMaster;
                ////                    }

                ////                }

                #endregion

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                string TableName = "ACIData.dbo.TransferIssues";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_TransferIssues";
                }

                string updateIntegrationTable = @"
                
                update ACIData.dbo.TransferIssues set BranchFromVAT = BranchMapDetails.BranchCode
                from BranchMapDetails 
                where BranchMapDetails.IntegrationCode = ACIData.dbo.TransferIssues.BranchCode and ACIData.dbo.TransferIssues.BranchFromVAT is null @condition
                
                
                update ACIData.dbo.TransferIssues set BranchToVAT = BranchMapDetails.BranchCode
                from BranchMapDetails 
                where BranchMapDetails.IntegrationCode = ACIData.dbo.TransferIssues.TransferToBranchCode and ACIData.dbo.TransferIssues.BranchToVAT is null @condition";



                sqlText = @"

SELECT
0		                                                        Selected
,InvoiceNo												        InvoiceNo
,ID														        ID
,Post                                                           Post
,IsPrint                                                        IsPrint
,ReferenceNo                                                    ReferenceNo
,BranchCode												        BranchCode
,TransferToBranchCode									        TransferToBranchCode
,cast(TransactionDateTime as varchar(20)) 				        TransactionDateTime
, VehicleNo 											        VehicleNo
, VehicleType 											        VehicleType
,SUM(Quantity)											        TotalQuantity
,SUM(CostPrice)											        TotalCostPrice
, IsProcessed											        Processed

FROM " + TableName +
@"
WHERE 1=1 and Quantity > 0 @condition


----------------------------------------!Care on GROUP BY---------------------------------------- 
";

                #region Filtering

                string condtionText = "";

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(Post,'N')=@PostStatus";
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    condtionText = condtionText + @" AND ID = @InvoiceNo";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    condtionText = condtionText + @" AND TransactionDateTime >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    condtionText = condtionText + @" AND TransactionDateTime < dateadd(d,1,@toDate)";
                }

                //string code = commonDal.settingValue("CompanyCode", "Code");

                //////if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "AT")
                //////{

                //////    code = "Core CB";

                //////}

                condtionText += " and companyCode = '" + code + "' ";

                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    sqlText = sqlText + @" AND BranchCode=@BranchCode";
                //}

                updateIntegrationTable = updateIntegrationTable.Replace("@condition", condtionText);

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
InvoiceNo
,ID
,BranchCode
,TransferToBranchCode
,TransactionDateTime
,VehicleNo
,VehicleType
,IsProcessed
,Post
,ReferenceNo
,IsPrint

";

                #endregion

                sqlText += " ORDER BY TransactionDateTime";

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn);
                cmd.CommandTimeout = 5000;

                #region Parameter Value

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                cmd.ExecuteNonQuery();

                condtionText += "  and BranchFromVAT = '" +
                                paramVM.BranchCode + "'";


                sqlText = sqlText.Replace("@condition", condtionText);
                cmd.CommandText = sqlText;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                #endregion

                #region Selected Data

                if (dtTransferMaster != null && dtTransferMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtTransferMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtTransferMaster.Select("ID  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtTransferMaster = new DataTable();
                        dtTransferMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_TransferData_Master", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }

        public DataTable GetTransferData_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            DataTable dt = new DataTable();


            #endregion

            #region try

            try
            {

                CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();
                DataTable getData = new DataTable();

                string code = commonDal.settingValue("CompanyCode", "Code");

                if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "P001")
                {
                    getData = GetTransferData_CBHygine(paramVM, connVM);

                    getData.Columns.Remove("IsProcessed");
                    getData.Columns.Remove("IsPrint");
                    getData.Columns.Remove("InvoiceNo");

                }
                ////                else if (code.ToLower() == "ah modonpur central wh")
                ////                {
                ////                    if (paramVM.BranchCode == "001" || paramVM.BranchCode.ToLower() == "AE".ToLower() || paramVM.BranchCode.ToLower() == "GA".ToLower() || paramVM.BranchCode.ToLower() == "GB".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GC".ToLower() || paramVM.BranchCode.ToLower() == "GD".ToLower() || paramVM.BranchCode.ToLower() == "GE".ToLower() || paramVM.BranchCode.ToLower() == "GF".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GG".ToLower() || paramVM.BranchCode.ToLower() == "GH".ToLower() || paramVM.BranchCode.ToLower() == "GI".ToLower() || paramVM.BranchCode.ToLower() == "GJ".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GK".ToLower() || paramVM.BranchCode.ToLower() == "GL".ToLower() || paramVM.BranchCode.ToLower() == "GN".ToLower() || paramVM.BranchCode.ToLower() == "GP".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GQ".ToLower() || paramVM.BranchCode.ToLower() == "GT".ToLower())
                ////                    {
                ////                        getData = GetTransferData_CBHygine(paramVM, connVM);

////                        getData.Columns.Remove("IsProcessed");
                ////                        getData.Columns.Remove("IsPrint");
                ////                        getData.Columns.Remove("InvoiceNo");
                ////                    }
                ////                }
                else
                {
                    getData = GetTransferData(paramVM, connVM);
                }

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region SQLText

                #region tempTable

                string tempTable = @"
create table #temp(
       SL varchar(100)
	  ,ID varchar(100)
      ,BranchCode varchar(100)
	  ,TransactionDateTime datetime	  
      ,TransactionType varchar(100)
	  ,ProductCode varchar(100)
      ,ProductName varchar(100)
      ,UOM varchar(100)
	  ,Quantity decimal(25,9)
	  ,CostPrice decimal(25,9)
	  ,TransferToBranchCode varchar(100)
	  ,Post varchar(100)
	  ,VAT_Rate decimal(25,9)
	  ,ReferenceNo varchar(100)
	  ,Comments varchar(300)
	  ,ItemNo varchar(100)
	  ,BranchId varchar(100)
	  ,BomId varchar(100)
	  ,TransferToBranchId varchar(100)	  
	  ,CommentsD varchar(100)
	  ,Weight varchar(100)
	  ,BranchFromRef varchar(100)
	  ,BranchToRef varchar(100)
	  ,VehicleNo varchar(100)
	  ,VehicleType varchar(100)
)
";
                #endregion

                #region Update and Select Text

                string updateItemName = @"
update #temp set ProductName = Products.ProductName from Products 
where Products.ProductCode = #temp.ProductCode 
";

                sqlText = @"

select * from #temp

drop table #temp
";

                #endregion

                #endregion

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                retResults = commonDal.BulkInsert("#temp", getData, currConn, transaction);

                cmd.CommandText = updateItemName;
                cmd.ExecuteNonQuery();

                cmd.CommandText = sqlText;
                cmd.CommandTimeout = 500;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);

                return dt;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetTransferData_Web", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetTransferData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtTransferMaster = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(paramVM.SysDbInfoVmTemp);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                string TableName = "ACIData.dbo.TransferIssues";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_TransferIssues";
                }

                string updateIntegrationTable = @"
                
                update ACIData.dbo.TransferIssues set BranchFromVAT = BranchMapDetails.BranchCode
                from BranchMapDetails 
                where BranchMapDetails.IntegrationCode = ACIData.dbo.TransferIssues.BranchCode and ACIData.dbo.TransferIssues.BranchFromVAT is null @condition
                
                
                update ACIData.dbo.TransferIssues set BranchToVAT = BranchMapDetails.BranchCode
                from BranchMapDetails 
                where BranchMapDetails.IntegrationCode = ACIData.dbo.TransferIssues.TransferToBranchCode and ACIData.dbo.TransferIssues.BranchToVAT is null @condition";



                sqlText = @"
SELECT
    0									SL
  , Id									ID
  , BranchFromVAT							BranchCode
  ,format([TransactionDateTime],'yyyy-MM-dd')TransactionDateTime
  , ProductType							TransactionType
  , ProductCode							ProductCode
  , ProductName							ProductName
  , UOM									UOM
  , Quantity							Quantity
  ,	CostPrice							CostPrice
  , BranchToVAT				TransferToBranchCode
  , Post							    Post
  , VAT_Rate								VAT_Rate
  , ID							ReferenceNo
  , Comments							Comments
  , 0									ItemNo
  , 0									BranchId
  , 0									BomId
  , 0									TransferToBranchId
  , ''									CommentsD
  , ''									Weight

  ,BranchCode BranchFromRef
  ,TransferToBranchCode BranchToRef
  , ISNULL(NULLIF(VehicleNo, ''), 'NA')VehicleNo
  , ISNULL(NULLIF(VehicleType, ''), 'NA')VehicleType

FROM " + TableName +
@"
WHERE 1=1 and BranchToVAT != BranchFromVAT @condition

";

                #region Filtering

                string condtionText = "";

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(Post,'N')=@PostStatus";
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                }
                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    sqlText = sqlText + @" AND ID IN('" + IDs + "')";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    condtionText = condtionText + @" AND ID = @InvoiceNo";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    condtionText = condtionText + @" AND TransactionDateTime >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    condtionText = condtionText + @" AND TransactionDateTime < dateadd(d,1,@toDate)";
                }

                string code = commonDal.settingValue("CompanyCode", "Code");

                if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "AT")
                {

                    code = "Core CB";

                }

                condtionText += " and companyCode = '" + code + "' ";


                updateIntegrationTable = updateIntegrationTable.Replace("@condition", condtionText);

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn);
                cmd.CommandTimeout = 500;
                #region Parameter Value

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                cmd.ExecuteNonQuery();

                condtionText += "  and BranchFromVAT = '" +
                                paramVM.BranchCode + "'";


                sqlText = sqlText.Replace("@condition", condtionText);
                cmd.CommandText = sqlText;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                ProductDAL dal = new ProductDAL();
                foreach (DataRow tableRow in dtTransferMaster.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" },
                        new[] { tableRow["ProductCode"].ToString() }, null, null, null, paramVM.SysDbInfoVmTemp);

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm != null)
                    {
                        tableRow["UOM"] = vm.UOM;
                        tableRow["CostPrice"] = vm.NBRPrice;
                        tableRow["VAT_Rate"] = vm.VATRate;
                    }

                }


                #endregion
                #endregion


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetTransferData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }

        public DataTable GetSource_TransferData_Master_CBHygine(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtTransferMaster = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #endregion

            #region try

            try
            {

                DataTable getData = GetTransferData_CBHygine(paramVM, connVM);

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region tempTable

                string tempTable = @"
create table #temp(
       SL varchar(100)
	  ,ID varchar(100)
      ,BranchCode varchar(100)
	  ,TransactionDateTime datetime	  
      ,TransactionType varchar(100)
	  ,ProductCode varchar(100)
      ,ProductName varchar(100)
      ,UOM varchar(100)
	  ,Quantity decimal(25,9)
	  ,CostPrice decimal(25,9)
	  ,TransferToBranchCode varchar(100)
	  ,Post varchar(100)
	  ,VAT_Rate decimal(25,9)
	  ,ReferenceNo varchar(100)
	  ,Comments varchar(300)
	  ,ItemNo varchar(100)
	  ,BranchId varchar(100)
	  ,BomId varchar(100)
	  ,TransferToBranchId varchar(100)	  
	  ,CommentsD varchar(100)
	  ,Weight varchar(100)
	  ,BranchFromRef varchar(100)
	  ,BranchToRef varchar(100)
	  ,VehicleNo varchar(100)
	  ,VehicleType varchar(100)

	  ,IsProcessed varchar(100)
	  ,IsPrint varchar(100)
	  ,InvoiceNo varchar(100)

)
";
                #endregion

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                string[] retResults = commonDal.BulkInsert("#temp", getData, currConn, transaction);

                #region SQLText

                string TableName = "#temp";

                sqlText = @"

SELECT
0		                                                        Selected
,InvoiceNo												        InvoiceNo
,ID														        ID
,Post                                                           Post
,IsPrint                                                        IsPrint
,ReferenceNo                                                    ReferenceNo
,BranchCode												        BranchCode
,TransferToBranchCode									        TransferToBranchCode
,cast(TransactionDateTime as varchar(20)) 				        TransactionDateTime
, VehicleNo 											        VehicleNo
, VehicleType 											        VehicleType
,SUM(Quantity)											        TotalQuantity
,SUM(CostPrice)											        TotalCostPrice
, IsProcessed											        Processed

FROM " + TableName +
@"
WHERE 1=1 and Quantity > 0

----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @"  AND BranchCode =@BranchCode ";
                }


                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
InvoiceNo
,ID
,BranchCode
,TransferToBranchCode
,TransactionDateTime
,VehicleNo
,VehicleType
,IsProcessed
,Post
,ReferenceNo
,IsPrint

";

                #endregion

                sqlText += " ORDER BY TransactionDateTime";

                #endregion

                #region SQLExecution

                ////sqlText = sqlText.Replace("@condition", condtionText);

                cmd = new SqlCommand(sqlText, currConn, transaction);

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                }

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                #endregion

                #region Selected Data

                if (dtTransferMaster != null && dtTransferMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtTransferMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtTransferMaster.Select("ID  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtTransferMaster = new DataTable();
                        dtTransferMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_TransferData_Master_CBHygine", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }

        public DataTable GetTransferData_CBHygine(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtTransferMaster = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(paramVM.SysDbInfoVmTemp);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                string TableName = "ACIData.dbo.SaleInvoices";


                sqlText = @"
SELECT
    0									SL
  , Id									ID
  ,bmd.BranchCode						BranchCode
  ,format(Invoice_Date_Time,'yyyy-MM-dd')TransactionDateTime
  , ''							TransactionType
  , ProductCode							ProductCode
  , ProductName							ProductName
  , UOM									UOM
  , Quantity							Quantity
  ,	0							        CostPrice
  ,CustomerCode							TransferToBranchCode 
  , ISNULL(Post,'N')					Post
  , VAT_Rate						    VAT_Rate
  , ID							        ReferenceNo
  , Comments							Comments
  , 0									ItemNo
  , 0									BranchId
  , 0									BomId
  , 0									TransferToBranchId
  , ''									CommentsD
  , ''									Weight
  ,Branch_Code							BranchFromRef
  ,CustomerCode                         BranchToRef
  , ISNULL(NULLIF(VehicleNo, ''), 'NA')VehicleNo
  , ISNULL(NULLIF(VehicleType, ''), 'NA')VehicleType
,ISNULL(IsProcessed,'N')IsProcessed
,ISNULL(IsPrint,'N')IsPrint
,ISNULL(InvoiceNo,'')InvoiceNo
FROM " + TableName +
@"
sal
left outer join BranchMapDetails bmd on bmd.IntegrationCode=sal.Branch_Code

WHERE 1=1 and Branch_Code != CustomerCode @condition

";

                #region Filtering

                string condtionText = "";

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(Post,'N')=@PostStatus";
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    condtionText = condtionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                }
                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    sqlText = sqlText + @" AND ID IN('" + IDs + "')";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    condtionText = condtionText + @" AND ID = @InvoiceNo";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    condtionText = condtionText + @" AND Invoice_Date_Time >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    condtionText = condtionText + @" AND Invoice_Date_Time < dateadd(d,1,@toDate)";
                }

                string code = commonDal.settingValue("CompanyCode", "Code");

                condtionText += " and companyCode = '" + code + "' ";

                if (code == "AH MODONPUR CENTRAL WH")
                {
                    condtionText += " and CustomerCode in('GA','GE','GK','GB','T','H','GJ','C','GD','GG','AE','GH','GF','GC','GI','D','GM','AG','GP','GT','GN','GL','GQ')";
                }
                else
                {
                    condtionText += " and CustomerCode = 'AT' ";
                }

                //updateIntegrationTable = updateIntegrationTable.Replace("@condition", condtionText);

                #endregion

                #region SQLExecution

                ////condtionText += "  and BranchFromVAT = '" + paramVM.BranchCode + "'";


                sqlText = sqlText.Replace("@condition", condtionText);

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Parameter Value

                if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                {
                    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                }
                if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                }
                if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                {
                    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }


                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                ProductDAL dal = new ProductDAL();
                foreach (DataRow tableRow in dtTransferMaster.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" },
                        new[] { tableRow["ProductCode"].ToString() }, null, null, null, paramVM.SysDbInfoVmTemp);

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm != null)
                    {
                        tableRow["UOM"] = vm.UOM;
                        tableRow["CostPrice"] = vm.NBRPrice;
                        tableRow["VAT_Rate"] = vm.VATRate;
                        tableRow["TransactionType"] = vm.IsRaw;
                    }

                }


                #endregion
                #endregion


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetTransferData_CBHygine", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }

        public ResultVM SaveTransfer_ACI(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            ResultVM rVM = new ResultVM();
            CommonDAL commonDal = new CommonDAL();

            #region try

            try
            {
                string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode });
                paramVM.dtConnectionInfo = dtBranchInfo;

                if (paramVM.IsMultiple && !string.IsNullOrEmpty(paramVM.ToBranchCode))
                {
                    string[] results = UpdateACIMasterID_Transfer(paramVM, connVM);
                    paramVM.IDs = new List<string>();
                    paramVM.IDs.Add(results[2]);
                    paramVM.FromDate = "";
                    paramVM.ToDate = "";
                }

                DataTable dtTransfer = new DataTable();
                if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "P001")
                {
                    dtTransfer = GetTransferData_CBHygine(paramVM);

                    dtTransfer.Columns.Remove("IsProcessed");
                    dtTransfer.Columns.Remove("IsPrint");
                    dtTransfer.Columns.Remove("InvoiceNo");

                }
                ////                else if (code.ToLower() == "ah modonpur central wh" )
                ////                {
                ////                    if (paramVM.BranchCode == "001" || paramVM.BranchCode.ToLower() == "AE".ToLower()|| paramVM.BranchCode.ToLower() == "GA".ToLower() || paramVM.BranchCode.ToLower() == "GB".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GC".ToLower() || paramVM.BranchCode.ToLower() == "GD".ToLower()|| paramVM.BranchCode.ToLower() == "GE".ToLower() || paramVM.BranchCode.ToLower() == "GF".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GG".ToLower() || paramVM.BranchCode.ToLower() == "GH".ToLower()|| paramVM.BranchCode.ToLower() == "GI".ToLower() || paramVM.BranchCode.ToLower() == "GJ".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GK".ToLower() || paramVM.BranchCode.ToLower() == "GL".ToLower()|| paramVM.BranchCode.ToLower() == "GN".ToLower() || paramVM.BranchCode.ToLower() == "GP".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GQ".ToLower() || paramVM.BranchCode.ToLower() == "GT".ToLower())
                ////                    {
                ////                        dtTransfer = GetTransferData_CBHygine(paramVM);

////                        dtTransfer.Columns.Remove("IsProcessed");
                ////                        dtTransfer.Columns.Remove("IsPrint");
                ////                        dtTransfer.Columns.Remove("InvoiceNo");
                ////                    }
                ////                    else
                ////                    {
                ////                        dtTransfer = GetTransferData(paramVM);
                ////                    }

////                }
                else
                {
                    dtTransfer = GetTransferData(paramVM);
                }


                if (dtTransfer == null || dtTransfer.Rows.Count == 0)
                {
                    if (paramVM.IsMultiple && !string.IsNullOrEmpty(paramVM.ToBranchCode))
                    {
                        string[] results = ReUpdateACIMaster_Transfer(paramVM, connVM);
                    }

                    rVM.Message = "This Transaction Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                if (paramVM.IDs == null || paramVM.IDs.Count == 0)
                {
                    paramVM.IDs = new List<string>();
                    paramVM.IDs.Add(paramVM.RefNo);

                }

                rVM = SaveTransfer(dtTransfer, paramVM, UserId, connVM);

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveTransfer_ACI", ex.ToString());

                rVM.Message = ex.Message;
                throw ex;

            }
            #endregion
            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public ResultVM SaveTransfer(DataTable dtTransfer, IntegrationParam paramVM, string UserId = "", SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();

            #region try

            try
            {

                TransferIssueDAL _TransferIssueDAL = new TransferIssueDAL();

                TableValidation_Transfer(dtTransfer, paramVM);

                sqlResults = _TransferIssueDAL.SaveTempTransfer(dtTransfer, null, null, paramVM.CurrentUser, 0,
                    () => { }, null, null, true, paramVM.SysDbInfoVmTemp, DateTime.Now.ToString("HH:mm:ss"), UserId);


                rVM = UpdateSource_TransferData(paramVM, paramVM.SysDbInfoVmTemp);

                rVM.Status = sqlResults[0];
                rVM.Message = "Data Saved Successfully";

                if (paramVM != null && !string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    TransferIssueVM varTransferIssueVM = new TransferIssueVM();
                    varTransferIssueVM = _TransferIssueDAL.SelectAllList(0, new[] { "ti.ImportIDExcel" }, new[] { paramVM.RefNo }, null, null, null).FirstOrDefault();

                    rVM.InvoiceNo = varTransferIssueVM.TransferIssueNo;
                }

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveTransfer", ex.ToString());

                rVM.Message = ex.Message;

                throw ex;


            }
            #endregion

            #region finally

            finally { }
            #endregion

            return rVM;

        }

        private void TableValidation_Transfer(DataTable dtTransfer, IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            if (!dtTransfer.Columns.Contains("SL"))
            {
                DataColumn varDataColumn = new DataColumn("SL") { DefaultValue = "" };
                dtTransfer.Columns.Add(varDataColumn);
            }
            if (!dtTransfer.Columns.Contains("BranchId"))
            {
                DataColumn varDataColumn = new DataColumn("BranchId") { DefaultValue = "" };
                dtTransfer.Columns.Add(varDataColumn);
            }
            if (!dtTransfer.Columns.Contains("TransferToBranchId"))
            {
                DataColumn varDataColumn = new DataColumn("TransferToBranchId") { DefaultValue = "" };
                dtTransfer.Columns.Add(varDataColumn);
            }
            if (!dtTransfer.Columns.Contains("VehicleNo"))
            {
                DataColumn varDataColumn = new DataColumn("VehicleNo") { DefaultValue = "" };
                dtTransfer.Columns.Add(varDataColumn);
            }

            if (!dtTransfer.Columns.Contains("BomId"))
            {
                DataColumn varDataColumn = new DataColumn("BomId") { DefaultValue = "" };
                dtTransfer.Columns.Add(varDataColumn);
            }

            if (!dtTransfer.Columns.Contains("ItemNo"))
            {
                DataColumn varDataColumn = new DataColumn("ItemNo") { DefaultValue = "" };
                dtTransfer.Columns.Add(varDataColumn);
            }

            if (!dtTransfer.Columns.Contains("Weight"))
            {
                DataColumn varDataColumn = new DataColumn("Weight") { DefaultValue = "" };
                dtTransfer.Columns.Add(varDataColumn);
            }

            ////var SL = new DataColumn("SL") { DefaultValue = "" };
            ////var CreatedBy = new DataColumn("CreatedBy") { DefaultValue = param.CurrentUser };
            ////var TransactionType = new DataColumn("TransactionType") { DefaultValue = param.TransactionType };


        }

        public ResultVM UpdateSource_TransferData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            ResultVM rVM = new ResultVM();
            CommonDAL commonDal = new CommonDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion



                string TableName = "ACIData.dbo.TransferIssues";

                string code = commonDal.settingValue("CompanyCode", "Code");

                if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "P001")
                {
                    TableName = "ACIData.dbo.SaleInvoices";

                }
                ////                else if (code.ToLower() == "ah modonpur central wh".ToLower())
                ////                {
                ////                    if (paramVM.BranchCode == "001" || paramVM.BranchCode.ToLower() == "AE".ToLower() || paramVM.BranchCode.ToLower() == "GA".ToLower() || paramVM.BranchCode.ToLower() == "GB".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GC".ToLower() || paramVM.BranchCode.ToLower() == "GD".ToLower() || paramVM.BranchCode.ToLower() == "GE".ToLower() || paramVM.BranchCode.ToLower() == "GF".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GG".ToLower() || paramVM.BranchCode.ToLower() == "GH".ToLower() || paramVM.BranchCode.ToLower() == "GI".ToLower() || paramVM.BranchCode.ToLower() == "GJ".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GK".ToLower() || paramVM.BranchCode.ToLower() == "GL".ToLower() || paramVM.BranchCode.ToLower() == "GN".ToLower() || paramVM.BranchCode.ToLower() == "GP".ToLower()
                ////|| paramVM.BranchCode.ToLower() == "GQ".ToLower() || paramVM.BranchCode.ToLower() == "GT".ToLower())
                ////                    {
                ////                        TableName = "ACIData.dbo.SaleInvoices";
                ////                    }
                ////                }
                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_TransferIssues";
                }

                string sqlText = @"";
                sqlText += @" 

UPDATE @TableName SET 
  IsProcessed = 'Y'
, InvoiceNo=tih.TransferIssueNo, Post=tih.Post   
FROM @TableName sTransfer 
INNER JOIN TransferIssues tih on sTransfer.ID=tih.ImportIDExcel
WHERE 1=1
";
                sqlText = sqlText.Replace("@TableName", TableName);
                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    sqlText = sqlText + @" AND sTransfer.ID IN('" + IDs + "')";

                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();

                transaction.Commit();
                rVM.Status = "Success";
                rVM.Message = "Source Data Updated Successfully!";

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "UpdateSource_TransferData", ex.ToString());

                rVM.Message = ex.Message;

                if (transaction != null)
                {
                    transaction.Rollback();
                }
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
            return rVM;
        }

        public ResultVM PostSource_TransferData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion


                SaleMasterVM varSaleMasterVM = new SaleMasterVM();
                varSaleMasterVM.IDs = paramVM.IDs;
                varSaleMasterVM.CurrentUser = paramVM.CurrentUser;
                TransferIssueDAL _TransferIssueDAL = new TransferIssueDAL();
                rVM = _TransferIssueDAL.Multiple_Post(paramVM, transaction, currConn, connVM);

                string TableName = "ACIData.dbo.TransferIssues";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_TransferIssues";
                }

                string sqlText = @"";
                sqlText += @" 
UPDATE " + TableName +
@" SET 
Post = 'Y'
FROM " + TableName + " sTransfer" +
@"
INNER JOIN TransferIssues tih on sTransfer.InvoiceNo=tih.TransferIssueNo
WHERE 1=1
";
                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    sqlText = sqlText + @" AND sTransfer.InvoiceNo IN('" + IDs + "')";

                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();

                transaction.Commit();

                rVM.Status = "Success";
                rVM.Message = "Source Data Updated Successfully!";

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "PostSource_TransferData", ex.ToString());

                rVM.Message = ex.Message;

                if (transaction != null)
                {
                    transaction.Rollback();
                }
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
            return rVM;
        }

        public ResultVM PrintSource_TransferData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            ResultVM rVM = new ResultVM();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                string TableName = "ACIData.dbo.TransferIssues";

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_TransferIssues";
                }

                string sqlText = @"";
                sqlText += @" 
UPDATE " + TableName +
@" SET 
IsPrint = 'Y'
FROM " + TableName + " sTransfer" +
@"
INNER JOIN TransferIssues tih on sTransfer.InvoiceNo=tih.TransferIssueNo
WHERE 1=1
";

                if (!string.IsNullOrWhiteSpace(paramVM.MulitipleInvoice))
                {
                    if (!paramVM.MulitipleInvoice.Contains("'"))
                    {
                        paramVM.MulitipleInvoice = "'" + paramVM.MulitipleInvoice + "'";
                    }
                    sqlText = sqlText + @" AND sTransfer.InvoiceNo IN(" + paramVM.MulitipleInvoice + ")";

                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();

                transaction.Commit();

                rVM.Status = "Success";
                rVM.Message = "Source Data Updated Successfully!";

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "PrintSource_TransferData", ex.ToString());

                rVM.Message = ex.Message;

                if (transaction != null)
                {
                    transaction.Rollback();
                }
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
            return rVM;
        }

        #endregion

        #region Toll

        public DataTable GetTollACIDbData(IntegrationParam param, string UserId = "", SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region Pharma Select

                string ACISelect = @"

create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
,PreviousInvoiceDateTime varchar(500)
,PreviousNBRPrice decimal(25,9)
,PreviousQuantity decimal(25,9)
,PreviousUOM varchar(500)
,PreviousSubTotal decimal(25,9)
,PreviousVATAmount decimal(25,9)
,PreviousVATRate decimal(25,9)
,PreviousSD decimal(25,9)
,PreviousSDAmount decimal(25,9)
,ReasonOfReturn varchar(500)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
, format(Invoice_Date_Time,'yyyy-MM-dd HH:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,0 NBR_Price
,UOM
,0 VAT_Rate
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,'' Vehicle_No
,''VehicleType
,'1900-01-01' PreviousInvoiceDateTime
,0PreviousNBRPrice
,0PreviousQuantity
,'-'PreviousUOM
,0PreviousSubTotal
,0PreviousVATAmount
,0PreviousVATRate
,0PreviousSD
,0PreviousSDAmount
,''ReasonOfReturn
FROM TollIssue AS sale


  WHERE 1=1  @condition


  update #temp set
  VAT_Rate = Products.VATRate, 
--SD_Rate = Products.SD,
--NBR_Price = Products.UnitPrice,
UOM = Products.UOM 
  from ACI2012_Demo_DB.dbo.Products 
  where Products.ProductCode = #temp.Item_Code 


   




  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   

  select * from #temp order by InvoiceNo

  drop table #temp";

                #endregion

                #region Plastic select

                string plasticSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,TotalPrice SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

  update #temp set 
	UOM = p.UOM,
	VAT_Rate = pc.VATRate,
	SD_Rate = p.SD
  from PPL2012_Demo_DB.dbo.Products p join 
  PPL2012_Demo_DB.dbo.ProductCategories pc on p.CategoryID = pc.CategoryID
  where p.ProductCode = #temp.Item_Code



   @creditUpdateQuery

   

  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

@exportUpdateQuery

  select * from #temp order by InvoiceNo

  drop table #temp";



                #endregion

                #region CoreCB select

                string CoreCBSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

update #temp set 
UOM = Products.UOM,
NBR_Price = Products.NBRPrice,
VAT_Rate = Products.VATRate,
SD_Rate = Products.SD
from ACIC2012_Demo_DB.dbo.Products  
where Products.ProductCode = #temp.Item_Code


   @creditUpdateQuery

   update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery


  select * from #temp order by InvoiceNo

  drop table #temp";



                #endregion

                sqlText = @"";

                string conditionText = "";
                string updateCreditNote = @"
   update #temp set Sale_Type = 'credit', Quantity =  Quantity * -1
   where Quantity < 0";

                string updateExportVatrate = @"update #temp set VAT_Rate = 0;
                
    update #temp set Currency_Code = '@defaultCurr';
   -- update #temp set NBR_Price = subtotal/quantity;
    update #temp set Type = 'Export'
";

                CommonDAL commonDal = new CommonDAL();

                string code = commonDal.settingValue("CompanyCode", "Code");
                string defaultCurrency = commonDal.settingValue("Sale", "DefualtForeignCurrency");

                #region Query Switch

                if (code == "CEPL")
                {
                    sqlText = plasticSelect;
                }
                else if (code == "CORE CB")
                {
                    sqlText = CoreCBSelect;
                }
                else
                {
                    sqlText = ACISelect;
                }

                #endregion

                #region DB Select

                string dbName = "";
                if (code == "ACI-1")
                {
                    dbName = "ACI2012_Demo_DB";
                }
                else if (code == "CEPL")
                {
                    dbName = "PPL2012_Demo_DB";
                }
                else if (code.ToLower() == "core cb")
                {
                    dbName = "ACIC2012_Demo_DB";
                }
                #endregion

                string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                      param.dtConnectionInfo.Rows[0]["BranchId"];

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                if (param.WithIsProcessed)
                {
                    conditionText +=
                        " and IsProcessed = 'Y' and ID IN (select distinct ID from " + dbName +
                        ".dbo.SalesInvoiceHeaderMasterTemp) and Branch_Code in (";

                    //+
                    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                }
                else
                {
                    conditionText += " and IsProcessed = 'N' and Branch_Code in (";

                    //+
                    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                }

                foreach (DataRow dataRow in branchMap.Rows)
                {
                    conditionText += "'" + dataRow["IntegrationCode"] + "',";
                }

                conditionText = conditionText.TrimEnd(',') + ")";

                if (param.TransactionType.ToLower() == "tollissue")
                {
                    conditionText += " and (TransactionType = 'tollissue' or TransactionType = 'STIIssue') and Quantity > 0 ";
                }

                else
                {
                    conditionText += " and TransactionType = '" + param.TransactionType + "' ";
                }



                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    conditionText += " and Sale.ID=@SalesInvoiceNo";
                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time <= @toDate";
                }

                conditionText += "  and CompanyCode = @CompanyCode";

                sqlText = sqlText.Replace("@condition", conditionText);

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);

                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                }

                cmd.Parameters.AddWithValue("@CompanyCode", code);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL productDal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    DataTable priceData = productDal.AvgPriceNew(tableRow["Item_Code"].ToString(),
                        Convert.ToDateTime(tableRow["Invoice_Date_Time"]).ToString("yyyy-MM-dd") +
                        DateTime.Now.ToString(" HH:mm:00"), null, null, true, true, true, false, null, UserId);

                    decimal amount = Convert.ToDecimal(priceData.Rows[0]["Amount"].ToString());
                    decimal quantity = Convert.ToDecimal(priceData.Rows[0]["Quantity"].ToString());
                    decimal price = 0;
                    if (quantity > 0)
                    {
                        price = (amount / quantity);
                    }

                    tableRow["NBR_Price"] = price;

                }


                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetTollACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateACITollIssue(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                List<string> columnNames = new List<string>();

                //foreach (DataColumn column in table.Columns)
                //{
                //    if (column.ColumnName == "ID")
                //        continue;

                //    columnNames.Add(column.ColumnName);
                //}

                //foreach (string name in columnNames)
                //{
                //    table.Columns.Remove(name);
                //}


                SaleDAL saleDal = new SaleDAL();

                ResultVM result = saleDal.BulkInsertMasterTemp(table, currConn, transaction);


                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                //sqlText += " update " + tableName + " set IsProcessed = 'Y' where ID in ( ";

                sqlText =
                   @"UPDATE ACIData.dbo.TollIssue SET 
  IsProcessed = 'Y', Post =sih.Post 
, InvoiceNo=sih.SalesInvoiceNo   
FROM ACIData.dbo.TollIssue  sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1 ";

                sqlText += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "UpdateACISales", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        #endregion

        #region Vendor Product Customer

        public DataTable GetVendorACIDbData(DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"
SELECT [SL]
      ,[VendorCode]
      ,[VendorName]
      ,[VendorGroup]
      ,[Address]
      ,[TelephoneNo]
      ,[BIN_No]
      ,[Comments]
      ,[IsProcessed]
      ,[IsUpdated]
      ,[CompanyCode]
  FROM Vendors  where (IsProcessed = 'N' or  IsUpdated = 'Y')
 "; //07/0007401


                sqlText += "  and CompanyCode = @CompanyCode";


                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                string code = commonDal.settingValue("CompanyCode", "Code");

                cmd.Parameters.AddWithValue("@CompanyCode", code);

                #region Peram



                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetVendorACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetProductACIDbData(DataTable conInfo, string DbName, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();
            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                string code = commonDal.settingValue("CompanyCode", "Code");

                #region sqlText

                sqlText = @"
SELECT [SL]
      ,[ProductCode]
      ,[ProductName]
      ,[ProductGroup]
      ,[UOM]
      ,[HSCode]
      ,[UnitPrice]
      ,[SD_AblePrice]
      ,[SDRate]
      ,[VATRate]
      ,[Description]
      ,[IsProcessed]
      ,[IsUpdated]
      ,[CompanyCode]
  FROM Products where 1=1 ";

                if (code.ToLower() == "cepl")
                {
                    if (!string.IsNullOrWhiteSpace(DbName))
                    {
                        sqlText += @"  and ProductGroup in( ";
                        sqlText += @"   select CategoryName from " + DbName + ".dbo.ProductCategories )";

                        ////if (DbName.ToLower() == "ppl2012_demo_db")
                        ////{

                        ////}
                    }
                }

                sqlText += @"  and  (IsProcessed = 'N' or IsUpdated = 'Y')";

                sqlText += "  and CompanyCode = @CompanyCode";


                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram


                cmd.Parameters.AddWithValue("@CompanyCode", code);

                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetProductACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetCustomerACIDbData(DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();
            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"
SELECT [SL]
      ,[CustomerCode]
      ,[CustomerName]
      ,[CustomerGroup]
      ,[Address]
      ,[BIN_No]
      ,[Comments]
      ,[IsProcessed]
      ,[IsUpdated]
      ,[CompanyCode]
  FROM Customers where (IsProcessed = 'N' or IsUpdated = 'Y')
 "; //07/0007401

                sqlText += "  and CompanyCode = @CompanyCode";


                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                string code = commonDal.settingValue("CompanyCode", "Code");

                cmd.Parameters.AddWithValue("@CompanyCode", code);

                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetCustomerACIDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM ProductSync_ACI(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            string[] results = new string[6];

            #region try

            try
            {
                //ImportRepo importrepo = new ImportRepo(identity);
                //CommonRepo commonrepo = new CommonRepo(identity);
                //results[0] = "fail";
                //BranchProfileRepo branchProfileRepo = new BranchProfileRepo();

                CommonDAL cDal = new CommonDAL();

                DataTable BranchInfoDT = new BranchProfileDAL().SelectAll(paramVM.BranchId, null, null, null, null, true, connVM);
                string code = cDal.settings("CompanyCode", "Code", null, null, connVM);

                settingVM.BranchInfoDT = BranchInfoDT;

                string dbName = DatabaseInfoVM.DatabaseName;

                DataTable productDt = new ImportDAL().GetProductACIDbData(settingVM.BranchInfoDT, dbName);
                List<ProductVM> products = new List<ProductVM>();
                int rowsCount = productDt.Rows.Count;
                List<string> ids = new List<string>();

                string defaultGroup = cDal.settings("AutoSave", "DefaultProductCategory", null, null, connVM);

                for (int i = 0; i < rowsCount; i++)
                {
                    ProductVM product = new ProductVM();

                    product.ProductName = OrdinaryVATDesktop.RemoveStringExpresion(productDt.Rows[i]["ProductName"].ToString());
                    product.ProductDescription = productDt.Rows[i]["Description"].ToString();
                    product.CategoryName = productDt.Rows[i]["ProductGroup"].ToString();

                    //if (product.CategoryName == "-")
                    //{
                    //    product.CategoryName = defaultGroup;
                    //}
                    if (product.CategoryName == "-")
                    {
                        if (defaultGroup == "-")
                        {
                            throw new Exception("Default Product Group Not Found. Please set Default Product Group in Setting .");
                        }
                        product.CategoryName = defaultGroup;
                    }

                    product.UOM = productDt.Rows[i]["UOM"].ToString();

                    product.NBRPrice = Convert.ToDecimal(productDt.Rows[i]["UnitPrice"].ToString());

                    product.SerialNo = "-";
                    product.HSCodeNo = productDt.Rows[i]["HSCode"].ToString();
                    product.VATRate = Convert.ToDecimal(productDt.Rows[i]["VATRate"].ToString());
                    product.Comments = "-";
                    product.ActiveStatus = "Y";
                    product.SD = Convert.ToDecimal(productDt.Rows[i]["SDRate"].ToString());
                    product.Packetprice = 0;
                    product.Trading = "N";
                    product.TradingMarkUp = 0;
                    product.NonStock = "N"; ;
                    product.OpeningDate = DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss");
                    product.CreatedBy = OrdinaryVATDesktop.CurrentUser;
                    product.CreatedOn = DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss");
                    product.ProductCode = OrdinaryVATDesktop.RemoveStringExpresion(productDt.Rows[i]["ProductCode"].ToString());
                    product.TollCharge = 0;
                    product.BranchId = Convert.ToInt32(paramVM.BranchId);
                    product.IsConfirmed = "N";

                    if (code.ToLower() == "cepl")
                    {
                        product.UOM = "pcs";
                        product.VATRate = 15;
                    }

                    products.Add(product);

                    ids.Add(productDt.Rows[i]["SL"].ToString());
                }

                results = ImportProductSync(products, new List<TrackingVM>());

                if (results[0].ToLower() == "Success")
                {
                    results = UpdateACIMaster(ids, settingVM.BranchInfoDT, "Products");

                }
                if (results[0] == "Success")
                {
                    rVM.Status = "Success";
                    rVM.Message = "Products Successfully Syncronized";
                }

                //DataTable dtTransfer = new DataTable();
                //dtTransfer = GetTransferData(paramVM);

                //if (dtTransfer == null || dtTransfer.Rows.Count == 0)
                //{
                //    rVM.Message = "This Transaction Already Integrated or Not Exist in Source!";
                //    return rVM;
                //}

                //if (paramVM.IDs == null || paramVM.IDs.Count == 0)
                //{
                //    paramVM.IDs = new List<string>();
                //    paramVM.IDs.Add(paramVM.RefNo);

                //}

                //rVM = SaveTransfer(dtTransfer, paramVM);

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "ProductSync_ACI", ex.ToString());
                rVM.Status = "Fail";
                rVM.Message = ex.Message;


            }
            #endregion
            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public ResultVM CustomerSync_ACI(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            string[] results = new string[6];

            #region try

            try
            {
                //ImportRepo importrepo = new ImportRepo(identity);
                //CommonRepo commonrepo = new CommonRepo(identity);
                //results[0] = "fail";
                //BranchProfileRepo branchProfileRepo = new BranchProfileRepo();

                CommonDAL cDal = new CommonDAL();

                DataTable BranchInfoDT = new BranchProfileDAL().SelectAll(paramVM.BranchId, null, null, null, null, true, connVM);
                string code = cDal.settings("CompanyCode", "Code", null, null, connVM);

                settingVM.BranchInfoDT = BranchInfoDT;
                DataTable customerDt = new ImportDAL().GetCustomerACIDbData(settingVM.BranchInfoDT);
                List<CustomerVM> customers = new List<CustomerVM>();
                int rowsCount = customerDt.Rows.Count;
                List<string> ids = new List<string>();

                string defaultGroup = cDal.settings("AutoSave", "DefaultCustomerGroup", null, null, connVM);

                for (int i = 0; i < rowsCount; i++)
                {
                    CustomerVM customer = new CustomerVM();

                    customer.CustomerName =
                        //Ordinary.RemoveStringExpresion(customerDt.Rows[i]["CustomerName"].ToString());
                        OrdinaryVATDesktop.RemoveStringExpresion(customerDt.Rows[i]["CustomerName"].ToString());

                    customer.CustomerCode =
                        OrdinaryVATDesktop.RemoveStringExpresion(customerDt.Rows[i]["CustomerCode"].ToString());
                    customer.CustomerGroup = customerDt.Rows[i]["CustomerGroup"].ToString();
                    customer.Address1 = customerDt.Rows[i]["Address"].ToString();

                    ////if (customer.CustomerGroup == "-")
                    ////{
                    ////    customer.CustomerGroup = defaultGroup1;
                    ////}
                    if (customer.CustomerGroup == "-")
                    {
                        if (defaultGroup == "-")
                        {
                            throw new Exception("Default Customer Group Not Found. Please set Default Customer Group in Setting .");
                        }
                        customer.CustomerGroup = defaultGroup;
                    }

                    customer.City = "-";
                    customer.TelephoneNo = "-";
                    customer.FaxNo = "-";
                    customer.Email = "-";
                    customer.StartDateTime = DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss");
                    customer.ContactPerson = "-";
                    customer.ContactPersonDesignation = "-";
                    customer.ContactPersonTelephone = "-";
                    customer.ContactPersonEmail = "-";
                    ;
                    customer.TINNo = "-";
                    ;
                    customer.VATRegistrationNo = customerDt.Rows[i]["BIN_No"].ToString();
                    customer.Comments = "-";
                    customer.ActiveStatus = "Y";
                    customer.CreatedBy = OrdinaryVATDesktop.CurrentUser; // need to change
                    customer.CreatedOn = DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss");
                    customer.Country = "-";
                    customer.IsVDSWithHolder = "N";
                    customer.BranchId = OrdinaryVATDesktop.BranchId; // need to change
                    customer.IsInstitution = "N";
                    customers.Add(customer);

                    ids.Add(customerDt.Rows[i]["SL"].ToString());
                }


                results = ImportCustomer(customers);

                if (results[0].ToLower() == "Success")
                {
                    results = UpdateACIMaster(ids, settingVM.BranchInfoDT, "Customers");

                }
                if (results[0] == "Success")
                {
                    rVM.Status = "Success";
                    rVM.Message = "Customer Successfully Syncronized";
                }

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "CustomerSync_ACI", ex.ToString());
                rVM.Status = "Fail";
                rVM.Message = ex.Message;

            }
            #endregion
            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public ResultVM VendorSync_ACI(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            string[] results = new string[6];

            #region try

            try
            {
                //ImportRepo importrepo = new ImportRepo(identity);
                //CommonRepo commonrepo = new CommonRepo(identity);
                //results[0] = "fail";
                //BranchProfileRepo branchProfileRepo = new BranchProfileRepo();

                CommonDAL cDal = new CommonDAL();

                DataTable BranchInfoDT = new BranchProfileDAL().SelectAll(paramVM.BranchId, null, null, null, null, true, connVM);
                string code = cDal.settings("CompanyCode", "Code", null, null, connVM);

                settingVM.BranchInfoDT = BranchInfoDT;
                DataTable vendorsDt = new ImportDAL().GetVendorACIDbData(settingVM.BranchInfoDT);
                List<VendorVM> vendors = new List<VendorVM>();

                int rowsCount = vendorsDt.Rows.Count;
                List<string> ids = new List<string>();

                string defaultGroup = cDal.settings("AutoSave", "DefaultVendorGroup");

                for (int i = 0; i < rowsCount; i++)
                {
                    VendorVM vendor = new VendorVM();
                    vendor.VendorCode = OrdinaryVATDesktop.RemoveStringExpresion(vendorsDt.Rows[i]["VendorCode"].ToString());
                    vendor.VendorName = OrdinaryVATDesktop.RemoveStringExpresion(vendorsDt.Rows[i]["VendorName"].ToString());

                    vendor.VendorGroup = vendorsDt.Rows[i]["VendorGroup"].ToString();

                    if (vendor.VendorGroup == "-")
                    {
                        if (defaultGroup == "-")
                        {
                            throw new Exception("Default Vendor Group Not Found.\nPlease set Default Vendor Group in Setting .");
                        }
                        vendor.VendorGroup = defaultGroup;
                    }

                    vendor.Address1 = vendorsDt.Rows[i]["Address"].ToString();
                    vendor.Address2 = "-";
                    vendor.Address3 = "-";

                    vendor.City = "-";
                    vendor.TelephoneNo = vendorsDt.Rows[i]["TelephoneNo"].ToString();
                    vendor.FaxNo = "-";
                    vendor.Email = "-";

                    vendor.StartDateTime = DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss");

                    vendor.ContactPerson = "-";
                    vendor.ContactPersonDesignation = "-";
                    vendor.ContactPersonTelephone = "-";
                    vendor.ContactPersonEmail = "-";
                    vendor.VATRegistrationNo = vendorsDt.Rows[i]["BIN_No"].ToString();
                    vendor.TINNo = "-";
                    vendor.Comments = "-";
                    vendor.ActiveStatus = "Y";
                    vendor.CreatedBy = OrdinaryVATDesktop.CurrentUser;
                    vendor.CreatedOn = DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss");
                    vendor.Country = "-";
                    vendor.BranchId = OrdinaryVATDesktop.BranchId;
                    vendors.Add(vendor);

                    ids.Add(vendorsDt.Rows[i]["SL"].ToString());
                }


                results = ImportVendor(vendors);

                if (results[0].ToLower() == "Success")
                {
                    results = UpdateACIMaster(ids, settingVM.BranchInfoDT);

                }
                if (results[0] == "Success")
                {
                    rVM.Status = "Success";
                    rVM.Message = "Vendor Successfully Syncronized";
                }

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "VendorSync_ACI", ex.ToString());
                rVM.Status = "Fail";
                rVM.Message = ex.Message;

            }
            #endregion
            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        #endregion

        #region Receive return

        public DataTable GetReceiveReturnData_ACIPharma(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();

            #endregion

            #region try

            try
            {
                try
                {

                    string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    param.FromDate = Convert.ToDateTime(param.FromDate).ToString("yyyy-MM-dd") + " 00:00:00.000";
                    param.ToDate = Convert.ToDateTime(param.ToDate).ToString("yyyy-MM-dd") + " 23:59:59.000";

                    #region sqlText

                    sqlText = @"

SELECT 
 [ID]
,[Branch_Code] BranchCode
,cast( [Invoice_Date_Time] as varchar(200))Receive_DateTime
,[ProductCode] Item_Code
,[ProductName] Item_Name
,[Quantity]
,[UOM]
,[Reference_No]
,[Comments]
,[Post]
,'' Return_Id
,'N' With_Toll
,'0' NBR_Price
,'VAT 4.3' VAT_Name
,'N/A' CustomerCode
  FROM SaleInvoices
where IsProcessed = 'N'
 ";

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;

                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and ID = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and Invoice_Date_Time >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and Invoice_Date_Time <= @toDate";
                    }

                    sqlText += "  and CompanyCode = @CompanyCode and Branch_Code in (";

                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                    sqlText = sqlText.Replace("@db", dbName);

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    cmd.Parameters.AddWithValue("@CompanyCode", code);

                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit

                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                ProductDAL dal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    string itemCode = tableRow["Item_Code"].ToString();

                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { itemCode });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                        continue;

                    tableRow["UOM"] = vm.UOM;

                    DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                        Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", connVM);

                    tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                        ? "0"
                        : dt.Rows[0]["NBRPrice"].ToString();


                }
                table.AcceptChanges();

                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceiveReturnData_ACIPharma", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

        }

        #endregion

        #region Common Method

        public string[] UpdateACITransactions(DataTable table, string tableName, SqlConnection currConn, SqlTransaction transaction, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            int transResult = 0;
            #endregion variable

            #region try

            try
            {

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update ACIData.dbo." + tableName + " set IsProcessed = 'Y' " +
                           ",UpdatedTime = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "'" +
                           " where ID in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateACITransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                //if (currConn.State == ConnectionState.Open )
                //{
                //    currConn.Close();
                //}
            }

            #endregion
        }

        public string[] UpdateACITransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "TransferIssues")
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update " + tableName + " set IsProcessed = 'Y' where ID in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateACITransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateACIMaster(List<string> ids, DataTable db, string tableName = "Vendors", SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";


                #endregion

                #region Sql Command

                int len = ids.Count;


                sqlText += " update " + tableName + " set IsProcessed = 'Y', IsUpdated = 'N' where SL in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + ids[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateACIMaster", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        #endregion

        #endregion

        #region DHL

        public string[] UpdateDHLSales(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                List<string> columnNames = new List<string>();

                #region Comments

                //foreach (DataColumn column in table.Columns)
                //{
                //    if (column.ColumnName == "ID")
                //        continue;

                //    columnNames.Add(column.ColumnName);
                //}

                //foreach (string name in columnNames)
                //{
                //    table.Columns.Remove(name);
                //}
                #endregion

                SaleDAL saleDal = new SaleDAL();

                ResultVM result = saleDal.BulkInsertMasterTemp(table, currConn, transaction, connVM);

                #endregion

                #region Sql Command

                int len = table.Rows.Count;

                //sqlText += " update " + tableName + " set IsProcessed = 'Y' where ID in ( ";

                sqlText =
                   @"
UPDATE DHLData.dbo.SaleInvoices SET 
IsProcessed = 'Y', Post =sih.Post 
FROM DHLData.dbo.SaleInvoices  sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1 ";

                sqlText += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 500;
                int rows = cmd.ExecuteNonQuery();

                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "UpdateDHLSales", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateDHLTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "SaleInvoices")
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";


                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update " + tableName + " set IsProcessed = 'Y', ProcessDateTime = @ProcessDateTime where ID in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.AddWithValue("@ProcessDateTime", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateDHLTransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        #endregion

        #region New Process Data(Beximco)

        public DataTable GetSaleBCLDbData(string invoiceNo, DataTable conInfo, string fromDate, string toDate, string top, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @" 
@select
       [ID]
      ,[Customer_Name]
      ,[Customer_Code]
      ,[Delivery_Address]
      ,[Invoice_Date_Time]
      ,[Post]
      ,[Item_Code]
      ,[Item_Name]
      ,[Quantity]
      ,[NBR_Price]
      ,[UOM]
      ,[VAT_Rate]
      ,[SD_Rate]
      ,[Non_Stock]
      ,[Trading_MarkUp]
      ,[Discount_Amount]
      ,[Promotional_Quantity]
      ,[VAT_Name]
      ,[LC_Number]
      ,[Currency_Code]
      ,[Sale_Type]
      ,[Previous_Invoice_No]
      ,[Is_Print]
      ,[Tender_Id]
      ,[Reference_No]
      ,[SubTotal]
      ,[Type]
  FROM SaleInvoices as Sale

  WHERE 1=1  @condition

 "; //07/0007401

                if (string.IsNullOrEmpty(top) || top == "0")
                {
                    sqlText = sqlText.Replace("@select", "select");
                }
                else
                {
                    sqlText = sqlText.Replace("@select", "select top " + top + " ");

                }

                string conditionText = "";

                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    conditionText += " and Sale.ID=@SalesInvoiceNo";
                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time >= @fromDate";
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time <= @toDate";
                }

                sqlText = sqlText.Replace("@condition", conditionText);

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", invoiceNo);

                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", fromDate);

                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", toDate);
                }

                CommonDAL commonDal = new CommonDAL();

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleBCLDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataSet GetSaleNewProcData(string invoiceNo, DataTable conInfo, string fromDate, string toDate, string top = "0", bool isExcelDownload = false, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                if (conInfo != null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(conInfo);
                }
                else
                {
                    currConn = _dbsqlConnection.GetConnection();
                }

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @" 
--@select
--       [ID]
--      ,CustomerName Customer_Name
--      ,CustomerCode[Customer_Code]
--      ,DeliveryAddress[Delivery_Address]
--      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd')[Invoice_Date_Time]
--      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd')[Delivery_Date_Time]
--      ,[Post]
--      ,ProductCode [Item_Code]
--      ,ProductName[Item_Name]
--      ,[Quantity]
--      ,UnitPrice[NBR_Price]
--      ,[UOM]
--      ,VATRate[VAT_Rate]
--      ,SDRate[SD_Rate]
--      ,'Y'[Non_Stock]
--      ,'0'[Trading_MarkUp]
--      ,DiscountAmount[Discount_Amount]
--      ,PromotionalQuantity[Promotional_Quantity]
--      ,'VAT 4.3'[VAT_Name]
--      ,LCNumber[LC_Number]
--      ,CurrencyCode[Currency_Code]
--      ,'NEW'[Sale_Type]
--      ,PreviousInvoiceNo[Previous_Invoice_No]
--      ,'N'[Is_Print]
--      ,'0'[Tender_Id]
--      ,ReferenceNo[Reference_No]
--      ,[SubTotal]
--      ,[Type]
--      ,[IsProcessed]
--  FROM VAT_Source_Sales as Sale
--
--
--  WHERE 1=2  @condition

select  InvoiceNo,ID,CustomerCode Customer_Code,CustomerName Customer_Name,  FORMAT(InvoiceDateTime,'yyyy-MM-dd') Invoice_Date_Time,Post,
 sum(Quantity)TotalQuantity, sum(Subtotal)TotalValue,(sum(Subtotal)-sum(Quantity*UnitPrice))TotalValueDiff
 , sum(((SubTotal*SDRate)/100))TotalSD, 
 sum(((Subtotal+((SubTotal*SDRate)/100))*VATRate)/100)TotalVAT
 from VAT_Source_Sales Sale
 where 1=1  @condition
 
 group by ID,CustomerCode,CustomerName,InvoiceDateTime,InvoiceNo,Post

 "; //07/0007401

                if (string.IsNullOrEmpty(top) || top == "0")
                {
                    sqlText = sqlText.Replace("@select", "select");
                }
                else
                {
                    sqlText = sqlText.Replace("@select", "select top " + top + " ");

                }

                string conditionText = "";

                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    conditionText += " and Sale.ID=@SalesInvoiceNo";
                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    conditionText += " and Sale.InvoiceDateTime >= @fromDate";
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    conditionText += " and Sale.InvoiceDateTime <= @toDate";
                }

                if (isExcelDownload)
                {
                    conditionText += " and Sale.InvoiceNo is not null";
                }

                sqlText = sqlText.Replace("@condition", conditionText);

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.CommandTimeout = 500;
                if (!string.IsNullOrEmpty(invoiceNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", invoiceNo);

                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", fromDate);

                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", toDate);
                }

                CommonDAL commonDal = new CommonDAL();

                DataSet dataSet = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dataSet);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return dataSet;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleNewProcData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateSaleTransactions(DataTable table, bool isExcel, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text
                string dropTable = @"drop table #SalesRuntimeTemp";


                string tempText = @"
CREATE TABLE #SalesRuntimeTemp(
	[SL] [bigint] IDENTITY(1,1) NOT NULL,
	[ID] [nvarchar](max) NOT NULL,
	[SalesInvoiceNo] [varchar](40) NULL,
	[Customer_Name] [varchar](500) NOT NULL,
	[Customer_Code] [nvarchar](50) NULL,
	[Delivery_Address] [nvarchar](500) NULL,
	[Vehicle_No] [nvarchar](100) NULL,
	[Invoice_Date_Time] [nvarchar](100) NOT NULL,
	[Delivery_Date_Time] [nvarchar](100) NULL,
	[Reference_No] [varchar](6000) NULL,
	[Comments] [nvarchar](100) NULL,
	[Sale_Type] [nvarchar](100) NULL,
	[Previous_Invoice_No] [nvarchar](100) NULL,
	[Is_Print] [nchar](1) NULL,
	[Tender_Id] [nvarchar](100) NULL,
	[Post] [varchar](1) NOT NULL,
	[LC_Number] [nvarchar](100) NULL,
	[Currency_Code] [nvarchar](50) NULL,
	[Item_Code] [nvarchar](100) NOT NULL,
	[Item_Name] [nvarchar](100) NOT NULL,
	[Quantity] [decimal](25, 9) NOT NULL,
	[NBR_Price] [decimal](25, 9) NOT NULL,
	[UOM] [nvarchar](100) NOT NULL,
	[VAT_Rate] [decimal](25, 9) NULL,
	[SD_Rate] [decimal](25, 9) NOT NULL,
	[Non_Stock] [nvarchar](100) NULL,
	[Trading_MarkUp] [decimal](25, 9) NULL,
	[Type] [nvarchar](100) NULL,
	[Discount_Amount] [decimal](25, 9) NULL,
	[Promotional_Quantity] [decimal](25, 9) NULL,
	[VAT_Name] [nvarchar](100) NULL,
	[SubTotal] [decimal](25, 9) NOT NULL,
	[IsVATComplete] [char](1) NULL,
	[ItemNo] [varchar](20) NULL,
	[CustomerID] [varchar](20) NULL,
	[IsProcessed] [bit] NULL,
	[Branch_Code] [nvarchar](100) NULL,
	[ExpDescription] [nvarchar](100) NULL,
	[ExpQuantity] [nvarchar](100) NULL,
	[ExpGrossWeight] [nvarchar](100) NULL,
	[ExpNetWeight] [nvarchar](100) NULL,
	[ExpNumberFrom] [nvarchar](100) NULL,
	[ExpNumberTo] [nvarchar](100) NULL,
	[CommentsD] [nvarchar](700) NULL,
	[BranchId] [int] NULL,
	[CurrencyId] [int] NULL,
	[CustomerGroup] [nvarchar](100) NULL,
	[VAT_Amount] [decimal](18, 2) NULL,
	[GroupId] [nvarchar](20) NULL,
	[VehicleID] [nvarchar](20) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[CreatedBy] [nvarchar](100) NULL,
	[CreatedOn] [nvarchar](100) NULL,
	[BOMId] [int] NULL,
	[TransactionType] [nvarchar](50) NULL,
	[ReturnId] [int] NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](100) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[DeliveryAddress2] [varchar](200) NULL,
	[DeliveryAddress3] [varchar](200) NULL,
	[Trading] [varchar](1) NULL,
	[TradingD] [varchar](1) NULL,
	[IsVDS] [varchar](1) NULL,
	[GetVDSCertificate] [varchar](1) NULL,
	[VDSCertificateDate] [varchar](50) NULL,
	[AlReadyPrint] [int] NULL,
	[DeliveryChallanNo] [varchar](50) NULL,
	[IsGatePass] [varchar](1) NULL,
	[CompInvoiceNo] [varchar](50) NULL,
	[LCBank] [varchar](50) NULL,
	[LCDate] [varchar](50) NULL,
	[PINo] [varchar](50) NULL,
	[PIDate] [varchar](50) NULL,
	[EXPFormNo] [varchar](50) NULL,
	[EXPFormDate] [varchar](50) NULL,
	[IsDeemedExport] [varchar](1) NULL,
	[VDSAmount] [decimal](25, 9) NULL,
	[Is6_3TollCompleted] [varchar](1) NULL,
	[ValueOnly] [varchar](1) NULL,
	[CConversionDate] [varchar](50) NULL,
	[Weight] [varchar](50) NULL,
	[WareHouseRent] [decimal](25, 9) NULL,
	[WareHouseVAT] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ATVablePrice] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[TradeVATRate] [decimal](25, 9) NULL,
	[TradeVATAmount] [decimal](25, 9) NULL,
	[VDSAmountD] [decimal](25, 9) NULL,
	[CDNVATAmount] [decimal](25, 9) NULL,
	[CDNSDAmount] [decimal](25, 9) NULL,
	[CDNSubtotal] [decimal](25, 9) NULL,
	[BENumber] [varchar](50) NULL,
	[TradeVATableValue] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[TotalValue] [decimal](25, 9) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[DeductionAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[ShiftId] [int] NULL,
	[IsCommercialImporter] [varchar](1) NULL,
	[ProductDescription] [varchar](100) NULL,
	[IsFixedVAT] [varchar](1) NULL,
	[FixedVATAmount] [decimal](25, 9) NULL,
	[UserId] [int] NULL,
	[token] [varchar](200) NULL,
	[ExtraCharge] [decimal](25, 9) NULL,
	[FileName] [varchar](300) NULL,
	[OtherRef] [varchar](500) NULL,
	[CustomerBIN] [varchar](500) NULL,
	[PreviousImportedExcelId] [varchar](600) NULL,
	[VehicleType] [varchar](200) NULL,
	[PreviousNBRPrice] [decimal](25, 9) NULL,
	[PreviousQuantity] [decimal](25, 9) NULL,
	[PreviousSubTotal] [decimal](25, 9) NULL,
	[PreviousSD] [decimal](25, 9) NULL,
	[PreviousSDAmount] [decimal](25, 9) NULL,
	[PreviousVATRate] [decimal](25, 9) NULL,
	[PreviousVATAmount] [decimal](25, 9) NULL,
	[PreviousUOM] [varchar](200) NULL,
	[ReasonOfReturn] [varchar](200) NULL,
	[PreviousInvoiceDateTime] [varchar](200) NULL,
) ";

                SqlCommand cmd = new SqlCommand(tempText, currConn, transaction);

                cmd.ExecuteNonQuery();

                string[] resultBulkInsert = commonDal.BulkInsert("#SalesRuntimeTemp", table, currConn, transaction);

                if (resultBulkInsert[0].ToLower() == "fail")
                {
                    throw new Exception("failed to insert to temp");
                }

                string tableSource = @"Beximco_Trading_VAT_Source.dbo.VAT_Source_Sales";

                if (isExcel)
                {
                    tableSource = @"VAT_Source_Sales";
                }

                string sqlText = @"UPDATE " + tableSource + @" SET 
  IsProcessed = 'Y', Post =sih.Post 
, InvoiceNo=sih.SalesInvoiceNo   
FROM " + tableSource + @" sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1 ";

                sqlText += " AND sSal.ID IN (select distinct ID from #SalesRuntimeTemp)";

                ;
                #endregion

                #region Sql Command

                cmd.CommandText = sqlText;


                int rows = cmd.ExecuteNonQuery();

                cmd.CommandText = dropTable;

                cmd.ExecuteNonQuery();

                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());
                FileLogger.Log("ImportDAL", "UpdateSaleTransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public DataTable GetSelectedDatax(DataTable master, DataTable details, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text
                string dropTable = @"drop table #SalesRuntimeTemp;drop table #masterTemp;";


                string tempText = @"
CREATE TABLE #SalesRuntimeTemp(
	[SL] [bigint] IDENTITY(1,1) NOT NULL,
	[ID] [nvarchar](max) NOT NULL,
	[SalesInvoiceNo] [varchar](40) NULL,
	[Customer_Name] [varchar](500) NOT NULL,
	[Customer_Code] [nvarchar](50) NULL,
	[Delivery_Address] [nvarchar](500) NULL,
	[Vehicle_No] [nvarchar](100) NULL,
	[Invoice_Date_Time] [nvarchar](100) NOT NULL,
	[Delivery_Date_Time] [nvarchar](100) NULL,
	[Reference_No] [varchar](6000) NULL,
	[Comments] [nvarchar](100) NULL,
	[Sale_Type] [nvarchar](100) NULL,
	[Previous_Invoice_No] [nvarchar](100) NULL,
	[Is_Print] [nchar](1) NULL,
	[Tender_Id] [nvarchar](100) NULL,
	[Post] [varchar](1) NOT NULL,
	[LC_Number] [nvarchar](100) NULL,
	[Currency_Code] [nvarchar](50) NULL,
	[Item_Code] [nvarchar](100) NOT NULL,
	[Item_Name] [nvarchar](100) NOT NULL,
	[Quantity] [decimal](25, 9) NOT NULL,
	[NBR_Price] [decimal](25, 9) NOT NULL,
	[UOM] [nvarchar](100) NOT NULL,
	[VAT_Rate] [decimal](25, 9) NULL,
	[SD_Rate] [decimal](25, 9) NOT NULL,
	[Non_Stock] [nvarchar](100) NULL,
	[Trading_MarkUp] [decimal](25, 9) NULL,
	[Type] [nvarchar](100) NULL,
	[Discount_Amount] [decimal](25, 9) NULL,
	[Promotional_Quantity] [decimal](25, 9) NULL,
	[VAT_Name] [nvarchar](100) NULL,
	[SubTotal] [decimal](25, 9) NOT NULL,
	[IsVATComplete] [char](1) NULL,
	[ItemNo] [varchar](20) NULL,
	[CustomerID] [varchar](20) NULL,
	[Branch_Code] [nvarchar](100) NULL,
	[ExpDescription] [nvarchar](100) NULL,
	[ExpQuantity] [nvarchar](100) NULL,
	[ExpGrossWeight] [nvarchar](100) NULL,
	[ExpNetWeight] [nvarchar](100) NULL,
	[ExpNumberFrom] [nvarchar](100) NULL,
	[ExpNumberTo] [nvarchar](100) NULL,
	[CommentsD] [nvarchar](700) NULL,
	[BranchId] [int] NULL,
	[CurrencyId] [int] NULL,
	[CustomerGroup] [nvarchar](100) NULL,
	[VAT_Amount] [decimal](18, 2) NULL,
	[GroupId] [nvarchar](20) NULL,
	[VehicleID] [nvarchar](20) NULL,
	[TotalAmount] [decimal](25, 9) NULL,
	[TotalVATAmount] [decimal](25, 9) NULL,
	[CreatedBy] [nvarchar](100) NULL,
	[CreatedOn] [nvarchar](100) NULL,
	[BOMId] [int] NULL,
	[TransactionType] [nvarchar](50) NULL,
	[ReturnId] [int] NULL,
	[UOMPrice] [decimal](25, 9) NULL,
	[UOMc] [decimal](25, 9) NULL,
	[UOMn] [varchar](100) NULL,
	[UOMQty] [decimal](25, 9) NULL,
	[SDAmount] [decimal](25, 9) NULL,
	[DeliveryAddress2] [varchar](200) NULL,
	[DeliveryAddress3] [varchar](200) NULL,
	[Trading] [varchar](1) NULL,
	[TradingD] [varchar](1) NULL,
	[IsVDS] [varchar](1) NULL,
	[GetVDSCertificate] [varchar](1) NULL,
	[VDSCertificateDate] [varchar](50) NULL,
	[AlReadyPrint] [int] NULL,
	[DeliveryChallanNo] [varchar](50) NULL,
	[IsGatePass] [varchar](1) NULL,
	[CompInvoiceNo] [varchar](50) NULL,
	[LCBank] [varchar](50) NULL,
	[LCDate] [varchar](50) NULL,
	[PINo] [varchar](50) NULL,
	[PIDate] [varchar](50) NULL,
	[EXPFormNo] [varchar](50) NULL,
	[EXPFormDate] [varchar](50) NULL,
	[IsDeemedExport] [varchar](1) NULL,
	[VDSAmount] [decimal](25, 9) NULL,
	[Is6_3TollCompleted] [varchar](1) NULL,
	[ValueOnly] [varchar](1) NULL,
	[CConversionDate] [varchar](50) NULL,
	[Weight] [varchar](50) NULL,
	[WareHouseRent] [decimal](25, 9) NULL,
	[WareHouseVAT] [decimal](25, 9) NULL,
	[ATVRate] [decimal](25, 9) NULL,
	[ATVablePrice] [decimal](25, 9) NULL,
	[ATVAmount] [decimal](25, 9) NULL,
	[TradeVATRate] [decimal](25, 9) NULL,
	[TradeVATAmount] [decimal](25, 9) NULL,
	[VDSAmountD] [decimal](25, 9) NULL,
	[CDNVATAmount] [decimal](25, 9) NULL,
	[CDNSDAmount] [decimal](25, 9) NULL,
	[CDNSubtotal] [decimal](25, 9) NULL,
	[BENumber] [varchar](50) NULL,
	[TradeVATableValue] [decimal](25, 9) NULL,
	[SalesPrice] [decimal](25, 9) NULL,
	[TotalValue] [decimal](25, 9) NULL,
	[DollerValue] [decimal](25, 9) NULL,
	[CurrencyValue] [decimal](25, 9) NULL,
	[CurrencyRateFromBDT] [decimal](25, 9) NULL,
	[DeductionAmount] [decimal](25, 9) NULL,
	[DiscountedNBRPrice] [decimal](25, 9) NULL,
	[ShiftId] [int] NULL,
	[IsCommercialImporter] [varchar](1) NULL,
	[ProductDescription] [varchar](100) NULL,
	[IsFixedVAT] [varchar](1) NULL,
	[FixedVATAmount] [decimal](25, 9) NULL,
	[UserId] [int] NULL,
	[token] [varchar](200) NULL,
	[ExtraCharge] [decimal](25, 9) NULL,
	[FileName] [varchar](300) NULL,
	[OtherRef] [varchar](500) NULL,
	[CustomerBIN] [varchar](500) NULL,
	[PreviousImportedExcelId] [varchar](600) NULL,
	[VehicleType] [varchar](200) NULL,
	[PreviousNBRPrice] [decimal](25, 9) NULL,
	[PreviousQuantity] [decimal](25, 9) NULL,
	[PreviousSubTotal] [decimal](25, 9) NULL,
	[PreviousSD] [decimal](25, 9) NULL,
	[PreviousSDAmount] [decimal](25, 9) NULL,
	[PreviousVATRate] [decimal](25, 9) NULL,
	[PreviousVATAmount] [decimal](25, 9) NULL,
	[PreviousUOM] [varchar](200) NULL,
	[ReasonOfReturn] [varchar](200) NULL,
	[PreviousInvoiceDateTime] [varchar](200) NULL,
	[IsProcessed] [varchar](1) NULL,
) ";

                string masterTemp = @" create table #masterTemp(
	InvoiceNo varchar(200),
	ID varchar(MAX),
	Customer_Code varchar(200),
	Customer_Name varchar(200),
	Invoice_Date_Time varchar(200),
	TotalQuantity decimal(25,9),
	TotalValue decimal(25,9),
	TotalSD decimal(25,9),
	TotalVAT decimal(25,9),
	[Check] bit,
	[Post] varchar(1)
 )";
                string getData = @" select * from #SalesRuntimeTemp where ID in (select ID from #masterTemp where [Check] = 1) and IsProcessed = 'N'";
                SqlCommand cmd = new SqlCommand(masterTemp, currConn, transaction);

                cmd.ExecuteNonQuery();

                string[] resultBulkInsert = commonDal.BulkInsert("#masterTemp", master, currConn, transaction);

                cmd.CommandText = tempText;
                cmd.ExecuteNonQuery();

                resultBulkInsert = commonDal.BulkInsert("#SalesRuntimeTemp", details, currConn, transaction);


                #endregion

                #region Sql Command

                DataTable table = new DataTable();

                cmd.CommandText = getData;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                cmd.CommandText = dropTable;

                cmd.ExecuteNonQuery();

                #endregion

                transaction.Commit();


                return table;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "GetSelectedDatax", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] SaveSaleWithSteps(DataTable master, Action callBack, int branchId, string branchCode,
            string app, string transactionType, bool isExcel, string InvoiceDateTime, Action<int> SetSteps, string UserId = "", SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();
            SaleDAL saleDAL = new SaleDAL();
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region SQL Text

                string dropTable = @"drop table #masterTemp;";

                string masterTemp = @" create table #masterTemp(
	ID varchar(MAX),
	[Check] bit,
	InvoiceNo varchar(20),
    IsLoaded bit null
 )";



                string insertIntoLoadTable = @"insert into #TableIsloadComplete(id)
select top @value  id from SalesInvoiceHeaderMasterTemp where ISNULL(IsLoaded,0) = '0'";

                string deleteLoaded = @"delete from #TableIsloadComplete";
                string updateMaster =
                    @"update SalesInvoiceHeaderMasterTemp set IsLoaded=1 where id in(select  id from #TableIsloadComplete) ;
update VAT_Source_Sales set IsProcessed='Y' where id in(select  id from #TableIsloadComplete)";

                string getData = @"select
       [ID]
      ,CustomerName Customer_Name
      ,CustomerCode[Customer_Code]
      ,DeliveryAddress[Delivery_Address]
      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd')[Invoice_Date_Time]
      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd')[Delivery_Date_Time]
      ,[Post]
      ,ProductCode [Item_Code]
      ,ProductName[Item_Name]
      ,[Quantity]
      ,[SourcePaidQuantity]
      ,UnitPrice[NBR_Price]
      ,[UOM]
      ,VATRate[VAT_Rate]
      ,SDRate[SD_Rate]
      ,'Y'[Non_Stock]
      ,'0'[Trading_MarkUp]
      ,DiscountAmount[Discount_Amount]
      ,PromotionalQuantity[Promotional_Quantity]
      ,'VAT 4.3'[VAT_Name]
      ,LCNumber[LC_Number]
      ,CurrencyCode[Currency_Code]
      ,'NEW'[Sale_Type]
      ,PreviousInvoiceNo[Previous_Invoice_No]
      ,'N'[Is_Print]
      ,'0'[Tender_Id]
      ,ReferenceNo[Reference_No]
      ,[SubTotal]
      ,[Type]
      ,TotalValue
      ,TransactionType
   ,SDAmount
   ,VAT_Amount
  FROM VAT_Source_Sales as Sale
where id in(select  id from #TableIsloadComplete) and IsProcessed = 'N'";

                #endregion

                int counter = 0;
                SqlCommand cmd = new SqlCommand("", currConn, transaction);

                try
                {

                    #region Delete and Bulk Insert to SalesInvoiceHeaderMasterTemp

                    string deleteFromMasterTemp = @"delete from SalesInvoiceHeaderMasterTemp";
                    cmd = new SqlCommand(deleteFromMasterTemp, currConn, transaction);
                    transResult = cmd.ExecuteNonQuery();

                    string[] resultBulkInsert = commonDal.BulkInsert("SalesInvoiceHeaderMasterTemp", master, currConn, transaction);


                    #endregion

                    #region Update Invoice Date to VAT_Source_Sales

                    if (!string.IsNullOrEmpty(InvoiceDateTime))
                    {
                        string updateDate = @" update VAT_Source_Sales set InvoiceDateTime = '" + InvoiceDateTime + "'";
                        cmd.CommandText = updateDate;
                        transResult = cmd.ExecuteNonQuery();

                    }
                    #endregion

                    #region Delete Unchecked from SalesInvoiceHeaderMasterTemp

                    string deleteUnchecked = @"delete from SalesInvoiceHeaderMasterTemp where [Check] = 0";
                    cmd.CommandText = deleteUnchecked;
                    transResult = cmd.ExecuteNonQuery();

                    #endregion

                    #region Calculate Loop Counter

                    string loopCounter = @"select (Count(ID)/@topValue) from SalesInvoiceHeaderMasterTemp";
                    string topValue = commonDal.settingValue("IntegrationDataLoad", "TopValue", null, currConn, transaction);
                    loopCounter = loopCounter.Replace("@topValue", topValue);

                    insertIntoLoadTable = insertIntoLoadTable.Replace("@value", topValue);

                    cmd.CommandText = loopCounter;
                    object result = cmd.ExecuteScalar();



                    if (result != null)
                    {
                        counter = Convert.ToInt32(result) + 1;
                    }

                    SetSteps(counter + 2);


                    #endregion

                    #region Create Temp Load table

                    string loadCompleteTable = @" create table #TableIsloadComplete(LineNumber int identity(1,1),Id varchar(6000))  ";
                    cmd.CommandText = loadCompleteTable;
                    transResult = cmd.ExecuteNonQuery();


                    #endregion

                }
                catch (Exception ex)
                {

                    throw ex;
                }

                #region Data Saving Loop

                DataTable table = new DataTable();
                SqlDataAdapter adapter;
                IntegrationParam saleMasterVm = new IntegrationParam() { TransactionType = transactionType, BranchCode = branchCode };
                callBack();

                try
                {

                    for (int i = 0; i < counter; i++)
                    {

                        try
                        {
                            #region Insert to Load Table

                            cmd.CommandText = insertIntoLoadTable;
                            transResult = cmd.ExecuteNonQuery();

                            #endregion

                            #region Get Data from VAT_Source_Sales

                            cmd.CommandText = getData;
                            adapter = new SqlDataAdapter(cmd);
                            table = new DataTable();
                            adapter.Fill(table);

                            if (table.Rows.Count == 0)
                                break;

                            #endregion

                            #region Table Validation for SalesTempData

                            saleDAL.TableValidation(table, saleMasterVm);

                            #endregion

                            #region Save Data
                            retResults = saleDAL.SaveAndProcess(table, () => { }, branchId, app, null, null, currConn, transaction, UserId);
                            #endregion

                            #region Update SalesInvoiceHeaderMasterTemp Table and Delete Temp Load Table

                            cmd.CommandText = updateMaster + "  " + deleteLoaded;
                            transResult = cmd.ExecuteNonQuery();

                            #endregion

                            callBack();
                        }
                        catch (Exception ex)
                        {

                            throw ex;
                        }

                    }



                }
                catch (Exception ex)
                {

                    throw ex;
                }
                #endregion

                #region Update Invoice No in VAT_Source_Sales Table

                string tableSource = @"VAT_Source_Sales";

                if (isExcel)
                {
                    tableSource = @"VAT_Source_Sales";
                }

                string updateInvoiceNo =
@"UPDATE " + tableSource + @" SET 
  IsProcessed = 'Y', Post =sih.Post 
, InvoiceNo=sih.SalesInvoiceNo   
FROM " + tableSource + @" sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1 ";

                updateInvoiceNo += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";
                cmd.CommandText = updateInvoiceNo;
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Drop Loaded table

                string dropLoadCompleteTable = @"drop table #TableIsloadComplete;";
                cmd.CommandText = dropLoadCompleteTable;
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Update Customer Name  and Customer Commercial Name
                string code = commonDal.settingValue("CompanyCode", "Code", null, currConn, transaction);
                if (code == "BCL")
                {

                    string updateCustomerName = @"

-----------Create Temp Customer Table--------------------

create table #Customer
(
    CustomerID int identity(1,1), 
    CustomerCode Varchar(50), 
    CustomerName Varchar(120), 
    StartDateTime DatetIme, 
    --DeliveryAddress Varchar(1000),

)
-----------Insert Data in Temp Customer Table--------------------

insert into #Customer (CustomerCode,CustomerName,StartDateTime)
 
select CustomerCode ,'', max(InvoiceDateTime)
from VAT_Source_Sales 
group by CustomerCode

-----------Update Customer Name and Address in Temp Customer Table---------------------

update #Customer set CustomerName =  VAT_Source_Sales.CustomerName
from VAT_Source_Sales
where VAT_Source_Sales.CustomerCode = #Customer.CustomerCode and VAT_Source_Sales.InvoiceDateTime=#Customer.StartDateTime


-----------Update VAT_Source_Sales Customer ID--------------------

update VAT_Source_Sales set CustomerID =  Customers.CustomerID
from Customers
where Customers.CustomerCode = VAT_Source_Sales.CustomerCode

-----------Update Customer Commercial Name--------------------

update SalesInvoiceHeaders set CustomerCommercialName =  VAT_Source_Sales.CustomerName
from VAT_Source_Sales
where SalesInvoiceHeaders.CustomerID = VAT_Source_Sales.CustomerID 
and SalesInvoiceHeaders.ImportIDExcel = VAT_Source_Sales.ID

----update SalesInvoiceHeaders set CustomerCommercialName =  Customers.CustomerName
----from Customers
----where Customers.CustomerID = SalesInvoiceHeaders.CustomerID

-----------Update Customer Name--------------------

update Customers set CustomerName =  #Customer.CustomerName
from #Customer
where Customers.CustomerCode = #Customer.CustomerCode

Drop Table #Customer

";
                    cmd.CommandText = updateCustomerName;
                    transResult = cmd.ExecuteNonQuery();
                }

                #endregion

                #region Commit

                transaction.Commit();

                #endregion

                #region Result

                return retResults;

                #endregion

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "SaveSaleWithSteps", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        // Test Purpose
        public string[] SaveSaleWithSteps_Split(DataTable master, Action callBack, int branchId, string branchCode,
    string app, string transactionType, bool isExcel, string InvoiceDateTime, Action<int> SetSteps, string UserId = "", SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();
            SaleDAL saleDAL = new SaleDAL();
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region SQL Text

                string dropTable = @"drop table #masterTemp;";

                string masterTemp = @" create table #masterTemp(
	ID varchar(MAX),
	[Check] bit,
	InvoiceNo varchar(20),
    IsLoaded bit null
 )";



                string insertIntoLoadTable = @"insert into #TableIsloadComplete(id)
select top @value  id from SalesInvoiceHeaderMasterTemp where ISNULL(IsLoaded,0) = '0'";

                string deleteLoaded = @"delete from #TableIsloadComplete";
                string updateMaster =
                    @"update SalesInvoiceHeaderMasterTemp set IsLoaded=1 where id in(select  id from #TableIsloadComplete) ;
update VAT_Source_Sales set IsProcessed='Y' where id in(select  id from #TableIsloadComplete)";

                string getData = @"select
       [ID]
      ,CustomerName Customer_Name
      ,CustomerCode[Customer_Code]
      ,CustomerGroup
      ,BranchCode Branch_Code
      ,DeliveryAddress[Delivery_Address]
      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd HH:mm')[Invoice_Date_Time]
      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd HH:mm')[Delivery_Date_Time]
      ,[Post]
      ,ProductCode [Item_Code]
      ,ProductName[Item_Name]
      ,[Quantity]
      ,[SourcePaidQuantity]
      ,UnitPrice[NBR_Price]
      ,[UOM]
      ,VATRate[VAT_Rate]
      ,SDRate[SD_Rate]
      ,'Y'[Non_Stock]
      ,'0'[Trading_MarkUp]
      ,DiscountAmount[Discount_Amount]
      ,PromotionalQuantity[Promotional_Quantity]
      ,'VAT 4.3'[VAT_Name]
      ,LCNumber[LC_Number]
      ,CurrencyCode[Currency_Code]
      ,(case when TransactionType='other' then 'NEW' else TransactionType end)[Sale_Type]
      ,PreviousInvoiceNo[Previous_Invoice_No]
      ,'N'[Is_Print]
      ,'0'[Tender_Id]
      ,ReferenceNo[Reference_No]
      ,[SubTotal]
      ,[Type]
      ,TotalValue
      ,TransactionType
   ,SDAmount
   ,VAT_Amount
   ,DataSource
   ,isnull(Option2,0)Option2
  FROM VAT_Source_Sales as Sale
where id in(select  id from #TableIsloadComplete) and IsProcessed = 'N'
";

                #endregion

                int counter = 0;
                SqlCommand cmd = new SqlCommand("", currConn, transaction);
                cmd.CommandTimeout = 500;
                try
                {

                    #region Delete and Bulk Insert to SalesInvoiceHeaderMasterTemp

                    string deleteFromMasterTemp = @"delete from SalesInvoiceHeaderMasterTemp";
                    cmd = new SqlCommand(deleteFromMasterTemp, currConn, transaction);
                    transResult = cmd.ExecuteNonQuery();

                    string[] resultBulkInsert = commonDal.BulkInsert("SalesInvoiceHeaderMasterTemp", master, currConn, transaction);


                    #endregion

                    #region Update Invoice Date to VAT_Source_Sales

                    if (!string.IsNullOrEmpty(InvoiceDateTime))
                    {
                        string updateDate = @" update VAT_Source_Sales set InvoiceDateTime = '" + InvoiceDateTime + "'";
                        cmd.CommandText = updateDate;
                        transResult = cmd.ExecuteNonQuery();

                    }
                    #endregion

                    #region Delete Unchecked from SalesInvoiceHeaderMasterTemp

                    string deleteUnchecked = @"delete from SalesInvoiceHeaderMasterTemp where [Check] = 0";
                    cmd.CommandText = deleteUnchecked;
                    transResult = cmd.ExecuteNonQuery();

                    #endregion

                    #region Calculate Loop Counter

                    string loopCounter = @"select (Count(ID)/@topValue) from SalesInvoiceHeaderMasterTemp";
                    string topValue = commonDal.settingValue("IntegrationDataLoad", "TopValue", null, currConn, transaction);
                    loopCounter = loopCounter.Replace("@topValue", topValue);

                    insertIntoLoadTable = insertIntoLoadTable.Replace("@value", topValue);

                    cmd.CommandText = loopCounter;
                    object result = cmd.ExecuteScalar();



                    if (result != null)
                    {
                        counter = Convert.ToInt32(result) + 1;
                    }

                    SetSteps(counter + 2);


                    #endregion

                    #region Create Temp Load table

                    string loadCompleteTable = @" create table #TableIsloadComplete(LineNumber int identity(1,1),Id varchar(6000))  ";
                    cmd.CommandText = loadCompleteTable;
                    transResult = cmd.ExecuteNonQuery();


                    #endregion

                }
                catch (Exception ex)
                {
                    FileLogger.Log("ImportDAL", "SaveSaleWithSteps_Split", ex.ToString());

                    throw ex;
                }

                #region Commit First Half

                // commit first half

                transaction.Commit();
                transaction.Dispose();

                #endregion


                #region Data Saving Loop

                DataTable table = new DataTable();
                SqlDataAdapter adapter;
                IntegrationParam saleMasterVm = new IntegrationParam() { TransactionType = transactionType, BranchCode = branchCode };
                callBack();

                try
                {

                    for (int i = 0; i < counter; i++)
                    {

                        try
                        {
                            #region New Transaction

                            transaction = currConn.BeginTransaction();
                            cmd.Transaction = transaction;

                            #endregion

                            #region Insert to Load Table

                            cmd.CommandText = insertIntoLoadTable;
                            transResult = cmd.ExecuteNonQuery();

                            #endregion

                            #region Get Data from VAT_Source_Sales

                            cmd.CommandText = getData;
                            adapter = new SqlDataAdapter(cmd);
                            table = new DataTable();
                            adapter.Fill(table);

                            if (table.Rows.Count == 0)
                            {
                                break;
                            }

                            #endregion

                            #region Table Validation for SalesTempData

                            saleDAL.TableValidation(table, saleMasterVm);

                            #endregion

                            #region Save Data

                            retResults = saleDAL.SaveAndProcess(table, () => { }, branchId, app, null, null, currConn, transaction, UserId);

                            #endregion

                            #region Update SalesInvoiceHeaderMasterTemp Table and Delete Temp Load Table

                            cmd.CommandText = updateMaster + "  " + deleteLoaded;
                            transResult = cmd.ExecuteNonQuery();

                            #endregion

                            callBack();

                            #region Commit Loop Transaction

                            transaction.Commit();
                            transaction.Dispose();
                            #endregion
                        }
                        catch (Exception ex)
                        {
                            //transaction.Commit();
                            FileLogger.Log("ImportDAL", "SaveSaleWithSteps_Split", ex.ToString());

                            throw ex;
                        }

                    }

                }
                catch (Exception ex)
                {
                    FileLogger.Log("ImportDAL", "SaveSaleWithSteps_Split", ex.ToString());

                    throw ex;
                }
                #endregion

                #region Update Invoice No in VAT_Source_Sales Table

                // new transaction connection
                //currConn = _dbsqlConnection.GetConnection();
                //currConn.Open();

                if (transaction == null || transaction.Connection == null)
                {
                    transaction = currConn.BeginTransaction();
                }

                //cmd.Connection = currConn;
                cmd.Transaction = transaction;

                string tableSource = @"VAT_Source_Sales";

                if (isExcel)
                {
                    tableSource = @"VAT_Source_Sales";
                }

                string updateInvoiceNo =
@"UPDATE " + tableSource + @" SET 
  IsProcessed = 'Y', Post =sih.Post 
, InvoiceNo=sih.SalesInvoiceNo   
FROM " + tableSource + @" sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1 ";

                updateInvoiceNo += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";
                cmd.CommandText = updateInvoiceNo;
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Drop Loaded table

                string dropLoadCompleteTable = @"drop table #TableIsloadComplete;";
                cmd.CommandText = dropLoadCompleteTable;
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Result

                retResults[0] = "Success";
                retResults[1] = "Data Saved Successfully!";

                #endregion

                #region Commit

                transaction.Commit();
                transaction.Dispose();
                #endregion

                #region Return Result

                return retResults;

                #endregion

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////FileLogger.Log("BataSale", "SaveSale", ex.Message + "\n" + ex.StackTrace);

                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "SaveSaleWithSteps_Split", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] SaveSaleWithSteps_Split_Withoutbulk(DataTable master, Action callBack, int branchId, string branchCode,
string app, string transactionType, bool isExcel, string InvoiceDateTime, Action<int> SetSteps, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();
            SaleDAL saleDAL = new SaleDAL();
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region SQL Text

                string dropTable = @"drop table #masterTemp;";

                string masterTemp = @" create table #masterTemp(
	ID varchar(MAX),
	[Check] bit,
	InvoiceNo varchar(20),
    IsLoaded bit null
 )";



                string insertIntoLoadTable = @"insert into #TableIsloadComplete(id)
select top @value  id from SalesInvoiceHeaderMasterTemp where ISNULL(IsLoaded,0) = '0'";

                string deleteLoaded = @"delete from #TableIsloadComplete";
                string updateMaster =
                    @"update SalesInvoiceHeaderMasterTemp set IsLoaded=1 where id in(select  id from #TableIsloadComplete) ;
update VAT_Source_Sales set IsProcessed='Y' where id in(select  id from #TableIsloadComplete)";

                string getData = @"select
       [ID]
      ,CustomerName Customer_Name
      ,CustomerCode[Customer_Code]
      ,BranchCode Branch_Code
      ,DeliveryAddress[Delivery_Address]
      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd')[Invoice_Date_Time]
      ,FORMAT(InvoiceDateTime,'yyyy-MM-dd')[Delivery_Date_Time]
      ,[Post]
      ,ProductCode [Item_Code]
      ,ProductName[Item_Name]
      ,[Quantity]
      ,[SourcePaidQuantity]
      ,UnitPrice[NBR_Price]
      ,[UOM]
      ,VATRate[VAT_Rate]
      ,SDRate[SD_Rate]
      ,'Y'[Non_Stock]
      ,'0'[Trading_MarkUp]
      ,DiscountAmount[Discount_Amount]
      ,PromotionalQuantity[Promotional_Quantity]
      ,'VAT 4.3'[VAT_Name]
      ,LCNumber[LC_Number]
      ,CurrencyCode[Currency_Code]
      ,'NEW'[Sale_Type]
      ,PreviousInvoiceNo[Previous_Invoice_No]
      ,'N'[Is_Print]
      ,'0'[Tender_Id]
      ,ReferenceNo[Reference_No]
      ,[SubTotal]
      ,[Type]
      ,TotalValue
      ,TransactionType
   ,SDAmount
   ,VAT_Amount
  FROM VAT_Source_Sales as Sale
where id in(select  id from #TableIsloadComplete) and IsProcessed = 'N'";

                #endregion

                int counter = 0;
                SqlCommand cmd = new SqlCommand("", currConn, transaction);

                try
                {

                    #region Delete and Bulk Insert to SalesInvoiceHeaderMasterTemp

                    string deleteFromMasterTemp = @"delete from SalesInvoiceHeaderMasterTemp";
                    cmd = new SqlCommand(deleteFromMasterTemp, currConn, transaction);
                    transResult = cmd.ExecuteNonQuery();

                    string[] resultBulkInsert = commonDal.BulkInsert("SalesInvoiceHeaderMasterTemp", master, currConn, transaction);


                    #endregion

                    #region Update Invoice Date to VAT_Source_Sales

                    if (!string.IsNullOrEmpty(InvoiceDateTime))
                    {
                        string updateDate = @" update VAT_Source_Sales set InvoiceDateTime = '" + InvoiceDateTime + "'";
                        cmd.CommandText = updateDate;
                        transResult = cmd.ExecuteNonQuery();

                    }
                    #endregion

                    #region Delete Unchecked from SalesInvoiceHeaderMasterTemp

                    string deleteUnchecked = @"delete from SalesInvoiceHeaderMasterTemp where [Check] = 0";
                    cmd.CommandText = deleteUnchecked;
                    transResult = cmd.ExecuteNonQuery();

                    #endregion

                    #region Calculate Loop Counter

                    string loopCounter = @"select (Count(ID)/@topValue) from SalesInvoiceHeaderMasterTemp";
                    string topValue = commonDal.settingValue("IntegrationDataLoad", "TopValue", null, currConn, transaction);
                    loopCounter = loopCounter.Replace("@topValue", topValue);

                    insertIntoLoadTable = insertIntoLoadTable.Replace("@value", topValue);

                    cmd.CommandText = loopCounter;
                    object result = cmd.ExecuteScalar();



                    if (result != null)
                    {
                        counter = Convert.ToInt32(result) + 1;
                    }

                    SetSteps(counter + 2);


                    #endregion

                    #region Create Temp Load table

                    string loadCompleteTable = @" create table #TableIsloadComplete(LineNumber int identity(1,1),Id varchar(6000))  ";
                    cmd.CommandText = loadCompleteTable;
                    transResult = cmd.ExecuteNonQuery();


                    #endregion

                }
                catch (Exception ex)
                {

                    throw ex;
                }

                #region Commit First Half

                // commit first half

                transaction.Commit();
                transaction.Dispose();

                #endregion

                #region Data Saving Loop

                DataTable table = new DataTable();
                SqlDataAdapter adapter;
                IntegrationParam saleMasterVm = new IntegrationParam() { TransactionType = transactionType, BranchCode = branchCode };
                callBack();

                try
                {

                    for (int i = 0; i < counter; i++)
                    {

                        try
                        {
                            #region New Transaction

                            transaction = currConn.BeginTransaction();
                            cmd.Transaction = transaction;

                            #endregion

                            #region Insert to Load Table

                            cmd.CommandText = insertIntoLoadTable;
                            transResult = cmd.ExecuteNonQuery();

                            #endregion

                            #region Get Data from VAT_Source_Sales

                            cmd.CommandText = getData;
                            adapter = new SqlDataAdapter(cmd);
                            table = new DataTable();
                            adapter.Fill(table);

                            if (table.Rows.Count == 0)
                            {
                                break;
                            }

                            #endregion

                            #region Table Validation for SalesTempData

                            saleDAL.TableValidation(table, saleMasterVm);

                            #endregion

                            #region Save Data

                            retResults = saleDAL.SaveAndProcess_WithOutBulk(table, () => { }, branchId, app, null);

                            #endregion

                            #region Update SalesInvoiceHeaderMasterTemp Table and Delete Temp Load Table

                            cmd.CommandText = updateMaster + "  " + deleteLoaded;
                            transResult = cmd.ExecuteNonQuery();

                            #endregion

                            callBack();

                            #region Commit Loop Transaction

                            transaction.Commit();
                            transaction.Dispose();
                            #endregion
                        }
                        catch (Exception ex)
                        {

                            throw ex;
                        }

                    }

                }
                catch (Exception ex)
                {

                    throw ex;
                }
                #endregion

                #region Update Invoice No in VAT_Source_Sales Table

                // new transaction connection
                //currConn = _dbsqlConnection.GetConnection();
                //currConn.Open();

                if (transaction == null || transaction.Connection == null)
                {
                    transaction = currConn.BeginTransaction();
                }

                //cmd.Connection = currConn;
                cmd.Transaction = transaction;

                string tableSource = @"VAT_Source_Sales";

                if (isExcel)
                {
                    tableSource = @"VAT_Source_Sales";
                }

                string updateInvoiceNo =
@"UPDATE " + tableSource + @" SET 
  IsProcessed = 'Y', Post =sih.Post 
, InvoiceNo=sih.SalesInvoiceNo   
FROM " + tableSource + @" sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.ID=sih.ImportIDExcel 
WHERE 1=1 ";

                updateInvoiceNo += " AND sSal.ID IN (select distinct ID from SalesInvoiceHeaderMasterTemp)";
                cmd.CommandText = updateInvoiceNo;
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Drop Loaded table

                string dropLoadCompleteTable = @"drop table #TableIsloadComplete;";
                cmd.CommandText = dropLoadCompleteTable;
                transResult = cmd.ExecuteNonQuery();

                #endregion

                #region Result

                retResults[0] = "Success";
                retResults[1] = "Data Saved Successfully!";

                #endregion

                #region Commit

                transaction.Commit();
                transaction.Dispose();
                #endregion

                #region Return Result

                return retResults;

                #endregion

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "SaveSaleWithSteps_Split_Withoutbulk", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public void DeleteDuplicateSale(SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtVAT_Source_Sales = new DataTable();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                sqlText = @"

update  VAT_Source_Sales                             
set PeriodId=RIGHT('0'+CONVERT(VARCHAR(2),MONTH(InvoiceDateTime)) +  CONVERT(VARCHAR(4),YEAR(InvoiceDateTime)),6)
where PeriodId is null or PeriodId = ''

delete from VAT_Source_Sales where ID in(
select VAT_Source_Sales.ID from 
VAT_Source_Sales join SalesInvoiceHeaders on VAT_Source_Sales.ID = SalesInvoiceHeaders.ImportIDExcel 
and VAT_Source_Sales.PeriodId = SalesInvoiceHeaders.PeriodID)
";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                int rows = cmd.ExecuteNonQuery();

                #region Commit
                if (Vtransaction == null)
                {
                    if (transaction != null)
                    {
                        transaction.Commit();
                    }
                }
                #endregion Commit

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "DeleteDuplicateSale", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (VcurrConn == null)
                {
                    if (currConn != null)
                    {
                        if (currConn.State == ConnectionState.Open)
                        {
                            currConn.Close();
                        }
                    }
                }
            }
            #endregion

        }
        public DataTable Get_VAT_Source_Sales_IDs(SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtVAT_Source_Sales = new DataTable();

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                sqlText = @"
SELECT 
DISTINCT 
'True' [Check]
,ID
FROM VAT_Source_Sales";

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtVAT_Source_Sales);

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "Get_VAT_Source_Sales_IDs", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtVAT_Source_Sales;
        }

        public ResultVM SaveSale(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            #region try

            try
            {

                DataTable dtSales = new DataTable();

                #region Delete duplicate rows based on PeriodId and ID

                DeleteDuplicateSale(null, null);

                #endregion

                #region Bulk Insert to Sales

                DataTable dtVAT_Source_Sales = new DataTable();
                dtVAT_Source_Sales = Get_VAT_Source_Sales_IDs();

                if (dtVAT_Source_Sales == null || dtVAT_Source_Sales.Rows.Count == 0)
                {
                    rVM.Message = "Sales are laready exists in the system!";
                    return rVM;
                }


                sqlResults = SaveSaleWithSteps_Split_Withoutbulk(dtVAT_Source_Sales, paramVM.callBack, paramVM.DefaultBranchId,
                    "", "", "", false, "", paramVM.SetSteps);

                #endregion

                rVM.Status = sqlResults[0];
                rVM.Message = "Data Saved Successfully";
                rVM.RowCount = dtSales.Rows.Count;
            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveSale", ex.ToString());

                rVM.Message = ex.Message;
                throw ex;
            }
            #endregion

            #region finally

            finally
            {

            }
            #endregion

            return rVM;
        }

        public string[] PostSelectedData(DataTable master, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            CommonDAL commonDal = new CommonDAL();
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Bulk Insert to Temp

                string deleteFromMasterTemp = "delete from SalesInvoiceHeaderMasterTemp";

                SqlCommand cmd = new SqlCommand(deleteFromMasterTemp, currConn, transaction);

                cmd.ExecuteNonQuery();
                string[] resultBulkInsert = commonDal.BulkInsert("SalesInvoiceHeaderMasterTemp", master, currConn, transaction);

                #endregion

                #region PostData

                string postData = @" UPDATE SalesInvoiceHeaders SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.InvoiceNo=sih.SalesInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )


UPDATE SalesInvoiceDetails SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN SalesInvoiceDetails sih on sSal.InvoiceNo=sih.SalesInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )


UPDATE PurchaseInvoiceHeaders SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN PurchaseInvoiceHeaders pih on sSal.InvoiceNo=pih.PurchaseInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )

UPDATE PurchaseInvoiceDetails SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN PurchaseInvoiceDetails pid on sSal.InvoiceNo=pid.PurchaseInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )


UPDATE ReceiveHeaders SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN ReceiveHeaders pih on sSal.InvoiceNo=pih.ReceiveNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )

UPDATE ReceiveHeaders SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN ReceiveHeaders pid on sSal.InvoiceNo=pid.ReceiveNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )



UPDATE IssueDetails SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN IssueDetails pih on sSal.InvoiceNo=pih.IssueNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )

UPDATE IssueDetails SET 
  Post = 'Y'  
FROM VAT_Source_Sales sSal
INNER JOIN IssueDetails pid on sSal.InvoiceNo=pid.IssueNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp )



UPDATE VAT_Source_Sales SET 
  Post = sih.Post  
FROM VAT_Source_Sales sSal
INNER JOIN SalesInvoiceHeaders sih on sSal.InvoiceNo=sih.SalesInvoiceNo 
WHERE 1=1 and sSal.ID in (select ID from SalesInvoiceHeaderMasterTemp)";

                cmd.CommandText = postData;
                cmd.ExecuteNonQuery();


                #endregion

                transaction.Commit();

                retResults[0] = "success";
                retResults[1] = "Data Posted";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("ImportDAL", "PostSelectedData", ex.ToString());

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        #endregion

        #region Not Use

        //        public DataTable GetDB2Data(SysDBInfoVMTemp connVM = null)
        //        {
        //            #region Initializ
        //            string sqlText = "";

        //            string insertSQLText = "";
        //            int Id = 0;
        //            string[] retResults = new string[6];
        //            retResults[0] = "Fail";//Success or Fail
        //            retResults[1] = "Fail";// Success or Fail Message
        //            retResults[2] = Id.ToString();// Return Id
        //            retResults[3] = sqlText; //  SQL Query
        //            retResults[4] = "ex"; //catch ex
        //            retResults[5] = "Insert"; //Method Name
        //            DB2Connection currConn = null;
        //            DB2Transaction transaction = null;
        //            #endregion

        //            #region try

        //            try
        //            {
        //                #region open connection and transaction

        //                //currConn = _dbsqlConnection.GetDepoConnection(new DataTable());

        //                currConn = new DB2Connection("Database=DB/2;UserID=VATSYMPHNY;Password=VAT*****;Server=10.32.1.10");

        //                if (currConn.State != ConnectionState.Open)
        //                {
        //                    currConn.Open();
        //                }

        //                transaction = currConn.BeginTransaction();

        //                #endregion open connection and transaction

        //                sqlText = @" 
        //@select
        //       [ID]
        //      ,[Customer_Name]
        //      ,[Customer_Code]
        //      ,[Delivery_Address]
        //      ,[Invoice_Date_Time]
        //      ,[Post]
        //      ,[Item_Code]
        //      ,[Item_Name]
        //      ,[Quantity]
        //      ,[NBR_Price]
        //      ,[UOM]
        //      ,[VAT_Rate]
        //      ,[SD_Rate]
        //      ,[Non_Stock]
        //      ,[Trading_MarkUp]
        //      ,[Discount_Amount]
        //      ,[Promotional_Quantity]
        //      ,[VAT_Name]
        //      ,[LC_Number]
        //      ,[Currency_Code]
        //      ,[Sale_Type]
        //      ,[Previous_Invoice_No]
        //      ,[Is_Print]
        //      ,[Tender_Id]
        //      ,[Reference_No]
        //      ,[SubTotal]
        //      ,[Type]
        //  FROM SaleInvoices as Sale
        //
        //  WHERE 1=1
        //
        // "; //07/0007401



        //                //SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


        //                DataTable table = new DataTable();
        //                //SqlDataAdapter adapter = new SqlDataAdapter(cmd);

        //                //adapter.Fill(table);

        //                #region Commit


        //                if (transaction != null)
        //                {
        //                    transaction.Commit();
        //                }

        //                #endregion Commit

        //                return table;

        //            }
        //            #endregion

        //            #region Catch and Finall
        //            catch (Exception ex)
        //            {
        //                retResults[0] = "Fail";//Success or Fail
        //                retResults[4] = ex.Message.ToString(); //catch ex
        //                if (transaction != null) { transaction.Rollback(); }
        //                FileLogger.Log("ImportDAL", "GetSaleBCLDbData", ex.ToString() + "\n" + sqlText);

        //                throw ex;
        //            }
        //            finally
        //            {

        //                if (currConn != null)
        //                {
        //                    if (currConn.State == ConnectionState.Open)
        //                    {
        //                        currConn.Close();
        //                    }

        //                }
        //            }
        //            #endregion
        //        }

        #endregion

        public DataTable GetSaleKohinoorFGData(string invoiceNo, DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @"  SELECT A.TranNo ID, 

 A.TranDate TransactionDateTime,
  A.TranNo ReferenceNo, 
  Remarks 
  Comments,
 'N' Post, 
 '' TransactionType,
 '-' ProductCode, 
 D.Name ProductName, 
 B.Quantity, 
D.CostPrice ,
'Pcs' UOM, 
0 VAT_Rate,
	 cast(A.FromDepotID as varchar(100)) BranchCode,
	cast(A.ToDepotID as varchar(100)) TransferToBranchCode,
	'-' CommentsD
      ,  'NA' VehicleNo
      ,  'NA' VehicleType
  FROM TranMaster A left outer join TranDetails B ON A.TranID=B.TranID 
  left outer join Distributor C ON A.DistributorID=C.DistributorID left outer join Products D ON B.ProductID=D.ProductID

  --WHERE A.TranNo='01/07/0003208'

  WHERE A.TranNo=@SalesInvoiceNo "; //07/0007401

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.AddWithValue("@SalesInvoiceNo", invoiceNo);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleKohinoorFGData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleCDNData(string invoiceNo, string dataBase, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction



                currConn = _dbsqlConnection.GetConnectionForLogin(dataBase);
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction


                sqlText = @" SELECT 
      sih.[SalesInvoiceNo] ID
	  ,cg.CustomerGroupName CustomerGroup
      ,c.CustomerName Customer_Name
	  ,c.CustomerCode Customer_Code
      ,cast(sih.[InvoiceDateTime] as varchar(100)) Invoice_Date_Time
      ,cast(sih.[DeliveryDate] as varchar(100))   Delivery_Date_Time
      ,sih.[DeliveryAddress1] Delivery_Address
      ,sih.[DeliveryAddress2] 
      ,sih.[DeliveryAddress3] 
      ,sih.Trading
      ,sih.IsVDS
      ,sih.VDSCertificateDate
      ,sih.GetVDSCertificate
      ,sih.AlReadyPrint
      ,sih.DeliveryChallanNo
      ,sih.IsGatePass
      ,sih.CompInvoiceNo

      ,sih.LCBank
      ,sih.LCDate

      ,sih.ValueOnly

	 , sih.SerialNo Reference_No
      ,sih.[Comments]
      ,sih.[SaleType] Sale_Type
      ,sih.[PreviousSalesInvoiceNo] Previous_Invoice_No
	   ,sih.[IsPrint] Is_Print
      ,sih.[TenderId] Tender_Id
      ,cast(sih.[SaleReturnId] as decimal) ReturnId

      ,sih.[Post]
      ,sih.[LCNumber] LC_Number
      ,cc.CurrencyCode Currency_Code
      ,sids.Comments CommentsD
	  ,p.ProductCode Item_Code
	  ,p.ProductName Item_Name
	  , sids.Quantity
	  , sids.NBRPrice NBR_Price
	  ,sids.UOM
	  ,sids.VATRate VAT_Rate
	  ,sids.SD SD_Rate
	  ,sids.NonStock Non_Stock	  
	  ,sids.TradingMarkUp Trading_MarkUp
	  ,sids.Type 
	  ,sids.DiscountAmount Discount_Amount
	  ,sids.PromotionalQuantity Promotional_Quantity 	  	  
	  ,sids.VATName VAT_Name 	  	  
	  ,sids.SubTotal SubTotal 	  	  
	  ,sids.Weight	  	  
	  ,sids.WareHouseRent	  	  
	  ,sids.WareHouseVAT	  	  
	  ,sids.ATVRate	  	  
	  ,sids.ATVablePrice	  	  
	  ,sids.ATVAmount	  	  
  	  
	  ,sids.DiscountedNBRPrice	  	  
  	  
	  ,sids.CConversionDate	  	  
	  ,sids.BENumber	  	  
	  ,vh.VehicleNo Vehicle_No	  	  

  FROM SalesInvoiceHeaders sih left outer join  SalesInvoiceDetails sids
  on sih.SalesInvoiceNo = sids.SalesInvoiceNo left outer join Customers c
  on sih.CustomerID = c.CustomerID left outer join CustomerGroups cg
  on c.CustomerGroupID = cg.CustomerGroupID left outer join Vehicles vh
  on sih.[VehicleID] = vh.[VehicleID] left outer join Products p
  on  sids.ItemNo = p.ItemNo left outer join Currencies cc
  on sih.[CurrencyID] = cc.[CurrencyID]  

  where sih.SalesInvoiceNo like '%'+ @invoiceNo + '%'";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.Add(new SqlParameter("@invoiceNo", invoiceNo));

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleCDNData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleDataJapha()
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            OdbcConnection currConn = null;
            OdbcTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction



                currConn = _dbsqlConnection.GetJaphaConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction


                sqlText = @" select * from SaleRegister";

                OdbcCommand cmd = new OdbcCommand(sqlText, currConn, transaction);

                DataTable table = new DataTable();
                OdbcDataAdapter adapter = new OdbcDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleCDNData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        #region Square

        public DataTable GetSaleSQRDbDataSoap(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            //OleDbConnection currConn = null;
            //OleDbTransaction transaction = null;

            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                //,side.VAT_Rate side.Vat_Amt (d.carton_Unit*d.crtn_Qnty)+d.PCS_Qnty Quantity       || ' ' || invoice_mst.delivery_time

                #region OldText

                //                sqlText = @"
                //
                //
                //select 
                //invoice_mst_soap.invoice_no ID,
                //invoice_mst_soap.customer_code Customer_Code, customer_info_soap.customer_name Customer_Name,
                //invoice_mst_soap.delivery_date  Delivery_Date_Time,
                //invoice_mst_soap.invoice_date Invoice_Date_Time,
                //customer_info_soap.customer_address Delivery_Address,
                //invoice_dtl_soap.product_code Item_Code,
                //'-' Item_Name,
                //'-' Vehicle_No,
                //''  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
                //'VAT 4.3' VAT_Name, invoice_dtl_soap.total as  SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code,
                //(invoice_issue_soap.issued_qty+NVL(invoice_bonus_soap.bonus_qty,0)) Quantity
                //from invoice_dtl_soap 
                //left outer join invoice_mst_soap on invoice_dtl_soap.inv_mst_slno=invoice_mst_soap.inv_mst_slno
                //left outer join  (select distinct inv_dtl_slno,product_code,sum(bonus_qty )bonus_qty from invoice_bonus_soap  group by inv_dtl_slno,product_code)invoice_bonus_soap on invoice_dtl_soap.inv_dtl_slno=invoice_bonus_soap.inv_dtl_slno 
                //and invoice_dtl_soap.product_code=invoice_bonus_soap.product_code 
                //left outer join (select distinct inv_dtl_slno,product_code,sum(issued_qty )issued_qty  from invoice_issue_soap group by inv_dtl_slno,product_code)invoice_issue_soap on invoice_dtl_soap.inv_dtl_slno=invoice_issue_soap.inv_dtl_slno
                //and invoice_dtl_soap.product_code=invoice_issue_soap.product_code 
                //left outer join customer_info_soap on invoice_mst_soap.customer_code = customer_info_soap.customer_code
                //where invoice_mst_soap.invoice_no  in (  ";                             //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N'

                #endregion

                sqlText = @"
select 
m.invoice_no ID,
b.Quantity
,b.product_code Item_Code 
,
ci.customer_code Customer_Code, ci.customer_name Customer_Name,
m.delivery_date  Delivery_Date_Time,
m.invoice_date Invoice_Date_Time,
ci.customer_address Delivery_Address,

'-' Item_Name,
'-' Vehicle_No,
m.invoice_no  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
'VAT 4.3' VAT_Name, d.total SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code
from (
select distinct 
a.inv_dtl_slno,a.product_code ,sum(a.issued_qty)Quantity 
from (
select inv_dtl_slno,product_code,issued_qty from invoice_issue_soap 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_soap where inv_mst_slno in (select inv_mst_slno from invoice_mst_soap where invoice_no  in (@invNo)) )
union all
select inv_dtl_slno,product_code,bonus_qty from invoice_bonus_soap 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_soap where inv_mst_slno in (select inv_mst_slno from invoice_mst_soap where invoice_no  in (@invNo)) )
 ) a

 group by a.inv_dtl_slno,a.product_code 
 ) b
left outer join invoice_dtl_soap d on d.inv_dtl_slno=b.inv_dtl_slno
  left outer join invoice_mst_soap m on d.inv_mst_slno=m.inv_mst_slno
  left outer join customer_info_soap ci on ci.customer_code = m.customer_code

";

                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;
                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["Reference_No"] = joinIds;
                }

                //foreach(DataRow row in finalTable.Rows)
                //{
                //    if (string.IsNullOrEmpty(row["VAT_Rate"].ToString()))
                //    {
                //        row["VAT_Rate"] = "0";
                //    }
                //    if (string.IsNullOrEmpty(row["NBR_Price"].ToString()))
                //    {
                //        row["NBR_Price"] = "0";
                //    }
                //}

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbDataSoap", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleSQRDbDataSenora(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            //OleDbConnection currConn = null;
            //OleDbTransaction transaction = null;

            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                //,side.VAT_Rate side.Vat_Amt (d.carton_Unit*d.crtn_Qnty)+d.PCS_Qnty Quantity       || ' ' || invoice_mst.delivery_time

                #region OldText

                //                sqlText = @"
                //select 
                //invoice_mst_senora.invoice_no ID,
                //invoice_mst_senora.customer_code Customer_Code, customer_info_senora.customer_name Customer_Name,
                //invoice_mst_senora.delivery_date  Delivery_Date_Time,
                //invoice_mst_senora.invoice_date Invoice_Date_Time,
                //customer_info_senora.customer_address Delivery_Address,
                //invoice_dtl_senora.product_code Item_Code,
                //'-' Item_Name,
                //'-' Vehicle_No,
                //''  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
                //'VAT 4.3' VAT_Name, invoice_dtl_senora.total as  SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code,
                //(invoice_issue_senora.issued_qty+NVL(invoice_bonus_senora.bonus_qty,0)) Quantity
                //from invoice_dtl_senora 
                //left outer join invoice_mst_senora on invoice_dtl_senora.inv_mst_slno=invoice_mst_senora.inv_mst_slno
                //left outer join  (select distinct inv_dtl_slno,product_code,sum(bonus_qty )bonus_qty from invoice_bonus_senora  group by inv_dtl_slno,product_code)invoice_bonus_senora on invoice_dtl_senora.inv_dtl_slno=invoice_bonus_senora.inv_dtl_slno 
                //and invoice_dtl_senora.product_code=invoice_bonus_senora.product_code 
                //left outer join (select distinct inv_dtl_slno,product_code,sum(issued_qty )issued_qty  from invoice_issue_senora group by inv_dtl_slno,product_code)invoice_issue_senora on invoice_dtl_senora.inv_dtl_slno=invoice_issue_senora.inv_dtl_slno
                //and invoice_dtl_senora.product_code=invoice_issue_senora.product_code 
                //left outer join customer_info_senora on invoice_mst_senora.customer_code = customer_info_senora.customer_code 
                //
                //where invoice_mst_senora.invoice_no in (  ";                             //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N'

                #endregion

                sqlText = @"
select 
m.invoice_no ID,
b.Quantity
,b.product_code Item_Code 
,
ci.customer_code Customer_Code, ci.customer_name Customer_Name,
m.delivery_date  Delivery_Date_Time,
m.invoice_date Invoice_Date_Time,
ci.customer_address Delivery_Address,

'-' Item_Name,
'-' Vehicle_No,
m.invoice_no  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
'VAT 4.3' VAT_Name, d.total SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code
from (
select distinct 
a.inv_dtl_slno,a.product_code ,sum(a.issued_qty)Quantity 
from (
select inv_dtl_slno,product_code,issued_qty from invoice_issue_senora 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_senora where inv_mst_slno in (select inv_mst_slno from invoice_mst_senora where invoice_no  in (@invNo)) )
union all
select inv_dtl_slno,product_code,bonus_qty from invoice_bonus_senora 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_senora where inv_mst_slno in (select inv_mst_slno from invoice_mst_senora where invoice_no  in (@invNo)) )
 ) a

 group by a.inv_dtl_slno,a.product_code 
 ) b
left outer join invoice_dtl_senora d on d.inv_dtl_slno=b.inv_dtl_slno
  left outer join invoice_mst_senora m on d.inv_mst_slno=m.inv_mst_slno
  left outer join customer_info_senora ci on ci.customer_code = m.customer_code";

                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;
                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["Reference_No"] = joinIds;
                }

                //foreach(DataRow row in finalTable.Rows)
                //{
                //    if (string.IsNullOrEmpty(row["VAT_Rate"].ToString()))
                //    {
                //        row["VAT_Rate"] = "0";
                //    }
                //    if (string.IsNullOrEmpty(row["NBR_Price"].ToString()))
                //    {
                //        row["NBR_Price"] = "0";
                //    }
                //}

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbDataSenora", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetFGSQRDbDataSoap(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                //,side.VAT_Rate side.Vat_Amt (d.carton_Unit*d.crtn_Qnty)+d.PCS_Qnty Quantity       || ' ' || invoice_mst.delivery_time

                #region OldText

                //                sqlText = @"
                //
                //
                //select 
                //invoice_mst_soap.invoice_no ID,
                //invoice_mst_soap.invoice_date TransactionDateTime,
                //invoice_dtl_soap.product_code ProductCode,
                //'-' ProductName,
                //invoice_mst_soap.invoice_no  ReferenceNo,'-' Comments,
                // 0 CostPrice, 0 VAT_Rate, 'N' Post, ' ' UOM, '' BranchCode, '' TransactionType, '' TransferToBranchCode,
                //(invoice_issue_soap.issued_qty+NVL(invoice_bonus_soap.bonus_qty,0)) Quantity
                //from invoice_dtl_soap 
                //left outer join invoice_mst_soap on invoice_dtl_soap.inv_mst_slno=invoice_mst_soap.inv_mst_slno
                //left outer join  (select distinct inv_dtl_slno,product_code,sum(bonus_qty )bonus_qty from invoice_bonus_soap  group by inv_dtl_slno,product_code)invoice_bonus_soap on invoice_dtl_soap.inv_dtl_slno=invoice_bonus_soap.inv_dtl_slno 
                //and invoice_dtl_soap.product_code=invoice_bonus_soap.product_code 
                //left outer join (select distinct inv_dtl_slno,product_code,sum(issued_qty )issued_qty  from invoice_issue_soap group by inv_dtl_slno,product_code)invoice_issue_soap on invoice_dtl_soap.inv_dtl_slno=invoice_issue_soap.inv_dtl_slno
                //and invoice_dtl_soap.product_code=invoice_issue_soap.product_code 
                //left outer join customer_info_soap on invoice_mst_soap.customer_code = customer_info_soap.customer_code
                //where invoice_mst_soap.invoice_no  in (  ";                             //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N'

                #endregion

                sqlText = @"
select 
m.invoice_no ID,
m.invoice_date TransactionDateTime,
d.product_code ProductCode,
'-' ProductName,
b.Quantity,
m.invoice_no  ReferenceNo,'-' Comments,
 0 CostPrice, 0 VAT_Rate, 'N' Post, ' ' UOM, '' BranchCode, '' TransactionType, '' TransferToBranchCode
from (
select distinct 
a.inv_dtl_slno,a.product_code ,sum(a.issued_qty)Quantity 
from (
select inv_dtl_slno,product_code,issued_qty from invoice_issue_soap 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_soap where inv_mst_slno in (select inv_mst_slno from invoice_mst_soap where invoice_no  in (@invNo)) )
union all
select inv_dtl_slno,product_code,bonus_qty from invoice_bonus_soap 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_soap where inv_mst_slno in (select inv_mst_slno from invoice_mst_soap where invoice_no  in (@invNo)) )
 ) a

 group by a.inv_dtl_slno,a.product_code 
 ) b
left outer join invoice_dtl_soap d on d.inv_dtl_slno=b.inv_dtl_slno
  left outer join invoice_mst_soap m on d.inv_mst_slno=m.inv_mst_slno
  left outer join customer_info_soap ci on ci.customer_code = m.customer_code
";

                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;
                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    else if (clName.ToLower() == "BranchCode".ToLower())
                    {
                        clName = "BranchCode";
                    }
                    else if (clName.ToLower() == "TransactionType".ToLower())
                    {
                        clName = "TransactionType";
                    }
                    else if (clName.ToLower() == "ProductCode".ToLower())
                    {
                        clName = "ProductCode";
                    }
                    else if (clName.ToLower() == "ProductName".ToLower())
                    {
                        clName = "ProductName";
                    }
                    else if (clName.ToLower() == "CostPrice".ToLower())
                    {
                        clName = "CostPrice";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransactionDateTime".ToLower())
                    {
                        clName = "TransactionDateTime";
                    }
                    else if (clName.ToLower() == "ReferenceNo".ToLower())
                    {
                        clName = "ReferenceNo";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["ReferenceNo"] = joinIds;
                }

                //foreach(DataRow row in finalTable.Rows)
                //{
                //    if (string.IsNullOrEmpty(row["VAT_Rate"].ToString()))
                //    {
                //        row["VAT_Rate"] = "0";
                //    }
                //    if (string.IsNullOrEmpty(row["NBR_Price"].ToString()))
                //    {
                //        row["NBR_Price"] = "0";
                //    }
                //}

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetFGSQRDbDataSoap", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetFGSQRDbDataSenora(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                //,side.VAT_Rate side.Vat_Amt (d.carton_Unit*d.crtn_Qnty)+d.PCS_Qnty Quantity       || ' ' || invoice_mst.delivery_time

                #region OldText

                //                sqlText = @"
                //
                //
                //select 
                //invoice_mst_senora.invoice_no ID,
                //invoice_mst_senora.invoice_date TransactionDateTime,
                //invoice_dtl_senora.product_code ProductCode,
                //'-' ProductName,
                //invoice_mst_senora.invoice_no  ReferenceNo,'-' Comments,
                // 0 CostPrice, 0 VAT_Rate, 'N' Post, ' ' UOM, '' BranchCode, '' TransactionType, '' TransferToBranchCode,
                //(invoice_issue_senora.issued_qty+NVL(invoice_bonus_senora.bonus_qty,0)) Quantity
                //from invoice_dtl_senora 
                //left outer join invoice_mst_senora on invoice_dtl_senora.inv_mst_slno=invoice_mst_senora.inv_mst_slno
                //left outer join  (select distinct inv_dtl_slno,product_code,sum(bonus_qty )bonus_qty from invoice_bonus_senora  group by inv_dtl_slno,product_code)invoice_bonus_senora on invoice_dtl_senora.inv_dtl_slno=invoice_bonus_senora.inv_dtl_slno 
                //and invoice_dtl_senora.product_code=invoice_bonus_senora.product_code 
                //left outer join (select distinct inv_dtl_slno,product_code,sum(issued_qty )issued_qty  from invoice_issue_senora group by inv_dtl_slno,product_code)invoice_issue_senora on invoice_dtl_senora.inv_dtl_slno=invoice_issue_senora.inv_dtl_slno
                //and invoice_dtl_senora.product_code=invoice_issue_senora.product_code 
                //left outer join customer_info_senora on invoice_mst_senora.customer_code = customer_info_senora.customer_code
                //where invoice_mst_senora.invoice_no  in (  ";                             //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N'

                #endregion

                sqlText = @"
select 
m.invoice_no ID,
m.invoice_date TransactionDateTime,
d.product_code ProductCode,
'-' ProductName,
b.Quantity,
m.invoice_no  ReferenceNo,'-' Comments,
 0 CostPrice, 0 VAT_Rate, 'N' Post, ' ' UOM, '' BranchCode, '' TransactionType, '' TransferToBranchCode
from (
select distinct 
a.inv_dtl_slno,a.product_code ,sum(a.issued_qty)Quantity 
from (
select inv_dtl_slno,product_code,issued_qty from invoice_issue_senora 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_senora where inv_mst_slno in (select inv_mst_slno from invoice_mst_senora where invoice_no  in (@invNo)) )
union all
select inv_dtl_slno,product_code,bonus_qty from invoice_bonus_senora 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl_senora where inv_mst_slno in (select inv_mst_slno from invoice_mst_senora where invoice_no  in (@invNo)) )
 ) a

 group by a.inv_dtl_slno,a.product_code 
 ) b
left outer join invoice_dtl_senora d on d.inv_dtl_slno=b.inv_dtl_slno
  left outer join invoice_mst_senora m on d.inv_mst_slno=m.inv_mst_slno
  left outer join customer_info_senora ci on ci.customer_code = m.customer_code
";

                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;
                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    else if (clName.ToLower() == "BranchCode".ToLower())
                    {
                        clName = "BranchCode";
                    }
                    else if (clName.ToLower() == "TransactionType".ToLower())
                    {
                        clName = "TransactionType";
                    }
                    else if (clName.ToLower() == "ProductCode".ToLower())
                    {
                        clName = "ProductCode";
                    }
                    else if (clName.ToLower() == "ProductName".ToLower())
                    {
                        clName = "ProductName";
                    }
                    else if (clName.ToLower() == "CostPrice".ToLower())
                    {
                        clName = "CostPrice";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransactionDateTime".ToLower())
                    {
                        clName = "TransactionDateTime";
                    }
                    else if (clName.ToLower() == "ReferenceNo".ToLower())
                    {
                        clName = "ReferenceNo";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["ReferenceNo"] = joinIds;
                }

                //foreach(DataRow row in finalTable.Rows)
                //{
                //    if (string.IsNullOrEmpty(row["VAT_Rate"].ToString()))
                //    {
                //        row["VAT_Rate"] = "0";
                //    }
                //    if (string.IsNullOrEmpty(row["NBR_Price"].ToString()))
                //    {
                //        row["NBR_Price"] = "0";
                //    }
                //}

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetFGSQRDbDataSenora", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleAduriDbData(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetAdhuriConnection(db);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @" USE SquarePrimarySales

SELECT 
ID
,Customer_Name
,Customer_Code
,Delivery_Address
,Invoice_Date_Time
,Delivery_Date_Time
,Post
,Item_Code
,Item_Name
,(Quantity + FreeQuantity) Quantity
,Price-(CommissionValue/((Quantity + FreeQuantity))) NBR_Price
,UOM
,VAT_Rate
,SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
FROM View_Invoice_Info AS Sale WHERE 1=1 and (Quantity + FreeQuantity) > 0 and Sale.ID in ( "; //07/0007401

                foreach (string id in invoiceNo)
                {
                    sqlText += "'" + id + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                foreach (DataRow row in table.Rows)
                {
                    row["ID"] = joinIds;
                    row["Reference_No"] = joinIds;
                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleAduriDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleSQRDbData(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            OracleConnection connection = null;
            OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region oldText

                //,side.VAT_Rate side.Vat_Amt (d.carton_Unit*d.crtn_Qnty)+d.PCS_Qnty Quantity       || ' ' || invoice_mst.delivery_time

                //                sqlText = @"
                //
                //
                //select 
                //invoice_mst.invoice_no ID,
                //invoice_mst.customer_code Customer_Code, customer_info.customer_name Customer_Name,
                //invoice_mst.delivery_date  Delivery_Date_Time,
                //invoice_mst.invoice_date Invoice_Date_Time,
                //customer_info.customer_address Delivery_Address,
                //invoice_dtl.product_code Item_Code,
                //'-' Item_Name,
                //'-' Vehicle_No,
                //invoice_mst.invoice_no  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
                //'VAT 4.3' VAT_Name, invoice_dtl.total SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code,
                //(invoice_issue.issued_qty+NVL(invoice_bonus.bonus_qty,0)) Quantity
                //from invoice_dtl 
                //left outer join invoice_mst on invoice_dtl.inv_mst_slno=invoice_mst.inv_mst_slno
                //left outer join  (select distinct inv_dtl_slno,product_code,sum(bonus_qty )bonus_qty from invoice_bonus  group by inv_dtl_slno,product_code)invoice_bonus on invoice_dtl.inv_dtl_slno=invoice_bonus.inv_dtl_slno 
                //and invoice_dtl.product_code=invoice_bonus.product_code 
                //left outer join (select distinct inv_dtl_slno,product_code,sum(issued_qty )issued_qty  from invoice_issue group by inv_dtl_slno,product_code)invoice_issue on invoice_dtl.inv_dtl_slno=invoice_issue.inv_dtl_slno
                //and invoice_dtl.product_code=invoice_issue.product_code 
                //left outer join customer_info on invoice_mst.customer_code = customer_info.customer_code
                //where invoice_mst.invoice_no  in (  ";   

                #endregion

                sqlText = @"--select * from invoice_mst where invoice_no  = '191201368';
--select * from invoice_dtl where inv_mst_slno='213123';
--distinct inv_dtl_slno,product_code,sum(issued_qty)Quantity

select 
m.invoice_no ID,
b.Quantity
,b.product_code Item_Code ,

ci.customer_code Customer_Code, ci.customer_name Customer_Name,
m.delivery_date  Delivery_Date_Time,
m.invoice_date Invoice_Date_Time,
ci.customer_address Delivery_Address,

'-' Item_Name,
'-' Vehicle_No,
m.invoice_no  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
'VAT 4.3' VAT_Name, nvl(d.total,0) SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code
from (
select distinct 
a.inv_dtl_slno,a.product_code ,sum(a.issued_qty)Quantity 
from (
select inv_dtl_slno,product_code,issued_qty from invoice_issue 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl where inv_mst_slno in (select inv_mst_slno from invoice_mst where invoice_no  in (@invNo)) )
union all
select inv_dtl_slno,product_code,bonus_qty from invoice_bonus 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl where inv_mst_slno in (select inv_mst_slno from invoice_mst where invoice_no  in(@invNo)) )
 ) a

 group by a.inv_dtl_slno,a.product_code 
 ) b
left outer join invoice_dtl d on d.inv_dtl_slno=b.inv_dtl_slno
  left outer join invoice_mst m on d.inv_mst_slno=m.inv_mst_slno
  left outer join customer_info ci on ci.customer_code = m.customer_code
";

                //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N'
                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);

                OracleCommand cmd = new OracleCommand(sqlText, connection, transaction);

                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                OracleDataAdapter adapter = new OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["Reference_No"] = joinIds;
                }

                //foreach(DataRow row in finalTable.Rows)
                //{
                //    if (string.IsNullOrEmpty(row["VAT_Rate"].ToString()))
                //    {
                //        row["VAT_Rate"] = "0";
                //    }
                //    if (string.IsNullOrEmpty(row["NBR_Price"].ToString()))
                //    {
                //        row["NBR_Price"] = "0";
                //    }
                //}

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleSQR_ADH_Data(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            OracleConnection connection = null;
            OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                connection = _dbsqlConnection.GetSQRConnectionFix();

                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }
                transaction = connection.BeginTransaction();

                #endregion open connection and transaction

                #region oldText



                #endregion

                sqlText = @"

--select * from invoice_mst where invoice_no  = '191201368';
--select * from invoice_dtl where inv_mst_slno='213123';
--distinct inv_dtl_slno,product_code,sum(issued_qty)Quantity

select 
m.invoice_no ID,
b.Quantity
,b.sku_code Item_Code ,

ci.customer_code Customer_Code, ci.customer_name Customer_Name,
m.delivery_date  Delivery_Date_Time,
m.invoice_date Invoice_Date_Time,
ci.customer_address Delivery_Address,

'-' Item_Name,
'-' Vehicle_No,
m.invoice_no  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
'VAT 4.3' VAT_Name, nvl(d.total_amount,0)-nvl(d.customer_product_disc_amount,0) SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code
from (
select distinct 
a.DTL_ID,a.sku_code ,sum(a.issue_qty)Quantity 
from (
select DTL_ID,sku_code,issue_qty from depot_invoice_issue 
where DTL_ID in(select DTL_ID from depot_invoice_dtl where mst_id in (select mst_id from depot_invoice_mst where invoice_no  in (@invNo)) and invoice_unit_id in (@unit) )
union all
select DTL_ID,sku_code,bonus_qty from depot_invoice_bonus 
where DTL_ID in(select DTL_ID from depot_invoice_dtl where mst_id in (select mst_id from depot_invoice_mst where invoice_no  in(@invNo)) and invoice_unit_id in (@unit))
--union all
--select mst_id,sku_code,bonus_qty from depot_invoice_combo_bonus 
--where mst_id in(select mst_id from depot_invoice_dtl where mst_id in (select mst_id from depot_invoice_mst where invoice_no  in(@invNo)) )
 ) a

 group by a.DTL_ID,a.sku_code 
 ) b
left outer join depot_invoice_dtl d on d.DTL_ID=b.DTL_ID
  left outer join depot_invoice_mst m on d.mst_id=m.mst_id
  --left outer join customer_info ci on ci.customer_code = m.customer_code
  left outer join depot_customer_info ci on ci.customer_code = m.customer_code

";

                Dictionary<string, string> integrationCodeMap = new Dictionary<string, string>()
                {
                    {"PAB", "1"},
                    {"CTG", "4"},
                    {"UEN", "2"},
                    {"ADH", "3"}
                };
                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');


                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);
                sqlText = sqlText.Replace("@unit", integrationCodeMap[db.Rows[0]["IntegrationCode"].ToString()]);

                OracleCommand cmd = new OracleCommand(sqlText, connection, transaction);

                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                OracleDataAdapter adapter = new OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["Reference_No"] = joinIds;
                }

                //foreach(DataRow row in finalTable.Rows)
                //{
                //    if (string.IsNullOrEmpty(row["VAT_Rate"].ToString()))
                //    {
                //        row["VAT_Rate"] = "0";
                //    }
                //    if (string.IsNullOrEmpty(row["NBR_Price"].ToString()))
                //    {
                //        row["NBR_Price"] = "0";
                //    }
                //}

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleSQRDbData_DINAJPUR(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            OracleConnection connection = null;
            OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @"--select * from invoice_mst where invoice_no  = '191201368';
--select * from invoice_dtl where inv_mst_slno='213123';
--distinct inv_dtl_slno,product_code,sum(issued_qty)Quantity

select 
m.invoice_no ID,
b.Quantity
,b.product_code Item_Code ,

ci.customer_code Customer_Code, ci.customer_name Customer_Name,
m.delivery_date  Delivery_Date_Time,
m.invoice_date Invoice_Date_Time,
ci.customer_address Delivery_Address,

'-' Item_Name,
'-' Vehicle_No,
m.invoice_no  Reference_No,'-' Comments,'New'Sale_Type,'0'Previous_Invoice_No,
'VAT 4.3' VAT_Name, d.total SubTotal, '' Type, 0 NBR_Price, 0 VAT_Rate, 'N' Post, ' ' UOM, 0 SD_Rate,'BDT' Currency_Code
from (
select distinct 
a.inv_dtl_slno,a.product_code ,sum(a.issued_qty)Quantity 
from (
select inv_dtl_slno,product_code,issued_qty from INVOICE_ISSUE_DINAJPUR 
where inv_dtl_slno in(select inv_dtl_slno from INVOICE_DTL_DINAJPUR where inv_mst_slno in (select inv_mst_slno from INVOICE_MST_DINAJPUR where invoice_no  in (@invNo)) )
union all
select inv_dtl_slno,product_code,bonus_qty from INVOICE_BONUS_DINAJPUR 
where inv_dtl_slno in(select inv_dtl_slno from INVOICE_DTL_DINAJPUR where inv_mst_slno in (select inv_mst_slno from INVOICE_MST_DINAJPUR where invoice_no  in(@invNo)) )
 ) a

 group by a.inv_dtl_slno,a.product_code 
 ) b
left outer join INVOICE_DTL_DINAJPUR d on d.inv_dtl_slno=b.inv_dtl_slno
  left outer join INVOICE_MST_DINAJPUR m on d.inv_mst_slno=m.inv_mst_slno
  left outer join customer_info ci on ci.customer_code = m.customer_code
";

                //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N'
                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);

                OracleCommand cmd = new OracleCommand(sqlText, connection, transaction);

                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                OracleDataAdapter adapter = new OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["Reference_No"] = joinIds;
                }

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbData_DINAJPUR", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetVATUser(SqlConnection vConnection = null, SqlTransaction vTransaction = null)
        {
            #region Initializations

            SqlTransaction transaction = null;
            SqlConnection connection = null;
            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();
            int transResult = 0;
            #endregion

            #region try

            try
            {
                #region Connection and Transaction

                if (vConnection == null)
                {
                    connection = _dbsqlConnection.GetConnection();
                    connection.Open();
                }
                else
                {
                    connection = vConnection;
                }
                if (vTransaction == null)
                {
                    transaction = connection.BeginTransaction();
                }
                else
                {
                    transaction = vTransaction;
                }

                #endregion

                string sqlText = @"select FullName UserName from UserInformations
where UserName != 'admin'";

                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);

                DataTable dtresult = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtresult);


                #region Commit

                if (result[0].ToLower() == "success" && vTransaction == null)
                {
                    transaction.Commit();
                }

                #endregion


                return dtresult;
            }
            #endregion

            #region Catch and Finally

            catch (Exception e)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "GetVATUser", e.ToString());

                throw e;
            }
            finally
            {

                if (connection.State == ConnectionState.Open && vConnection == null)
                {
                    connection.Close();

                }

            }
            #endregion
        }

        public DataTable GetFGSQRDbData(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            OracleConnection connection = null;
            OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                //,side.VAT_Rate side.Vat_Amt (d.carton_Unit*d.crtn_Qnty)+d.PCS_Qnty Quantity       || ' ' || invoice_mst.delivery_time

                #region oldText

                //                sqlText = @"
                //select 
                //invoice_mst.invoice_no ID,
                //invoice_mst.invoice_date TransactionDateTime,
                //invoice_dtl.product_code ProductCode,
                //'-' ProductName,
                //invoice_mst.invoice_no  ReferenceNo,'-' Comments,
                // 0 CostPrice, 0 VAT_Rate, 'N' Post, ' ' UOM, '' BranchCode, '' TransactionType, '' TransferToBranchCode,
                //(invoice_issue.issued_qty+NVL(invoice_bonus.bonus_qty,0)) Quantity
                //from invoice_dtl 
                //left outer join invoice_mst on invoice_dtl.inv_mst_slno=invoice_mst.inv_mst_slno
                //left outer join  (select distinct inv_dtl_slno,product_code,sum(bonus_qty )bonus_qty from invoice_bonus  group by inv_dtl_slno,product_code)invoice_bonus on invoice_dtl.inv_dtl_slno=invoice_bonus.inv_dtl_slno 
                //and invoice_dtl.product_code=invoice_bonus.product_code 
                //left outer join (select distinct inv_dtl_slno,product_code,sum(issued_qty )issued_qty  from invoice_issue group by inv_dtl_slno,product_code)invoice_issue on invoice_dtl.inv_dtl_slno=invoice_issue.inv_dtl_slno
                //and invoice_dtl.product_code=invoice_issue.product_code 
                //left outer join customer_info on invoice_mst.customer_code = customer_info.customer_code
                //where invoice_mst.invoice_no  in (  ";   

                #endregion                          //'DO/01/201902/1174H' DC/01/201910/0063 MUSHAK_NO NVL(m.IS_MUSHAK,'N') = 'N'

                sqlText = @"

select 
m.invoice_no ID,
m.invoice_date TransactionDateTime,
d.product_code ProductCode,
'-' ProductName,
b.Quantity,
m.invoice_no  ReferenceNo,'-' Comments,
 0 CostPrice, 0 VAT_Rate, 'N' Post, ' ' UOM, '' BranchCode, '' TransactionType, '' TransferToBranchCode
from (
select distinct 
a.inv_dtl_slno,a.product_code ,sum(a.issued_qty)Quantity 
from (
select inv_dtl_slno,product_code,issued_qty from invoice_issue 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl where inv_mst_slno in (select inv_mst_slno from invoice_mst where invoice_no  in (@invNo)) )
union all
select inv_dtl_slno,product_code,bonus_qty from invoice_bonus 
where inv_dtl_slno in(select inv_dtl_slno from invoice_dtl where inv_mst_slno in (select inv_mst_slno from invoice_mst where invoice_no  in (@invNo)) )
 ) a

 group by a.inv_dtl_slno,a.product_code 
 ) b
left outer join invoice_dtl d on d.inv_dtl_slno=b.inv_dtl_slno
  left outer join invoice_mst m on d.inv_mst_slno=m.inv_mst_slno
  left outer join customer_info ci on ci.customer_code = m.customer_code
";

                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);
                OracleCommand cmd = new OracleCommand(sqlText, connection, transaction);

                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                DataTable table = new DataTable();
                OracleDataAdapter adapter = new OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    else if (clName.ToLower() == "BranchCode".ToLower())
                    {
                        clName = "BranchCode";
                    }
                    else if (clName.ToLower() == "TransactionType".ToLower())
                    {
                        clName = "TransactionType";
                    }
                    else if (clName.ToLower() == "ProductCode".ToLower())
                    {
                        clName = "ProductCode";
                    }
                    else if (clName.ToLower() == "ProductName".ToLower())
                    {
                        clName = "ProductName";
                    }
                    else if (clName.ToLower() == "CostPrice".ToLower())
                    {
                        clName = "CostPrice";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransactionDateTime".ToLower())
                    {
                        clName = "TransactionDateTime";
                    }
                    else if (clName.ToLower() == "ReferenceNo".ToLower())
                    {
                        clName = "ReferenceNo";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["ReferenceNo"] = joinIds;
                }

                //foreach(DataRow row in finalTable.Rows)
                //{
                //    if (string.IsNullOrEmpty(row["VAT_Rate"].ToString()))
                //    {
                //        row["VAT_Rate"] = "0";
                //    }
                //    if (string.IsNullOrEmpty(row["NBR_Price"].ToString()))
                //    {
                //        row["NBR_Price"] = "0";
                //    }
                //}

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetFGSQRDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetFGSQRDbData_New(string[] invoiceNo, DataTable db, string joinIds)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            OracleConnection connection = null;
            OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRConnectionFix();
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();

                #endregion open connection and transaction



                #region oldText


                #endregion

                sqlText = @"


select 

dm.transfer_no ID,
dm.transfer_date TransactionDateTime,
dd.sku_code ProductCode,
'-' ProductName,
dd.transfer_qty  Quantity,
dm.transfer_no  ReferenceNo
,'-' Comments,
 0 CostPrice
 , 0 VAT_Rate
 , 'N' Post
 , ' ' UOM
 , '' BranchCode
 , '' TransactionType
 , '' TransferToBranchCode
 
 
from 

DEPOT_STOCK_TRANSFER_MST dm
left outer join DEPOT_STOCK_TRANSFER_DTL dd on dm.mst_ID = dd.mst_ID
where dm.transfer_No in (@invNo)

";

                string joinInvoiceNo = "";

                foreach (string id in invoiceNo)
                {
                    joinInvoiceNo += "'" + id + "',";
                }

                joinInvoiceNo = joinInvoiceNo.TrimEnd(',');

                sqlText = sqlText.Replace("@invNo", joinInvoiceNo);


                OracleCommand cmd = new OracleCommand(sqlText, connection, transaction);

                //cmd.Parameters.Add("@invoiceNo", invoiceNo);

                FileLogger.Log("ImportDAL", "GetFGSQRDbData", sqlText);


                DataTable table = new DataTable();
                OracleDataAdapter adapter = new OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                DataTable finalTable = new DataTable();

                foreach (DataColumn col in table.Columns)
                {

                    string clName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(col.ColumnName.ToLower()).ToString();

                    if (clName == "Subtotal")
                    {
                        clName = "SubTotal";
                    }
                    else if (clName == "Vat_Name")
                    {
                        clName = "VAT_Name";
                    }
                    else if (clName == "Vat_Rate")
                    {
                        clName = "VAT_Rate";
                    }
                    else if (clName == "Sd_Rate")
                    {
                        clName = "SD_Rate";
                    }
                    else if (clName == "Uom")
                    {
                        clName = "UOM";
                    }
                    else if (clName == "Nbr_Price")
                    {
                        clName = "NBR_Price";
                    }
                    else if (clName == "Id")
                    {
                        clName = "ID";
                    }
                    else if (clName == "Lc_Number")
                    {
                        clName = "LC_Number";
                    }
                    else if (clName == "Trading_Markup")
                    {
                        clName = "Trading_MarkUp";
                    }
                    else if (clName.ToLower() == "uomc")
                    {
                        clName = "UOMc";
                    }
                    else if (clName.ToLower() == "BranchCode".ToLower())
                    {
                        clName = "BranchCode";
                    }
                    else if (clName.ToLower() == "TransactionType".ToLower())
                    {
                        clName = "TransactionType";
                    }
                    else if (clName.ToLower() == "ProductCode".ToLower())
                    {
                        clName = "ProductCode";
                    }
                    else if (clName.ToLower() == "ProductName".ToLower())
                    {
                        clName = "ProductName";
                    }
                    else if (clName.ToLower() == "CostPrice".ToLower())
                    {
                        clName = "CostPrice";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransferToBranchCode".ToLower())
                    {
                        clName = "TransferToBranchCode";
                    }
                    else if (clName.ToLower() == "TransactionDateTime".ToLower())
                    {
                        clName = "TransactionDateTime";
                    }
                    else if (clName.ToLower() == "ReferenceNo".ToLower())
                    {
                        clName = "ReferenceNo";
                    }
                    finalTable.Columns.Add(clName);

                }

                foreach (DataRow row in table.Rows)
                {
                    object[] data = row.ItemArray;
                    finalTable.Rows.Add(data);
                }

                foreach (DataRow row in finalTable.Rows)
                {
                    row["ID"] = joinIds;
                    row["ReferenceNo"] = joinIds;
                }

                FileLogger.Log("ImportDAL", "GetFGSQRDbData", finalTable.Columns.Count.ToString() + " -- " + finalTable.Rows.Count.ToString());

                return finalTable;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetFGSQRDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetPurchaseSQRData(string invoiceNo, DataTable db, string rmPmFlag, string searchField, string vendorName = "", bool wildCard = false, string fromDate = "", string toDate = "")
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction


                string vendorCTE = @"

with vendors as(
    select
    Benificiary_Code as VendorCode
    ,Benificiary_Name as VendorName 
    from BEnificiary
    union 
    select manufacturer_code
    ,manufacturer_name 
    from manufacturer_info
)

";
                string rmText = @"
select 
rmdtl.custom_no ID
,'PAB' || '-' || vd.vendorcode as ""Vendor_Code""
                    ,vd.vendorname as ""Vendor_Name""
                    ,rmdtl.custom_no as ""Referance_No""
                    ,rmdtl.po_lc_no as ""LC_No""
                    ,rmdtl.custom_no as ""BE_Number""
                    ,rmdtl.Invoice_date as ""Invoice_Date""
                    ,rmmst.receive_date as ""Receive_Date""
                    ,'N' as ""Post""
                    , rmidtl.rm_code as ""Item_Code""
                    , '-' as ""Item_Name""
                    , rmidtl.received_qty as ""Quantity""
                    , 1 as ""Total_Price""
                    , rmidtl.unit_measure UOM
                from rm_receive_mst rmmst left outer join 
                (select distinct custom_no,'-' po_lc_no,Invoice_date,receive_slno,supplier_code 
                from rm_receive_dtl) rmdtl on rmmst.receive_slno = rmdtl.receive_slno
                left outer join rm_receive_item_dtl rmidtl
                    on rmdtl.receive_slno = rmidtl.receive_slno left outer join vendors vd
                    on vd.vendorcode = rmdtl.supplier_code

                where @condition";

                string pmText = @"
select 
rmdtl.custom_no ID
,'PAB' || '-' || vd.vendorcode as ""Vendor_Code""
                    ,vd.vendorname as ""Vendor_Name""
                    ,rmdtl.custom_no as ""Referance_No""
                    ,rmdtl.po_lc_no as ""LC_No""
                    ,rmdtl.custom_no as ""BE_Number""
                    ,rmdtl.Invoice_date as ""Invoice_Date""
                    ,rmmst.receive_date as ""Receive_Date""
                    ,'N' as ""Post""
                    , rmidtl.pm_code as ""Item_Code""
                    , '-' as ""Item_Name""
                    , rmidtl.received_qty as ""Quantity""
                    , 1 as ""Total_Price""
                    , rmidtl.unit_measure UOM
                from pm_receive_mst rmmst left outer join 
                (select distinct custom_no,'-' po_lc_no,Invoice_date,receive_slno,supplier_code 
                from pm_receive_dtl) rmdtl on rmmst.receive_slno = rmdtl.receive_slno
                left outer join pm_receive_item_dtl rmidtl
                    on rmdtl.receive_slno = rmidtl.receive_slno left outer join vendors vd
                    on vd.vendorcode = rmdtl.supplier_code

                where @condition
                ";

                string rmbText = @"
select 
rmdtl.custom_no ID
,'PAB' || '-' || vd.vendorcode as ""Vendor_Code""
                    ,vd.vendorname as ""Vendor_Name""
                    ,rmdtl.custom_no as ""Referance_No""
                    ,rmdtl.po_lc_no as ""LC_No""
                    ,rmdtl.custom_no as ""BE_Number""
                    ,rmdtl.Invoice_date as ""Invoice_Date""
                    ,rmmst.receive_date as ""Receive_Date""
                    ,'N' as ""Post""
                    , rmidtl.rm_code as ""Item_Code""
                    , '-' as ""Item_Name""
                    , rmidtl.received_qty as ""Quantity""
                    , 1 as ""Total_Price""
                    , rmidtl.unit_measure UOM
                from RM_RECEIVE_MST_BOGURA rmmst left outer join 
                (select distinct custom_no,'-' po_lc_no,Invoice_date,receive_slno,supplier_code 
                from RM_RECEIVE_DTL_BOGURA) rmdtl on rmmst.receive_slno = rmdtl.receive_slno
                left outer join RM_RECEIVE_ITEM_DTL_BOGURA rmidtl
                    on rmdtl.receive_slno = rmidtl.receive_slno left outer join vendors vd
                    on vd.vendorcode = rmdtl.supplier_code

                where @condition";

                // rmidtl.grn_no = '@invNo'

                sqlText += vendorCTE;

                if (rmPmFlag == "pm")
                {
                    sqlText += pmText;
                }
                else if (rmPmFlag == "rmb")
                {
                    sqlText += rmbText;
                }
                 else
                {
                    sqlText += rmText;
                }

                string conditionText = "";

                if (searchField == "grn_no")
                {
                    conditionText += " rmidtl.grn_no = '@invNo'";
                }
                else
                {
                    if (wildCard)
                    {
                        conditionText += " rmdtl.custom_no like '%@invNo%'";

                    }
                    else
                    {
                        conditionText += " rmdtl.custom_no = '@invNo'";
                    }
                    //conditionText += " rmdtl.custom_no = '@invNo'";
                }

                if (!string.IsNullOrEmpty(vendorName))
                {
                    conditionText += " and LOWER(vd.vendorname) like '%" + vendorName + "%'";
                }


                if (!string.IsNullOrEmpty(fromDate))
                {
                    conditionText +=
                        " and  TO_DATE (rmmst.receive_date, 'dd-MON-yy') >= TO_DATE (:fromDate, 'dd-MON-yy')";
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    conditionText +=
                        " and  TO_DATE (rmmst.receive_date, 'dd-MON-yy') <= TO_DATE (:toDate, 'dd-MON-yy')";
                }

                sqlText = sqlText.Replace("@condition", conditionText);
                sqlText = sqlText.Replace("@invNo", invoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;


                if (!string.IsNullOrWhiteSpace(fromDate))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("fromDate",
                        Convert.ToDateTime(fromDate).ToString("dd-MMM-y")));

                }

                if (!string.IsNullOrWhiteSpace(toDate))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("toDate",
                        Convert.ToDateTime(toDate).ToString("dd-MMM-y")));
                }


                FileLogger.Log("ImportDAL", "GetPurchaseSQRData", sqlText);

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetPurchaseSQRData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetPurchaseSQRRupshiData(string invoiceNo, DataTable db, string rmPmFlag, string soapFlag,
            string searchField, string vendorName = "", bool wildCard = false, string fromDate = "", string toDate = "")
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(db);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                string vendorCTE = @"

with vendors as(


    select manufacturer_code as VendorCode
    ,manufacturer_name as VendorName 
    from manufacturer_info

";
                string vendorSenora = @"

union
    select
    Benificiary_Code as VendorCode
    ,Benificiary_Name as VendorName 
    from BEnificiary_senora

";

                string vendorSoap = @"

union
    select
    Benificiary_Code as VendorCode
    ,Benificiary_Name as VendorName 
    from BEnificiary

";

                if (soapFlag == "senora")
                {
                    vendorCTE += vendorSenora;
                }
                else if (soapFlag == "soap")
                {
                    vendorCTE += vendorSoap;

                }

                vendorCTE += ")";

                string rmSenora = @"
select 
rmdtl.custom_no ID
,'HRUP' || '-' || vd.vendorcode as ""Vendor_Code""
                    ,vd.vendorname as ""Vendor_Name""
                    ,rmdtl.custom_no as ""Referance_No""
                    ,rmdtl.po_lc_no as ""LC_No""
                    ,rmdtl.custom_no as ""BE_Number""
                    ,rmdtl.Invoice_date as ""Invoice_Date""
                    ,rmmst.receive_date as ""Receive_Date""
                    ,'N' as ""Post""
                    , rmidtl.rm_code as ""Item_Code""
                    , '-' as ""Item_Name""
                    , rmidtl.received_qty as ""Quantity""
                    , 1 as ""Total_Price""
                    , rmidtl.unit_measure UOM
                from rm_receive_mst_senora rmmst left outer join 
                (select distinct custom_no,'-' po_lc_no,Invoice_date,receive_slno,supplier_code 
                from rm_receive_dtl_Senora) rmdtl on rmmst.receive_slno = rmdtl.receive_slno
                left outer join rm_receive_item_dtl_senora rmidtl
                    on rmdtl.receive_slno = rmidtl.receive_slno left outer join vendors vd
                    on vd.vendorcode = rmdtl.supplier_code

where @condition

";
                string rmSoap = @"

select 
rmdtl.custom_no ID
,'SRUP' || '-' || vd.vendorcode as ""Vendor_Code""
                    ,vd.vendorname as ""Vendor_Name""
                    ,rmdtl.custom_no as ""Referance_No""
                    ,rmdtl.po_lc_no as ""LC_No""
                    ,rmdtl.custom_no as ""BE_Number""
                    ,rmdtl.Invoice_date as ""Invoice_Date""
                    ,rmmst.receive_date as ""Receive_Date""
                    ,'N' as ""Post""
                    , rmidtl.rm_code as ""Item_Code""
                    , '-' as ""Item_Name""
                    , rmidtl.received_qty as ""Quantity""
                    , 1 as ""Total_Price""
                    , rmidtl.unit_measure UOM
                from rm_receive_mst_Soap rmmst left outer join 
                (select distinct custom_no,'-' po_lc_no,Invoice_date,receive_slno,supplier_code 
                from rm_receive_dtl_soap) rmdtl on rmmst.receive_slno = rmdtl.receive_slno
                left outer join rm_receive_item_dtl_Soap rmidtl
                    on rmdtl.receive_slno = rmidtl.receive_slno left outer join vendors vd
                    on vd.vendorcode = rmdtl.supplier_code

                where @condition
                ";

                string pmSoap = @"
select 
rmdtl.custom_no ID
,'SRUP' || '-' || vd.vendorcode as ""Vendor_Code""
                    ,vd.vendorname as ""Vendor_Name""
                    ,rmdtl.custom_no as ""Referance_No""
                    ,rmdtl.po_lc_no as ""LC_No""
                    ,rmdtl.custom_no as ""BE_Number""
                    ,rmdtl.Invoice_date as ""Invoice_Date""
                    ,rmmst.receive_date as ""Receive_Date""
                    ,'N' as ""Post""
                    , rmidtl.pm_code as ""Item_Code""
                    , '-' as ""Item_Name""
                    , rmidtl.received_qty as ""Quantity""
                    , 1 as ""Total_Price""
                    , rmidtl.unit_measure UOM
                from pm_receive_mst_Soap rmmst left outer join 
                (select distinct custom_no,'-' po_lc_no,Invoice_date,receive_slno,supplier_code 
                from pm_receive_dtl_Soap) rmdtl on rmmst.receive_slno = rmdtl.receive_slno
                left outer join pm_receive_item_dtl_Soap rmidtl
                    on rmdtl.receive_slno = rmidtl.receive_slno left outer join vendors vd
                    on vd.vendorcode = rmdtl.supplier_code
                where @condition
                ";

                string pmSenora = @"
select 
rmdtl.custom_no ID
,'HRUP' || '-' || vd.vendorcode as ""Vendor_Code""
                    ,vd.vendorname as ""Vendor_Name""
                    ,rmdtl.custom_no as ""Referance_No""
                    ,rmdtl.po_lc_no as ""LC_No""
                    ,rmdtl.custom_no as ""BE_Number""
                    ,rmdtl.Invoice_date as ""Invoice_Date""
                    ,rmmst.receive_date as ""Receive_Date""
                    ,'N' as ""Post""
                    , rmidtl.pm_code as ""Item_Code""
                    , '-' as ""Item_Name""
                    , rmidtl.received_qty as ""Quantity""
                    , 1 as ""Total_Price""
                    , rmidtl.unit_measure UOM
                from pm_receive_mst_Senora rmmst left outer join 
                (select distinct custom_no,'-' po_lc_no,Invoice_date,receive_slno,supplier_code 
                from pm_receive_dtl_Senora) rmdtl on rmmst.receive_slno = rmdtl.receive_slno
                left outer join pm_receive_item_dtl_Senora rmidtl
                    on rmdtl.receive_slno = rmidtl.receive_slno left outer join vendors vd
                    on vd.vendorcode = rmdtl.supplier_code

                where @condition

                ";

                sqlText += vendorCTE;

                if (rmPmFlag == "rm" && soapFlag.ToLower() == "soap")
                {
                    sqlText += rmSoap;
                }
                else if (rmPmFlag == "rm" && soapFlag.ToLower() == "senora")
                {
                    sqlText += rmSenora;
                }
                else if (rmPmFlag == "pm" && soapFlag.ToLower() == "soap")
                {
                    sqlText += pmSoap;
                }
                else if (rmPmFlag == "pm" && soapFlag.ToLower() == "senora")
                {
                    sqlText += pmSenora;
                }

                string conditionText = "";

                if (searchField == "grn_no")
                {
                    conditionText += " rmidtl.grn_no = '@invNo'";
                }
                else
                {
                    if (wildCard)
                    {
                        conditionText += " rmdtl.custom_no like '%@invNo%'";

                    }
                    else
                    {
                        conditionText += " rmdtl.custom_no = '@invNo'";
                    }
                }

                if (!string.IsNullOrEmpty(vendorName))
                {
                    conditionText += " and LOWER(vd.vendorname) like '%" + vendorName + "%'";
                }

                sqlText = sqlText.Replace("@condition", conditionText);
                sqlText = sqlText.Replace("@invNo", invoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                FileLogger.Log("ImportDAL", "GetPurchaseSQRRupshiData", sqlText);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                //FileLogger.Log("SQRPurchase", "Select", sqlText);

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetPurchaseSQRRupshiData", ex.ToString() + "\n" + sqlText);

                //////FileLogger.Log("SQRPurchase", "Select", ex.Message);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }



            }
            #endregion
        }

        public DataTable GetIssueSQRData(IntegrationParam param)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(param.dtConnectionInfo);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction


                string vendorCTE = @"

with vendors as(
    select
    Benificiary_Code as VendorCode
    ,Benificiary_Name as VendorName 
    from BEnificiary
    union 
    select manufacturer_code
    ,manufacturer_name 
    from manufacturer_info
)


";
                string rmText = @"
select 
--mst.issued_date ID
mst.REQUISITION_NO ID
,mst.issued_date as ""Issue_DateTime""
                    ,mst.requisition_no as ""Reference_No""
                    ,'-' as ""Comments""
                    ,'0' as ""Return_Id""
                    ,'N' as ""Post""
                    ,dtl.rm_code as ""Item_Code""
                    ,'-' as ""Item_Name""
                    ,sum(dtl.issued_qty) as ""Quantity""
                    ,dtl.unit_measure as ""UOM""
                from rm_issue_mst mst left outer join rm_issue_dtl dtl
                on mst.issue_slno = dtl.issue_slno
                where 
                TO_DATE (mst.issued_date, 'dd-MON-yy') BETWEEN TO_DATE (:fromDate, 'dd-MON-yy')
                AND TO_DATE (:toDate, 'dd-MON-yy')
                @condition

                group by mst.issued_date 
                    ,dtl.rm_code 
                    ,dtl.unit_measure
                    ,mst.requisition_no

order by mst.requisition_no
                   
                ";

                string pmText = @"
select 
--mst.issued_date ID
mst.requisition_no ID
,mst.issued_date as ""Issue_DateTime""
                    ,mst.requisition_no as ""Reference_No""
                    ,'-' as ""Comments""
                    ,'0' as ""Return_Id""
                    ,'N' as ""Post""
                    ,dtl.pm_code as ""Item_Code""
                    ,'-' as ""Item_Name""
                    ,sum(dtl.issued_qty) as ""Quantity""
                    ,dtl.unit_measure as ""UOM""
                from pm_issue_mst mst left outer join pm_issue_dtl dtl
                on mst.issue_slno = dtl.issue_slno
                where 
                TO_DATE (mst.issued_date, 'dd-MON-yy') BETWEEN TO_DATE (:fromDate, 'dd-MON-yy')
                AND TO_DATE (:toDate, 'dd-MON-yy')
                @condition
                
                group by mst.issued_date 
                    ,dtl.pm_code 
                    ,dtl.unit_measure
                    ,mst.requisition_no

order by mst.requisition_no
               
                ";

                // rmidtl.grn_no = '@invNo'

                //sqlText += vendorCTE;

                if (param.rmPmFlag == "pm")
                {
                    sqlText += pmText;
                }
                else
                {
                    sqlText += rmText;
                }

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    sqlText = sqlText.Replace("@condition", " and mst.REQUISITION_NO = :invNo");
                }
                else
                {
                    sqlText = sqlText.Replace("@condition", "");
                }
                

                ////sqlText = sqlText.Replace("@invNo", invoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("fromDate",
                    Convert.ToDateTime(param.FromDate).ToString("dd-MMM-y")));

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("toDate",
                    Convert.ToDateTime(param.ToDate).ToString("dd-MMM-y")));

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("invNo", param.RefNo));
                }

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                FileLogger.Log("ImportDAL", "GetIssueSQRData", sqlText);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetIssueSQRData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetRupshiIssueSQRData(IntegrationParam param)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(param.dtConnectionInfo);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                string rmSoapText = @"
select 
--mst.issued_date ID
 mst.requisition_no ID
,mst.issued_date as ""Issue_DateTime""
,mst.requisition_no as ""Reference_No""
,'-' as ""Comments""
,'0' as ""Return_Id""
,'N' as ""Post""
,dtl.rm_code as ""Item_Code""
,'-' as ""Item_Name""
,sum(dtl.issued_qty) as ""Quantity""
,dtl.unit_measure as ""UOM""
from rm_issue_mst_soap mst left outer join rm_issue_dtl_soap dtl
on mst.issue_slno = dtl.issue_slno
where 
TO_DATE (mst.issued_date, 'dd-MON-yy') BETWEEN TO_DATE (:fromDate, 'dd-MON-yy')
AND TO_DATE (:toDate, 'dd-MON-yy')
@condition

group by mst.issued_date 
    ,dtl.rm_code 
    ,dtl.unit_measure
    ,mst.requisition_no
   
order by mst.requisition_no

                ";

                string rmSenoraText = @"
select 
--mst.issued_date ID
 mst.requisition_no ID
,mst.issued_date as ""Issue_DateTime""
,mst.requisition_no as ""Reference_No""
,'-' as ""Comments""
,'0' as ""Return_Id""
,'N' as ""Post""
,dtl.rm_code as ""Item_Code""
,'-' as ""Item_Name""
,sum(dtl.issued_qty) as ""Quantity""
,dtl.unit_measure as ""UOM""
from rm_issue_mst_senora mst left outer join rm_issue_dtl_senora dtl
on mst.issue_slno = dtl.issue_slno
where 
TO_DATE (mst.issued_date, 'dd-MON-yy') BETWEEN TO_DATE (:fromDate, 'dd-MON-yy')
AND TO_DATE (:toDate, 'dd-MON-yy')
@condition

group by mst.issued_date 
    ,dtl.rm_code 
    ,dtl.unit_measure
    ,mst.requisition_no
   
order by mst.requisition_no

                ";

                string pmSoapText = @"
select 
--mst.issued_date ID
 mst.requisition_no ID
,mst.issued_date as ""Issue_DateTime""
,mst.requisition_no as ""Reference_No""
,'-' as ""Comments""
,'0' as ""Return_Id""
,'N' as ""Post""
,dtl.pm_code as ""Item_Code""
,'-' as ""Item_Name""
,sum(dtl.issued_qty) as ""Quantity""
,dtl.unit_measure as ""UOM""
from pm_issue_mst_soap mst left outer join pm_issue_dtl_soap dtl
on mst.issue_slno = dtl.issue_slno
where 
TO_DATE (mst.issued_date, 'dd-MON-yy') BETWEEN TO_DATE (:fromDate, 'dd-MON-yy')
AND TO_DATE (:toDate, 'dd-MON-yy')
@condition

group by mst.issued_date 
    ,dtl.pm_code 
    ,dtl.unit_measure
    ,mst.requisition_no

order by mst.requisition_no

                ";

                string pmSenoraText = @"
select 
--mst.issued_date ID
 mst.requisition_no ID
,mst.issued_date as ""Issue_DateTime""
,mst.requisition_no as ""Reference_No""
,'-' as ""Comments""
,'0' as ""Return_Id""
,'N' as ""Post""
,dtl.pm_code as ""Item_Code""
,'-' as ""Item_Name""
,sum(dtl.issued_qty) as ""Quantity""
,dtl.unit_measure as ""UOM""
from pm_issue_mst_senora mst left outer join pm_issue_dtl_senora dtl
on mst.issue_slno = dtl.issue_slno
where 
TO_DATE (mst.issued_date, 'dd-MON-yy') BETWEEN TO_DATE (:fromDate, 'dd-MON-yy')
AND TO_DATE (:toDate, 'dd-MON-yy')
@condition

group by mst.issued_date 
    ,dtl.pm_code 
    ,dtl.unit_measure
    ,mst.requisition_no

order by mst.requisition_no

                ";

                if (param.rmPmFlag == "pm" && param.rupshiFlag == "soap")
                {
                    sqlText = pmSoapText;
                }
                else if (param.rmPmFlag == "pm" && param.rupshiFlag == "senora")
                {
                    sqlText = pmSenoraText;
                }
                else if (param.rmPmFlag == "rm" && param.rupshiFlag == "soap")
                {
                    sqlText = rmSoapText;
                }
                else if (param.rmPmFlag == "rm" && param.rupshiFlag == "senora")
                {
                    sqlText = rmSenoraText;
                }

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    sqlText = sqlText.Replace("@condition", " and mst.requisition_no = :invNo");
                }
                else
                {
                    sqlText = sqlText.Replace("@condition", "");
                }

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("fromDate",
                    Convert.ToDateTime(param.FromDate).ToString("dd-MMM-y")));

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("toDate",
                    Convert.ToDateTime(param.ToDate).ToString("dd-MMM-y")));

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("invNo", param.RefNo));
                }

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                FileLogger.Log("ImportDAL", "GetRupshiIssueSQRData", sqlText);


                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetRupshiIssueSQRData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        #region Receive Import

        public DataTable GetProductionReceiveSQR(IntegrationParam param)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(param.dtConnectionInfo);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region  sqlText

                string rmText = @"

SELECT 
--TO_DATE (transfer_date, 'dd-MON-rrrr') as ""ID""
 TRANSFER_NOTE_NO as ""ID""
,TO_DATE (transfer_date, 'dd-MON-rrrr') as ""Receive_DateTime""
,S_Product_Code as ""Item_Code""
,'-'  as ""Item_Name""
, sum(Transfer_Qty) as ""Quantity""
,Pack_Size as ""UOM""
,Batch_No as ""Reference_No""
,'-' as ""Comments""
,'N' as ""Post""
,'' as ""Return_Id""
,'N' as ""With_Toll""
,'0' as ""NBR_Price""
,'VAT 4.3' as ""VAT_Name""
, 'N/A' as ""CustomerCode""

from olp_transfer_note
where TO_DATE (transfer_date, 'dd-MON-rrrr') >= TO_DATE (:fromDate, 'dd-MON-rrrr')
and TO_DATE (transfer_date, 'dd-MON-rrrr') <= TO_DATE (:toDate, 'dd-MON-rrrr')
@condition
 
group by 
Batch_No 
,Transfer_date
,S_Product_Code
,Pack_Size
,Batch_No
,TRANSFER_NOTE_NO
                   
                ";

                sqlText = rmText;

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    if (!string.IsNullOrWhiteSpace(param.SearchField) && param.SearchField == "id")
                    {
                        sqlText = sqlText.Replace("@condition", " and TRANSFER_NOTE_NO = :invNo");                        
                    }
                    else
                    {
                        sqlText = sqlText.Replace("@condition", " and Batch_No = :invNo");
                    }
                }
                else
                {
                    sqlText = sqlText.Replace("@condition", "");

                }

                #endregion

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("fromDate",
                    Convert.ToDateTime(param.FromDate).ToString("dd-MMM-y")));

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("toDate",
                    Convert.ToDateTime(param.ToDate).ToString("dd-MMM-y")));

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("invNo", param.RefNo));
                }

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                FileLogger.Log("ImportDAL", "GetProductionReceiveSQR", sqlText + " SearchField : " + param.SearchField);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetProductionReceiveSQR", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetProductionReceiveSQRRupshi(IntegrationParam param)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                //currConn = new OleDbConnection("Provider=OraOLEDB.Oracle;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.9.5)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=PDB_RFBLDB)(SERVER=DEDICATED)));User Id=RFBL_ERP;Password=RFBL_ERP;");//_dbsqlConnection.GetConnectionLink3OLEDB();
                connection = _dbsqlConnection.GetSQRNewConnection(param.dtConnectionInfo);
                //                    new OracleConnection(@"SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.24.1.26)(PORT=1521))(CONNECT_DATA=(SID=STLDB1)));
                //uid=stl_new_vat;pwd=stlvat");

                if (connection.State != ConnectionState.Open)
                {
                    // currConn.Open();
                    connection.Open();
                }
                transaction = connection.BeginTransaction();
                // transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region  sqlText

                string SoapText = @"

SELECT 
--TO_DATE (transfer_date, 'dd-MON-rrrr') as ""ID""
 TRANSFER_NOTE_NO as ""ID""
,TO_DATE (transfer_date, 'dd-MON-rrrr') as ""Receive_DateTime""
,S_Product_Code as ""Item_Code""
,'-'  as ""Item_Name""
, sum(Transfer_Qty) as ""Quantity""
,Pack_Size as ""UOM""
,Batch_No as ""Reference_No""
,'-' as ""Comments""
,'N' as ""Post""
,'' as ""Return_Id""
,'N' as ""With_Toll""
,'0' as ""NBR_Price""
,'VAT 4.3' as ""VAT_Name""
, 'N/A' as ""CustomerCode""

from olp_transfer_note_soap
where TO_DATE (transfer_date, 'dd-MON-rrrr') >= TO_DATE (:fromDate, 'dd-MON-rrrr')
and TO_DATE (transfer_date, 'dd-MON-rrrr') <= TO_DATE (:toDate, 'dd-MON-rrrr')
@condition

group by 
Batch_No 
,Transfer_date
,S_Product_Code
,Pack_Size
,Batch_No
,TRANSFER_NOTE_NO
                   
                ";

                string SenoraText = @"

SELECT 
      TO_DATE (transfer_date, 'dd-MON-rrrr') as ""ID""

      ,TO_DATE (transfer_date, 'dd-MON-rrrr') as ""Receive_DateTime""
      ,S_Product_Code as ""Item_Code""
      ,'-'  as ""Item_Name""
      , sum(Transfer_Qty) as ""Quantity""
      ,Pack_Size as ""UOM""
      ,Batch_No as ""Reference_No""
      ,'-' as ""Comments""
      ,'N' as ""Post""
	  ,'' as ""Return_Id""
	  ,'N' as ""With_Toll""
	  ,'0' as ""NBR_Price""
	  ,'VAT 4.3' as ""VAT_Name""
, 'N/A' as ""CustomerCode""

from olp_transfer_note_senora
where TO_DATE (transfer_date, 'dd-MON-rrrr') >= TO_DATE (:fromDate, 'dd-MON-rrrr')
and TO_DATE (transfer_date, 'dd-MON-rrrr') <= TO_DATE (:toDate, 'dd-MON-rrrr')
@condition

group by 
Batch_No 
,Transfer_date
,S_Product_Code
,Pack_Size
,Batch_No
,TRANSFER_NOTE_NO
        
                ";

                if (param.rupshiFlag.ToLower() == "soap")
                {
                    sqlText = SoapText;
                }
                else if (param.rupshiFlag.ToLower() == "senora")
                {
                    sqlText = SenoraText;
                }

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    if (!string.IsNullOrWhiteSpace(param.SearchField) && param.SearchField == "id")
                    {
                        sqlText = sqlText.Replace("@condition", " and TRANSFER_NOTE_NO = :invNo");
                    }
                    else
                    {
                        sqlText = sqlText.Replace("@condition", " and Batch_No = :invNo");
                    }
                }
                else
                {
                    sqlText = sqlText.Replace("@condition", "");

                }

                #endregion

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("fromDate",
                    Convert.ToDateTime(param.FromDate).ToString("dd-MMM-y")));

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("toDate",
                    Convert.ToDateTime(param.ToDate).ToString("dd-MMM-y")));

                if (!string.IsNullOrWhiteSpace(param.RefNo))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("invNo", param.RefNo));
                }

                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                FileLogger.Log("ImportDAL", "GetProductionReceiveSQRRupshi", sqlText);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetProductionReceiveSQRRupshi", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }


        #endregion

        #endregion

        public DataTable GetSaleACICompData(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region Pharma Select

                string ACISelect = @"create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
, format(Invoice_Date_Time,'yyyy-MM-dd HH:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
FROM SaleInvoices AS Sale


  WHERE 1=1  @condition


  update #temp set VAT_Rate = Products.VATRate, 
SD_Rate = Products.SD,
--NBR_Price = Products.UnitPrice,
UOM = Products.UOM 
  from @db.dbo.Products 
  where Products.ProductCode = #temp.Item_Code 


   @creditUpdateQuery




  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery


select 
t.ID
,t.InvoiceNo
,sd.SalesInvoiceNo

,t.Customer_Code

,t.Invoice_Date_Time
,t.Post
,t.Post SalePost

,t.Item_Code
,t.Quantity
,sd.Quantity SaleQuantity

,t.NBR_Price
,sd.NBRPrice SaleNBRPrice
,t.SubTotal
,sd.SubTotal SaleSub

,t.VAT_Rate
,sd.VATRate SaleVATRate

,t.VAT_Amount
,sd.VATAmount SaleVAT_Amount

,t.SD_Rate
,sd.SD SaleSDRate
,sd.SD SDAmount

,(t.Subtotal+t.VAT_amount)LineTotal
,(sd.Subtotal+sd.VATamount)SaleLineTotal

,sd.Type

from #temp t left outer join @db.dbo.SalesInvoiceHeaders sh on sh.ImportIDExcel = t.ID
left outer join @db.dbo.SalesInvoiceDetails sd on sd.SalesInvoiceNo = sh.SalesInvoiceNo

  drop table #temp";

                #endregion

                #region Plastic select

                string plasticSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,TotalPrice SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

  update #temp set 
	UOM = p.UOM,
	VAT_Rate = pc.VATRate,
	SD_Rate = p.SD
  from @db.dbo.Products p join 
  @db.dbo.ProductCategories pc on p.CategoryID = pc.CategoryID
  where p.ProductCode = #temp.Item_Code



   @creditUpdateQuery

   

  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

@exportUpdateQuery

  
select 
t.ID
,t.InvoiceNo
,sd.SalesInvoiceNo

,t.Customer_Code

,t.Invoice_Date_Time
,t.Post
,t.Post SalePost

,t.Item_Code
,t.Quantity
,sd.Quantity SaleQuantity

,t.NBR_Price
,sd.NBRPrice SaleNBRPrice
,t.SubTotal
,sd.SubTotal SaleSub

,t.VAT_Rate
,sd.VATRate SaleVATRate

,t.VAT_Amount
,sd.VATAmount SaleVAT_Amount

,t.SD_Rate
,sd.SD SaleSDRate
,sd.SD SDAmount

,(t.Subtotal+t.VAT_amount)LineTotal
,(sd.Subtotal+sd.VATamount)SaleLineTotal

,sd.Type

from #temp t left outer join @db.dbo.SalesInvoiceHeaders sh on sh.ImportIDExcel = t.ID
left outer join @db.dbo.SalesInvoiceDetails sd on sd.SalesInvoiceNo = sh.SalesInvoiceNo

  drop table #temp";



                #endregion

                #region CoreCB select

                string CoreCBSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

update #temp set 
UOM = Products.UOM,
NBR_Price = Products.NBRPrice,
VAT_Rate = Products.VATRate,
SD_Rate = Products.SD
from @db.dbo.Products  
where Products.ProductCode = #temp.Item_Code


   @creditUpdateQuery

   update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery


  
select 
t.ID
,t.InvoiceNo
,sd.SalesInvoiceNo

,t.Customer_Code

,t.Invoice_Date_Time
,t.Post
,t.Post SalePost

,t.Item_Code
,t.Quantity
,sd.Quantity SaleQuantity

,t.NBR_Price
,sd.NBRPrice SaleNBRPrice
,t.SubTotal
,sd.SubTotal SaleSub

,t.VAT_Rate
,sd.VATRate SaleVATRate

,t.VAT_Amount
,sd.VATAmount SaleVAT_Amount

,t.SD_Rate
,sd.SD SaleSDRate
,sd.SD SDAmount

,(t.Subtotal+t.VAT_amount)LineTotal
,(sd.Subtotal+sd.VATamount)SaleLineTotal

,sd.Type

from #temp t left outer join @db.dbo.SalesInvoiceHeaders sh on sh.ImportIDExcel = t.ID
left outer join @db.dbo.SalesInvoiceDetails sd on sd.SalesInvoiceNo = sh.SalesInvoiceNo

  drop table #temp";



                #endregion

                sqlText = @"";

                string conditionText = "";
                string updateCreditNote = @"
   update #temp set Sale_Type = 'credit', Quantity =  Quantity * -1
   where Quantity < 0";

                string updateExportVatrate = @"update #temp set VAT_Rate = 0;
                
    update #temp set Currency_Code = '@defaultCurr';
   -- update #temp set NBR_Price = subtotal/quantity;
    update #temp set Type = 'Export'
";

                CommonDAL commonDal = new CommonDAL();

                string code = commonDal.settingValue("CompanyCode", "Code");
                string defaultCurrency = commonDal.settingValue("Sale", "DefualtForeignCurrency");

                #region Query Switch

                if (code == "CEPL")
                {
                    sqlText = plasticSelect;
                }
                else if (code == "CORE CB")
                {
                    sqlText = CoreCBSelect;
                }
                else
                {
                    sqlText = ACISelect;
                }

                #endregion

                #region DB Select

                string dbName = "";
                if (code == "ACI-1")
                {
                    dbName = "ACI2012_Demo_DB";
                }
                else if (code == "CEPL")
                {
                    dbName = "PPL2012_Demo_DB";
                }
                else if (code.ToLower() == "core cb")
                {
                    dbName = "ACIC2012_Demo_DB";
                }
                #endregion

                string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                      param.dtConnectionInfo.Rows[0]["BranchId"];

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                //if (param.WithIsProcessed)
                //{
                //    conditionText +=
                //        " and IsProcessed = 'Y' and ID IN (select distinct ID from " + dbName +
                //        ".dbo.SalesInvoiceHeaderMasterTemp) and Branch_Code in (";

                //    //+
                //    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                //}
                //else
                //{
                //    conditionText += " and IsProcessed = 'N' and Branch_Code in (";

                //    //+
                //    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                //}

                conditionText += " and Branch_Code in (";

                foreach (DataRow dataRow in branchMap.Rows)
                {
                    conditionText += "'" + dataRow["IntegrationCode"] + "',";
                }

                conditionText = conditionText.TrimEnd(',') + ")";

                if (param.TransactionType == "Other")
                {
                    conditionText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and Quantity > 0 ";
                }
                else if (param.TransactionType == "Export")
                {
                    conditionText += " and TransactionType = 'Export'  and Quantity > 0 ";

                }
                else if (param.TransactionType.ToLower() == "credit")
                {
                    conditionText += " and Quantity < 0 or TransactionType = 'credit'";

                }
                else
                {
                    conditionText += " and TransactionType = '" + param.TransactionType + "' ";
                }


                if (param.TransactionType.ToLower() == "credit")
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", updateCreditNote);

                }
                else
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", "");
                }


                if (param.TransactionType.ToLower() == "export")
                {
                    updateExportVatrate = updateExportVatrate.Replace("@defaultCurr", defaultCurrency);
                    sqlText = sqlText.Replace("@exportUpdateQuery", updateExportVatrate);

                }
                else
                {
                    sqlText = sqlText.Replace("@exportUpdateQuery", "");
                }

                sqlText = sqlText.Replace("@db", dbName);

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    conditionText += " and Sale.ID=@SalesInvoiceNo";
                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time <= @toDate";
                }

                conditionText += "  and CompanyCode = @CompanyCode";

                sqlText = sqlText.Replace("@condition", conditionText);

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);

                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                }

                cmd.Parameters.AddWithValue("@CompanyCode", code);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleACICompData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetSaleACIData_Middleware(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region Pharma Select

                string ACISelect = @"create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
, format(Invoice_Date_Time,'yyyy-MM-dd HH:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
FROM SaleInvoices AS Sale


  WHERE 1=1  @condition


  update #temp set VAT_Rate = Products.VATRate, 
SD_Rate = Products.SD,
--NBR_Price = Products.UnitPrice,
UOM = Products.UOM 
  from @db.dbo.Products 
  where Products.ProductCode = #temp.Item_Code 


   @creditUpdateQuery




  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery


select * from #temp

  drop table #temp";

                #endregion

                #region Plastic select

                string plasticSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,TotalPrice SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

  update #temp set 
	UOM = p.UOM,
	VAT_Rate = pc.VATRate,
	SD_Rate = p.SD
  from @db.dbo.Products p join 
  @db.dbo.ProductCategories pc on p.CategoryID = pc.CategoryID
  where p.ProductCode = #temp.Item_Code



   @creditUpdateQuery

   

  update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

@exportUpdateQuery

  select * from #temp

  drop table #temp";



                #endregion

                #region CoreCB select

                string CoreCBSelect = @"
create table #temp(
ID varchar(500),
InvoiceNo varchar(50),
Customer_Name varchar(500),
Customer_Code varchar(500),
Delivery_Address varchar(500),
Invoice_Date_Time varchar(500),
Post varchar(1),
Item_Code varchar(500),
Item_Name varchar(500),
Quantity decimal(25,9),
NBR_Price decimal(25,9),
UOM varchar(500),

VAT_Rate decimal(25,9),
VAT_Amount decimal(25,9),
SD_Rate decimal(25,9)
, Non_Stock varchar(500)
, Trading_MarkUp decimal,
Discount_Amount decimal(25,9),
Promotional_Quantity decimal(25,9)
, VAT_Name varchar(500)
, LC_Number varchar(500)
, Currency_Code varchar(500)
, Sale_Type varchar(500)
, Previous_Invoice_No varchar(500)
, Is_Print varchar(1)
, Tender_Id varchar(500)
, Reference_No varchar(500)
, SubTotal varchar(500)
, [Type] varchar(500)
, Vehicle_No varchar(500)
, VehicleType varchar(500)
, BranchRef varchar(50)
)

insert into #temp
SELECT 
ID
,InvoiceNo
,'-'CustomerName
, CustomerCode
,'-' Delivery_Address
,  Format(Invoice_Date_Time,'yyyy-MM-dd hh:mm:ss')Invoice_Date_Time

,Post
,ProductCode Item_Code
,ProductName Item_Name
, Quantity
,(TotalPrice/Quantity) NBR_Price
,UOM
,0 VAT_Rate
,0 VAT_Amount
,0 SD_Rate
,'N' Non_Stock
,'0' Trading_MarkUp
,0 Discount_Amount
,0 Promotional_Quantity
,'VAT 4.3' VAT_Name
,'NA' LC_Number
,'BDT' Currency_Code
,'NEW' Sale_Type
,'' Previous_Invoice_No
,'N' Is_Print
,'0' Tender_Id
,ID Reference_No
,0 SubTotal
,'' Type
,VehicleNo Vehicle_No
,VehicleType
,Branch_Code
FROM SaleInvoices AS Sale

  WHERE 1=1   @condition

update #temp set 
UOM = Products.UOM,
NBR_Price = Products.NBRPrice,
VAT_Rate = Products.VATRate,
SD_Rate = Products.SD
from @db.dbo.Products  
where Products.ProductCode = #temp.Item_Code


   @creditUpdateQuery

   update #temp set Type = case when VAT_Rate = 15 then 'VAT' when VAT_Rate = 0 then 'NoNVAT' else 'OtherRate' end

   @exportUpdateQuery


 select * from #temp

  drop table #temp";



                #endregion

                sqlText = @"";

                string conditionText = "";
                string updateCreditNote = @"
   update #temp set Sale_Type = 'credit', Quantity =  Quantity * -1
   where Quantity < 0";

                string updateExportVatrate = @"update #temp set VAT_Rate = 0;
                
    update #temp set Currency_Code = '@defaultCurr';
   -- update #temp set NBR_Price = subtotal/quantity;
    update #temp set Type = 'Export'
";

                CommonDAL commonDal = new CommonDAL();

                string code = commonDal.settingValue("CompanyCode", "Code");
                string defaultCurrency = commonDal.settingValue("Sale", "DefualtForeignCurrency");

                #region Query Switch

                if (code == "CEPL")
                {
                    sqlText = plasticSelect;
                }
                else if (code == "CORE CB")
                {
                    sqlText = CoreCBSelect;
                }
                else
                {
                    sqlText = ACISelect;
                }

                #endregion

                #region DB Select

                string dbName = "";
                if (code == "ACI-1")
                {
                    dbName = "ACI2012_Demo_DB";
                }
                else if (code == "CEPL")
                {
                    dbName = "PPL2012_Demo_DB";
                }
                else if (code.ToLower() == "core cb")
                {
                    dbName = "ACIC2012_Demo_DB";
                }
                #endregion

                string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                      param.dtConnectionInfo.Rows[0]["BranchId"];

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                //if (param.WithIsProcessed)
                //{
                //    conditionText +=
                //        " and IsProcessed = 'Y' and ID IN (select distinct ID from " + dbName +
                //        ".dbo.SalesInvoiceHeaderMasterTemp) and Branch_Code in (";

                //    //+
                //    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                //}
                //else
                //{
                //    conditionText += " and IsProcessed = 'N' and Branch_Code in (";

                //    //+
                //    //param.dtConnectionInfo.Rows[0]["IntegrationCode"] + "'";
                //}

                conditionText += " and Branch_Code in (";

                foreach (DataRow dataRow in branchMap.Rows)
                {
                    conditionText += "'" + dataRow["IntegrationCode"] + "',";
                }

                conditionText = conditionText.TrimEnd(',') + ")";

                if (param.TransactionType == "Other")
                {
                    conditionText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and Quantity > 0 ";
                }
                else if (param.TransactionType == "Export")
                {
                    conditionText += " and TransactionType = 'Export'  and Quantity > 0 ";

                }
                else if (param.TransactionType.ToLower() == "credit")
                {
                    conditionText += " and Quantity < 0 or TransactionType = 'credit'";

                }
                else
                {
                    conditionText += " and TransactionType = '" + param.TransactionType + "' ";
                }


                if (param.TransactionType.ToLower() == "credit")
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", updateCreditNote);

                }
                else
                {
                    sqlText = sqlText.Replace("@creditUpdateQuery", "");
                }


                if (param.TransactionType.ToLower() == "export")
                {
                    updateExportVatrate = updateExportVatrate.Replace("@defaultCurr", defaultCurrency);
                    sqlText = sqlText.Replace("@exportUpdateQuery", updateExportVatrate);

                }
                else
                {
                    sqlText = sqlText.Replace("@exportUpdateQuery", "");
                }


                sqlText = sqlText.Replace("@db", dbName);

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    conditionText += " and Sale.ID=@SalesInvoiceNo";
                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    conditionText += " and Sale.Invoice_Date_Time <= @toDate";
                }

                conditionText += "  and CompanyCode = @CompanyCode";

                sqlText = sqlText.Replace("@condition", conditionText);

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);

                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                }

                cmd.Parameters.AddWithValue("@CompanyCode", code);

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                ProductDAL dal = new ProductDAL();

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleACIData_Middleware", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public int GetDHLLoopCounter(string flag = "IBS", string PdfFlag = "N", SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int loopCount = 0;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @"select  ceiling(count(salesinvoiceNo)/500.00) from SalesInvoiceHeaders
where IsPDFGenerated = '" + PdfFlag + "' and DataSource = '" + flag + "'";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                loopCount = Convert.ToInt32(cmd.ExecuteScalar());

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return loopCount;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                //retResults[0] = "Fail";//Success or Fail
                //retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetDHLLoopCounter", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public int GetLoopCounter(string PdfFlag = "N", SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int loopCount = 0;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                sqlText = @"select  ceiling(count(salesinvoiceNo)/500.00) from SalesInvoiceHeaders
where IsPDFGenerated = '" + PdfFlag + "'";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                loopCount = Convert.ToInt32(cmd.ExecuteScalar());

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return loopCount;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                //retResults[0] = "Fail";//Success or Fail
                //retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetDHLLoopCounter", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public int updateDHLPdfFlag(DataTable dtSales, string flag = "Y", SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int rowCount = 0;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();

                DataTable invoices = dtSales.DefaultView.ToTable(false, "SalesInvoiceNo");
                invoices.Columns[0].ColumnName = "InvoiceNo";

                string[] res = commonDal.BulkInsert("SalesInvoiceHeaderMasterTemp", invoices, currConn, transaction);

                sqlText = @"
update SalesInvoiceHeaders set IsPDFGenerated = '" + flag + @"' 
from SalesInvoiceHeaderMasterTemp where SalesInvoiceHeaderMasterTemp.InvoiceNo = SalesInvoiceHeaders.SalesInvoiceNo

delete from SalesInvoiceHeaderMasterTemp";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                rowCount = cmd.ExecuteNonQuery();

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return rowCount;
            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                //retResults[0] = "Fail";//Success or Fail
                //retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "updateDHLPdfFlag", ex.ToString() + "\n" + sqlText);

                //throw ex;

                return 0;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        #region KCCL

        public ResultVM SaveKCCLSale_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            DataTable dtSale = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SaleDAL salesDal = new SaleDAL();

            rVM.Status = "Fail";

            #region try

            try
            {
                string invoiceNo = paramVM.RefNo;

                #region Exits Check

                if (string.IsNullOrEmpty(invoiceNo))
                {

                    rVM.Message = "Please Enter or Select Transaction No ";
                    return rVM;
                    //return;
                }

                string value = commonDal.settingValue("Import", "SaleExistContinue", connVM);

                if (value == "N")
                {
                    List<SaleMasterVM> sales = salesDal.SelectAllTop1(0, new[] { "sih.ImportIDExcel" }, new[] { invoiceNo }, null, null, null, connVM);

                    if (sales != null && sales.Count > 0)
                    {
                        SaleMasterVM sale = sales.FirstOrDefault();

                        if (sale != null)
                        {

                            rVM.Message = "This Transaction No is already in system with invoice no - " + sale.SalesInvoiceNo;

                            return rVM;
                        }

                    }
                }

                #endregion

                #region Get Branch Info

                BranchProfileDAL dal = new BranchProfileDAL();

                DataTable dt = dal.SelectAll(paramVM.BranchId, null, null, null, null, true, connVM);

                #endregion

                #region GetSaleKohinoorDbData

                dtSale = GetSaleKohinoorDbData(invoiceNo, dt, connVM);

                if (dtSale == null || dtSale.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                #endregion

                #region TableValidation


                if (!dtSale.Columns.Contains("Branch_Code"))
                {
                    DataColumn columnName = new DataColumn("Branch_Code") { DefaultValue = paramVM.BranchCode };
                    dtSale.Columns.Add(columnName);
                }

                DataColumn column = new DataColumn("SL") { DefaultValue = "" };
                DataColumn CreatedBy = new DataColumn("CreatedBy") { DefaultValue = paramVM.CurrentUserName };
                DataColumn ReturnId = new DataColumn("ReturnId") { DefaultValue = 0 };
                DataColumn BOMId = new DataColumn("BOMId") { DefaultValue = 0 };
                DataColumn TransactionType = new DataColumn("TransactionType") { DefaultValue = paramVM.TransactionType };
                DataColumn CreatedOn = new DataColumn("CreatedOn") { DefaultValue = DateTime.Now.ToString() };

                dtSale.Columns.Add(column);
                dtSale.Columns.Add(CreatedBy);
                dtSale.Columns.Add(CreatedOn);

                if (!dtSale.Columns.Contains("ReturnId"))
                {
                    dtSale.Columns.Add(ReturnId);
                }

                dtSale.Columns.Add(BOMId);
                dtSale.Columns.Add(TransactionType);


                #endregion

                #region SaveAndProcess

                sqlResults = new SaleDAL().SaveAndProcess(dtSale, () => { }, Convert.ToInt32(paramVM.BranchId), "Web", connVM, paramVM, null, null, paramVM.CurrentUser);

                rVM.Status = sqlResults[0];
                rVM.Message = "Saved Successfully";

                #endregion

            }
            #endregion

            #region catch

            catch (Exception ex)
            {

                FileLogger.Log("ImportDAL", "SaveKCCLSale_Web", ex.ToString());

                rVM.Message = ex.Message + ex.StackTrace;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public DataTable GetKCCLTransferData_Web(string ID, string BranchId, string transactionType, SysDBInfoVMTemp connVM = null)
        {
            DataTable dtTableResult;

            #region try

            try
            {

                BranchProfileDAL branchDAL = new BranchProfileDAL();

                DataTable dt = branchDAL.SelectAll(BranchId, null, null, null, null, true, connVM);

                dtTableResult = GetSaleKohinoorFGData(ID, dt, connVM);

                ProductDAL pDal = new ProductDAL();

                foreach (DataRow row in dtTableResult.Rows)
                {
                    List<ProductVM> vms = pDal.SelectAll("0", new string[] { "Pr.ProductName" }, new[] { row["ProductName"].ToString() }, null, null, null, connVM);

                    if (vms == null || !vms.Any())
                    {
                        List<ProductNameVM> nameVMs = pDal.SelectProductName("0", new[] { "Pr.ProductName" }, new[] { row["ProductName"].ToString() }, null, null, null, connVM);

                        if (nameVMs != null && nameVMs.Any())
                        {
                            vms = pDal.SelectAll(nameVMs.FirstOrDefault().ItemNo, null, null, null, null, null, connVM);

                            row["VAT_Rate"] = vms.FirstOrDefault().VATRate;

                        }
                    }
                    else
                    {
                        row["VAT_Rate"] = vms.FirstOrDefault().VATRate;

                    }

                    string branchTo = row["TransferToBranchCode"].ToString().Trim();
                    string branchFrom = row["BranchCode"].ToString().Trim();

                    BranchProfileVM transfer = branchDAL.SelectAllList(null, new[] { "IntegrationCode" },
                        new[] { branchTo }, null, null, connVM).FirstOrDefault();

                    BranchProfileVM branchProfileVm = branchDAL.SelectAllList(null, new[] { "IntegrationCode" },
                        new[] { branchFrom }, null, null, connVM).FirstOrDefault();

                    if (transfer != null && branchProfileVm != null)
                    {
                        row["TransferToBranchCode"] = transfer.BranchCode;
                        row["BranchCode"] = branchProfileVm.BranchCode;

                    }
                    FileLogger.Log("TransferIssue", "Load", branchFrom + " " + dt.Rows[0]["IntegrationCode"]);

                    row["TransactionType"] = transactionType;
                }
            }

            #endregion

            #region Catch

            catch (Exception ex)
            {

                FileLogger.Log("ImportDAL", "GetKCCLTransferData_Web", ex.ToString());

                throw ex;
            }

            #endregion

            return dtTableResult;
        }

        public ResultVM SaveKCCLTransfer_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            DataTable dtTableResult = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            TransferIssueDAL tDal = new TransferIssueDAL();


            rVM.Status = "Fail";

            #region try

            try
            {
                string invoiceNo = paramVM.RefNo;

                #region Exits Check

                if (string.IsNullOrEmpty(invoiceNo))
                {

                    rVM.Message = "Please Enter or Select Transaction No ";
                    return rVM;
                    //return;
                }

                string value = commonDal.settingValue("Import", "SaleExistContinue", connVM);

                if (value == "N")
                {
                    List<TransferIssueVM> issues = tDal.SelectAllList(0, new[] { "ti.ImportIDExcel" }, new[] { invoiceNo }, null, null, connVM);

                    if (issues != null && issues.Count > 0)
                    {
                        TransferIssueVM sale = issues.FirstOrDefault();

                        if (sale != null)
                        {
                            rVM.Message = "This Transaction No is already in system with Transfer no - " + sale.TransferIssueNo;

                            return rVM;
                        }
                    }

                }

                #endregion

                #region Get Branch Info

                BranchProfileDAL dal = new BranchProfileDAL();

                DataTable dt = dal.SelectAll(paramVM.BranchId, null, null, null, null, true, connVM);

                #endregion

                #region GetSaleKohinoorDbData

                dtTableResult = GetKCCLTransferData_Web(paramVM.RefNo, paramVM.BranchId, paramVM.TransactionType, connVM);

                if (dtTableResult == null || dtTableResult.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                #endregion



                #region SaveAndProcess

                sqlResults = tDal.SaveTempTransfer(dtTableResult, paramVM.BranchCode, paramVM.TransactionType, paramVM.CurrentUser, Convert.ToInt32(paramVM.BranchId), () => { }, null, null, true, connVM, "", paramVM.CurrentUser);

                rVM.Status = sqlResults[0];
                rVM.Message = sqlResults[1];

                #endregion

            }
            #endregion

            #region catch

            catch (Exception ex)
            {

                FileLogger.Log("ImportDAL", "SaveKCCLTransfer_Web", ex.ToString() + ex.StackTrace);

                rVM.Message = ex.Message;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        #endregion

        #region DBH Integration

        public DataTable GetSaleDBHDbData(string[] invoiceNo, DataTable db, string fromDate = "", string toDate = "", string TransactionType = "Other", bool IsCreatedBy = false)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name


            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction


                connection = _dbsqlConnection.GetDBHConnection(db);

                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }
                transaction = connection.BeginTransaction();

                #endregion open connection and transaction


                sqlText = @"Select
ID 
,customercode ""Customer_Code""
,customername ""Customer_Name""
,deliveryaddress ""Delivery_Address""
,invoicedatetime ""Invoice_Date_Time""
,NVL(deliverydatetime,invoicedatetime) ""Delivery_Date_Time""

,post ""Post""
,productcode ""Item_Code""
,productname ""Item_Name""
,UOM
,quantity ""Quantity""
,unitprice ""NBR_Price""
,SUBTOTAL ""SubTotal""
,vatrate ""VAT_Rate""
,sdrate ""SD_Rate""
,'0' ""Trading_MarkUp""
,discountamount ""Discount_Amount""
,promotionalquantity ""Promotional_Quantity""
,'VAT 4.3' ""VAT_Name""
,lcnumber ""LC_Number""
,currencycode ""Currency_Code""
,case when transactiontype='Credit' then 'Credit' 
when transactiontype='Debit' then 'Debit' else 'NEW' end  ""Sale_Type""
,'N' ""Is_Print""
,'0' ""Tender_Id""
,ID ""Reference_No""
,referenceno ""CommentsD""
,type ""Type""
,vehicleno ""Vehicle_No""
,vehicletype ""VehicleType""
,'' ""Previous_Invoice_No""
,NVL(previousinvoicedatetime,'01-Jan-01') ""PreviousInvoiceDateTime""
,previousquantity ""PreviousQuantity""
,previousnbrprice ""PreviousNBRPrice""
,previousuom ""PreviousUOM""
,previousvatrate ""PreviousVATRate""
,previoussd ""PreviousSD""
,reasonofreturn ""ReasonOfReturn""
";
                if (IsCreatedBy)
                {
                    sqlText += @" ,USERID ""CreatedBy""";

                }

                sqlText += @"
From vat_trx
WHERE 1=1
and isprocessed='N'
";

                if (invoiceNo.Length > 0)
                {
                    sqlText += " and ID  in ('@invNo')";
                }
                ////if (TransactionType == "Other")
                ////{
                ////    ////sqlText += " and transactiontype = 'Local'";
                ////    sqlText += " and transactiontype = 'Local'";
                ////}

                if (!string.IsNullOrWhiteSpace(TransactionType))
                {
                    ////sqlText += " and transactiontype = 'Local'";

                    sqlText += " and transactiontype = @transactiontype";
                }

                if (!string.IsNullOrEmpty(fromDate))
                {
                    sqlText +=
                        " and  TO_DATE (invoicedatetime, 'dd-MON-yy') >= TO_DATE (:fromDate, 'dd-MON-yy')";
                }

                if (!string.IsNullOrEmpty(toDate))
                {
                    sqlText +=
                        " and  TO_DATE (invoicedatetime, 'dd-MON-yy') <= TO_DATE (:toDate, 'dd-MON-yy')";
                }

                if (invoiceNo.Length > 0)
                {
                    sqlText = sqlText.Replace("@invNo", string.Join("','", invoiceNo));
                }
                if (TransactionType.ToLower() == "ServiceNS".ToLower())
                {
                    sqlText = sqlText.Replace("@transactiontype", "'Local'");
                }
                else
                {
                    sqlText = sqlText.Replace("@transactiontype", "'" + TransactionType + "'");
                }

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;

                if (!string.IsNullOrWhiteSpace(fromDate))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("fromDate",
                        Convert.ToDateTime(fromDate).ToString("dd-MMM-yyyy")));

                }

                if (!string.IsNullOrWhiteSpace(toDate))
                {
                    cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("toDate",
                        Convert.ToDateTime(toDate).ToString("dd-MMM-yyyy")));
                }


                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);
                adapter.Fill(table);


                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit


                FileLogger.Log("ImportDAL", "GetSaleSQRDbData", sqlText + "\n" + " Parameters - TransactionType : " + TransactionType + " --fromDate : " + fromDate + " toDate : " + toDate);


                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbData", ex.ToString() + "\n" + sqlText + "\n" + " Parameters - TransactionType : " + TransactionType + " --fromDate : " + fromDate + " toDate : " + toDate);


                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetInvoicesSaleTemp(string userId, SqlConnection vConnection = null, SqlTransaction vTransaction = null)
        {
            #region Initializations

            SqlTransaction transaction = null;
            SqlConnection connection = null;
            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();
            int transResult = 0;
            #endregion

            #region try

            try
            {
                #region Connection and Transaction

                if (vConnection == null)
                {
                    connection = _dbsqlConnection.GetConnection();
                    connection.Open();
                }
                else
                {
                    connection = vConnection;
                }
                if (vTransaction == null)
                {
                    transaction = connection.BeginTransaction();
                }
                else
                {
                    transaction = vTransaction;
                }

                #endregion

                string sqlText = @"select distinct ID, SALESINVOICENO INVOICENO,USERID from SalesTempData
where UserId = @UserId ";

                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.Parameters.AddWithValue("@UserId", userId);

                DataTable dtresult = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtresult);


                #region Commit

                if (result[0].ToLower() == "success" && vTransaction == null)
                {
                    transaction.Commit();
                }

                #endregion


                return dtresult;
            }
            #endregion

            #region Catch and Finally

            catch (Exception e)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                }


                FileLogger.Log("ImportDAL", "GetInvoicesSaleTemp", e.ToString());

                throw e;
            }
            finally
            {

                if (connection.State == ConnectionState.Open && vConnection == null)
                {
                    connection.Close();

                }

            }
            #endregion
        }

        public ResultVM UpdateDBHTable(string UserId, string branchId)
        {
            ResultVM resultVm = new ResultVM();
            try
            {

                DataTable dtresult = GetInvoicesSaleTemp(UserId);

                BranchProfileDAL dal = new BranchProfileDAL();
                DataTable dtConnection = dal.SelectAll(branchId, null, null, null, null, true);

                UpdateDBHOracle(dtresult, dtConnection, UserId);
                resultVm.Status = "success";

                return resultVm;
            }
            catch (Exception ex)
            {
                resultVm.Status = "fail";
                resultVm.Message = "fail";

                FileLogger.Log("ImportDAL", "UpDateDBHTable", ex.ToString());

                throw ex;
            }
        }

        public ResultVM UpdateDBHOracle(DataTable data, DataTable dtConnection, string userId)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            CommonDAL commonDal = new CommonDAL();
            ResultVM resultVM = new ResultVM();

            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                string processDate = DateTime.Now.ToString("dd-MMM-yyyy");

                #region open connection and transaction
                connection = _dbsqlConnection.GetDBHConnection(dtConnection);

                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }

                #endregion open connection and transaction

                sqlText = "delete from TempVAT_TRX where UserId = :UserId";
                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("UserId", userId));
                cmd.ExecuteNonQuery();

                FileLogger.Log("ImportDAL", "UpdateDBHOracle", "Before BulkInsertOracle");

                string[] result = commonDal.BulkInsertOracle("TempVAT_TRX", data, dtConnection, connection);

                FileLogger.Log("ImportDAL", "UpdateDBHOracle", "After BulkInsertOracle");


                sqlText = @"

UPDATE vat_trx SET vat_trx.invoiceno = (SELECT distinct tempvat_trx.invoiceno
                                  FROM tempvat_trx 
                                  WHERE vat_trx.id = tempvat_trx.id)
                    ,isprocessed='Y' , 
vat_trx.PROCESSAUDIT = '" + processDate + "'";

                sqlText += @"
WHERE  EXISTS (SELECT tempvat_trx.id
            FROM tempvat_trx 
            WHERE vat_trx.id = tempvat_trx.id)

";
                FileLogger.Log("ImportDAL", "UpdateDBHOracle", "Before Update");

                cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.ExecuteNonQuery();

                FileLogger.Log("ImportDAL", "UpdateDBHOracle", "After Update");

                resultVM.Status = "success";
                return resultVM;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbData", ex.ToString() + "\n" + sqlText);


                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM UserUpdateDBHTable(string branchId)
        {
            ResultVM resultVm = new ResultVM();
            try
            {

                DataTable dtresult = GetVATUser();

                BranchProfileDAL dal = new BranchProfileDAL();
                DataTable dtConnection = dal.SelectAll(branchId, null, null, null, null, true);

                UserUpdateDBHOracle(dtresult, dtConnection, DateTime.Now.ToString());
                resultVm.Status = "success";

                return resultVm;
            }
            catch (Exception ex)
            {
                resultVm.Status = "fail";
                resultVm.Message = "fail";

                FileLogger.Log("ImportDAL", "UserUpdateDBHTable", ex.ToString());

                throw ex;
            }
        }

        public ResultVM UserUpdateDBHOracle(DataTable data, DataTable dtConnection, string processDate)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            CommonDAL commonDal = new CommonDAL();
            ResultVM resultVM = new ResultVM();

            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                processDate = Convert.ToDateTime(processDate).ToString("dd-MMM-yyyy");

                #region open connection and transaction
                connection = _dbsqlConnection.GetDBHConnection(dtConnection);

                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }

                #endregion open connection and transaction

                sqlText = "delete from TEMPVAT_USER";
                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                //////cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("UserId", userId));
                cmd.ExecuteNonQuery();


                string[] result = commonDal.BulkInsertOracle("TEMPVAT_USER", data, dtConnection, connection);

                sqlText = @"
UPDATE vat_trx SET vat_trx.isprocessed = 'H',vat_trx.PROCESSRESULT='This User not found in VAT system', 
vat_trx.PROCESSAUDIT = '" + processDate + "'";

                sqlText += @" where USERID not in
(SELECT distinct TEMPVAT_USER.USERNAME FROM TEMPVAT_USER ) and vat_trx.isprocessed = 'N'

";
                FileLogger.Log("ImportDAL", "UserUpdateDBHOracle", "sqlText : " + sqlText);

                FileLogger.Log("ImportDAL", "UserUpdateDBHOracle", "Before Update");

                cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.ExecuteNonQuery();

                FileLogger.Log("ImportDAL", "UserUpdateDBHOracle", "After Update");

                resultVM.Status = "success";
                return resultVM;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetSaleSQRDbData", ex.ToString() + "\n" + sqlText);


                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetPurchaseData_DBH(string invoiceNo, DataTable db, string fromDate = "", string toDate = "")
        {

            #region Initializ

            string sqlText = "";

            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name

            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;

            #endregion

            #region try

            try
            {

                #region open connection and transaction

                connection = _dbsqlConnection.GetDBHConnection(db);

                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }
                transaction = connection.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"
select ID
, BRANCHCODE as ""BranchCode""
, VENDOR_CODE as ""Vendor_Code""
, VENDOR_NAME as ""Vendor_Name""
, ID as ""Referance_No""
, LC_NO as ""LC_No""
, BE_NUMBER as ""BE_Number""
, INVOICE_DATE as ""Invoice_Date""
, RECEIVE_DATE as ""Receive_Date""
, PRODUCTCODE  as ""Item_Code""
, PRODUCTNAME  as ""Item_Name""
, QUANTITY as ""Quantity""
, UOM as ""UOM""
, (QUANTITY*UNIT_PRICE) as ""Total_Price""
, TYPE as ""Type""
, VAT_RATE as ""VAT_RATE""
, VAT_AMOUNT as ""VAT_Amount""
, SD_AMOUNT as ""SD_Amount""
, ASSESSABLE_VALUE as ""Assessable_Value""
, CD_AMOUNT as ""CD_Amount""
, RD_AMOUNT as ""RD_Amount""
, AT_AMOUNT as ""AT_Amount""
, AITAMOUNT as ""AITAmount""
, OTHERS_AMOUNT as ""Others_Amount""
, REMARKS as ""Remarks""
, POST as ""Post""
, WITH_VDS as ""With_VDS""
, COMMENTS as ""Comments""
, 0 as ""Rebate_Rate""
,(case when TRANSACTIONTYPE = 'Local' then 'InputService' else TRANSACTIONTYPE end) as ""Transection_Type""
from vat_trx_prch 

where 1=1 
and ISPROCESSED='N'
and INVOICE_DATE BETWEEN  :fromDate  AND   :toDate
";

                #endregion

                string conditionText = "";

                if (!string.IsNullOrWhiteSpace(invoiceNo))
                {
                    sqlText += " and ID = '@invNo'";
                }

                sqlText = sqlText.Replace("@condition", conditionText);
                sqlText = sqlText.Replace("@invNo", invoiceNo);

                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Transaction = transaction;

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("fromDate",
                       Convert.ToDateTime(fromDate).ToString("dd-MMM-yy")));

                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("toDate",
                       Convert.ToDateTime(toDate).ToString("dd-MMM-yy")));


                DataTable table = new DataTable();
                Oracle.DataAccess.Client.OracleDataAdapter adapter = new Oracle.DataAccess.Client.OracleDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }

                FileLogger.Log("ImportDAL", "GetPurchaseData_DBH", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }

            }
            #endregion
        }

        public ResultVM UpdateDBHPurchaseTable(string UserId, string branchId)
        {
            ResultVM resultVm = new ResultVM();
            try
            {

                DataTable dtresult = GetInvoicesPurchaseTemp(UserId);

                BranchProfileDAL dal = new BranchProfileDAL();
                DataTable dtConnection = dal.SelectAll(branchId, null, null, null, null, true);

                UpdateDBHOracle_Purchase(dtresult, dtConnection, UserId);
                resultVm.Status = "success";

                return resultVm;
            }
            catch (Exception ex)
            {
                resultVm.Status = "fail";
                resultVm.Message = "fail";

                FileLogger.Log("ImportDAL", "UpDateDBHTable", ex.ToString());

                throw ex;
            }
        }

        public DataTable GetInvoicesPurchaseTemp(string userId, SqlConnection vConnection = null, SqlTransaction vTransaction = null)
        {
            #region Initializations

            SqlTransaction transaction = null;
            SqlConnection connection = null;
            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();
            int transResult = 0;
            #endregion

            #region try

            try
            {
                #region Connection and Transaction

                if (vConnection == null)
                {
                    connection = _dbsqlConnection.GetConnection();
                    connection.Open();
                }
                else
                {
                    connection = vConnection;
                }
                if (vTransaction == null)
                {
                    transaction = connection.BeginTransaction();
                }
                else
                {
                    transaction = vTransaction;
                }

                #endregion

                string sqlText = @"select distinct ID, USERID from TempPurchaseData where UserId= @UserId ";

                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                cmd.Parameters.AddWithValue("@UserId", userId);

                DataTable dtresult = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dtresult);


                #region Commit

                if (result[0].ToLower() == "success" && vTransaction == null)
                {
                    transaction.Commit();
                }

                #endregion


                return dtresult;
            }
            #endregion

            #region Catch and Finally

            catch (Exception e)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                }


                FileLogger.Log("ImportDAL", "GetInvoicesPurchaseTemp", e.ToString());

                throw e;
            }
            finally
            {

                if (connection.State == ConnectionState.Open && vConnection == null)
                {
                    connection.Close();

                }

            }
            #endregion
        }

        public ResultVM UpdateDBHOracle_Purchase(DataTable data, DataTable dtConnection, string userId)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            CommonDAL commonDal = new CommonDAL();
            ResultVM resultVM = new ResultVM();

            Oracle.DataAccess.Client.OracleConnection connection = null;
            Oracle.DataAccess.Client.OracleTransaction transaction = null;
            #endregion

            #region try

            try
            {
                string processDate = DateTime.Now.ToString("dd-MMM-yyyy");

                #region open connection and transaction
                connection = _dbsqlConnection.GetDBHConnection(dtConnection);

                if (connection.State != ConnectionState.Open)
                {
                    connection.Open();
                }

                #endregion open connection and transaction

                sqlText = "delete from TempVAT_TRX where UserId = :UserId";
                Oracle.DataAccess.Client.OracleCommand cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.Parameters.Add(new Oracle.DataAccess.Client.OracleParameter("UserId",
                    userId));
                cmd.ExecuteNonQuery();

                string[] result = commonDal.BulkInsertOracle("TempVAT_TRX", data, dtConnection, connection);

                sqlText = @"
UPDATE vat_trx_prch SET isprocessed='Y'

WHERE  EXISTS (SELECT tempvat_trx.id
            FROM tempvat_trx 
            WHERE vat_trx_prch.id = tempvat_trx.id)

";
                FileLogger.Log("ImportDAL", "UpdateDBHOracle_Purchase", "Before Update");

                cmd = new Oracle.DataAccess.Client.OracleCommand(sqlText, connection);
                cmd.ExecuteNonQuery();

                FileLogger.Log("ImportDAL", "UpdateDBHOracle_Purchase", "After Update");

                resultVM.Status = "success";
                return resultVM;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "UpdateDBHOracle_Purchase", ex.ToString() + "\n" + sqlText);

                throw ex;

            }
            finally
            {

                if (connection != null)
                {
                    if (connection.State == ConnectionState.Open)
                    {
                        connection.Close();
                    }

                }
            }
            #endregion
        }

        #endregion

        #region Nesatle and Unilever

        public string[] UpdateNestleMaster(List<string> ids, DataTable db, string tableName = "Vendors", SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";


                #endregion

                #region Sql Command

                int len = ids.Count;


                sqlText += " update " + tableName + " set IsProcessed =1, IsUpdated =0 where Id in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + ids[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateNestleMaster", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateNestlePurchaseReturnTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "TransferIssues")
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM);
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update " + tableName + " set IsProcessed = 1 where  ReferanceNo in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateNestleTransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateNestleTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "TransferIssues")
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM);
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update " + tableName + " set IsProcessed = 1 where   ReferanceNo in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateNestleTransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public DataTable GetCustomerNestleDbData(DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();
            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"
SELECT [Id][SL]
      ,[Code][CustomerCode]
      ,[CustomerName]
      ,'Local'[CustomerGroup]
      ,[Address]
      ,[BIN_NID][BIN_No]
      ,[TIN][TINNo]
      ,[ContactNumber][ContactPersonTelephone]
      ,[FaxNo]
      ,[Email]
      ,[ContactPerson][ContactPerson]
      ,[Comments]
      ,[IsProcessed]
      ,[IsUpdated]
  FROM Customers where (IsProcessed =0 or IsUpdated =1)
 ";


                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetCustomerNestleDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetProductNestleDbData(DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();
            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"
SELECT [Id][SL]
      ,[Code][ProductCode]
      ,[ProductNameBangla]
      ,[ProductName]
      ,'Trading'[ProductGroup]
      ,[UOM]
      ,[HSCode]
      ,round((NBRPrice/((100+VATRate)/100)),5)[UnitPrice]
      ,[NBRPrice][Packetprice]
      ,[VATRate]
      ,[SDRate]
      ,[CommercialDescription][Description]
      ,[IsProcessed]
      ,[IsUpdated]
  FROM Products where (IsProcessed =0 or IsUpdated = 1)
 "; //07/0007401




                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram



                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetProductNestleDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetProductUnileverDbData(DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction


                #region sqlText

                sqlText = @"
SELECT [Id][SL]
      ,[Code][ProductCode]
      ,[ProductNameBangla]
      ,[ProductName]
      ,'Trading'[ProductGroup]
      ,[UOM]
      ,[HSCode]
      ,round((NBRPrice/((100+VATRate)/100)),5)[UnitPrice]
      ,[NBRPrice][Packetprice]
      ,[VATRate]
      ,[SDRate]
      ,[CommercialDescription][Description]
      ,[IsProcessed]
      ,[IsUpdated]
  FROM Products where (IsProcessed =0 or IsUpdated = 1)
 "; //07/0007401




                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram



                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetProductUnileverDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetCustomerUnileverDbData(DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {

            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                #region sqlText

                sqlText = @"
SELECT [Id][SL]
      ,[Code][CustomerCode]
      ,[CustomerName]
      ,[CustomerBanglaName]
      ,'Local'[CustomerGroup]
      ,[Address]
      ,[BanglaAddress]
      ,[BIN_NID][BIN_No]
      ,[TIN][TINNo]
      ,[ContactNumber][ContactPersonTelephone]
      ,[FaxNo]
      ,[Email]
      ,[ContactPerson][ContactPerson]
      ,[Comments]
      ,[IsProcessed]
      ,[IsUpdated]
  FROM Customers where CompanyCode=@CompanyCode  and (IsProcessed =0 or IsUpdated =1)
 ";


                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@CompanyCode", code);

                #region Peram
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetCustomerUnileverDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateUnileverMaster(List<string> ids, DataTable db, string tableName = "Vendors", SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();

            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }
                string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                #endregion

                #region Sql Text

                string sqlText = @"";


                #endregion

                #region Sql Command

                int len = ids.Count;


                sqlText += " update " + tableName + " set IsProcessed =1, IsUpdated =0 where CompanyCode=@CompanyCode And  Id in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + ids[i] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("CompanyCode", code);


                int rows = cmd.ExecuteNonQuery();
                #endregion


                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateUnileverMaster", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public DataTable GetVendorNesatleDbData(DataTable conInfo, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            CommonDAL commonDal = new CommonDAL();

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(conInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"
SELECT [Id][SL]
      ,[Code][VendorCode]
      ,[VendorName]
      ,[VendorGroup]
      ,[Address]
      ,[ContactNumber][TelephoneNo]
      ,[BIN_NID][BIN_No]
      ,[TIN][TINNo]
      ,[FaxNo]
      ,[Email]
      ,[ContactPerson]
      ,[Comments]
      ,[IsProcessed]
      ,[IsUpdated]
  FROM Vendors  where (IsProcessed =0 or  IsUpdated =1)
 "; //07/0007401




                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);



                #region Peram



                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetVendorNesatleDbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateUBLTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "TransferIssues")
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM);
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update " + tableName + " set IsProcessed = 1 where CompanyCode=@CompanyCode And  ReferanceNo in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                cmd.Parameters.AddWithValue("@CompanyCode", code);

                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateNestleTransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public string[] UpdateUBLPurchaseReturnTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "TransferIssues")
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM);
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update " + tableName + " set IsProcessed = 1 where CompanyCode=@CompanyCode And ReferanceNo in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);
                cmd.Parameters.AddWithValue("@CompanyCode", code);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateNestleTransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        #endregion

        #region JAPFA

        #region Purchase

        public DataTable GetSource_PurchaseData_Master_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtPurchasemaster = new DataTable();
            DataTable dtPurchase = new DataTable();

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region Middleware data get and Process

                dtPurchase = GetSource_PurchaseDataALL_Master_JAPFA(paramVM);

                #endregion

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                //string TableName = "TallyToVAT.dbo.grn_inv";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                sqlText = @"
SELECT
0							                                                    Selected
,TempPur_grn_inv.vchno																    vchno
,TempPur_grn_inv.vchno                                                                  ReferenceNo
,TempPur_grn_inv.partyname															    VendorName
,TempPur_grn_inv.partycode															    VendorCode
--,cast(grn_inv.date as varchar(20)) 										    InvoiceDateTime
--,'1990/01/01'										                            InvoiceDateTime
,CASE
    WHEN acct.challandate is null THEN '1900/01/01'
    WHEN acct.challandate='' THEN '1900/01/01'
    ELSE acct.challandate
END InvoiceDateTime
--,cast(partyorderdate  as varchar(20)) 										Receive_Date
,cast(TempPur_grn_inv.date as varchar(20)) 										        Receive_Date
,SUM(qty)																	    TotalQuantity

FROM TempPur_grn_inv
--left outer join TallyToVAT.dbo.grn_acc acc on TempPur_grn_inv.masterid=acc.masterid 
left outer join (select distinct masterid, partycountry,challanno,challandate from TempPur_grn_acc )  acct on TempPur_grn_inv.masterid=acct.masterid 
left outer join TempPur_grn_acc acc on TempPur_grn_inv.masterid=acc.masterid and acc.ledgername='231_001 VDS'
left outer join TempPur_grn_acc acctds on TempPur_grn_inv.masterid=acctds.masterid and acctds.ledgername='231_020 TDS'

WHERE 1=1

--and grn_inv.vchno not in (select REFNO from TallyToVAT.dbo.VAT_PURCHASE_COMPLETED)

----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);


                #region Filtering

                if (paramVM.TransactionType == "Other")
                {
                    sqlText += " and (acct.partycountry = 'Bangladesh') and qty > 0 ";
                }
                else if (paramVM.TransactionType == "Import")
                {
                    sqlText += " and (acct.partycountry != 'Bangladesh')  and qty > 0  and acct.partycountry !='' ";

                }
                else
                {
                    sqlText += " and acct.partycountry = '" + paramVM.TransactionType + "' ";
                }


                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(grn_inv.IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(pur.Post,'N')=@PostStatus";
                //}

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    if (paramVM.SearchField == "vchno")
                    {
                        sqlText = sqlText + @" AND TempPur_grn_inv.vchno = @PurchaseInvoiceNo";

                    }
                    //else if (paramVM.SearchField == "Vendor_Name")
                    //{
                    //    sqlText = sqlText + @" AND ven.VendorName = @PurchaseInvoiceNo";

                    //}
                    //else if (paramVM.SearchField == "Vendor_Code")
                    //{
                    //    sqlText = sqlText + @" AND pur.Vendor_Code = @PurchaseInvoiceNo";

                    //}
                    //else
                    //{
                    //    sqlText = sqlText + @" AND ID = @PurchaseInvoiceNo";

                    //}
                }
                else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    sqlText += @" and TempPur_grn_inv.vchno	 in (";
                    foreach (string id in paramVM.IDs)
                    {
                        sqlText += "'" + id + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate ";
                    sqlText = sqlText + @" AND (cast(TempPur_grn_inv.date as datetime)) >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText = sqlText + @" AND (cast(TempPur_grn_inv.date as datetime)) <= @toDate";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    //sqlText = sqlText + @" AND pur.BranchCode in (";
                    sqlText = sqlText + @" AND godown in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                //sqlText += " and pur.companyCode = '" + code + "'";

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
 TempPur_grn_inv.vchno							
 ,TempPur_grn_inv.date									
 ,TempPur_grn_inv.partyname                               
 ,TempPur_grn_inv.partycode 
,acct.challandate                              
 --,partyorderdate    

";

                #endregion

                //sqlText += " ORDER BY Invoice_Date_Time";

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Add Parameter Values

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                //}


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@PurchaseInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //cmd.Parameters.AddWithValue("@VenCompanyCode", code);


                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtPurchasemaster);

                #endregion

                #region Selected Data

                if (dtPurchasemaster != null && dtPurchasemaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtPurchasemaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtPurchasemaster.Select("vchno	  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtPurchasemaster = new DataTable();
                        dtPurchasemaster = rows.CopyToDataTable();

                    }

                }

                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_PurchaseData_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtPurchasemaster;

        }

        public DataTable GetSource_PurchaseData_Master_JAPFAXX(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtPurchasemaster = new DataTable();

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                string TableName = "TallyToVAT.dbo.grn_inv";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_Sales";
                //}

                sqlText = @"
SELECT
0							                                                    Selected
,grn_inv.vchno																    vchno
,grn_inv.vchno                                                                  ReferenceNo
,grn_inv.partyname															    VendorName
,grn_inv.partycode															    VendorCode
--,cast(grn_inv.date as varchar(20)) 										    InvoiceDateTime
--,'1990/01/01'										                            InvoiceDateTime
,CASE
    WHEN acct.challandate is null THEN '1900/01/01'
    WHEN acct.challandate='' THEN '1900/01/01'
    ELSE acct.challandate
END InvoiceDateTime
--,cast(partyorderdate  as varchar(20)) 										Receive_Date
,cast(grn_inv.date as varchar(20)) 										        Receive_Date
,SUM(qty)																	    TotalQuantity

FROM " + TableName + @"
--left outer join TallyToVAT.dbo.grn_acc acc on grn_inv.masterid=acc.masterid 
left outer join (select distinct masterid, partycountry,challanno,challandate from TallyToVAT.dbo.grn_acc )  acct on grn_inv.masterid=acct.masterid 
left outer join TallyToVAT.dbo.grn_acc acc on grn_inv.masterid=acc.masterid and acc.ledgername='231_001 VDS'
left outer join TallyToVAT.dbo.grn_acc acctds on grn_inv.masterid=acctds.masterid and acctds.ledgername='231_020 TDS'

WHERE 1=1

and grn_inv.vchno not in (select REFNO from TallyToVAT.dbo.VAT_PURCHASE_COMPLETED)



----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);


                #region Filtering

                if (paramVM.TransactionType == "Other")
                {
                    sqlText += " and (acct.partycountry = 'Bangladesh') and qty > 0 ";
                }
                else if (paramVM.TransactionType == "Import")
                {
                    sqlText += " and (acct.partycountry != 'Bangladesh')  and qty > 0  and acct.partycountry !='' ";

                }
                else
                {
                    sqlText += " and acct.partycountry = '" + paramVM.TransactionType + "' ";
                }


                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(grn_inv.IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(pur.Post,'N')=@PostStatus";
                //}

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    if (paramVM.SearchField == "vchno")
                    {
                        sqlText = sqlText + @" AND grn_inv.vchno = @PurchaseInvoiceNo";

                    }
                    //else if (paramVM.SearchField == "Vendor_Name")
                    //{
                    //    sqlText = sqlText + @" AND ven.VendorName = @PurchaseInvoiceNo";

                    //}
                    //else if (paramVM.SearchField == "Vendor_Code")
                    //{
                    //    sqlText = sqlText + @" AND pur.Vendor_Code = @PurchaseInvoiceNo";

                    //}
                    //else
                    //{
                    //    sqlText = sqlText + @" AND ID = @PurchaseInvoiceNo";

                    //}
                }
                else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    sqlText += @" and grn_inv.vchno	 in (";
                    foreach (string id in paramVM.IDs)
                    {
                        sqlText += "'" + id + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate ";
                    sqlText = sqlText + @" AND (cast(grn_inv.date as datetime)) >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText = sqlText + @" AND (cast(grn_inv.date as datetime)) <= @toDate";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    //sqlText = sqlText + @" AND pur.BranchCode in (";
                    sqlText = sqlText + @" AND godown in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                //sqlText += " and pur.companyCode = '" + code + "'";

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
 grn_inv.vchno							
 ,grn_inv.date									
 ,grn_inv.partyname                               
 ,grn_inv.partycode 
,acct.challandate                              
 --,partyorderdate    

";

                #endregion

                //sqlText += " ORDER BY Invoice_Date_Time";

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Add Parameter Values

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                //}


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@PurchaseInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //cmd.Parameters.AddWithValue("@VenCompanyCode", code);


                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtPurchasemaster);

                #endregion

                #region Selected Data

                if (dtPurchasemaster != null && dtPurchasemaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtPurchasemaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtPurchasemaster.Select("vchno	  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtPurchasemaster = new DataTable();
                        dtPurchasemaster = rows.CopyToDataTable();

                    }

                }

                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_PurchaseData_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtPurchasemaster;

        }

        public DataTable GetJAPFAPurchaseDataWeb(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            DataTable dt = new DataTable();


            #endregion

            #region try

            try
            {

                CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();

                DataTable PDt = GetPurchaseJAPFADbData(paramVM, connVM);

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region SQLText

                #endregion

                //SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                //cmd.ExecuteNonQuery();

                //retResults = commonDal.BulkInsert("#temp", PDt, currConn, transaction);

                //cmd.CommandText = updateItemName;
                //cmd.ExecuteNonQuery();

                //cmd.CommandText = sqlText;
                //cmd.CommandTimeout = 500;
                //SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                //adapter.Fill(dt);

                //return dt;
                return PDt;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetJAPFAPurchaseDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetPurchaseJAPFADbData(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"

SELECT [masterid]
      ,[alterid]
      ,[vchno]
      ,[date]
      ,[vchtype]
      ,[partyorderno]
      ,[partyorderdate]
      ,[partycode]
      ,[partyname]
      ,[termsofpayment]
      ,[otherref]
      ,[code]
      ,[productname]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[disc]
      ,[amount]
      ,[trackno]
      ,[godown]
      ,[orderno]
      ,[dueon]
      ,[isopt]
  FROM grn_inv where 1=1 

 
 "; //07/0007401

                //VendorDAL vendorDal = new VendorDAL();

                //if (string.IsNullOrEmpty(param.Processed))
                //{
                //    sqlText += " and IsProcessed = 'N'";
                //}
                //else if (param.Processed != "ALL")
                //{
                //    sqlText += " and IsProcessed = '" + param.Processed + "'";
                //}


                //if (param.TransactionType == "Other")
                //{
                //    sqlText += " and acc.partycountry = 'Bangladesh' ";
                //}
                //else if (param.TransactionType == "Import")
                //{
                //    sqlText += " and TransactionType != 'Bangladesh' ";
                //}
                //else if (param.TransactionType == "InputService")
                //{
                //    sqlText += " and TransactionType = 'InputService' ";

                //}

                if (!string.IsNullOrEmpty(param.RefNo) || (param.IDs != null && param.IDs.Count > 0))
                {
                    if (param.SearchField == "vchno")
                    {
                        sqlText += " and vchno = @rid";

                        sqlText = sqlText.Replace("@cmRef", "vchno");

                    }


                    else if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and vchno in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                        sqlText = sqlText.Replace("@cmRef", "");

                    }
                    else
                    {
                        sqlText += " and vchno = @rid";

                        sqlText = sqlText.Replace("@cmRef", "");
                    }
                }


                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                }

                //sqlText += "  and CompanyCode = @CompanyCode";

                // and BranchCode='" +
                //conInfo.Rows[0]["IntegrationCode"] + "'
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@rid", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                }

                //string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                //cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                //ProductDAL dal = new ProductDAL();

                //foreach (DataRow tableRow in table.Rows)
                //{
                //    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                //    ProductVM vm = vms.FirstOrDefault();

                //    if (vm == null)
                //    {
                //        continue;
                //    }
                //    decimal vatRate = Convert.ToDecimal(tableRow["VAT_Rate"]);
                //    tableRow["UOM"] = vm.UOM;
                //    decimal sdAmount = (Convert.ToDecimal(tableRow["Total_Price"]) * vm.SD) / 100;

                //    tableRow["SD_Amount"] = sdAmount;

                //    tableRow["VAT_Amount"] = (sdAmount + Convert.ToDecimal(tableRow["Total_Price"])) * vatRate / 100;

                //    //DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                //    //    Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                //    //tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                //    //    ? "0"
                //    //    : dt.Rows[0]["NBRPrice"].ToString();

                //}

                //table.Columns.Remove("VAT_Rate");
                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetPurchaseJAPFADbData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM SaveJAPFAPurchase_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #region try

            try
            {

                DataTable dtPurchase = new DataTable();
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode });
                paramVM.dtConnectionInfo = dtBranchInfo;

                ////dtPurchase = GetPurchaseACIDbData(paramVM);

                dtPurchase = GetPurchaseJAPFADbData_Web(paramVM);



                if (dtPurchase == null || dtPurchase.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                PurchaseDAL purchaseDal = new PurchaseDAL();

                sqlResults = purchaseDal.SaveTempPurchase(dtPurchase, paramVM.BranchCode, paramVM.TransactionType, paramVM.CurrentUser, 0, () => { });

                if (sqlResults[0].ToLower() == "success")
                {
                    ////if (paramVM.CompanyCode == "ACI CB ELECTRICAL" && paramVM.IsTrading)
                    ////{
                    ////    string[] results = UpdateACI_CB_ElecticalPurchaseTransactions(dtPurchase, dtBranchInfo, connVM);

                    ////}
                    ////else
                    ////{
                    ////    string[] results = UpdateACIPurchaseTransactions(dtPurchase, dtBranchInfo, connVM);

                    ////}

                    //string[] results = UpdateJAPFaPurchaseTransactions(dtPurchase, dtBranchInfo, connVM);
                    rVM.Message = "Saved Successfully";

                }
                else
                {
                    rVM.Message = sqlResults[1];

                }

                //  if (sqlResults[0].ToLower() == "success")
                //  {

                //  try
                //  {
                //      currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                //      if (currConn.State != ConnectionState.Open)
                //      {
                //          currConn.Open();
                //      }

                //      transaction = currConn.BeginTransaction();


                //      var completedData = dtPurchase.DefaultView.ToTable(true, "ID");

                //      completedData.Columns.Add(new DataColumn() { ColumnName = "BranchCode", DefaultValue = paramVM.BranchCode });
                //      completedData.Columns.Add(new DataColumn() { ColumnName = "CompanyCode", DefaultValue = paramVM.CompanyCode });
                //      completedData.Columns["ID"].ColumnName = "REFNO";

                //      //REFNO

                //      CommonDAL commonDal = new CommonDAL();

                //      commonDal.BulkInsert("VAT_PURCHASE_COMPLETED", completedData,currConn, transaction);


                //      transaction.Commit();


                //  }
                //  catch (Exception e)
                //  {
                //      if (transaction != null) { transaction.Rollback(); }
                //      FileLogger.Log("ImportDAL", "Get Purchase", e.ToString());

                //  }
                //  finally
                //  {

                //      if (currConn != null)
                //      {
                //          if (currConn.State == ConnectionState.Open)
                //          {
                //              currConn.Close();
                //          }

                //      }
                //  }

                //}


                rVM.Status = sqlResults[0];
                rVM.Message = sqlResults[1];

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveJAPFAPurchase_Web", ex.ToString());

                rVM.Message = ex.Message;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public DataTable GetPurchaseJAPFADbData_Web(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                //currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);
                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"

SELECT 
       TempPur_grn_inv.[vchno]        ID
      ,isnull(acct.challandate,'1900/01/01')       Invoice_Date
     -- ,CAST(partyorderdate AS DATE) Receive_Date
      ,TempPur_grn_inv.[date]               Receive_Date
      ,TempPur_grn_inv.[partycode]         Vendor_Code
      ,TempPur_grn_inv.[partyname]         Vendor_Name
      ,[otherref]                  OtherRef
      ,[code]                      Item_Code
      ,[productname]               Item_Name
      ,[qty]                       Quantity
      ,[uom]                       UOM
      ,TempPur_grn_inv.[amount]            Total_Price
     -- ,acc.[vatamount]             VAT_Amount
      , TempPur_grn_inv.amount*(isnull(acc.vatpercent,0)/100)          VAT_Amount
      --,(case when isnull(acc.vatpercent,0) = 15 then 'VAT' when isnull(acc.vatpercent,0) = 0 then 'NonVAT' else 'OtherRate'end) [Type] Sadat 20231211
      ,'Exempted' AS [Type]

      ,TempPur_grn_inv.[vchno]             Referance_No
     ,'N'[Post]                  
     ,'N'[With_VDS]  
     ,'0' Rebate_Rate   
     ,'0' [SD_Amount]   
	 --,TempPur_grn_inv.amount*(acctds.tdspercent/100)   [TDS_Amount]  
	,isnull(acctds.tdsamount,0)              [TDS_Amount] 
     ,COALESCE(NULLIF(acct.vattype,''),'Exclusive')     VATType
     ,isnull(acct.challanno,'-')       BE_Number
 
	 

  FROM TempPur_grn_inv 
  left outer join (select distinct masterid, partycountry,vattype,challanno,challandate from TempPur_grn_acc ) acct on TempPur_grn_inv.masterid=acct.masterid 
  left outer join TempPur_grn_acc acc on TempPur_grn_inv.masterid=acc.masterid and acc.ledgername='231_001 VDS'
  left outer join TempPur_grn_acc acctds on TempPur_grn_inv.masterid=acctds.masterid and acctds.ledgername='231_020 TDS'
  where 1=1
  --and grn_inv.vchno not in (select REFNO from TallyToVAT.dbo.VAT_PURCHASE_COMPLETED)
  --order by Receive_Date 
 "; //07/0007401

                //VendorDAL vendorDal = new VendorDAL();

                //if (string.IsNullOrEmpty(param.Processed))
                //{
                //    //sqlText += " and grn_inv.IsProcessed = 'N'";
                //    sqlText += " and ISNULL(grn_inv.IsProcessed,'N') = 'N'";

                //}
                //else if (param.Processed != "ALL")
                //{
                //    sqlText += " and ISNULL(grn_inv.IsProcessed,'N') = '" + param.Processed + "'";
                //}


                if (param.TransactionType == "Other")
                {
                    sqlText += " and isnull(acct.partycountry,'Bangladesh') = 'Bangladesh' ";
                }
                else if (param.TransactionType == "Import")
                {
                    sqlText += " and isnull(acct.partycountry,'NA') != 'Bangladesh' ";
                }
                else if (param.TransactionType == "InputService")
                {
                    sqlText += " and acct.partycountry = 'InputService' ";

                }

                if (!string.IsNullOrEmpty(param.RefNo) || (param.IDs != null && param.IDs.Count > 0))
                {
                    if (param.SearchField == "vchno")
                    {
                        sqlText += " and  TempPur_grn_inv.vchno = @rid";

                        //sqlText = sqlText.Replace("@cmRef", "vchno");

                    }
                    //else if (param.SearchField == "be_no")
                    //{
                    //    sqlText += " and BE_Number = @rid";
                    //    sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    //}
                    //else if (param.SearchField == "po_no")
                    //{
                    //    sqlText += " and PO_InvoiceRef = @rid";

                    //    sqlText = sqlText.Replace("@cmRef", "PO_InvoiceRef");

                    //}
                    //else if (param.SearchField == "vendor_name")
                    //{

                    //    DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VendorName like" }, new[] { param.RefNo });
                    //    param.RefNo = "";
                    //    //if (dt != null && dt.Rows.Count > 0)
                    //    //{
                    //    //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                    //    //}
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        sqlText += " and Vendor_Code in (";

                    //        foreach (DataRow row in dt.Rows)
                    //        {
                    //            sqlText += "'" + row["VendorCode"] + "',";
                    //        }

                    //        sqlText = sqlText.TrimEnd(',');
                    //        sqlText = sqlText + ")";
                    //    }



                    //    sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    //}
                    //else if (param.SearchField == "bin")
                    //{

                    //    DataTable dt = vendorDal.SelectAll(0, new string[] { "v.VATRegistrationNo like" }, new[] { param.RefNo });

                    //    //if (dt != null && dt.Rows.Count > 0)
                    //    //{
                    //    //    param.RefNo = dt.Rows[0]["VendorCode"].ToString();
                    //    //}

                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        sqlText += " and Vendor_Code in (";

                    //        foreach (DataRow row in dt.Rows)
                    //        {
                    //            sqlText += "'" + row["VendorCode"] + "',";
                    //        }

                    //        sqlText = sqlText.TrimEnd(',');
                    //        sqlText = sqlText + ")";
                    //    }



                    //    sqlText = sqlText.Replace("@cmRef", "Vendor_Code");

                    //}
                    else if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and  TempPur_grn_inv.vchno in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                        //sqlText = sqlText.Replace("@cmRef", "");

                    }
                    else
                    {
                        sqlText += " and  TempPur_grn_inv.vchno = @rid";

                        //sqlText = sqlText.Replace("@cmRef", "");
                    }
                }
                //else
                //{
                //    sqlText = sqlText.Replace("@cmRef", "");

                //}
                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    ////sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate";
                    sqlText += " and (cast(TempPur_grn_inv.[date] as DATE)) >= @fromDate";
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    ////sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText += " and (cast(TempPur_grn_inv.[date] as DATE)) <= @toDate";
                }

                sqlText += " order by Receive_Date";

                // and BranchCode='" +
                //conInfo.Rows[0]["IntegrationCode"] + "'
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(param.RefNo))
                {
                    cmd.Parameters.AddWithValue("@rid", param.RefNo);

                }

                if (!string.IsNullOrEmpty(param.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                }

                if (!string.IsNullOrEmpty(param.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                }

                //string code = commonDal.settingValue("CompanyCode", "Code");

                //cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit


                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit


                ProductDAL dal = new ProductDAL();

                foreach (DataRow tableRow in table.Rows)
                {
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                    {
                        continue;
                    }

                    string vattype = tableRow["VATType"].ToString();
                    if (vattype.ToLower() == "free")
                    {
                        tableRow["VAT_Amount"] = 0;
                        //tableRow["Type"] = "NonVAT";

                    }
                    else if (vattype.ToLower() == "inclusive")
                    {
                        decimal totalprice = Convert.ToDecimal(tableRow["Total_Price"]);
                        decimal amount = (Convert.ToDecimal(tableRow["Total_Price"])) / ((100 + vm.VATRate) / 100);
                        tableRow["VAT_Amount"] = totalprice - amount;
                        tableRow["Total_Price"] = amount;


                        //tableRow["Type"] = "NonVAT";

                        //string vatRate = row["VAT_Rate"].ToString().Trim();
                        //string vatRate = vm.VATRate.ToString().Trim();

                        //if (vm.VATRate == 15)
                        //{
                        //    tableRow["Type"] = "VAT";
                        //}

                        //if (vm.VATRate == 0)
                        //{
                        //    tableRow["Type"] = "NonVAT";
                        //}

                        //if (vm.VATRate != 15 && vm.VATRate != 0)
                        //{
                        //    tableRow["Type"] = "OtherRate";
                        //}


                        //if (string.IsNullOrEmpty(tableRow["Type"].ToString()))
                        //{
                        //    tableRow["Type"] = "NonVAT";
                        //}

                    }

                    //decimal vatRate = Convert.ToDecimal(tableRow["VAT_Rate"]);
                    //tableRow["UOM"] = vm.UOM;
                    //decimal sdAmount = (Convert.ToDecimal(tableRow["Total_Price"]) * vm.SD) / 100;

                    //tableRow["SD_Amount"] = sdAmount;

                    //tableRow["VAT_Amount"] = (sdAmount + Convert.ToDecimal(tableRow["Total_Price"])) * vatRate / 100;

                    //DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                    //    Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                    //tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                    //    ? "0"
                    //    : dt.Rows[0]["NBRPrice"].ToString();

                    //tableRow["Type"] = "NonRebate";  sadat 20231211 - Suggested by COO Sir
                    tableRow["Type"] = "Exempted";


                }

                //table.Columns.Remove("VAT_Rate");
                table.Columns.Remove("VATType");
                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                if (transaction != null) { transaction.Rollback(); }
                FileLogger.Log("ImportDAL", "GetPurchaseJAPFADbData_Web", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public string[] UpdateJAPFaPurchaseTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion


                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", connVM);


                #region Sql Command

                int len = table.Rows.Count;


                sqlText += @" UPDATE TallyToVAT.dbo.grn_inv SET 
  IsProcessed = 'Y'
, InvoiceNo=pih.PurchaseInvoiceNo   
FROM TallyToVAT.dbo.grn_inv  p
INNER JOIN PurchaseInvoiceHeaders pih on p.vchno=pih.ImportIDExcel 
WHERE 1=1

and p.vchno in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                //sqlText += " and companyCode = '" + code + "'";


                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "UpdateJAPFaPurchaseTransactions", ex.ToString());
                throw ex;

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public DataTable GetSource_PurchaseDataALL_Master_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            string sqlText2 = "";
            DataTable dtPurchasemaster = new DataTable();
            DataTable dtPurchase = new DataTable();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region select GRNinv from middleware
                #region SQLText
                string TableName = "TallyToVAT.dbo.grn_inv";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_Sales";
                //}

                sqlText = @"
SELECT
       0		    Selected
      ,[masterid]
      ,[alterid]
      ,[vchno]
      ,[date]
      ,[vchtype]
      ,[partyorderno]
      ,[partyorderdate]
      ,[partycode]
      ,[partyname]
      ,[termsofpayment]
      ,[otherref]
      ,[vattype]
      ,[tdstype]
      ,[code]
      ,[productname]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[disc]
      ,[amount]
      ,[trackno]
      ,[godown]
      ,[orderno]
      ,[dueon]
      ,[isopt]																	    

FROM " + TableName + @"

WHERE 1=1

--and grn_inv.vchno not in (select REFNO from TallyToVAT.dbo.VAT_PURCHASE_COMPLETED)



----------------------------------------!Care on GROUP BY---------------------------------------- 
";



                #region Filtering

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    if (paramVM.SearchField == "vchno")
                    {
                        sqlText = sqlText + @" AND grn_inv.vchno = @PurchaseInvoiceNo";

                    }
                }
                else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    sqlText += @" and grn_inv.vchno	 in (";
                    foreach (string id in paramVM.IDs)
                    {
                        sqlText += "'" + id + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate ";
                    sqlText = sqlText + @" AND (cast(grn_inv.date as datetime)) >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText = sqlText + @" AND (cast(grn_inv.date as datetime)) <= @toDate";
                }

                #endregion

                //sqlText += " ORDER BY Invoice_Date_Time";

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Add Parameter Values

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@PurchaseInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }



                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtPurchasemaster);

                #endregion

                #region Selected Data

                if (dtPurchasemaster != null && dtPurchasemaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtPurchasemaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtPurchasemaster.Select("vchno	  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtPurchasemaster = new DataTable();
                        dtPurchasemaster = rows.CopyToDataTable();

                    }

                }

                #endregion
                #endregion

                #region select Grn_ACC form middleware

                #region SQLText
                string TableNameGrnAcc = "TallyToVAT.dbo.grn_acc";

                //CommonDAL commonDAL = new CommonDAL();

                //string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_Sales";
                //}

                sqlText2 = @"
SELECT
       0		    Selected
      ,[masterid]
      ,[alterid]
      ,[vchno]
      ,[date]
      ,[vchtype]
      ,[vattype]
      ,[tdstype]
      ,[challanno]
      ,[challandate]
      ,[partycode]
      ,[partyname]
      ,[partycountry]
      ,[ledgername]
      ,[amount]
      ,[vatpercent]
      ,[vatamount]
      ,[tdspercent]
      ,[tdsamount]																    

FROM " + TableNameGrnAcc + @"

WHERE 1=1

--and grn_inv.vchno not in (select REFNO from TallyToVAT.dbo.VAT_PURCHASE_COMPLETED)



----------------------------------------!Care on GROUP BY---------------------------------------- 
";



                #region Filtering

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    if (paramVM.SearchField == "vchno")
                    {
                        sqlText2 = sqlText2 + @" AND grn_acc.vchno = @PurchaseInvoiceNo";

                    }
                }
                else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    sqlText2 += @" and grn_acc.vchno	 in (";
                    foreach (string id in paramVM.IDs)
                    {
                        sqlText2 += "'" + id + "',";
                    }

                    sqlText2 = sqlText2.TrimEnd(',') + ")";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate ";
                    sqlText2 = sqlText2 + @" AND (cast(grn_acc.date as datetime)) >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    ////sqlText = sqlText + @" AND Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                    sqlText2 = sqlText2 + @" AND (cast(grn_acc.date as datetime)) <= @toDate";
                }

                #endregion

                //sqlText += " ORDER BY Invoice_Date_Time";

                #endregion

                #region SQLExecution

                SqlCommand cmd2 = new SqlCommand(sqlText2, currConn);

                #region Add Parameter Values

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd2.Parameters.AddWithValue("@PurchaseInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd2.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd2.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }



                #endregion

                SqlDataAdapter adapter2 = new SqlDataAdapter(cmd2);

                adapter2.Fill(dtPurchase);

                #endregion

                #region Selected Data

                if (dtPurchase != null && dtPurchase.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp2 = new DataTable();
                    dtTemp2 = dtPurchase.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtPurchase.Select("vchno	  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtPurchase = new DataTable();
                        dtPurchase = rows.CopyToDataTable();

                    }

                }


                #endregion

                #endregion

                #region  grn_inv bulkinsert and filter data

                CommonDAL commonDal = new CommonDAL();
                string sqlTexttemp = "";
                sqlTexttemp = @"delete from TempPur_grn_inv";

                SqlCommand cmdtemp = new SqlCommand(sqlTexttemp, currConn, transaction);

                cmdtemp.ExecuteNonQuery();
                dtPurchasemaster.Columns.Remove("Selected");
                var result = commonDal.BulkInsert("TempPur_grn_inv", dtPurchasemaster, currConn, transaction, 0, null, null);

                #region DeleteExitdata

                string DeleteExitdata = @"
----------- delete exit data --------------
delete TempPur_grn_inv from PurchaseInvoiceHeaders where TempPur_grn_inv.vchno =PurchaseInvoiceHeaders.ImportIDExcel

";

                #endregion

                cmd.CommandText = DeleteExitdata;
                cmd.ExecuteNonQuery();
                #endregion

                #region  grn_Acc bulkinsert and filter data

                //CommonDAL commonDal = new CommonDAL();
                string sqlTexttemp2 = "";
                sqlTexttemp2 = @"delete from TempPur_grn_acc";

                SqlCommand cmdtemp2 = new SqlCommand(sqlTexttemp2, currConn, transaction);

                cmdtemp2.ExecuteNonQuery();
                dtPurchase.Columns.Remove("Selected");
                result = commonDal.BulkInsert("TempPur_grn_acc", dtPurchase, currConn, transaction, 0, null, null);

                #region DeleteExitdata

                string DeleteExitdata2 = @"
----------- delete exit data --------------
delete TempPur_grn_acc from PurchaseInvoiceHeaders where TempPur_grn_acc.vchno =PurchaseInvoiceHeaders.ImportIDExcel

";

                #endregion

                cmd2.CommandText = DeleteExitdata2;
                cmd2.ExecuteNonQuery();
                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_PurchaseDataALL_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtPurchasemaster;

        }

        #endregion

        #region Sale

        public DataTable GetSource_SaleData_Master_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtSalesMaster = new DataTable();
            DataTable dtSale = new DataTable();


            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {
                #region Middleware data get and Process

                dtSale = GetSource_SaleData_ALL_JAPFA(paramVM);

                #endregion

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                sqlText = @"
SELECT
0							                                                        Selected
,vchno																	     		InvoiceNo
,vchno                                                                              ReferenceNo
,godown																	            BranchCode
,partyname																	        CustomerName
,partycode																	        CustomerCode
,cast(date as varchar(20)) 										                    InvoiceDateTime
,destination																        DeliveryAddress
, despdocno 																		VehicleNo
, despthru 																	    	VehicleType
,SUM(amount)														     			TotalValue
,SUM(qty)														    				TotalQuantity
,0													                                TotalVATAmount

FROM TempSale_del_note_inv

WHERE 1=1

--and vchno not in (select REFNO from TallyToVAT.dbo.VAT_SALES_COMPLETED)

----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                #region Filtering

                if (paramVM.TransactionType == "Other")
                {

                    sqlText += " and (partycountry = 'Bangladesh') and qty > 0 ";
                    //if (code.ToUpper() == "MOTORSSERVICE")
                    //{
                    //    sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue' or TransactionType is null) and Quantity > 0 ";
                    //}
                    //else
                    //{
                    //    sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and Quantity > 0 ";
                    //}
                }
                else if (paramVM.TransactionType == "Export")
                {
                    sqlText += " and partycountry != 'Bangladesh'  and qty > 0 ";

                }
                else if (paramVM.TransactionType.ToLower() == "credit")
                {
                    sqlText += " and Quantity < 0 ";

                }
                else
                {
                    sqlText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                }

                #region Comments

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                //}

                #endregion

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText = sqlText + @" AND vchno = @SalesInvoiceNo";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText = sqlText + @" AND date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText = sqlText + @" AND date < dateadd(d,1,@toDate)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @" AND godown in (";

                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
 vchno
,godown
,partyname
,partycode
,date
,destination
,despdocno
,despthru

";

                #endregion

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.CommandTimeout = 500;

                #region Add Parameter Values

                #region Comments

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                //}

                #endregion

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtSalesMaster);

                #endregion

                #region Selected Data

                if (dtSalesMaster != null && dtSalesMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtSalesMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtSalesMaster.Select("InvoiceNo  IN ('" + IDs + "')");

                    if (rows.Count() == 0)
                    {
                        rows = dtSalesMaster.Select("InvoiceNo  IN ('" + IDs + "')");
                    }

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtSalesMaster = new DataTable();
                        dtSalesMaster = rows.CopyToDataTable();

                    }

                }

                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_SaleData_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtSalesMaster;

        }

        public DataTable GetSource_SaleData_Master_JAPFAX(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtSalesMaster = new DataTable();

            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                //string TableName = "ACIData.dbo.SaleInvoices";
                string TableName = "TallyToVAT.dbo.del_note_inv";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_Sales";
                //}

                sqlText = @"
SELECT
0							                                                        Selected
,vchno																	     		InvoiceNo
,vchno                                                                              ReferenceNo
,godown																	            BranchCode
,partyname																	        CustomerName
,partycode																	        CustomerCode
,cast(date as varchar(20)) 										                    InvoiceDateTime
,destination																        DeliveryAddress
, despdocno 																		VehicleNo
, despthru 																	    	VehicleType
,SUM(amount)														     			TotalValue
,SUM(qty)														    				TotalQuantity
,0													                                TotalVATAmount


FROM " + TableName + @" 

WHERE 1=1

and vchno not in (select REFNO from TallyToVAT.dbo.VAT_SALES_COMPLETED)


----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);



                #region Filtering

                if (paramVM.TransactionType == "Other")
                {

                    sqlText += " and (partycountry = 'Bangladesh') and qty > 0 ";
                    //if (code.ToUpper() == "MOTORSSERVICE")
                    //{
                    //    sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue' or TransactionType is null) and Quantity > 0 ";
                    //}
                    //else
                    //{
                    //    sqlText += " and (TransactionType = 'Local' or TransactionType = 'STIIssue') and Quantity > 0 ";
                    //}
                }
                else if (paramVM.TransactionType == "Export")
                {
                    sqlText += " and partycountry != 'Bangladesh'  and qty > 0 ";

                }
                else if (paramVM.TransactionType.ToLower() == "credit")
                {
                    sqlText += " and Quantity < 0 ";

                }
                else
                {
                    sqlText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                }


                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                //}


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {

                    //if (paramVM.SearchField == "vchno")
                    //{
                    sqlText = sqlText + @" AND vchno = @SalesInvoiceNo";

                    //sqlText = sqlText + @" AND (ID = @SalesInvoiceNo OR PreID = @SalesInvoiceNo)";

                    //}

                    //sqlText = sqlText + @" AND (ID = @SalesInvoiceNo OR PreID = @SalesInvoiceNo)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText = sqlText + @" AND date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText = sqlText + @" AND date < dateadd(d,1,@toDate)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @" AND godown in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }




                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
 vchno
,godown
,partyname
,partycode
,date
,destination
,despdocno
,despthru


";

                #endregion

                //sqlText += " ORDER BY ID,Invoice_Date_Time";


                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.CommandTimeout = 500;
                #region Add Parameter Values

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                //}


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtSalesMaster);

                #endregion


                #region Selected Data

                if (dtSalesMaster != null && dtSalesMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtSalesMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtSalesMaster.Select("InvoiceNo  IN ('" + IDs + "')");

                    if (rows.Count() == 0)
                    {
                        rows = dtSalesMaster.Select("InvoiceNo  IN ('" + IDs + "')");
                    }

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtSalesMaster = new DataTable();
                        dtSalesMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_SaleData_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtSalesMaster;

        }

        public DataTable GetJAPFASaleData_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"

SELECT [masterid]
      ,[alterid]
      ,[vchno]
      ,[date]
      ,[vchtype]
      ,[partycode]
      ,[partyname]
      ,[partycountry]
      ,[despdocno]
      ,[despthru]
      ,[destination]
      ,[ledcode]
      ,[led_name]
      ,[batchname]
      ,[trackno]
      ,[godown]
      ,[orderno]
      ,[dueon]
      ,[mfgon]
      ,[expon]
      ,[code]
      ,[productname]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[disc]
      ,[amount]
      ,[narration]
      ,[isopt]
  FROM del_note_inv where 1=1 
 
 "; //07/0007401

                //VendorDAL vendorDal = new VendorDAL();

                //if (string.IsNullOrEmpty(param.Processed))
                //{
                //    sqlText += " and IsProcessed = 'N'";
                //}
                //else if (param.Processed != "ALL")
                //{
                //    sqlText += " and IsProcessed = '" + param.Processed + "'";
                //}


                //if (param.TransactionType == "Other")
                //{
                //    sqlText += " and acc.partycountry = 'Bangladesh' ";
                //}
                //else if (param.TransactionType == "Import")
                //{
                //    sqlText += " and TransactionType != 'Bangladesh' ";
                //}
                //else if (param.TransactionType == "InputService")
                //{
                //    sqlText += " and TransactionType = 'InputService' ";

                //}

                if (!string.IsNullOrEmpty(paramVM.RefNo) || (paramVM.IDs != null && paramVM.IDs.Count > 0))
                {
                    if (paramVM.SearchField == "vchno")
                    {
                        sqlText += " and vchno = @rid";

                        sqlText = sqlText.Replace("@cmRef", "vchno");

                    }


                    else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                    {
                        sqlText += " and vchno in (";

                        foreach (string paramD in paramVM.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                        sqlText = sqlText.Replace("@cmRef", "");

                    }
                    else
                    {
                        sqlText += " and vchno = @rid";

                        sqlText = sqlText.Replace("@cmRef", "");
                    }
                }


                if (!string.IsNullOrEmpty(paramVM.FromDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate";
                }

                if (!string.IsNullOrEmpty(paramVM.ToDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                }

                //sqlText += "  and CompanyCode = @CompanyCode";

                // and BranchCode='" +
                //conInfo.Rows[0]["IntegrationCode"] + "'
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@rid", paramVM.RefNo);

                }

                if (!string.IsNullOrEmpty(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrEmpty(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }

                //string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                //cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                #region Comments

                //ProductDAL dal = new ProductDAL();

                //foreach (DataRow tableRow in table.Rows)
                //{
                //    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                //    ProductVM vm = vms.FirstOrDefault();

                //    if (vm == null)
                //    {
                //        continue;
                //    }
                //    decimal vatRate = Convert.ToDecimal(tableRow["VAT_Rate"]);
                //    tableRow["UOM"] = vm.UOM;
                //    decimal sdAmount = (Convert.ToDecimal(tableRow["Total_Price"]) * vm.SD) / 100;

                //    tableRow["SD_Amount"] = sdAmount;

                //    tableRow["VAT_Amount"] = (sdAmount + Convert.ToDecimal(tableRow["Total_Price"])) * vatRate / 100;

                //    //DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                //    //    Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                //    //tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                //    //    ? "0"
                //    //    : dt.Rows[0]["NBRPrice"].ToString();

                //}

                //table.Columns.Remove("VAT_Rate");

                #endregion

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetJAPFASaleData_Web", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

        }

        public DataTable GetJAPFASaleData(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            #endregion

            #region try

            try
            {
                #region open connection and transaction

                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);
                currConn = _dbsqlConnection.GetConnection(connVM);


                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region sqlText

                sqlText = @"
SELECT
vchno																			    ID
,'N'                                                                                Post
--,Branch_Code																	    Branch_Code
,partyname														                	Customer_Name
,partycode														                	Customer_Code
,destination																        Delivery_Address
,despdocno 																 			Vehicle_No
,despthru 																		    VehicleType
,format(date,'yyyy-MM-dd') + ' ' +   format(getDate(),'HH:mm:ss')  					Invoice_Date_Time
--,Invoice_Date_Time										                        Delivery_Date_Time
,vchno  																            Reference_No  
,'-'																		        Comments
,'New'																				Sale_Type
,'' 																				Previous_Invoice_No
,'N'																				Is_Print
,'0'																				Tender_Id
,''																		            LC_Number
,'BDT'														 			            Currency_Code
,code															                    Item_Code
,productname														                Item_Name
,UOM																			    UOM
,qty												                            	Quantity
,rate										                                        NBR_Price
,'0'															                 	VAT_Rate
,'0'																            	SD_Rate
--,(TotalPrice-Discount_Amount)														TotalValue
--,isnull(TotalPrice,0)														        TotalValue
,amount																	            SubTotal
,0 									                                                VAT_Amount
,'N'																				Non_Stock
,0																					Trading_MarkUp
,'NonVAT'															                        Type

,'VAT 4.3'																			VAT_Name
--, case when TransactionType = 'Local' then 'Other' else TransactionType end         TransactionType
--,PreviousInvoiceDateTime													        PreviousInvoiceDateTime
,'0'														                        PreviousNBRPrice
,'0'															                    PreviousQuantity
,''																                    PreviousUOM
,'0'										                                        PreviousSubTotal
,'0'																                PreviousSD
,'0'														                        PreviousSDAmount
,'0'															                    PreviousVATRate
,'0'					                                                            PreviousVATAmount
,''                                                                                 ReasonOfReturn



--FROM del_note_inv where 1=1 
FROM TempSale_del_note_inv where 1=1 
 --and vchno not in (select REFNO from TallyToVAT.dbo.VAT_SALES_COMPLETED)

 
 "; //07/0007401

                //VendorDAL vendorDal = new VendorDAL();

                //if (string.IsNullOrEmpty(paramVM.Processed))
                //{
                //    //sqlText += " and IsProcessed = 'N'";
                //    sqlText += " and ISNULL(IsProcessed,'N') = 'N'";
                //}
                //else if (paramVM.Processed != "ALL")
                //{
                //    //sqlText += " and IsProcessed = '" + paramVM.Processed + "'";
                //    sqlText += " and ISNULL(IsProcessed,'N') = '" + paramVM.Processed + "'";
                //}

                //if (param.TransactionType == "Other")
                //{
                //    sqlText += " and acc.partycountry = 'Bangladesh' ";
                //}
                //else if (param.TransactionType == "Import")
                //{
                //    sqlText += " and TransactionType != 'Bangladesh' ";
                //}
                //else if (param.TransactionType == "InputService")
                //{
                //    sqlText += " and TransactionType = 'InputService' ";

                //}

                if (!string.IsNullOrEmpty(paramVM.RefNo) || (paramVM.IDs != null && paramVM.IDs.Count > 0))
                {
                    if (paramVM.SearchField == "vchno")
                    {
                        sqlText += " and vchno = @rid";

                        sqlText = sqlText.Replace("@cmRef", "vchno");

                    }


                    else if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                    {
                        sqlText += " and vchno in (";

                        foreach (string paramD in paramVM.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                        sqlText = sqlText.Replace("@cmRef", "");

                    }
                    else
                    {
                        sqlText += " and vchno = @rid";

                        sqlText = sqlText.Replace("@cmRef", "");
                    }
                }


                if (!string.IsNullOrEmpty(paramVM.FromDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') >= @fromDate";
                }

                if (!string.IsNullOrEmpty(paramVM.ToDate))
                {
                    sqlText += " and Format(cast(Invoice_Date as datetime),'yyyy-MM-dd') <= @toDate";
                }

                //sqlText += "  and CompanyCode = @CompanyCode";

                // and BranchCode='" +
                //conInfo.Rows[0]["IntegrationCode"] + "'
                #endregion

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                #region Peram

                if (!string.IsNullOrEmpty(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@rid", paramVM.RefNo);

                }

                if (!string.IsNullOrEmpty(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrEmpty(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }

                //string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                //cmd.Parameters.AddWithValue("@CompanyCode", code);
                #endregion

                DataTable table = new DataTable();
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(table);

                #region Commit

                if (transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                #region Comments

                //ProductDAL dal = new ProductDAL();

                //foreach (DataRow tableRow in table.Rows)
                //{
                //    //List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() });

                //    //ProductVM vm = vms.FirstOrDefault();

                //    //if (vm == null)
                //    //{
                //    //    continue;
                //    //}
                //    //decimal vatRate = Convert.ToDecimal(tableRow["VAT_Rate"]);
                //    //tableRow["UOM"] = vm.UOM;
                //    //decimal sdAmount = (Convert.ToDecimal(tableRow["Total_Price"]) * vm.SD) / 100;

                //    //tableRow["SD_Amount"] = sdAmount;

                //    //tableRow["VAT_Amount"] = (sdAmount + Convert.ToDecimal(tableRow["Total_Price"])) * vatRate / 100;

                //    //DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                //    //    Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                //    //tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                //    //    ? "0"
                //    //    : dt.Rows[0]["NBRPrice"].ToString();

                //    string Invoice_Date_Time = tableRow["Invoice_Date_Time"].ToString();

                //    tableRow["Invoice_Date_Time"] = Invoice_Date_Time + " "+ DateTime.Now.ToString("HH:mm:ss");

                //}

                //table.Columns.Remove("VAT_Rate");

                #endregion

                return table;

            }

            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetJAPFASaleData_Web", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM SaveJAPFaSale_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            DataTable dtSale = new DataTable();
            SaleDAL salesDal = new SaleDAL();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            CommonDAL commonDal = new CommonDAL();

            #region try

            try
            {
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode });
                paramVM.dtConnectionInfo = dtBranchInfo;

                string code = commonDal.settingValue("CompanyCode", "Code", paramVM.SysDbInfoVmTemp);

                dtSale = GetJAPFASaleData(paramVM);

                if (dtSale == null || dtSale.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                //dtSale.Columns.Remove("TransactionType");
                sqlResults = new SaleDAL().SaveSaleJAPFA(dtSale, paramVM.DefaultBranchId, paramVM.TransactionType, paramVM.Token, paramVM.SysDbInfoVmTemp, paramVM);

                #region Comments

                //if (sqlResults[0].ToLower() == "success")
                //{
                //    //string[] results = UpdateJAPFaSaleTransactions(dtSale, dtBranchInfo, connVM);
                //    rVM.Message = "Saved Successfully";

                //}
                //else
                //{
                //    rVM.Message = sqlResults[1];

                //}

                // if (sqlResults[0].ToLower() == "success")
                // {

                //  try
                //  {
                //      currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                //      if (currConn.State != ConnectionState.Open)
                //      {
                //          currConn.Open();
                //      }

                //      transaction = currConn.BeginTransaction();


                //      var completedData = dtSale.DefaultView.ToTable(true, "ID");

                //      completedData.Columns.Add(new DataColumn() { ColumnName = "BranchCode", DefaultValue = paramVM.BranchCode });
                //      completedData.Columns.Add(new DataColumn() { ColumnName = "CompanyCode", DefaultValue = paramVM.CompanyCode });
                //      completedData.Columns["ID"].ColumnName = "REFNO";

                //      //REFNO

                //      //CommonDAL commonDal = new CommonDAL();

                //      commonDal.BulkInsert("VAT_SALES_COMPLETED", completedData, currConn, transaction);


                //      transaction.Commit();


                //  }
                //  catch (Exception e)
                //  {
                //      if (transaction != null) { transaction.Rollback(); }
                //      FileLogger.Log("ImportDAL", "Get Sale", e.ToString());

                //  }
                //  finally
                //  {

                //      if (currConn != null)
                //      {
                //          if (currConn.State == ConnectionState.Open)
                //          {
                //              currConn.Close();
                //          }

                //      }
                //  }

                //}

                #endregion

                rVM.Status = sqlResults[0];
                rVM.Message = sqlResults[1];
                rVM.Message = "Saved Successfully";

            }
            #endregion

            #region catch

            catch (Exception ex)
            {

                if (paramVM.IsMultiple == true && !string.IsNullOrEmpty(paramVM.CustomerCode))
                {
                    string[] results = ReUpdateACIMaster(paramVM, "SaleInvoices");
                }
                FileLogger.Log("ImportDAL", "SaveACISale_Web", ex.ToString());

                rVM.Message = ex.Message + ex.StackTrace;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public DataTable GetSource_SaleData_ALL_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtSalesMaster = new DataTable();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                //string TableName = "ACIData.dbo.SaleInvoices";
                string TableName = "TallyToVAT.dbo.del_note_inv";

                CommonDAL commonDAL = new CommonDAL();

                string code = commonDAL.settingValue("CompanyCode", "Code", connVM);

                sqlText = @"
SELECT    
       0    Selected
      ,[masterid]
      ,[alterid]
      ,[vchno] 
      ,[date]
      ,[vchtype]
      ,[partycode]
      ,[partyname]
      ,[partycountry]
      ,[despdocno]
      ,[despthru]
      ,[destination]
      ,[ledcode]
      ,[led_name]
      ,[batchname]
      ,[trackno]
      ,[godown]
      ,[orderno]
      ,[dueon]
      ,[mfgon]
      ,[expon]
      ,[code]
      ,[productname]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[disc]
      ,[amount]
      ,[narration]
      ,[isopt]

FROM " + TableName + @" 

WHERE 1=1

--and vchno not in (select vchno from del_note_inv)
--and vchno not in (select REFNO from TallyToVAT.dbo.VAT_SALES_COMPLETED)

----------------------------------------!Care on GROUP BY---------------------------------------- 
";
                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                      paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);

                #region Filtering

                if (paramVM.TransactionType == "Other")
                {
                    sqlText += " and (partycountry = 'Bangladesh') and qty > 0 ";
                }
                else if (paramVM.TransactionType == "Export")
                {
                    sqlText += " and partycountry != 'Bangladesh'  and qty > 0 ";
                }
                else if (paramVM.TransactionType.ToLower() == "credit")
                {
                    sqlText += " and Quantity < 0 ";
                }
                else
                {
                    sqlText += " and TransactionType = '" + paramVM.TransactionType + "' ";
                }

                #region Comments

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    sqlText = sqlText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                //}

                #endregion

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText = sqlText + @" AND vchno = @SalesInvoiceNo";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText = sqlText + @" AND date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText = sqlText + @" AND date < dateadd(d,1,@toDate)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    sqlText = sqlText + @" AND godown in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                #endregion

                #region Group By

                //                sqlText += @"
                //
                //----------------------------------------GROUP BY---------------------------------------- 
                //GROUP BY 
                // vchno
                //,godown
                //,partyname
                //,partycode
                //,date
                //,destination
                //,despdocno
                //,despthru
                //
                //
                //";

                #endregion

                #endregion

                #region SQLExecution

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.CommandTimeout = 500;

                #region Add Parameter Values

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@SalesInvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }

                #endregion

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtSalesMaster);

                #endregion

                #region Selected Data

                if (dtSalesMaster != null && dtSalesMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtSalesMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    //DataRow[] rows = dtSalesMaster.Select("InvoiceNo  IN ('" + IDs + "')");vchno
                    DataRow[] rows = dtSalesMaster.Select("vchno  IN ('" + IDs + "')");

                    if (rows.Count() == 0)
                    {
                        rows = dtSalesMaster.Select("vchno  IN ('" + IDs + "')");
                    }

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtSalesMaster = new DataTable();
                        dtSalesMaster = rows.CopyToDataTable();

                    }

                }

                CommonDAL commonDal = new CommonDAL();
                string sqlTexttemp = "";
                sqlTexttemp = @"delete from TempSale_del_note_inv";

                SqlCommand cmdtemp = new SqlCommand(sqlTexttemp, currConn, transaction);

                cmdtemp.ExecuteNonQuery();
                dtSalesMaster.Columns.Remove("Selected");
                var result = commonDal.BulkInsert("TempSale_del_note_inv", dtSalesMaster, currConn, transaction, 0, null, null);

                #region DeleteExitdata

                string DeleteExitdata = @"
----------- delete exit data --------------
delete TempSale_del_note_inv from SalesInvoiceHeaders where TempSale_del_note_inv.vchno =SalesInvoiceHeaders.ImportIDExcel

";

                #endregion

                cmd.CommandText = DeleteExitdata;
                cmd.ExecuteNonQuery();

                #endregion

            }

            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_SaleData_ALL_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtSalesMaster;

        }

        public string[] UpdateJAPFaSaleTransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                CommonDAL commonDal = new CommonDAL();
                string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                #region Sql Command

                int len = table.Rows.Count;

                sqlText += @" UPDATE TallyToVAT.dbo.del_note_inv SET 
  IsProcessed = 'Y'
, InvoiceNo=sih.SalesInvoiceNo   
FROM TallyToVAT.dbo.del_note_inv  p
INNER JOIN SalesInvoiceHeaders sih on p.vchno=sih.ImportIDExcel 
WHERE 1=1

and p.vchno in ( ";

                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                //sqlText += " and companyCode = '" + code + "'";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }

            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }

                FileLogger.Log("ImportDAL", "UpdateJAPFaSaleTransactions", ex.ToString());
                throw ex;

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        #endregion

        #region Issue

        public DataTable GetIssueJAPFADbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            DataTable tableissue = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {

                    #region Middleware data get and Process

                    tableissue = GetIssueJAPFADb_AllDataWeb(param);

                    #endregion

                    #region open connection and transaction

                    //currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);
                    currConn = _dbsqlConnection.GetConnection(connVM);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"

SELECT 
   
	  [vchno]                          vchno
	  ,0 Selected    
      ,date                         Issue_DateTime
	  ,Sum (qty)                      Quantity 

  FROM TempIssue_stockjournal_out  where  1=1 
 --and vchno not in (select REFNO from TallyToVAT.dbo.VAT_Issue_COMPLETED)
 "; //07/0007401
                    //IsProcessed = 'N'  ,[IsProcessed] Added by JUBAYER

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;
                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    #region Comments

                    //Starting JUBAYER


                    //if (string.IsNullOrEmpty(param.Processed))
                    //{
                    //    sqlText += " and IsProcessed = 'N'";

                    //}
                    //else if (param.Processed != "ALL")
                    //{
                    //    sqlText += " and IsProcessed = '" + param.Processed + "'";

                    //}

                    #endregion

                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += @" and vchno in (";
                        foreach (string id in param.IDs)
                        {
                            sqlText += "'" + id + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }

                    #region Comments

                    /**       
                       if (param.Processed == "Y" || param.Processed == "N")
                       {
                           sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                       }
                       if (param.PostStatus == "Y" || param.PostStatus == "N")
                       {
                           sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                       }
                            */

                    #endregion

                    if (param.TransactionType == "Other")
                    {
                        ////sqlText += " and vchtype in( 'Stock Journal(Intake RM)','Stock Journal(Usaged)')";
                        sqlText += " and vchtype in( 'Stock Journal(Intake RM)(JBD/PLT/DOC/31)','Stock Journal(Usaged)(JBD/PLT/DOC/31)')";
                    }

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and vchno = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and date >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and date <= @toDate";
                    }

                    if (!string.IsNullOrWhiteSpace(param.BranchCode))
                    {
                        //sqlText = sqlText + @" AND pur.BranchCode in (";
                        sqlText = sqlText + @" AND godown in (";

                        foreach (DataRow dataRow in branchMap.Rows)
                        {
                            sqlText += "'" + dataRow["IntegrationCode"] + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";
                    }

                    #region Comments

                    //sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    //foreach (DataRow dataRow in branchMap.Rows)
                    //{
                    //    sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //}

                    //sqlText = sqlText.TrimEnd(',') + ")";

                    #endregion

                    #endregion

                    #region Group By

                    sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
  GROUP BY 
      vchno 
      ,date

";

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit

                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit

                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetIssueJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetIssueJAPFADbDataWebXX(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"

SELECT 
   
	  [vchno]                          vchno
	  ,0 Selected    
      ,date                         Issue_DateTime
	  ,Sum (qty)                      Quantity 


  FROM stockjournal_out  where  1=1 
 and vchno not in (select REFNO from TallyToVAT.dbo.VAT_Issue_COMPLETED)
 "; //07/0007401
                    //IsProcessed = 'N'  ,[IsProcessed] Added by JUBAYER

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;
                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    //Starting JUBAYER

                    //if (string.IsNullOrEmpty(param.Processed))
                    //{
                    //    sqlText += " and IsProcessed = 'N'";

                    //}
                    //else if (param.Processed != "ALL")
                    //{
                    //    sqlText += " and IsProcessed = '" + param.Processed + "'";

                    //}


                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += @" and vchno in (";
                        foreach (string id in param.IDs)
                        {
                            sqlText += "'" + id + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }

                    /**       
                       if (param.Processed == "Y" || param.Processed == "N")
                       {
                           sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                       }
                       if (param.PostStatus == "Y" || param.PostStatus == "N")
                       {
                           sqlText = sqlText + @" AND ISNULL(Post,'N')=@PostStatus";
                       }
                            */

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and vchtype in( 'Stock Journal(Intake RM)(JBD/PLT/DOC/31)','Stock Journal(Usaged)(JBD/PLT/DOC/31)')";
                    }
                    //else if (param.TransactionType == "IssueReturn")
                    //{
                    //    sqlText += " and TransactionType = 'IssueReturn' ";

                    //}

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and vchno = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and date >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and date <= @toDate";
                    }

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                    //}

                    if (!string.IsNullOrWhiteSpace(param.BranchCode))
                    {
                        //sqlText = sqlText + @" AND pur.BranchCode in (";
                        sqlText = sqlText + @" AND godown in (";


                        foreach (DataRow dataRow in branchMap.Rows)
                        {
                            sqlText += "'" + dataRow["IntegrationCode"] + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";
                    }

                    //sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    //foreach (DataRow dataRow in branchMap.Rows)
                    //{
                    //    sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //}

                    //sqlText = sqlText.TrimEnd(',') + ")";

                    #endregion

                    #region Group By

                    sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
  GROUP BY 
      vchno 
      ,date

";

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }
                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    cmd.Parameters.AddWithValue("@Processed", param.Processed);
                    //}
                    //cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetIssueJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetIssue_DetailJAPFADbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    //currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);
                    currConn = _dbsqlConnection.GetConnection(connVM);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"

 SELECT 
       vchno                        ID
      --,'001'                        BranchCode
      ,cast( date as varchar(200))  Issue_DateTime
      ,code                         Item_Code
      ,productname                  Item_Name
      ,qty                          Quantity
	  ,vchno                        Reference_No
	  ,'N'                          Post
	  ,''[Comments]

 FROM TempIssue_stockjournal_out where 1=1  

 --and vchno not in (select REFNO from TallyToVAT.dbo.VAT_Issue_COMPLETED)
 ";

                    //if (string.IsNullOrEmpty(param.Processed))
                    //{
                    //    sqlText += " and IsProcessed = 'N'";
                    //}
                    //else if (param.Processed != "ALL")
                    //{
                    //    sqlText += " and IsProcessed = '" + param.Processed + "'";
                    //}

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;

                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and vchno in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and vchtype in( 'Stock Journal(Intake RM)(JBD/PLT/DOC/31)','Stock Journal(Usaged)(JBD/PLT/DOC/31)')";
                    }
                    //else if (param.TransactionType == "IssueReturn")
                    //{
                    //    sqlText += " and TransactionType = 'IssueReturn' ";

                    //}

                    if (!string.IsNullOrWhiteSpace(param.BranchCode))
                    {
                        //sqlText = sqlText + @" AND pur.BranchCode in (";
                        sqlText = sqlText + @" AND godown in (";


                        foreach (DataRow dataRow in branchMap.Rows)
                        {
                            sqlText += "'" + dataRow["IntegrationCode"] + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";
                    }
                    //sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    //foreach (DataRow dataRow in branchMap.Rows)
                    //{
                    //    sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //}

                    //sqlText = sqlText.TrimEnd(',') + ")";

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram


                    //cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                ProductDAL dal = new ProductDAL();

                if (!table.Columns.Contains("UOM"))
                {
                    var columnName = new DataColumn("UOM") { DefaultValue = "Pcs" };
                    table.Columns.Add(columnName);
                }

                if (!table.Columns.Contains("BranchCode"))
                {

                    var columnName = new DataColumn("BranchCode") { DefaultValue = param.dtConnectionInfo.Rows[0]["BranchCode"] };
                    table.Columns.Add(columnName);
                }

                foreach (DataRow tableRow in table.Rows)
                {
                    string item_Code = tableRow["Item_Code"].ToString();
                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() }, null, null, null, connVM);

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                    {
                        continue;
                        //throw new Exception("Product Code not found in system " +item_Code);
                    }

                    tableRow["UOM"] = vm.UOM;

                }
                //table.AcceptChanges();

                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[1] = ex.Message.ToString(); //catch ex
                //retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetIssue_DetailJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM SaveJAPFAIssue_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #region try

            try
            {

                DataTable dtIssue = new DataTable();
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode }, null, null, true, connVM);
                paramVM.dtConnectionInfo = dtBranchInfo;

                dtIssue = GetIssue_DetailJAPFADbDataWeb(paramVM, connVM);

                if (dtIssue == null || dtIssue.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }
                IntegrationParam param = new IntegrationParam
                {
                    Data = dtIssue,
                    callBack = () => { },
                    SetSteps = (s) => { },
                    DefaultBranchId = paramVM.DefaultBranchId,
                    TransactionType = paramVM.TransactionType,
                    CurrentUser = paramVM.CurrentUser,
                };
                IssueDAL IssueDal = new IssueDAL();

                sqlResults = IssueDal.SaveIssue_Split(param, connVM);

                //if (sqlResults[0].ToLower() == "success")
                //{

                //    string[] results = UpdateJAPFATransactions(dtIssue, dtBranchInfo, null, "stockjournal_out");

                //}

                //if (sqlResults[0].ToLower() == "success")
                //{

                //    try
                //    {
                //        currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                //        if (currConn.State != ConnectionState.Open)
                //        {
                //            currConn.Open();
                //        }

                //        transaction = currConn.BeginTransaction();


                //        var completedData = dtIssue.DefaultView.ToTable(true, "ID");

                //        completedData.Columns.Add(new DataColumn() { ColumnName = "BranchCode", DefaultValue = paramVM.BranchCode });
                //        completedData.Columns.Add(new DataColumn() { ColumnName = "CompanyCode", DefaultValue = paramVM.CompanyCode });
                //        completedData.Columns["ID"].ColumnName = "REFNO";

                //        //REFNO

                //        CommonDAL commonDal = new CommonDAL();

                //        commonDal.BulkInsert("VAT_ISSUE_COMPLETED", completedData, currConn, transaction);


                //        transaction.Commit();


                //    }
                //    catch (Exception e)
                //    {
                //        if (transaction != null) { transaction.Rollback(); }
                //        FileLogger.Log("ImportDAL", "Get Sale", e.ToString());

                //    }
                //    finally
                //    {

                //        if (currConn != null)
                //        {
                //            if (currConn.State == ConnectionState.Open)
                //            {
                //                currConn.Close();
                //            }

                //        }
                //    }

                //}

                //Ju rVM.Status = sqlResults[0];
                rVM.Status = "success";
                rVM.Message = "Saved Successfully";
                rVM.Status = sqlResults[0];
                rVM.Message = sqlResults[1];

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveJAPFAIssue_Web", ex.ToString());

                rVM.Message = ex.Message;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public string[] UpdateJAPFATransactions(DataTable table, DataTable db, SysDBInfoVMTemp connVM = null, string tableName = "TransferIssues")
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetDepoConnection(db);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion

                #region Sql Text

                string sqlText = @"";

                DataView dv = new DataView(table);

                table = dv.ToTable(true, "ID");
                #endregion

                #region Sql Command

                int len = table.Rows.Count;


                sqlText += " update " + tableName + " set IsProcessed = 'Y' where vchno in ( ";


                for (int i = 0; i < len; i++)
                {
                    sqlText += "'" + table.Rows[i]["ID"] + "',";
                }

                sqlText = sqlText.TrimEnd(',');

                sqlText += ")";

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);


                int rows = cmd.ExecuteNonQuery();
                #endregion

                transaction.Commit();

                retResults[0] = rows > 0 ? "success" : "fail";

                return retResults;
            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                ////throw new ArgumentNullException("", "SQL:" + "" + FieldDelimeter + ex.Message.ToString());

                FileLogger.Log("ImportDAL", "UpdateJAPFATransactions", ex.ToString());
                throw new ArgumentNullException("", ex.Message.ToString());

            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
        }

        public DataTable GetIssueJAPFADb_AllDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    //currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);
                    currConn = _dbsqlConnection.GetConnection(connVM);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    string TableName = "TallyToVAT.dbo.stockjournal_out";

                    sqlText = @"

SELECT 
   
	   [masterid]
      ,[alterid]
      ,[vchno]
      ,0 Selected    
      ,[date]
      ,[vchtype]
      ,[vchparent]
      ,[productgroup]
      ,[code]
      ,[productname]
      ,[godown]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[amount]
      ,[narration]
      ,[isopt]

  FROM " + TableName + @" 
  where  1=1 
-- and vchno not in (select REFNO from TallyToVAT.dbo.VAT_Issue_COMPLETED)
 "; //07/0007401

                    #region Comments

                    //IsProcessed = 'N'  ,[IsProcessed] Added by JUBAYER

                    //string dbName = "";

                    //dbName = DatabaseInfoVM.DatabaseName;
                    //string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                    //                      param.dtConnectionInfo.Rows[0]["BranchId"];

                    //SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    //DataTable branchMap = new DataTable();
                    //SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    //branchAdapter.Fill(branchMap);

                    #endregion

                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += @" and vchno in (";
                        foreach (string id in param.IDs)
                        {
                            sqlText += "'" + id + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and vchtype in( 'Stock Journal(Intake RM)(JBD/PLT/DOC/31)','Stock Journal(Usaged)(JBD/PLT/DOC/31)')";
                    }

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and vchno = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and date >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and date <= @toDate";
                    }

                    #region Comments

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    sqlText = sqlText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                    //}

                    //if (!string.IsNullOrWhiteSpace(param.BranchCode))
                    //{
                    //    //sqlText = sqlText + @" AND pur.BranchCode in (";
                    //    sqlText = sqlText + @" AND godown in (";


                    //    foreach (DataRow dataRow in branchMap.Rows)
                    //    {
                    //        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //    }

                    //    sqlText = sqlText.TrimEnd(',') + ")";
                    //}

                    //sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    //foreach (DataRow dataRow in branchMap.Rows)
                    //{
                    //    sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //}

                    //sqlText = sqlText.TrimEnd(',') + ")";

                    #endregion

                    #endregion

                    #region Group By

                    //                    sqlText += @"
                    //
                    //----------------------------------------GROUP BY---------------------------------------- 
                    //  GROUP BY 
                    //      vchno 
                    //      ,date
                    //
                    //";

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }
                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    cmd.Parameters.AddWithValue("@Processed", param.Processed);
                    //}
                    //cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    //CommonDAL commonDal = new CommonDAL();
                    string sqlTexttemp = "";
                    sqlTexttemp = @"delete from TempIssue_stockjournal_out";

                    SqlCommand cmdtemp = new SqlCommand(sqlTexttemp, currConn, transaction);

                    cmdtemp.ExecuteNonQuery();
                    table.Columns.Remove("Selected");
                    var result = commonDal.BulkInsert("TempIssue_stockjournal_out", table, currConn, transaction, 0, null, null);

                    #region DeleteExitdata

                    string DeleteExitdata = @"
----------- delete exit data --------------
delete TempIssue_stockjournal_out from IssueHeaders where TempIssue_stockjournal_out.vchno =IssueHeaders.SerialNo

";

                    #endregion

                    cmd.CommandText = DeleteExitdata;
                    cmd.ExecuteNonQuery();

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit

                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetIssueJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        #endregion

        #region Receive

        public DataTable GetReceiveJAPFADbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            DataTable tableReceive = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {

                    #region Middleware data get and Process

                    tableReceive = GetReceiveJAPFADb_ALLDataWeb(param);

                    #endregion

                    #region open connection and transaction

                    //currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);
                    currConn = _dbsqlConnection.GetConnection(connVM);


                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


SELECT 
   
	  [vchno]                          vchno
	  ,0 Selected    
      ,date                         Receive_DateTime
	  ,Sum (qty)                      Quantity 


  FROM TempReceive_stockjournal_in
  where  1=1 
 --and vchno not in (select REFNO from TallyToVAT.dbo.VAT_RECEIVE_COMPLETED)
 "; //07/0007401

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;
                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    //if (param.IDs != null && param.IDs.Count > 0)
                    //{
                    //    sqlText += @" and vchno in (";
                    //    foreach (string id in param.IDs)
                    //    {
                    //        sqlText += "'" + id + "',";
                    //    }

                    //    sqlText = sqlText.TrimEnd(',') + ")";

                    //}

                    if (param.TransactionType == "Other")
                    {
                        ////sqlText += " and vchtype = 'Manufacturing Journal' ";
                        sqlText += " and vchtype = 'Manufacturing Journal (JBD/PLT/DOC/28)' ";
                    }
                    //else if (param.TransactionType == "ReceiveReturn")
                    //{
                    //    sqlText += " and TransactionType = 'ReceiveReturn' ";

                    //}

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and vchno = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and date >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and date <= @toDate";
                    }

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    sqlText += " and ISNULL(IsProcessed,'N')=@Processed";
                    //}


                    if (!string.IsNullOrWhiteSpace(param.BranchCode))
                    {
                        //sqlText = sqlText + @" AND pur.BranchCode in (";
                        sqlText = sqlText + @" AND godown in (";


                        foreach (DataRow dataRow in branchMap.Rows)
                        {
                            sqlText += "'" + dataRow["IntegrationCode"] + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";
                    }

                    #endregion

                    #region Group By

                    sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
  GROUP BY 
      vchno 
      ,date

";

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    cmd.Parameters.AddWithValue("@Processed", param.Processed);
                    //}

                    //cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit

                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceiveJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetReceiveJAPFADbDataWebXX(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


SELECT 
   
	  [vchno]                          vchno
	  ,0 Selected    
      ,date                         Receive_DateTime
	  ,Sum (qty)                      Quantity 


  FROM stockjournal_in  where  1=1 
 and vchno not in (select REFNO from TallyToVAT.dbo.VAT_RECEIVE_COMPLETED)
 "; //07/0007401

                    string dbName = "";

                    dbName = DatabaseInfoVM.DatabaseName;
                    string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                                          param.dtConnectionInfo.Rows[0]["BranchId"];

                    SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    DataTable branchMap = new DataTable();
                    SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    branchAdapter.Fill(branchMap);

                    //if (param.IDs != null && param.IDs.Count > 0)
                    //{
                    //    sqlText += @" and vchno in (";
                    //    foreach (string id in param.IDs)
                    //    {
                    //        sqlText += "'" + id + "',";
                    //    }

                    //    sqlText = sqlText.TrimEnd(',') + ")";

                    //}

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and vchtype = 'Manufacturing Journal' ";
                    }
                    //else if (param.TransactionType == "ReceiveReturn")
                    //{
                    //    sqlText += " and TransactionType = 'ReceiveReturn' ";

                    //}

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and vchno = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and date >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and date <= @toDate";
                    }

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    sqlText += " and ISNULL(IsProcessed,'N')=@Processed";
                    //}


                    if (!string.IsNullOrWhiteSpace(param.BranchCode))
                    {
                        //sqlText = sqlText + @" AND pur.BranchCode in (";
                        sqlText = sqlText + @" AND godown in (";


                        foreach (DataRow dataRow in branchMap.Rows)
                        {
                            sqlText += "'" + dataRow["IntegrationCode"] + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";
                    }

                    #endregion

                    #region Group By

                    sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
  GROUP BY 
      vchno 
      ,date

";

                    #endregion


                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    cmd.Parameters.AddWithValue("@Processed", param.Processed);
                    //}

                    //cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }



                return table;


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceiveJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetReceive_DetailJAPFAData_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";

            DataTable dt = new DataTable();


            #endregion

            #region try

            try
            {

                CommonDAL commonDal = new CommonDAL();
                CompanyprofileDAL companyprofileDal = new CompanyprofileDAL();

                DataTable ReceiveDt = GetReceive_DetailJAPFADbDataWeb(paramVM, connVM);

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                transaction = currConn.BeginTransaction();

                #endregion open connection and transaction

                #region SQLText

                #region tempTable

                string tempTable = @"
create table #temp(
ID varchar(100)
,BranchCode varchar(100)      
,Receive_DateTime datetime
,Item_Code varchar(100)
,Item_Name varchar(100)
,Quantity decimal(25,9)
,UOM varchar(100)
,Reference_No varchar(100)
,Comments varchar(300)
,Post varchar(100)
,Return_Id varchar(100)
,With_Toll varchar(100)
,NBR_Price decimal(25,9)
,VAT_Name varchar(100)
,CustomerCode varchar(100)
)
";
                #endregion

                #region Update and Select Text

                string updateItemName = @"
update #temp set Item_Name = Products.ProductName from Products 
where Products.ProductCode = #temp.Item_Code 
";

                sqlText = @"
select * from #temp

drop table #temp
";

                #endregion

                #endregion

                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                cmd.ExecuteNonQuery();

                retResults = commonDal.BulkInsert("#temp", ReceiveDt, currConn, transaction);

                cmd.CommandText = updateItemName;
                cmd.ExecuteNonQuery();

                cmd.CommandText = sqlText;
                cmd.CommandTimeout = 500;
                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dt);

                return dt;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetReceive_DetailJAPFAData_Web", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public DataTable GetReceive_DetailJAPFADbDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    //currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);
                    currConn = _dbsqlConnection.GetConnection(connVM);


                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    sqlText = @"


SELECT 
       vchno                        ID
      --,[BranchCode]
      ,cast( Date as varchar(200)) Receive_DateTime
      ,code                        Item_Code
      ,productname                 Item_Name
      ,qty                         Quantity
      , vchno                       Reference_No
      , ''                          Comments
      ,'N'                          [Post]
	  ,'' Return_Id
	  ,'N' With_Toll
	  ,'0' NBR_Price
	  ,'VAT 4.3' VAT_Name
      , 'N/A' CustomerCode
      ,'Pcs'                          UOM
  FROM TempReceive_stockjournal_in  where  1=1

 --and vchno not in (select REFNO from TallyToVAT.dbo.VAT_RECEIVE_COMPLETED)
 "; //07/0007401

                    string dbName = "";

                    #region Comments

                    //if (code == "ACI-1")
                    //{
                    //    dbName = "ACI2012_Demo_DB";
                    //}
                    //else if (code == "CEPL")
                    //{
                    //    dbName = "PPL2012_Demo_DB";

                    //}
                    //else if (code.ToLower() == "core cb")
                    //{
                    //    dbName = "ACIC2012_Demo_DB";

                    //}
                    //else
                    //{
                    //    dbName = DatabaseInfoVM.DatabaseName;
                    //}

                    //dbName = DatabaseInfoVM.DatabaseName;

                    //string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                    //                      param.dtConnectionInfo.Rows[0]["BranchId"];

                    //SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    //DataTable branchMap = new DataTable();
                    //SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    //branchAdapter.Fill(branchMap);

                    #endregion

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and vchtype = 'Manufacturing Journal (JBD/PLT/DOC/28)'";
                    }

                    #region Comments

                    //else if (param.TransactionType == "ReceiveReturn")
                    //{
                    //    sqlText += " and TransactionType = 'ReceiveReturn' ";

                    //}

                    #endregion

                    if (param.IDs != null && param.IDs.Count > 0)
                    {
                        sqlText += " and vchno in (";

                        foreach (string paramD in param.IDs)
                        {
                            sqlText += "'" + paramD + "',";
                        }

                        sqlText = sqlText.TrimEnd(',') + ")";

                    }

                    #region Comments

                    //sqlText += "  and CompanyCode = @CompanyCode and BranchCode in (";

                    //foreach (DataRow dataRow in branchMap.Rows)
                    //{
                    //    sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //}

                    //sqlText = sqlText.TrimEnd(',') + ")";

                    #endregion

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    //if (!string.IsNullOrEmpty(param.RefNo))
                    //{
                    //    cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    //}

                    //if (!string.IsNullOrEmpty(param.FromDate))
                    //{
                    //    cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    //}

                    //if (!string.IsNullOrEmpty(param.ToDate))
                    //{
                    //    cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    //}

                    //cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit
                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                ProductDAL dal = new ProductDAL();

                //table.Columns["Receive_DateTime"].ReadOnly = false;

                if (!table.Columns.Contains("BranchCode"))
                {

                    var columnName = new DataColumn("BranchCode") { DefaultValue = param.dtConnectionInfo.Rows[0]["BranchCode"] };
                    table.Columns.Add(columnName);
                }

                foreach (DataRow tableRow in table.Rows)
                {
                    string itemCode = tableRow["Item_Code"].ToString();

                    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { itemCode });

                    ProductVM vm = vms.FirstOrDefault();

                    if (vm == null)
                        continue;

                    tableRow["UOM"] = vm.UOM;

                    DataTable dt = dal.GetBOMReferenceNo(vm.ItemNo, "VAT 4.3",
                        Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd"), null, null, "", null);

                    //tableRow["Receive_DateTime"] =
                    //Convert.ToDateTime(tableRow["Receive_DateTime"]).ToString("yyyy-MMM-dd");

                    tableRow["NBR_Price"] = string.IsNullOrEmpty(dt.Rows[0]["NBRPrice"].ToString())
                        ? "0"
                        : dt.Rows[0]["NBRPrice"].ToString();


                }
                table.AcceptChanges();

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceive_DetailJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        public ResultVM SaveJAPFAReceive_Web(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            ResultVM rVM = new ResultVM();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #region try

            try
            {

                DataTable dtReceive = new DataTable();
                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode });
                paramVM.dtConnectionInfo = dtBranchInfo;

                dtReceive = GetReceive_DetailJAPFADbDataWeb(paramVM);

                if (dtReceive == null || dtReceive.Rows.Count == 0)
                {
                    rVM.Message = "Transactions Already Integrated or Not Exist in Source!";
                    return rVM;
                }
                IntegrationParam param = new IntegrationParam
                {
                    Data = dtReceive,
                    callBack = () => { },
                    SetSteps = (s) => { },
                    DefaultBranchId = paramVM.DefaultBranchId,
                    TransactionType = paramVM.TransactionType,
                    CurrentUser = paramVM.CurrentUser,
                };
                ReceiveDAL ReceiveDal = new ReceiveDAL();

                sqlResults = ReceiveDal.SaveReceive_Split(param);

                #region Comments

                //if (sqlResults[0].ToLower() == "success")
                //{


                //    string[] results = UpdateJAPFATransactions(dtReceive, dtBranchInfo, null, "stockjournal_in");

                //}

                //if (sqlResults[0].ToLower() == "success")
                //{

                //    try
                //    {
                //        currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                //        if (currConn.State != ConnectionState.Open)
                //        {
                //            currConn.Open();
                //        }

                //        transaction = currConn.BeginTransaction();


                //        var completedData = dtReceive.DefaultView.ToTable(true, "ID");

                //        completedData.Columns.Add(new DataColumn() { ColumnName = "BranchCode", DefaultValue = paramVM.BranchCode });
                //        completedData.Columns.Add(new DataColumn() { ColumnName = "CompanyCode", DefaultValue = paramVM.CompanyCode });
                //        completedData.Columns["ID"].ColumnName = "REFNO";

                //        //REFNO

                //        CommonDAL commonDal = new CommonDAL();

                //        commonDal.BulkInsert("VAT_RECEIVE_COMPLETED", completedData, currConn, transaction);


                //        transaction.Commit();


                //    }
                //    catch (Exception e)
                //    {
                //        if (transaction != null) { transaction.Rollback(); }
                //        FileLogger.Log("ImportDAL", "Get Receive", e.ToString());

                //    }
                //    finally
                //    {

                //        if (currConn != null)
                //        {
                //            if (currConn.State == ConnectionState.Open)
                //            {
                //                currConn.Close();
                //            }

                //        }
                //    }

                //}

                #endregion

                rVM.Status = sqlResults[0];
                rVM.Message = sqlResults[1];
                rVM.Message = "Saved Successfully";

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveACIReceive_Web", ex.ToString());

                rVM.Message = ex.Message;
            }
            #endregion

            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public DataTable GetReceiveJAPFADb_ALLDataWeb(IntegrationParam param, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";

            string insertSQLText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "Insert"; //Method Name
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            CommonDAL commonDal = new CommonDAL();
            DataTable table = new DataTable();
            string code = commonDal.settingValue("CompanyCode", "Code", connVM, currConn, transaction);

            #endregion

            #region try

            try
            {
                try
                {
                    #region open connection and transaction

                    //currConn = _dbsqlConnection.GetDepoConnection(param.dtConnectionInfo);
                    currConn = _dbsqlConnection.GetConnection(connVM);

                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }

                    transaction = currConn.BeginTransaction();

                    #endregion open connection and transaction

                    #region sqlText

                    string TableName = "TallyToVAT.dbo.stockjournal_in";

                    sqlText = @"

SELECT 
   
	  [masterid]
      ,[alterid]
      ,[vchno]
      ,0 Selected    
      ,[date]
      ,[vchtype]
      ,[vchparent]
      ,[productgroup]
      ,[code]
      ,[productname]
      ,[godown]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[amount]
      ,[narration]
      ,[isopt]

  FROM " + TableName + @" 
  where  1=1 
 --and vchno not in (select REFNO from TallyToVAT.dbo.VAT_RECEIVE_COMPLETED)
 "; //07/0007401

                    #region Comments

                    //string dbName = "";

                    //dbName = DatabaseInfoVM.DatabaseName;
                    //string getBranchMap = @"select * from " + dbName + ".dbo.BranchMapDetails where BranchId =" +
                    //                      param.dtConnectionInfo.Rows[0]["BranchId"];

                    //SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn, transaction);
                    //DataTable branchMap = new DataTable();
                    //SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                    //branchAdapter.Fill(branchMap);

                    //if (param.IDs != null && param.IDs.Count > 0)
                    //{
                    //    sqlText += @" and vchno in (";
                    //    foreach (string id in param.IDs)
                    //    {
                    //        sqlText += "'" + id + "',";
                    //    }

                    //    sqlText = sqlText.TrimEnd(',') + ")";

                    //}

                    #endregion

                    if (param.TransactionType == "Other")
                    {
                        sqlText += " and vchtype = 'Manufacturing Journal (JBD/PLT/DOC/28)' ";
                    }
                    //else if (param.TransactionType == "ReceiveReturn")
                    //{
                    //    sqlText += " and TransactionType = 'ReceiveReturn' ";

                    //}

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        sqlText += " and vchno = @rid";
                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        sqlText += " and date >= @fromDate";
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        sqlText += " and date <= @toDate";
                    }

                    #region Comments

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    sqlText += " and ISNULL(IsProcessed,'N')=@Processed";
                    //}

                    //if (!string.IsNullOrWhiteSpace(param.BranchCode))
                    //{
                    //    //sqlText = sqlText + @" AND pur.BranchCode in (";
                    //    sqlText = sqlText + @" AND godown in (";


                    //    foreach (DataRow dataRow in branchMap.Rows)
                    //    {
                    //        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    //    }

                    //    sqlText = sqlText.TrimEnd(',') + ")";
                    //}

                    #endregion

                    #endregion

                    #region Group By

                    //                    sqlText += @"
                    //
                    //----------------------------------------GROUP BY---------------------------------------- 
                    //  GROUP BY 
                    //      vchno 
                    //      ,date
                    //
                    //";

                    #endregion

                    SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                    #region Peram

                    if (!string.IsNullOrEmpty(param.RefNo))
                    {
                        cmd.Parameters.AddWithValue("@rid", param.RefNo);

                    }

                    if (!string.IsNullOrEmpty(param.FromDate))
                    {
                        cmd.Parameters.AddWithValue("@fromDate", param.FromDate);
                    }

                    if (!string.IsNullOrEmpty(param.ToDate))
                    {
                        cmd.Parameters.AddWithValue("@toDate", param.ToDate);
                    }

                    //if (param.Processed == "Y" || param.Processed == "N")
                    //{
                    //    cmd.Parameters.AddWithValue("@Processed", param.Processed);
                    //}

                    //cmd.Parameters.AddWithValue("@CompanyCode", code);
                    #endregion

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(table);

                    //CommonDAL commonDal = new CommonDAL();
                    string sqlTexttemp = "";
                    sqlTexttemp = @"delete from TempReceive_stockjournal_in";

                    SqlCommand cmdtemp = new SqlCommand(sqlTexttemp, currConn, transaction);

                    cmdtemp.ExecuteNonQuery();
                    table.Columns.Remove("Selected");
                    var result = commonDal.BulkInsert("TempReceive_stockjournal_in", table, currConn, transaction, 0, null, null);

                    #region DeleteExitdata

                    string DeleteExitdata = @"
----------- delete exit data --------------
delete TempReceive_stockjournal_in from ReceiveHeaders where TempReceive_stockjournal_in.vchno =ReceiveHeaders.ReferenceNo
";

                    #endregion

                    cmd.CommandText = DeleteExitdata;
                    cmd.ExecuteNonQuery();

                    #region Commit


                    if (transaction != null)
                    {
                        transaction.Commit();
                    }

                    #endregion Commit

                }
                catch (Exception e)
                {
                    if (transaction != null) { transaction.Rollback(); }
                }

                return table;

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";//Success or Fail
                retResults[4] = ex.Message.ToString(); //catch ex
                FileLogger.Log("ImportDAL", "GetReceiveJAPFADbDataWeb", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion
        }

        #endregion

        #region Transfer

        public DataTable GetSource_TransferData_Master_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtTransferMaster = new DataTable();
            DataTable tableTransfer = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region Middleware data get and Process

                tableTransfer = GetSource_TransferALL_Data_Master_JAPFA(paramVM);


                #endregion

                string code = commonDal.settingValue("CompanyCode", "Code");

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                //string TableName = "ACIData.dbo.TransferIssues";
                //string TableName = "TallyToVAT.dbo.stockjournal_out";

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_TransferIssues";
                //}


                sqlText = @"

SELECT
0		                                                        Selected
,StOut.vchno												    InvoiceNo
,StOut.vchno												    ID
,'N'                                                            Post
,'N'                                                            IsPrint
,StOut.vchno                                                    ReferenceNo
,StOut.godown												    BranchCode
,stIn.godown									                TransferToBranchCode
,cast(StOut.date as varchar(20)) 				                TransactionDateTime
,isnull(stIn.vehicleno,'N/A')								    VehicleNo
,isnull(stIn.vehicletype,'N/A')								    VehicleType
,SUM(StOut.qty)											        TotalQuantity
,SUM(StOut.amount)											    TotalCostPrice
,COALESCE(NULLIF(StOut.narration,''),'NA')                             Vehicle


FROM  TempIssue_stockjournal_out StOut

left outer join TempReceive_stockjournal_in stIn on StOut.masterid=stIn.masterid and StOut.code = stin.code

WHERE 1=1 
--and StOut.vchno not in (select REFNO from TallyToVAT.dbo.VAT_TRANSFERS_COMPLETED)
and StOut.qty > 0 and  StOut.vchtype='Stock Journal(Transfer) JBD/PLT/DOC/22' 
--WHERE 1=1 and qty > 0 and  vchtype='Stock Journal(Transfer)'

----------------------------------------!Care on GROUP BY---------------------------------------- 
";

                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                    paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);


                #region Filtering

                string condtionText = "";

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    sqlText +=  @" AND ISNULL(StOut.IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    condtionText = condtionText + @" AND ISNULL(Post,'N')=@PostStatus";
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    condtionText = condtionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                //}
                if (paramVM.TransactionType == "62Out")
                {
                    sqlText += " and StOut.productgroup = 'Finished Goods' ";
                }
                //else if (paramVM.TransactionType == "Import")
                //{
                //    sqlText += " and acc.partycountry != 'Bangladesh'  and qty > 0 ";

                //}
                else
                {
                    sqlText += " and StOut.productgroup != 'Finished Goods' ";
                }



                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText += " AND StOut.vchno = @InvoiceNo";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText += " AND StOut.date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText += " AND StOut.date < dateadd(d,1,@toDate)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    //sqlText = sqlText + @" AND pur.BranchCode in (";
                    sqlText = sqlText + @" AND StOut.godown in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                //string code = commonDal.settingValue("CompanyCode", "Code");

                //////if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "AT")
                //////{

                //////    code = "Core CB";

                //////}

                //condtionText += " and companyCode = '" + code + "' ";


                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    sqlText = sqlText + @" AND BranchCode=@BranchCode";
                //}

                //updateIntegrationTable = updateIntegrationTable.Replace("@condition", condtionText);

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
StOut.vchno
,StOut.godown
,StOut.date
,stIn.godown
,StOut.narration
,stIn.vehicleno
,stIn.vehicletype	
";

                #endregion

                //sqlText += " ORDER BY TransactionDateTime";

                #endregion

                #region SQLExecution

                //SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn);
                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Parameter Value

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                //}

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                //cmd.ExecuteNonQuery();

                //condtionText += "  and BranchFromVAT = '" +
                //                paramVM.BranchCode + "'";


                //sqlText = sqlText.Replace("@condition", condtionText);
                //cmd.CommandText = sqlText;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                #endregion

                foreach (DataRow tableRow in dtTransferMaster.Rows)
                {
                    string Branch_Code = tableRow["BranchCode"].ToString();
                    string Vehicle = tableRow["Vehicle"].ToString();

                    if (Branch_Code == "Main Location")
                    {
                        Branch_Code = "001";
                    }
                    else
                    {
                        Branch_Code = tableRow["BranchCode"].ToString();
                    }
                    //List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() }, null, null, null, connVM);

                    //ProductVM vm = vms.FirstOrDefault();

                    //if (vm == null)
                    //{
                    //    continue;
                    //    //throw new Exception("Product Code not found in system " +item_Code);
                    //}

                    //tableRow["UOM"] = vm.UOM;

                    tableRow["BranchCode"] = Branch_Code;
                    ////if (Vehicle != "NA" && Vehicle.Contains(","))
                    ////{
                    ////    tableRow["VehicleType"] = Vehicle.Split(',')[0];
                    ////    tableRow["VehicleNo"] = Vehicle.Split(',')[1];

                    ////}
                    ////else
                    ////{
                    ////    tableRow["VehicleType"] = "NA";
                    ////    tableRow["VehicleNo"] = "NA";

                    ////}


                    //dtTransferMaster.Columns.Remove("Vehicle");


                }
                dtTransferMaster.Columns.Remove("Vehicle");


                #region Selected Data

                if (dtTransferMaster != null && dtTransferMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtTransferMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtTransferMaster.Select("InvoiceNo  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtTransferMaster = new DataTable();
                        dtTransferMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_TransferData_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }

        public DataTable GetSource_TransferData_Master_JAPFAXX(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtTransferMaster = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {
                string code = commonDal.settingValue("CompanyCode", "Code");

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                //string TableName = "ACIData.dbo.TransferIssues";
                string TableName = "TallyToVAT.dbo.stockjournal_out";

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_TransferIssues";
                //}


                sqlText = @"

SELECT
0		                                                        Selected
,StOut.vchno												    InvoiceNo
,StOut.vchno												    ID
,'N'                                                            Post
,'N'                                                            IsPrint
,StOut.vchno                                                    ReferenceNo
,StOut.godown												    BranchCode
,stIn.godown									                TransferToBranchCode
,cast(StOut.date as varchar(20)) 				                TransactionDateTime
,'N/A' 											                VehicleNo
,'N/A' 											                VehicleType
,SUM(StOut.qty)											        TotalQuantity
,SUM(StOut.amount)											    TotalCostPrice
,COALESCE(NULLIF(StOut.narration,''),'NA')                             Vehicle


FROM  " + TableName + @" StOut

left outer join TallyToVAT.dbo.stockjournal_in stIn on StOut.masterid=stIn.masterid and StOut.code = stin.code

WHERE 1=1 
and StOut.vchno not in (select REFNO from TallyToVAT.dbo.VAT_TRANSFERS_COMPLETED)
and StOut.qty > 0 and  StOut.vchtype='Stock Journal(Transfer)'
--WHERE 1=1 and qty > 0 and  vchtype='Stock Journal(Transfer)'

----------------------------------------!Care on GROUP BY---------------------------------------- 
";

                string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                                    paramVM.BranchCode + "'";

                SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                DataTable branchMap = new DataTable();
                SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                branchAdapter.Fill(branchMap);


                #region Filtering

                string condtionText = "";

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    sqlText +=  @" AND ISNULL(StOut.IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    condtionText = condtionText + @" AND ISNULL(Post,'N')=@PostStatus";
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    condtionText = condtionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                //}
                if (paramVM.TransactionType == "62Out")
                {
                    sqlText += " and StOut.productgroup = 'Finished Goods' ";
                }
                //else if (paramVM.TransactionType == "Import")
                //{
                //    sqlText += " and acc.partycountry != 'Bangladesh'  and qty > 0 ";

                //}
                else
                {
                    sqlText += " and StOut.productgroup != 'Finished Goods' ";
                }



                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText += " AND StOut.vchno = @InvoiceNo";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText += " AND StOut.date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText += " AND StOut.date < dateadd(d,1,@toDate)";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                {
                    //sqlText = sqlText + @" AND pur.BranchCode in (";
                    sqlText = sqlText + @" AND StOut.godown in (";


                    foreach (DataRow dataRow in branchMap.Rows)
                    {
                        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                    }

                    sqlText = sqlText.TrimEnd(',') + ")";
                }

                //string code = commonDal.settingValue("CompanyCode", "Code");

                //////if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "AT")
                //////{

                //////    code = "Core CB";

                //////}

                //condtionText += " and companyCode = '" + code + "' ";


                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    sqlText = sqlText + @" AND BranchCode=@BranchCode";
                //}

                //updateIntegrationTable = updateIntegrationTable.Replace("@condition", condtionText);

                #endregion

                #region Group By

                sqlText += @"

----------------------------------------GROUP BY---------------------------------------- 
GROUP BY 
StOut.vchno
,StOut.godown
,StOut.date
,stIn.godown
,StOut.narration
";

                #endregion

                //sqlText += " ORDER BY TransactionDateTime";

                #endregion

                #region SQLExecution

                //SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn);
                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Parameter Value

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                //}

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                //cmd.ExecuteNonQuery();

                //condtionText += "  and BranchFromVAT = '" +
                //                paramVM.BranchCode + "'";


                //sqlText = sqlText.Replace("@condition", condtionText);
                //cmd.CommandText = sqlText;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                #endregion

                foreach (DataRow tableRow in dtTransferMaster.Rows)
                {
                    string Branch_Code = tableRow["BranchCode"].ToString();
                    string Vehicle = tableRow["Vehicle"].ToString();

                    if (Branch_Code == "Main Location")
                    {
                        Branch_Code = "001";
                    }
                    else
                    {
                        Branch_Code = tableRow["BranchCode"].ToString();
                    }
                    //List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() }, null, null, null, connVM);

                    //ProductVM vm = vms.FirstOrDefault();

                    //if (vm == null)
                    //{
                    //    continue;
                    //    //throw new Exception("Product Code not found in system " +item_Code);
                    //}

                    //tableRow["UOM"] = vm.UOM;

                    tableRow["BranchCode"] = Branch_Code;
                    if (Vehicle != "NA" && Vehicle.Contains(","))
                    {
                        tableRow["VehicleType"] = Vehicle.Split(',')[0];
                        tableRow["VehicleNo"] = Vehicle.Split(',')[1];

                    }
                    else
                    {
                        tableRow["VehicleType"] = "NA";
                        tableRow["VehicleNo"] = "NA";

                    }


                    //dtTransferMaster.Columns.Remove("Vehicle");


                }
                dtTransferMaster.Columns.Remove("Vehicle");


                #region Selected Data

                if (dtTransferMaster != null && dtTransferMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtTransferMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtTransferMaster.Select("InvoiceNo  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtTransferMaster = new DataTable();
                        dtTransferMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_TransferData_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }

        public DataTable GetTransferData_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            DataTable dtTransferMaster = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            #endregion

            #region try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(paramVM.SysDbInfoVmTemp);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);


                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQLText
                //string TableName = "ACIData.dbo.TransferIssues";

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_TransferIssues";
                //}


                sqlText = @"
SELECT
    0								    SL
   ,StOut.vchno						    ID
  , StOut.godown					    BranchCode
  ,format(StOut.[date],'yyyy-MM-dd')    TransactionDateTime
 -- , ProductType					    TransactionType
  , StOut.code						    ProductCode
  , StOut.ProductName				    ProductName
  , StOut.uom						    UOM
  , StOut.qty						    Quantity
  ,	StOut.amount/StOut.qty			    CostPrice
  , stIn.godown		                    TransferToBranchCode
  , 'N'							        Post
  , '0'						            VAT_Rate
  , StOut.vchno							ReferenceNo
  , ''						        	Comments
  , 0									ItemNo
  , 0									BranchId
  , 0									BomId
  , 0									TransferToBranchId
  , ''									CommentsD
  , ''									Weight

  ,StOut.godown                         BranchFromRef
  ,stIn.godown	                        BranchToRef
 -- , ISNULL(NULLIF(VehicleNo, ''), 'NA')VehicleNo
 -- , ISNULL(NULLIF(VehicleType, ''), 'NA')VehicleType
 ,isnull(stIn.vehicleno,'N/A')         VehicleNo
 ,isnull(stIn.vehicletype,'N/A')	   VehicleType
 ,COALESCE(NULLIF(StOut.narration,''),'NA')     Vehicle


FROM  TempIssue_stockjournal_out StOut

left outer join TempReceive_stockjournal_in stIn on StOut.masterid=stIn.masterid  and StOut.code = stin.code

WHERE 1=1 
--and StOut.vchno	 not in (select REFNO from TallyToVAT.dbo.VAT_TRANSFERS_COMPLETED)
and StOut.qty > 0 and  StOut.vchtype='Stock Journal(Transfer) JBD/PLT/DOC/22'
--and  StOut.vchtype='Stock Journal(Transfer)'

";

                #region Filtering

                string condtionText = "";

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    condtionText = condtionText + @" AND ISNULL(IsProcessed,'N')=@Processed";
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    condtionText = condtionText + @" AND ISNULL(Post,'N')=@PostStatus";
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    condtionText = condtionText + @" AND ISNULL(IsPrint,'N')=@PrintStatus";
                //}
                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    sqlText = sqlText + @" AND StOut.vchno	 IN('" + IDs + "')";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText += " AND StOut.vchno = @InvoiceNo";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText += " AND StOut.date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText += " AND StOut.date < dateadd(d,1,@toDate)";
                }

                //string code = commonDal.settingValue("CompanyCode", "Code");

                //if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "AT")
                //{

                //    code = "Core CB";

                //}

                //condtionText += " and companyCode = '" + code + "' ";


                //updateIntegrationTable = updateIntegrationTable.Replace("@condition", condtionText);

                #endregion

                #region SQLExecution

                //SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn);
                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Parameter Value

                //if (paramVM.Processed == "Y" || paramVM.Processed == "N")
                //{
                //    cmd.Parameters.AddWithValue("@Processed", paramVM.Processed);
                //}
                //if (paramVM.PostStatus == "Y" || paramVM.PostStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PostStatus", paramVM.PostStatus);
                //}
                //if (paramVM.PrintStatus == "Y" || paramVM.PrintStatus == "N")
                //{
                //    cmd.Parameters.AddWithValue("@PrintStatus", paramVM.PrintStatus);
                //}

                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }
                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    cmd.Parameters.AddWithValue("@BranchCode", paramVM.BranchCode);
                //}

                #endregion

                cmd.ExecuteNonQuery();

                //condtionText += "  and BranchFromVAT = '" +
                //                paramVM.BranchCode + "'";


                //sqlText = sqlText.Replace("@condition", condtionText);
                //cmd.CommandText = sqlText;


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                //ProductDAL dal = new ProductDAL();
                //foreach (DataRow tableRow in dtTransferMaster.Rows)
                //{
                //    List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" },
                //        new[] { tableRow["ProductCode"].ToString() }, null, null, null, paramVM.SysDbInfoVmTemp);

                //    ProductVM vm = vms.FirstOrDefault();

                //    if (vm != null)
                //    {
                //        tableRow["UOM"] = vm.UOM;
                //        tableRow["CostPrice"] = vm.NBRPrice;
                //        tableRow["VAT_Rate"] = vm.VATRate;
                //    }

                //}

                foreach (DataRow tableRow in dtTransferMaster.Rows)
                {
                    string Branch_Code = tableRow["BranchCode"].ToString();

                    string Vehicle = tableRow["Vehicle"].ToString();

                    if (Branch_Code == "Main Location")
                    {
                        Branch_Code = "001";
                    }
                    else
                    {
                        Branch_Code = tableRow["BranchCode"].ToString();
                    }
                    //List<ProductVM> vms = dal.SelectAll("0", new string[] { "Pr.ProductCode" }, new[] { tableRow["Item_Code"].ToString() }, null, null, null, connVM);

                    //ProductVM vm = vms.FirstOrDefault();

                    //if (vm == null)
                    //{
                    //    continue;
                    //    //throw new Exception("Product Code not found in system " +item_Code);
                    //}

                    //tableRow["UOM"] = vm.UOM;
                    tableRow["BranchCode"] = Branch_Code;

                    ////if (Vehicle != "NA" && Vehicle.Contains(","))
                    ////{
                    ////    tableRow["VehicleType"] = Vehicle.Split(',')[0];
                    ////    tableRow["VehicleNo"] = Vehicle.Split(',')[1];

                    ////}
                    ////else
                    ////{
                    ////    tableRow["VehicleType"] = "NA";
                    ////    tableRow["VehicleNo"] = "NA";

                    ////}

                }

                dtTransferMaster.Columns.Remove("Vehicle");


                #endregion
                #endregion


            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetTransferData", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }

        public ResultVM SaveTransfer_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null, string UserId = "")
        {
            ResultVM rVM = new ResultVM();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;

            #region try

            try
            {
                string code = commonDal.settingValue("CompanyCode", "Code", connVM);

                BranchProfileDAL branchProfile = new BranchProfileDAL();
                DataTable dtBranchInfo = branchProfile.SelectAll(null, new[] { "BranchCode" }, new[] { paramVM.BranchCode });
                paramVM.dtConnectionInfo = dtBranchInfo;


                DataTable dtTransfer = new DataTable();

                dtTransfer = GetTransferData_JAPFA(paramVM);

                if (dtTransfer == null || dtTransfer.Rows.Count == 0)
                {

                    rVM.Message = "This Transaction Already Integrated or Not Exist in Source!";
                    return rVM;
                }

                #region SaveAndProcess
                TransferIssueDAL tDal = new TransferIssueDAL();

                TableValidation_Transfer(dtTransfer, paramVM);

                if (!dtTransfer.Columns.Contains("TransactionType"))
                {
                    DataColumn varDataColumn = new DataColumn("TransactionType") { DefaultValue = paramVM.TransactionType };
                    dtTransfer.Columns.Add(varDataColumn);
                }
                sqlResults = tDal.SaveTempTransfer(dtTransfer, paramVM.BranchCode, paramVM.TransactionType, paramVM.CurrentUser, Convert.ToInt32(paramVM.BranchId), () => { }, null, null, true, connVM, DateTime.Now.ToString("HH:mm:ss"), paramVM.CurrentUser);


                //rVM = Update_TransferData_JAPFA(paramVM, paramVM.SysDbInfoVmTemp);

                //if (sqlResults[0].ToLower() == "success")
                //{

                //    try
                //    {
                //        currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                //        if (currConn.State != ConnectionState.Open)
                //        {
                //            currConn.Open();
                //        }

                //        transaction = currConn.BeginTransaction();


                //        var completedData = dtTransfer.DefaultView.ToTable(true, "ID");

                //        completedData.Columns.Add(new DataColumn() { ColumnName = "BranchCode", DefaultValue = paramVM.BranchCode });
                //        completedData.Columns.Add(new DataColumn() { ColumnName = "CompanyCode", DefaultValue = paramVM.CompanyCode });
                //        completedData.Columns["ID"].ColumnName = "REFNO";

                //        //REFNO

                //        //CommonDAL commonDal = new CommonDAL();

                //        commonDal.BulkInsert("VAT_TRANSFERS_COMPLETED", completedData, currConn, transaction);


                //        transaction.Commit();


                //    }
                //    catch (Exception e)
                //    {
                //        if (transaction != null) { transaction.Rollback(); }
                //        FileLogger.Log("ImportDAL", "Get Receive", e.ToString());

                //    }
                //    finally
                //    {

                //        if (currConn != null)
                //        {
                //            if (currConn.State == ConnectionState.Open)
                //            {
                //                currConn.Close();
                //            }

                //        }
                //    }

                //}

                rVM.Status = sqlResults[0];
                rVM.Message = sqlResults[1];
                rVM.Message = "Saved Successfully";

                #endregion


                //if (paramVM.IDs == null || paramVM.IDs.Count == 0)
                //{
                //    paramVM.IDs = new List<string>();
                //    paramVM.IDs.Add(paramVM.RefNo);

                //}

                //rVM = SaveTransfer(dtTransfer, paramVM, UserId);

            }
            #endregion

            #region catch

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "SaveTransfer_JAPFA", ex.ToString());

                rVM.Message = ex.Message;
                throw ex;

            }
            #endregion
            #region finally

            finally
            {


            }
            #endregion

            return rVM;
        }

        public ResultVM Update_TransferData_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            ResultVM rVM = new ResultVM();
            CommonDAL commonDal = new CommonDAL();

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();
                    transaction = currConn.BeginTransaction();
                }

                #endregion



                string TableName = "TallyToVAT.dbo.stockjournal_out";

                string code = commonDal.settingValue("CompanyCode", "Code");

                //if (code.ToLower() == "aci cb hygine" && paramVM.BranchCode == "P001")
                //{
                //    TableName = "ACIData.dbo.SaleInvoices";

                //}

                if (paramVM.DataSourceType == "Excel")
                {
                    TableName = "VAT_Source_TransferIssues";
                }

                string sqlText = @"";
                sqlText += @" 

UPDATE @TableName SET 
  IsProcessed = 'Y'
, InvoiceNo=tih.TransferIssueNo --Post=tih.Post   
FROM @TableName sTransfer 
INNER JOIN TransferIssues tih on sTransfer.vchno=tih.ImportIDExcel
WHERE 1=1
";
                sqlText = sqlText.Replace("@TableName", TableName);
                string IDs = "";
                if (paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    IDs = string.Join("','", paramVM.IDs);

                    sqlText = sqlText + @" AND sTransfer.vchno IN('" + IDs + "')";

                }

                SqlCommand cmd = new SqlCommand(sqlText, currConn, transaction);

                int rows = cmd.ExecuteNonQuery();

                transaction.Commit();
                rVM.Status = "Success";
                rVM.Message = "Source Data Updated Successfully!";

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "Update_TransferData_JAPFA", ex.ToString());

                rVM.Message = ex.Message;

                if (transaction != null)
                {
                    transaction.Rollback();
                }
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion
            return rVM;
        }

        public DataTable GetSource_TransferALL_Data_Master_JAPFA(IntegrationParam paramVM, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            string sqlText2 = "";
            DataTable dtTransferMaster = new DataTable();
            DataTable dtTransferMasterIN = new DataTable();
            CommonDAL commonDal = new CommonDAL();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            #endregion

            #region try

            try
            {


                string code = commonDal.settingValue("CompanyCode", "Code");

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection(connVM);
                //currConn = _dbsqlConnection.GetDepoConnection(paramVM.dtConnectionInfo);

                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region select Stockjournal_out from middleware

                #region SQLText
                //string TableName = "ACIData.dbo.TransferIssues";
                string TableName = "TallyToVAT.dbo.stockjournal_out";

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_TransferIssues";
                //}


                sqlText = @"

SELECT
      0		        Selected
      ,[masterid]
      ,[alterid]
      ,[vchno]
      ,[date]
      ,[vchtype]
      ,[vchparent]
      ,[productgroup]
      ,[code]
      ,[productname]
      ,[godown]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[amount]
      ,[narration]
      ,[isopt]

FROM  " + TableName + @" 
WHERE 1=1 

----------------------------------------!Care on GROUP BY---------------------------------------- 
";

                //string getBranchMap = @"select * from BranchMapDetails where BranchCode ='" +
                //                    paramVM.BranchCode + "'";

                //SqlCommand branchCmd = new SqlCommand(getBranchMap, currConn);
                //DataTable branchMap = new DataTable();
                //SqlDataAdapter branchAdapter = new SqlDataAdapter(branchCmd);
                //branchAdapter.Fill(branchMap);


                #region Filtering

                string condtionText = "";
                if (paramVM.TransactionType == "62Out")
                {
                    sqlText += " and stockjournal_out.productgroup = 'Finished Goods' ";
                }
                //else if (paramVM.TransactionType == "Import")
                //{
                //    sqlText += " and acc.partycountry != 'Bangladesh'  and qty > 0 ";

                //}
                else
                {
                    sqlText += " and stockjournal_out.productgroup != 'Finished Goods' ";
                }



                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText += " AND stockjournal_out.vchno = @InvoiceNo";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText += " AND stockjournal_out.date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText += " AND stockjournal_out.date < dateadd(d,1,@toDate)";
                }

                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    //sqlText = sqlText + @" AND pur.BranchCode in (";
                //    sqlText = sqlText + @" AND StOut.godown in (";


                //    foreach (DataRow dataRow in branchMap.Rows)
                //    {
                //        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                //    }

                //    sqlText = sqlText.TrimEnd(',') + ")";
                //}

                #endregion


                #endregion

                #region SQLExecution

                //SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn);
                SqlCommand cmd = new SqlCommand(sqlText, currConn);

                #region Parameter Value


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }

                #endregion


                SqlDataAdapter adapter = new SqlDataAdapter(cmd);

                adapter.Fill(dtTransferMaster);

                #endregion

                #region Selected Data

                if (dtTransferMaster != null && dtTransferMaster.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtTransferMaster.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtTransferMaster.Select("InvoiceNo  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtTransferMaster = new DataTable();
                        dtTransferMaster = rows.CopyToDataTable();

                    }


                }



                #endregion

                #endregion

                #region select Stockjournal_IN from middleware

                #region SQLText
                //string TableName = "ACIData.dbo.TransferIssues";
                string TableName2 = "TallyToVAT.dbo.stockjournal_in";

                //if (paramVM.DataSourceType == "Excel")
                //{
                //    TableName = "VAT_Source_TransferIssues";
                //}


                sqlText2 = @"

SELECT
       0		     Selected
      ,[masterid]
      ,[alterid]
      ,[vchno]
      ,[date]
      ,[vchtype]
      ,[vchparent]
      ,[productgroup]
      ,[code]
      ,[productname]
      ,[godown]
      ,[qty]
      ,[uom]
      ,[rate]
      ,[amount]
      ,[narration]
      ,[isopt]
      ,[vehicletype]
      ,[vehicleno]
     
FROM  " + TableName2 + @" 
WHERE 1=1 

----------------------------------------!Care on GROUP BY---------------------------------------- 
";



                #region Filtering


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    sqlText2 += " AND stockjournal_in.vchno = @InvoiceNo";

                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    sqlText2 += " AND stockjournal_in.date >= @fromDate ";
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    sqlText2 += " AND stockjournal_in.date < dateadd(d,1,@toDate)";
                }

                //if (!string.IsNullOrWhiteSpace(paramVM.BranchCode))
                //{
                //    //sqlText = sqlText + @" AND pur.BranchCode in (";
                //    sqlText = sqlText + @" AND StOut.godown in (";


                //    foreach (DataRow dataRow in branchMap.Rows)
                //    {
                //        sqlText += "'" + dataRow["IntegrationCode"] + "',";
                //    }

                //    sqlText = sqlText.TrimEnd(',') + ")";
                //}

                #endregion


                #endregion

                #region SQLExecution

                //SqlCommand cmd = new SqlCommand(updateIntegrationTable, currConn);
                SqlCommand cmd2 = new SqlCommand(sqlText2, currConn);

                #region Parameter Value


                if (!string.IsNullOrWhiteSpace(paramVM.RefNo))
                {
                    cmd2.Parameters.AddWithValue("@InvoiceNo", paramVM.RefNo);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.FromDate))
                {
                    cmd2.Parameters.AddWithValue("@fromDate", paramVM.FromDate);
                }

                if (!string.IsNullOrWhiteSpace(paramVM.ToDate))
                {
                    cmd2.Parameters.AddWithValue("@toDate", paramVM.ToDate);
                }

                #endregion


                SqlDataAdapter adapter2 = new SqlDataAdapter(cmd2);

                adapter2.Fill(dtTransferMasterIN);

                #endregion

                #region Selected Data

                if (dtTransferMasterIN != null && dtTransferMasterIN.Rows.Count > 0 && paramVM.IDs != null && paramVM.IDs.Count > 0)
                {
                    DataTable dtTemp = new DataTable();
                    dtTemp = dtTransferMasterIN.Copy();

                    string IDs = string.Join("','", paramVM.IDs);

                    DataRow[] rows = dtTransferMasterIN.Select("InvoiceNo  IN ('" + IDs + "')");

                    if (rows != null && rows.Count() > 0)
                    {
                        foreach (DataRow dr in rows)
                        {
                            dr["Selected"] = 1;
                        }

                        dtTransferMasterIN = new DataTable();
                        dtTransferMasterIN = rows.CopyToDataTable();

                    }


                }



                #endregion

                #endregion

                #region Stockjournal_out bulkinsert and filter data
                string sqlTexttemp = "";
                sqlTexttemp = @"delete from TempIssue_stockjournal_out";

                SqlCommand cmdtemp = new SqlCommand(sqlTexttemp, currConn, transaction);

                cmdtemp.ExecuteNonQuery();
                dtTransferMaster.Columns.Remove("Selected");
                var result = commonDal.BulkInsert("TempIssue_stockjournal_out", dtTransferMaster, currConn, transaction, 0, null, null);

                #region DeleteExitdata

                string DeleteExitdata = @"
----------- delete exit data --------------
delete TempIssue_stockjournal_out from TransferIssues where TempIssue_stockjournal_out.vchno =TransferIssues.ImportIDExcel

";

                #endregion

                cmd.CommandText = DeleteExitdata;
                cmd.ExecuteNonQuery();

                #endregion

                #region Stockjournal_IN bulkinsert and filter data
                string sqlTexttemp2 = "";
                sqlTexttemp2 = @"delete from TempReceive_stockjournal_in";

                SqlCommand cmdtemp2 = new SqlCommand(sqlTexttemp2, currConn, transaction);

                cmdtemp2.ExecuteNonQuery();
                dtTransferMasterIN.Columns.Remove("Selected");
                var result2 = commonDal.BulkInsert("TempReceive_stockjournal_in", dtTransferMasterIN, currConn, transaction, 0, null, null);

                #region DeleteExitdata

                string DeleteExitdata2 = @"
----------- delete exit data --------------
delete TempIssue_stockjournal_out from TransferIssues where TempIssue_stockjournal_out.vchno =TransferIssues.ImportIDExcel

";

                #endregion

                cmd2.CommandText = DeleteExitdata2;
                cmd2.ExecuteNonQuery();

                #endregion

            }
            #endregion

            #region Catch and Finall
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetSource_TransferALL_Data_Master_JAPFA", ex.ToString() + "\n" + sqlText);

                throw ex;
            }
            finally
            {

                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }

                }
            }
            #endregion

            return dtTransferMaster;

        }


        #endregion

        #endregion

        #region Product Price History

        public string[] ImportProductPriceHistory(DataTable ProductPriceHistory, SqlConnection vConnection = null, SqlTransaction vTransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region variable
            string[] retResults = new string[4];
            retResults[0] = "Fail";
            retResults[1] = "Fail";
            retResults[2] = "";
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            DataTable table = new DataTable();
            string sqlText = "";

            #endregion variable

            #region try

            try
            {
                #region Open Connection and Transaction

                if (vConnection != null)
                {
                    currConn = vConnection;
                }

                if (vTransaction != null)
                {
                    transaction = vTransaction;
                }

                if (vConnection == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    currConn.Open();

                }

                if (vTransaction == null)
                {
                    transaction = currConn.BeginTransaction();
                }
                #endregion

                #region tempTable

                string tempTable = @"
create table #temp(
sl int identity(1,1), 
ProductGroup varchar(120),
ItemNo varchar(20),
ProductCode varchar(50),
ProductName varchar(MAX),
EffectDate datetime,
VatablePrice decimal(25, 9),
CreatedBy varchar(120),
CreatedOn datetime,

)";

                #endregion

                #region Delete zero price data

                string deletedata = @"
delete #temp where VatablePrice=0
";

                #endregion

                #region get all data

                string getData = @"
select * from #temp
";

                #endregion

                #region update data

                string updateItem = @"
update #temp set #temp.ItemNo=Products.ItemNo from #temp 
inner join Products on Products.ProductCode=#temp.ProductCode and #temp.ProductCode!='0' and #temp.ProductCode!='-';

";

                #endregion

                #region insert data

                string insertdata = @"
insert into ProductPriceHistorys (
 ItemNo,ProductCode,EffectDate,VatablePrice,CreatedBy,CreatedOn
)
select ItemNo,ProductCode,EffectDate,VatablePrice,CreatedBy,CreatedOn from #temp
";

                #endregion

                CommonDAL commondal = new CommonDAL();
                SqlCommand cmd = new SqlCommand(tempTable, currConn, transaction);
                SqlDataAdapter adapter = new SqlDataAdapter();
                cmd.ExecuteNonQuery();

                string[] tempRes = commondal.BulkInsert("#temp", ProductPriceHistory, currConn, transaction);

                if (tempRes[0].ToLower() == "success")
                {
                    cmd.CommandText = deletedata;
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = getData;
                    adapter.SelectCommand = cmd;
                    adapter.Fill(table);

                    if (table == null || table.Rows.Count <= 0)
                    {
                        throw new Exception("Data not available. All data are zero price");
                    }

                    cmd.CommandText = updateItem;
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = insertdata;
                    cmd.ExecuteNonQuery();

                    retResults[0] = "Success";
                    retResults[1] = "Data import successfully";

                }
                else
                {
                    throw new Exception("Import Failed");
                }

                #region Commit

                if (retResults[0].ToLower() == "success" && vTransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion Commit

                return retResults;

            }
            #endregion

            #region Catch and finally

            catch (Exception ex)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                }
                FileLogger.Log("ImportDAL", "ImportProductPriceHistory", ex.ToString(), "ProductPriceHistory");

                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open && vConnection == null)
                {
                    currConn.Close();
                }
            }

            #endregion

        }

        #endregion


        #region  Meghana 

        public string[] MeghnaImportExcelFile(ImportVM paramVM, DataTable dt = null, SysDBInfoVMTemp connVM = null)
        {
            #region Initializ
            string sqlText = "";
            int Id = 0;
            string[] retResults = new string[6];
            retResults[0] = "Fail";//Success or Fail
            retResults[1] = "Fail";// Success or Fail Message
            retResults[2] = Id.ToString();// Return Id
            retResults[3] = sqlText; //  SQL Query
            retResults[4] = "ex"; //catch ex
            retResults[5] = "ImportExcelFile"; //Method Name
            #endregion

            #region try
            try
            {
                DataSet ds = new DataSet();

                //dtMaster = GetDataTableFromExcel(paramVM);
                ds = GetDataSetFromExcel(paramVM);



                #region Data Insert
                if (paramVM.TableName == "SA-02")
                {
                    retResults = MeghnaSaleSaveAndProcess(ds,paramVM, () => { }, connVM, null, null);

                }
                if (paramVM.TableName == "Transfer")
                {
                    retResults = MeghnaTransferSaveAndProcess(ds, () => { }, connVM, null, null);

                }

                if (retResults[0] == "Fail")
                {
                    throw new ArgumentNullException("", retResults[1]);
                }
                #endregion

                #region SuccessResult
                retResults[0] = "Success";
                retResults[1] = "Data Save Successfully.";
                #endregion SuccessResult
            }
            #endregion try
            #region Catch and Finall
            catch (Exception ex)
            {
                retResults[0] = "Fail";
                retResults[1] = ex.Message;
                retResults[4] = ex.Message.ToString(); //catch ex

                FileLogger.Log("ImportDAL", "MeghnaImportExcelFile", ex.ToString() + "\n" + sqlText);

                return retResults;
            }
            finally
            {
            }
            #endregion
            #region Results
            return retResults;
            #endregion
        }

        public string[] MeghnaSaleSaveAndProcess(DataSet ds,ImportVM pamVM, Action callBack = null, SysDBInfoVMTemp connVM = null
            , SqlConnection vConnection = null, SqlTransaction vTransaction = null)
        {
            #region Initializations

            SqlTransaction transaction = null;
            SqlConnection connection = null;
            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();
            SaleMPLDAL SaleMPDal = new SaleMPLDAL();
            int transResult = 0;
            #endregion

            #region try

            try
            {

                #region Connection and Transaction

                if (vConnection == null)
                {
                    connection = _dbsqlConnection.GetConnection(connVM);
                    connection.Open();
                }
                else
                {
                    connection = vConnection;
                }
                if (vTransaction == null)
                {
                    transaction = connection.BeginTransaction();
                }
                else
                {
                    transaction = vTransaction;
                }

                #endregion



                #region Delete and Bulk Insert to MPLSalesTempData

                string sqlText = "";
                sqlText = @"Delete from MPLSalesTempData

                            Delete from MPLTempSalesBankPayment

                             ";
                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                transResult = cmd.ExecuteNonQuery();

                int Sale = ds.Tables["SaleM"].Rows.Count;
                //int BankPayment = ds.Tables["BankPaymentM"].Rows.Count;
                result = commonDal.BulkInsert("MPLSalesTempData", ds.Tables["SaleM"], connection, transaction, 10000, null, connVM);
                //result = commonDal.BulkInsert("MPLTempSalesBankPayment", ds.Tables["BankPaymentM"], connection, transaction, 10000, null, connVM);
                #endregion


                #region Update MPLSalesTempData

                string update = @"  
update MPLSalesTempData set ItemNo=Products.ItemNo from
MPLSalesTempData inner join
Products on Products.ProductCode=MPLSalesTempData.ProductCode  

UPDATE MPLSalesTempData
SET VATRate = 
  CASE 
    WHEN Products.IsFixedVAT = 'N' THEN Products.VATRate
    ELSE Products.FixedVATAmount
  END
FROM MPLSalesTempData
INNER JOIN Products ON Products.ProductCode = MPLSalesTempData.ProductCode;

update MPLSalesTempData set IsFixedVAT=Products.IsFixedVAT from
MPLSalesTempData inner join
Products on Products.ProductCode=MPLSalesTempData.ProductCode  


update MPLSalesTempData set CustomerId=Customers.CustomerID from
MPLSalesTempData inner join
Customers on Customers.CustomerCode=MPLSalesTempData.CustomerCode  

	update MPLSalesTempData set DeliveryAddress=Customers.Address1 from
MPLSalesTempData inner join
Customers on Customers.CustomerCode=MPLSalesTempData.CustomerCode  

update MPLSalesTempData set BranchId=BranchProfiles.BranchID from
MPLSalesTempData inner join
BranchProfiles on BranchProfiles.BranchCode=MPLSalesTempData.BranchCode 

update MPLTempSalesBankPayment set BankId=MPLBDBankInformations.BankID from
MPLTempSalesBankPayment inner join
MPLBDBankInformations on MPLBDBankInformations.BankCode=MPLTempSalesBankPayment.BankCode 

 		 Update MPLSalesTempData set Pkgs=Quantity
  where Package in ('Bulk','1X 1','1X1','1×1','1 X 1','2 x 200','27 X 208','15 X 200','1 X 200','1X 200','1  X 200','200 X 1','1X200','1×200','1 X 200','1 X 205','1 X 208','1  X 208','1X208','1X 205','1X205')




UPDATE MPLSalesTempData
SET NBRPrice = 
  CASE 
    WHEN IsFixedVAT = 'Y' THEN UnitPriceWithVAT - VATRate
    ELSE UnitPriceWithVAT * 100 / (100 + VATRate)
  END
FROM MPLSalesTempData

UPDATE MPLSalesTempData
SET SubTotal = Pkgs * NBRPrice
   



FROM MPLSalesTempData

UPDATE MPLSalesTempData
SET VATAmount = 
  CASE 
    WHEN  IsFixedVAT = 'Y' THEN Pkgs * VATRate
    ELSE SubTotal * VATRate / 100 
  END
FROM MPLSalesTempData



UPDATE MPLSalesTempData
SET lineTotal = Pkgs * UnitPriceWithVAT

";

                cmd.CommandText = update;
                cmd.ExecuteNonQuery();
                transaction.Commit();

               

                #endregion

                #region Select Distinct Data and Process model
                SalesInvoiceMPLHeaderVM MasterVM = new SalesInvoiceMPLHeaderVM();
                List<SalesInvoiceMPLDetailVM> SalesInvoiceMPLDetailVMs = new List<SalesInvoiceMPLDetailVM>();
                List<SalesInvoiceMPLBankPaymentVM> SalesInvoiceMPLBankPaymentVMs = new List<SalesInvoiceMPLBankPaymentVM>();

                string DistinctData = @"  Select Distinct ImportId from MPLSalesTempData";
                cmd.CommandText = DistinctData;
                SqlDataAdapter ddataAdapter = new SqlDataAdapter(cmd);
                DataTable DisticntData = new DataTable();
                ddataAdapter.Fill(DisticntData);
                if (DisticntData.Rows.Count == 0)
                {
                    throw new Exception("There is no data to Process");
                }
               
                    foreach (DataRow dr in DisticntData.Rows)
                    {
                        string ImportId = dr["ImportId"].ToString();
                    MasterVM = GetMPLSalesTempDataMaster(ImportId, connection, transaction, connVM).FirstOrDefault();

                        MasterVM.CreatedBy = pamVM.CreatedBy;
                        MasterVM.CreatedOn = pamVM.CreatedOn;
                        MasterVM.LastModifiedBy = pamVM.LastModifiedBy;
                        MasterVM.LastModifiedOn = pamVM.LastModifiedOn;

                        if (MasterVM.CustomerID == "0" || MasterVM.CustomerID == null)
                        {
                        throw new Exception("Customer Not Found For ImportId: " + ImportId);
                        }

                        MasterVM.SalesInvoiceMPLDetailVMs = GetMPLSalesTempDataDetails(ImportId, connection, transaction, connVM);

                    foreach (var SalesInvoiceMPLDetailVM in MasterVM.SalesInvoiceMPLDetailVMs)
                        {
                            if (string.IsNullOrWhiteSpace(SalesInvoiceMPLDetailVM.ItemNo))
                            {
                                throw new Exception("ItemNo Not Found For ImportId: " + ImportId);

                            }
                        }
                        MasterVM.SalesInvoiceMPLBankPaymentVMs = GetMPLSalesTempDataBankPayment(ImportId, connection, transaction, connVM);

                        foreach (var SalesInvoiceMPLBankPaymentVM in MasterVM.SalesInvoiceMPLBankPaymentVMs)
                        {
                        if (SalesInvoiceMPLBankPaymentVM.BankId == 0)
                            {
                                throw new Exception("Bank Not Found For ImportId: " + ImportId);

                            }
                        }
                        result = SaleMPDal.SalesMPLInsert(MasterVM, transaction, connection, connVM);
                        if (result[0] == "Fail")
                        {
                            string msg = result[1].Split('\r').FirstOrDefault();
                            throw new Exception(msg + ImportId);

                        }

                    }
                #endregion

                #region ImportBigData


                #endregion






                #region Commit

                if (result[0].ToLower() == "success" && vTransaction == null)
                {
                    transaction.Commit();
                }

                #endregion

                //FileLogger.Log("SaleDAL ", "SaveAndProcess",
                //    "End Process : " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

            }
            #endregion

            #region Catch and Finally

            catch (Exception e)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                    //transaction.Commit();

                }

                result[0] = "fail";

                ////FileLogger.Log("SaleDAL124", "SaveAndProcess", e.Message + " \n" + e.StackTrace);

                FileLogger.Log("ImportDAL", "MeghnaSaveAndProcess", e.ToString());

                throw e;
            }
            finally
            {

                if (connection.State == ConnectionState.Open && vConnection == null)
                {
                    connection.Close();

                }

            }
            #endregion

            return result;
        }


        public string[] MeghnaTransferSaveAndProcess(DataSet ds, Action callBack = null, SysDBInfoVMTemp connVM = null
    , SqlConnection vConnection = null, SqlTransaction vTransaction = null)
        {
            #region Initializations

            SqlTransaction transaction = null;
            SqlConnection connection = null;
            string[] result = new[] { "Fail" };
            CommonDAL commonDal = new CommonDAL();
            TransferIssueMPLDAL TransferIssueMPLDal = new TransferIssueMPLDAL();
            int transResult = 0;
            #endregion

            #region try

            try
            {

                #region Connection and Transaction

                if (vConnection == null)
                {
                    connection = _dbsqlConnection.GetConnection(connVM);
                    connection.Open();
                }
                else
                {
                    connection = vConnection;
                }
                if (vTransaction == null)
                {
                    transaction = connection.BeginTransaction();
                }
                else
                {
                    transaction = vTransaction;
                }

                #endregion



                #region Delete and Bulk Insert to SalesTempData

                string sqlText = "";
                sqlText = @"Delete from MPLTransferTempData


                             ";
                SqlCommand cmd = new SqlCommand(sqlText, connection, transaction);
                transResult = cmd.ExecuteNonQuery();


                result = commonDal.BulkInsert("MPLTransferTempData", ds.Tables["TransferIssueM"], connection, transaction, 10000, null, connVM);
                #endregion

                #region Update MPLTransferTempData

                string update = @"  
update MPLTransferTempData set ItemNo=Products.ItemNo from
MPLTransferTempData inner join
Products on Products.ProductCode=MPLTransferTempData.ProductCode  


UPDATE MPLTransferTempData
SET VATRate = 
  CASE 
    WHEN Products.IsFixedVAT = 'N' THEN Products.VATRate
    ELSE Products.FixedVATAmount
  END
FROM MPLTransferTempData
INNER JOIN Products ON Products.ProductCode = MPLTransferTempData.ProductCode;

UPDATE MPLTransferTempData
SET SubTotal = Quantity * CostPrice

update MPLTransferTempData set FromBranchId=BranchProfiles.BranchID from
MPLTransferTempData inner join
BranchProfiles on BranchProfiles.BranchCode=MPLTransferTempData.FromBranchCode 

update MPLTransferTempData set ToBranchId=BranchProfiles.BranchID from
MPLTransferTempData inner join
BranchProfiles on BranchProfiles.BranchCode=MPLTransferTempData.ToBranchCode 



";

                cmd.CommandText = update;
                cmd.ExecuteNonQuery();

                #endregion

                #region Select Distinct Data and Process model
                TransferMPLIssueVM MasterVM = new TransferMPLIssueVM();
                List<TransferMPLIssueDetailVM> TransferMPLIssueDetailVMs = new List<TransferMPLIssueDetailVM>();

                string DistinctData = @"  Select Distinct ImportId from MPLTransferTempData";
                cmd.CommandText = DistinctData;
                SqlDataAdapter ddataAdapter = new SqlDataAdapter(cmd);
                DataTable DisticntData = new DataTable();
                ddataAdapter.Fill(DisticntData);
                if (DisticntData.Rows.Count == 0)
                {
                    throw new Exception("There is no data to Process");
                }

                foreach (DataRow dr in DisticntData.Rows)
                {
                    string ImportId = dr["ImportId"].ToString();
                    MasterVM = GetMPLTransferTempDataMaster(ImportId, connection, transaction, connVM).FirstOrDefault();

                    if (MasterVM.BranchId == 0)
                    {
                        throw new Exception("From Branch Not Found For ImportId: " + ImportId);
                    }
                    if (MasterVM.TransferTo == 0)
                    {
                        throw new Exception("Transfer To Branch Not Found For ImportId: " + ImportId);
                    }

                    MasterVM.TransferMPLIssueDetailVMs = GetMPLTransferTempDataDetails(ImportId, connection, transaction, connVM);

                    foreach (var TransferMPLIssueDetailVM in MasterVM.TransferMPLIssueDetailVMs)
                    {
                        if (string.IsNullOrWhiteSpace(TransferMPLIssueDetailVM.ItemNo))
                        {
                            throw new Exception("ItemNo Not Found For ImportId: " + ImportId);

                        }
                    }

                    result = TransferIssueMPLDal.TransIssueMPLInsert(MasterVM, transaction, connection, connVM);


                }
                #endregion

               





                #region Commit

                if (result[0].ToLower() == "success" && vTransaction == null)
                {
                    transaction.Commit();
                }

                #endregion

                //FileLogger.Log("SaleDAL ", "SaveAndProcess",
                //    "End Process : " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));

            }
            #endregion

            #region Catch and Finally

            catch (Exception e)
            {
                if (transaction != null && vTransaction == null)
                {
                    transaction.Rollback();
                    //transaction.Commit();

                }

                result[0] = "fail";

                ////FileLogger.Log("SaleDAL124", "SaveAndProcess", e.Message + " \n" + e.StackTrace);

                FileLogger.Log("ImportDAL", "MeghnaTransferSaveAndProcess", e.ToString());

                throw e;
            }
            finally
            {

                if (connection.State == ConnectionState.Open && vConnection == null)
                {
                    connection.Close();

                }

            }
            #endregion

            return result;
        }

        public List<SalesInvoiceMPLHeaderVM> GetMPLSalesTempDataMaster(string ImportId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            List<SalesInvoiceMPLHeaderVM> lst = new List<SalesInvoiceMPLHeaderVM>();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("GetMPLSalesTempDataMaster");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @" 
Select Distinct 
 [ImportId]
,CONVERT(DATETIME, DeliveryDate, 103)InvoiceDateTime
,CONVERT(DATETIME, DeliveryDate, 103)DeliveryDate
      ,[BranchId]
      ,[CustomerId]
	  ,[DeliveryAddress]
      ,[WetCharge]
      ,[ToPay]
      ,[Prepaid]
      ,[Toll]
      ,[LF]
      ,[RF]
      ,[SC]
      ,[ShortExcessAmnt]
      ,[DC]
      ,[ATV]
      ,[OtherTotalAmnt]
      ,'Other'[TransactionType]
      ,'SA-02'[ReportType]
      ,VehicleType
      ,VehicleNo
	  from MPLSalesTempData 
WHERE 1=1  ";

                if (!string.IsNullOrEmpty(ImportId))
                {
                    
                        sqlText += @" AND ImportId=@ImportId";
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleDetail = new SqlCommand();
                objCommSaleDetail.Connection = currConn;
                objCommSaleDetail.Transaction = transaction;
                objCommSaleDetail.CommandText = sqlText;
                objCommSaleDetail.CommandType = CommandType.Text;

                #endregion.

                #region Parameter

                if (!string.IsNullOrEmpty(ImportId))
                {
                    objCommSaleDetail.Parameters.AddWithValue("@ImportId", ImportId);
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleDetail);
                dataAdapter.Fill(dataTable);

                lst = dataTable.ToList<SalesInvoiceMPLHeaderVM>();
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataMaster", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataMaster", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return lst;
        }


        public List<SalesInvoiceMPLDetailVM> GetMPLSalesTempDataDetails(string ImportId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            List<SalesInvoiceMPLDetailVM> lst = new List<SalesInvoiceMPLDetailVM>();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("GetMPLSalesTempDataDetails");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @" 
SELECT 
      [ProductCode]
      ,[ItemNo]
      ,[BranchId]
      ,[InvoiceDateTime]
      ,[Quantity][InputQuantity]
      ,[Quantity]
      ,[VATRate]
      ,'LTR'[UOM]
      ,[IsFixedVAT]
      ,[UnitPriceWithVAT]
      ,[NBRPrice]
      ,[VATAmount]
      ,[Subtotal]
      ,[LineTotal]
	  ,[Quantity][UOMQty]
      ,[NBRPrice][UOMPrice]
      ,'1'[UOMc]
      ,'LTR'[UOMn]
      ,'Y'[Post]
      ,'Other'[TransactionType]
      ,'VAT-4.3'VATName
	  from MPLSalesTempData 
WHERE 1=1  ";

                if (!string.IsNullOrEmpty(ImportId))
                {

                    sqlText += @" AND ImportId=@ImportId";
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleDetail = new SqlCommand();
                objCommSaleDetail.Connection = currConn;
                objCommSaleDetail.Transaction = transaction;
                objCommSaleDetail.CommandText = sqlText;
                objCommSaleDetail.CommandType = CommandType.Text;

                #endregion.

                #region Parameter

                if (!string.IsNullOrEmpty(ImportId))
                {
                    objCommSaleDetail.Parameters.AddWithValue("@ImportId", ImportId);
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleDetail);
                dataAdapter.Fill(dataTable);

                lst = dataTable.ToList<SalesInvoiceMPLDetailVM>();
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataDetails", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataDetails", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return lst;
        }


        public List<SalesInvoiceMPLBankPaymentVM> GetMPLSalesTempDataBankPayment(string ImportId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            List<SalesInvoiceMPLBankPaymentVM> lst = new List<SalesInvoiceMPLBankPaymentVM>();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("GetMPLSalesTempDataBankPayment");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @" 
Select 
BankId
,ModeOfPayment
,InstrumentNo
,CONVERT(DATETIME, InstrumentDate, 103)InstrumentDate
,Amount

from MPLTempSalesBankPayment
WHERE 1=1  ";

                if (!string.IsNullOrEmpty(ImportId))
                {

                    sqlText += @" AND ImportId=@ImportId";
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleDetail = new SqlCommand();
                objCommSaleDetail.Connection = currConn;
                objCommSaleDetail.Transaction = transaction;
                objCommSaleDetail.CommandText = sqlText;
                objCommSaleDetail.CommandType = CommandType.Text;

                #endregion.

                #region Parameter

                if (!string.IsNullOrEmpty(ImportId))
                {
                    objCommSaleDetail.Parameters.AddWithValue("@ImportId", ImportId);
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleDetail);
                dataAdapter.Fill(dataTable);

                lst = dataTable.ToList<SalesInvoiceMPLBankPaymentVM>();
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataBankPayment", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataBankPayment", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return lst;
        }

        public List<SalesInvoiceMPLBankPaymentVM> GetMPLSalesTempDataBankPaymentCR(string ImportId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            List<SalesInvoiceMPLBankPaymentVM> lst = new List<SalesInvoiceMPLBankPaymentVM>();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("GetMPLSalesTempDataBankPayment");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @" 
  Select 
2 BankId
,'CR' ModeOfPayment
,'-'InstrumentNo
,CONVERT(DATETIME, DeliveryDate, 103)InstrumentDate
,sum (LineTotal) Amount
from MPLSalesTempData
WHERE 1=1 
";

                if (!string.IsNullOrEmpty(ImportId))
                {

                    sqlText += @" AND ImportId=@ImportId";
                }
                sqlText += @" group by ImportId,DeliveryDate ";
                #endregion

                #region SQL Command

                SqlCommand objCommSaleDetail = new SqlCommand();
                objCommSaleDetail.Connection = currConn;
                objCommSaleDetail.Transaction = transaction;
                objCommSaleDetail.CommandText = sqlText;
                objCommSaleDetail.CommandType = CommandType.Text;

                #endregion.

                #region Parameter

                if (!string.IsNullOrEmpty(ImportId))
                {
                    objCommSaleDetail.Parameters.AddWithValue("@ImportId", ImportId);
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleDetail);
                dataAdapter.Fill(dataTable);

                lst = dataTable.ToList<SalesInvoiceMPLBankPaymentVM>();
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataBankPayment", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetMPLSalesTempDataBankPayment", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return lst;
        }


        public List<TransferMPLIssueVM> GetMPLTransferTempDataMaster(string ImportId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            List<TransferMPLIssueVM> lst = new List<TransferMPLIssueVM>();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("GetMPLTransferTempDataMaster");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @" 
  Select Distinct 
   ImportId
   ,FromBranchId BranchId
   ,ToBranchId TransferTo
   ,TransferDateTime
   ,'62Out'TransactionType
   ,'N'Post
  from MPL2012_Demo_DB.dbo. MPLTransferTempData
where 1=1
 ";

                if (!string.IsNullOrEmpty(ImportId))
                {

                    sqlText += @" AND ImportId=@ImportId";
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleDetail = new SqlCommand();
                objCommSaleDetail.Connection = currConn;
                objCommSaleDetail.Transaction = transaction;
                objCommSaleDetail.CommandText = sqlText;
                objCommSaleDetail.CommandType = CommandType.Text;

                #endregion.

                #region Parameter

                if (!string.IsNullOrEmpty(ImportId))
                {
                    objCommSaleDetail.Parameters.AddWithValue("@ImportId", ImportId);
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleDetail);
                dataAdapter.Fill(dataTable);

                lst = dataTable.ToList<TransferMPLIssueVM>();
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ImportDAL", "GetMPLTransferTempDataMaster", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetMPLTransferTempDataMaster", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return lst;
        }


        public List<TransferMPLIssueDetailVM> GetMPLTransferTempDataDetails(string ImportId, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null, SysDBInfoVMTemp connVM = null)
        {
            #region Variables

            List<TransferMPLIssueDetailVM> lst = new List<TransferMPLIssueDetailVM>();
            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("GetMPLTransferTempDataDetails");

            #endregion

            #region Try
            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection(connVM);
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @" 
  Select 
   FromBranchId BranchId
   ,ToBranchId TransferTo
   ,TransferDateTime
   ,'62Out'TransactionType
   ,'N'Post
   ,ItemNo
   ,Quantity RequestedQuantity
   ,Quantity RequestedVolumn
   ,Quantity
   ,'LTR'[UOM]
   ,VATRate
   ,CostPrice
   ,SubTotal
   ,'LTR'[UOMn]
   ,'1'[UOMc]
   ,Quantity UOMQty
   ,SubTotal UOMPrice
   ,Temperature
   ,SP_Gravity
   ,QtyAt30Temperature
   ,dip
   ,WagonNo

  from MPLTransferTempData
WHERE 1=1  ";

                if (!string.IsNullOrEmpty(ImportId))
                {

                    sqlText += @" AND ImportId=@ImportId";
                }

                #endregion

                #region SQL Command

                SqlCommand objCommSaleDetail = new SqlCommand();
                objCommSaleDetail.Connection = currConn;
                objCommSaleDetail.Transaction = transaction;
                objCommSaleDetail.CommandText = sqlText;
                objCommSaleDetail.CommandType = CommandType.Text;

                #endregion.

                #region Parameter

                if (!string.IsNullOrEmpty(ImportId))
                {
                    objCommSaleDetail.Parameters.AddWithValue("@ImportId", ImportId);
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleDetail);
                dataAdapter.Fill(dataTable);

                lst = dataTable.ToList<TransferMPLIssueDetailVM>();
            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                FileLogger.Log("ImportDAL", "GetMPLTransferTempDataDetails", sqlex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", sqlex.Message.ToString());
            }
            catch (Exception ex)
            {
                FileLogger.Log("ImportDAL", "GetMPLTransferTempDataDetails", ex.ToString() + "\n" + sqlText);
                throw new ArgumentNullException("", ex.Message.ToString());
            }
            finally
            {
                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return lst;
        }


        #endregion


    }

}
